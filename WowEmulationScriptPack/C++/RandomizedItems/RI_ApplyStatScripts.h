#pragma once

class Player;
enum ItemModType;
enum UnitMods;
class RI_StatStore;

typedef void(*RI_ApplyStatFunc)(bool Apply, Player *p, RI_StatStore *param);

void RI_AS_ItemMod(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_UnitModFlat(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_MagicFind(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_MagicStrength(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_MagicFindNoInstance(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_MagicStrengthNoInstance(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_DamageDoneSchool(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_DamageDoneTargetHPPCT(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_DamageDoneTargetHPMissingPCT(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_HealDoneTargetHPPCT(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_HealDoneTargetHPMissingPCT(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_SpellModFlat(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_SpellModPCT(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_SpellModPCTNegative(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_DropChanceNoJunk(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_HealthRegenAlways(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_PowerRegenAlways(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_PowerBurn(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_GainPassiveBuff(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_CastOnDamge(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_SpellAuraOnCaster(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_ManaPCTShield(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_ManaShield(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_LifeSteal(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_ManaToDamage(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_DamageToMana(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_GoldRate(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_CastOnDeadlyBlow(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_MinMaxDamage(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_CastSpeedMod(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_ExplodeOnTargetDie(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_LightningOnStruck(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_DamageTakenAttackerCount(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_DamageTakenToDmgDone(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_StatPCT(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_DamageTakenRaidSize(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_DamageDoneRaidSize(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_DamageTakenFromGold(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_CastTimeMod(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_TalentPoints(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_DamageShareTank(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_DamageShareCaster(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_ReduceCooldownPrevSpell(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_ExtraDmgLowHealth(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_ExtraEvadeLowHealth(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_ExtraAbsorbLowHealth(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_StatRollChance(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_DamageTakenMaxHP(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_RemoveDebuffOnHeal(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_DisengageOnDmgVictim(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_StormStrikeOnHeal(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_PotionCooldownOnDamageTaken(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_OverhealsToDamage(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_PartyMimic(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_HealthBasedHeal(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_MirrorCast(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_HealDmg_UniqueKill(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_HealDmg_UniqueItemUse(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_HealDmg_Achievements(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_HealDmg_Quests(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_HealDmg_HonorableKills(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_LearnSpell(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_ThreathMod(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_ThreathModPet(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_PetAura(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_HealDmg_LoginStreak(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_AutoChargeOnTargetSwap(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_StatToSpellDmg(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_StatToSpellHeal(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_HealAbsorbRecharge(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_TransmogDiscover(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_CastOnMove_Location(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_CastOnMove_FreeSpell(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_StatToAttackPower(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_StatToRangedAttackPower(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_AllowCastWhileMove(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_AllowCastWhileCast(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_AllowCastNoFace(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_MeleeHasteToDMG(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_RangedHasteToDMG(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_SpellHasteToDMG(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_SpellHasteToHeal(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_SpellModFlatSpellTarget(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_ChangeDmgType(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_SlamOnJump(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_ElectrocuteWhileCast(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_DiabloTransform(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_DistanceHealBoost(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_BloodLustOnDamageTaken(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_MoveExpode(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_SpellModFlatSpellRange(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_AuraMaxStacks(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_ArmorToResistance(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_HealNearbyPlayer(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_DmgNearbyPlayer(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_DustGainPCT(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_KillStreakDMG(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_LowHealthHealStreak(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_SimilarDamageTaken(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_DamageTakenSplitOverTime(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_PowerRegenFlat(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_PowerRegenPCT(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_PowerRegenRune(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_CastOnKill(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_ExtraDmgWhileBehindTarget_Flat(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_ExtraDmgReduceWhileInFrontTarget_Flat(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_HealsRestoreDamageTaken(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_SpellsRestoreMana(bool Apply, Player *p, RI_StatStore *param);
//void RI_AS_XPGain(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_SingleTargetToAOE(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_CastOnHit(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_LightningOnHit(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_HealthToDamage(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_PowerMissingToDMGPCT(bool Apply, Player *p, RI_StatStore *param);
void RI_AS_DamageDonePCT(bool Apply, Player *p, RI_StatStore *param);
