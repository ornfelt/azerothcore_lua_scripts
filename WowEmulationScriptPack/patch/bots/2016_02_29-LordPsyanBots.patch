From fb203ccb0d2aea55ef5dc8e34b549d1e44b06f06 Mon Sep 17 00:00:00 2001
From: LordPsyan <realmsofwarcraft@gmail.com>
Date: Mon, 29 Feb 2016 07:33:55 -0600
Subject: [PATCH] 2016_02_29-LordPsyanBots

---
 cmake/options.cmake                                |     1 +
 .../LordPsyanBots/character_lordpsyanbots.sql      | 10771 +++++++++++++++++++
 .../characters_ai_playerbot_custom_strategy.sql    |    19 +
 .../characters_ai_playerbot_speech.sql             |   241 +
 .../LordPsyanBots/world_lordpsyanbots.sql          |   170 +
 sql/base/characters.LordPsyanBots-base.sql         |  1793 +++
 src/CMakeLists.txt                                 |     1 +
 src/common/Configuration/Config.h                  |     2 +
 src/plugins/CMakeLists.txt                         |   191 +
 src/plugins/ahbot/AhBot.cpp                        |   984 ++
 src/plugins/ahbot/AhBot.h                          |    93 +
 src/plugins/ahbot/AhBotConfig.cpp                  |    58 +
 src/plugins/ahbot/AhBotConfig.h                    |    93 +
 src/plugins/ahbot/Category.cpp                     |    76 +
 src/plugins/ahbot/Category.h                       |   354 +
 src/plugins/ahbot/ConsumableCategory.cpp           |     5 +
 src/plugins/ahbot/ConsumableCategory.h             |    86 +
 src/plugins/ahbot/ItemBag.cpp                      |   184 +
 src/plugins/ahbot/ItemBag.h                        |    82 +
 src/plugins/ahbot/PricingStrategy.cpp              |   220 +
 src/plugins/ahbot/PricingStrategy.h                |    55 +
 src/plugins/ahbot/TradeCategory.cpp                |     4 +
 src/plugins/ahbot/TradeCategory.h                  |   183 +
 src/plugins/ahbot/ahbot.conf.dist.in               |   209 +
 src/plugins/pch/pch.cpp                            |     1 +
 src/plugins/pch/pch.h                              |    10 +
 src/plugins/pchdef.h                               |     4 +
 src/plugins/playerbot/AiFactory.cpp                |   229 +
 src/plugins/playerbot/AiFactory.h                  |    20 +
 src/plugins/playerbot/ChatFilter.cpp               |   257 +
 src/plugins/playerbot/ChatFilter.h                 |    24 +
 src/plugins/playerbot/ChatHelper.cpp               |   450 +
 src/plugins/playerbot/ChatHelper.h                 |    52 +
 src/plugins/playerbot/FleeManager.cpp              |   174 +
 src/plugins/playerbot/FleeManager.h                |    82 +
 src/plugins/playerbot/GuildTaskMgr.cpp             |   726 ++
 src/plugins/playerbot/GuildTaskMgr.h               |    45 +
 src/plugins/playerbot/Helpers.cpp                  |    90 +
 src/plugins/playerbot/LazyCalculatedValue.h        |    42 +
 src/plugins/playerbot/LootObjectStack.cpp          |   234 +
 src/plugins/playerbot/LootObjectStack.h            |    76 +
 src/plugins/playerbot/PlayerbotAI.cpp              |  1410 +++
 src/plugins/playerbot/PlayerbotAI.h                |   186 +
 src/plugins/playerbot/PlayerbotAIAware.h           |    13 +
 src/plugins/playerbot/PlayerbotAIBase.cpp          |    51 +
 src/plugins/playerbot/PlayerbotAIBase.h            |    24 +
 src/plugins/playerbot/PlayerbotAIConfig.cpp        |   229 +
 src/plugins/playerbot/PlayerbotAIConfig.h          |    82 +
 src/plugins/playerbot/PlayerbotCommandServer.cpp   |    94 +
 src/plugins/playerbot/PlayerbotCommandServer.h     |    26 +
 src/plugins/playerbot/PlayerbotFactory.cpp         |  1738 +++
 src/plugins/playerbot/PlayerbotFactory.h           |    68 +
 src/plugins/playerbot/PlayerbotMgr.cpp             |   472 +
 src/plugins/playerbot/PlayerbotMgr.h               |    69 +
 src/plugins/playerbot/PlayerbotSecurity.cpp        |   187 +
 src/plugins/playerbot/PlayerbotSecurity.h          |    42 +
 src/plugins/playerbot/RandomItemMgr.cpp            |   154 +
 src/plugins/playerbot/RandomItemMgr.h              |    50 +
 src/plugins/playerbot/RandomPlayerbotFactory.cpp   |   384 +
 src/plugins/playerbot/RandomPlayerbotFactory.h     |    35 +
 src/plugins/playerbot/RandomPlayerbotMgr.cpp       |   912 ++
 src/plugins/playerbot/RandomPlayerbotMgr.h         |    74 +
 src/plugins/playerbot/aiplayerbot.conf.dist.in     |   183 +
 src/plugins/playerbot/playerbot.h                  |    31 +
 src/plugins/playerbot/playerbotDefs.h              |     2 +
 src/plugins/playerbot/strategy/Action.cpp          |    93 +
 src/plugins/playerbot/strategy/Action.h            |   138 +
 src/plugins/playerbot/strategy/ActionBasket.cpp    |     4 +
 src/plugins/playerbot/strategy/ActionBasket.h      |     5 +
 src/plugins/playerbot/strategy/AiObject.cpp        |    16 +
 src/plugins/playerbot/strategy/AiObject.h          |    33 +
 src/plugins/playerbot/strategy/AiObjectContext.cpp |    48 +
 src/plugins/playerbot/strategy/AiObjectContext.h   |    81 +
 src/plugins/playerbot/strategy/CustomStrategy.cpp  |    86 +
 src/plugins/playerbot/strategy/CustomStrategy.h    |    21 +
 src/plugins/playerbot/strategy/Engine.cpp          |   543 +
 src/plugins/playerbot/strategy/Engine.h            |   123 +
 src/plugins/playerbot/strategy/Event.cpp           |    20 +
 src/plugins/playerbot/strategy/Event.h             |    36 +
 .../playerbot/strategy/ExternalEventHelper.h       |    69 +
 src/plugins/playerbot/strategy/ItemVisitors.h      |   258 +
 src/plugins/playerbot/strategy/Multiplier.cpp      |     5 +
 src/plugins/playerbot/strategy/Multiplier.h        |    16 +
 .../playerbot/strategy/NamedObjectContext.h        |   249 +
 .../playerbot/strategy/PassiveMultiplier.cpp       |    47 +
 src/plugins/playerbot/strategy/PassiveMultiplier.h |    20 +
 src/plugins/playerbot/strategy/Queue.cpp           |    81 +
 src/plugins/playerbot/strategy/Queue.h             |    21 +
 src/plugins/playerbot/strategy/Strategy.cpp        |   117 +
 src/plugins/playerbot/strategy/Strategy.h          |    55 +
 src/plugins/playerbot/strategy/StrategyContext.h   |   149 +
 src/plugins/playerbot/strategy/Trigger.cpp         |    27 +
 src/plugins/playerbot/strategy/Trigger.h           |    84 +
 src/plugins/playerbot/strategy/Value.cpp           |     5 +
 src/plugins/playerbot/strategy/Value.h             |   177 +
 .../playerbot/strategy/actions/AcceptDuelAction.h  |    31 +
 .../strategy/actions/AcceptInvitationAction.h      |    47 +
 .../strategy/actions/AcceptQuestAction.cpp         |   102 +
 .../playerbot/strategy/actions/AcceptQuestAction.h |    27 +
 .../strategy/actions/AcceptResurrectAction.h       |    31 +
 .../playerbot/strategy/actions/ActionContext.h     |   113 +
 .../playerbot/strategy/actions/AddLootAction.cpp   |    62 +
 .../playerbot/strategy/actions/AddLootAction.h     |    32 +
 .../strategy/actions/AreaTriggerAction.cpp         |    73 +
 .../playerbot/strategy/actions/AreaTriggerAction.h |    23 +
 .../playerbot/strategy/actions/AttackAction.cpp    |   104 +
 .../playerbot/strategy/actions/AttackAction.h      |    38 +
 .../playerbot/strategy/actions/BankAction.cpp      |   168 +
 .../playerbot/strategy/actions/BankAction.h        |    21 +
 .../playerbot/strategy/actions/BuffAction.cpp      |   118 +
 .../playerbot/strategy/actions/BuffAction.h        |    17 +
 .../playerbot/strategy/actions/BuyAction.cpp       |    53 +
 src/plugins/playerbot/strategy/actions/BuyAction.h |    19 +
 .../strategy/actions/CastCustomSpellAction.cpp     |    48 +
 .../strategy/actions/CastCustomSpellAction.h       |    14 +
 .../strategy/actions/ChangeChatAction.cpp          |    26 +
 .../playerbot/strategy/actions/ChangeChatAction.h  |    14 +
 .../strategy/actions/ChangeStrategyAction.cpp      |    38 +
 .../strategy/actions/ChangeStrategyAction.h        |    30 +
 .../strategy/actions/ChangeTalentsAction.cpp       |    37 +
 .../strategy/actions/ChangeTalentsAction.h         |    16 +
 .../playerbot/strategy/actions/ChatActionContext.h |   184 +
 .../strategy/actions/ChatShortcutActions.cpp       |   108 +
 .../strategy/actions/ChatShortcutActions.h         |    57 +
 .../playerbot/strategy/actions/CheckMailAction.cpp |    66 +
 .../playerbot/strategy/actions/CheckMailAction.h   |    17 +
 .../strategy/actions/CheckMountStateAction.cpp     |    79 +
 .../strategy/actions/CheckMountStateAction.h       |    19 +
 .../strategy/actions/ChooseTargetActions.h         |    80 +
 .../strategy/actions/DestroyItemAction.cpp         |    34 +
 .../playerbot/strategy/actions/DestroyItemAction.h |    17 +
 .../playerbot/strategy/actions/DropQuestAction.cpp |    47 +
 .../playerbot/strategy/actions/DropQuestAction.h   |    13 +
 .../playerbot/strategy/actions/EmoteAction.cpp     |   100 +
 .../playerbot/strategy/actions/EmoteAction.h       |    18 +
 .../playerbot/strategy/actions/EquipAction.cpp     |   105 +
 .../playerbot/strategy/actions/EquipAction.h       |    21 +
 .../playerbot/strategy/actions/FollowActions.cpp   |    49 +
 .../playerbot/strategy/actions/FollowActions.h     |    14 +
 .../playerbot/strategy/actions/GenericActions.cpp  |     5 +
 .../playerbot/strategy/actions/GenericActions.h    |    19 +
 .../strategy/actions/GenericSpellActions.cpp       |    58 +
 .../strategy/actions/GenericSpellActions.h         |   271 +
 .../strategy/actions/GossipHelloAction.cpp         |    71 +
 .../playerbot/strategy/actions/GossipHelloAction.h |    13 +
 .../strategy/actions/GuildAcceptAction.cpp         |    42 +
 .../playerbot/strategy/actions/GuildAcceptAction.h |    14 +
 .../playerbot/strategy/actions/GuildBankAction.cpp |    61 +
 .../playerbot/strategy/actions/GuildBankAction.h   |    18 +
 .../playerbot/strategy/actions/HelpAction.cpp      |    54 +
 .../playerbot/strategy/actions/HelpAction.h        |    22 +
 .../playerbot/strategy/actions/InventoryAction.cpp |   288 +
 .../playerbot/strategy/actions/InventoryAction.h   |    24 +
 .../actions/InventoryChangeFailureAction.cpp       |    55 +
 .../actions/InventoryChangeFailureAction.h         |    12 +
 .../strategy/actions/InviteToGroupAction.h         |    28 +
 .../playerbot/strategy/actions/LeaveGroupAction.h  |    79 +
 .../playerbot/strategy/actions/LfgActions.cpp      |   249 +
 .../playerbot/strategy/actions/LfgActions.h        |    48 +
 .../strategy/actions/ListQuestsActions.cpp         |    71 +
 .../playerbot/strategy/actions/ListQuestsActions.h |    25 +
 .../strategy/actions/ListSpellsAction.cpp          |    65 +
 .../playerbot/strategy/actions/ListSpellsAction.h  |    16 +
 .../playerbot/strategy/actions/LogLevelAction.cpp  |    43 +
 .../playerbot/strategy/actions/LogLevelAction.h    |    17 +
 .../playerbot/strategy/actions/LootAction.cpp      |   338 +
 .../playerbot/strategy/actions/LootAction.h        |    39 +
 .../playerbot/strategy/actions/LootRollAction.cpp  |    66 +
 .../playerbot/strategy/actions/LootRollAction.h    |    15 +
 .../strategy/actions/LootStrategyAction.cpp        |   100 +
 .../strategy/actions/LootStrategyAction.h          |    19 +
 .../playerbot/strategy/actions/MovementActions.cpp |   374 +
 .../playerbot/strategy/actions/MovementActions.h   |    92 +
 .../strategy/actions/NonCombatActions.cpp          |     6 +
 .../playerbot/strategy/actions/NonCombatActions.h  |    47 +
 .../actions/PassLeadershipToMasterAction.h         |    26 +
 .../playerbot/strategy/actions/PositionAction.cpp  |    38 +
 .../playerbot/strategy/actions/PositionAction.h    |    37 +
 .../strategy/actions/QueryItemUsageAction.cpp      |   172 +
 .../strategy/actions/QueryItemUsageAction.h        |    24 +
 .../strategy/actions/QueryQuestAction.cpp          |    89 +
 .../playerbot/strategy/actions/QueryQuestAction.h  |    16 +
 .../playerbot/strategy/actions/QuestAction.cpp     |   137 +
 .../playerbot/strategy/actions/QuestAction.h       |    33 +
 .../strategy/actions/ReachTargetActions.h          |    57 +
 .../strategy/actions/ReadyCheckAction.cpp          |    84 +
 .../playerbot/strategy/actions/ReadyCheckAction.h  |    26 +
 .../strategy/actions/ReleaseSpiritAction.h         |    29 +
 .../strategy/actions/RememberTaxiAction.cpp        |    46 +
 .../strategy/actions/RememberTaxiAction.h          |    13 +
 .../playerbot/strategy/actions/RepairAllAction.cpp |    30 +
 .../playerbot/strategy/actions/RepairAllAction.h   |    13 +
 .../playerbot/strategy/actions/ResetAiAction.cpp   |    12 +
 .../playerbot/strategy/actions/ResetAiAction.h     |    14 +
 .../strategy/actions/ReviveFromCorpseAction.cpp    |    51 +
 .../strategy/actions/ReviveFromCorpseAction.h      |    21 +
 .../playerbot/strategy/actions/RewardAction.cpp    |    75 +
 .../playerbot/strategy/actions/RewardAction.h      |    17 +
 src/plugins/playerbot/strategy/actions/RtiAction.h |    44 +
 .../playerbot/strategy/actions/SaveManaAction.cpp  |    73 +
 .../playerbot/strategy/actions/SaveManaAction.h    |    20 +
 .../playerbot/strategy/actions/SayAction.cpp       |   104 +
 src/plugins/playerbot/strategy/actions/SayAction.h |    20 +
 .../strategy/actions/SecurityCheckAction.cpp       |    31 +
 .../strategy/actions/SecurityCheckAction.h         |    14 +
 .../playerbot/strategy/actions/SellAction.cpp      |    95 +
 .../playerbot/strategy/actions/SellAction.h        |    18 +
 .../playerbot/strategy/actions/SetHomeAction.cpp   |    42 +
 .../playerbot/strategy/actions/SetHomeAction.h     |    12 +
 .../playerbot/strategy/actions/StatsAction.cpp     |   145 +
 .../playerbot/strategy/actions/StatsAction.h       |    22 +
 .../playerbot/strategy/actions/StayActions.cpp     |    34 +
 .../playerbot/strategy/actions/StayActions.h       |    23 +
 .../strategy/actions/SuggestWhatToDoAction.cpp     |   255 +
 .../strategy/actions/SuggestWhatToDoAction.h       |    34 +
 .../strategy/actions/TalkToQuestGiverAction.cpp    |    90 +
 .../strategy/actions/TalkToQuestGiverAction.h      |    22 +
 .../playerbot/strategy/actions/TaxiAction.cpp      |    51 +
 .../playerbot/strategy/actions/TaxiAction.h        |    13 +
 .../playerbot/strategy/actions/TeleportAction.cpp  |    54 +
 .../playerbot/strategy/actions/TeleportAction.h    |    16 +
 .../strategy/actions/TellCastFailedAction.cpp      |    75 +
 .../strategy/actions/TellCastFailedAction.h        |    22 +
 .../strategy/actions/TellItemCountAction.cpp       |    16 +
 .../strategy/actions/TellItemCountAction.h         |    14 +
 .../playerbot/strategy/actions/TellLosAction.cpp   |    61 +
 .../playerbot/strategy/actions/TellLosAction.h     |    17 +
 .../playerbot/strategy/actions/TellMasterAction.h  |    38 +
 .../strategy/actions/TellReputationAction.cpp      |    68 +
 .../strategy/actions/TellReputationAction.h        |    16 +
 .../strategy/actions/TellTargetAction.cpp          |    53 +
 .../playerbot/strategy/actions/TellTargetAction.h  |    21 +
 .../playerbot/strategy/actions/TradeAction.cpp     |    83 +
 .../playerbot/strategy/actions/TradeAction.h       |    19 +
 .../strategy/actions/TradeStatusAction.cpp         |   216 +
 .../playerbot/strategy/actions/TradeStatusAction.h |    20 +
 .../playerbot/strategy/actions/TrainerAction.cpp   |   114 +
 .../playerbot/strategy/actions/TrainerAction.h     |    22 +
 .../playerbot/strategy/actions/UnequipAction.cpp   |    45 +
 .../playerbot/strategy/actions/UnequipAction.h     |    18 +
 .../playerbot/strategy/actions/UseItemAction.cpp   |   302 +
 .../playerbot/strategy/actions/UseItemAction.h     |    47 +
 .../strategy/actions/UseMeetingStoneAction.cpp     |    86 +
 .../strategy/actions/UseMeetingStoneAction.h       |    26 +
 .../playerbot/strategy/actions/WhoAction.cpp       |   160 +
 src/plugins/playerbot/strategy/actions/WhoAction.h |    23 +
 .../strategy/actions/WorldPacketActionContext.h    |   108 +
 .../strategy/druid/BearTankDruidStrategy.cpp       |   171 +
 .../strategy/druid/BearTankDruidStrategy.h         |    18 +
 .../strategy/druid/CasterDruidStrategy.cpp         |   177 +
 .../playerbot/strategy/druid/CasterDruidStrategy.h |    39 +
 .../strategy/druid/CatDpsDruidStrategy.cpp         |   139 +
 .../playerbot/strategy/druid/CatDpsDruidStrategy.h |    29 +
 .../playerbot/strategy/druid/DruidActions.cpp      |    31 +
 .../playerbot/strategy/druid/DruidActions.h        |   205 +
 .../strategy/druid/DruidAiObjectContext.cpp        |   258 +
 .../strategy/druid/DruidAiObjectContext.h          |    12 +
 .../playerbot/strategy/druid/DruidBearActions.h    |    64 +
 .../playerbot/strategy/druid/DruidCatActions.h     |    64 +
 .../playerbot/strategy/druid/DruidMultipliers.cpp  |     6 +
 .../playerbot/strategy/druid/DruidMultipliers.h    |     6 +
 .../strategy/druid/DruidShapeshiftActions.h        |    53 +
 .../playerbot/strategy/druid/DruidTriggers.cpp     |     7 +
 .../playerbot/strategy/druid/DruidTriggers.h       |   127 +
 .../strategy/druid/FeralDruidStrategy.cpp          |    90 +
 .../playerbot/strategy/druid/FeralDruidStrategy.h  |    75 +
 .../druid/GenericDruidNonCombatStrategy.cpp        |    73 +
 .../strategy/druid/GenericDruidNonCombatStrategy.h |    16 +
 .../strategy/druid/GenericDruidStrategy.cpp        |   132 +
 .../strategy/druid/GenericDruidStrategy.h          |    18 +
 .../playerbot/strategy/druid/HealDruidStrategy.cpp |    57 +
 .../playerbot/strategy/druid/HealDruidStrategy.h   |    18 +
 .../generic/AttackEnemyPlayersStrategy.cpp         |    13 +
 .../strategy/generic/AttackEnemyPlayersStrategy.h  |    16 +
 .../strategy/generic/AttackRtiStrategy.cpp         |    14 +
 .../playerbot/strategy/generic/AttackRtiStrategy.h |    16 +
 .../strategy/generic/AttackWeakStrategy.cpp        |    13 +
 .../strategy/generic/AttackWeakStrategy.h          |    16 +
 .../strategy/generic/CastTimeStrategy.cpp          |    42 +
 .../playerbot/strategy/generic/CastTimeStrategy.h  |    26 +
 .../generic/ChatCommandHandlerStrategy.cpp         |   177 +
 .../strategy/generic/ChatCommandHandlerStrategy.h  |    15 +
 .../playerbot/strategy/generic/CombatStrategy.cpp  |    12 +
 .../playerbot/strategy/generic/CombatStrategy.h    |    13 +
 .../strategy/generic/ConserveManaStrategy.cpp      |    88 +
 .../strategy/generic/ConserveManaStrategy.h        |    32 +
 .../playerbot/strategy/generic/DeadStrategy.cpp    |    23 +
 .../playerbot/strategy/generic/DeadStrategy.h      |    15 +
 .../playerbot/strategy/generic/DpsAoeStrategy.cpp  |    12 +
 .../playerbot/strategy/generic/DpsAoeStrategy.h    |    18 +
 .../strategy/generic/DpsAssistStrategy.cpp         |    15 +
 .../playerbot/strategy/generic/DpsAssistStrategy.h |    16 +
 .../playerbot/strategy/generic/DuelStrategy.cpp    |    24 +
 .../playerbot/strategy/generic/DuelStrategy.h      |    15 +
 .../playerbot/strategy/generic/EmoteStrategy.cpp   |    17 +
 .../playerbot/strategy/generic/EmoteStrategy.h     |    16 +
 .../playerbot/strategy/generic/FleeStrategy.cpp    |    26 +
 .../playerbot/strategy/generic/FleeStrategy.h      |    21 +
 .../strategy/generic/FollowMasterStrategy.cpp      |    17 +
 .../strategy/generic/FollowMasterStrategy.h        |    16 +
 .../strategy/generic/GrindingStrategy.cpp          |    20 +
 .../playerbot/strategy/generic/GrindingStrategy.h  |    20 +
 .../playerbot/strategy/generic/GuardStrategy.cpp   |    16 +
 .../playerbot/strategy/generic/GuardStrategy.h     |    19 +
 .../playerbot/strategy/generic/KiteStrategy.cpp    |    16 +
 .../playerbot/strategy/generic/KiteStrategy.h      |    15 +
 .../strategy/generic/LootNonCombatStrategy.cpp     |    29 +
 .../strategy/generic/LootNonCombatStrategy.h       |    24 +
 .../strategy/generic/MeleeCombatStrategy.cpp       |    23 +
 .../strategy/generic/MeleeCombatStrategy.h         |    16 +
 .../strategy/generic/MoveRandomStrategy.cpp        |    13 +
 .../strategy/generic/MoveRandomStrategy.h          |    16 +
 .../strategy/generic/NonCombatStrategy.cpp         |    28 +
 .../playerbot/strategy/generic/NonCombatStrategy.h |    21 +
 .../strategy/generic/PassTroughStrategy.h          |    26 +
 .../playerbot/strategy/generic/PassiveStrategy.cpp |    13 +
 .../playerbot/strategy/generic/PassiveStrategy.h   |    16 +
 .../playerbot/strategy/generic/PullStrategy.cpp    |    52 +
 .../playerbot/strategy/generic/PullStrategy.h      |    24 +
 .../playerbot/strategy/generic/QuestStrategies.cpp |    69 +
 .../playerbot/strategy/generic/QuestStrategies.h   |    34 +
 .../playerbot/strategy/generic/RacialsStrategy.cpp |    39 +
 .../playerbot/strategy/generic/RacialsStrategy.h   |    15 +
 .../strategy/generic/RangedCombatStrategy.cpp      |    15 +
 .../strategy/generic/RangedCombatStrategy.h        |    15 +
 .../playerbot/strategy/generic/RunawayStrategy.cpp |    18 +
 .../playerbot/strategy/generic/RunawayStrategy.h   |    16 +
 .../playerbot/strategy/generic/SayStrategy.cpp     |    29 +
 .../playerbot/strategy/generic/SayStrategy.h       |    16 +
 .../playerbot/strategy/generic/StayStrategy.cpp    |    11 +
 .../playerbot/strategy/generic/StayStrategy.h      |    14 +
 .../playerbot/strategy/generic/TankAoeStrategy.cpp |    12 +
 .../playerbot/strategy/generic/TankAoeStrategy.h   |    18 +
 .../strategy/generic/TankAssistStrategy.cpp        |    13 +
 .../strategy/generic/TankAssistStrategy.h          |    17 +
 .../strategy/generic/TellTargetStrategy.cpp        |    13 +
 .../strategy/generic/TellTargetStrategy.h          |    16 +
 .../playerbot/strategy/generic/ThreatStrategy.cpp  |    32 +
 .../playerbot/strategy/generic/ThreatStrategy.h    |    25 +
 .../playerbot/strategy/generic/UseFoodStrategy.cpp |    18 +
 .../playerbot/strategy/generic/UseFoodStrategy.h   |    15 +
 .../strategy/generic/UsePotionsStrategy.cpp        |    18 +
 .../strategy/generic/UsePotionsStrategy.h          |    15 +
 .../generic/WorldPacketHandlerStrategy.cpp         |   106 +
 .../strategy/generic/WorldPacketHandlerStrategy.h  |    25 +
 .../strategy/hunter/DpsHunterStrategy.cpp          |   118 +
 .../playerbot/strategy/hunter/DpsHunterStrategy.h  |    39 +
 .../hunter/GenericHunterNonCombatStrategy.cpp      |    58 +
 .../hunter/GenericHunterNonCombatStrategy.h        |    17 +
 .../strategy/hunter/GenericHunterStrategy.cpp      |    66 +
 .../strategy/hunter/GenericHunterStrategy.h        |    20 +
 .../playerbot/strategy/hunter/HunterActions.cpp    |    26 +
 .../playerbot/strategy/hunter/HunterActions.h      |   158 +
 .../strategy/hunter/HunterAiObjectContext.cpp      |   191 +
 .../strategy/hunter/HunterAiObjectContext.h        |    12 +
 .../strategy/hunter/HunterBuffStrategies.cpp       |    35 +
 .../strategy/hunter/HunterBuffStrategies.h         |    47 +
 .../strategy/hunter/HunterMultipliers.cpp          |     5 +
 .../playerbot/strategy/hunter/HunterMultipliers.h  |     6 +
 .../playerbot/strategy/hunter/HunterTriggers.cpp   |    29 +
 .../playerbot/strategy/hunter/HunterTriggers.h     |    86 +
 .../playerbot/strategy/mage/ArcaneMageStrategy.cpp |    64 +
 .../playerbot/strategy/mage/ArcaneMageStrategy.h   |    18 +
 .../playerbot/strategy/mage/FireMageStrategy.cpp   |    44 +
 .../playerbot/strategy/mage/FireMageStrategy.h     |    28 +
 .../playerbot/strategy/mage/FrostMageStrategy.cpp  |    32 +
 .../playerbot/strategy/mage/FrostMageStrategy.h    |    28 +
 .../strategy/mage/GenericMageNonCombatStrategy.cpp |    87 +
 .../strategy/mage/GenericMageNonCombatStrategy.h   |    37 +
 .../strategy/mage/GenericMageStrategy.cpp          |   137 +
 .../playerbot/strategy/mage/GenericMageStrategy.h  |    17 +
 .../playerbot/strategy/mage/MageActions.cpp        |    10 +
 src/plugins/playerbot/strategy/mage/MageActions.h  |   205 +
 .../strategy/mage/MageAiObjectContext.cpp          |   221 +
 .../playerbot/strategy/mage/MageAiObjectContext.h  |    12 +
 .../playerbot/strategy/mage/MageMultipliers.cpp    |     6 +
 .../playerbot/strategy/mage/MageMultipliers.h      |     6 +
 .../playerbot/strategy/mage/MageTriggers.cpp       |    15 +
 src/plugins/playerbot/strategy/mage/MageTriggers.h |    92 +
 .../strategy/paladin/DpsPaladinStrategy.cpp        |    83 +
 .../strategy/paladin/DpsPaladinStrategy.h          |    18 +
 .../paladin/GenericPaladinNonCombatStrategy.cpp    |    65 +
 .../paladin/GenericPaladinNonCombatStrategy.h      |    16 +
 .../strategy/paladin/GenericPaladinStrategy.cpp    |    77 +
 .../strategy/paladin/GenericPaladinStrategy.h      |    18 +
 .../GenericPaladinStrategyActionNodeFactory.h      |   150 +
 .../playerbot/strategy/paladin/PaladinActions.cpp  |     6 +
 .../playerbot/strategy/paladin/PaladinActions.h    |   365 +
 .../strategy/paladin/PaladinAiObjectContext.cpp    |   279 +
 .../strategy/paladin/PaladinAiObjectContext.h      |    12 +
 .../strategy/paladin/PaladinBuffStrategies.cpp     |    72 +
 .../strategy/paladin/PaladinBuffStrategies.h       |    86 +
 .../strategy/paladin/PaladinMultipliers.cpp        |     6 +
 .../strategy/paladin/PaladinMultipliers.h          |     6 +
 .../playerbot/strategy/paladin/PaladinTriggers.cpp |    23 +
 .../playerbot/strategy/paladin/PaladinTriggers.h   |   114 +
 .../strategy/paladin/TankPaladinStrategy.cpp       |    70 +
 .../strategy/paladin/TankPaladinStrategy.h         |    18 +
 .../strategy/priest/GenericPriestStrategy.cpp      |    67 +
 .../strategy/priest/GenericPriestStrategy.h        |    17 +
 .../GenericPriestStrategyActionNodeFactory.h       |   173 +
 .../strategy/priest/HealPriestStrategy.cpp         |    36 +
 .../playerbot/strategy/priest/HealPriestStrategy.h |    18 +
 .../strategy/priest/HolyPriestStrategy.cpp         |    46 +
 .../playerbot/strategy/priest/HolyPriestStrategy.h |    18 +
 .../playerbot/strategy/priest/PriestActions.cpp    |    17 +
 .../playerbot/strategy/priest/PriestActions.h      |   246 +
 .../strategy/priest/PriestAiObjectContext.cpp      |   217 +
 .../strategy/priest/PriestAiObjectContext.h        |    12 +
 .../strategy/priest/PriestMultipliers.cpp          |     6 +
 .../playerbot/strategy/priest/PriestMultipliers.h  |     6 +
 .../strategy/priest/PriestNonCombatStrategy.cpp    |    82 +
 .../strategy/priest/PriestNonCombatStrategy.h      |    17 +
 .../PriestNonCombatStrategyActionNodeFactory.h     |   126 +
 .../playerbot/strategy/priest/PriestTriggers.cpp   |     7 +
 .../playerbot/strategy/priest/PriestTriggers.h     |    54 +
 .../strategy/priest/ShadowPriestStrategy.cpp       |    60 +
 .../strategy/priest/ShadowPriestStrategy.h         |    38 +
 .../priest/ShadowPriestStrategyActionNodeFactory.h |    37 +
 .../playerbot/strategy/rogue/DpsRogueStrategy.cpp  |   110 +
 .../playerbot/strategy/rogue/DpsRogueStrategy.h    |    18 +
 .../rogue/GenericRogueNonCombatStrategy.cpp        |    14 +
 .../strategy/rogue/GenericRogueNonCombatStrategy.h |    16 +
 .../playerbot/strategy/rogue/RogueActions.cpp      |     5 +
 .../playerbot/strategy/rogue/RogueActions.h        |    82 +
 .../strategy/rogue/RogueAiObjectContext.cpp        |   119 +
 .../strategy/rogue/RogueAiObjectContext.h          |    12 +
 .../playerbot/strategy/rogue/RogueComboActions.h   |    45 +
 .../strategy/rogue/RogueFinishingActions.h         |    35 +
 .../playerbot/strategy/rogue/RogueMultipliers.cpp  |     6 +
 .../playerbot/strategy/rogue/RogueMultipliers.h    |     6 +
 .../playerbot/strategy/rogue/RogueOpeningActions.h |    24 +
 .../playerbot/strategy/rogue/RogueTriggers.cpp     |     7 +
 .../playerbot/strategy/rogue/RogueTriggers.h       |    36 +
 .../strategy/shaman/CasterShamanStrategy.cpp       |    75 +
 .../strategy/shaman/CasterShamanStrategy.h         |    29 +
 .../strategy/shaman/GenericShamanStrategy.cpp      |   159 +
 .../strategy/shaman/GenericShamanStrategy.h        |    39 +
 .../strategy/shaman/HealShamanStrategy.cpp         |    82 +
 .../playerbot/strategy/shaman/HealShamanStrategy.h |    17 +
 .../strategy/shaman/MeleeShamanStrategy.cpp        |    93 +
 .../strategy/shaman/MeleeShamanStrategy.h          |    28 +
 .../playerbot/strategy/shaman/ShamanActions.cpp    |     6 +
 .../playerbot/strategy/shaman/ShamanActions.h      |   304 +
 .../strategy/shaman/ShamanAiObjectContext.cpp      |   268 +
 .../strategy/shaman/ShamanAiObjectContext.h        |    12 +
 .../strategy/shaman/ShamanMultipliers.cpp          |     6 +
 .../playerbot/strategy/shaman/ShamanMultipliers.h  |     6 +
 .../strategy/shaman/ShamanNonCombatStrategy.cpp    |    49 +
 .../strategy/shaman/ShamanNonCombatStrategy.h      |    19 +
 .../playerbot/strategy/shaman/ShamanTriggers.cpp   |    38 +
 .../playerbot/strategy/shaman/ShamanTriggers.h     |   197 +
 .../strategy/shaman/TotemsShamanStrategy.cpp       |    31 +
 .../strategy/shaman/TotemsShamanStrategy.h         |    17 +
 .../strategy/triggers/ChatCommandTrigger.h         |    36 +
 .../strategy/triggers/ChatTriggerContext.h         |   140 +
 .../playerbot/strategy/triggers/CureTriggers.cpp   |    17 +
 .../playerbot/strategy/triggers/CureTriggers.h     |    35 +
 .../strategy/triggers/GenericTriggers.cpp          |   242 +
 .../playerbot/strategy/triggers/GenericTriggers.h  |   540 +
 .../playerbot/strategy/triggers/HealthTriggers.cpp |    26 +
 .../playerbot/strategy/triggers/HealthTriggers.h   |   139 +
 .../playerbot/strategy/triggers/LfgTriggers.h      |    17 +
 .../playerbot/strategy/triggers/LootTriggers.cpp   |    20 +
 .../playerbot/strategy/triggers/LootTriggers.h     |    30 +
 .../playerbot/strategy/triggers/RangeTriggers.h    |    81 +
 .../playerbot/strategy/triggers/TriggerContext.h   |   158 +
 .../strategy/triggers/WithinAreaTrigger.h          |    76 +
 .../strategy/triggers/WorldPacketTrigger.h         |    36 +
 .../strategy/triggers/WorldPacketTriggerContext.h  |    85 +
 .../strategy/values/AlwaysLootListValue.h          |    14 +
 .../playerbot/strategy/values/AoeHealValues.cpp    |    37 +
 .../playerbot/strategy/values/AoeHealValues.h      |    14 +
 .../strategy/values/AttackerCountValues.cpp        |   107 +
 .../strategy/values/AttackerCountValues.h          |    59 +
 .../values/AttackerWithoutAuraTargetValue.cpp      |    26 +
 .../values/AttackerWithoutAuraTargetValue.h        |    15 +
 .../playerbot/strategy/values/AttackersValue.cpp   |    94 +
 .../playerbot/strategy/values/AttackersValue.h     |    20 +
 .../playerbot/strategy/values/AvailableLootValue.h |    40 +
 .../playerbot/strategy/values/CcTargetValue.cpp    |    88 +
 .../playerbot/strategy/values/CcTargetValue.h      |    16 +
 src/plugins/playerbot/strategy/values/ChatValue.h  |    11 +
 .../strategy/values/CurrentCcTargetValue.cpp       |    31 +
 .../strategy/values/CurrentCcTargetValue.h         |    16 +
 .../strategy/values/CurrentTargetValue.cpp         |    22 +
 .../playerbot/strategy/values/CurrentTargetValue.h |    17 +
 .../playerbot/strategy/values/DistanceValue.h      |    35 +
 .../playerbot/strategy/values/DpsTargetValue.cpp   |    45 +
 .../playerbot/strategy/values/DpsTargetValue.h     |    16 +
 .../playerbot/strategy/values/DuelTargetValue.cpp  |    10 +
 .../playerbot/strategy/values/DuelTargetValue.h    |    15 +
 .../strategy/values/EnemyHealerTargetValue.cpp     |    36 +
 .../strategy/values/EnemyHealerTargetValue.h       |    15 +
 .../playerbot/strategy/values/EnemyPlayerValue.cpp |    34 +
 .../playerbot/strategy/values/EnemyPlayerValue.h   |    15 +
 .../playerbot/strategy/values/Formations.cpp       |   377 +
 src/plugins/playerbot/strategy/values/Formations.h |    52 +
 .../playerbot/strategy/values/GrindTargetValue.cpp |   126 +
 .../playerbot/strategy/values/GrindTargetValue.h   |    20 +
 .../strategy/values/HasAvailableLootValue.h        |    20 +
 .../playerbot/strategy/values/HasTotemValue.h      |    34 +
 .../strategy/values/InvalidTargetValue.cpp         |    26 +
 .../playerbot/strategy/values/InvalidTargetValue.h |    14 +
 .../playerbot/strategy/values/IsBehindValue.h      |    25 +
 .../playerbot/strategy/values/IsFacingValue.h      |    20 +
 .../playerbot/strategy/values/IsMovingValue.h      |    42 +
 .../playerbot/strategy/values/ItemCountValue.cpp   |    37 +
 .../playerbot/strategy/values/ItemCountValue.h     |    35 +
 .../strategy/values/ItemForSpellValue.cpp          |    70 +
 .../playerbot/strategy/values/ItemForSpellValue.h  |    20 +
 .../playerbot/strategy/values/ItemUsageValue.cpp   |   146 +
 .../playerbot/strategy/values/ItemUsageValue.h     |    28 +
 .../playerbot/strategy/values/LastMovementValue.h  |    61 +
 .../playerbot/strategy/values/LastSaidValue.h      |    11 +
 .../strategy/values/LastSpellCastTimeValue.h       |    11 +
 .../playerbot/strategy/values/LastSpellCastValue.h |    39 +
 .../strategy/values/LeastHpTargetValue.cpp         |    33 +
 .../playerbot/strategy/values/LeastHpTargetValue.h |    15 +
 src/plugins/playerbot/strategy/values/LfgValues.h  |    12 +
 .../playerbot/strategy/values/LineTargetValue.cpp  |    33 +
 .../playerbot/strategy/values/LineTargetValue.h    |    14 +
 .../playerbot/strategy/values/LogLevelValue.h      |    12 +
 .../playerbot/strategy/values/LootStrategyValue.h  |    11 +
 .../playerbot/strategy/values/ManaSaveLevelValue.h |    11 +
 .../playerbot/strategy/values/MasterTargetValue.h  |    13 +
 .../playerbot/strategy/values/NearestAdsValue.cpp  |    11 +
 .../playerbot/strategy/values/NearestAdsValue.h    |    18 +
 .../strategy/values/NearestCorpsesValue.cpp        |    36 +
 .../strategy/values/NearestCorpsesValue.h          |    19 +
 .../strategy/values/NearestGameObjects.cpp         |    47 +
 .../playerbot/strategy/values/NearestGameObjects.h |    19 +
 .../playerbot/strategy/values/NearestNpcsValue.cpp |    23 +
 .../playerbot/strategy/values/NearestNpcsValue.h   |    18 +
 .../playerbot/strategy/values/NearestUnitsValue.h  |    36 +
 .../strategy/values/PartyMemberToDispel.cpp        |    37 +
 .../strategy/values/PartyMemberToDispel.h          |    16 +
 .../strategy/values/PartyMemberToHeal.cpp          |    60 +
 .../playerbot/strategy/values/PartyMemberToHeal.h  |    17 +
 .../strategy/values/PartyMemberToResurrect.cpp     |    44 +
 .../strategy/values/PartyMemberToResurrect.h       |    16 +
 .../playerbot/strategy/values/PartyMemberValue.cpp |   111 +
 .../playerbot/strategy/values/PartyMemberValue.h   |    31 +
 .../values/PartyMemberWithoutAuraValue.cpp         |    35 +
 .../strategy/values/PartyMemberWithoutAuraValue.h  |    17 +
 .../playerbot/strategy/values/PetTargetValue.h     |    13 +
 .../playerbot/strategy/values/PositionValue.cpp    |    10 +
 .../playerbot/strategy/values/PositionValue.h      |    26 +
 .../strategy/values/PossibleTargetsValue.cpp       |    23 +
 .../strategy/values/PossibleTargetsValue.h         |    19 +
 .../playerbot/strategy/values/RtiTargetValue.h     |    51 +
 src/plugins/playerbot/strategy/values/RtiValue.cpp |    36 +
 src/plugins/playerbot/strategy/values/RtiValue.h   |    11 +
 .../playerbot/strategy/values/SelfTargetValue.h    |    13 +
 .../strategy/values/SpellCastUsefulValue.cpp       |    52 +
 .../strategy/values/SpellCastUsefulValue.h         |    17 +
 .../playerbot/strategy/values/SpellIdValue.cpp     |    90 +
 .../playerbot/strategy/values/SpellIdValue.h       |    17 +
 .../playerbot/strategy/values/StatsValues.cpp      |   120 +
 .../playerbot/strategy/values/StatsValues.h        |   146 +
 .../playerbot/strategy/values/TankTargetValue.cpp  |    47 +
 .../playerbot/strategy/values/TankTargetValue.h    |    16 +
 .../playerbot/strategy/values/TargetValue.cpp      |    54 +
 .../playerbot/strategy/values/TargetValue.h        |    39 +
 .../playerbot/strategy/values/ThreatValues.cpp     |    62 +
 .../playerbot/strategy/values/ThreatValues.h       |    17 +
 .../playerbot/strategy/values/ValueContext.h       |   230 +
 .../playerbot/strategy/values/formations/Arrow.cpp |   162 +
 .../playerbot/strategy/values/formations/Arrow.h   |   109 +
 .../strategy/warlock/DpsWarlockStrategy.cpp        |    76 +
 .../strategy/warlock/DpsWarlockStrategy.h          |    39 +
 .../warlock/GenericWarlockNonCombatStrategy.cpp    |    65 +
 .../warlock/GenericWarlockNonCombatStrategy.h      |    16 +
 .../strategy/warlock/GenericWarlockStrategy.cpp    |    74 +
 .../strategy/warlock/GenericWarlockStrategy.h      |    18 +
 .../strategy/warlock/TankWarlockStrategy.cpp       |    51 +
 .../strategy/warlock/TankWarlockStrategy.h         |    17 +
 .../playerbot/strategy/warlock/WarlockActions.cpp  |     5 +
 .../playerbot/strategy/warlock/WarlockActions.h    |   176 +
 .../strategy/warlock/WarlockAiObjectContext.cpp    |   183 +
 .../strategy/warlock/WarlockAiObjectContext.h      |    12 +
 .../strategy/warlock/WarlockMultipliers.cpp        |     6 +
 .../strategy/warlock/WarlockMultipliers.h          |     6 +
 .../playerbot/strategy/warlock/WarlockTriggers.cpp |    19 +
 .../playerbot/strategy/warlock/WarlockTriggers.h   |    81 +
 .../strategy/warrior/DpsWarriorStrategy.cpp        |   130 +
 .../strategy/warrior/DpsWarriorStrategy.h          |    28 +
 .../warrior/GenericWarriorNonCombatStrategy.cpp    |     7 +
 .../warrior/GenericWarriorNonCombatStrategy.h      |    13 +
 .../strategy/warrior/GenericWarriorStrategy.cpp    |    73 +
 .../strategy/warrior/GenericWarriorStrategy.h      |    19 +
 .../strategy/warrior/TankWarriorStrategy.cpp       |   126 +
 .../strategy/warrior/TankWarriorStrategy.h         |    18 +
 .../playerbot/strategy/warrior/WarriorActions.cpp  |    15 +
 .../playerbot/strategy/warrior/WarriorActions.h    |   207 +
 .../strategy/warrior/WarriorAiObjectContext.cpp    |   192 +
 .../strategy/warrior/WarriorAiObjectContext.h      |    12 +
 .../strategy/warrior/WarriorMultipliers.cpp        |     6 +
 .../strategy/warrior/WarriorMultipliers.h          |     6 +
 .../playerbot/strategy/warrior/WarriorTriggers.cpp |     7 +
 .../playerbot/strategy/warrior/WarriorTriggers.h   |    78 +
 src/server/game/AuctionHouse/AuctionHouseMgr.cpp   |     8 +
 src/server/game/CMakeLists.txt                     |     1 +
 src/server/game/DungeonFinding/LFGQueue.cpp        |    18 +
 src/server/game/Entities/Player/Player.cpp         |    24 +-
 src/server/game/Entities/Player/Player.h           |    19 +-
 src/server/game/Entities/Unit/Unit.cpp             |     1 +
 src/server/game/Groups/Group.h                     |     5 +
 src/server/game/Handlers/CharacterHandler.cpp      |    83 +
 src/server/game/Handlers/ChatHandler.cpp           |    88 +-
 src/server/game/Movement/MotionMaster.cpp          |     1 -
 src/server/game/Server/WorldSession.cpp            |    42 +-
 src/server/game/Server/WorldSession.h              |     7 +-
 src/server/game/World/World.cpp                    |    42 +-
 src/server/game/World/World.h                      |     1 +
 src/server/scripts/Commands/cs_ahbot.cpp           |     3 +-
 src/server/scripts/Commands/cs_misc.cpp            |     9 +
 src/server/scripts/Spells/spell_paladin.cpp        |     2 +
 src/server/worldserver/CMakeLists.txt              |     1 +
 src/server/worldserver/worldserver.conf.dist       |    19 +
 620 files changed, 55069 insertions(+), 17 deletions(-)
 create mode 100644 sql/TrinityCore-Patches/LordPsyanBots/character_lordpsyanbots.sql
 create mode 100644 sql/TrinityCore-Patches/LordPsyanBots/characters_ai_playerbot_custom_strategy.sql
 create mode 100644 sql/TrinityCore-Patches/LordPsyanBots/characters_ai_playerbot_speech.sql
 create mode 100644 sql/TrinityCore-Patches/LordPsyanBots/world_lordpsyanbots.sql
 create mode 100644 sql/base/characters.LordPsyanBots-base.sql
 create mode 100644 src/plugins/CMakeLists.txt
 create mode 100644 src/plugins/ahbot/AhBot.cpp
 create mode 100644 src/plugins/ahbot/AhBot.h
 create mode 100644 src/plugins/ahbot/AhBotConfig.cpp
 create mode 100644 src/plugins/ahbot/AhBotConfig.h
 create mode 100644 src/plugins/ahbot/Category.cpp
 create mode 100644 src/plugins/ahbot/Category.h
 create mode 100644 src/plugins/ahbot/ConsumableCategory.cpp
 create mode 100644 src/plugins/ahbot/ConsumableCategory.h
 create mode 100644 src/plugins/ahbot/ItemBag.cpp
 create mode 100644 src/plugins/ahbot/ItemBag.h
 create mode 100644 src/plugins/ahbot/PricingStrategy.cpp
 create mode 100644 src/plugins/ahbot/PricingStrategy.h
 create mode 100644 src/plugins/ahbot/TradeCategory.cpp
 create mode 100644 src/plugins/ahbot/TradeCategory.h
 create mode 100644 src/plugins/ahbot/ahbot.conf.dist.in
 create mode 100644 src/plugins/pch/pch.cpp
 create mode 100644 src/plugins/pch/pch.h
 create mode 100644 src/plugins/pchdef.h
 create mode 100644 src/plugins/playerbot/AiFactory.cpp
 create mode 100644 src/plugins/playerbot/AiFactory.h
 create mode 100644 src/plugins/playerbot/ChatFilter.cpp
 create mode 100644 src/plugins/playerbot/ChatFilter.h
 create mode 100644 src/plugins/playerbot/ChatHelper.cpp
 create mode 100644 src/plugins/playerbot/ChatHelper.h
 create mode 100644 src/plugins/playerbot/FleeManager.cpp
 create mode 100644 src/plugins/playerbot/FleeManager.h
 create mode 100644 src/plugins/playerbot/GuildTaskMgr.cpp
 create mode 100644 src/plugins/playerbot/GuildTaskMgr.h
 create mode 100644 src/plugins/playerbot/Helpers.cpp
 create mode 100644 src/plugins/playerbot/LazyCalculatedValue.h
 create mode 100644 src/plugins/playerbot/LootObjectStack.cpp
 create mode 100644 src/plugins/playerbot/LootObjectStack.h
 create mode 100644 src/plugins/playerbot/PlayerbotAI.cpp
 create mode 100644 src/plugins/playerbot/PlayerbotAI.h
 create mode 100644 src/plugins/playerbot/PlayerbotAIAware.h
 create mode 100644 src/plugins/playerbot/PlayerbotAIBase.cpp
 create mode 100644 src/plugins/playerbot/PlayerbotAIBase.h
 create mode 100644 src/plugins/playerbot/PlayerbotAIConfig.cpp
 create mode 100644 src/plugins/playerbot/PlayerbotAIConfig.h
 create mode 100644 src/plugins/playerbot/PlayerbotCommandServer.cpp
 create mode 100644 src/plugins/playerbot/PlayerbotCommandServer.h
 create mode 100644 src/plugins/playerbot/PlayerbotFactory.cpp
 create mode 100644 src/plugins/playerbot/PlayerbotFactory.h
 create mode 100644 src/plugins/playerbot/PlayerbotMgr.cpp
 create mode 100644 src/plugins/playerbot/PlayerbotMgr.h
 create mode 100644 src/plugins/playerbot/PlayerbotSecurity.cpp
 create mode 100644 src/plugins/playerbot/PlayerbotSecurity.h
 create mode 100644 src/plugins/playerbot/RandomItemMgr.cpp
 create mode 100644 src/plugins/playerbot/RandomItemMgr.h
 create mode 100644 src/plugins/playerbot/RandomPlayerbotFactory.cpp
 create mode 100644 src/plugins/playerbot/RandomPlayerbotFactory.h
 create mode 100644 src/plugins/playerbot/RandomPlayerbotMgr.cpp
 create mode 100644 src/plugins/playerbot/RandomPlayerbotMgr.h
 create mode 100644 src/plugins/playerbot/aiplayerbot.conf.dist.in
 create mode 100644 src/plugins/playerbot/playerbot.h
 create mode 100644 src/plugins/playerbot/playerbotDefs.h
 create mode 100644 src/plugins/playerbot/strategy/Action.cpp
 create mode 100644 src/plugins/playerbot/strategy/Action.h
 create mode 100644 src/plugins/playerbot/strategy/ActionBasket.cpp
 create mode 100644 src/plugins/playerbot/strategy/ActionBasket.h
 create mode 100644 src/plugins/playerbot/strategy/AiObject.cpp
 create mode 100644 src/plugins/playerbot/strategy/AiObject.h
 create mode 100644 src/plugins/playerbot/strategy/AiObjectContext.cpp
 create mode 100644 src/plugins/playerbot/strategy/AiObjectContext.h
 create mode 100644 src/plugins/playerbot/strategy/CustomStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/CustomStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/Engine.cpp
 create mode 100644 src/plugins/playerbot/strategy/Engine.h
 create mode 100644 src/plugins/playerbot/strategy/Event.cpp
 create mode 100644 src/plugins/playerbot/strategy/Event.h
 create mode 100644 src/plugins/playerbot/strategy/ExternalEventHelper.h
 create mode 100644 src/plugins/playerbot/strategy/ItemVisitors.h
 create mode 100644 src/plugins/playerbot/strategy/Multiplier.cpp
 create mode 100644 src/plugins/playerbot/strategy/Multiplier.h
 create mode 100644 src/plugins/playerbot/strategy/NamedObjectContext.h
 create mode 100644 src/plugins/playerbot/strategy/PassiveMultiplier.cpp
 create mode 100644 src/plugins/playerbot/strategy/PassiveMultiplier.h
 create mode 100644 src/plugins/playerbot/strategy/Queue.cpp
 create mode 100644 src/plugins/playerbot/strategy/Queue.h
 create mode 100644 src/plugins/playerbot/strategy/Strategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/Strategy.h
 create mode 100644 src/plugins/playerbot/strategy/StrategyContext.h
 create mode 100644 src/plugins/playerbot/strategy/Trigger.cpp
 create mode 100644 src/plugins/playerbot/strategy/Trigger.h
 create mode 100644 src/plugins/playerbot/strategy/Value.cpp
 create mode 100644 src/plugins/playerbot/strategy/Value.h
 create mode 100644 src/plugins/playerbot/strategy/actions/AcceptDuelAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/AcceptInvitationAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/AcceptQuestAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/AcceptQuestAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/AcceptResurrectAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/ActionContext.h
 create mode 100644 src/plugins/playerbot/strategy/actions/AddLootAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/AddLootAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/AreaTriggerAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/AreaTriggerAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/AttackAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/AttackAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/BankAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/BankAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/BuffAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/BuffAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/BuyAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/BuyAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/CastCustomSpellAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/CastCustomSpellAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/ChangeChatAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/ChangeChatAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/ChangeStrategyAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/ChangeStrategyAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/ChangeTalentsAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/ChangeTalentsAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/ChatActionContext.h
 create mode 100644 src/plugins/playerbot/strategy/actions/ChatShortcutActions.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/ChatShortcutActions.h
 create mode 100644 src/plugins/playerbot/strategy/actions/CheckMailAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/CheckMailAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/CheckMountStateAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/CheckMountStateAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/ChooseTargetActions.h
 create mode 100644 src/plugins/playerbot/strategy/actions/DestroyItemAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/DestroyItemAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/DropQuestAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/DropQuestAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/EmoteAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/EmoteAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/EquipAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/EquipAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/FollowActions.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/FollowActions.h
 create mode 100644 src/plugins/playerbot/strategy/actions/GenericActions.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/GenericActions.h
 create mode 100644 src/plugins/playerbot/strategy/actions/GenericSpellActions.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/GenericSpellActions.h
 create mode 100644 src/plugins/playerbot/strategy/actions/GossipHelloAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/GossipHelloAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/GuildAcceptAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/GuildAcceptAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/GuildBankAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/GuildBankAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/HelpAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/HelpAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/InventoryAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/InventoryAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/InventoryChangeFailureAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/InventoryChangeFailureAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/InviteToGroupAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/LeaveGroupAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/LfgActions.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/LfgActions.h
 create mode 100644 src/plugins/playerbot/strategy/actions/ListQuestsActions.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/ListQuestsActions.h
 create mode 100644 src/plugins/playerbot/strategy/actions/ListSpellsAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/ListSpellsAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/LogLevelAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/LogLevelAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/LootAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/LootAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/LootRollAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/LootRollAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/LootStrategyAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/LootStrategyAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/MovementActions.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/MovementActions.h
 create mode 100644 src/plugins/playerbot/strategy/actions/NonCombatActions.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/NonCombatActions.h
 create mode 100644 src/plugins/playerbot/strategy/actions/PassLeadershipToMasterAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/PositionAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/PositionAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/QueryItemUsageAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/QueryItemUsageAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/QueryQuestAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/QueryQuestAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/QuestAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/QuestAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/ReachTargetActions.h
 create mode 100644 src/plugins/playerbot/strategy/actions/ReadyCheckAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/ReadyCheckAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/ReleaseSpiritAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/RememberTaxiAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/RememberTaxiAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/RepairAllAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/RepairAllAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/ResetAiAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/ResetAiAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/ReviveFromCorpseAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/ReviveFromCorpseAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/RewardAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/RewardAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/RtiAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/SaveManaAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/SaveManaAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/SayAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/SayAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/SecurityCheckAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/SecurityCheckAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/SellAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/SellAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/SetHomeAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/SetHomeAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/StatsAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/StatsAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/StayActions.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/StayActions.h
 create mode 100644 src/plugins/playerbot/strategy/actions/SuggestWhatToDoAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/SuggestWhatToDoAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/TalkToQuestGiverAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/TalkToQuestGiverAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/TaxiAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/TaxiAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/TeleportAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/TeleportAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/TellCastFailedAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/TellCastFailedAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/TellItemCountAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/TellItemCountAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/TellLosAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/TellLosAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/TellMasterAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/TellReputationAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/TellReputationAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/TellTargetAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/TellTargetAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/TradeAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/TradeAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/TradeStatusAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/TradeStatusAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/TrainerAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/TrainerAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/UnequipAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/UnequipAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/UseItemAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/UseItemAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/UseMeetingStoneAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/UseMeetingStoneAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/WhoAction.cpp
 create mode 100644 src/plugins/playerbot/strategy/actions/WhoAction.h
 create mode 100644 src/plugins/playerbot/strategy/actions/WorldPacketActionContext.h
 create mode 100644 src/plugins/playerbot/strategy/druid/BearTankDruidStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/druid/BearTankDruidStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/druid/CasterDruidStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/druid/CasterDruidStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/druid/CatDpsDruidStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/druid/CatDpsDruidStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/druid/DruidActions.cpp
 create mode 100644 src/plugins/playerbot/strategy/druid/DruidActions.h
 create mode 100644 src/plugins/playerbot/strategy/druid/DruidAiObjectContext.cpp
 create mode 100644 src/plugins/playerbot/strategy/druid/DruidAiObjectContext.h
 create mode 100644 src/plugins/playerbot/strategy/druid/DruidBearActions.h
 create mode 100644 src/plugins/playerbot/strategy/druid/DruidCatActions.h
 create mode 100644 src/plugins/playerbot/strategy/druid/DruidMultipliers.cpp
 create mode 100644 src/plugins/playerbot/strategy/druid/DruidMultipliers.h
 create mode 100644 src/plugins/playerbot/strategy/druid/DruidShapeshiftActions.h
 create mode 100644 src/plugins/playerbot/strategy/druid/DruidTriggers.cpp
 create mode 100644 src/plugins/playerbot/strategy/druid/DruidTriggers.h
 create mode 100644 src/plugins/playerbot/strategy/druid/FeralDruidStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/druid/FeralDruidStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/druid/GenericDruidNonCombatStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/druid/GenericDruidNonCombatStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/druid/GenericDruidStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/druid/GenericDruidStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/druid/HealDruidStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/druid/HealDruidStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/generic/AttackEnemyPlayersStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/generic/AttackEnemyPlayersStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/generic/AttackRtiStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/generic/AttackRtiStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/generic/AttackWeakStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/generic/AttackWeakStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/generic/CastTimeStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/generic/CastTimeStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/generic/ChatCommandHandlerStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/generic/ChatCommandHandlerStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/generic/CombatStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/generic/CombatStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/generic/ConserveManaStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/generic/ConserveManaStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/generic/DeadStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/generic/DeadStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/generic/DpsAoeStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/generic/DpsAoeStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/generic/DpsAssistStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/generic/DpsAssistStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/generic/DuelStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/generic/DuelStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/generic/EmoteStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/generic/EmoteStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/generic/FleeStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/generic/FleeStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/generic/FollowMasterStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/generic/FollowMasterStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/generic/GrindingStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/generic/GrindingStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/generic/GuardStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/generic/GuardStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/generic/KiteStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/generic/KiteStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/generic/LootNonCombatStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/generic/LootNonCombatStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/generic/MeleeCombatStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/generic/MeleeCombatStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/generic/MoveRandomStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/generic/MoveRandomStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/generic/NonCombatStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/generic/NonCombatStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/generic/PassTroughStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/generic/PassiveStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/generic/PassiveStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/generic/PullStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/generic/PullStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/generic/QuestStrategies.cpp
 create mode 100644 src/plugins/playerbot/strategy/generic/QuestStrategies.h
 create mode 100644 src/plugins/playerbot/strategy/generic/RacialsStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/generic/RacialsStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/generic/RangedCombatStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/generic/RangedCombatStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/generic/RunawayStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/generic/RunawayStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/generic/SayStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/generic/SayStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/generic/StayStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/generic/StayStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/generic/TankAoeStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/generic/TankAoeStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/generic/TankAssistStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/generic/TankAssistStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/generic/TellTargetStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/generic/TellTargetStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/generic/ThreatStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/generic/ThreatStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/generic/UseFoodStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/generic/UseFoodStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/generic/UsePotionsStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/generic/UsePotionsStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/generic/WorldPacketHandlerStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/generic/WorldPacketHandlerStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/hunter/DpsHunterStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/hunter/DpsHunterStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/hunter/GenericHunterNonCombatStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/hunter/GenericHunterNonCombatStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/hunter/GenericHunterStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/hunter/GenericHunterStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/hunter/HunterActions.cpp
 create mode 100644 src/plugins/playerbot/strategy/hunter/HunterActions.h
 create mode 100644 src/plugins/playerbot/strategy/hunter/HunterAiObjectContext.cpp
 create mode 100644 src/plugins/playerbot/strategy/hunter/HunterAiObjectContext.h
 create mode 100644 src/plugins/playerbot/strategy/hunter/HunterBuffStrategies.cpp
 create mode 100644 src/plugins/playerbot/strategy/hunter/HunterBuffStrategies.h
 create mode 100644 src/plugins/playerbot/strategy/hunter/HunterMultipliers.cpp
 create mode 100644 src/plugins/playerbot/strategy/hunter/HunterMultipliers.h
 create mode 100644 src/plugins/playerbot/strategy/hunter/HunterTriggers.cpp
 create mode 100644 src/plugins/playerbot/strategy/hunter/HunterTriggers.h
 create mode 100644 src/plugins/playerbot/strategy/mage/ArcaneMageStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/mage/ArcaneMageStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/mage/FireMageStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/mage/FireMageStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/mage/FrostMageStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/mage/FrostMageStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/mage/GenericMageNonCombatStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/mage/GenericMageNonCombatStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/mage/GenericMageStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/mage/GenericMageStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/mage/MageActions.cpp
 create mode 100644 src/plugins/playerbot/strategy/mage/MageActions.h
 create mode 100644 src/plugins/playerbot/strategy/mage/MageAiObjectContext.cpp
 create mode 100644 src/plugins/playerbot/strategy/mage/MageAiObjectContext.h
 create mode 100644 src/plugins/playerbot/strategy/mage/MageMultipliers.cpp
 create mode 100644 src/plugins/playerbot/strategy/mage/MageMultipliers.h
 create mode 100644 src/plugins/playerbot/strategy/mage/MageTriggers.cpp
 create mode 100644 src/plugins/playerbot/strategy/mage/MageTriggers.h
 create mode 100644 src/plugins/playerbot/strategy/paladin/DpsPaladinStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/paladin/DpsPaladinStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/paladin/GenericPaladinNonCombatStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/paladin/GenericPaladinNonCombatStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/paladin/GenericPaladinStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/paladin/GenericPaladinStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/paladin/GenericPaladinStrategyActionNodeFactory.h
 create mode 100644 src/plugins/playerbot/strategy/paladin/PaladinActions.cpp
 create mode 100644 src/plugins/playerbot/strategy/paladin/PaladinActions.h
 create mode 100644 src/plugins/playerbot/strategy/paladin/PaladinAiObjectContext.cpp
 create mode 100644 src/plugins/playerbot/strategy/paladin/PaladinAiObjectContext.h
 create mode 100644 src/plugins/playerbot/strategy/paladin/PaladinBuffStrategies.cpp
 create mode 100644 src/plugins/playerbot/strategy/paladin/PaladinBuffStrategies.h
 create mode 100644 src/plugins/playerbot/strategy/paladin/PaladinMultipliers.cpp
 create mode 100644 src/plugins/playerbot/strategy/paladin/PaladinMultipliers.h
 create mode 100644 src/plugins/playerbot/strategy/paladin/PaladinTriggers.cpp
 create mode 100644 src/plugins/playerbot/strategy/paladin/PaladinTriggers.h
 create mode 100644 src/plugins/playerbot/strategy/paladin/TankPaladinStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/paladin/TankPaladinStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/priest/GenericPriestStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/priest/GenericPriestStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/priest/GenericPriestStrategyActionNodeFactory.h
 create mode 100644 src/plugins/playerbot/strategy/priest/HealPriestStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/priest/HealPriestStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/priest/HolyPriestStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/priest/HolyPriestStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/priest/PriestActions.cpp
 create mode 100644 src/plugins/playerbot/strategy/priest/PriestActions.h
 create mode 100644 src/plugins/playerbot/strategy/priest/PriestAiObjectContext.cpp
 create mode 100644 src/plugins/playerbot/strategy/priest/PriestAiObjectContext.h
 create mode 100644 src/plugins/playerbot/strategy/priest/PriestMultipliers.cpp
 create mode 100644 src/plugins/playerbot/strategy/priest/PriestMultipliers.h
 create mode 100644 src/plugins/playerbot/strategy/priest/PriestNonCombatStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/priest/PriestNonCombatStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/priest/PriestNonCombatStrategyActionNodeFactory.h
 create mode 100644 src/plugins/playerbot/strategy/priest/PriestTriggers.cpp
 create mode 100644 src/plugins/playerbot/strategy/priest/PriestTriggers.h
 create mode 100644 src/plugins/playerbot/strategy/priest/ShadowPriestStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/priest/ShadowPriestStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/priest/ShadowPriestStrategyActionNodeFactory.h
 create mode 100644 src/plugins/playerbot/strategy/rogue/DpsRogueStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/rogue/DpsRogueStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/rogue/GenericRogueNonCombatStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/rogue/GenericRogueNonCombatStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/rogue/RogueActions.cpp
 create mode 100644 src/plugins/playerbot/strategy/rogue/RogueActions.h
 create mode 100644 src/plugins/playerbot/strategy/rogue/RogueAiObjectContext.cpp
 create mode 100644 src/plugins/playerbot/strategy/rogue/RogueAiObjectContext.h
 create mode 100644 src/plugins/playerbot/strategy/rogue/RogueComboActions.h
 create mode 100644 src/plugins/playerbot/strategy/rogue/RogueFinishingActions.h
 create mode 100644 src/plugins/playerbot/strategy/rogue/RogueMultipliers.cpp
 create mode 100644 src/plugins/playerbot/strategy/rogue/RogueMultipliers.h
 create mode 100644 src/plugins/playerbot/strategy/rogue/RogueOpeningActions.h
 create mode 100644 src/plugins/playerbot/strategy/rogue/RogueTriggers.cpp
 create mode 100644 src/plugins/playerbot/strategy/rogue/RogueTriggers.h
 create mode 100644 src/plugins/playerbot/strategy/shaman/CasterShamanStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/shaman/CasterShamanStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/shaman/GenericShamanStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/shaman/GenericShamanStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/shaman/HealShamanStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/shaman/HealShamanStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/shaman/MeleeShamanStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/shaman/MeleeShamanStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/shaman/ShamanActions.cpp
 create mode 100644 src/plugins/playerbot/strategy/shaman/ShamanActions.h
 create mode 100644 src/plugins/playerbot/strategy/shaman/ShamanAiObjectContext.cpp
 create mode 100644 src/plugins/playerbot/strategy/shaman/ShamanAiObjectContext.h
 create mode 100644 src/plugins/playerbot/strategy/shaman/ShamanMultipliers.cpp
 create mode 100644 src/plugins/playerbot/strategy/shaman/ShamanMultipliers.h
 create mode 100644 src/plugins/playerbot/strategy/shaman/ShamanNonCombatStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/shaman/ShamanNonCombatStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/shaman/ShamanTriggers.cpp
 create mode 100644 src/plugins/playerbot/strategy/shaman/ShamanTriggers.h
 create mode 100644 src/plugins/playerbot/strategy/shaman/TotemsShamanStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/shaman/TotemsShamanStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/triggers/ChatCommandTrigger.h
 create mode 100644 src/plugins/playerbot/strategy/triggers/ChatTriggerContext.h
 create mode 100644 src/plugins/playerbot/strategy/triggers/CureTriggers.cpp
 create mode 100644 src/plugins/playerbot/strategy/triggers/CureTriggers.h
 create mode 100644 src/plugins/playerbot/strategy/triggers/GenericTriggers.cpp
 create mode 100644 src/plugins/playerbot/strategy/triggers/GenericTriggers.h
 create mode 100644 src/plugins/playerbot/strategy/triggers/HealthTriggers.cpp
 create mode 100644 src/plugins/playerbot/strategy/triggers/HealthTriggers.h
 create mode 100644 src/plugins/playerbot/strategy/triggers/LfgTriggers.h
 create mode 100644 src/plugins/playerbot/strategy/triggers/LootTriggers.cpp
 create mode 100644 src/plugins/playerbot/strategy/triggers/LootTriggers.h
 create mode 100644 src/plugins/playerbot/strategy/triggers/RangeTriggers.h
 create mode 100644 src/plugins/playerbot/strategy/triggers/TriggerContext.h
 create mode 100644 src/plugins/playerbot/strategy/triggers/WithinAreaTrigger.h
 create mode 100644 src/plugins/playerbot/strategy/triggers/WorldPacketTrigger.h
 create mode 100644 src/plugins/playerbot/strategy/triggers/WorldPacketTriggerContext.h
 create mode 100644 src/plugins/playerbot/strategy/values/AlwaysLootListValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/AoeHealValues.cpp
 create mode 100644 src/plugins/playerbot/strategy/values/AoeHealValues.h
 create mode 100644 src/plugins/playerbot/strategy/values/AttackerCountValues.cpp
 create mode 100644 src/plugins/playerbot/strategy/values/AttackerCountValues.h
 create mode 100644 src/plugins/playerbot/strategy/values/AttackerWithoutAuraTargetValue.cpp
 create mode 100644 src/plugins/playerbot/strategy/values/AttackerWithoutAuraTargetValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/AttackersValue.cpp
 create mode 100644 src/plugins/playerbot/strategy/values/AttackersValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/AvailableLootValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/CcTargetValue.cpp
 create mode 100644 src/plugins/playerbot/strategy/values/CcTargetValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/ChatValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/CurrentCcTargetValue.cpp
 create mode 100644 src/plugins/playerbot/strategy/values/CurrentCcTargetValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/CurrentTargetValue.cpp
 create mode 100644 src/plugins/playerbot/strategy/values/CurrentTargetValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/DistanceValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/DpsTargetValue.cpp
 create mode 100644 src/plugins/playerbot/strategy/values/DpsTargetValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/DuelTargetValue.cpp
 create mode 100644 src/plugins/playerbot/strategy/values/DuelTargetValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/EnemyHealerTargetValue.cpp
 create mode 100644 src/plugins/playerbot/strategy/values/EnemyHealerTargetValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/EnemyPlayerValue.cpp
 create mode 100644 src/plugins/playerbot/strategy/values/EnemyPlayerValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/Formations.cpp
 create mode 100644 src/plugins/playerbot/strategy/values/Formations.h
 create mode 100644 src/plugins/playerbot/strategy/values/GrindTargetValue.cpp
 create mode 100644 src/plugins/playerbot/strategy/values/GrindTargetValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/HasAvailableLootValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/HasTotemValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/InvalidTargetValue.cpp
 create mode 100644 src/plugins/playerbot/strategy/values/InvalidTargetValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/IsBehindValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/IsFacingValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/IsMovingValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/ItemCountValue.cpp
 create mode 100644 src/plugins/playerbot/strategy/values/ItemCountValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/ItemForSpellValue.cpp
 create mode 100644 src/plugins/playerbot/strategy/values/ItemForSpellValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/ItemUsageValue.cpp
 create mode 100644 src/plugins/playerbot/strategy/values/ItemUsageValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/LastMovementValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/LastSaidValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/LastSpellCastTimeValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/LastSpellCastValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/LeastHpTargetValue.cpp
 create mode 100644 src/plugins/playerbot/strategy/values/LeastHpTargetValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/LfgValues.h
 create mode 100644 src/plugins/playerbot/strategy/values/LineTargetValue.cpp
 create mode 100644 src/plugins/playerbot/strategy/values/LineTargetValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/LogLevelValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/LootStrategyValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/ManaSaveLevelValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/MasterTargetValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/NearestAdsValue.cpp
 create mode 100644 src/plugins/playerbot/strategy/values/NearestAdsValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/NearestCorpsesValue.cpp
 create mode 100644 src/plugins/playerbot/strategy/values/NearestCorpsesValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/NearestGameObjects.cpp
 create mode 100644 src/plugins/playerbot/strategy/values/NearestGameObjects.h
 create mode 100644 src/plugins/playerbot/strategy/values/NearestNpcsValue.cpp
 create mode 100644 src/plugins/playerbot/strategy/values/NearestNpcsValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/NearestUnitsValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/PartyMemberToDispel.cpp
 create mode 100644 src/plugins/playerbot/strategy/values/PartyMemberToDispel.h
 create mode 100644 src/plugins/playerbot/strategy/values/PartyMemberToHeal.cpp
 create mode 100644 src/plugins/playerbot/strategy/values/PartyMemberToHeal.h
 create mode 100644 src/plugins/playerbot/strategy/values/PartyMemberToResurrect.cpp
 create mode 100644 src/plugins/playerbot/strategy/values/PartyMemberToResurrect.h
 create mode 100644 src/plugins/playerbot/strategy/values/PartyMemberValue.cpp
 create mode 100644 src/plugins/playerbot/strategy/values/PartyMemberValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/PartyMemberWithoutAuraValue.cpp
 create mode 100644 src/plugins/playerbot/strategy/values/PartyMemberWithoutAuraValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/PetTargetValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/PositionValue.cpp
 create mode 100644 src/plugins/playerbot/strategy/values/PositionValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/PossibleTargetsValue.cpp
 create mode 100644 src/plugins/playerbot/strategy/values/PossibleTargetsValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/RtiTargetValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/RtiValue.cpp
 create mode 100644 src/plugins/playerbot/strategy/values/RtiValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/SelfTargetValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/SpellCastUsefulValue.cpp
 create mode 100644 src/plugins/playerbot/strategy/values/SpellCastUsefulValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/SpellIdValue.cpp
 create mode 100644 src/plugins/playerbot/strategy/values/SpellIdValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/StatsValues.cpp
 create mode 100644 src/plugins/playerbot/strategy/values/StatsValues.h
 create mode 100644 src/plugins/playerbot/strategy/values/TankTargetValue.cpp
 create mode 100644 src/plugins/playerbot/strategy/values/TankTargetValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/TargetValue.cpp
 create mode 100644 src/plugins/playerbot/strategy/values/TargetValue.h
 create mode 100644 src/plugins/playerbot/strategy/values/ThreatValues.cpp
 create mode 100644 src/plugins/playerbot/strategy/values/ThreatValues.h
 create mode 100644 src/plugins/playerbot/strategy/values/ValueContext.h
 create mode 100644 src/plugins/playerbot/strategy/values/formations/Arrow.cpp
 create mode 100644 src/plugins/playerbot/strategy/values/formations/Arrow.h
 create mode 100644 src/plugins/playerbot/strategy/warlock/DpsWarlockStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/warlock/DpsWarlockStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/warlock/GenericWarlockNonCombatStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/warlock/GenericWarlockNonCombatStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/warlock/GenericWarlockStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/warlock/GenericWarlockStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/warlock/TankWarlockStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/warlock/TankWarlockStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/warlock/WarlockActions.cpp
 create mode 100644 src/plugins/playerbot/strategy/warlock/WarlockActions.h
 create mode 100644 src/plugins/playerbot/strategy/warlock/WarlockAiObjectContext.cpp
 create mode 100644 src/plugins/playerbot/strategy/warlock/WarlockAiObjectContext.h
 create mode 100644 src/plugins/playerbot/strategy/warlock/WarlockMultipliers.cpp
 create mode 100644 src/plugins/playerbot/strategy/warlock/WarlockMultipliers.h
 create mode 100644 src/plugins/playerbot/strategy/warlock/WarlockTriggers.cpp
 create mode 100644 src/plugins/playerbot/strategy/warlock/WarlockTriggers.h
 create mode 100644 src/plugins/playerbot/strategy/warrior/DpsWarriorStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/warrior/DpsWarriorStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/warrior/GenericWarriorNonCombatStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/warrior/GenericWarriorNonCombatStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/warrior/GenericWarriorStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/warrior/GenericWarriorStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/warrior/TankWarriorStrategy.cpp
 create mode 100644 src/plugins/playerbot/strategy/warrior/TankWarriorStrategy.h
 create mode 100644 src/plugins/playerbot/strategy/warrior/WarriorActions.cpp
 create mode 100644 src/plugins/playerbot/strategy/warrior/WarriorActions.h
 create mode 100644 src/plugins/playerbot/strategy/warrior/WarriorAiObjectContext.cpp
 create mode 100644 src/plugins/playerbot/strategy/warrior/WarriorAiObjectContext.h
 create mode 100644 src/plugins/playerbot/strategy/warrior/WarriorMultipliers.cpp
 create mode 100644 src/plugins/playerbot/strategy/warrior/WarriorMultipliers.h
 create mode 100644 src/plugins/playerbot/strategy/warrior/WarriorTriggers.cpp
 create mode 100644 src/plugins/playerbot/strategy/warrior/WarriorTriggers.h

diff --git a/cmake/options.cmake b/cmake/options.cmake
index 1961500..8cacf7c 100644
--- a/cmake/options.cmake
+++ b/cmake/options.cmake
@@ -18,3 +18,4 @@ option(WITH_COREDEBUG   "Include additional debug-code in core"
 set(WITH_SOURCE_TREE "no" CACHE STRING "Build the source tree for IDE's.")
 set_property(CACHE WITH_SOURCE_TREE PROPERTY STRINGS no flat hierarchical)
 option(WITHOUT_GIT      "Disable the GIT testing routines"                            0)
+option(TESTS            "Build cppunit tests"                                         0)
diff --git a/sql/TrinityCore-Patches/LordPsyanBots/character_lordpsyanbots.sql b/sql/TrinityCore-Patches/LordPsyanBots/character_lordpsyanbots.sql
new file mode 100644
index 0000000..1d094dd
--- /dev/null
+++ b/sql/TrinityCore-Patches/LordPsyanBots/character_lordpsyanbots.sql
@@ -0,0 +1,10771 @@
+DROP TABLE IF EXISTS `characters_npcbot`;
+CREATE TABLE `characters_npcbot` (
+  `entry` int(10) unsigned NOT NULL COMMENT 'creature_template.entry',
+  `owner` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'characters.guid (lowguid)',
+  `roles` tinyint(3) unsigned NOT NULL COMMENT 'bitmask: tank(1),dps(2),heal(4),ranged(8)',
+  `faction` int(10) unsigned NOT NULL DEFAULT '14',
+  `equipMhEx` int(10) unsigned NOT NULL DEFAULT '0',
+  `equipOhEx` int(10) unsigned NOT NULL DEFAULT '0',
+  `equipRhEx` int(10) unsigned NOT NULL DEFAULT '0',
+  `equipHead` int(10) unsigned NOT NULL DEFAULT '0',
+  `equipShoulders` int(10) unsigned NOT NULL DEFAULT '0',
+  `equipChest` int(10) unsigned NOT NULL DEFAULT '0',
+  `equipWaist` int(10) unsigned NOT NULL DEFAULT '0',
+  `equipLegs` int(10) unsigned NOT NULL DEFAULT '0',
+  `equipFeet` int(10) unsigned NOT NULL DEFAULT '0',
+  `equipWrist` int(10) unsigned NOT NULL DEFAULT '0',
+  `equipHands` int(10) unsigned NOT NULL DEFAULT '0',
+  `equipBack` int(10) unsigned NOT NULL DEFAULT '0',
+  `equipBody` int(10) unsigned NOT NULL DEFAULT '0',
+  `equipFinger1` int(10) unsigned NOT NULL DEFAULT '0',
+  `equipFinger2` int(10) unsigned NOT NULL DEFAULT '0',
+  `equipTrinket1` int(10) unsigned NOT NULL DEFAULT '0',
+  `equipTrinket2` int(10) unsigned NOT NULL DEFAULT '0',
+  `equipNeck` int(10) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`entry`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+DROP TABLE IF EXISTS `ai_playerbot_random_bots`;
+
+CREATE TABLE `ai_playerbot_random_bots` (
+  `id` bigint(20) NOT NULL AUTO_INCREMENT,
+  `owner` bigint(20) NOT NULL,
+  `bot` bigint(20) NOT NULL,
+  `time` bigint(20) NOT NULL,
+  `validIn` bigint(20) DEFAULT NULL,
+  `event` varchar(45) DEFAULT NULL,
+  `value` bigint(20) DEFAULT NULL,
+  `data` varchar(255) DEFAULT NULL,
+  PRIMARY KEY (`id`),
+  KEY `owner` (`owner`),
+  KEY `bot` (`bot`),
+  KEY `event` (`event`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+
+DROP TABLE IF EXISTS `ai_playerbot_guild_tasks`;
+
+CREATE TABLE `ai_playerbot_guild_tasks` (
+  `id` bigint(20) NOT NULL AUTO_INCREMENT,
+  `owner` bigint(20) NOT NULL,
+  `guildid` bigint(20) NOT NULL,
+  `time` bigint(20) NOT NULL,
+  `validIn` bigint(20) DEFAULT NULL,
+  `type` varchar(45) DEFAULT NULL,
+  `value` bigint(20) DEFAULT NULL,
+  `data` varchar(255) DEFAULT NULL,
+  PRIMARY KEY (`id`),
+  KEY `owner` (`owner`),
+  KEY `guildid` (`guildid`),
+  KEY `type` (`type`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+DROP TABLE IF EXISTS `ahbot_history`;
+DROP TABLE IF EXISTS `ahbot_category`;
+DROP TABLE IF EXISTS `ahbot_price`;
+
+CREATE TABLE `ahbot_history` (
+  `id` bigint(20) NOT NULL AUTO_INCREMENT,
+  `buytime` bigint(20) NOT NULL,
+  `item` bigint(20) NOT NULL,
+  `bid` bigint(20) NOT NULL,
+  `buyout` bigint(20) NOT NULL,
+  `won` bigint(20) NOT NULL,
+  `category` varchar(45) DEFAULT NULL,
+  `auction_house` bigint(20) NOT NULL,
+  PRIMARY KEY (`id`),
+  KEY `won` (`won`),
+  KEY `category` (`category`),
+  KEY `auction_house` (`auction_house`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+CREATE TABLE `ahbot_category` (
+  `id` bigint(20) NOT NULL AUTO_INCREMENT,
+  `category` varchar(45) DEFAULT NULL,
+  `multiplier` decimal(20, 2) NOT NULL,
+  `max_auction_count` bigint(20) NOT NULL,
+  `expire_time` bigint(20) NOT NULL,
+  PRIMARY KEY (`id`),
+  KEY `helper` (`category`, `multiplier`, `expire_time`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+CREATE TABLE `ahbot_price` (
+  `id` bigint(20) NOT NULL AUTO_INCREMENT,
+  `item` varchar(45) DEFAULT NULL,
+  `price` decimal(20, 2) NOT NULL,
+  `auction_house` bigint(20) NOT NULL,
+  PRIMARY KEY (`id`),
+  KEY `ahbot_price_item` (`item`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+DROP TABLE IF EXISTS `ai_playerbot_guild_names`;
+CREATE TABLE `ai_playerbot_guild_names` (
+  `name_id` MEDIUMINT(8) NOT NULL AUTO_INCREMENT UNIQUE,
+  `name` VARCHAR(24) NOT NULL UNIQUE,
+  PRIMARY KEY (`name_id`)
+) ENGINE=MYISAM DEFAULT CHARSET=utf8 ROW_FORMAT=FIXED COMMENT='PlayerbotAI guild names';
+
+LOCK TABLES `ai_playerbot_guild_names` WRITE;
+INSERT INTO `ai_playerbot_guild_names` VALUES
+(NULL, 'Black Guard'),
+(NULL, 'Abyssal Kingdoms'),
+(NULL, 'Acid Evil'),
+(NULL, 'Addicts Muskateers'),
+(NULL, 'Adventurers War'),
+(NULL, 'Age of Red Water Clan'),
+(NULL, 'Alivso Reason'),
+(NULL, 'All Knights'),
+(NULL, 'Allegiance of the Vile'),
+(NULL, 'Alliance Clan'),
+(NULL, 'Alliance of Defectives'),
+(NULL, 'Alti Legions'),
+(NULL, 'Anarchie Shi'),
+(NULL, 'Anchors of the Nominal'),
+(NULL, 'Ancients of Part Times'),
+(NULL, 'Angelus Gods'),
+(NULL, 'Angry Party'),
+(NULL, 'Apocalyptic Lamont'),
+(NULL, 'Architects of Green'),
+(NULL, 'Army of Black Widows'),
+(NULL, 'Army of Orgrimmar Minds'),
+(NULL, 'Army of Three Horses'),
+(NULL, 'Arrows of Midlight'),
+(NULL, 'Artisans of Best Guild'),
+(NULL, 'Assasins of the Pyrewood'),
+(NULL, 'Assassins Bane'),
+(NULL, 'Avatars of Warsong Stuff'),
+(NULL, 'Axis of the Funky Night'),
+(NULL, 'Azeroth Souls'),
+(NULL, 'Azeroths Rabbits'),
+(NULL, 'Bad Sentinels'),
+(NULL, 'Banana Song'),
+(NULL, 'Band of Tarantula Attack'),
+(NULL, 'Band of the Dark Reveren'),
+(NULL, 'Barcode Praised'),
+(NULL, 'Basher Goats'),
+(NULL, 'Basic Order'),
+(NULL, 'Batman of Banished'),
+(NULL, 'Betrayers of Lucky Child'),
+(NULL, 'Blackwater Committee'),
+(NULL, 'Blades of Lich Kings'),
+(NULL, 'Blades of the Hive'),
+(NULL, 'Blades of the Total'),
+(NULL, 'Bleeding War'),
+(NULL, 'Blessed Lair'),
+(NULL, 'Blizzards of the Iron'),
+(NULL, 'Blood Chaos'),
+(NULL, 'Blood Intrigue'),
+(NULL, 'Blood Samurai'),
+(NULL, 'Bloodlust Good'),
+(NULL, 'Bonds of Reported Ignore'),
+(NULL, 'Booty Cry'),
+(NULL, 'Border Knights'),
+(NULL, 'Bossmans Targaryen'),
+(NULL, 'Braveheart Heaven'),
+(NULL, 'Brotherhood of Twilight'),
+(NULL, 'Bruised Pain'),
+(NULL, 'Burning Control'),
+(NULL, 'Burning Oblivion'),
+(NULL, 'Cabal of Kalimdor'),
+(NULL, 'Cake Crusade'),
+(NULL, 'Call of the Ironforge'),
+(NULL, 'Carebears Thunder'),
+(NULL, 'Carpe Heaven'),
+(NULL, 'Carpe Regiment'),
+(NULL, 'Children of Order'),
+(NULL, 'Children of the Gods'),
+(NULL, 'Circle of Amor E Bobby'),
+(NULL, 'Clan of the Elven Toys'),
+(NULL, 'Clan of the Strike Light'),
+(NULL, 'Coalition of Super Best'),
+(NULL, 'Collective Pimps'),
+(NULL, 'Companions of the Gnome'),
+(NULL, 'Company of the Vibe'),
+(NULL, 'Conclave of the Triad'),
+(NULL, 'Council of Final Demise'),
+(NULL, 'Council of Hard Core Ord'),
+(NULL, 'Craaweh Thrall'),
+(NULL, 'Cradle Scourge'),
+(NULL, 'Crimson Angels'),
+(NULL, 'Crimson Saints'),
+(NULL, 'Crusade of Oh'),
+(NULL, 'Crusaders of Undead'),
+(NULL, 'Cryptic Serenity'),
+(NULL, 'Csa Rigged'),
+(NULL, 'Cult of the Raging Raid'),
+(NULL, 'Dalaran Fair'),
+(NULL, 'Damage Inc'),
+(NULL, 'Dark Alliance'),
+(NULL, 'Dark Azeroth'),
+(NULL, 'Dark Damage'),
+(NULL, 'Dark Resistus'),
+(NULL, 'Dark Samurai'),
+(NULL, 'Dark Turtles'),
+(NULL, 'Darken Mercenaries'),
+(NULL, 'Darkened Malevolence'),
+(NULL, 'Darkness of Sword Coast'),
+(NULL, 'Dawn of Knights Society'),
+(NULL, 'Dawn of Mad Sentry'),
+(NULL, 'Dead Zug'),
+(NULL, 'Death Darkness'),
+(NULL, 'Death Knights'),
+(NULL, 'Deathlike Goods'),
+(NULL, 'Deaths Venoms'),
+(NULL, 'Decree of the Phumpers'),
+(NULL, 'Defenders of Da Raised'),
+(NULL, 'Defenders of Hyuuga Dark'),
+(NULL, 'Defenders of Sacred Harm'),
+(NULL, 'Deths Lords'),
+(NULL, 'Devil Circl'),
+(NULL, 'Devils Klng'),
+(NULL, 'Dharma Hand'),
+(NULL, 'Dharma Thorn'),
+(NULL, 'Dies Ravager'),
+(NULL, 'Disciples of Dead Panda'),
+(NULL, 'Disciples of the Rot'),
+(NULL, 'Doomsday Youth'),
+(NULL, 'Dorcha Knights'),
+(NULL, 'Dots of Dead Skull'),
+(NULL, 'Dragon Arms'),
+(NULL, 'Dragonhawk Revolution'),
+(NULL, 'Dragons Erythnul'),
+(NULL, 'Dragons of the Black'),
+(NULL, 'Drunken Thunder'),
+(NULL, 'Drunks of Matoskan'),
+(NULL, 'Dwarven Rock'),
+(NULL, 'Dynasty of the Emerald'),
+(NULL, 'Eastern Asylum'),
+(NULL, 'Echo Sanctus'),
+(NULL, 'Echoes of the Muphin'),
+(NULL, 'Effreno Death'),
+(NULL, 'Elite Guild'),
+(NULL, 'Elite Legion'),
+(NULL, 'Elite Veritas'),
+(NULL, 'Elunes Meat'),
+(NULL, 'Emerald Men'),
+(NULL, 'Emerald Mjolnir'),
+(NULL, 'Endless Defense'),
+(NULL, 'Enemies of Bleeding'),
+(NULL, 'Enternal Saber'),
+(NULL, 'Evictors of the Returned'),
+(NULL, 'Evil Guard'),
+(NULL, 'Exalted Effect'),
+(NULL, 'Eyes of a Night Elf'),
+(NULL, 'Eyes of the Elton Souls'),
+(NULL, 'Fallen Clan'),
+(NULL, 'Fallen Milk'),
+(NULL, 'Fenrir Seeker'),
+(NULL, 'Final Army'),
+(NULL, 'Flames of Ale Drinkers'),
+(NULL, 'Flames of Antarian Chaos'),
+(NULL, 'Forestt''s Wrath'),
+(NULL, 'Forgotten Within'),
+(NULL, 'From Synergy'),
+(NULL, 'Frozen Oblivion'),
+(NULL, 'Gashlycrumb Rollers'),
+(NULL, 'Giovannitwos Elune'),
+(NULL, 'Glass Meridian'),
+(NULL, 'Gnome Faction'),
+(NULL, 'Gods Gold'),
+(NULL, 'Gods of the Complete'),
+(NULL, 'Gold Catchers'),
+(NULL, 'Golden Legendz'),
+(NULL, 'Golden Souls'),
+(NULL, 'Goldshire Goats'),
+(NULL, 'Good Azeroth'),
+(NULL, 'Gotz Safety'),
+(NULL, 'Grammaton Alliance'),
+(NULL, 'Great Circle'),
+(NULL, 'Guardians of Honor'),
+(NULL, 'Guards of Frostmane'),
+(NULL, 'Guild of La Mano Dragons'),
+(NULL, 'Guild of the Puppet'),
+(NULL, 'Haggles Brigade'),
+(NULL, 'Hammer of the Moral'),
+(NULL, 'Hand of the Iron'),
+(NULL, 'Hands of Far Con Buddies'),
+(NULL, 'Hearts Knights'),
+(NULL, 'Hell Angels'),
+(NULL, 'Hells Thorn'),
+(NULL, 'Holy Darnassus'),
+(NULL, 'Horde Abh'),
+(NULL, 'Horde Dragons'),
+(NULL, 'Horde Leaders'),
+(NULL, 'Horde Squad'),
+(NULL, 'Horde of Omnia'),
+(NULL, 'Horde of Free Brigade'),
+(NULL, 'Horde of Shadow Flush'),
+(NULL, 'Hordes Buccaneers'),
+(NULL, 'Hordes Marauders'),
+(NULL, 'House Crusaders'),
+(NULL, 'Immortality Honor'),
+(NULL, 'Inside Poof'),
+(NULL, 'Iron Boyz'),
+(NULL, 'Iscariot Ginas'),
+(NULL, 'Island Kimchi'),
+(NULL, 'Jenovas Wild'),
+(NULL, 'Kalimdor Darkness'),
+(NULL, 'Keepers of Golden Misery'),
+(NULL, 'Keggers of Alt Hand Aton'),
+(NULL, 'Kill Mafia'),
+(NULL, 'Killer Durotar'),
+(NULL, 'Killer Force'),
+(NULL, 'Kindred Yardies'),
+(NULL, 'Kindred of King Assassin'),
+(NULL, 'Kingdom of the Ordo Crew'),
+(NULL, 'Kings Boys'),
+(NULL, 'Kings Windstorm'),
+(NULL, 'Kings of Blood Knuckle'),
+(NULL, 'Kings of Dol Aegis'),
+(NULL, 'Knight Combat'),
+(NULL, 'Knight of Fuzzy Night'),
+(NULL, 'Knights of Darkspear'),
+(NULL, 'Knights of Heavens Grave'),
+(NULL, 'Knights of Myrmidon Ivxx'),
+(NULL, 'Knights of the Avenging'),
+(NULL, 'Knights of the Ballpeen'),
+(NULL, 'Knights of the Black'),
+(NULL, 'Knights of the Bloodhoof'),
+(NULL, 'Knights of the Sovereign'),
+(NULL, 'Knights of the Storm'),
+(NULL, 'Knights of the Zulian'),
+(NULL, 'Last Ptesanwi'),
+(NULL, 'League of Hate Crew Seek'),
+(NULL, 'Legacy of Ninth Beard'),
+(NULL, 'Legendary Sons'),
+(NULL, 'Legion of Maple Syrup'),
+(NULL, 'Legion of Public Works'),
+(NULL, 'Legion of Three Course'),
+(NULL, 'Legion of United Souls'),
+(NULL, 'Legion of Westfall Gold'),
+(NULL, 'Legion of the Dark'),
+(NULL, 'Legionnaires of Skull'),
+(NULL, 'Les Warriors'),
+(NULL, 'Lifetakers Inc'),
+(NULL, 'Light of Dark Spire'),
+(NULL, 'Light of Jade Renegade'),
+(NULL, 'Liquid Guild'),
+(NULL, 'Lone Side'),
+(NULL, 'Lords of Fallen Blood'),
+(NULL, 'Los Frum'),
+(NULL, 'Lost Boyz'),
+(NULL, 'Lost Squad'),
+(NULL, 'Mad Daggers'),
+(NULL, 'Malice Fatale'),
+(NULL, 'Mandate of Jade'),
+(NULL, 'Marines of the Butt'),
+(NULL, 'Mercenaries of the Death'),
+(NULL, 'Midget Council'),
+(NULL, 'Midgets of Dark Sexy'),
+(NULL, 'Midnight Norrathians'),
+(NULL, 'Midnight Slayer'),
+(NULL, 'Midnight War'),
+(NULL, 'Minions of the Shadow'),
+(NULL, 'Ministry of the Allince'),
+(NULL, 'Mithril Destiny'),
+(NULL, 'Monarchs of Party Crew'),
+(NULL, 'Money Call'),
+(NULL, 'Moonwood Redeye'),
+(NULL, 'Narrow Patrol'),
+(NULL, 'New Clan'),
+(NULL, 'Night Pack'),
+(NULL, 'Nightmare Guild'),
+(NULL, 'Ninja Pledge'),
+(NULL, 'Nocturne of Totally Dead'),
+(NULL, 'Obsidian Fish'),
+(NULL, 'Old Cosa'),
+(NULL, 'One Valor'),
+(NULL, 'Opus Faithful'),
+(NULL, 'Order of Alts oF Fate'),
+(NULL, 'Order of Nagas Bike Hunt'),
+(NULL, 'Order of Omega Wards'),
+(NULL, 'Order of Pink'),
+(NULL, 'Order of Shield Bed'),
+(NULL, 'Order of the Alt Sheep'),
+(NULL, 'Order of the Honor'),
+(NULL, 'Order of the Divine Lord'),
+(NULL, 'Ordo Force'),
+(NULL, 'Orgrimmar Ones'),
+(NULL, 'Out of Lw Downed Wrynn'),
+(NULL, 'Out of Mithril Avengers'),
+(NULL, 'Oxbloods Medivh'),
+(NULL, 'Pally Guard'),
+(NULL, 'Path of the Brain'),
+(NULL, 'Peddlers of the Hidden'),
+(NULL, 'Phantoms of Wicked'),
+(NULL, 'Phoenix Keepers'),
+(NULL, 'Pillowcase Azeroth'),
+(NULL, 'Pillowcase Cats'),
+(NULL, 'Pius Tribe'),
+(NULL, 'Plague of Human Slayer'),
+(NULL, 'Plan Hand'),
+(NULL, 'Power of Tuatha De Blood'),
+(NULL, 'Priest Guild'),
+(NULL, 'Prophets of Fatima War'),
+(NULL, 'Prophets of Outlaw'),
+(NULL, 'Prophets of the Red Mean'),
+(NULL, 'Protectors of Black Hand'),
+(NULL, 'Pure Aequitas'),
+(NULL, 'Question Thrall'),
+(NULL, 'Quintessential Sister'),
+(NULL, 'Rage of Prairie Black'),
+(NULL, 'Rage of the Flame'),
+(NULL, 'Raiders of Candy Heart'),
+(NULL, 'Raiders of the Purple'),
+(NULL, 'Raiders of the Sil'),
+(NULL, 'Ram Runners'),
+(NULL, 'Rangers Vengeance'),
+(NULL, 'Rangers of Interitus'),
+(NULL, 'Raven Clan'),
+(NULL, 'Razzle Guardian'),
+(NULL, 'Reapers of the Shadow'),
+(NULL, 'Reckless Knights'),
+(NULL, 'Red Byam'),
+(NULL, 'Red Death'),
+(NULL, 'Reign of Alliance Task'),
+(NULL, 'Reign of Blazing Frell'),
+(NULL, 'Reign of Pure Conway'),
+(NULL, 'Restoration of Illegal'),
+(NULL, 'Resurrection of Tenui'),
+(NULL, 'Ronin Kalimdor'),
+(NULL, 'Rotting Tears'),
+(NULL, 'Ruins of Dark Azeroth'),
+(NULL, 'Rulers of Devils'),
+(NULL, 'Sacred Parts'),
+(NULL, 'Sacred Society'),
+(NULL, 'Sacrificial Brotherhood'),
+(NULL, 'Sanguine Council'),
+(NULL, 'Sapphic Exiles'),
+(NULL, 'Savage Kalimdor'),
+(NULL, 'Scourge of Eight Inches'),
+(NULL, 'Scourge of Wow Knights'),
+(NULL, 'Scythe Sauce'),
+(NULL, 'Secret Clan'),
+(NULL, 'Seki Council'),
+(NULL, 'Seraph Legends'),
+(NULL, 'Shaded Judgement'),
+(NULL, 'Shadow America'),
+(NULL, 'Shadow Boys'),
+(NULL, 'Shadow Knights'),
+(NULL, 'Shadowed Ghosts'),
+(NULL, 'Shadowed Goat'),
+(NULL, 'Shadows of Cole Trainz'),
+(NULL, 'Shadows of Los Banditos'),
+(NULL, 'Shattered Stormrage'),
+(NULL, 'Silent Night'),
+(NULL, 'Silver Fools'),
+(NULL, 'Silversky Sun'),
+(NULL, 'Sisters of Kalimdor'),
+(NULL, 'Skulled Ironforge'),
+(NULL, 'Slayers of the Primals'),
+(NULL, 'Sleepy Steel'),
+(NULL, 'Soldiers of Azeroth'),
+(NULL, 'Soldiers of Stalker'),
+(NULL, 'Sons of Lambent Virtue'),
+(NULL, 'Sons of the Top Truth'),
+(NULL, 'Soul Wish'),
+(NULL, 'Souls of Elite Gnome'),
+(NULL, 'Spanaway Metalheadz'),
+(NULL, 'Spoony Demise'),
+(NULL, 'Squires of Sacred Tribe'),
+(NULL, 'Stagnant Jesters'),
+(NULL, 'Stars of Gear Farming'),
+(NULL, 'Stupid Crusaders'),
+(NULL, 'Stop Guides'),
+(NULL, 'Storm of the Mope''s'),
+(NULL, 'Stormrage Ferguson'),
+(NULL, 'Stormtroopers of Fatima '),
+(NULL, 'Stormwind Crew'),
+(NULL, 'Straight Caedes'),
+(NULL, 'Stronghold Angels'),
+(NULL, 'Sturgeon Empire'),
+(NULL, 'Survivors of Devil Club'),
+(NULL, 'Sweet Bear'),
+(NULL, 'Sword of Lost Evil'),
+(NULL, 'Tainted Bunnies'),
+(NULL, 'Talon of the Eclectic'),
+(NULL, 'Team Kingdom'),
+(NULL, 'Team United'),
+(NULL, 'Tears of Eternal Kitties'),
+(NULL, 'Tears of Phantom Druids'),
+(NULL, 'Templar of Raid Dodgers'),
+(NULL, 'Templars of Plagueware'),
+(NULL, 'Terra Totem'),
+(NULL, 'Terra War'),
+(NULL, 'Abiem'),
+(NULL, 'Aceofchaos'),
+(NULL, 'Afterlife'),
+(NULL, 'Aggression'),
+(NULL, 'Alliance of Dark'),
+(NULL, 'Altimate'),
+(NULL, 'Ancona Fire'),
+(NULL, 'Apocalypse'),
+(NULL, 'Arcane Monkey'),
+(NULL, 'Army of Spartans'),
+(NULL, 'Avalon'),
+(NULL, 'Avengers of Shining'),
+(NULL, 'Azure Gangstaz'),
+(NULL, 'Battlegnome'),
+(NULL, 'Black Hand Haven'),
+(NULL, 'Blackdraygon'),
+(NULL, 'Blackout'),
+(NULL, 'Blade'),
+(NULL, 'Blades of Caer Eel'),
+(NULL, 'Blades of Onyxia'),
+(NULL, 'Blood Red Violence'),
+(NULL, 'Blood of Red Powers'),
+(NULL, 'Bloodycrusaders'),
+(NULL, 'Blues Azeroth'),
+(NULL, 'Blues Grimfang'),
+(NULL, 'Bluethunder'),
+(NULL, 'Bonds of Arcane'),
+(NULL, 'Brimstone'),
+(NULL, 'Broken Chaos'),
+(NULL, 'Brood of Unknown'),
+(NULL, 'Burning Dog Firewall'),
+(NULL, 'Cabal'),
+(NULL, 'Cake Gankers'),
+(NULL, 'Cannabuddies'),
+(NULL, 'Circle of Shadow'),
+(NULL, 'Clan Blackwatch Few'),
+(NULL, 'Clan Cats'),
+(NULL, 'Clan Knights'),
+(NULL, 'Clean Combinations'),
+(NULL, 'Clean Up Guard'),
+(NULL, 'Council of Dark'),
+(NULL, 'Covenant'),
+(NULL, 'Crimson Guild'),
+(NULL, 'Crimson Marbock'),
+(NULL, 'Crusaders of Horde'),
+(NULL, 'Crusaders of Seksoni'),
+(NULL, 'Cult of Clan Brigade'),
+(NULL, 'Cult of the Pink'),
+(NULL, 'Daggers of the Vile'),
+(NULL, 'Dark'),
+(NULL, 'Dark Dogs'),
+(NULL, 'Dark Pain'),
+(NULL, 'Darkfall'),
+(NULL, 'Darkside Vanguard'),
+(NULL, 'Darkside of Initium'),
+(NULL, 'Daughters of the Elite'),
+(NULL, 'Daytripper'),
+(NULL, 'Deadfriends'),
+(NULL, 'Defiant'),
+(NULL, 'Dont Overwhelming'),
+(NULL, 'Doom Pasta'),
+(NULL, 'Dragon Redeye'),
+(NULL, 'Dragons Flame'),
+(NULL, 'Dreadlords'),
+(NULL, 'Dublainn Crown'),
+(NULL, 'Durban Protecters'),
+(NULL, 'Echoes of Goldshire'),
+(NULL, 'Elit of Dark Elune'),
+(NULL, 'Emissaries of Furiou'),
+(NULL, 'Eternal Chaos'),
+(NULL, 'Eternus'),
+(NULL, 'Exiie'),
+(NULL, 'Expendable Shadow'),
+(NULL, 'Faith of Desert'),
+(NULL, 'Family Misfits'),
+(NULL, 'Fere Darkness'),
+(NULL, 'Final Tears'),
+(NULL, 'Forsaken Boochies'),
+(NULL, 'Gates of the Bloody'),
+(NULL, 'Gnomes Lordaero'),
+(NULL, 'Gods of Blackscar'),
+(NULL, 'Gods of Twilight'),
+(NULL, 'Gold Fighters'),
+(NULL, 'Guardian Thieves'),
+(NULL, 'Guardians of Gnome'),
+(NULL, 'Hands of Redridge'),
+(NULL, 'Hawk'),
+(NULL, 'Hearts Images'),
+(NULL, 'Hellborn Die'),
+(NULL, 'Heroes Plague'),
+(NULL, 'Horde Farmer'),
+(NULL, 'Horde Honor'),
+(NULL, 'Hotpocket'),
+(NULL, 'Ignis Prophecy'),
+(NULL, 'Illuminatie'),
+(NULL, 'Immortal League'),
+(NULL, 'Independant'),
+(NULL, 'Infragilis Legion'),
+(NULL, 'Jag'),
+(NULL, 'Jookmaster'),
+(NULL, 'Kataclysm'),
+(NULL, 'Knight'),
+(NULL, 'Knightelf'),
+(NULL, 'Knights Thorn'),
+(NULL, 'Knights of Gods Fury'),
+(NULL, 'Knights of Lost Peon'),
+(NULL, 'Knights of Mortal'),
+(NULL, 'Knights of Samurai'),
+(NULL, 'Kobra'),
+(NULL, 'Leaders of Evil'),
+(NULL, 'Leaders of Life'),
+(NULL, 'League of Red Knight'),
+(NULL, 'Legacy Meathooks'),
+(NULL, 'Legion of the Blue'),
+(NULL, 'Legion of Death'),
+(NULL, 'Lemmings of Flaming'),
+(NULL, 'Let Blood Gamer'),
+(NULL, 'Light'),
+(NULL, 'Little Hunters'),
+(NULL, 'Lords of Vae Knight'),
+(NULL, 'Mercenaries'),
+(NULL, 'Midieval Vanguard'),
+(NULL, 'Might of Dark Tong'),
+(NULL, 'Mithril Justice'),
+(NULL, 'Mithril Pepsi'),
+(NULL, 'Mjollnir'),
+(NULL, 'Moo Licht'),
+(NULL, 'Morgantis'),
+(NULL, 'Mulletmen'),
+(NULL, 'Necrontyr of Eternal'),
+(NULL, 'Nedrage Kills'),
+(NULL, 'Night'),
+(NULL, 'Nightfall'),
+(NULL, 'Ninja Heroes'),
+(NULL, 'Order of Gold'),
+(NULL, 'Order of Warcraft'),
+(NULL, 'Order of Warsong'),
+(NULL, 'Over Louder'),
+(NULL, 'Overlord'),
+(NULL, 'Pants'),
+(NULL, 'Pie'),
+(NULL, 'Pretectors'),
+(NULL, 'Project Disease'),
+(NULL, 'Psychotics'),
+(NULL, 'Puggers'),
+(NULL, 'Pyreborne'),
+(NULL, 'Queen of Meow'),
+(NULL, 'Red Hood Thunder'),
+(NULL, 'Reign of Uber Enigma'),
+(NULL, 'Resurrection'),
+(NULL, 'Ring of Honor'),
+(NULL, 'Ropetown'),
+(NULL, 'Royal Militia Blanco'),
+(NULL, 'Samurai Banda'),
+(NULL, 'Sanity'),
+(NULL, 'Sauce'),
+(NULL, 'Schoolyard Reapers'),
+(NULL, 'Secrets of Hehog'),
+(NULL, 'Seers'),
+(NULL, 'Servants of Cyclone'),
+(NULL, 'Seven'),
+(NULL, 'Shadow Gate'),
+(NULL, 'Shadow Misfits'),
+(NULL, 'Shadow of Ninja Pain'),
+(NULL, 'Shadowborn'),
+(NULL, 'Shizam'),
+(NULL, 'Shockers'),
+(NULL, 'Shriek of Nightmare'),
+(NULL, 'Silent Grunts'),
+(NULL, 'Silent Legion'),
+(NULL, 'Skunkdesigns'),
+(NULL, 'Sorrow'),
+(NULL, 'Souls of Azeroth Old'),
+(NULL, 'Spazler'),
+(NULL, 'Squirrels'),
+(NULL, 'Stringville'),
+(NULL, 'Stronghold of Reds'),
+(NULL, 'Tha Handlers'),
+(NULL, 'Thieves of Moral'),
+(NULL, 'Thorium Claw'),
+(NULL, 'Thread'),
+(NULL, 'Thule'),
+(NULL, 'Thunderslayers'),
+(NULL, 'True Wow'),
+(NULL, 'Trusted Minions'),
+(NULL, 'Twilight Rangers'),
+(NULL, 'Tyraels Aggression'),
+(NULL, 'Ultimates'),
+(NULL, 'Unforgiven Heresy'),
+(NULL, 'Unholy Bards'),
+(NULL, 'Unsung Efficiency'),
+(NULL, 'Valley of the Demon'),
+(NULL, 'Valor'),
+(NULL, 'Violent Chaos'),
+(NULL, 'Virus Eternal'),
+(NULL, 'War'),
+(NULL, 'Warsong Gnomeregan'),
+(NULL, 'Westcoast'),
+(NULL, 'Wicked'),
+(NULL, 'Will of Chronicles'),
+(NULL, 'Windsword Nightmare'),
+(NULL, 'Wings of Oxy Claw'),
+(NULL, 'Wrath of Elton'),
+(NULL, 'Wut'),
+(NULL, 'Yoricks Assassins'),
+(NULL, 'Zeksonic Thieves'),
+(NULL, 'Theramore Azeroth'),
+(NULL, 'Thirstquencher Chaos'),
+(NULL, 'Thralls Caribous'),
+(NULL, 'Three Alive'),
+(NULL, 'Titans of Blood Sun'),
+(NULL, 'Torvus Dragons'),
+(NULL, 'Tower of the Little'),
+(NULL, 'True Team'),
+(NULL, 'Tul Inc'),
+(NULL, 'Twinks of Cold Club'),
+(NULL, 'Twinks of Hidden Venture'),
+(NULL, 'Ultimate Rules'),
+(NULL, 'Undead Kingdom'),
+(NULL, 'Unforgiven Destiny'),
+(NULL, 'Unguilded War'),
+(NULL, 'Unholy Cats'),
+(NULL, 'Unholy Teeth'),
+(NULL, 'Union of Burning Prz'),
+(NULL, 'Unusual Guard'),
+(NULL, 'Valiant Riderz'),
+(NULL, 'Vanguard Omen'),
+(NULL, 'Vanguard Redeemers'),
+(NULL, 'Vanguard of Teutonic'),
+(NULL, 'Vengeful Mayhem'),
+(NULL, 'Verata Blackflame'),
+(NULL, 'Vicious Renegade'),
+(NULL, 'Vile Dead'),
+(NULL, 'Voodoo Hearth'),
+(NULL, 'War Legion'),
+(NULL, 'Warlockian Tree'),
+(NULL, 'Warlords of Kungfu Army'),
+(NULL, 'Warriors of Happy Death'),
+(NULL, 'Warriors of the Tundra'),
+(NULL, 'Warsong Insanity'),
+(NULL, 'Waste of Grey Death'),
+(NULL, 'Wayfarers of Maple Leaf'),
+(NULL, 'Wayward Agenda'),
+(NULL, 'Web of Forgoten Warfare'),
+(NULL, 'Wet Guard'),
+(NULL, 'Wild Fire'),
+(NULL, 'Will of the Forgotten'),
+(NULL, 'Winds of Steve Irwin'),
+(NULL, 'Wings of Emerald Minions'),
+(NULL, 'Wintermane Good'),
+(NULL, 'Witchhunters of Chaos'),
+(NULL, 'With Sea'),
+(NULL, 'Wrath of the Horde Troop'),
+(NULL, 'Wtf Losers'),
+(NULL, 'Xcalibur of Shogunz Depo'),
+(NULL, 'Xelium Determination');
+
+UNLOCK TABLES;
+
+
+DROP TABLE IF EXISTS `ai_playerbot_names`;
+CREATE TABLE `ai_playerbot_names` (
+  `name_id` mediumint(8) NOT NULL AUTO_INCREMENT UNIQUE,
+  `name` varchar(13) NOT NULL UNIQUE,
+  `gender` tinyint(3) unsigned NOT NULL,
+  `race` smallint(5) unsigned NOT NULL,
+  `class` smallint(5) unsigned NOT NULL,
+  `purpose` int(11) unsigned NOT NULL,
+  `priority` bit(1) NOT NULL,
+  `in_use` bit(1) NOT NULL,
+PRIMARY KEY (`name_id`)
+) ENGINE=MyISAM DEFAULT CHARSET=utf8 ROW_FORMAT=FIXED COMMENT='PlayerbotAI AutoBot names';
+
+
+LOCK TABLES `ai_playerbot_names` WRITE;
+INSERT INTO `ai_playerbot_names` VALUES
+(NULL, 'Cuan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yahaerai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Adycrhesa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Stimeenu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Riarroseop', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rigraemsi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iuneso', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elmuorie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eaohea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Whaaimpiidri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Agtyiencra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ketnea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arpraerela', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nirier', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gaent', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Youeeso', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eongdeathiic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Stritosa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itaifein', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Desteoloest', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inrodi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tiesoghaadny', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Noyoenie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Agmaoga', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uturoerim', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Spuicoab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acuseflini', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erwoulase', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lyerary', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Staheaoejgho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umaintosp', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omeqis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Seniosomocat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Laewaulefi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eshalech', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iflae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cauif', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rarelmarial', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erhoyeroneal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atriupbei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aleruficem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leiani', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etiyb', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hamoro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Shiedfoeraa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Siisa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erpoudcoel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neiea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayospavae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Xipoteiyse', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tieniocif', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Naocoopic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ytwoabrise', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opcoerical', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Okyestraec', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Okonekpaund', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fastryaneara', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Istio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elaquoyya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Privegais', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eroiobipu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Boisaisaot', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Toaysce', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Osici', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Voecy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iulcri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ciabatase', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yaeay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oyit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etwiace', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Muni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ethtaegnmi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oyra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inmuinseoat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yonashuo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iesleeist', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayigste', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Vomeiug', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aoevi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ersnyla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uplychyevedi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otueialfe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tiimaite', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nioreyro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Odraemab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Meat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ibliab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lueid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yngyalmeni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ineyicaci', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uroloveiab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Kierer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Antesadinag', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abmuatmour', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ibnere', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tele', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyngisym', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Insene', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Athcheoirdlo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ompsaetpobo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aleaemyau', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bimoloaanbla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amashuulid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Liitiori', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oroliliel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Piiftap', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ostamu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iorhoi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enge', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ahleluali', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilyvione', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nimoawao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teswoenedau', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tysha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raosoamen', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ugruepeke', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teulat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cielpruroor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oyroichet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aeronaesa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eckomayii', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otearccheto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oinlo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eulyoflamu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raastafo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Prorilapoun', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eymaent', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ocinealon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yisoc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alureeicis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iraker', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eisiet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Jualenefily', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ethasiisenxo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ogetiyija', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Coucreasto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ceyrnac', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teonierayp', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Chotelerer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uapra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ydepe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Liosthe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reineatitle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lochekeu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Samiefetuit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ersiuuphaeng', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Usericlao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Stuaiiack', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oioyuer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dren', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iienneify', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uuarcteyn', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olsuraeom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Imumutrishi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iigoxaoye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iaisgi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ystri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lusiurho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neayisal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Afaa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onefnerevi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iteyeneaw', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Byubiubeco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Geaoenis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Adamoifona', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edwiaban', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Meiacyeru', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aplyeyalanra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rieaninespi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Scheeschiero', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arkrafliu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aronaah', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emerla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rhasemieaci', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atoma', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opaghancoar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bleitrieae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Osaivocomo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anodivli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Izaneunbo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eoctniisi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icizsycheh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Essar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eumalioo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bunoovane', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Chiama', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Imtiob', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Urefpligruco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erakimze', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iangoecayond', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yoroboakix', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Stoeea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Indio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isloa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eatolisuret', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edetirynaus', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Occheyoulro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ubainteoer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilfreceane', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atonorori', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Adfleledeip', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ocbeul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Undopheyie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sothete', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Usrawaanir', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aroiatbistro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Culilile', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Odioyusgliiz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rizoossneop', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyoigae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rioceric', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Osariai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Caikeabinis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aupissohcin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nieroachek', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eatipedi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyteyngleilp', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alcepe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ogtyabstoiz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Noroengut', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mitamac', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ritana', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aepmuleshige', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esussdoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iame', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Upeveolsaas', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sceycerne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Peesholecraa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Akcefoveiss', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cospaulyi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Noilwaisio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aunodebo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eocsounkora', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ehyes', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Troic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onmibible', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iultismewoac', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reyikovu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acoaga', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Doore', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eibdaeng', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oinsuer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Scistociae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gemiecipre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reacop', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erooayil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yoodan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Jaedhebiamu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Istdibo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oraacumaeng', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Croaengye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roenethexart', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Azsaashir', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bitreiepi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayapsuno', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iadisi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itmeecelera', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uzluailan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Assigh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Chamey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iiroa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Loorephyri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ewnudli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yazaedigate', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alpaul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Repaoliseoc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ipeit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Owpreti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Temaicainik', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iamahyon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eroxaoyera', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hanagoory', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gaumigisviod', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onreat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amingmoumepa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itualcirye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atank', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayminefa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emenreficli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erisdho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Imneao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rezaidikdi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ereat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erpiylahro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yoleoubet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Niradoeyee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erteflaonla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ueneosibte', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neleais', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anelediudu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Maetriabox', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itulni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emysceer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gamabacpeeck', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Casii', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Praryinial', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ipatielana', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lophirielpi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ystere', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yein', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lerew', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ifle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Niial', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Albusoni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ytiesiare', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aeero', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ivboaeeske', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erereraanye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Toedale', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Zema', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oaha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yatcooyiki', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tromahyeil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aoed', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ontoeovothan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neililiai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otagermi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acua', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edualaheth', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yoanuet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Riliiagyae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hocoinerays', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yaaeoca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iete', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Clionieayu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iemasehoc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oeipeisspo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Veiodayeif', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Antamisanneu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayistmoumins', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itarer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Saite', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enovespu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rena', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Craneenyley', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olaegu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aeoc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ertoab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aniar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umomwaisoss', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oardemeaba', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yiocredoes', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eoinsiangit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lianiflidyna', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilobiit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ogghiecapta', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Meroabiejic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yeturitro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anaraengue', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eiableatne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arly', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Baneon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Chei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anatne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Naare', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eheni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Miaextraoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Duomurer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aroareumab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pory', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Coutiteal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tabu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ackusterthie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abicniaeog', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eutaachoay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eceurfuel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erooe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neaspuaten', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aieinayo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Moate', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nuicriey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dodepo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aunorgo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isassyercem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Migioible', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bonorio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayoistroe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oeer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rafiomeesp', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eteu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asheyestra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atauu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Untayege', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Irsaudabev', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iitgearah', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Applitaeti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leovy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anod', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ronisara', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ketidre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uanet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oceler', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ivwhiesmte', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yiymped', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isowheyngu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orev', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erstecaijala', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ogicecegop', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eheamlaaten', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yiahema', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nobuilasy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enalua', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ateole', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omiabenier', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pamiismod', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ewogrecola', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pauadotao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roivey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Maraibaror', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reaynive', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esscha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Schealzewoya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ipohocanic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Blinoumey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Civonmae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teelaefgape', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aisplaay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alaociny', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enite', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ceuc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Osrhetememi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asciraoiss', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eochya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Caopreaor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Keoaote', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Deryacoeron', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Noiri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Deueyro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itagoacrayst', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abneesi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Meoi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Axamlene', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Chaaweng', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esengaost', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fleracehayse', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aeubtizetru', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Strogioemis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayegahi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oyol', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eugyacho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ithaef', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Irghoecteawo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tideulcaoer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roehiar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dateameze', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ermaieera', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Poumumweynko', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opheoad', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oshat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Heere', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atoremeibig', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Flerpero', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tishayen', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uclualete', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eiestvie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ubsiahyaomi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isioarke', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Beinoti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alaspoasixo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teibalavesho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecicia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Poeumo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pesiasifbi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iillacibeen', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acerne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yerdiasa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tolaiteathm', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pryculo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aosxurouso', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idyynyont', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atquer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uorechos', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecraenag', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tieinee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Deneula', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icenanfly', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edyeneage', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aimoyiri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eigeniizi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reutyaczy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iupomang', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Adieitego', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Resoba', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enalde', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Daausteiess', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ijiea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uina', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eaigeonoy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iooyco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opestoxiok', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aneyieway', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oahis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mouewreoip', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Avatpremi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iediswialry', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ichparier', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Adernedo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Utsticemp', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecreebco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ohaenritha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aheatxech', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Apco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ulenoron', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyfemihaesya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oeruckewoyo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ustamoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ariy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rainsaiog', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elnaierle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yeyuibeng', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tuoplivee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opiceve', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oxeiv', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Osioastcapo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Apryu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Efnea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teagecliommo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aayaeca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Osmi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Blaeodedto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Islanathyiar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Niaotephao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abidby', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Loitoinader', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Toudiaghmia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nyiedev', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reahify', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Caetinasi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayiangandeti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yaroyig', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lauinoave', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tryeaduerho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Noabroei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Needefeay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uferetho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iecop', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esttalaamos', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aravepyro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Noenungo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iibaea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erlerku', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eytear', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iareent', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eiomsenou', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eraimfoossoh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Denoeroyei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ouolpeye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Odlearea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Efyraeckdabe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atpaestuzenu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Autmeo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eptmeerimmoo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Upaalino', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etybo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sceictineem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lyuyod', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tyuacloacat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ofaagule', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itxilyliema', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ebwogoy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilehe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Verhoegaza', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Zeuf', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ehtsebi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olierin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cucoicaro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aataaxte', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mileladri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tyol', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ovogepru', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ranohchenoa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pleacha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esneti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aleraruaa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ondielfriisp', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acoena', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eliao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ragoitrie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enbu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oboagbruliat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iorebiose', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyahospa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iaroni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omiwheer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ymetiohyo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Seeytaelmeha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lucrepisadui', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ogrina', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tuyititi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Riengviya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Seuvilema', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eunees', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reeyleisle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sparielyporo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Imaus', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eared', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tachiyel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Akyaoyee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eutmiymeip', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Osbau', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cuifiscy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oayau', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uqahperee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ulipa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ypurverali', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Prei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erneoeg', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dyisale', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecalmyer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neoledier', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Deetenoth', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oarraorke', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umileriut', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Wenoeo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Noililadeag', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oicu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ughteardahid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Geue', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neestah', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iltdite', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Deale', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Prebloela', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teyxditri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilaed', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itolecaly', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uleoem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Meamiosni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eratbotobana', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Toreic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iriecheklian', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Holasline', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ifpaamugal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iconan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icstraeare', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Biglusithi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Riryfi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oeypliao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Doyamizul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ishea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asuliereys', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amdrereoi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raleeomois', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Praneneoc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ockphoalni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emiahikaren', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eioyicky', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Akac', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Linederti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Naibatay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ohecsiae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enogeashnero', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Caostschere', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eisogilico', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oesaclene', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iclaloove', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ispreruiny', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eteeus', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Deaeray', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alysinorha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Wrieowausge', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atumcywheeq', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eeyooiz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tomoagharo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esoayoclefe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teolerchui', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Unateol', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ikoneferol', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gayo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ateudod', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyaoumero', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icevdyatac', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Staeodev', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emamest', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icgruproier', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lecysubeormi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alutif', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Untabofi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yluminmaor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Unbeiseogne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aindasuatze', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ameresioul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yubpre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nuniveso', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yolonime', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gilipra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilrieilyja', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eakodead', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uladi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yeyrsveety', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yebeontael', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecuaatyeass', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eratadegye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anostri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Antracaru', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilolgierild', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icuneint', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Stoagcoeryar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raenraeo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olmaesend', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leepi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eanega', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eltmoiidli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elinulupo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aterei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icuireana', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Luueoev', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ropleeara', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eolea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fehme', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erawlyatneca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ulua', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Epoyepode', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tesantxy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Kihie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iprieoti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gobryinkliy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Brathoheibo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etisiizi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ockutoxi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Paeyotliase', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anas', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oalybab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iatasm', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Shogeteak', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eliyiea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Epuatcelepre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iperacra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dyale', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ifepraebodyu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ostiachenae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inkitatrou', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyisineleoy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asyilyustor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onilm', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Queayurniong', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cheo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otna', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atoagi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amdefla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olce', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tyarilanonli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eryucili', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esmosa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Flicioomopli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Diudineest', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Egeblaesa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gymeareq', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Naoodfyib', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aegaioy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isidealul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etpeyshiorud', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cyobieil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ancsidi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ragaer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Upini', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anari', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilmonare', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opbloytshe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fiuho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yceykieoret', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arleaento', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Coneahunle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilniur', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bubyarif', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yalooedece', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asubowa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Toamve', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ligro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roethaliliap', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Motieei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Goarimae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onsenobru', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oampat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Xaithsheipas', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eerohai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ispiater', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ientroitwait', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iredize', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Engach', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Manesiecyare', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Seesocawao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reacorteurt', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iipioyelfe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inneypahang', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayuegiuow', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yowstiomiub', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Heeciattula', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isadisuisim', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Terono', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayechti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eassinogi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opoco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Upepotockey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Udtoorbuproe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lolerole', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aniiet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hierwriom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Robrilote', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otgorilca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eistewa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oeajow', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Laant', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Coaltearuy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raaoacu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iiserdgao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inru', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Buareru', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anarai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teropale', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ieriipub', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itlyass', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ernicime', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Afohynari', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aisser', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Proraileine', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icieneqfliet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eruere', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yareao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Stoine', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eicumedrayn', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ileubunan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iqcuxaiz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dececrypaaki', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Griurfcaeme', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ungolifepa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acteatiy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onhyatadni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Igayoelsme', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aish', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cuapraama', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oesdorusese', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Egobite', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tinaeh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isoylhe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Detefohail', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Trezekephale', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sioussema', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Deylapchoil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ramay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eungoromiy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilclemebotea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ingelelyp', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opainoa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ultoatinao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omesmuist', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ceyapio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eroypaivle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iearci', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Difatye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Angrymuiha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Estioitveon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eymagilai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aderruoioch', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Plucaaockum', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uemolel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aalak', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gynoatae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yuarzaerldti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uftiebi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ingoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pihale', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Urelgeani', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Retuiastwata', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tidetete', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Allypeisaes', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oant', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Biiadilede', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ockiarorloo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ickuhy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ethwaymerwo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ukethosdifle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aatiine', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Typro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ialori', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iamysaomco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aopocis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arakemuno', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Imeotgihie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iarteil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arsu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Truircrearu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Evoply', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iteyaewoes', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyiloa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Earyaaney', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elinisaghie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rielfov', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Beyl', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orbo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aibesharab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inopotigry', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neaueotscho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rialbao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ipoil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yshoispe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tocifae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tymipeyo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tichye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etaizilli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uataury', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ovte', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teoceuk', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eilsec', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neac', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neatogic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mahyye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reupore', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Allweionddi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ithey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fuademomy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Siic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abedoye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aeroerache', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iloeeock', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Riamacbio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elecuetro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aparilgeuogh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Peol', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ucyrsooner', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ahowirya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Osurut', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emeaaii', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Woeluly', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nerosniodo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iytee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bleiresla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ytreoesoet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eefoa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Toetuogca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iniesmialu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iaaepait', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onemohvatior', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Piterecao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umestoo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otaloisti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dephoai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Plekeikid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Astxyoctyp', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Coriledeira', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uonleri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arapichoae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Meymyal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pruouldai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tepiawryokci', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Spioaoin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Operne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itelossu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Zealreonalli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Learenengliy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oareructeil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enob', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Taiog', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hyleindeompo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uegoayi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erapaeta', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oltonkeeaste', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ashaegle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ochonteriast', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ubodrotce', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ysry', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iacueghuruck', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ciisynei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ikue', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aunetsi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yaohud', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raorneuci', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esmealonae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Molianohrle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isoynunla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umtiiph', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sirhuorichid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itisso', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ainnedeoul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Retxihiditi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Usphubuac', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sieraver', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raemedoitur', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Astelumesif', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ionorm', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neboital', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Usiim', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ailoco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilte', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ibishan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Snecrobuo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isiryrunedi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etiexiet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enveunome', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eneru', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayssaghebra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tialri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Taemid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dinoeaes', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rikleov', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aynwa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Suleyrtpe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yoggeaja', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayverae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Essor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Irnulidu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roinun', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eila', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isaon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Theonety', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ymiortea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iryhiosreon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eerifepedu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Linuepor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ziip', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Useqinywkle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Euohpab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Poicheoso', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ockuroeya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acoyaesin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ieongioyne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eryetdierye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aosmibiue', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Loru', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enatulriu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Irinabiphire', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inyu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Siahes', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Craeidahiss', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oamine', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Unuviba', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aogmech', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Echnoeroit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mapeneymapo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Luadoy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ubereag', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ueat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edousaibo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sareydyeus', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sogieyost', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Chelsiadiny', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eathiciati', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Preyay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hoise', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ongauticeest', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idote', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Suodtu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyurti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reathalfeiag', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lauixa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ioye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ebupnetau', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itraplapruel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Urah', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Creu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eraniaci', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ovphomesay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aigioscu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Owieriaak', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ingentmuea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oodterii', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Toesdo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pachealrauca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iryolaoywa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eitil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eraniicko', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Igeathoraeg', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reecuast', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eronsyatrig', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nilere', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amowi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yaba', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oibfreiltra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aneheyeyma', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Obicucerrin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iletegeem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Miutom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Quostyionthu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Unyoeve', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Odiayhe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Suon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Noreoiyoick', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eonk', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iaesiddurhe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lipawienerot', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Beial', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erayhee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aicero', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Okmiee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arstre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edear', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Liranenear', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ouratono', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fielmanerom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eoilud', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ezyialba', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Floili', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sieeht', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inaywa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Taesetdeot', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uohtoplesa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anaroa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oobbri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orsecreagua', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Viuoar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esraidov', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iquynua', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emonyaupie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oaloydoalar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erispeodura', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Heim', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Coeura', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ychteiz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teliimoty', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raohme', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orleaion', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yaonanicoa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Evefier', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alaada', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onidapagemte', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Trityase', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Stroiveruc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Achodi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ereftetila', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pleneopa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oealengam', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Estiaco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Scoeoypfra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yssrulioli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Echeaayinde', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Haorey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yaniyngna', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lialie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ucarvepe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Odtatie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tiom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ulavoago', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uvbitailice', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Paoxetof', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Senonuaisi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uponeil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Equmos', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ogori', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Veorliumxi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Optere', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umatrechup', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aobicke', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ylogriig', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Paessoleboel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ucepacri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teielimde', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Evcoinyi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tifsinure', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Riniuntrono', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yareybrezo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Vauaeboi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Veeckurtyra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Epingarta', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Liadentcryis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Odyickhenee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Peorata', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iaupyte', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mepiilais', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onoeresenick', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reumpisomcae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aliraowney', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Wooistauti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oalidie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raroa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tiylvi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erunulleoti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alinoyatis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leyeinryla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Urazoo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Radoai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itmikicho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elteyoi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esuspuo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Laiheygehe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anaagohle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teaneweoyig', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idkebreaent', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Digliarolam', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eseba', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ibgeciumre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nasea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Vediwayo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Urebontenaok', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Taoewere', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eicalstaorov', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iaruogu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aychue', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sutewoola', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itchimieolo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olehoi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icmoreaosman', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anim', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Toaloymowor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Egyeerseacky', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ideagila', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyerelrie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ifneyahabuin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ohmoaynoelt', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Waie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mara', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yliroayene', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ogonke', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Coowyatreasi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Stroyossizra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eivreneag', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Apoeacra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilaksack', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ebrunaug', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Losta', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ieropli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Seeratmi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ycentyggeati', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yflu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cueriymi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neercapaor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ereminino', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iqiaan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Behy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Owesitery', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Chicheatae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enttrapoci', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tueromi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aneaer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neked', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eengisyngphe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abaeaew', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Spuowobri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uputhutroel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icleongsqelt', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atuasnepla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otierla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ollseaoc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyuia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edpliilla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yeyteu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Adaca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Trueshmalee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Epheneho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Imatiassel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atesedaessid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aryisiuni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nieso', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isyepintpa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nageener', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lepaeyceeh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aghpeomchi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isriegfi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etaebiater', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Echiataf', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Echieypuise', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onte', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ioroeab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ulastam', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eityi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oigiumlana', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Osiucilryi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gosteenewiod', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aebiee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Saeyneryen', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iniledeapt', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tyteflitu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oalidtalati', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Seye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Noonre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lutenipi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yorickasiz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Spiraeunapu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Jeilonuam', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Grozety', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Areri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Wieyotiamul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ymuinsel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Imieriff', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eutete', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leogueri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ictutevekale', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ucaneiech', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Unes', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ehplotyogste', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eooh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Quenti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nepraad', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roemevhe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atnequmiey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eamisachi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Izonemookek', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uiyyp', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Usanaple', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Espfeitaub', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tiissee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eongtruuin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aeck', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anretyan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dooatevti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onailayingde', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oecbuoyo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neathtaeay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inieserycy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ealbe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Intreen', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Biquosraor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ibpromicshe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nointeni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Egyow', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Phuanios', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ipureglieis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alokraeti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Liyi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idnachaitri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uitnenak', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leingoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ahei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oopueyeat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sphiista', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecesri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oksopa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Akadbiubrair', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ereagoo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lyshefebe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aecktealjoes', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pryindowa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ypreanisoyf', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ukyi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Doredo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reve', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Deowatoel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Toehaseu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eoba', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Niscianotoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ealraca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Peabrae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atiriiela', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nilenai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yecksiin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aoyupacu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eiprecubaun', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ostolimaito', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ciet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oalote', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ivascria', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iasroeilo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tioratip', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Meigneal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Peni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inaph', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Urca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Heopnao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roefe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neelian', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eifrabe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rayndamamti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yapayost', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tuer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Niiriadi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Penaalgepe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eceili', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Irbaragosi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edosceipoab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yeoxenuto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aoafanofo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aboom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neyrnog', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eaecitpra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Royarchinirm', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uroneiic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eysnaoua', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ereuith', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omecidstaew', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Empna', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oshastaliefu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Peieigaiss', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uieatrea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mueoteagre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ereenin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ukbliego', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rewordreeh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Engo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emkii', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Maine', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Niwhuyatie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tilareut', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ooaloalzi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Coyackesyth', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Naenotee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isaiwnaso', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sleuctait', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eaingiger', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aratyaa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nesphoeiro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Annatram', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iniaijumin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iana', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Geoy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neyero', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aroehti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anseati', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leomaef', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atoop', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pireroie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anicafri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hefrechear', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Usieroarad', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oshengbeseni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iginiouon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ogiynoit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Woriteoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olyiy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oate', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neraele', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ogfiar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilau', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Netuliast', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayurpuhomo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Palioet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iiatag', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etwoivbuihi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yosiache', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eesteai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isopato', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Meleaslyug', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ateoyetmao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Laraoyerurow', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Riclomdo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Necoasupiz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tiyelealpi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ioiur', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iaayap', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Clereuimipu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onirklovaeg', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eorekeyese', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umianraron', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dueazocheon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Astrioboet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Criaohas', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iceod', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nyacoluery', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eteev', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yaaloyicoril', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Togaopioli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eynaiasolint', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reymiocatpa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atsie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esatedou', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ondvysetuer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ucrihyry', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arebiic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itaarelexi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yopoonet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Adyuodpoild', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amyemovo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rokeclau', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opthocamu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Scoasasane', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teaiyema', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Angweeucu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sealbra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onseetsaylo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aieuue', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Adbenoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Adeicaali', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Achrecif', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iuayp', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onenpuei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inraoeag', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idnisevove', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ipaer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eoltipuople', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tiienemayb', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Puonic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reree', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ateanad', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tooi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hafithareon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Flapaeit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Adeaifra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iepmeat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teneocyoes', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etplipui', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tokeazriatow', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roeadio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atlaisteha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erthliviest', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ylyenuta', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Udleitnia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eredi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eray', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ohaeayiss', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ehaov', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uaesolla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oporauckeck', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Brerorief', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esherstroesh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atiyrengy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Euremeri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itoava', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilnoalratila', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arearsy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Naestbo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eynggiigili', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Xeteanerkplu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayessidskuin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Urdtanedi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ebiwkugal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayatliniecro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elalgies', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oraleardupa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onyaypeisat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gucoehxagoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aecyipid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rareia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Awieegh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Friaeaec', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uieselee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aryhatsi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emeono', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etissumnoog', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tien', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ingim', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dachashixae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atoqicar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ramaoubdiet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icnoa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Deabaufxi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reunonte', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ryalohe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orayntenine', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eqieolfnimi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Unido', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uenubkiok', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aesois', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uunreidth', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ethbiuke', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lerorisi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teilisloor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ornedaer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pnane', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neomdeilom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ohoin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tetagoypse', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Baissivonuoh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Caerri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oeratco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anwhoingo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oldinyexqura', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aceelerd', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Imde', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Paerisyiic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abideseu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Peabit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tipisuo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nionstamatre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Kaiyeriz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Istafueie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gehis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Izilnipu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Werypaefhia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Scaeooratil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etfiwoayat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ieasihic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emaoctpris', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ieninowdul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Detry', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acchoye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Keyl', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Stueragsi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Owneifhoeh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Coipetyoipra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Zioles', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esroaged', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elaseide', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eaelieort', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tare', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alhyuowbi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aloyssoauc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pute', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ideepati', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Adroaspoli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eosyawene', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Afnieowe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umcuneita', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Phietmio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Scyiga', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ivimoast', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Syerectiul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Beinruer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lioparelier', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yoldomabste', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Heparivuwe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oelesee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aidomabock', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eitibo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neicamumer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nereealeust', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Scuneeumya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Netyulda', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Quile', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ufoanuteer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raeryichost', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abyriola', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raolaum', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umimirana', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Udeilbueyp', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Osayowecyhzo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Auvistiay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oniceahxy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Entlibaeano', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tetspo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Wieyma', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inoeocyhe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orol', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Deies', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reivbuie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itetiaora', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Laeellaando', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Obarcory', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Spiolastay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Norele', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eaiprichon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ivie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ehist', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mepiy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Scustiooyam', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Peiorop', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eitrary', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tiotentocub', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ebeiotorack', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ueewarepi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pianiclae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reexyarpa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abitonaner', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ealoae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uuapeyogle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Almaiik', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neonre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enisecarolqu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anyulnepoab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eletiuena', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rishistuoed', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atunroesal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ygeangei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Talaitystra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inpetootarol', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otessgloiv', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Razyap', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Unle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aysaey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pealysauna', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cocoeerigo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Poeri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aldoomadac', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rala', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ectehthey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Araciciiup', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Invesiioctom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ismoreg', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Efleokipyhga', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iboienesti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tiiaboispya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ubutearnu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leossaeyne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hagirodikeep', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Izpunaohtan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Intiteizyo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eaateyat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lire', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umonahetrao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lani', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Caqomeimay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opierenire', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roiliipa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icumem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Useoctrali', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Revule', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iessupum', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sasepolue', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ostseel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iyemaytaty', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyetnioira', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oasieuwket', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iceyieirin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dean', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fyoc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Awiybstio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Xili', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gyiunat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Riaewfeteiz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alatoqu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ainays', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uerutcaate', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Veano', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fuoiic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ealekugg', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Adoxuocola', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amapiah', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rytiesuer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eghibimal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Totteiem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amupolro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reoy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Riensdioymdu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pliauspayaor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ototerie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hoibyathe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aholer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atalaoel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayorideomo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oimni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Avpoheara', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ipgeprea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abblueonlito', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eryorbepuist', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Laessag', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Foalsipast', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yostucuise', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atrooscepri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esayoy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leimemca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aniicicli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Estreoa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Igipeiddlu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Moeiislacry', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Adabemil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Depri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Theteusmiah', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Avadiockey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eaxai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Piyrodtyone', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayiba', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tiankea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oecferaea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amniriad', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gydeaovli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reonoro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Issvedreief', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Plioneesoa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uatemre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Naifniiso', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enkyat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anaes', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oicintore', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Obueisu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ebitan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Choertru', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uoabeasm', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Udbu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idsoategor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gloumsa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Silera', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ykidriegenew', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Epeas', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eovtitepai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayeieriston', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iontno', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idrenor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omiscaileni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Caopdaomse', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ehigoesy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atapmosceute', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yeasmeaer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rihetenefica', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oryceysayi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iumne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raycae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hatu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omiurithin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eithucinaoth', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Wealis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cuyeowysy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ytintri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oratclanasee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Miark', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ainarule', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rhiaeseadec', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iistjuem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Baisboiur', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iseylaleno', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ahopoao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Engigsie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Niuniukhyo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Utpleanay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arkeefeshies', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ajskoeuguco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eourni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ybingoli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iangbutees', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ispipoentisi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Doeyertiona', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Areneisash', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oreyaher', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isreti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Earydle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iteongi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atslohoemow', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eueflanoast', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isditimioov', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yhyemeini', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aocyovete', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Easip', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yalty', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Epchyilopab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Estidifa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oluolaodat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayolan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iypapariun', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anesifare', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amastaisreac', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Loocechanes', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leraoseor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ocok', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atriyses', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eaane', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Urra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Giteniastai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Awaile', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iome', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ossakoreat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aheceur', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yonachlu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Agakpraa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Entytiean', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ryakati', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cuvi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ofatuche', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omaaonumo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fuoyiri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Doassaboidi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aalneq', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icorosiok', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ylve', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Grionoru', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uaiac', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leinibli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eapoenpie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arireulona', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aiyaprena', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umagivisato', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Exalo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eglifu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leinhyola', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Adte', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Buniootier', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uastriinnu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yediavioh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayakauryus', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umteuyiab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Boapertweaer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Peteyo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dicedae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neaistine', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mayanodpe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aeleeonu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Exyliyh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Giylataonon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Badoonhy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ieeye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nautedo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nortanoto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nieo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Letyrais', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Keotreosimb', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ubki', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teanarytri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayidchaolera', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arein', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Essioniedo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Strucapla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erboocuniat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lafuakuot', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iluasotmaov', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uobo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nesucuraet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Miorploe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abygiebaog', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Litiarigroa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uleauira', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anilungatne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aructiad', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uknemougagi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iniy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Zoisniis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yiaciag', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Keep', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acydophe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Geaemi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ospuxieteo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Coivri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Apil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Axulerehco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oedifali', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tety', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Saeftolfiody', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itmiogacmuan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Estismupeet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oeio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ahaog', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ranei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Vebuereru', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Haerubhe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Adaufra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tiuanta', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Weocynis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ireraeeas', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Deirdesmpaca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roaoveang', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onisag', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gruarhipra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aroesinufu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Trileigha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ertiem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etubluyp', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aosciey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oraie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lomyeapleu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dateo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mion', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inpoeri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aneeinein', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aphisieato', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Utopmitrat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tieat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Udino', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uddsae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aadaryfrosu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Epafco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Epleal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Odiyiaani', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Odmi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eliyocme', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ateceetlene', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Swaino', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eashie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Radesciaoni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rousi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onteaduho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yddudermo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sukasha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Epnease', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aybefo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ewacuifa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Meipeal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iriaybutea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Relolossem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ifneleinie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isilotio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oresyeeoer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idaow', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otuon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erigelieve', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Puotayone', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uroentullia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eneus', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tezegotiva', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idalselyois', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eintuautsci', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Untuonassca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elengleneo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atesismaobra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ajikadiantoc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Therepeyvo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aojoingy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itiyaent', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Methy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aordeaa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onizatbra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Seom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ainustpasta', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayalesnolans', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yautinif', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anayaro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Zecli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Droeianop', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mieoostil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ararens', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lineaeti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raowuwnal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oeris', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Algaosheiper', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ismyraieu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raride', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Estabembaoa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reaiyoa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ibid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neyaetseo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hoseageatsa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isemrepalre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Laed', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Swierheoang', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Echenemaolte', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etogpeu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Miedgula', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eirth', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erotaile', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rausmaeoba', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Riciseualhy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isicerkaogli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otoupavy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Liyrueay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gleenessuma', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anathiiyaol', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Keiedinoem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Choame', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Apear', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Unabluerylge', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Heifryaeox', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Urfmaoae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Okee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Igeesick', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Afruoieras', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Paulroate', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Epivel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iheraesmlomi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Meonaigaqu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enestriion', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Maariq', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acchiieri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oowaph', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iokineyae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oiobteocke', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayuatu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Suake', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aacid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eoau', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Scilydiiol', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ahesolidycad', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Adalyboveom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atyete', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inblationeic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eaaviile', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pheperailk', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lidrytotiail', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oesyiran', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iyissoth', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olou', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Piuoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itoscote', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cometirondco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yonieiis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Balaeri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Epethio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Illyey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Voeivfido', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Seasteaolen', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ivromioev', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ionyoete', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aloa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eual', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omclueeub', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilalyuafon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atayoado', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mameaecde', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ehenilioi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ioeyainurn', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opyrybiot', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Useintinusu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esieacwo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Saeliedai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leabanetoit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Paotatape', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neceseatus', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ellapati', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ospiful', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eurep', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neacap', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eraveawnaul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aigaitobo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neeyloadpe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teaghoryul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eraommuseste', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aeyuciagy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ipyai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aralenvi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neipao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ointtaau', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Agenithubuid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gielima', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Looleae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ezahoveonen', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Adinle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asonniqueblo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bueicprogli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilneeloyal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rilori', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anifsa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aokalcoiz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eseuimponesm', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilalea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eaeadog', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayoyve', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onneieram', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Keohesoreem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aminisentare', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olondix', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Engigeotiste', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icalyaul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elapceuy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Obliyakist', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Moebaima', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gitiatspu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ylpyehbli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alodaucenke', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alentsa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ceabrispypre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Diteabic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Youmalizo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ostae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nashupra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Naetioroye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ezzisayimar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Moageydofni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ymiolpetier', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enust', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bleal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ytarea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ickyi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Efonclo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sorute', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inorarmi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Caooramte', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ongeyaos', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ulabuine', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edryassit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Owroachga', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olabopyta', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arearo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Caeq', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tomerwhatiro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Trientoyiae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Askibluift', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Utuout', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Suieai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Osot', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Litieesedi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Peeowywang', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tuee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pashyontini', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ceetreonoer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iisemuinunt', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roechianeci', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Seinwricyi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ubrewhati', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itabeyqu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Breadbe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Peciye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otitupipeoss', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Deraolwoaf', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cyetil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Laeri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ongouo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ogoisediem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itaatolon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecinambo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ernei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opeieti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etleoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ononeotuthne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eponesaetar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mayieeymi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ripoaniya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ysmramiteig', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayaicbi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ineatyais', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opde', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rebobeng', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ieawsteop', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eneeuibbe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Thaay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yoporytepoco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eryeymaiest', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tuonyoliar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opsurele', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neuntinasma', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Euen', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iinri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Areatri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sostrineenos', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ysstihi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ynoik', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icnibliies', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ahar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ehkizeief', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uisipri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eozrebti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otseirhuga', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Caabliaasi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Blaacixukne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abriat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edeitigamti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atpar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iale', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rieicen', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Imepra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elynu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eidti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Agoucem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Deangape', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Entebe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ottaili', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Recuypin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Wasnaiet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Essreacitphe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Apmeanyecti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Proacte', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Egiirli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aunera', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aneanecey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Demeardme', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abvate', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eymerui', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ectoae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Osro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ezein', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Noilasmniosu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Melomuraleu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reneumriasol', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Okgaeve', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ysunduea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Biasco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oyfomeuxse', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atamar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ypaeliosat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yiguldreah', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onskaepem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Stiyeuy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Afenjuorrwai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pepileneord', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Stiendosli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lobiaoig', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Engmeclioi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otchoirfluow', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ienario', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erabtigyh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilereondofi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amaeyloid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arteveladepi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Angapidiao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ticeniaeh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ebaoyga', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onobchoienu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fuicetepre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dioe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iseboo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etalo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Wenelyie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uptiec', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omaeum', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tozaere', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eiav', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uynda', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enonkiufo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ekcefoxyan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dealhaass', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cesourto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aneoonover', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orelollo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Susesau', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oinogeut', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raalipio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iwsoraikeon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aibiroe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neneurlorira', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amdwesinyad', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nireetra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oceroeraga', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isecignia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uneicno', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Topreirmne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Intiaye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iznosi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Astudodro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Issnaickorie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uneshge', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erushthanide', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Drolenypa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elasoanenef', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ehyeaira', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uemshoeme', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Coicentyatei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Daeti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erasaio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cairteau', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ogneabdaest', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aysiooperflo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Imerfioao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etucar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aorot', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Efatinib', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dimo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ereglakeaol', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Egliediaal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oorcobi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onglaineri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iubo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ifroi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Italaniop', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otleagyeci', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayngoiruci', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iomho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neitaonir', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ongeyikar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Intutopsti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Epracomew', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aivo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tomeyom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Irchaonriu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ryolastryer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ieickriiz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eiebiri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eshpountangi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onugleo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oileroag', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Epeoass', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Thacesrymi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ivoeoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Noryilalo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Deossceye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mecle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ercoeyhexida', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leinayi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ishaist', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Stroe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayyaynpesaal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yngoxepgapeo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acoyagoststo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mouiemey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Restesliao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Awandardo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uitasphuup', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eertiordri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iplueyuz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Steoeyesisam', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ulnizoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ubsoo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Siitopari', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atisfriplu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Efdieig', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Apreusma', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aenfenaode', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atilaopoyte', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Troolkea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Weofneontran', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tipeerpususe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ieshaon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uchaasy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Taeyreeckri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gyieyuokple', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Citywoaald', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Wosuve', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sete', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cheuheanabdu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erkaaf', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Igamyaelat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ubikireneat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iualdarot', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ialsuiceeng', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yfstreine', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oisovnecha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ightedei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eautoimi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eratnyi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uvloa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Engy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Caleahith', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ossmuenekieq', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Efaetuluxte', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecieva', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Noawnete', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uhyta', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aneifupeep', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inase', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aeneciyao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Temsi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oeusra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omtoyepaaye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ephiefipade', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acholdeat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ompe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ocierovplu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uriubboa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Afetepeic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oeonco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oriona', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enefloarne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iffeiani', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olumalfi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eretiyaat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oluilach', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oscoomedipla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yataniurepme', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aunushilmo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ciyo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erliliro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elteloge', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Shire', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Kiama', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teme', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inulamlie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Irdjain', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aseye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ererfoabesip', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lanebuoephi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Puesaeiri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atimaelbere', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oleacetei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oalamcyge', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fogrozaiper', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Loeiskekuem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ulyeneof', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amaynemalre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eurartbi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sioclalaaren', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eotop', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inonryco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icruatcireno', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yeisnuam', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arlialmeun', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Toigahych', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uyaopabse', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ubninyepke', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oiaeom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ivoblor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acmuassuan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Keteoyeni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oimpi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omemiz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oispeo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aecku', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Earym', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ostunocyoni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Suat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Floite', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Peseosui', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ooaeach', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eoipi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erfa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Istguvyotata', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aschystiow', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ruenstaasa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Doaymyeat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Crygaoenyyd', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tiacsma', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eireyebisten', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gaistaual', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Embe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reihtne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Entnaroaci', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etuinre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atablaioch', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dadiaworar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gevecuorer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Xievatect', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ralaeierit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anoit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atyoisi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eoyni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Maionglege', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aseromepod', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fluaheme', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mupeaeni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emaare', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aiaevin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aleaolyplu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Maertsuusie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alladyceaoct', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Untaerca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mainaryete', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atec', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Chido', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ieay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neapesscriop', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ripli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enotesili', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aeniu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dyowsoliea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aeteneul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etyema', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ernismoca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Caopone', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Meacashu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eraecick', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecrira', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idogimpli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oower', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aissniic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Unuinom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Phaenmeo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oroikior', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neiospelayrd', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Linasha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iatueur', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ycoeug', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tyoaortitha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Liiablio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yaefaeng', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oreelanyi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tidro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tiegere', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Diomnoeebe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leantis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esompredail', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uastetiar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ufindoan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abdeus', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rizere', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Smianiterig', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orscroalac', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onaisofot', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yeneeteemla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ugera', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ypeahic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atecode', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arneealalo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Istvai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Naymugaitit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cuailiora', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aoupaygi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aypihaacyli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yiant', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eronro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ubchuostoith', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Udericktigro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eriiro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Owaepayel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sioc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sesoneehoah', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Foay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Echoissor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acorbi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Azium', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erageumo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eehodca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ipphyileribi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Depaiestheif', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aicirpe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ehstigrarai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iamad', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eaqtaneanunc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ocorre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bareifeceir', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Trichoee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Selyderiful', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Entike', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iolatmonadu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isugreopil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ceietilpra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ongiha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Suodeyafe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ahro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Viefco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aygeoel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ipnaonsta', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teiloshopco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arialitni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyecirdspo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roupitirk', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eseynt', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teakici', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ubeyemai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ansfaess', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erraoyesomri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Latroeonlosi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ourushae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Riti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oanteeae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eimueuno', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ninugyu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asiuquro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olicgle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilud', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atlyyehylu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aovacgeow', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cageamocisce', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tiatriinerm', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uaflao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roipitomea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oleehise', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ricepothow', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cooatraac', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leloveiya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Skeistri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lakoecohtov', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ikeheskawhi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Naiei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eayoyier', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Assaoneat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isecha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Espuyele', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eroseire', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eafiliawor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aikingum', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etemine', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yaifaapat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Okaeu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roesilack', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erlies', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Heanba', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ankreimi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Escro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lisearoti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ocoeromab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eanablurial', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tyac', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reysmeretig', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Vineanemteo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tyeere', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Deitine', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uyaroeite', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oraamubsece', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lateayerlo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neerbetosa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oyeakienal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Preaeroex', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reukiatolen', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abidhapeate', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Diuyealatid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otaey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Shueatfo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Austoses', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Avsleneser', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elema', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teyait', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ramekye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayese', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ututatro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ongoparuco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enueylou', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uisoolah', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lymyusm', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iatiymam', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amelwa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ubliiesa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ketiaexash', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Adiftev', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icnoha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Muecho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eialliapri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teinutne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asatereis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ianriel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atstaon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enef', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Steat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aeeprosore', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ineyiso', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eubsostoibra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orintenti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Suyeso', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roagueryst', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Deoshini', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ermoicay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eacdoeen', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esteopare', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ikiepao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eafi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neoneromu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Testraiil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amobialrya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uareyome', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eimpaywera', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Quaonse', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eatoiryin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oreghutae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anonim', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acoaa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acootecelf', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nayoeisseyna', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Guebaer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rearosan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itbeo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Veieopla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uspa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ienerosie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nehyidyiciew', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otdi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ackagre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acivavryoay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inizayivri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ellaihalti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eliogy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Vaonestinafo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uraspiage', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tocarareo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Seutlyum', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Intiize', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Niase', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oseofed', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omirasetito', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ateolada', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oriwaulangat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Floipce', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asleali', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aafbapa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uaoeneel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mocaul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uenaneiat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Clefumewi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ouret', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iicoirt', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idtepacoy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Snene', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Keiareigut', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ananenaror', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itcinieiggi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Easteg', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eymraogira', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uchribarara', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sieichene', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asmies', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Naasesyaor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ifutema', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Guium', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omtiaeduand', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ateyea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uacaul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ejostbei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atriroinre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Vedaur', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Agleoceiy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enoi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Essitesuca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ooyiaed', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Obira', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arue', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oryprenie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leodmyeyeang', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Diaar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ohnoia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gusechani', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erac', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tirelaphi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omseorhien', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oovstuhaema', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fulinioama', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Toneat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cauecnaey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Attriynareni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eowadis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inutfeaem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rieleati', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Empaen', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yreyget', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Voian', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ytio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ucioanfe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ernelyopleso', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecyperuil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rexoycebovo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sesphyha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Licalo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teseoysopait', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Engeyoelee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Deieyer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Suitpla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Agesqieary', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Disylofaerli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onzenuescri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Choibgatape', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Creleatmege', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ileifu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tariamlo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ichuespidi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eoyonimceeng', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amalauser', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aarezaedchi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Phiethmsu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Kibi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iitassopge', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nibuyswa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eruenasonit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ekealash', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yocebainzove', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orereik', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Picepemutiha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ulonoaie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erag', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elgoquise', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Muexkeain', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Zoegrorzetro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ernayaan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uchilre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Thiluema', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etenabei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ciponeutri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Avdaolyleop', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Coloneesnui', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isawneo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nyeral', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Armiomleneca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dopuipy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dulawiivey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Estisaerik', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alitafe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ryakeabecgri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Graiqutophoi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Utentifo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Goomoradro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Echili', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aneshliessa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Efiungkieug', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Weapdoef', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aveal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ciheacesyo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Phitrail', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oeisoule', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rieruntpreov', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iposiadaon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Scairepi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Einseateath', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eipmeoroes', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tiengbrie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Boaadnewi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Naraetebothi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ipeourcoti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ersieraeflu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otlamio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eatsianstre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gyebiael', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ieeae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oilelestao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iniegail', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Viaicarta', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Putuacay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayphaomisni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uticot', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eafepo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Usistins', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Beemgealue', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isscreoru', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ierearior', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Saia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sescoye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ravyal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nojaseeassub', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aveteurep', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idakyidreyo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ingeio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Urnhiwistro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayusamepid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Blaogesniro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oeritetno', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ebnitrio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ferereoloan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Espescahii', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Antti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Liess', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Achead', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ipax', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eosasm', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ingetifatyi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uvofyoubed', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ildugleif', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Noloniecose', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neealioah', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itralulo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Loliizri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onechanopge', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Upre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Utaenryabe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lueaete', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eapyri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Evschoto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ifeinti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hoitehao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abeorirkciel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rolfo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emaonan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orayaa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Puve', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omenipmite', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oleatacingew', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arfoayeere', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orowerme', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leronayrzeon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilyarongay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raecac', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iugeedo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onedale', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Earorneyi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ithyumun', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Owyeaerce', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yeeboziabyi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ofce', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eniatmait', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ogeaotehe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eroigeply', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icelae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acuote', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lyogoicy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Moim', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ikeepro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eotnaceto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eleoa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inobkosau', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ibaewogont', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Paproedobke', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omcokees', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yaobuny', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ioeybu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atool', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Revateiti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayiadil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aticneayiiz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Osoi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Togmein', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dieli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyovag', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esoicabro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icroinarbye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pochiiex', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teone', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Zesciacveami', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ialodo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Avecnena', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Proyotaa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Apeiz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Estuiojo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roayuciachli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ubov', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Odayo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Owgoarbclo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reieyost', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Streaibudi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esnotaire', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iltecktogomu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iedomguat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oxskisintqu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inealereot', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icinaderam', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ehualire', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mapriiospi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enui', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Undik', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ateniweli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Allepipat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iditlesiep', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Maoleneudi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Usioren', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ciulo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ovowra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neentlaeina', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yrelti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anxyum', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Soacari', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ooei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayfioca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Adoavei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eadcheylo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Toalymetno', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ohfreonruche', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ongonte', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Liismasotune', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Foaat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enoatery', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Naeoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esiethloha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Efosuiawo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Paogeuteu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ryinsieui', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Thucliustze', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Maoyabal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ricesa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ungye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onasicbayni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ieoidep', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eaohap', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nenocori', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iulyoiot', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Naeyhoedos', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itado', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icrieicori', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Staifceoni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itnoero', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Noaom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Istialtoaho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esetraeru', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sialieic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idoroisu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Diedudko', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nocias', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dodesho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yoolegero', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Shehefleohpa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Biogy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Diwiangurab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iumoirmi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erolayip', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ounoneal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umopocream', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oyoatonbebre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erneop', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ahaveni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neurnamareba', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Izuoriss', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Muitinutip', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alainener', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olohesea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ityoetichila', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arftoleidi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Foeniecha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uawitiopi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gauma', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orterapheo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Odapoesab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onaeslipu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Biusat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uococal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eduilegoveg', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aong', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omeni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Letribe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oarserle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eglaogheroar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iogu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atutriil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eteohechie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ciatsuagoryp', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aligho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Geoymeldu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aiedyupsa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Insidisnuye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Peod', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Shaichdiust', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ainka', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olacab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iabak', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neah', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alamyicont', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Wovoilgeic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iaeayro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gemeruer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ioneti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Wetabatyrkid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Estoiesroad', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yenesale', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abinile', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uoane', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olfriisyig', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Siosimi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ocay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atorerethol', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tareo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Buwe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mueoesore', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nuikup', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atido', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aultiteya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Estroineckef', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Momeoacze', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oaind', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atabic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ockenuesmspy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Igom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilisseanucy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ceehoymiuab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Espliticruoy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alta', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Joinuu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Graioagowpa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aapa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Infragoretu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tioayuntis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Akacaveat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Egliarasi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Osoabe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Poarigana', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Paiblileoh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ospoad', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aaurkecsa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Agabaisi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iaso', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roaera', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neciraraey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tyyatolo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enamtesaot', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edstirodi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ockcoi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Biampegoicar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Kearycko', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oianolite', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Trauan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iromoiplo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Zohoageve', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iseupe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oytyaale', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Maroiaui', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Notoayyol', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oacai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rayfalo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oauoel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Imcaifowy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nayoecra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Igtoursta', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ignocefoi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ingabfliuob', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ataitay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erawaoleo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lobti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Staiegtocin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Veskoiz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pataotyqu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eacruni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aiteiba', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ickesstroi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Temoeuqni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olinule', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Feupiahofe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pryisdeacpre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aligeopcue', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erdeilswail', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nise', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Staaske', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ollrapro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Imchaarneid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Girioploonud', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edaltyeya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ytesaea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eliap', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tuliliuogy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inteyer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ienedioca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elyayake', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itrina', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esphelero', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aguou', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Adnocipe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aranekoch', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Utuyin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reaaunon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Apoatnai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aeleraly', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yiesoballata', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iveasaro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yiareckent', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nilistepi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nediertoeod', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Poboyente', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oloe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Auipauel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Unefleito', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tilaboo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Choea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ioni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erdaebo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilaara', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gaikdoaorny', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Adguetobia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ordriluic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edoasae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isiuntei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oaurou', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Muazan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abuno', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cotiet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aovessligre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rialeleigo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amaerau', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emtarauc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Namibe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otatiopa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onutywe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ueyon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Zale', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raop', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Entiop', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reipeam', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Zery', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iuprirona', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tiaosuary', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icelanych', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itneurstaoer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nicuio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orsypboao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayenaafedo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oezesmin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inmarwasca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alepoayra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atanebatner', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itesiert', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Odiegwhoonle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Vaorpaercoon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iastde', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ortunakat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atleetethi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Peti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esaesafa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Osimei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oveioat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onianeid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oleyashiai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayirapa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sutudesiple', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Siyepeockano', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roeyptore', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hyotoent', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aymei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Haitchaiec', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oymaflais', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Syolachi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asmedoewloit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etassimubome', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayatoltorois', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Peneagfriyi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ployeupotat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alexegac', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Niimoa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leisryait', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eitoespoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Shadiseos', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hestaki', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aeyckorocy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Doatorop', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Epcluosti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nuarohan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Youlafeim', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Instru', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Utosuens', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tamiupeubo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ypatoencea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hyneiba', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iurp', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Vyereoysem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Braiuck', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abuessyicuit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eiganerla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Usectroeuo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iowdnecoma', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nadelierne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fiesmnein', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ockliupti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oesed', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Poerilpa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aday', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roassietethi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uboubrae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Adienruntaf', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uybi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ovdoyuk', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ohisceodeol', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Urusoetex', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yaeceroe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ingirtu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Geichnesone', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Coarthumiges', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Efase', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayogneob', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omsieuypt', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aledateerdo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Priaha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ozeedyob', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orisasun', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atanizcyi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etenal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oamedire', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Riovedi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayafal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uraune', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erutrual', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ogwrenea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Laryoatoyi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etzdu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uesh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Seisi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esaiad', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eghqubiseat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Biipailco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ulyg', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Irdilespa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Evneablo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iyaedihire', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alnenouk', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Waao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ereilphaex', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ehgeiigco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Daatovi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ongniyindiuk', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tredlidode', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acedinegloti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Greuadniethe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Liiau', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Liernyeiv', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Liceulel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eahentroinra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilneic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nelaidice', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sieidaocri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iteeylcevo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Meen', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leguepme', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abuwhena', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yzao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atadoifug', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilstreiphi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ublyliiage', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lyutboyund', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Loateteimpe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Streasmee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Obein', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amuncraec', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edordina', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Keerecita', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gili', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aotiphapig', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eneunastier', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oaest', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Riessotbu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inutei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Veacutde', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eoreu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atulap', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aleat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uckanowulaul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aicuarer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayutysitii', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Stripebe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cabeniixa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inhe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ardores', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Egonenoivam', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oreziatu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Unceyae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Echecoho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elienigoa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lialadayi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ytufralu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayiorat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rireeipufe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Noroamasvope', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yvasuodke', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Assiesariin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eibuimabis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ycoaitea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isena', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amcaorit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lisetick', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acatiamobre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uiulu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Adveyt', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rerasle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Upzeneome', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hineda', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Timeyomameck', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayasero', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icayeaya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Estinraig', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tauteoliye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Usalayto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eliocacla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yaocescoyc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esta', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ulecisuoti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oregorerigri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hiass', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ixic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bitaaboss', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Kutoitunkzoa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aexakeism', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yoysta', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eychiochiag', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Odeaotne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idud', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Efrune', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tisa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eolotnauso', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aniangi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oderadure', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iodvopesthe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etelabanaot', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ankilyuhe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Shieceed', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oldguintne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecemis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eypo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ring', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Maecduiat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Moatgoian', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Phoewengahyu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ohuasere', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reot', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olesya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etgro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abbluelxi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Migrilie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umasahat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onierero', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alpeklyeewn', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Seaisyaial', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Toae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aluypoghon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neroyaheesul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ticlonuse', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ifahenoleim', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aanoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enumamom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Meanlaer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yulluide', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tempsojoib', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eole', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Westre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Agoliblaorci', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fete', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Deteyraene', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oyeenwa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eshdediwi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olacryohdaup', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eraliteos', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yekiacsniu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Irenierac', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neaso', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itteeakiart', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iheprainble', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edotilsi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enasatnoiuch', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Capeeraid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Vihe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecuecsu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Istrealma', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neasplaory', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olepostahaph', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Laonaah', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esade', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Traoshuwepoa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Adio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esanidip', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oneoggesla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Upraylinses', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anemo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etaasserita', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iaordread', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ialimaetar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inoheo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omafi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neitapanqu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yaburonei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Segla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Buibisarere', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Essyde', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uliuc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecactra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uyanica', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uapilai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eraerohuz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uylgioesscra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Istyemapien', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iistayloeqya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emosiy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Engcuetymli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Susigreroal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inchitebi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ryoao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Efaeismadgy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elanne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nomaut', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iacao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Usackayimer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roumgeaurpo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Jieara', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ifcawoanni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Awgeoryeas', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yserae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fieatdra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neusi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Operayoy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Urflaloerici', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arishaze', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yirmtai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Urdi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inopeb', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oolowhiede', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Kaoari', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Husuiore', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ohem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gliasiemo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ekpriuteuli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilmitete', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aseexveiso', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eula', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayramene', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Othaplatiya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayhubsaymu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Echbateutno', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Imotwao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uosceansiov', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Caeatucemre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Avizowlcaele', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyaoistli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eranoaai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Shaaeshiar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ytaliad', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Blonocoes', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ismearnichay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ycireeula', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aecheey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Negeor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iscapenaisnu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lyroieforhe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abofyeloba', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ydesdeey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Parueplyehti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lodipi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Urebdi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enevo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olmiureub', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Irisincaem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arifoit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Astui', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ungsealavayo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Owalfyiey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iatesizpiac', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Kiille', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ciuogtenei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iceailpo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iliniox', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mioomuuri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uplaishuie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Userinoede', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ooyohe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eaosm', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eemydoass', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cihi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eceluijse', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Chirayrtma', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mesu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aemesedig', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eretun', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Doedcouh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Essooaraun', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Zeriiyiter', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neeocolyoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iorhamu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Exsherereu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tiraneteagya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Axoiermceil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eribeop', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atemetnaell', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ossreteae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Blail', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atofe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Haolec', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oundo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aniev', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orozre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Navire', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Niryorunin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Okoyistitu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teent', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nyigmi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ordoraneryny', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ieli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Unoquog', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umadniglaun', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyotry', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yoishoilem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Zestaeat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ioriolo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aper', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etreuzaj', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aaorinafi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ockiovdao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Creacoiza', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Criun', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eneritioc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Apyachse', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Jeomionio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abyrmskour', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aggutkiopai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ycalyine', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Geheonisphoa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enyaopirun', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Seinsympao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iddilasesean', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Glialoivarro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oweatharinme', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dianseroais', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ionaran', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Moyckessoay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Biasatu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tiemge', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Choisa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aaheng', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nyichiafia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ahleaone', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Retoagalig', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omurenecest', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onraeulio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abliad', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rieerio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eagtoega', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yierthspo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Conoialust', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oniaystrati', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aleatoxu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aceosweidef', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yaeliera', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rayenge', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itzdu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nieid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arolosk', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Noltea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icruongane', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reuv', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arermioadu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oeixa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emovehtiade', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etaira', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Stylaooa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Epseinib', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otheatsosu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erbecise', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aiqro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iofian', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olroreico', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otonausco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Prahawooiro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aynaoviod', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reoguivlao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enioe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Laedduse', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Owelriaus', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Riolirpraan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Almayotel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leurneas', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Liosharedri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oifyeoliil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leceorduri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oieaga', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Unriro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orelliizcry', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ocion', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cyocak', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Egeati', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yaedawanio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Zeutintre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iolreriami', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omayeati', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Indfiarira', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ineemi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ameyaraeh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iloineu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hoyyle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eteishoncaic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ailacoyesre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ehethulahiya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abligaechu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onrilaresmo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Irdlemaehow', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Staliscadea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Zecochailm', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eroataoh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acacogi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neererscieu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eaud', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ramoyereab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Niapra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Loelas', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Taensletyong', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Utspoocfoig', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Henaeche', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sasooerin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aopluinhait', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ouithmglahi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Staisa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onatel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yoaesmtitaen', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otliatu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecnospuaya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Agtiatno', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erzaiyasic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Screeragtami', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reizairm', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ucpri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Caobe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Peeg', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Imayatea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rimeotega', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enacbli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yaiacefe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lapreug', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Laze', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oraiercao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emepa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uaamaed', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Renecoestyo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eusaputtearl', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etaerne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eftediey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itwiemeaa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enolo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aruri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hoeil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aleyub', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oteotang', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edahzeizce', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ewolaeri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ardiaette', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tryfierow', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Osstyalerper', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Vilifistomei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abofa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uenase', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Unditarbenta', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omtoee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lebiesoat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yoha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ohie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eush', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Twemariiye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gegiaeod', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ialgoerth', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aevooperd', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leeimhy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ohdite', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esackaloestu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ionleaoss', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Igow', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Peri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyockol', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Azostinbly', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ochiodinteit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asautell', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aytisle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icealolar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alorieiko', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ovaor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oyecboureor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayatarering', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anocopian', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sieecereiz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hosweabiz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nitiyergora', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neape', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Achitow', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aubya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erlaizleuye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Taeki', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reotreyomye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Izucta', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gulpe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ofueba', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Puinarreeh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Voele', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eostpieope', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uesreipute', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rioivestripi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Imtoerpatla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otenvedewa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roeugonlo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icyerestreo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ataro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uniqfi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Airkmalo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Echehehei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lietrimoipub', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ismieronta', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rebusolo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Stropo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aiae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uogayo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orirallipri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oritpeysi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecisumen', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esape', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reoalnievu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oteamefato', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bipaoap', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yeys', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erueliua', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idroowpeico', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tybatscene', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Othlaoyne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Melay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acimaesri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Encaallihiak', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Chaarstanier', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Boecanin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eonwopifeyst', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ostuow', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Resonipeoss', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Denegii', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atidieb', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ebreetheiegh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iqessioed', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eryoae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aissaipi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nisuit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inhytatiemi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Geua', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omaantadier', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ailneayean', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ipulinty', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erlail', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yier', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ulteabaeri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Geytaht', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teshigaeite', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Axotroishi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alisdoagus', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onieider', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aangoo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omsuiey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Usreum', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iisotmyob', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Guonaebju', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teacesty', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tryodingari', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Usohabaoro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nieldosarean', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aeeaer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ateochipa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Laalsein', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olneimose', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Priklykial', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Segri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anasiine', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oserilyo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Riastreomny', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isoylaoroce', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gleiusyaoht', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olang', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mesies', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orustaxi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atma', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nioksneite', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anrar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aeqeonso', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayyeskedrhe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fohococaa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leiiech', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Obacruerer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rohomdrycoro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ubinomi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Epiner', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ieamebay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Owurer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teaytusy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icureoed', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eobul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tiateoiy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ugatiamipra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ocirlu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Euer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uerpheutety', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rasha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Udreyeute', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Shaogac', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ragileiam', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iataele', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eacirmesonse', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Maleoonmoam', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iaireya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Riioniehyo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Imoerinena', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Biismy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aseasinanle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lyocnego', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sepe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ageief', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tiliultuatri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Peoweatar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Laerecriipra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eehardoiqunt', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aticorabaest', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ewacroyp', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ubatypspe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aestid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilbraichro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erlioannebri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Osecaaspa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Egoqneomolo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Usir', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Siriapipese', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Osnoeod', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Snunoehari', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alnoiro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Artaotaassar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Meba', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Urdniiaatre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fuis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eleah', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Obbetelyro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ihuao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atyrouteic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omiupoatno', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iossastenguc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Niopailes', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Diati', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Suoplineri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Egenoiftopo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erzeo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Deind', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aigentiarso', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tioratcoblu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Odagrisceol', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amatsobesce', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Coodesciaum', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gaerabord', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inytesh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tawouni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otiaes', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Irerey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Luasale', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aolba', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pevoraorpra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eneanaipiz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erehutyo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aumettongero', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lope', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ockadhoni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opoana', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itmaeu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mies', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mapier', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atoeur', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Owahelhean', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inumarsilo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eteindkeje', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilonilesedny', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Adneacutyilk', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opulenigh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ahtoraurond', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tesyossemoli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uhafu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lapeacedi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ceyeyet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orut', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inewnapreor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Phapimi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yppachibeiap', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Meprohiyec', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Deinmiaphe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yneifo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ertrie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Laeockefeu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ernoanif', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Echuoiv', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oscidaicse', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onolte', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sleagrey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ehicya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyegeor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Stiolueiq', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elerdysep', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ligiodroice', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anayera', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Natemaow', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Siryimfecuol', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aboceaghloe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inefaloatli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bimoakin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sukeiiteyof', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Goucrieevo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Remaecestro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iistyintabmi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ialeetypnu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eovesponon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ahireer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otaereet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aogine', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oatuiweri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Einedoaa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inoleisme', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Untef', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ioycoino', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Astochaireor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anlikeese', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Urwautryeh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pirashapugro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Suamolit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erona', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Xiantihte', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ueldepo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Owatroistre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Owyu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilze', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lehuaripein', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Peicowa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Utalalicre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oaezeo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raaoodna', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raajioryed', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Engadie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eolefi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Laepeis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teochascroe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eheov', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erapupeaga', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Milaameuxol', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Luinefro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Siumon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Siahoi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cemiabortme', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yiteehtibi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gousole', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uhtoo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ovatypoca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aremevo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Egoyeotcoce', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eemeri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umengvealalo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otcoeckelyp', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Upoaalatco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tehin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Seayesoo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leontog', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Othma', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Deleneas', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Euliy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aeunugh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idinenecoga', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Curaona', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uchoadaene', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nekenarech', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esinefueic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aeaeic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nauesptri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Odteumstune', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nema', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Vepeedtiim', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oloanaaplo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ulitesteatyt', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Taiveatelo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aaya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aingeemain', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reple', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iengeul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Borybaa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayehidne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Safreesmolya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yrauro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aloreloora', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ipod', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Udatee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Igaerol', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ynuipaspiho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teowicbeovdu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erotloinun', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uneri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Engoessitu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etcetaspi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eigu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nopiar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Veni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ewooc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Meyamoitli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iabcho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sqimegoan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ivaub', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Biolucayng', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eayessedess', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilcuacro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yoilsidinati', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Proicoa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erboeng', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Jiweimoat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isuceassyo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edinsrycyode', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Obataiocne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Antytitheba', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aplio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nomoeot', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ioatti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erericken', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enaemejnime', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raimaro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eleeiulco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eidbe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pheial', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Voidchueeha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecedlaatis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Laeolshoar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Canecauer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ealyooro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Laeud', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Racuayetre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iluck', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Essnyneru', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Zeme', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asobomxoac', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esarinoivay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Vaomdroag', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Chayiz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idarnloeram', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ysheie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Chioamcoi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ehagodu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cruaenoli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Upicihy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eftestihaiey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Doflikaolte', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Espisceickua', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Xoiantco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teeleni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iium', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Styabivior', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iusk', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uopran', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ynisstu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Beestu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Noatod', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Heyureris', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eduonsbona', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cierstri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iethociton', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Noicyye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Deiso', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raliyctthui', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gymeleer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aicstroaldma', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roemermesmi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iugi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Meesteo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alerlaemp', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etyi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leyty', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inralieli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uralilae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tioyet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Easliom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cheighilahe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aywiaeye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elnenery', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inpeinpro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icoxaviyss', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ismisam', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ocyoyov', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eoyas', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leareategg', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dausa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aneymiandi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neispca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Glemoaiowi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Beidyoerju', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ohfupra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neaciting', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Woaypeei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Deriulitmeba', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ignaeyurne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yenismob', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elekail', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eypoiex', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isheopeac', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eqlientat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cois', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Noiterfepra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Kaofeeonfi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Maniizafioh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Daeni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ucoupine', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yatomuti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Upelute', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bueom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ciubatinpra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yafniri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omamyes', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uegrure', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cuip', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Daochecamo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oneowlebicu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ieviai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otlaiadubya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Honieruseca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orgueragelid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opoyiaa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itxy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opaurpayo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uponstuumry', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edeaymy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aaydo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aneshantamu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Riultepa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mell', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Efied', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nimeaufli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aoackrosere', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etmeja', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leyss', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Astyeahtlaay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Myudereatig', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onoiyea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aoheos', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ocinirat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ricoter', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aplula', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atcoifama', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ombia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aoeabceord', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oomomyomer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Operleat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onuara', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sarerorai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Toyperteeo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Upioii', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raleogribu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idcodi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Moapriamp', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icisat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aimecy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mauconoer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ertza', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Istoaz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oweo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Phiyienis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raeoeteti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gekhietuyrd', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oneiia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lotian', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Piamily', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Evucaopnoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Issonnionaiz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yneoa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gieda', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edudyuial', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Imilyome', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neefneiya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Clion', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aforymepo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aeron', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oiso', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eahysisgapsi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ineyanene', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ibnaiinoty', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ereoaresto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rueruao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Urasinsye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Shieanalco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inaofrewi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cafleoth', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omygmayng', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yieina', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ardoshta', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isameni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ontiipaar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oneneyo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ubof', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isuiws', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Diyavacuet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aeretop', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Liiat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Seei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eoplylepre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Saeost', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iviequitic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Caodsaerid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ustcuneili', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raoshwayol', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Evimav', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ridontsei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Kualallatai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ciedinoalit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eraafay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayinag', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neipat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oiysiriop', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Miomipiurxo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Chaocsie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Imyrketap', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Kamystnaery', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eris', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eguem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Plalyobiri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oriqesitiry', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anyeuagoten', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tiregrayene', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bibaroe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eanglestriab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opidiogic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Loayipa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iytonenaep', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atbori', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uromin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Duiorte', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Othaiyae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nouya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Laplei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oatadolto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Taure', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ondeia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olilinin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Geotliero', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Andudaa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yone', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eacho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ataneni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oucdreergra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sogoistenesh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emuogi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rihiogiqy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neoatlecreo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Igeolnei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edmeoq', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilyihi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ameraon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyakeanytro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Niuio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erdetoutme', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sutiroyaper', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raowola', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ifoliete', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fetaaeick', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Coeromitbyar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yoeisli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Naoshu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isowpapeat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ichi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omgraeeda', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emiencoa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Apeondpe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Maoid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ipwhoneelfsi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Coin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eseiy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aspa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mala', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Assug', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Irircue', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roneod', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Romepeeuno', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uroerkokri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teadmaul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aayovyyri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Chialupoogto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Engaobeat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leonstuatin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olisystredri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ashiote', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asesmopuore', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Capunaivarip', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sesce', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Adteecoxi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esepeyukaba', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ectalone', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uoychani', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilaey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ithapeyum', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Necariys', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eeneroz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gleyaagpibru', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eontaeoryo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Stuexildchy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leodus', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erlayst', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eonion', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oycevieto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onungloloom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Puabi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mapoesiriv', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eootteo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olesstritiao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ianeing', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itetaent', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tyacaadi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yeotfieo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dezoarog', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eimiavasi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opeiriaiz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Upooakalso', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erati', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aantake', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emena', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Utgotreac', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Laacacapdane', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iespuieh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acyatiienthi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rotrispuordy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uaes', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itesoem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oerpeost', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uduryfemo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opaspuda', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yaintardepit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Irengu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Codyoesta', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reforuma', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yliacleite', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esidi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opeseyay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eber', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Caeocse', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arowigdoseit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onarueisel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Chuaereori', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Diyeavi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iche', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opyneoch', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilteoede', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Entialuidde', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aantichni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ereckak', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyoengnenoic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oniwanoarko', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otpriolaical', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erdougipune', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oenooken', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anteotar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ifigionvi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yacaient', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecmieourli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eipein', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eiulian', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uceaycyu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ahercaonspi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Apeno', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icathuniup', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ateog', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oteriatripi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ehcity', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Naiaf', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Toihtelumla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Layie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Useli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neoumpeiph', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oguibir', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yexororo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erdeutnio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Libu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iane', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fliow', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eckildoliem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Quizdiifest', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abniungbla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Biyaemtiu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itermabofa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fuybgoga', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aiichfu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oecnirabe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ynoiye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Foicaliz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esiigubva', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yereraecde', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eleiseivi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Naaltaitokny', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ruraey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ajslaipioin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Awonoele', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amuaklo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erocaordio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ethoasec', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Preaismychi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eraun', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Deitaeathe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Soar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atyheaphloi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Shoanerillny', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tosteyoi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyinomp', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Viefla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Laadasta', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eayrcylord', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enaino', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yoiliul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amlaeabli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uglybio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eerehboiloc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ececheest', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uttbaelenu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Diadinopun', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ypmoaerkigay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ebuisusi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iupiato', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eiltupexi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umutraaytemi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atiseadenge', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ospu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uantbrecla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ungneetoetmu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itrieem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tauall', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oreshaortil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oseode', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ciaemesi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eriy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erpite', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yepayaab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oilae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tyererharery', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Techaogdi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Unieomea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iyssaka', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aquyhreseof', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Liayreinemi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Caefuver', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Indabmioctea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eatha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raonabvio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yuteerephe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ugenlo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aonlietib', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Econaaej', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tumeisuath', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etmeasrineor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Moid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Haercaneluse', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otseby', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Agihtazepis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lyrideier', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sieitperi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yaoenkve', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mitoot', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yoneapo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Choric', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ogumte', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sceno', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Moau', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nebosnoenina', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iatumanie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erotcosera', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Giewarano', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esteimo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umictisy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Epey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enetre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Assiapeefta', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Deata', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ogatapale', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tiov', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oddridyit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Voye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Poeika', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyssai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ehiuspyo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ofaiea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tyouambi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eteingipry', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pieehreebu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ipaienio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Phetoab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Milieraceno', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emacei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eaybaopla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otiind', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tiienotra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oleffasidmau', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Preinspatei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isge', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iegauoi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hemecocia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ebaeper', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tyleteademo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Areil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sporueaiqze', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Angteine', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oroizyicaim', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pheieaht', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reulevein', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yukuecyac', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dioru', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gutoia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayadnanetru', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyatabu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tedhokeoal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Toerteake', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eomam', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Croe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yocaowur', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raivue', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umoboce', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Egerpoayon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iaolchoea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oatriu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asheyetaist', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aruaodbo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Utoyones', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aaseic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tyeutoabro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eraacoyagra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fluyot', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyunt', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umacpiflioli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ismeteosm', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teaayo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Clatinuphiv', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Phevaorase', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ivaliflaotre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iaoiha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reochade', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Odoper', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inidgaodse', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Izoeabadam', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Niaogrier', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Frecoepopo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Titaiisonat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bieyacolian', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Equis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Whejuid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Apagetri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Afliad', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oaespalomi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Efilothootre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yawehomisail', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emsivofo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pacaeeo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ynehiudsu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erly', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Saifisicve', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eaadmi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Smiohao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yebireufune', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tyneeing', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eewonce', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eretiecki', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nihiadeiv', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ipuowilamar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aeaiza', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aiasei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enean', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rauogheyau', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Awcha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Coong', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ugieulraer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Seowreupei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lanyfi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ionukagh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nisneiry', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ratisiodon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alpoeny', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aerimacit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ryfliind', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rameitalfona', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Norina', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yitrewaam', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Afligefipo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isesyeezsho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gelouowix', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aayrinanie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yaad', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elereneprani', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ithreupanuno', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilyisyri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oapo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oifseto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ohichor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Stiiroke', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ozbyramiyu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aexneiychwa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecte', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yoreaksuoraf', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eobeane', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neetiyoodje', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Efanabiopho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Keesiri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Viiang', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yaspebies', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Natii', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nohuinio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uvrayigechi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tusaki', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iuetecu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acroos', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icteca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atokosawglo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Into', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Obim', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Udangatomiij', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oheonsoh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abeacherea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nearnte', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ussomiscoeh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iolumeole', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eiurarai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Owvieminrom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lial', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ninoeurru', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reyntyooe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aesi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayoig', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pristro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Apaesge', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilisechonebu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ascakyi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yhto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Froackne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isesedtre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Swuatit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fluais', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lieiri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ucto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ongaet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Recoepcoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eoiupe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Siboienni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raeiga', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ioteo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Urespis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Upiatro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gepaiotino', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Knejuatlus', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atescatopa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enerioce', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ugorinort', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oysti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Avee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eniubadatey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hefreisak', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elvesi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enokeaed', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itcha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ivati', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orewrinte', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iasebiarm', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aniesionbo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arusun', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iarheioe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ichotiold', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Prareypmari', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sqiemkyigen', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Astriowciam', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aulossicue', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aroin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teoyeatequm', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Triertoinap', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Utedlu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nereoiiv', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yaitli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Naiut', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uceproehip', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eranruomin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Apariselaec', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Suyoeman', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isontbeapung', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elspie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yenze', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isicypoto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ameketiaam', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isalpo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tienkeatse', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ubutarahafja', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nasioayonad', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iniuini', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Miofroneab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Flamakeor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edydriuucho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tuipentribly', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edreyrispeul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Untieup', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eseblioinso', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itieressca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umnoave', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eucymywa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uthoeser', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Escoyeyie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Loyamuperi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ieromalwie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icaed', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sageiopri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Speureru', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ytinesa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ianineie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oniyakecreal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ickneocgeic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ovoztinitire', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ebaniyodoat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nueremaent', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oinankyaet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eodcaro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Thatat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eoistofa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Igniatildat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Qureki', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onrenefe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Noelalopois', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ceongbeilvei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abcora', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hiilboa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Urellinismip', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Museahtimiat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edtroina', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yitauy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pidi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uotol', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ataondduort', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orteshayo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aterrene', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Peibascanir', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Earala', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iratoelei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oireivtou', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iceou', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Urlu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esaotou', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ubugeteai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neranone', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neeonuniyu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enfreoncoer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Scaov', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ruahha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Modealasud', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eiyaefay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neanuuroat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dalaahec', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ertenorutile', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tyaebun', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iospaose', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onuiubat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dexiystuue', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rosareiit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ocloekeuleh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aeetarat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Vineeter', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Flait', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inebra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icoepeleu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esieo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etop', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ashe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Puitwetoiss', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itievdu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ireheste', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aoiisuyty', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Essuedalis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ortiengese', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Peiericora', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lispheomab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iiopuleent', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Soabneo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Auboh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Piua', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iormeloal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Maielele', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raiyen', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arbiired', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eacne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reteseoldo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mepeyeameog', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Unompasyyno', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erble', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ueolu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ingeongum', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yliaeytypu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neakae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ebeotines', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyteisliu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ereenientla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Essaicaonkba', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neibonyp', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Peleraol', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rene', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rebleopda', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ebni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Phagere', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uenol', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mutiaamra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Topseiu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iteary', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Epeulutiof', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hoina', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onaloault', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itasa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ononoesm', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nueonyh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oakaladu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iwkaiil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Astuedinktra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yaoxpy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ichaisi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Echeir', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Imre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Traely', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ignoonimera', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Retiseichbu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Seneemivsi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Efeatu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aderyp', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ochirheydge', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ysseitvoel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oyebe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umesanereom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onetoskiol', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Evecheut', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aacospeeren', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyoieoam', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atetra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Urovean', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omirititar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reidotis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uckto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ullilamoie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Duteoniladi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cheuooyower', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anieaas', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emunihateoh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pudiilesok', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ocswo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tiorcoontty', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neigusu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umoipeti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asnuoro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aladkiar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Istieyanal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alildamee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ucdaigroor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ridaei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iroabrega', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Snuhataatugh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etatessoani', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ortponare', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aterliyermno', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edwineibuti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yumeon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abloyg', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raeol', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Usisle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eroguo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omereyhosti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Noardaeth', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atsciriye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oere', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Usieyeier', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yehe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rayoreme', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aieoul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ormomiis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oeyrii', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ancuem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayewluaikit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inincatpre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idraena', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nicagaythea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyebacka', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pyiesmi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eoxavbraa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Usswi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Epdepone', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erissiute', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Odilone', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tieresro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gusawoleime', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ewco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enproty', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isabetaeomp', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yeulacnousis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alatiayoyre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Speatog', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Igeitait', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iisseartfe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eryeiad', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gianebois', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Keabicroo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ynitdolufne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yanispe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecagte', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Noriefuonva', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gieresocca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acembev', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oesheecuthir', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gruionitvu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eayerter', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eongicee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alpoyra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oeromli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fepeaim', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilraorish', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Essoakspee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abodligaab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yriitbroig', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elyecri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Antedog', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Buowatne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecliiweni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Shoeaort', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onindseost', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asioder', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ismoa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otela', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rerguyauf', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Toaudyaon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tinoayra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tyne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Caiddufoaba', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pearisy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cheanamudio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Copriumirn', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lyfieaef', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Loeypeitrio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Trionto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'User', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asalxan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itewokiachar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Xiye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cotyniivle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Trap', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neantro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oliteir', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Utrour', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iplieiwa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ichiteidarom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eryeatnaoyis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Slyoaboli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Echesianyo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Stira', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itopayide', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omiee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Veuckbo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eman', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eatsha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oldearyb', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eorsku', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Titeostilo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esagugaer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anoimeya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roescrieloa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eiminosyty', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erdre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Meamti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Laiigeati', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Afquyeseeyce', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icaikriemat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alku', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opiaal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Freaeu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Striolgo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edaitit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iveli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iturike', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raire', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Wieedadie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aclicluo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Zeriurimesse', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acistag', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atbeicep', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aperdidopri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rinelaroye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aibyfiley', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aafliadcee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otyoetu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Crebesiiu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eraenig', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ajec', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yinesespo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Galacaamtei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reruglu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Adanoybwai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Wilenuisi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oecy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ioyandyie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Retroalra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Okeno', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Trepialu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erala', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eevoemriel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Afiicariig', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Liirabru', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tacceise', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olrea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onig', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ifyetriroe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uoul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ishepoya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oeeptean', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aopynucau', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ateuf', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Evistelkareh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sose', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyimoduasre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ungroeti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icemaypa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oangmeieri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ygfioutwoug', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amaycdosa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Saevelecio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iapiea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Shotaegaan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Schaci', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raraaya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iglioihoid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erlioageorth', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oyolia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nuofyerbliuc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ytaansoesi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Loolinare', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Coti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Piydoslady', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eurorifgeste', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esnojeat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amleontesmi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Stuiapit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hoiyare', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ocbeypeiyl', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Xaquilavype', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eneun', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Poayse', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Exit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teraieritoy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Owet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Laeoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atieckwi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eritis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amoifel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Avariolleat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dicoocsoraim', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enaerosoye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yamoaon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teagedao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yedonicu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fepisedoual', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roiemcuucle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ivereicagha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ogeseuedeth', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Osti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tualerocabre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uaalbetre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oylayro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lina', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emneataan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oposseopcaal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aratriathiic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tiuphoowsu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Craeshodi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oruoxo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uchieime', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Saacreoiro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eneove', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eqenmi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amindi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mosiercleoc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oorycoana', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ieebyiosti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Imaipopoi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enasshaooy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Buolaliral', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Maeicea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yropreaoth', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Echesao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oatveusro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tieri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ypmadeplema', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oizitangipi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ieykni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oretsuaton', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Goonnei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atleta', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roryu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ropelead', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yoiknyloi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olmeic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Heisi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hifoi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idiecifard', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Doelgioe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Epirofotov', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leeaberuib', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yaniengriot', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lerooebihe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oaes', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eeicsaobya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iducae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bolod', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ikeiicentne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iatonufzao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Viinecrenoan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elonlela', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onum', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Adrieumy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atwru', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uruickposhe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eifsniu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aynuestismur', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Apasiurn', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anuehe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Impyrdatazer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Groinayina', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Watruyo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Kuolyroyngij', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amleemakre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etmi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Estrieoig', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Angmiingpro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sueyeo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nyelieyowti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ehshoti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aseissuub', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ysianivdiis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Daeromint', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amopwoissexi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ighluopynat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Terushebooi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ectur', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amineul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Xaisenu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Staukmi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tifothoad', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Celene', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anuikab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Geooessiso', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leeche', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iureytree', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ietuacao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inloele', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Selcloylni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iarilumubis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hoonhaecesil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eolesooro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Deweit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roalaad', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ibalypeare', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tyseaichaop', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Istiahenei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aeria', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Naeresast', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Adocoke', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esubehadonag', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tyiunau', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alidehees', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uesteyoserne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Peniuroile', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Engatlin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nasaak', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Echcecaef', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ahene', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ande', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aevodeuawn', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Thiomreiar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Peysithoisi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Potiap', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rydifeayre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Axoatutrao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neeyipliisa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oaco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ealopintheey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aciucharoc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Speroouhca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eauloctis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Okapedarcli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gudemoyofuac', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anmeia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Spiay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yoseuarpi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eube', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teoternossu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eunopyal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iare', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Guoniusebe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itoeling', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erieupo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Laerin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mepial', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oeoging', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ioruedni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Liuresso', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ohuiwnoeh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ysiois', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iece', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yotient', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eroke', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Endeermamu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Synereeplai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Odanduro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iesttimo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eerewao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Redroyme', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Haytanet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Auima', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oeyaenmo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amacaistode', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oyinte', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itpoysna', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Poanse', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Urot', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erklirepiyo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayoubtevewa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ereahohinche', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ectalil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eqgroli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cusoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Efagho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ritwaadras', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iongbeid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ceye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Exmeaedarla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tiertprete', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oisnatdiur', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iranireoc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rysay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oriegeehe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Haisese', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aluoli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nofiabasali', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opachtre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gelasi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eayese', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Upid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Treibioh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ibilaopesze', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ieyudcito', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Stacinsubais', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Truatyeomo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eymisiuyag', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Agybeilbepe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Stiyuaeyem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inermerica', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inliorofin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ulialolones', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Areay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Zoephirape', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elaerev', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oyey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hoenimo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etowhionsu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ivamscrostii', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Stayni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Taeleiben', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pinosuaerwi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ihtid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neareire', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Egon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alielwo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Agamcaac', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilybeteine', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nainroe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ynernguo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Placra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itogliea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inegsi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asalarivne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onial', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Daumoabe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Efkre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inyeocyi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Staeyast', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onhat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Brope', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ehcoipaoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alopie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erdemeurd', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orlyoesutco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Endulaniging', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uoxoeyo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arano', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uiecerun', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Crewar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nabliophao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aahutulrea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iitrierenay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Apendinkiala', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raoenais', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Maoetul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ovoarieu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Adeabayo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lilaigrei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oiuat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ovamyssclora', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Veueepi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alciyci', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ioeta', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Needth', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Loassale', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aleburasoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Achyoochie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eahike', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orycescloimo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alyosu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Glabinome', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roiye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Affmaveuazli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Soesex', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orcotyic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Peeiitado', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ebiciuingve', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otaltichono', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uarroya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otofowe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Imoesmaclie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mipituecot', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ablieqgeulsi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ucseo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Untguboti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teoviogatde', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Phemiatessie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reabine', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uritarcourt', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inriabes', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etaic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gaerifu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ariay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otsico', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erbeinse', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aniuc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idedov', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Groicait', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neeamurol', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Saumexcait', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itauedian', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oeffgachi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ackeete', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rieyneoyoci', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecaf', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Osmdoo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Noapi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Niuone', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fietcoeth', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lireesh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Agsloinit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onayantentae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aemteoenush', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tieueu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nityeetsisu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nibrobo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Obyaeahemco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atucoav', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cheagianis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abeusodaco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Useiungi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esiengin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Caya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ovaibnaad', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eshneyoyumu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilpeupycoy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iesimpe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uerkisopy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itteatiss', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uvsierore', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rieiu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raarycea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ryjeico', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Engfruowi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anuchniutis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oereroa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ubuoneu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omfleaye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Luiob', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umrapreta', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emorpatiry', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eovari', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iongot', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aifroim', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uciyany', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sone', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ashiguaelo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aygi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Apvayrnaya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Paacerilo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Noimloitre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ighy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Toiteantrea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pretreen', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Siive', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eitaplymo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ciahamlein', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Breluinou', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idaron', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hoiteinia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Igedipourimp', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Indpyeesmyum', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Deaf', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alosahoatye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ehschenolpa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neoi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sceieesca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aseumchori', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isygytuesi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ampeuche', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oeutkene', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hiflioannera', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uofiuwkuf', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eateyeag', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eeorayeef', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Siseize', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eieivein', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aeoentre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enpyaru', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iebre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Urpese', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erasui', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Togiycunto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asmessonu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Giotha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ytetoier', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayrain', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cheydoc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isiset', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Apri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Utigativein', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umfaayyirosu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teire', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aloorno', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Coahwo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Igeneitaab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uzeuxatol', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Maorpiwione', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ereyi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eguamahdaic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onacard', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itup', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Riliessuca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oakior', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opdeon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ionu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayoyakeau', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Epreisyssen', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iuzelalo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Woeraluia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Peahpenaita', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isereyec', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yatwilaale', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ibogog', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iniugoypa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ymavuse', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oberashaei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nezonie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ickewtuchi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Haenizru', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neteyusossi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tealkaroya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Liole', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emiye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oaric', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ulayaierot', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Upiechoesh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tapuiyeil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Toheke', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eihmo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aarofieok', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nonarayenis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Apviino', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teireule', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Syued', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ymtrato', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erabidut', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayraoehpe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Essfeoinycy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Escoupeuen', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Soneni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ingyostre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pepsa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Upinyist', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roaboad', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fleevuerin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lawo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enuziaj', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ateruleoem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yeaoriege', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ryeilfoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ofatte', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rairmsepocin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opeollaesa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ergaichqui', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gyomunein', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yenulline', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ystour', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ophianic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enoeyaytac', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ueuccuayos', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erdiok', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yafoar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Odmo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ungentiist', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otoessenin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Geteamtea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ineaiyen', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ufriass', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elep', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Shuic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onalti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eguearty', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umspe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yaneamoach', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eardoo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oeuoal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aenma', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sciyp', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iano', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nioveeco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Riaacaenmi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Vopraetoolet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilneconaab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nuaoctadre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eigeyterae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Chifoliee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Caylciiae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eymoossuro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Egatuluce', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Loyesluailsi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oiare', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eteinaasi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Briuesodes', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bilari', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ekani', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isantob', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Efiaagoa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gethoaty', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilomeoti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bibmuadafyn', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ainuesci', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eesleyerche', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Piyeeyisve', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nife', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ditiemam', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oesogiarey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Baulesan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Trekuo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emeclaao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iliruncba', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eapawuo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ekayicalgiya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asinraacto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Araelar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eitaibho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aoypae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isleei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arewil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Indoqlipru', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enyesne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilincuro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fiubraanpro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enasineolul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aselaoefo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Maicoistsali', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umeoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iamesoito', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Adfle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onoiathe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ohing', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Vaiaoyi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uliepyoklyi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ycimalemale', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Xiaada', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Upyaneyd', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ibuleyab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ewesyspoo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esangoagcora', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ekitherendog', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ataaledy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leubca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyepeat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Deyxibituna', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iziab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Siaraeschav', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Imibmanetroa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eusmswa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oeree', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oalmounom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ipfli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Syyemaenerd', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Laushosroi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icyrei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oiceghyewhu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acoin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roaotitha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Imaticorayal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Okacotytow', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aliduktool', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emloisnooet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erexneuyou', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icfrecu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oxinauara', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gloiwaeec', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oivtenegyme', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Loang', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oonphaant', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Knyaestu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aylie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Afege', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ethlieritio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rerse', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Udireati', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Direra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eluaysuu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gaicilunbry', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aeteca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aealiba', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yieyaer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reinbeniehco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atwao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amabicesgefu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Araolsercra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Maialei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bleiployga', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esproe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etico', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nian', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oheal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iolam', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asseyayle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uatishueon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iciine', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itunealsteon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Othiondarat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Xaiascily', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ugeulifare', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eleiaear', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roiseopkno', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lautteenop', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ysgerpak', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aseucrais', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Avosite', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ivpei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edeai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abock', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ogaiore', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iqaevaszo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roluit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Goitisniyo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tynaolyme', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edichaeirm', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ileawexle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mimiayeno', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Besuaog', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Daotanyis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atreue', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acrosuiye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gailydiuluj', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oigie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fyunralu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ugesatoum', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yrsebimadior', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aticat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olauria', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Scoedbrica', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eogoaita', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eluoatsepla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etussnedeile', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nela', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lenaexraesh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Meprios', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oeycpreucmu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oukne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oneah', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mialelian', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lionian', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roindebike', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Zese', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aechiadad', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yeaab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Upasumdou', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eaerair', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neudtaut', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pieiule', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uticnoin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lericaity', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecsucoengce', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iatwostry', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yaeahsi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nelolelu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olerdobaoeck', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ihoco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yoite', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enunen', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itacaurgre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Telioeff', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yeatehreeri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oqneogumoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Empoyisae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aanreoteh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ofka', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Estcro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayene', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orynkemeri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Veta', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Imaipyi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Monayr', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teiteoplao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acyeyteyba', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Freaego', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Suameobint', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilaylnoaryo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Whorupyrhoco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ebieffsly', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ulnecrizyur', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lyeicsuompbu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oynerena', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enolsuaman', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ahlioabat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ussacyeirve', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omesiatere', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Agorid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asesia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uptoetstepe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oceeurea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edereiqin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iirnaous', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ielycgoest', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Woho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lipeoteo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Efleidureyp', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ismeraey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Seisewpea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mabi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teatares', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elaren', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Palaolali', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Niufe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nayzussalge', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Spouola', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Naerra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aoqlo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Obiahchuriar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onrieacscu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opriogioist', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inceopri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uortean', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ensuytyean', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Loretyi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tyaudsi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Coeckgi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ealtruciy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tuincloli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aeyot', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abpeneusho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Desoec', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecytuime', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ouynie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oynuilmeprog', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lilioantatse', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cleeoblene', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oaebe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icresoye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Egcygune', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Egackduac', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eclioybara', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anif', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atoeibne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Optatealo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ieye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Epiguseme', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umscrei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Egelira', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ystmahioayti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Riatef', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iteceniahe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Necoeste', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inaktolave', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otativinrira', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Odolaranro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hasomeoboht', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Schoetalepry', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uyhi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neiothesibay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Straideune', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Metyloa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oyeb', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Assamivtinu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ingumipaeste', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Urtnemorewro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lyoas', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aouit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bypaesae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anby', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ufun', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Toiorthi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Moayayn', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Steneaig', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eciltheolste', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ipypia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eoleasya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Intky', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eteyi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yeacauopon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Althe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ainleane', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Liaitaruor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orasicime', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Areadmeo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Naisbi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erpichoes', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roimeton', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omayageossug', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tayalraswoco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idtreiess', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iurylitre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omayphi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aboa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isire', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icast', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ehus', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eisybote', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eryrlu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bipuinara', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Revapaoyera', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yoyloby', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Colot', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Borao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iingiti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Popepaliti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Loerdiunse', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iinine', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hehi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Entiba', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Meaokdithebo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nedaico', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opeti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Exyssaltele', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Laiutueston', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oycu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Urowackteri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iluoeng', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oladraze', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Veem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roawimgurine', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erdcostalete', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eessossildid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Maexonexno', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aerei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eftsuaor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nerea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yoliand', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Akconeaom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Luil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edagipva', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acarkothgoyo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ifonassungak', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Urto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Jokeenacke', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itakesiness', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amichogult', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ewoel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Caomongi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ealavoara', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elostaenige', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Waerleicotme', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Epeypre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abtiowa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nefedwestri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asactoo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aghsesume', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itraahalxoa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ozze', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omaera', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gebiiow', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lekieoati', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ewoaicutre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eoal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Else', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Altaoho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Spoecliet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isentrenoiem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anain', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inatuawe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enludeoyio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Solaentoc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otreoril', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Zatoerois', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teyoto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ogchoa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tigetaapinus', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oerostat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uobruy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anotioa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eizis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Toului', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Noerabeit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Laeric', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ianeoud', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Adalitos', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hoinrenorore', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mogu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orathiclaa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icaav', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Utilhoumci', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iuilte', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erkveke', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Goneiel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yeangif', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gratongio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nepiro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yaijirdse', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lagrozina', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eraic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oferieder', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raiclyalip', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pecoabon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itosin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orongpuildi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gaiheupe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Unkokulo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iswoirilo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atebiha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Chiesanaxi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lyoyabonspry', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isitsheti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icdroenam', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icaonehopat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ereioesfe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ibtriat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uotree', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lieolieniz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Wolavoeyazfo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ogelarti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ihtuauutgi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Poehopbeso', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isbi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yapoao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opifruilesy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isuniddeosy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mestamia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Antponivierd', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etorbiaty', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ocmi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omleungan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ucinanois', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Haerehe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etushentlo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Urleiayat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etiatongonin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teryeyee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Loesem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yeadisin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erayohidro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oaberae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bireoldulees', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iulnikema', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ertiie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Usvyolab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uchur', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Zeage', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ordo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyeictea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uxan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dedierreuti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Xyocynade', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Awraevup', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eovisin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elatoeocan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iroiya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Irxi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onmimcenei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eththomo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Weiozspe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olaeranax', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Moeei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ibruakhaol', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elasiaer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tiesantey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icaife', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Motoyderniit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ipolernaer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aysafeu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ubiod', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aconmei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Imgaansleip', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Odociho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emehatiypi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uloeo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iehtwio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esmmucoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icusaid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iddexpi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Utaiuga', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erese', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ladoa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Prohylo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Earmo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Winoabtegrao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ivaojaiu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eoffi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ehvac', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ohoyodojesi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Igrau', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Taice', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nireolastula', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eprufusi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Catiiere', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onoruiybe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tichicu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iatxioew', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aeizriz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Myraae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Utolica', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Apciane', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Coloutatri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Proabraict', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iotudiu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nitrobeosais', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eayreano', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oustco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Diatsutak', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uniia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aityhush', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ostbiamun', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Wheolee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Saecio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eiluyiiluck', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yshfri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Caneontere', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iseryblaed', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eoareab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ongrohip', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oywegaelyle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Swioyi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oael', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asententsoqu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Udussoniio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oustada', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Telyep', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Essanlyeoc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tiroen', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ravemordar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yaismevaonti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edbointoivso', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Irianoft', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anwai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Veuenaben', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ieleiatno', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Coaprorodo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Unie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Retre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Phefaseya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aneipsemi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itoyoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Stainetesibi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rayiodflea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ackca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Owfioroi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eretnaivoil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Errieegh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Turaorenin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iueshu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aronaw', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anscry', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lyeneysena', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otoumem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Striustiul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ejaghteab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Piifmieig', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onachde', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uliarniomath', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idoxteorcete', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ibunaoen', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idaetala', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enenogre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bamo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oteyoapar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Endeanipet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecaiitspeas', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Taestciug', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ounaliep', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ytoat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oerboteit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tieyengto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uorinphae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Repli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Paepapakia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Seyrig', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inot', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emyeu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amuancheoh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Joame', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ribiyhi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Efasiam', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teiyainew', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Breypearisa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyuys', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ahilaucusti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etefexgleoy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aeten', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aecif', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cayorocioyov', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isone', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onelinifor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rinilio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oeuyaypt', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aloapnela', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hianseit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ostetiocage', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emeniuti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ooiduast', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iatyer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aweatyprol', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onpihibanglo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iteck', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reuterminga', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alow', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iinepo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Siproweire', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aesteselua', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ifmascee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ineiti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bakeclemide', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iiycpue', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eptryseinier', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Niysmtydeyom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isohandaer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neayamwaerre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iraaina', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yeesni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pirel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Miorth', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rueost', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eierwece', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aichyuseer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aepyaetiko', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Usve', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tynioktuneip', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aetsara', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Caeoabis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erktecoisri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nefreilarma', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aiatirden', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sier', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ikgoweic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Izrenediflo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leandekono', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Poamy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ertmi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omeidswodise', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abroese', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Heieconea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Loasoytiiti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orasteca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rutryeroin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oxgefiec', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Demeta', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yabbruseo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cyplo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Laatnaixle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tomeyy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omtioidya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uasecingut', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lyusro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Losaoengug', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ebrakeye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iasmont', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Wiyesa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Peer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Apigru', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cyiupinseqi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alisasak', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atoumig', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Astesapiam', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leulrinoasti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecmealheum', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eacutilkeul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oelanymuneth', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Irtflaeylyc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raitsape', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iyetipemo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Litaoaxit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oineferda', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Liinagoyao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Unyoelro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Astoypote', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Vude', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erevdo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eitial', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atatruier', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oemenaent', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Intyungre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uneoncii', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onospeaanir', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uecigerem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Naizeip', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iatymiulasp', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nioludie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uvogumi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eigabio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rulaneco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Naierxiedof', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Estereruce', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reilucotoat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iarie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Guacetierfub', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ehun', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eleaam', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Maisalimys', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ceayloikzien', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nanitalscru', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aine', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ubob', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yecaoast', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Crialcail', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Araum', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Peokomoer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Liealibiv', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etoneihod', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aptebindcete', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iofatsalaoc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hoeem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Utailarosle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Beryeshryeaz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ehymasity', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ingyoalissi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sulesto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cyej', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etiofcata', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Efeigtiandba', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Owmemase', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecetsereaib', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Heoaodea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umeduneose', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ifialreo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oaaryi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Loobesepya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ethava', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ophearetero', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roeroco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Heuayana', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Imfeyay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ateya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aykoumew', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Risiatomta', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inerouelni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Zereyeeye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Upad', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ogifa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Wapishee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ongedira', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lagiahachroe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ponila', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anineiengy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Igea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Seiep', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Paimtofeo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Setuogyc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ocsty', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Goeira', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Taawteip', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ireyesneo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ypealri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aiirkotera', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ieibwane', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Niroer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Paflocooea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Avolat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alerle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oarooli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atpaivrialo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Caiangidmequ', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ownen', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aunkocu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atyapaea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iselreeyer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isoneroayma', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yevesedoil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aplotebre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bokeishe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umieder', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uropraot', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Unitiuleeft', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otokienit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ipirartte', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Articocamno', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uheifaity', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Xeleenafi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Owot', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Naiae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cokerniuc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ogofru', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Duemphaewi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raredieroc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Unehoay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bomafe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Macaosiho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etilitrefi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iyodci', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cyeweyejatra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Echesiost', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itdeoyangie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edeoc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ystroimi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yaoniossabre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etahti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nesiilur', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tetuoeeft', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayleeramco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omsuatyp', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ismounusnanu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Liareub', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gryoyng', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iceyma', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rauyeolero', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Kajochyyoido', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tiwaonira', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ofisty', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itpoa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icaozhore', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ashnandiyg', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esseatak', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emetopti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aerameesag', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ogyonosirndo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umypuxomeen', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lati', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Seif', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Galomeattien', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oabuduethih', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lyiz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Imneniomei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Izuspi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eaoenoct', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Engmiabru', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neeneonoik', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etpoyo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bapa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esudraoig', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oyeswougis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esleyswi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erihuac', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Troyosealoy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Joatagpuil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Obtido', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ossnie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ysele', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Urosaiehy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roteapinooc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atiri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Einim', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eciirne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aaoperyow', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Peersecyrou', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aoeyoploin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ongyuribaom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teniesmaican', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Twichui', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rasarkynal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ixecatwo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uoleey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alymenub', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Avpi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omsuraurtero', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iscreontya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Maumodfinele', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eymioro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Estnoes', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lyanete', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Efetoa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uynidrisein', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cieia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Usobinareo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fanhari', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idsoolnaode', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hiecreoas', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sechanieplea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Wiesseki', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Waisef', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abtaenboe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neilkese', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sliokinate', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Earief', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Caceaumeyb', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Slitieyalore', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nedu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Awalaia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Caesemceager', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yevmoyeti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Duuinishak', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yapupfaono', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ucoicme', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tudeynibroge', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Odtewavece', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ioniaqu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Briiye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bigeinool', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ostcozey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onkaifpisho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orlegiipar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Wiitina', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eotnuefapstu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esebieong', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eotei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acaesteasy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etetjaoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Shekiatogotu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Brinepaainu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ospe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Deadiolam', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Giospoah', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aipodraronu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Trouyemo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ooiausso', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Imhuecagu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oxieck', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aclarelo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raoen', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eeabeate', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yrmnagoeson', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ieromo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ocnepiab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enmoayet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ikiicol', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yaboleici', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Zetiimeis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Diruat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otieralufa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Noriorveuti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ohmizeuberce', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arsicatelu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecusoonhiel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aihiorni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Upemcuao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ebqu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Thaumarpei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Wiplopeti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ielaod', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eruel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enyoratnean', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alouwkiotwa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eceliailla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Camia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oimbarey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orpovlaapxa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oinlioninoh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anciental', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Geuith', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Baprenaal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aoyoontor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ouveokho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Capluteai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roroea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Niugra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Wiamatift', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Xaen', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ukrisaentze', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etioseno', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erbuoewiog', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tyeyke', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esiflotwee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acuaydoscoin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enochotomoi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onpradi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Epleungay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Relowe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ydgyesco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Remeprirade', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opeoinicpri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Seigeitet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Litamo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ishom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teetego', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fleefyoni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ninya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oreinstu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omouvcaufu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Buarmuse', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Stoicne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arasit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yoachli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hiao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ougrieus', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Psocuoge', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esormeu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ewefdaelkio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Izraoin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eralcly', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erobgicitent', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Owogasere', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ciruabrioyi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Riash', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etblia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyedib', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ieiilal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayroreersto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Apotiauneth', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Doeoxmer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rauteitidi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idamasolmo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Recetei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neibul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ieicsee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Stuiuer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eiss', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lidloste', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omirieang', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eoutsi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rate', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ukuacnein', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mutoei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oadeteass', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ofoly', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etmieiro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cheti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rateicgeizo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Imorore', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tolaernenis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Loemtiirtoki', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ereaghic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orreoipne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Upsesmo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iwaonvecoo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erutebeid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eusiewa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Diomtreoip', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Buloeacre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ogonbovari', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iltaneneyu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ipiegycyni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oapiap', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eesmere', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aniciseatul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Akshia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inelciesep', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ohoi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olesynaue', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lemecryoam', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rieyigle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itreeat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Seactudatme', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oxeoayssish', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mapheebati', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pranetui', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mawoisnaraac', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asmizglacosy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Scoruastne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arephi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Praquokera', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ebepoackopdi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Naeov', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enuuottio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ausalene', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uefyopsisa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Owipa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Frainoeegent', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uoroin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tefoarjo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oawyroga', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oerlieve', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tostecoassre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iotnininosto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tybayeinat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elelye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Intyuetofre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opeate', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Soenoramer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ariaco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ochystpu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ingdagier', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Imstretheho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olero', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Haoyitilel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eolyhta', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uglirupira', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neaute', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aeoactyat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tonaoemax', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onissosmaare', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Noceih', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ciici', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ojruermwa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ishryatatlue', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yngup', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Deetlo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ereye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Kieodu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ogspa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neoumapre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acorase', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Blamam', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ongiderswipi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Paicami', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fereiclana', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ectaekchei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leleesume', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leyseamla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ehiepaom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etaewija', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ishuori', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Glasetryno', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Izorxienoit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ataar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idaniyhyui', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lougali', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ontolro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eroltufois', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ibliu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ephios', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ardnonsu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enela', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Irotiaoaf', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Laromecufie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cepeyisen', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omazesope', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neatouoib', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fryintineip', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olarthogeow', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etawitiayit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gresieid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Doydointog', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enuxacoess', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lipasabstee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ojvetreheele', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eigiluler', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yeonaleyl', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Estclyideoa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yenas', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Epiol', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ertada', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uafawtaasti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acrialipamam', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Odensi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enuindong', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Delecopro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omaatucine', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ionynetaer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lesura', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aratiro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Chearonuart', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Egoekate', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Woarpi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Almyfoyele', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Paueywilo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eceilagy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atatuoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Faloaaz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ioylorane', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tabeabrai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Scoyekdiiss', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Miemclihi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tiarneluupre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iguleawikni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iulra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aroacowhyen', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enacakintine', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emigolou', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecol', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Paesrachic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ubisin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Naicazar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aiei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ucruoylaepli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Panur', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eraom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iascaw', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Veoicien', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aootcosa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eecreplite', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roiuyya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iuhoel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enateulachy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Athy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nigemalipra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iesta', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Heafofeid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ertatiwaohe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dimeonorao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ivoceronria', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elondne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oest', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Netebinie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neenotesi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pootasoivsy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ionodyekif', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Astongonurdu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anilitdu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Miicureyar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eptrewour', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Phaoa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nemiiepifi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ikewona', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yffoi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Noeruath', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etaesherang', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Afscheypri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Detrea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isiengeerub', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Geeliongeis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eldehtim', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Beotaool', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dyinoprioni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oulay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eseeseleov', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oupidatu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orstriwamauy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esgealown', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyiamhy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omtoege', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Einauma', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yotiyaresum', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eitoiitri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eresnaetniya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Deiyachyontu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ceizroioam', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atcali', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etimytha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omsekeuei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Echediefyna', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Shuisie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emenetilike', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Foun', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atatifraya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etgobun', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icoalerle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dwineisk', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ipitigpyna', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyteiucead', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Speeche', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Veneeo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Efengoiyi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Niytdiva', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eatreraead', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eerloye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Paesicouet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idetyouo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilielpi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arsue', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asteonali', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nakeilirvu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esnaeeu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Keideat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sniyoefluiso', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Socroyeelo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pokliacmoori', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enut', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ineooro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asostaesid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ielsoiewyg', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teapous', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atindemaide', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sinsa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ediapni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lecyanagiha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sireskuyilao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elalalewpede', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ewnidwinoi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nieano', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tipsecery', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Caopatcateir', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yaufegey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Chaentakloo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tearuaol', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ceopulnees', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anmiraz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sabi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eogbu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cooctehyprit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ceoneifoic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ymedoriti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eurerifo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Niypesmeois', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Usondca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atetizereol', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Intcaou', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Weyehore', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tari', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omaufdi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Theoy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ooaieul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inenoyreect', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isrirua', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uprab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pithetiyspa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iluso', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilioerar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omcheil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yuermuabywe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Xiereeoda', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayabigeyis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Peede', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otina', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Scephicoune', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omcheoctilu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Meararta', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ycuatiar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reroitha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Issyupcae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neeitia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rotopoic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Crulymawiene', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eaneruaw', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Engeriyiom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilceuchspi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pruosi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ancaalchievu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ashoaro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Moumianno', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anliavess', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aehro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ulifaspe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Drei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Niypuisi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ebesillora', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erdoat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ehizoyel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ohorti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Toaytaene', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acoasastor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Beayenin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aathey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Seeomesve', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Owyayioa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inteonspyid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Laerwadies', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uroecie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neinmaet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ugaondoor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ucfoyaef', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aashoeha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aldseifalrae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Doemroep', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eopthodra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Clocheay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Auranju', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uuop', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uottayoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yaighe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teyialseit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ereui', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ealiasta', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dezatoensou', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Peubo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etatao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Userodeoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ionmiety', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yinmilea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Irbueti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ophanaesajra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oainolin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Utgeyle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aoil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rupano', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edaingu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oabita', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eoent', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ogova', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lielhai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Toebliomple', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neonerappoi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orini', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icnoabesa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teroil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esyoyoatan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Okaulatmibla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aphuarri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ouomon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eomlaeser', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Diliepe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iosa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eristiopo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Intmo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uneyearaim', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rareaile', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oatmi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isnies', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecitaistael', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yeomioe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Unusentinfli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cowirithimeo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Agneti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Seodu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olayoc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gepulieoh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esedeen', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Odho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ineyage', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asripea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Apalu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ufraige', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anueudcuiq', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Taiose', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Vesyaleit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ulianisufti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iyarwiep', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yitenecio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onasitii', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uoaf', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Priaeyoripi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Urisutepru', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilaoounird', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Doimrasachea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eratobe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ipolydeat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reecoyr', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilioteea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ileilonrea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Necrousnerso', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roetel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yomu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oienupu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Athire', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asezepiele', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Osiey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Miaryop', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Laonerhene', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eitfayius', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Akgaaninore', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Theoer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ceiohi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bealaupeu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opad', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rioeni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Izensi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Coenktier', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elacwoa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nogeibafaner', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Negiallniqua', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aorloeumli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ubeuncole', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roathap', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atedymcaur', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eiopplio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iossaurec', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Canulill', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teoynetebaag', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itieht', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aejo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Theoaltuared', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ento', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eolasuri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atdioco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Brayaapveat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oemam', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raovyela', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Seseabmi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Riryessyal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aamsioeo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Toiutzene', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Usstraerely', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aeifeo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onoya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iaederey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Endnamanaoy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Utaneceo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leonsoya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rins', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oihao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abpaobige', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oyeifloosm', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Siilusmolar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aochya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teissiedatne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leyourirei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tiicoemaob', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eoli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inonoani', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aassro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Laudlicha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roubaocrera', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Namiro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oasirt', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asmcymuicpe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ohao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oebriioin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Styneab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Adraiudim', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Irsuseoity', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lelaoasweol', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eserial', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nenegaelieb', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecagit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ahbautay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yyatauntpo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Failiislado', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inepiace', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Odtyeyeo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Thaitereani', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oicxiac', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itejogpuxaco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Stoata', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enismido', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ideteuns', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ukitausglo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otoanenadspe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ianer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reacinta', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Supeamiassu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Scroauptetri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edoaeduan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inrotabpyke', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oweadu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aoarcaute', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Izoilidihtre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abitegumy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Charaeulee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Noaialtopo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Udlygycoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aceokno', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aoadcoeg', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elyceoneim', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hoctaele', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ices', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aopchiseot', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ereau', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nuseivaol', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edso', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Riaeizit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bacoarat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Voneaerere', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iowy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eusonos', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iarivowa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Meostoave', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ryor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Linerer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ystamia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uasetatei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ucrabi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inagecoefu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isehun', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dorayolyt', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aenyyo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayunin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ceiuc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orapereike', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ahfoamee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lieblaadtro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lifouesour', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umdewa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyangniaodle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Brytoa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Antis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abowfiex', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oglior', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iengaoyua', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eauvua', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eethtreitre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alsiub', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iolosheireth', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ineersea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ralume', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ynseblaenli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lirao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eaceedamla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Odoxounde', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fueipas', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Miubwiiedpe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Vero', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ieeclai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hemyieowsi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Letonayc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Caegruelyid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Draeudypra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emapsentifol', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gaolaen', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yilewaot', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leawyoyiain', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teso', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ajasspi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atnilaes', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nuspeay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Plotupeiijti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aayicmeiber', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Geninigryne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Colies', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sheeae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inve', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Priangitiryo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ulle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yneanonyeny', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ifincodiop', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emiey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atimelyib', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oleetiaan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Apaatroeng', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oenemgayo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Liomi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ohhyoab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Answoliae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raroron', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cauhetyre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oneim', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Phioki', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Paiurojo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ibclaniaemi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Macrei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uaseo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yengilomena', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esheid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itachodeeryf', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Stiakekciul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raoumi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hoewho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eteulenea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Osuacfuin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isatumruyag', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aayaces', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Chyaracetve', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eexirizrile', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otierkiub', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ieangiige', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lyluapao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lidepryaster', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Titanituei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Earnies', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Meapra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teisespo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ixwadia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Doad', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yesaigchey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cuerponoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Siri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayuteecgaes', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Zeroare', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uplaeongya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yrseaae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roabreele', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acicine', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lyaosi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ioicibe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Adroatitai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gilepeae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ocisengiayga', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Coat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oetigi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sounrieer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Deer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tyifucnuni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ewraiti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ripoendy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cougistli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dotaepoeyem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Agacread', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Puorielat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cyaypaieh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ungionea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tieaeya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Maifciau', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oenailan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eqeeis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etiysmniovu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omnieama', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iscay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isengviad', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Imibruedsura', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nicoeroyui', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Deserepino', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inemte', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acahoerpra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alyomore', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eonira', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isaluf', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acboerde', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inaplanoin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ruoon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inki', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arda', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ibyumiliyp', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iaet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Euanesi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eryemeifaoh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iloapylap', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Auemoee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cazastoteblu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ahiareyre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iodlineoa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esafraeti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Geriusluese', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Agotiricniex', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iveyaatny', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eslatab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Zelsueh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omoeuade', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Thylepseuch', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eniem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tetiobripi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ehyoehdi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Metepaso', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teclaspeudew', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lazupovi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etibievo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tikaotel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ulpeacsui', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etdeytai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ciotrieyel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Igegaadule', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Toamcorehep', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rispupo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oreimeode', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cretwuac', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alyiier', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asyipotnoah', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yabbuwophuu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Smaiffaicin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Exioto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ickienid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ifepaglapmo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Caerveadre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Thaileentsu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Toeapriharho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rarep', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otayala', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Octeryp', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otasaf', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fiajiyear', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isaeyeoh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sculita', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otanewians', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emteoodsee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ainifoweri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Adarulyc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Theweehumein', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aceni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Toupiroyao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Obroac', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tethogea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ertyaop', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Piroinog', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oppesurani', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acieaamco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eruacoyp', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iuite', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onubarthuo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yyaamuoco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Creerisna', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atiyafe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yeexfyar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyopiearar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sinet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Blionethaoo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opusandeby', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ucphiarogwhe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rekefeflemi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sadii', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itiiedoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eytiathbula', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Stediaclov', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etote', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Daiapenti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ledelouray', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayretarera', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Naetrifinu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onagetie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Steyumi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oeweam', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Deissenasat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Meaengnira', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Xiocora', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Letaqu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Odxyeteerit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Doertz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilyocone', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omtyngues', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ahodanyan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cocento', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Imema', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ioamif', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enimiubeh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eaton', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inutundyop', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Untipety', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umdeoludtho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gitoistyhon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asaesto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pheroau', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ogungangaon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eldiosion', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aovep', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inheil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raonishyenya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oalite', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omliolre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uyita', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ororreiz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Troepieroow', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cefuanobeck', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Kemonaeon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Veatre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erihe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Urerneaalat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Praisointe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eoiat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iyngegn', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aegisitat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lyateflei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Choontane', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Geodxy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Insruolir', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acphuomame', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Wetalenya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fatpetrayi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Taraio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yeeresiat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Grypaetfrei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gokaoitcyorm', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esheinedege', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Jirosal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Vecitiyuke', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ohysewoeve', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eneesot', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Maromeoamp', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eiot', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oapreepuos', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ionicu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eheht', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icoriemi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Unoeassneso', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Efevepy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ermeincashal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ooflu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Meatopommire', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Moac', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pluarieyi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lale', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iowaiciok', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eragfae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iacriyi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lereprasi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iser', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atguenk', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anolar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Narefiacra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aiekel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayinyuy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oiungslail', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iamostoit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iureuo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Imhaeti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Kiyoegatmo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ipialiti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Seporayge', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edercoell', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nearpra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ohowancez', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teeyi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uapme', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acnedico', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilasupgru', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iogamteog', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ocenicpiyei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eizei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yuckleanato', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eohmaa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inetaulpei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itinriyipru', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yeicealsche', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iadhohete', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eiogackokni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pliuya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Notaraiach', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Siuhodetre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nepoami', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Adetecewe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atloni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orolteonin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lispewhiotro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oramphoitac', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Veatatilge', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ahpeepizya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acbuyenoulay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idirk', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aslaeqapal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ostonexoono', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oboe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iphuetdewe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayilyarimsu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lioleieble', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecocjoeb', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Claao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Upbogeawplo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onoi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Coatraoeln', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reicybucdro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Vieorthleto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emoyspeos', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inoetoac', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ceilifte', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ialpiuyiss', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nepriaccyei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isagetoenna', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reyeatcreeit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tadiobcaisu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Echephose', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yrtsune', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ieshul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Staczene', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Urupo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Midilol', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Putirophe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tetraci', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isici', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ofbot', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Truatesorla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oami', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reresyalit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enif', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rauleye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ifisaesste', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emererna', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oguenktie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ituinel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ensocke', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Muergleao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nesaururos', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roalme', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uouaidah', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Usleaop', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eefnoil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ischazisbao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oseveo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atumwo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Caoickue', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aytuehtha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eantdeanple', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yafu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Jolei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edchatraraow', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eruninoleri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nooss', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iogsca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aontryuseru', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inekabo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aesamta', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leseve', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gaskoninuye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oasete', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Litaye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olalero', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eaumtora', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inmaliorniey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hixenteeto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ieltubi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iendapa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aslacherza', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eodanish', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oolda', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oywarne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eoifymed', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bestaumin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dopaeye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Okoiteonli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ygno', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aireayowar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iveroustama', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uideibowa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eetostre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Empioligy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aaidsima', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sqeireeng', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raukoliacem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iroprenaviut', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acnesee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aice', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omalysre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arleu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rierairo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Unweiatu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eruntip', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Earini', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecead', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ofhihewe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eocit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anesgypaong', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Urnyieosi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neucoramule', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nounapwatei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ebaoo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iqinieo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erstinaayi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oaunoner', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onneelciro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ytepi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elevliprial', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raarcmeat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pruatchurape', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esyau', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ewesatoi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Irtheockamok', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ivadata', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aktienoje', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eala', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nuhebyoonil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Stiabzeizgae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oiatclyi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ocnorekeasye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Meiesicrico', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Crive', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Soadiat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Manoiri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Creidmoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tace', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rainao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aist', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amostue', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elaishiyu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atitzsioffo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Coyocelili', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecautiheaf', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyiru', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Styonaerde', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Averellasu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anermatuae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Undiabepe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aassheoli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alsuseer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iaum', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ioranath', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yeocka', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raulal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Newatiuidne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Assyiued', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eauwnsteay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ifnefigeape', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Donapelye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Vescrepa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Utae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilru', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eqdacateri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oeimlode', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ratrekeraub', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olad', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emtyaoulti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Agariyi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pastraicua', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eteynii', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ingsceziateq', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Vieyy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hyirei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Peotisiack', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eoengsho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Chiogoiyarni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elekerati', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bremeneemoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Obik', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itinoeng', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oerdi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Estienge', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Skaosmiverd', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pede', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Adehertecem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eores', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mearineup', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ipiedasne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raytea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Knaitulemroo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tiealscilor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oeshogteecev', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tiamsole', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ereyer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Piakesmpi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inkyadeted', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aveim', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Timeiteagg', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aehgeerina', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hiyna', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Veim', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isamiiteum', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilapinei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isoseapatec', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Este', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Speina', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teoawegipflo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tiini', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otienia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Resmiqe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yame', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uerga', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ileouysay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Palkeuog', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nopo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Griphisio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Evemuertoag', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eicose', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Epneqioipco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omicreiuc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etsarii', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inttiuackne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Soiotisfi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aeckialinda', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Geugrage', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pasacoas', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ydseidenda', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umdoaht', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Floenenaylo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ichei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cies', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iloly', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ialureim', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ardteatila', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cyayra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Intafisiaco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eaoctgegy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tyco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yilosheson', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omsiehtima', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Epzonabyt', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reuo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ileer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gadonaboiy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iessnenyeti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oyecadusas', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tenaopre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Liebaaeca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oesocava', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aikcae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Feid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Trucarointe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umefreelig', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ossnoda', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sqecatuo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onlaeiumust', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yemuio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etartityote', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eypse', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Agey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yapuordel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tespaepstene', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tionmeveone', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Licaibyesu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erornyia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oedua', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Owtirdi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uopeov', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uyppreibesri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ubxiaguut', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etsgestrivea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amedruche', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oqurouid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itismyssi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eepoiniyo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ulewiobalmi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Obusmfiotote', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eibyonsaiz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oxiheau', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Osasreuont', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yoesandey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iusto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Vueon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ulca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aneoodnena', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roneayliri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Duocat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Agfloanoh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rataysscesue', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Choetheave', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opke', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eanut', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Engrholea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aihtivuch', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Seeyoapaf', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iruleacse', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Naose', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Seypriowspe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neniufiue', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arfilico', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ismacit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Poamesepla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oeyoi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oneriloiic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esealbacka', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eimnicelo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omitalna', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Usadcioti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iebluenra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eotyhyya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eogoordete', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enarne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onryurald', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neameay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Peseat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Odet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esegendi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nelugave', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Creibapo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Loer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayorilas', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilnynenie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alilaizo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atonoey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cucaesrionlu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umpoerecliu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iiblierbi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Osteoalha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oiiape', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atsini', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aemaopinin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ineineexom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Siuziave', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roocmoic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rachocheoar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inopraea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atneimuntino', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nele', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orelu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Apoucameso', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ehyjut', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neonyiyst', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Egakeiraep', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Istestyo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ulpeikohla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fraeleent', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roawuidne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iroup', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Epunewele', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tygayastbu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omoamiahtli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Syakbretriin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isnema', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iesei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hapliaymiuis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rartano', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Coartao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ciowitoceub', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lyaclu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aroki', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Untoopentoh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Apicawreerul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oiopat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilmleaneac', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayalraefe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Riaotte', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raaensie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ytuscechaer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyorakielid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aeinaye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iabelaeh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mierdeyeai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eiasoives', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uebegatus', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ileheyu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Athegerer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Imueat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Triissisom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Buca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emaeiis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mireeyadi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Utsidenva', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amideave', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onissinsama', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neeyuse', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inochilil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fidese', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aierail', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emayno', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Endenuce', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Poangatompe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ureltaolar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iaorao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ivaeo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecce', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Evcoyit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atkeodei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ohme', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aojeoju', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Riey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Thussedenroy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Voannego', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sene', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Agle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iteaivo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pareilyardi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eoppu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Peitbea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Saetra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oyui', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cyassiertre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Zearnikieste', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Giahotasuve', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aemat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Veigegle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Curyte', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atfiraast', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Entsce', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Covepruaafri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ateniohail', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isol', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ahukiero', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yininopeub', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Baigbrebeo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yidco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Saachue', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iomi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Entlean', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Saios', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oyinot', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eroeycleni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uabiif', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elouoruro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raistasson', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Naacet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ucenidto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ozavo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tissyveo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Voayie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reraproi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oapan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iedleiph', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Noae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Treulaoatard', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oayfresiap', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itzuoleloor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Urpopni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hiebiiear', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ueom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yiatheo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uratucabynym', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Issniusti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ucinrepeba', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iackni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Igeli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asetiuctog', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neesiaysico', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ceneroa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyahith', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eoati', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oreaceon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Adigomonis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eraltoen', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ieut', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Engjeati', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enupculyrawo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ipabyoviyat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edatutnai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aonyr', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atulstoacwo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yalcheer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iataberdopu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Coli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Latruza', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Flaoyraw', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ieesoung', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uaeyeongal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aitneeram', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inuatdo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ipriedeif', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yeteedaz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sleroreli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acninphoesmi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Naoiphoghem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etuoase', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Loesag', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ynicant', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Peyoi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Spieene', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abaede', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uaracaerna', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yomaunesti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lopaoarpo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uyab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ansalyngai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Upuinbiopu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eoinrioo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uioretneto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iumya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Shofyro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Brooroteo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sisetozelu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uiurloecop', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Earnoer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ixeangat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Turupriro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aieveeyond', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Waareruleher', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Apcaerockfa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ymdipyerico', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Essaichcera', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ituri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Saagresa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ieuch', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Node', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omagve', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iflodaaon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bianeraob', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onamibone', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iotluynsniem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pepitooe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lonayomum', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Akaentianto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ipashimila', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uuoelo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uieagshul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atof', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Apuaonaba', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ulmapoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erme', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Peoriht', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oelice', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Saleickneey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acoengooad', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ibusom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aophubearid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atock', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aaornatimu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olothintai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sholaco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atipogroad', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iroay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Noesiomryre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alsqislouc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eahaulin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ryaleys', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elealo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aonami', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erraelzedeso', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iolsioang', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inoymeho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ovilpa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iwkaneismush', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Boonae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hegleoogi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umriutovma', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Imin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Moso', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etspanaad', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ulregreejab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ovayico', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Scueaovos', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ucheonayeaft', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rodirezetyu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idtoable', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uslaifta', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ridi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Apoaerro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emarmeetond', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nimo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Azubetymi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Coyl', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyefyduopag', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Odyavimigasi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cheileemspe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anobedetene', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Corair', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esots', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Varene', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iroofcify', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Einay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uabyose', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ytsedor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hoyeswagi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aneouftfi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umismturae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lepoehockeg', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ochucenotile', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eperla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eiroria', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etweeneanol', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iaatyfolpe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sleabey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Doyoymbawi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Shial', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nesterohoni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Thiape', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yedostak', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Agoocudoert', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Biceit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Biysufreoti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Imat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inoa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erchomera', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Agein', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Epuob', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eypimine', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orolcoerti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ivaolue', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otopei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Kelecephinai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oetspheayo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idetyole', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neial', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oagti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esaoyergro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Evaeorin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abiarpoag', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leeakscoaal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Odceyoiz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eonhi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aerdmeak', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dorudreesro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iesoethoras', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ortiongai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Zechiteeor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Awoutpe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bapiom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Untriani', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ihoam', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neotuyeect', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Allakrableed', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atatikud', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eniosa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Agaostaec', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ealfnozaaf', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tica', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Coisay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Owbeuimi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Efaerur', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Astproghse', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aneuriznoyu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fleryroeng', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otorenraaher', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ouscleaap', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oghraco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Utiomeplati', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sepaaitmave', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Empein', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esigse', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neasumniit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sueyoitiyi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Swemchaep', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eayerstre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nieraltruera', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aesayesuu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leyage', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Odonidea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ewhyumahati', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Utal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Keyegaop', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neciwa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Urona', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ateessacai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alabis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iotiryi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Moilirseum', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atpaikseark', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Whaodacenito', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yfuacse', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Wyhiidisiv', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yraempgyi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Achrautri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iicton', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Memai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fefeao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Meam', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abeckreic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Epneenreus', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amooestey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iveyl', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Beitishulyu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anasia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amnaproip', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Auanamp', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asayobiviap', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ugjia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ositivemi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eriele', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ezimav', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Maeayraazza', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inoaniefa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yoochayae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Maitede', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Piaiak', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itolysielo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilerite', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Druvenatepe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Loniessryaz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aereeki', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ieyayo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alyatbely', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aidocoute', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ellme', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icyoiui', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Akvio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oorlu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arioiu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amihtusfro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ieatais', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oidiptitno', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Prephazeze', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Epyendhyie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icchasimea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Xibao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Echiosi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opnenei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Assuocri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uyeo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eretofneipa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nialtmi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bidieraam', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aetoneli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ischaboass', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Igni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oangadra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Antzoiomame', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bocrituestru', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ocinisiproa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Upaokaev', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ackyo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Puetey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eytrapylio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etaes', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enveingogco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uioopu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilroahor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leteerepi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etunona', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ogeareno', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amifa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ezzaet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oyceyiah', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oeertalado', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Poraireind', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Usmnane', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ibriainaber', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Izocneno', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ofroebynea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eeongro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fapekmeho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Caeiena', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Chepaazyto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rinieszail', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abyergestio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neangie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oluoabent', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Luoypemyte', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ioltichida', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roinearreant', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Noaryo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Kita', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iealiey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Thiisaddyeye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ealiwaba', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ultyiry', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cacoichiko', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Obameso', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lies', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neutaermei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inaanu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilceob', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ipskood', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sneiszeb', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Entrionuchao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atikogostquo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ehackat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Poactco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inerpgrytelo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hoeyaol', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otoan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onetaomchiti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oleore', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilearna', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iyechociswo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eheiit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eubqu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Preueyii', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uphiyiaroq', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uatra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Apoey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aleanetra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anaibionyp', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umterooneda', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ebivgioayal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erertaeriss', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Spiatyueer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iflaupeaon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyeyoa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eieiohr', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amoilna', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Noepee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Efayezemeri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olyis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eseroial', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emiinwaibye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inoenne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Crerliul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ifonoaa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ipcuossiddy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lierneiya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mueflemi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Awnosmenrio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atohtitrio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Moglidcha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Engdrizarko', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sieayonaiz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Osaly', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lecau', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yesriiblari', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aotontu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aloplotale', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ites', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itamdee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eheat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cioney', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ateickiorne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uroyo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Incleu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tant', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Riogeoc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ismalabtiaon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Assybeay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ituere', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opaiopeba', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eloayten', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ouosmoia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omaso', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uoloweche', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cyuereto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Apinath', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Istomvemi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Araesota', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mofriaowom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onaruorciyll', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olbiliatle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Doetiodrona', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Maseoctuon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Exatbi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Biusilino', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roent', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eorsean', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Skoieblyip', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erurilernear', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayerzoel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uyaviattoly', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Xesieun', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onedi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Seyriorryi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iqepetaid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Duce', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aumegeenk', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Toveaeor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Muarsevease', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atonsyltotse', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Upickimste', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neondieiaf', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Obodaorep', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eekeogeh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ryveyiguock', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yostraolaes', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ywka', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yucwobreenti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bealcearade', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Noptuep', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aonly', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yfdeeceoske', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asielon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amejtoze', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Riedieyaiph', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Poumtaie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Torateni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Engrepyerca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Adyiasunru', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Obmiolomengi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sugeylunt', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Deicgra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etiub', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isucateceed', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Syjuetteabfo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Peroyupru', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icelry', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yaisomtri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Foig', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Derf', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umigasoeste', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oxack', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ubroegicho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Liyeioapra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilcaope', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icliismdifla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emfleoty', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uraetat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Stuanes', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Coata', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elodeat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tekeocode', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Irigafeango', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oitas', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ereseckeaby', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Niomacrede', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alyainonsej', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yaniademyen', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elyae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Equlwa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bierahpoog', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iogeowwa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ocuvaatsa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icunggeiath', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ciurein', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aeri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elayere', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ivasniquleme', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aaipon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uliaiphstiay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onockco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oceraicugh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ivaouru', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itagololy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anpre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otanlieasm', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Stixoom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asmoade', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itoidanine', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ynotinig', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Liineye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayokanli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iadsphiuor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Avra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Coreaoca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eron', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onreatcuif', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itohaet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Staod', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eckbuaon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Meaiicer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Brausta', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Marhoci', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iyiabat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itisto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ermuloreiph', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atwasiui', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Izli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eurtergela', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Giaeobirtad', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icarik', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emce', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omoetny', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Moaewibro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ieneliteex', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itemsteic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tenoehli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Noinohaig', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Conefoesatwa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ooititrove', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idetie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ofslee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ipre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mesinier', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Assanau', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ellubeopho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Naytog', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ithibnu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Riua', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ofale', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Unentearf', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rupeetplona', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Imadi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Afraasiabe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oroedidoas', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anicarcrei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Irdaryhney', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Igatev', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rirearorha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Boadatenshu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acipulip', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reeadayu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leughchiliab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ieil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Imiiotoan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lebuopan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aliay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aashimyat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ysunoung', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yailerga', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Geteetogi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uvilaghayi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leayocnoati', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Usao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opeiome', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otnaolk', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ipelaere', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idnaemroo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ephuahuicmi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Doit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Diycisiro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ierin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oruaiet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Liaheneyifis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecpoteorshi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nediesen', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elaarpney', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ostreictia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oycroieja', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tetion', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eanaldeni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leitheialni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sielmiirco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idsochiadus', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uilulatheat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ginioi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sieeiici', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alebo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otenihcoi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neagumi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Floce', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neehxi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lespeiaz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roteneryepe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asati', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iderysoro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yaemicsei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bioaewbye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pateaiomi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iesastinraut', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Taowsucet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alalroleic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ijostra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Briolna', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Strate', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Stuespauiz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omlauciusno', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yngerkire', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aebemfimesi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oxnaockgrosa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Litesslaleub', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tiaa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inilopeiro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hishsi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oniesmi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Muishaoeo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onibbugi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oquetisa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edbiyo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teiesaug', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isaeluinkto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umeheoluta', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ofalipeug', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iipiiati', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icasoiog', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eraszerase', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ronefa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Liliaodikast', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hukeiheyor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otali', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gidenimeca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Guliakmeow', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asnaaimcesi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itiste', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Moeyano', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oengizmeass', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ericonemue', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mamiycneo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ciseas', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Trifugmovear', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Riabe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iteehoyo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Antafoesme', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ouad', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tetitojusa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ekaessipu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Veanurote', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ryoit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ocyumroi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oiseab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Seayaes', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cuseahiast', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Blidautee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Plaole', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Toraoeogod', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isflemooer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Caiverle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ofism', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lyibefrano', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aracetheio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neabexni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oineliobed', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dyca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atstise', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idriite', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ioludyla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eblaerbliei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onlyacheleaj', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ifiogteile', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Diatiahwoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iabiyu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alsyfleaceng', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anitpiclie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Irpiaghcleo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oyaeilete', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esituarkuc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Estiroak', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Diisicentpi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Avyuiusla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ucemeat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ideyiordeto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Utryti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Xayoode', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tierfoonoil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oriahaor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ebindyoeo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acowrietise', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cyeangecuzop', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nekilic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lachonyan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lynecam', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilamicreit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idyaniie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enpsionade', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oaerastu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ines', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pemawopla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eoumonead', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orinore', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eomyare', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Osicousocla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erofagiei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rauliont', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Clalaockly', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Xiboise', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raoaaychi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yaroeanoyer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Niarthien', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amineom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uroiasscayf', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilchiowonear', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Moeueic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Imaskueisor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tiayuaorca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atuodpipa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Vieo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inayolitero', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iteivoand', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ouswosiast', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uiodsla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iberaagfla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aeoak', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reajetoar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tuetanxe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Speeiti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nero', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Caotpreip', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erpayedipui', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ipsleurtrao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etabpuep', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oareinei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oudecrionglo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tauasare', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyeyia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iolaro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ungcoabte', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Breaorhiur', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Veelmar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bopineondsu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Issoiheabom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icezalaexi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Efay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aizeyoma', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Breoudyit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olasie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elaceph', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Niei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Juanne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oriesoporel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eaora', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Toipiiseper', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leedtuey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alydla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ickablio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ageytioer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Satiinoce', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tiizirahi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onyldadimiog', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anseypvae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atiyouyp', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ifumonodiswa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Limobitu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eeratinare', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sauinbre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uberelee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acatlaeiu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atmiuydae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alieraly', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eatnecediav', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eorcheistoih', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dapiwralu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isentisgy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Awoiceolge', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Away', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ongi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gaeinansiov', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isanop', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Chaymeiname', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Apleehniriu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ehorreneylt', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eersaom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ihitine', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Niaabetya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etiayocu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ordiaceabet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Koessaueythe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Zeengba', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nieipelao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yarutea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atoha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yeegeluot', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilavspoesi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olohoi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fleharo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Prenyniam', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pragomehafu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inceildiaes', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ynsythoiaes', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onhanoelya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eicha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erub', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esiyaessne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uoken', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umorup', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atamdeshe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Struilopo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bici', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iiqen', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lieromespeip', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Colarisp', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Moapstre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ranui', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ateii', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aleu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sireiacan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Parauxue', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Trychibryce', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cresalxadi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Kaafleagoni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Liiaao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Seaenunsab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Egeyrsta', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erkitor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tieajenme', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sedichumo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emeizre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uastay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anleocoyp', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otnuli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Peto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Chighoho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Faotxa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Obdiinid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pusiprene', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ouluarev', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atauacal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Praseyhao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Poefru', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uscyirtne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oyathibrabid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eivestineont', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bedeeikalo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cueragim', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leadet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aidotreueb', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isreaisnoer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asegaegte', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ryliumbiraob', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acaway', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iiham', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Phaiae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Woikinias', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isipreivhai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Owaknate', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idadiat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Vecoriet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilalinory', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ihenare', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opicner', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Epuisaedi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eowpem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Adliropro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eumpeasor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ikeni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elewiemipne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ydre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Octoilime', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iptoesse', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ainflatiook', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oyiochewi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leharaoan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abaing', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enailunscuci', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ufricuog', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Istsanuesov', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyokaplasybi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayodeita', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ozfoagto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inopaonnata', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pelaieye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Paner', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Buaafulci', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oteerole', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otiol', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Deiayaon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atieho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uisleatt', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nepriahape', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eius', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oyesagmi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ogehreeyl', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sisiaooi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itriooe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emesemyke', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raynd', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ceatri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umoy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Udooeurism', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etednilies', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Osmihuolyre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ewasirer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ooalneol', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Negaclyesse', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arorimaur', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Utocepire', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anoga', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Biineion', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otoecoal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Baenaumo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Peat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rieos', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cenganla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Diasaeremi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inarmasuanli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ityayheyo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aoainmi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neimu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nosfeero', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Waaiubiic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ahoy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etolopoi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ymaorlin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aakyaluco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atatobre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ulineyinerwa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eticori', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oetrini', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hyayineamid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atdaeck', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reoiodebo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Efitomu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Loesmpeeye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Engipfa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Agwa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iodoa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orcheam', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Letibacito', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atoreciodri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Muuereze', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arfpastri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iulusk', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tienreysm', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rheleyapae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ditoladein', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ridioil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roenoverpa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arotiri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aeute', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aghbetiyeona', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Griyang', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Efeofdaugalf', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iudsieh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eanjealtoche', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Poin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Irdoinfii', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Utticati', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eduayidgo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Evaeteele', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abasu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dynaeal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ipnetah', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Astuale', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ityzelpousi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teut', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Boark', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oaraploriim', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ipzacyy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gliougfeal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eizingey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Angneuypla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ishor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Testraogod', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Engyonyetiel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tosi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oxurpaniela', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ebneumi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yaleati', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inteoomi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Attea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Utne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Telinebioe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Izamait', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eanenoyo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edkioyaot', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omorisoesm', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pareotae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Catipre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Moracef', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onanutaya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iufoonleo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oisinopladi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Agislie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atlegypheief', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eneboodti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cyouerd', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Euteestno', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tebuvospy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nedinuehbro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Toaoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ogedi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gune', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cayss', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etaesuera', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Shaoesoia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Stutrobicote', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cuomerpeur', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Debloet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acoshonileli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Odithoeota', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itbaolpa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yrmci', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Irerip', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayniafpure', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Trueckentiay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ashothespe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Irolonloi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Stiswia', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opnetior', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cheioyieer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ouno', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oynaroa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orthudi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Poreoler', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ethse', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iech', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yaengtea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Wais', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Owaracircone', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esieiyi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eachi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isaneffouik', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eitonceal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oseeat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eroipeder', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aotabo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eosmucees', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ureghba', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Osinowale', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyibdehemu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ullomatevo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Taueysosca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lode', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ewhecydaado', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oveseaki', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arewa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Veeplacobuo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Kayeaor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inyienta', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neweyerca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omoceomis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cerispatko', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Owatreilties', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aertywa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ugallio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Choensayaun', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Renoandaeru', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Loai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yionleosto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ylumarof', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sheub', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rasipearet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Imvoidyvea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orcoemre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Griohy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teasda', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uscledeom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onfusididauc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raethmaspaat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olyayatya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arseio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orpecenani', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Clisimec', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omesangse', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anenilbaybo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyeintal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ockwesila', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yablete', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Irneuit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ahizmoiamb', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ompstie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omneeid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itsaosa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Apausuroyst', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etfen', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iurmaamve', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Poafla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayaconilar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yachna', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onilliwaaber', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ortastbyiscu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Noat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Epho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tioalobe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tiabad', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enlitietiku', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uanalya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Agan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Geoasech', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idoidpereer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sine', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Irge', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lipoisy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inisit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Riduleviagri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sceurya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oped', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayeaetho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ovisulesa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eayulians', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Wainegoeor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dyeki', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eopbroem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nakeap', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Okgooycocoi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Udboyssisone', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esmie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enomxiciu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Suiwsuegank', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aesecospum', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Diyeaii', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Osveolkea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Caabaltoi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anefleerag', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elomneetepu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ityal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ulonocagdayo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oproeni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oedanveieck', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Entaisneon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Utipivieth', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eliurt', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eskiitbou', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ompeidniba', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ereyo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eistotybe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eadie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cierboiosu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eltuebhabro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ingeese', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onufliat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tasuaesxi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Usmeussbru', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ubleifiasm', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eneniotepa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oneriysqu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oneou', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ocloim', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opatayuugent', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oanil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilbituloi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edleoty', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otoa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inank', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eaizpaa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teviaveoif', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acidosopaoc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roeuphe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oveernebie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aeyestewouch', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otyupysezo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erlizeey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Doildaelitex', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eresh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yaeafoopom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inelag', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gali', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Usiho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erswiede', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atrapoiclo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aswa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Meoerab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isniit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pleheoyl', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Unupsaulyaer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icoeacnion', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isimpdeko', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Stiuaselite', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oniinera', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arduatoctoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arpropakaspi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Buiinopga', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ihyae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Loartyule', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Entawi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Puiletaloan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Malenotola', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ivriet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Brou', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aseolelea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Geeaody', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inte', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aawifdee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ocoesko', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Unforofueg', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onere', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lenitruoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eweteepiil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enosesioy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arredaadje', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Netueldun', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elorazbu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aeconat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ogyseagsy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fiyneanne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anebaoplu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Egbenitiaton', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Deete', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Illar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iudifere', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Utflias', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omig', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Toaimsi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cureucoae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anyo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itoyayeduna', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etotoa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atreuttaos', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yseuoes', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Euneic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rhaord', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ifinone', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Istyexopnoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Seinglecu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iumer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ifahubprayi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etteuengdi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ipemtra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ubro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Paroesa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ontethecial', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inepenoyf', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amefom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Beyancoei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onoeki', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Coseot', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eingophati', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Taeuhoac', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Obluonkoni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pluidireyo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ifsiodeno', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lyuleu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oparbi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Osolthyonusm', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eissod', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tialpuskaele', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olakiorze', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reun', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilga', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etuaeini', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Duoengonri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inaeoral', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Riola', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayece', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ratretare', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hemycoiztyas', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eplaeul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uluykinkyne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ryesiap', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onatnelubimi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Xyketiup', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tihueilete', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eachraku', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Noubcieirdi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raustucohae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Meagom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tyoyocnaciri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Poobuis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Doic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Romiegegii', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esabocingry', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayiispengri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iliftarmjaon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ealyonoyp', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yitonu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hitrioad', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iudemeori', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iekfoegi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sihi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Utmeleal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sezeidifla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idtychiat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilberonaete', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hoirano', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itorusteoh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Latuowatmear', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ocoivarsceey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eferetoa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oplaoitma', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Adyeavioty', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icniayheiz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emisahyome', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Locoato', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Imodathi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eralyub', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nisoaidasthu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esoluovier', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uiagle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oreuit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Siengunassat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edecyele', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otielany', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aboimitiscri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ocapoh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Suoimoltroar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rezerene', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Runoeye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neefla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gioc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gihai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ycoqu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Skere', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hechafraut', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Riafioec', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Irul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Peye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Diteiemek', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uinyo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Araioiv', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icata', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onirxei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Faitaneiye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teiamara', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eaodya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ikosmuc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ileucooip', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fuelogese', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Araifrera', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Maasty', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ishonete', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Foyaopalaca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onkbi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Insliende', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Egyivsidaku', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ycraboayo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oussethre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icraad', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uatesseyupo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rieeiss', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ekauteeom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tuvoiba', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyenmuittoar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Vecloeypro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eshinueade', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Beoshaabomo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Odoisuo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isryatpena', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etotelaogri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Myte', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alayootra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eodionsu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uldytra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Patuartea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ivgli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyoncadiey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inneit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eayidade', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neba', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eroalpaense', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yieye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iglazo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eericei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyisibaei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Deataltna', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uaaleta', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atarin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rulesean', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ampileydgli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tiatreci', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Naruneui', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Issmauromit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Urflenotee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abfri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opleaviney', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Secytei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Toip', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ycceos', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emaronea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yaecaknereni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Kiiah', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dieniasiu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esosuiole', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Poralierco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ermueomis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neaseabetit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cayeyde', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gyon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Niroo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eliwhuiteit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gevaefe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oterne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onyanecala', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Kraogsu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Osacoemkele', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onegenar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ehtyipe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Irealey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Daalpero', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abgroirona', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alyialheed', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itstaacoamo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eoiem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iciumti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Taiidmeaco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aneckism', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ceedon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ogabuc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inyioortuo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dasanaaurt', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iadau', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aiogear', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yiaflaynt', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Obuazovoun', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Urnagossolyo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Plimouponsme', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enassatyap', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uboshupe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ouconure', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leaec', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ewniv', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ogethzaiziq', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tiuthece', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oicgefepene', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecscegigauma', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Octeigbiina', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Poehslatyne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecsaieabsi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Broneov', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omcieoc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atoera', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isetidioras', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Maaextera', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rokocunk', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Michierteaga', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amaryler', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tice', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Preor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icnefleo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Whoagoyaoscy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umsionitzeoh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esphiericy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enymbe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aesenkcayl', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rele', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Engesraoghin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Noakceerbe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Racu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Olalnegmeat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ciropui', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eodalunnaan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecropavaeme', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aotetut', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Otsu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayfe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ynuboi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acokypeam', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omstesuoem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amkeov', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iselidei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Unroismbybie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tococ', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Beoisyoel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Estiby', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Spoleiemad', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ezeani', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leuade', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Noolneamol', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ibneo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iere', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ikeuntareno', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alizylahtge', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ierer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ieyecepee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aerudotite', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alehugay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onoabstan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilinidety', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Coraauldeyct', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ereaeshurd', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cicieyi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ambaoy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyaosuna', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Astacuamip', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iielonten', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rieye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Spapeloeleve', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oriowadtri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anspa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uisosoiy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Scaatioliiq', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Episcro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ymulimnodeac', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Takadwei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Giniusne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Chana', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neaule', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eryaehereon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enacei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eriliedicil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oeakica', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eutofazce', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eonreevqu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aedfeule', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esaionux', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cearwhuseoc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asteriko', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oineo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teriwiend', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eneroncutgla', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Treswosi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aspe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Urayea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ostaycoidi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Miwiust', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ismeref', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reneidam', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iblomaedawa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omerbathae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onifaki', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Umborenexe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dayaiz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aevick', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecaexcara', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ahothesre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eckylat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leec', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oinigesclo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gicro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayulug', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cuimtirean', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eglovinti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Veyi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etoenti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reiaau', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Doehusuep', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oiaisoet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abuecostet', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inaacene', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omurangoyne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atebdeogokic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Topsyeyaentu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Boyeoogeon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aronuoi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rechiroarc', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Styeaom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yagene', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Estetopo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yitacquum', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Imyocmine', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Adog', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amnoeyo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ioolme', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ajeyecou', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Zioerteahcho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Riulakerene', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eylo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eohoitif', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bastoeresoak', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hinahati', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inayes', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eesserti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ahesteau', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bamoageyefe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esiiuba', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lacahois', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Male', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iiag', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atcocane', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leivo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Preuamaric', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Antiltzeiti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Useetend', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Woengte', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neate', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cacha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ywiceavge', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iecow', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Waediyrmiki', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Liauec', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esicteoo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ertitefii', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyquargewoco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Diletanidre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erisainaeld', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raefoa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eniskeatun', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Zaohoboase', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Intluyedo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Demie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aroaen', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atyiss', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Avyeierveos', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eubcui', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yaydloti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aonaw', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lueen', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ekun', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Apraomnee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ulaalenre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teugeey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idatayeog', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mydigytwoi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elinmiesmao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lidiorali', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ueloa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ampay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ojlicreino', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Coeanuial', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etleon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ehedealai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ephistroscha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mieqiang', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ietgoizpeyo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dicho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oleor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tepiaont', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Awcreal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Chielai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Verdylios', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Insoeis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ercanoa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etidudmeis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Adomoquge', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ueiosi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lanetiawob', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inmuimove', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enssaoynil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yoaetauas', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Coelduo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gyedaen', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Cyera', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayad', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Lioryei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alini', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Taeemta', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rilyuuyac', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oleoendo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eatid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ighbatrayea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iamioni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Youcoif', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reumiimby', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oturi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iginesnoarly', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sphoethby', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Blyaoeft', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iirsane', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ugaeyplaast', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ecosiwkis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Xacyul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mattio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ketuelni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ingtepe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orciliesell', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eeteay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Miime', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Gluyoiymiac', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ebriawa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Astemlieyys', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aeilieclu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leaimiproo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isuconi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Einentesowed', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Echub', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Andrioeral', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Igeachoorshe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ameos', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omste', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ogashat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tineoctipe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erboieti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iuonroraor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hualayeyti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Egewimny', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eraoqdiama', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayeloraco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iosisii', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onlasuni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arulonria', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yecoapec', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eraussab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Dateangaledi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Entoalutocde', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Peomairkfrai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Saneikma', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Liil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oaypo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ineotcaqute', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edesco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Othe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anyrizee', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Peebfu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Laya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eneveon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uitung', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oiveopoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Woeata', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atisertas', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oatryni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eola', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Avleafah', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uokiul', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Osuodepoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Fytaibsiea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uafumayni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Empie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Intateropsa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enyoco', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Noiibraalo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yaeu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ogluis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uigh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mageinglooy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ater', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icsairimi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Keinesheirze', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ustreboesut', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neboyautnite', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elnoalaoyni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arsifrein', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ripopooss', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ycea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ucalstrilye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Euib', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ocse', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Istreomunat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leyletochne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icflaiqy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yoaug', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Coahtier', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oituapara', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Entspaidid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Riagyaoick', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ethpreoru', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayilyker', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oayiperei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idura', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ebuf', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esusleerdi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ikem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tenicodi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Coyliroat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erkeoay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iylireob', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Achostritra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etidoteper', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Noameasa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Waryedazneod', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aion', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arwitiso', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iseopialin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Autoatple', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Irewi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eneaerast', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aaceuant', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Izueychenma', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sityeseao', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esecyelo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enkwotoen', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Unanutsueh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omire', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teichyisoct', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Puneloisi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reke', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iteona', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yorpoesbrege', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isly', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uinluedpe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ubenkplein', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icraeyngulta', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Idathiivestu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yipielape', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bemiecei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Evogiyp', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enulabreyaca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aizboelow', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eraoawe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Agapu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ybtinoudug', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iineo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onurien', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Stianesni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esneem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Opoesho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icstrohiwaa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anetoya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etuchveheom', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rofroiulela', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ataawa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Meopowaingke', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Nacuiseropa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Stieuab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iyde', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ossifieake', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aeashce', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aywinio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tepayad', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iyhechosni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teaolodiff', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sinolu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ioyu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atotyt', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icyesenermi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Enypeneat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Athegedloe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Seech', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Listuble', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sioy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aarsqieapi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oeoneh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Buaroetiton', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Liyckda', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ateickoofu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Drinainer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Myepaura', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ontaire', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aporsoidti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ioico', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Essatart', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eyey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icastieldon', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teaioel', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Increagreo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Maeriegh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oliokeig', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aptugeohu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aptoledi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acesdeavre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aonugeickche', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Faema', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isspuiy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Reomtraeno', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ugnelona', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ienacanec', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Istrotynuot', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Liesputeay', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asceemeunton', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eretlaasti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tiaof', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Joivrebatuli', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Netooba', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ywonoeanne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rosleraren', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Utneubleonra', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ahamio', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yoanmeci', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eneyacma', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etarinoyae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ceratylylie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iitara', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aosylgroroni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uroixosteip', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tinu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uditoi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ynboshainil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aidty', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alindisa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tyumanti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neoredirota', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eapleori', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eruboiglu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Raoxtietre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icibechea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ehroy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ehisuochusi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Poipigu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Adaree', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uala', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Euifroat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onerscaafo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esibewe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Boecyaga', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Alneaeso', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anussleeme', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Odosifyboa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acugubaelid', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eoneabrea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Igeroner', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Edoeiaes', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Keriyo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atreatgi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Myno', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hochuimut', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilaotifoeht', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Usinadowooz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onabu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emibaur', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aeoeck', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ialnalicheo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amonieni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yvael', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Chureodi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Bioraynioi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ianoedor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Naiacemi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ihengprelo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leealat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Sana', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Moelybae', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Icedecdeer', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ixorodeyene', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ofisate', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esonganoou', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Elakocuzaip', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ictyerowro', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Beabili', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ilvele', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Diyainraor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Leayella', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Seamanagile', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amcaadyg', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inteucsceu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Naungisyanu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Unteatieti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Setyle', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Mochoitab', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Veat', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aniumstai', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erapmuechte', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Niey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oonadal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onantisley', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Izbuatere', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yrackalti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Pesy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iian', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rifiieckut', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Teti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Uiga', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ugugtescef', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hacaeshuecma', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Liinlotoes', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aretiesca', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Etaogogucsy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Obya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ileejetus', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ivali', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amaanrayrre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Izerdiess', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Wigeahraso', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anomwineu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Esilactroce', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ohiscialeiss', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aoniesacep', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayeviapneil', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acera', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Newoyclicisi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Phoucke', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iplaonagraes', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oiyaryoi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Theisyadieok', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Echo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ogioxoerig', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Goeiares', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neicvi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aver', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ehmeoye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Deusaseck', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aosomain', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Indi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Boaumissag', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ieran', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Emnoal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tiuatchy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Irpamung', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Neboneani', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Niaanabo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yseremar', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Onalsamimyni', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tilephoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Myaiimo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eafori', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Brooaniiv', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ynsagihitaup', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yoingenareso', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Napcaoan', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eitetynt', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Assap', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aleilemdoe', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aoliesti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aiguhete', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Inyaslachy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ernosu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Noetsata', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eisufubresi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Abreameedy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Coayumantioh', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Kialatpo', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Estnyineahun', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ogopocutho', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Anleile', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Siedaogu', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ovifdarytie', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Doylirayurwa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ypayleceth', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Assisyomiue', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Epoya', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tielengsi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Avomoeit', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayteiey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ibiaonte', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Upiduyasne', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rapues', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Amniattici', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erypleow', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Iewnoemes', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isaduntome', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Tenii', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Antiateomis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oatiinoa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ogatha', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eaneine', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Atialiod', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Yaeseaye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Meeye', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Caeromfabien', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acessaswero', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Allenitgeey', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Exlitomi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Triisitnea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Omastneis', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ibeto', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Owond', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Isceluaic', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oyveda', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hiestaleonor', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Molenoal', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Veaa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Odosowreyad', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ereeullyin', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ikdyity', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Rabriosax', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eroiap', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Oassluti', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Asapuling', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Estroiagre', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Roiwi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Buatolem', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ulhemeyees', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Itiemi', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erchayper', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Estga', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Griaila', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Zepeeyoeri', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Hanaeiim', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Arpatado', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Aelinplucy', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ooertyge', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ayiestnei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Acyniilpa', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Estosumeaz', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Orda', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Erufgaiza', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Eofyhoea', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Trarecyeko', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0),
+(NULL, 'Ciei', 0xFF, 0xFFFF, 0xFFFF, 0xFFFFFFFF, 0, 0);
+UNLOCK TABLES;
\ No newline at end of file
diff --git a/sql/TrinityCore-Patches/LordPsyanBots/characters_ai_playerbot_custom_strategy.sql b/sql/TrinityCore-Patches/LordPsyanBots/characters_ai_playerbot_custom_strategy.sql
new file mode 100644
index 0000000..6ff474a
--- /dev/null
+++ b/sql/TrinityCore-Patches/LordPsyanBots/characters_ai_playerbot_custom_strategy.sql
@@ -0,0 +1,19 @@
+DROP TABLE IF EXISTS `ai_playerbot_custom_strategy`;
+
+CREATE TABLE `ai_playerbot_custom_strategy` (
+  `id` bigint(20) NOT NULL AUTO_INCREMENT,
+  `name` varchar(255) NOT NULL,
+  `action_line` varchar(1024) NOT NULL,
+  PRIMARY KEY (`id`),
+  KEY `name` (`name`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+-- say
+
+INSERT INTO `ai_playerbot_custom_strategy` VALUES
+(NULL, 'say', 'critical health>say::critical health|99'),
+(NULL, 'say', 'low health>say::low health|99'),
+(NULL, 'say', 'low mana>say::low mana|99'),
+(NULL, 'say', 'tank aoe>say::taunt|99'),
+(NULL, 'say', 'medium aoe>say::aoe|99'),
+(NULL, 'say', 'can loot>say::loot|99');
\ No newline at end of file
diff --git a/sql/TrinityCore-Patches/LordPsyanBots/characters_ai_playerbot_speech.sql b/sql/TrinityCore-Patches/LordPsyanBots/characters_ai_playerbot_speech.sql
new file mode 100644
index 0000000..4742d64
--- /dev/null
+++ b/sql/TrinityCore-Patches/LordPsyanBots/characters_ai_playerbot_speech.sql
@@ -0,0 +1,241 @@
+DROP TABLE IF EXISTS `ai_playerbot_speech`;
+
+CREATE TABLE `ai_playerbot_speech` (
+  `id` bigint(20) NOT NULL AUTO_INCREMENT,
+  `name` varchar(255) NOT NULL,
+  `text` varchar(1024) NOT NULL,
+  `type` varchar(10) NOT NULL,
+  PRIMARY KEY (`id`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+DROP TABLE IF EXISTS `ai_playerbot_speech_probability`;
+
+CREATE TABLE `ai_playerbot_speech_probability` (
+  `id` bigint(20) NOT NULL AUTO_INCREMENT,
+  `name` varchar(255) NOT NULL,
+  `probability` bigint(20) NOT NULL,
+  PRIMARY KEY (`id`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+INSERT INTO `ai_playerbot_speech_probability` VALUES
+(NULL, 'taunt', 10),
+(NULL, 'aoe', 20),
+(NULL, 'loot', 5);
+
+INSERT INTO `ai_playerbot_speech` VALUES
+(NULL, 'taunt', 'I have puppies under my armor!', 'say'),
+(NULL, 'taunt', 'Bite me, <target>!', 'say'),
+(NULL, 'taunt', 'Hey <target>! Guess what your mom said last night!', 'say'),
+(NULL, 'taunt', '<target>, you''re so ugly you couldn''t score in a monkey whorehouse with a bag of bananas!', 'say'),
+(NULL, 'taunt', 'Shut up <target>, you''ll never be the man your mother is!!', 'say'),
+(NULL, 'taunt', 'Your mother was a hampster and your father smelt of elderberries!!!!', 'say'),
+(NULL, 'taunt', 'I don''t want to talk to you no more, you empty headed animal food trough wiper!!!', 'say'),
+(NULL, 'taunt', 'I fart in your general direction!!!', 'say'),
+(NULL, 'taunt', 'Go and boil your bottom, you son of a silly person!!!', 'say'),
+(NULL, 'taunt', 'What are you going to do <target>, bleed on me? HAVE AT YOU!', 'say'),
+(NULL, 'taunt', 'M-O-O-N! That spells aggro!', 'say'),
+(NULL, 'taunt', 'You''re about as useful as a one-legged man in an ass kicking contest.', 'say'),
+(NULL, 'taunt', 'Hey <target>! Stop hitting on them, they''re not your type. They aren''t inflatable.', 'say'),
+(NULL, 'taunt', '<target> you''re so far outta your league, you''re playing a different sport.', 'say'),
+(NULL, 'taunt', 'You made a big mistake today <target>, you got out of bed.', 'say'),
+(NULL, 'taunt', 'I wanna try turning into a horse, but I need help. I''ll be the front, you be yourself.', 'say'),
+(NULL, 'taunt', 'Can I borrow your face for a few days? My ass is going on holiday....', 'say'),
+(NULL, 'taunt', 'I''d like to give you a going away present... First you do your part.', 'say'),
+(NULL, 'taunt', 'Before you came along we were hungry, Now we''re just fed up.', 'say'),
+(NULL, 'taunt', 'I like you. People say I have no taste, but I like you.', 'say'),
+(NULL, 'taunt', 'I think you have an inferiority complex, but that''s okay, it''s justified.', 'say'),
+(NULL, 'taunt', 'Hence rotten thing! Or I shall shake thy bones out of thy garments.', 'say'),
+(NULL, 'taunt', 'I can''t believe I''m wasting my time with you!', 'say'),
+(NULL, 'taunt', 'I love it when someone insults me, it means I don''t have to be nice anymore.', 'say'),
+(NULL, 'taunt', 'Thou leathern-jerkin, crystal-button, knot-pated, agatering, puke-stocking, caddis-garter, smooth-tongue, Spanish pouch!', 'say'),
+(NULL, 'taunt', 'Thou qualling bat-fowling malt-worm!', 'say'),
+(NULL, 'taunt', 'Thou art truely an idol of idiot-worshippers!', 'say'),
+(NULL, 'taunt', 'Thou misbegotten knotty-pated wagtail!', 'say'),
+(NULL, 'taunt', 'Thou whoreson mandrake, thou art fitter to be worn in my cap than to wait at my heels!', 'say'),
+(NULL, 'taunt', 'You! You scullion! You rampallian! You fustilarian! I''ll tickle your catastrophe!', 'say'),
+(NULL, 'taunt', 'Oh <target>! Thou infectious ill-nurtured flax-wench!', 'say'),
+(NULL, 'taunt', 'We leak in your chimney, <target>!', 'say'),
+(NULL, 'taunt', 'Oh thou bootless fen-sucked canker-blossom!', 'say'),
+(NULL, 'taunt', 'Were I like thee I''d throw away myself!', 'say'),
+(NULL, 'taunt', 'O teach me <target>, how I should forget to think!', 'say'),
+(NULL, 'taunt', 'Truly thou art damned, like an ill-roasted egg, all on one side!', 'say'),
+(NULL, 'taunt', 'You starvelling, you eel-skin, you dried neat''s-tongue, you bull''s-pizzle, you stock-fish- O for breath to utter what is like thee!! -you tailor''s-yard, you sheath, you bow-case, you vile standing tuck!', 'say'),
+(NULL, 'taunt', 'Fie! Drop thee into the rotten mouth of Death!', 'say'),
+(NULL, 'taunt', '<target>, you are a fishmonger!', 'say'),
+(NULL, 'taunt', 'I shall live to knock thy brains out!', 'say'),
+(NULL, 'taunt', 'Most shallow are you, <target>!! Thou art worms-meat in respect of a good piece of flesh, indeed!!', 'say'),
+(NULL, 'taunt', 'Vile wretch! O <target>, thou odiferous hell-hated pignut!', 'say'),
+(NULL, 'taunt', '<target>! Thy kiss is as comfortless as frozen water to a starved snake!', 'say'),
+(NULL, 'taunt', 'I scorn you, scurvy companion. What, you poor, base, rascally, cheating, lack-linen mate! Away, you moldy rogue, away!', 'say'),
+(NULL, 'taunt', 'Out of my sight! Thou dost infect my eyes <target>!', 'say'),
+(NULL, 'taunt', 'PLAY TIME!!!!', 'say'),
+(NULL, 'taunt', 'None shall pass!', 'say'),
+(NULL, 'taunt', 'We''re under attack! A vast, ye swabs! Repel the invaders!', 'say'),
+(NULL, 'taunt', 'None may challenge the Brotherhood!', 'say'),
+(NULL, 'taunt', 'Foolsss...Kill the one in the dress!', 'say'),
+(NULL, 'taunt', 'I''ll feed your soul to Hakkar himself! ', 'say'),
+(NULL, 'taunt', 'Pride heralds the end of your world! Come, mortals! Face the wrath of the <randomfaction>!', 'say'),
+(NULL, 'taunt', 'All my plans have led to this!', 'say'),
+(NULL, 'taunt', 'Ahh! More lambs to the slaughter!', 'say'),
+(NULL, 'taunt', 'Another day, another glorious battle!', 'say'),
+(NULL, 'taunt', 'So, business... or pleasure?', 'say'),
+(NULL, 'taunt', 'You are not prepared!', 'say'),
+(NULL, 'taunt', 'The <randomfaction>''s final conquest has begun! Once again the subjugation of this world is within our grasp. Let none survive! ', 'say'),
+(NULL, 'taunt', 'Your death will be a painful one. ', 'say'),
+(NULL, 'taunt', 'Cry for mercy! Your meaningless lives will soon be forfeit. ', 'say'),
+(NULL, 'taunt', 'Abandon all hope! The <randomfaction> has returned to finish what was begun so many years ago. This time there will be no escape! ', 'say'),
+(NULL, 'taunt', 'Alert! You are marked for Extermination! ', 'say'),
+(NULL, 'taunt', 'The <subzone> is for guests only...', 'say'),
+(NULL, 'taunt', 'Ha ha ha! You are hopelessly outmatched!', 'say'),
+(NULL, 'taunt', 'I will crush your delusions of grandeur! ', 'say'),
+(NULL, 'taunt', 'Forgive me, for you are about to lose the game.', 'say'),
+(NULL, 'taunt', 'Struggling only makes it worse.', 'say'),
+(NULL, 'taunt', 'Vermin! Leeches! Take my blood and choke on it!', 'say'),
+(NULL, 'taunt', 'Not again... NOT AGAIN!', 'say'),
+(NULL, 'taunt', 'My blood will be the end of you!', 'say'),
+(NULL, 'taunt', 'Good, now you fight me!', 'say'),
+(NULL, 'taunt', 'Get da move on, guards! It be killin'' time!', 'say'),
+(NULL, 'taunt', 'Don''t be delayin'' your fate. Come to me now. I make your sacrifice quick.', 'say'),
+(NULL, 'taunt', 'You be dead soon enough!', 'say'),
+(NULL, 'taunt', 'Mua-ha-ha!', 'say'),
+(NULL, 'taunt', 'I be da predator! You da prey...', 'say'),
+(NULL, 'taunt', 'You gonna leave in pieces!', 'say'),
+(NULL, 'taunt', 'Death comes. Will your conscience be clear? ', 'say'),
+(NULL, 'taunt', 'Your behavior will not be tolerated.', 'say'),
+(NULL, 'taunt', 'The Menagerie is for guests only.', 'say'),
+(NULL, 'taunt', 'Hmm, unannounced visitors, Preparations must be made... ', 'say'),
+(NULL, 'taunt', 'Hostile entities detected. Threat assessment protocol active. Primary target engaged. Time minus thirty seconds to re-evaluation.', 'say'),
+(NULL, 'taunt', 'New toys? For me? I promise I won''t break them this time!', 'say'),
+(NULL, 'taunt', 'I''m ready to play!', 'say'),
+(NULL, 'taunt', 'Shhh... it will all be over soon.', 'say'),
+(NULL, 'taunt', 'Aaaaaughibbrgubugbugrguburgle!', 'say'),
+(NULL, 'taunt', 'RwlRwlRwlRwl!', 'say'),
+(NULL, 'taunt', 'You too, shall serve!', 'say'),
+(NULL, 'taunt', 'Tell me... tell me everything!  Naughty secrets! I''ll rip the secrets from your flesh!', 'say'),
+(NULL, 'taunt', 'Prepare yourselves, the bells have tolled! Shelter your weak, your young and your old! Each of you shall pay the final sum! Cry for mercy; the reckoning has come!', 'say'),
+(NULL, 'taunt', 'Where in Bonzo''s brass buttons am I?', 'say'),
+(NULL, 'taunt', 'I can bear it no longer! Goblin King! Goblin King! Wherever you may be! Take this <target> far away from me!', 'say'),
+(NULL, 'taunt', 'You have thirteen hours in which to solve the labyrinth, before your baby brother becomes one of us... forever.', 'say'),
+(NULL, 'taunt', 'So, the <subzone> is a piece of cake, is it? Well, let''s see how you deal with this little slice... ', 'say'),
+(NULL, 'taunt', 'Back off, I''ll take you on, headstrong to take on anyone, I know that you are wrong, and this is not where you belong', 'say'),
+(NULL, 'taunt', 'Show me whatcha got!', 'say'),
+(NULL, 'taunt', 'To the death!', 'say'),
+(NULL, 'taunt', 'Twin blade action, for a clean close shave every time.', 'say'),
+(NULL, 'taunt', 'Bring it on!', 'say'),
+(NULL, 'taunt', 'You''re goin'' down!', 'say'),
+(NULL, 'taunt', 'Stabby stab stab!', 'say'),
+(NULL, 'taunt', 'Let''s get this over quick; time is mana.', 'say'),
+(NULL, 'taunt', 'I do not think you realise the gravity of your situation.', 'say'),
+(NULL, 'taunt', 'I will bring honor to my family and my kingdom!', 'say'),
+(NULL, 'taunt', 'Light, give me strength!', 'say'),
+(NULL, 'taunt', 'My church is the field of battle - time to worship...', 'say'),
+(NULL, 'taunt', 'I hold you in contempt...', 'say'),
+(NULL, 'taunt', 'Face the hammer of justice!', 'say'),
+(NULL, 'taunt', 'Prove your worth in the test of arms under the Light!', 'say'),
+(NULL, 'taunt', 'All must fall before the might and right of my cause, you shall be next!', 'say'),
+(NULL, 'taunt', 'Prepare to die!', 'say'),
+(NULL, 'taunt', 'The beast with me is nothing compared to the beast within...', 'say'),
+(NULL, 'taunt', 'Witness the firepower of this fully armed huntsman!', 'say');
+
+
+INSERT INTO `ai_playerbot_speech` VALUES
+(NULL, 'critical health', 'Heal me! Quick!', 'yell'),
+(NULL, 'critical health', 'Almost dead! Heal me!', 'yell'),
+(NULL, 'critical health', 'Help! Heal me!', 'yell'),
+(NULL, 'critical health', 'Somebody! Heal me!', 'yell'),
+(NULL, 'critical health', 'Heal! Heal! Heal!', 'yell'),
+(NULL, 'critical health', 'I am dying! Heal! Aaaaarhg!', 'yell'),
+(NULL, 'critical health', 'Heal me!', 'yell'),
+(NULL, 'critical health', 'I will die. I will die. I will die. Heal!', 'yell'),
+(NULL, 'critical health', 'Healers, where are you? I am dying!', 'yell'),
+(NULL, 'critical health', 'Oh the pain. Heal me quick!', 'yell');
+
+
+INSERT INTO `ai_playerbot_speech` VALUES
+(NULL, 'low health', 'Need heal', 'say'),
+(NULL, 'low health', 'Low health', 'say'),
+(NULL, 'low health', 'Drop a heal. Please.', 'say'),
+(NULL, 'low health', 'Could somebody drop a heal on me?', 'say'),
+(NULL, 'low health', 'Hey! Better heal me now than rez later', 'say'),
+(NULL, 'low health', 'I am sorry. Need another heal', 'say'),
+(NULL, 'low health', 'Damn mobs. Heal me please', 'say'),
+(NULL, 'low health', 'One more hit and I am done for. Heal please', 'say'),
+(NULL, 'low health', 'Are there any healers?', 'say'),
+(NULL, 'low health', 'Why do they always punch me in the face? Need heal', 'say'),
+(NULL, 'low health', 'Can anybody heal me a bit?', 'say');
+
+
+INSERT INTO `ai_playerbot_speech` VALUES
+(NULL, 'low mana', 'OOM', 'say'),
+(NULL, 'low mana', 'I am out of mana', 'say'),
+(NULL, 'low mana', 'Damn I wasted all my mana on this', 'say'),
+(NULL, 'low mana', 'You should wait until I drink or regenerate my mana', 'say'),
+(NULL, 'low mana', 'Low mana', 'say'),
+(NULL, 'low mana', 'No mana. Again?', 'say'),
+(NULL, 'low mana', 'Low mana. Wanna drink', 'say'),
+(NULL, 'low mana', 'Do we have a vending machine? Out of mana again', 'say'),
+(NULL, 'low mana', 'My mana is history', 'say'),
+(NULL, 'low mana', 'I''d get some drinks next time. Out of mana', 'say'),
+(NULL, 'low mana', 'Where is my mana?', 'say');
+
+INSERT INTO `ai_playerbot_speech` VALUES
+(NULL, 'aoe', 'Oh god!', 'say'),
+(NULL, 'aoe', 'I am scared', 'say'),
+(NULL, 'aoe', 'We are done for', 'say'),
+(NULL, 'aoe', 'This is over', 'say'),
+(NULL, 'aoe', 'This ends now', 'say'),
+(NULL, 'aoe', 'Could somebody cast blizzard or something?', 'say'),
+(NULL, 'aoe', 'Damn. The tank aggroed all the mobs around', 'say'),
+(NULL, 'aoe', 'We gonna die. We gonna die. We gonna die.', 'say'),
+(NULL, 'aoe', 'Whoa! So many toys to play with', 'say'),
+(NULL, 'aoe', 'I gonna kill them all!', 'say'),
+(NULL, 'aoe', 'If the tank dies we are history', 'say'),
+(NULL, 'aoe', 'Aaaaaargh!', 'yell'),
+(NULL, 'aoe', 'LEEEEERROOOYYYYYYYYYYYY JENNKINNNSSSSSS!!!!!!!', 'yell'),
+(NULL, 'aoe', 'Right. What do we have in AOE?', 'say'),
+(NULL, 'aoe', 'This gets interesting', 'say'),
+(NULL, 'aoe', 'Cool. Get them in one place for a good flamestrike', 'say'),
+(NULL, 'aoe', 'Kill! Kill! Kill!', 'say'),
+(NULL, 'aoe', 'I think my pants are wet', 'say'),
+(NULL, 'aoe', 'We are history', 'say'),
+(NULL, 'aoe', 'I hope healers are ready. Leeeeroy!', 'say'),
+(NULL, 'aoe', 'I hope they won''t come for me', 'say'),
+(NULL, 'aoe', 'Oh no. I can''t see at this slaugther', 'say');
+
+INSERT INTO `ai_playerbot_speech` VALUES
+(NULL, 'loot', 'I hope there will be some money', 'say'),
+(NULL, 'loot', 'Loot! Loot!', 'say'),
+(NULL, 'loot', 'My precious', 'say'),
+(NULL, 'loot', 'I hope there is a shiny epic item waiting for me there', 'say'),
+(NULL, 'loot', 'I have deep pockets and bags', 'say'),
+(NULL, 'loot', 'All is mine!', 'say'),
+(NULL, 'loot', 'Hope no gray shit today', 'say'),
+(NULL, 'loot', 'This loot is MINE!', 'say'),
+(NULL, 'loot', 'Looting is disgusting but I need money', 'say'),
+(NULL, 'loot', 'Gold!', 'say'),
+(NULL, 'loot', 'OK. Let''s see what they''ve got', 'say'),
+(NULL, 'loot', 'Do not worry. I will loot eveything', 'say'),
+(NULL, 'loot', 'I am loot ninja', 'say'),
+(NULL, 'loot', 'Do I neeed to roll?', 'say'),
+(NULL, 'loot', 'Somebody explain me, where they did put all this stuff?', 'say'),
+(NULL, 'loot', 'No, I won''t loot gray shit', 'say'),
+(NULL, 'loot', 'I''m first. I''m first. I''m first.', 'say'),
+(NULL, 'loot', 'Give me your money!', 'say'),
+(NULL, 'loot', 'My pockets are empty, I need to fill them', 'say'),
+(NULL, 'loot', 'I''ve got a new bag for this', 'say'),
+(NULL, 'loot', 'I hope I won''t aggro anybody while looting', 'say'),
+(NULL, 'loot', 'Please don''t watch. I am looting', 'say'),
+(NULL, 'loot', 'Ha! You won''t get any piece of it!', 'say'),
+(NULL, 'loot', 'Looting is cool', 'say'),
+(NULL, 'loot', 'I like new gear', 'say'),
+(NULL, 'loot', 'I''l quit if there is nothing valuable again', 'say'),
+(NULL, 'loot', 'I hope it is be a pretty ring', 'say'),
+(NULL, 'loot', 'I''l rip the loot from you', 'say'),
+(NULL, 'loot', 'Everybody stay off. I''m going to loot', 'say'),
+(NULL, 'loot', 'Sweet loot', 'say'),
+(NULL, 'loot', 'The Roll God! Give me an epic today', 'say'),
+(NULL, 'loot', 'Please give me new toys', 'say'),
+(NULL, 'loot', 'I hope they carry tasties', 'say'),
+(NULL, 'loot', 'The gold is mine. I''l leave everyting, I promise', 'say'),
+(NULL, 'loot', 'No, I can''t resist', 'say'),
+(NULL, 'loot', 'I want more!', 'say');
diff --git a/sql/TrinityCore-Patches/LordPsyanBots/world_lordpsyanbots.sql b/sql/TrinityCore-Patches/LordPsyanBots/world_lordpsyanbots.sql
new file mode 100644
index 0000000..6a85210
--- /dev/null
+++ b/sql/TrinityCore-Patches/LordPsyanBots/world_lordpsyanbots.sql
@@ -0,0 +1,170 @@
+-- GENERAL --
+
+SET @BOT_START = 70001;
+SET @BOT_END   = 71000;
+
+delete from `creature_template` where entry between @BOT_START and @BOT_END;
+INSERT INTO `creature_template` (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `dmgschool`, `BaseAttackTime`, `RangeAttackTime`, `BaseVariance`, `RangeVariance`, `unit_class`, `unit_flags`, `unit_flags2`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `HoverHeight`, `HealthModifier`, `ManaModifier`, `ArmorModifier`, `DamageModifier`, `ExperienceModifier`, `RacialLeader`, `movementId`, `RegenHealth`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `VerifiedBuild`) VALUES (70001,0,0,0,0,0,5001,0,5001,0,'Khelden','Mage Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3800,2000,1,1,8,0,16384,0,0,0,0,8,1,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'mage_bot',-1),(70002,0,0,0,0,0,1294,0,1294,0,'Zaldimar','Mage Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3800,2000,1,1,8,0,16384,0,0,0,0,8,1,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'mage_bot',-1),(70003,0,0,0,0,0,1484,0,1484,0,'Maginor','Mage Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3800,2000,1,1,8,0,16384,0,0,0,0,8,1,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'mage_bot',-1),(70004,0,0,0,0,0,3344,0,3344,0,'Anetta','Priest Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3600,2000,1,1,8,0,16384,0,0,0,0,5,1,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'priest_bot',-1),(70005,0,0,0,0,0,1495,0,1495,0,'Laurena','Priest Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3600,2000,1,1,8,0,16384,0,0,0,0,5,1,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'priest_bot',-1),(70006,0,0,0,0,0,1295,0,1295,0,'Josetta','Priest Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3600,2000,1,1,8,0,16384,0,0,0,0,5,1,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'priest_bot',-1),(70007,0,0,0,0,0,3345,0,3345,0,'Drusilla','Warlock Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3500,2000,1,1,8,0,16384,0,0,0,0,9,1,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warlock_bot',-1),(70008,0,0,0,0,0,1930,0,1930,0,'Alamar','Warlock Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3500,2000,1,1,8,0,16384,0,0,0,0,9,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warlock_bot',-1),(70009,0,0,0,0,0,1469,0,1469,0,'Demisette','Warlock Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3500,2000,1,1,8,0,16384,0,0,0,0,9,1,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warlock_bot',-1),(70010,0,0,0,0,0,12749,0,12749,0,'Nalesette','Hunter Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2800,2000,1,1,2,0,16384,0,0,3,0,3,4,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'hunter_bot',-1),(70011,0,0,0,0,0,3401,0,3401,0,'Branstock','Priest Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3600,2000,1,1,8,0,16384,0,0,0,0,5,3,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'priest_bot',-1),(70012,0,0,0,0,0,3395,0,3395,0,'Thorgas','Hunter Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2800,2000,1,1,2,0,16384,0,0,0,0,3,3,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'hunter_bot',-1),(70013,0,0,0,0,0,3343,0,3343,0,'Llane','Warrior Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3400,2000,1,1,1,0,16384,0,0,0,0,1,1,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warrior_bot',-1),(70014,0,0,0,0,0,3399,0,3399,0,'Thran','Warrior Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3400,2000,1,1,1,0,16384,0,0,0,0,1,3,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warrior_bot',-1),(70015,0,0,0,0,0,1300,0,1300,0,'Lyria','Warrior Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3400,2000,1,1,1,0,16384,0,0,0,0,1,1,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warrior_bot',-1),(70016,0,0,0,0,0,3351,0,3351,0,'Jorik','Rogue Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,1600,2000,1,1,4,0,16384,0,0,0,0,4,1,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'rogue_bot',-1),(70017,0,0,0,0,0,3407,0,3407,0,'Solm','Rogue Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,1600,2000,1,1,4,0,16384,0,0,0,0,4,3,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'rogue_bot',-1),(70018,0,0,0,0,0,1297,0,1297,0,'Keryn','Rogue Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,1600,2000,1,1,4,0,16384,0,0,0,0,4,1,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'rogue_bot',-1),(70019,0,0,0,0,0,1507,0,1507,0,'Osborne','Rogue Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,1600,2000,1,1,4,0,16384,0,0,0,0,4,1,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'rogue_bot',-1),(70020,0,0,0,0,0,3346,0,3346,0,'Sammuel','Paladin Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2300,2000,1,1,2,0,16384,0,0,0,0,2,1,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'paladin_bot',-1),(70021,0,0,0,0,0,3393,0,3393,0,'Bob','Paladin Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2300,2000,1,1,2,0,16384,0,0,0,0,2,3,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'paladin_bot',-1),(70022,0,0,0,0,0,1299,0,1299,0,'Wilhelm','Paladin Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2300,2000,1,1,2,0,16384,0,0,0,0,2,1,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'paladin_bot',-1),(70023,0,0,0,0,0,1499,0,1499,0,'Brisombre','Paladin Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2300,2000,1,1,2,0,16384,0,0,0,0,2,1,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'paladin_bot',-1),(70024,0,0,0,0,0,10216,0,10216,0,'Marry','Mage Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3800,2000,1,1,8,0,16384,0,0,0,0,8,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'mage_bot',-1),(70025,0,0,0,0,0,4552,0,4552,0,'Haromm','Shaman Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2600,2000,1,1,2,0,16384,0,0,0,0,7,2,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'shaman_bot',-1),(70026,0,0,0,0,0,4567,0,4567,0,'Kartosh','Warlock Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3500,2000,1,1,8,0,16384,0,0,0,0,9,2,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warlock_bot',-1),(70027,0,0,0,0,0,3429,0,3429,0,'MaxanAnvol','Priest Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3600,2000,1,1,8,0,16384,0,0,0,0,5,3,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'priest_bot',-1),(70028,0,0,0,0,0,10215,0,10215,0,'Magis','Mage Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3800,2000,1,1,8,0,16384,0,0,0,0,8,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'mage_bot',-1),(70029,0,0,0,0,0,3431,0,3431,0,'GranVivehache','Warrior Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3400,2000,1,1,1,0,16384,0,0,0,0,1,3,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warrior_bot',-1),(70030,0,0,0,0,0,1622,0,1622,0,'Azar','Paladin Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2300,2000,1,1,2,0,16384,0,0,0,0,2,3,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'paladin_bot',-1),(70031,0,0,0,0,0,3436,0,3436,0,'Hogral','Rogue Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,1600,2000,1,1,4,0,16384,0,0,0,0,4,3,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'rogue_bot',-1),(70032,0,0,0,0,0,3053,0,3053,0,'Kelstrum','Warrior Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3400,2000,1,1,1,0,16384,0,0,0,0,1,3,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warrior_bot',-1),(70033,0,0,0,0,0,1578,0,1578,0,'Dannal','Warrior Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3400,2000,1,1,1,0,16384,0,0,0,0,1,5,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warrior_bot',-1),(70034,0,0,0,0,0,1579,0,1579,0,'SombreDuesten','Priest Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3600,2000,1,1,8,0,16384,0,0,0,0,5,5,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'priest_bot',-1),(70035,0,0,0,0,0,1592,0,1592,0,'Isabella','Mage Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3800,2000,1,1,8,0,16384,0,0,0,0,8,5,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'mage_bot',-1),(70036,0,0,0,0,0,1581,0,1581,0,'Maximillion','Warlock Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3500,2000,1,1,8,0,16384,0,0,0,0,9,5,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warlock_bot',-1),(70037,0,0,0,0,0,1604,0,1604,0,'Rupert','Warlock Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3500,2000,1,1,8,0,16384,0,0,0,0,9,5,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warlock_bot',-1),(70038,0,0,0,0,0,1600,0,1600,0,'Cain','Mage Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3800,2000,1,1,8,0,16384,0,0,0,0,8,5,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'mage_bot',-1),(70039,0,0,0,0,0,1602,0,1602,0,'SombreBeryl','Priest Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3600,2000,1,1,8,0,16384,0,0,0,0,5,5,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'priest_bot',-1),(70041,0,0,0,0,0,10548,0,10548,0,'Milituus','Mage Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3800,2000,1,1,8,0,16384,0,0,0,0,8,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'mage_bot',-1),(70042,0,0,0,0,0,2810,0,2810,0,'Lexington','Mage Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3800,2000,1,1,8,0,16384,0,0,0,0,8,5,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'mage_bot',-1),(70043,0,0,0,0,0,2123,0,2123,0,'Siln','Shaman Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2600,2000,1,1,2,0,16384,0,0,0,0,7,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'shaman_bot',-1),(70044,0,0,0,0,0,19598,0,19598,0,'Umbrua','Shaman Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2600,2000,1,1,2,0,16384,0,0,0,0,7,11,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'shaman_bot',-1),(70045,0,0,0,0,0,2102,0,2102,0,'Tigor','Shaman Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2600,2000,1,1,2,0,16384,0,0,0,0,7,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'shaman_bot',-1),(70046,0,0,0,0,0,2082,0,2082,0,'Beram','Shaman Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2600,2000,1,1,2,0,16384,0,0,0,0,7,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'shaman_bot',-1),(70047,0,0,0,0,0,2106,0,2106,0,'Turak','Druid Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2200,2000,1,1,2,0,16384,0,0,0,0,11,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'druid_bot',-1),(70048,0,0,0,0,0,2121,0,2121,0,'Sheal','Druid Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2200,2000,1,1,2,0,16384,0,0,0,0,11,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'druid_bot',-1),(70049,0,0,0,0,0,2115,0,2115,0,'Kym','Druid Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2200,2000,1,1,2,0,16384,0,0,0,0,11,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'druid_bot',-1),(70050,0,0,0,0,0,2112,0,2112,0,'Kary','Hunter Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2800,2000,1,1,2,0,16384,0,0,0,0,3,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'hunter_bot',-1),(70051,0,0,0,0,0,2087,0,2087,0,'Holt','Hunter Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2800,2000,1,1,2,0,16384,0,0,0,0,3,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'hunter_bot',-1),(70052,0,0,0,0,0,2105,0,2105,0,'Urek','Hunter Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2800,2000,1,1,2,0,16384,0,0,0,0,3,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'hunter_bot',-1),(70053,0,0,0,0,0,2103,0,2103,0,'Torm','Warrior Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3400,2000,1,1,1,0,16384,0,0,0,0,1,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warrior_bot',-1),(70054,0,0,0,0,0,2096,0,2096,0,'Sark','Warrior Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3400,2000,1,1,1,0,16384,0,0,0,0,1,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warrior_bot',-1),(70055,0,0,0,0,0,17211,0,17211,0,'Kerra','Warrior Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3400,2000,1,1,1,0,16384,0,0,0,0,1,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warrior_bot',-1),(70056,0,0,0,0,0,2139,0,2139,0,'Miles Welsh','Priest Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3600,2000,1,1,8,0,16384,0,0,0,0,5,5,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'priest_bot',-1),(70057,0,0,0,0,0,2138,0,2138,0,'Malakai','Priest Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3600,2000,1,1,8,0,16384,0,0,0,0,5,5,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'priest_bot',-1),(70058,0,0,0,0,0,2137,0,2137,0,'Cobb','Priest Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3600,2000,1,1,8,0,16384,0,0,0,0,5,5,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'priest_bot',-1),(70059,0,0,0,0,0,2134,0,2134,0,'Shymm','Mage Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3800,2000,1,1,8,0,16384,0,0,0,0,8,5,7,1,0,0,0,0,0,0,0,0,0,0,143,145,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'mage_bot',-1),(70060,0,0,0,0,0,6058,0,6058,0,'Ursyn','Mage Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3800,2000,1,1,8,0,16384,0,0,0,0,8,5,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'mage_bot',-1),(70061,0,0,0,0,0,2135,0,2135,0,'Thurston','Mage Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3800,2000,1,1,8,0,16384,0,0,0,0,8,5,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'mage_bot',-1),(70062,0,0,0,0,0,3793,0,3793,0,'Harutt','Warrior Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3400,2000,1,1,1,0,16384,0,0,0,0,1,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warrior_bot',-1),(70063,0,0,0,0,0,3819,0,3819,0,'Gart','Druid Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2200,2000,1,1,2,0,16384,0,0,0,0,11,6,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'druid_bot',-1),(70064,0,0,0,0,0,3810,0,3810,0,'Lanka','Hunter Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2800,2000,1,1,2,0,16384,0,0,0,0,3,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'hunter_bot',-1),(70065,0,0,0,0,0,10180,0,10180,0,'Meela','Shaman Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2600,2000,1,1,2,0,16384,0,0,0,0,7,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'shaman_bot',-1),(70066,0,0,0,0,0,3794,0,3794,0,'Krang','Warrior Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3400,2000,1,1,1,0,16384,0,0,0,0,1,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warrior_bot',-1),(70067,0,0,0,0,0,10734,0,10734,0,'Gennia','Druid Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2200,2000,1,1,2,0,16384,0,0,0,0,11,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'druid_bot',-1),(70068,0,0,0,0,0,3811,0,3811,0,'Yaw','Hunter Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2800,2000,1,1,2,0,16384,0,0,0,0,3,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'hunter_bot',-1),(70069,0,0,0,0,0,3816,0,3816,0,'Narm','Shaman Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2600,2000,1,1,2,0,16384,0,0,0,0,7,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'shaman_bot',-1),(70070,0,0,0,0,0,1880,0,1880,0,'Frang','Warrior Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3400,2000,1,1,1,0,16384,0,0,0,0,1,2,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warrior_bot',-1),(70071,0,0,0,0,0,1882,0,1882,0,'Jenshan','Hunter Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2800,2000,1,1,2,0,16384,0,0,0,0,3,8,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'hunter_bot',-1),(70072,0,0,0,0,0,1884,0,1884,0,'Nartok','Warlock Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3500,2000,1,1,8,0,16384,0,0,0,0,9,2,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warlock_bot',-1),(70073,0,0,0,0,0,1878,0,1878,0,'Shikrik','Shaman Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2600,2000,1,1,2,0,16384,0,0,0,0,7,2,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'shaman_bot',-1),(70074,0,0,0,0,0,3743,0,3743,0,'Tarshaw','Warrior Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3400,2000,1,1,1,0,16384,0,0,0,0,1,2,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warrior_bot',-1),(70075,0,0,0,0,0,3744,0,3744,0,'Thotar','Hunter Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2800,2000,1,1,2,0,16384,0,0,0,0,3,2,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'hunter_bot',-1),(70076,0,0,0,0,0,3745,0,3745,0,'Dhugru','Warlock Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3500,2000,1,1,8,0,16384,0,0,0,0,9,2,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warlock_bot',-1),(70077,0,0,0,0,0,3746,0,3746,0,'Swart','Shaman Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2600,2000,1,1,2,0,16384,0,0,0,0,7,2,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'shaman_bot',-1),(70078,0,0,0,0,0,1324,0,1324,0,'Groldar','Warlock Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3500,2000,1,1,8,0,16384,0,0,0,0,9,2,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warlock_bot',-1),(70079,0,0,0,0,0,1325,0,1325,0,'Mirket','Warlock Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3500,2000,1,1,8,0,16384,0,0,0,0,9,2,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warlock_bot',-1),(70080,0,0,0,0,0,1326,0,1326,0,'Zevrost','Warlock Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3500,2000,1,1,8,0,16384,0,0,0,0,9,2,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warlock_bot',-1),(70081,0,0,0,0,0,1360,0,1360,0,'Kardris','Shaman Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2600,2000,1,1,2,0,16384,0,0,0,0,7,2,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'shaman_bot',-1),(70082,0,0,0,0,0,1373,0,1373,0,'Ormak','Hunter Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2800,2000,1,1,2,0,16384,0,0,0,0,3,2,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'hunter_bot',-1),(70083,0,0,0,0,0,1374,0,1374,0,'Grezz','Warrior Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3400,2000,1,1,1,0,16384,0,0,0,0,1,2,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warrior_bot',-1),(70084,0,0,0,0,0,1375,0,1375,0,'Sorek','Warrior Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3400,2000,1,1,1,0,16384,0,0,0,0,1,2,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warrior_bot',-1),(70085,0,0,0,0,0,4231,0,4231,0,'Siantsu','Shaman Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2600,2000,1,1,2,0,16384,0,0,0,0,7,2,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'shaman_bot',-1),(70086,0,0,0,0,0,4239,0,4239,0,'Xorjuul','Hunter Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2800,2000,1,1,2,0,16384,0,0,0,0,3,2,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'hunter_bot',-1),(70087,0,0,0,0,0,4241,0,4241,0,'Siandur','Hunter Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2800,2000,1,1,2,0,16384,0,0,0,0,3,2,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'hunter_bot',-1),(70088,0,0,0,0,0,4242,0,4242,0,'Zelmak','Warrior Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3400,2000,1,1,1,0,16384,0,0,0,0,1,2,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warrior_bot',-1),(70089,0,0,0,0,0,7915,0,7915,0,'ClaudeErksine','Hunter Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2800,2000,1,1,2,0,16384,0,0,3,0,3,3,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'hunter_bot',-1),(70090,0,0,0,0,0,1721,0,1721,0,'Alyissia','Warrior Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3400,2000,1,1,1,0,16384,0,0,0,0,1,4,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warrior_bot',-1),(70091,0,0,0,0,0,1725,0,1725,0,'FrahunMurmombre','Rogue Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,1600,2000,1,1,4,0,16384,0,0,0,0,4,4,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'rogue_bot',-1),(70092,0,0,0,0,0,1733,0,1733,0,'Shanda','Priest Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3600,2000,1,1,8,0,16384,0,0,0,0,5,4,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'priest_bot',-1),(70093,0,0,0,0,0,1732,0,1732,0,'Mardant','Druid Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2200,2000,1,1,2,0,16384,0,0,0,0,11,4,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'druid_bot',-1),(70094,0,0,0,0,0,1707,0,1707,0,'Kyra','Warrior Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3400,2000,1,1,1,0,16384,0,0,0,0,1,4,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warrior_bot',-1),(70095,0,0,0,0,0,1704,0,1704,0,'Jannok','Rogue Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,1600,2000,1,1,4,0,16384,0,0,0,0,4,4,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'rogue_bot',-1),(70096,0,0,0,0,0,1708,0,1708,0,'Laurna','Priest Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3600,2000,1,1,8,0,16384,0,0,0,0,5,4,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'priest_bot',-1),(70097,0,0,0,0,0,1706,0,1706,0,'Kal','Druid Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2200,2000,1,1,2,0,16384,0,0,0,0,11,4,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'druid_bot',-1),(70098,0,0,0,0,0,4296,0,4296,0,'Harruk','Hunter Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2800,2000,1,1,2,0,16384,0,0,3,0,3,2,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'hunter_bot',-1),(70099,0,0,0,0,0,4299,0,4299,0,'Reban','Hunter bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2800,2000,1,1,2,0,16384,0,0,3,0,3,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'hunter_bot',-1),(70100,0,0,0,0,0,4304,0,4304,0,'Bolyun','Hunter Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2800,2000,1,1,2,0,16384,0,0,3,0,3,4,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'hunter_bot',-1),(70101,0,0,0,0,0,1897,0,1897,0,'Taijin','Priest Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3600,2000,1,1,8,0,16384,0,0,0,0,5,8,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'priest_bot',-1),(70102,0,0,0,0,0,4068,0,4068,0,'Kenjai','Priest Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3600,2000,1,1,8,0,16384,0,0,0,0,5,8,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'priest_bot',-1),(70103,0,0,0,0,0,2066,0,2066,0,'Danlaar','Hunter Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2800,2000,1,1,2,0,16384,0,0,0,0,3,4,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'hunter_bot',-1),(70104,0,0,0,0,0,2196,0,2196,0,'Ariasta','Warrior Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3400,2000,1,1,1,0,16384,0,0,0,0,1,4,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warrior_bot',-1),(70105,0,0,0,0,0,2198,0,2198,0,'Sildanair','Warrior Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3400,2000,1,1,1,0,16384,0,0,0,0,1,4,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warrior_bot',-1),(70106,0,0,0,0,0,2200,0,2200,0,'Astarii','Priest Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3600,2000,1,1,8,0,16384,0,0,0,0,5,4,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'priest_bot',-1),(70107,0,0,0,0,0,2201,0,2201,0,'Jandria','Priest Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3600,2000,1,1,8,0,16384,0,0,0,0,5,4,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'priest_bot',-1),(70108,0,0,0,0,0,2202,0,2202,0,'Lariia','Priest Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3600,2000,1,1,8,0,16384,0,0,0,0,5,4,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'priest_bot',-1),(70109,0,0,0,0,0,2231,0,2231,0,'Syurna','Rogue Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,1600,2000,1,1,4,0,16384,0,0,0,0,4,4,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'rogue_bot',-1),(70110,0,0,0,0,0,7669,0,7669,0,'Elissa','Mage Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3800,2000,1,1,8,0,16384,0,0,0,0,8,1,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'mage_bot',-1),(70111,0,0,0,0,0,2252,0,2252,0,'Erion','Rogue Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,1600,2000,1,1,4,0,16384,0,0,0,0,4,4,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'rogue_bot',-1),(70112,0,0,0,0,0,2243,0,2243,0,'Anishar','Rogue Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,1600,2000,1,1,4,0,16384,0,0,0,0,4,4,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'rogue_bot',-1),(70113,0,0,0,0,0,2250,0,2250,0,'Denatharion','Druid Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2200,2000,1,1,2,0,16384,0,0,0,0,11,4,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'druid_bot',-1),(70114,0,0,0,0,0,2255,0,2255,0,'Fylerian','Druid Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2200,2000,1,1,2,0,16384,0,0,0,0,11,4,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'druid_bot',-1),(70115,0,0,0,0,0,2416,0,2416,0,'Caelyb','Hunter Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2800,2000,1,1,2,0,16384,0,0,3,0,3,4,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'hunter_bot',-1),(70116,0,0,0,0,0,2675,0,2675,0,'Kaal','Warlock Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3500,2000,1,1,8,0,16384,0,0,0,0,9,5,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warlock_bot',-1),(70117,0,0,0,0,0,16800,0,16800,0,'Lana','Warlock Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3500,2000,1,1,8,0,16384,0,0,0,0,9,5,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warlock_bot',-1),(70118,0,0,0,0,0,2646,0,2646,0,'Richard','Warlock Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3500,2000,1,1,8,0,16384,0,0,0,0,9,5,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warlock_bot',-1),(70119,0,0,0,0,0,10214,0,10214,0,'Kaelystia','Mage Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3800,2000,1,1,8,0,16384,0,0,0,0,8,5,6,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'mage_bot',-1),(70120,0,0,0,0,0,2644,0,2644,0,'Pierce','Mage Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3800,2000,1,1,8,0,16384,0,0,0,0,8,5,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'mage_bot',-1),(70121,0,0,0,0,0,2657,0,2657,0,'Anastasia','Mage Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3800,2000,1,1,8,0,16384,0,0,0,0,8,5,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'mage_bot',-1),(70122,0,0,0,0,0,2620,0,2620,0,'Chris','Warrior Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3400,2000,1,1,1,0,16384,0,0,0,0,1,5,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warrior_bot',-1),(70123,0,0,0,0,0,2658,0,2658,0,'Angela','Warrior Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3400,2000,1,1,1,0,16384,0,0,0,0,1,5,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warrior_bot',-1),(70124,0,0,0,0,0,2614,0,2614,0,'Baltus','Warrior Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3400,2000,1,1,1,0,16384,0,0,0,0,1,5,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warrior_bot',-1),(70125,0,0,0,0,0,3054,0,3054,0,'Kelv','Warrior Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3400,2000,1,1,1,0,16384,0,0,0,0,1,3,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warrior_bot',-1),(70126,0,0,0,0,0,3055,0,3055,0,'Bilban','Warrior Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3400,2000,1,1,1,0,16384,0,0,0,0,1,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warrior_bot',-1),(70127,0,0,0,0,0,3056,0,3056,0,'Daera','Hunter Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2800,2000,1,1,2,0,16384,0,0,0,0,3,3,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'hunter_bot',-1),(70128,0,0,0,0,0,3072,0,3072,0,'Olmin','Hunter Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2800,2000,1,1,2,0,16384,0,0,0,0,3,3,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'hunter_bot',-1),(70129,0,0,0,0,0,3073,0,3073,0,'Regnus','Hunter Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2800,2000,1,1,2,0,16384,0,0,0,0,3,3,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'hunter_bot',-1),(70130,0,0,0,0,0,3086,0,3086,0,'Theodrus','Priest Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3600,2000,1,1,8,0,16384,0,0,0,0,5,3,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'priest_bot',-1),(70131,0,0,0,0,0,3066,0,3066,0,'Braenna','Priest Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3600,2000,1,1,8,0,16384,0,0,0,0,5,3,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'priest_bot',-1),(70132,0,0,0,0,0,3085,0,3085,0,'Toldren','Priest Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3600,2000,1,1,8,0,16384,0,0,0,0,5,3,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'priest_bot',-1),(70134,0,0,0,0,0,3108,0,3108,0,'Bink','Mage Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3800,2000,1,1,8,0,16384,0,0,0,0,8,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'mage_bot',-1),(70135,0,0,0,0,0,10214,0,10214,0,'Juli','Mage Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3800,2000,1,1,8,0,16384,0,0,0,0,8,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'mage_bot',-1),(70136,0,0,0,0,0,3109,0,3109,0,'Nittegousse','Mage Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3800,2000,1,1,8,0,16384,0,0,0,0,8,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'mage_bot',-1),(70137,0,0,0,0,0,3089,0,3089,0,'Valgar','Paladin Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2300,2000,1,1,2,0,16384,0,0,0,0,2,3,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'paladin_bot',-1),(70138,0,0,0,0,0,3088,0,3088,0,'Beldruk','Paladin Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2300,2000,1,1,2,0,16384,0,0,0,0,2,3,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'paladin_bot',-1),(70139,0,0,0,0,0,3087,0,3087,0,'Brandur','Paladin Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2300,2000,1,1,2,0,16384,0,0,0,0,2,3,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'paladin_bot',-1),(70140,0,0,0,0,0,3101,0,3101,0,'Hulfdan','Rogue Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,1600,2000,1,1,4,0,16384,0,0,0,0,4,3,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'rogue_bot',-1),(70141,0,0,0,0,0,3100,0,3100,0,'Ormyr','Rogue Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,1600,2000,1,1,4,0,16384,0,0,0,0,4,3,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'rogue_bot',-1),(70142,0,0,0,0,0,3113,0,3113,0,'Phenwick','Rogue Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,1600,2000,1,1,4,0,16384,0,0,0,0,4,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'rogue_bot',-1),(70143,0,0,0,0,0,3115,0,3115,0,'Coeurdechardon','Warlock Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3500,2000,1,1,8,0,16384,0,0,0,0,9,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warlock_bot',-1),(70144,0,0,0,0,0,3116,0,3116,0,'Eglantin','Warlock Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3500,2000,1,1,8,0,16384,0,0,0,0,9,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warlock_bot',-1),(70145,0,0,0,0,0,3122,0,3122,0,'Alexander','Warlock Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3500,2000,1,1,8,0,16384,0,0,0,0,9,1,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warlock_bot',-1),(70146,0,0,0,0,0,3280,0,3280,0,'Wu','Warrior Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3400,2000,1,1,1,0,16384,0,0,0,0,1,1,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warrior_bot',-1),(70147,0,0,0,0,0,3287,0,3287,0,'Ilsa','Warrior Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3400,2000,1,1,1,0,16384,0,0,0,0,1,1,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warrior_bot',-1),(70148,0,0,0,0,0,3283,0,3283,0,'Joshua','Priest Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3600,2000,1,1,8,0,16384,0,0,0,0,5,1,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'priest_bot',-1),(70149,0,0,0,0,0,3284,0,3284,0,'Arthur','Paladin Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2300,2000,1,1,2,0,16384,0,0,0,0,2,1,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'paladin_bot',-1),(70150,0,0,0,0,0,3289,0,3289,0,'Katherine','Paladin Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2300,2000,1,1,2,0,16384,0,0,0,0,2,1,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'paladin_bot',-1),(70151,0,0,0,0,0,3291,0,3291,0,'Deline','Warlock Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3500,2000,1,1,8,0,16384,0,0,0,0,9,1,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warlock_bot',-1),(70152,0,0,0,0,0,3286,0,3286,0,'Sandahl','Warlock Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3500,2000,1,1,8,0,16384,0,0,0,0,9,1,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warlock_bot',-1),(70153,0,0,0,0,0,3292,0,3292,0,'Jennea','Mage Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3800,2000,1,1,8,0,16384,0,0,0,0,8,1,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'mage_bot',-1),(70154,0,0,0,0,0,19803,0,19803,0,'Elsharin','Mage Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3800,2000,1,1,8,0,16384,0,0,0,0,8,1,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'mage_bot',-1),(70155,0,0,0,0,0,3299,0,3299,0,'Kaerbrus','Hunter Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2800,2000,1,1,2,0,16384,0,0,0,0,3,4,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'hunter_bot',-1),(70156,0,0,0,0,0,3300,0,3300,0,'Sheldras','Druid Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2200,2000,1,1,2,0,16384,0,0,0,0,11,4,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'druid_bot',-1),(70157,0,0,0,0,0,3301,0,3301,0,'Theridran','Druid Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2200,2000,1,1,2,0,16384,0,0,0,0,11,4,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'druid_bot',-1),(70158,0,0,0,0,0,3312,0,3312,0,'Einris','Hunter Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2800,2000,1,1,2,0,16384,0,0,0,0,3,3,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'hunter_bot',-1),(70159,0,0,0,0,0,3309,0,3309,0,'Ulfir','Hunter Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2800,2000,1,1,2,0,16384,0,0,0,0,3,3,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'hunter_bot',-1),(70160,0,0,0,0,0,3310,0,3310,0,'Thorfin','Hunter Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2800,2000,1,1,2,0,16384,0,0,0,0,3,3,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'hunter_bot',-1),(70161,0,0,0,0,0,10171,0,10171,0,'UnThuwa','Mage Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3800,2000,1,1,8,0,16384,0,0,0,0,8,8,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'mage_bot',-1),(70162,0,0,0,0,0,4524,0,4524,0,'Pephredo','Mage Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3800,2000,1,1,8,0,16384,0,0,0,0,8,8,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'mage_bot',-1),(70163,0,0,0,0,0,4522,0,4522,0,'Enyo','Mage Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3800,2000,1,1,8,0,16384,0,0,0,0,8,8,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'mage_bot',-1),(70164,0,0,0,0,0,4526,0,4526,0,'Mai','Mage Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3800,2000,1,1,8,0,16384,0,0,0,0,8,8,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'mage_bot',-1),(70165,0,0,0,0,0,4523,0,4523,0,'Deino','Mage Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3800,2000,1,1,8,0,16384,0,0,0,0,8,8,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'mage_bot',-1),(70166,0,0,0,0,0,4665,0,4665,0,'Birgitte','Mage Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3800,2000,1,1,8,0,16384,0,0,0,0,8,5,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'mage_bot',-1),(70167,0,0,0,0,0,12849,0,12849,0,'Thuul','Mage Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3800,2000,1,1,8,0,16384,0,0,0,0,8,8,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'mage_bot',-1),(70168,0,0,0,0,0,4690,0,4690,0,'Zayus','Priest Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3600,2000,1,1,8,0,16384,0,0,0,0,5,8,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'priest_bot',-1),(70169,0,0,0,0,0,10473,0,10473,0,'Xyera','Priest Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3600,2000,1,1,8,0,16384,0,0,0,0,5,8,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'priest_bot',-1),(70170,0,0,0,0,0,4711,0,4711,0,'Urkyo','Priest Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3600,2000,1,1,8,0,16384,0,0,0,0,5,8,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'priest_bot',-1),(70171,0,0,0,0,0,6060,0,6060,0,'Uthelnay','Mage Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3800,2000,1,1,8,0,16384,0,0,0,0,8,8,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'mage_bot',-1),(70172,0,0,0,0,0,6072,0,6072,0,'Dink','Mage Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3800,2000,1,1,8,0,16384,0,0,0,0,8,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'mage_bot',-1),(70173,0,0,0,0,0,6071,0,6071,0,'Darnath','Warrior Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3400,2000,1,1,1,0,16384,0,0,0,0,1,4,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warrior_bot',-1),(70174,0,0,0,0,0,7356,0,7356,0,'Karman','Paladin Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2300,2000,1,1,2,0,16384,0,0,0,0,2,1,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'paladin_bot',-1),(70175,0,0,0,0,0,11037,0,11037,0,'Evencane','Warrior Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3400,2000,1,1,1,0,16384,0,0,0,0,1,1,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warrior_bot',-1),(70176,0,0,0,0,0,7357,0,7357,0,'Jannos','Druid Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2200,2000,1,1,2,0,16384,0,0,0,0,11,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'druid_bot',-1),(70177,0,0,0,0,0,7538,0,7538,0,'Alenndaar','Hunter Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2800,2000,1,1,2,0,16384,0,0,0,0,3,4,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'hunter_bot',-1),(70178,0,0,0,0,0,10738,0,10738,0,'Golhine','Druid Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2200,2000,1,1,2,0,16384,0,0,0,0,11,4,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'druid_bot',-1),(70179,0,0,0,0,0,9337,0,9337,0,'Hesuwa','Hunter Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2800,2000,1,1,2,0,16384,0,0,3,0,3,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'hunter_bot',-1),(70180,0,0,0,0,0,9336,0,9336,0,'Xao\'tsu','Hunter Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2800,2000,1,1,2,0,16384,0,0,3,0,3,2,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'hunter_bot',-1),(70181,0,0,0,0,0,9338,0,9338,0,'Belia','Hunter Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2800,2000,1,1,2,0,16384,0,0,3,0,3,3,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'hunter_bot',-1),(70182,0,0,0,0,0,10245,0,10245,0,'Dargh','Hunter Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2800,2000,1,1,2,0,16384,0,0,0,0,3,3,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'hunter_bot',-1),(70183,0,0,0,0,0,11044,0,11044,0,'Meideros','Priest Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3600,2000,1,1,8,0,16384,0,0,0,0,5,4,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'priest_bot',-1),(70184,0,0,0,0,0,11048,0,11048,0,'Presse','Priest Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3600,2000,1,1,8,0,16384,0,0,0,0,5,4,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'priest_bot',-1),(70185,0,0,0,0,0,11053,0,11053,0,'Rohan','Priest Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3600,2000,1,1,8,0,16384,0,0,0,0,5,3,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'priest_bot',-1),(70186,0,0,0,0,0,12053,0,12053,0,'Loganaar','Druid Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2200,2000,1,1,2,0,16384,0,0,0,0,11,4,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'druid_bot',-1),(70187,0,0,0,0,0,13171,0,13171,0,'Romano','Rogue Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,1600,2000,1,1,4,0,16384,0,0,0,0,4,1,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'rogue_bot',-1),(70188,0,0,0,0,0,13341,0,13341,0,'Sagorne','Shaman Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2600,2000,1,1,2,0,16384,0,0,0,0,7,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'shaman_bot',-1),(70189,0,0,0,0,0,15522,0,15522,0,'Julia','Mage Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3800,2000,1,1,8,0,16384,0,0,0,0,8,10,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'mage_bot',-1),(70190,0,0,0,0,0,16811,0,16811,0,'Ithelis','Paladin Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2300,2000,1,1,2,0,16384,0,0,0,0,2,10,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'paladin_bot',-1),(70191,0,0,0,0,0,15524,0,15524,0,'Invocateur','Warlock Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3500,2000,1,1,8,0,16384,0,0,0,0,9,10,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warlock_bot',-1),(70192,0,0,0,0,0,15518,0,15518,0,'Matrone','Priest Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3600,2000,1,1,8,0,16384,0,0,0,0,5,10,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'priest_bot',-1),(70193,0,0,0,0,0,2659,0,2659,0,'Eclaireur','Rogue Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,1600,2000,1,1,4,0,16384,0,0,0,0,4,5,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'rogue_bot',-1),(70194,0,0,0,0,0,15520,0,15520,0,'Sallina','Hunter Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2800,2000,1,1,2,0,16384,0,0,0,0,3,10,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'hunter_bot',-1),(70195,0,0,0,0,0,16685,0,16685,0,'Noellene','Paladin Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2300,2000,1,1,2,0,16384,0,0,0,0,2,10,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'paladin_bot',-1),(70196,0,0,0,0,0,16707,0,16707,0,'Ponaris','Priest Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3600,2000,1,1,8,0,16384,0,0,0,0,5,10,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'priest_bot',-1),(70197,0,0,0,0,0,16222,0,16222,0,'Keilnei','Hunter Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2800,2000,1,1,2,0,16384,0,0,0,0,3,11,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'hunter_bot',-1),(70198,0,0,0,0,0,16223,0,16223,0,'Valaatu','Mage Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3800,2000,1,1,8,0,16384,0,0,0,0,8,11,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'mage_bot',-1),(70199,0,0,0,0,0,16224,0,16224,0,'Aurelon','Paladin Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2300,2000,1,1,2,0,16384,0,0,0,0,2,11,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'paladin_bot',-1),(70200,0,0,0,0,0,16225,0,16225,0,'Zalduun','Priest Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3600,2000,1,1,8,0,16384,0,0,0,0,5,11,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'priest_bot',-1),(70201,0,0,0,0,0,16226,0,16226,0,'Kore','Warrior Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3400,2000,1,1,1,0,16384,0,0,0,0,1,11,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warrior_bot',-1),(70202,0,0,0,0,0,16787,0,16787,0,'Alamma','Warlock Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3500,2000,1,1,8,0,16384,0,0,0,0,9,10,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warlock_bot',-1),(70203,0,0,0,0,0,16800,0,16800,0,'Talionia','Warlock Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3500,2000,1,1,8,0,16384,0,0,0,0,9,10,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warlock_bot',-1),(70204,0,0,0,0,0,16831,0,16831,0,'Zanien','Hunter Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3500,2000,1,1,2,0,16384,0,0,0,0,9,10,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'hunter_bot',-1),(70205,0,0,0,0,0,16781,0,16781,0,'Zaedana','Mage Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3800,2000,1,1,8,0,16384,0,0,0,0,8,10,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'mage_bot',-1),(70206,0,0,0,0,0,16824,0,16824,0,'Quithas','Mage Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3800,2000,1,1,8,0,16384,0,0,0,0,8,10,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'mage_bot',-1),(70207,0,0,0,0,0,16739,0,16739,0,'Harene','Druid Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2200,2000,1,1,2,0,16384,0,0,0,0,11,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'druid_bot',-1),(70208,0,0,0,0,0,16778,0,16778,0,'Tana','Hunter Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2800,2000,1,1,2,0,16384,0,0,0,0,3,10,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'hunter_bot',-1),(70209,0,0,0,0,0,16816,0,16816,0,'Oninath','Hunter Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2800,2000,1,1,2,0,16384,0,0,0,0,3,10,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'hunter_bot',-1),(70210,0,0,0,0,0,16829,0,16829,0,'Bachi','Paladin Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2300,2000,1,1,2,0,16384,0,0,0,0,2,10,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'paladin_bot',-1),(70211,0,0,0,0,0,16767,0,16767,0,'Zelanis','Rogue Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,1600,2000,1,1,4,0,16384,0,0,0,0,4,10,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'rogue_bot',-1),(70212,0,0,0,0,0,16798,0,16798,0,'Elara','Rogue Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,1600,2000,1,1,4,0,16384,0,0,0,0,4,10,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'rogue_bot',-1),(70213,0,0,0,0,0,16858,0,16858,0,'Shalannius','Druid Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2200,2000,1,1,2,0,16384,0,0,0,0,11,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'druid_bot',-1),(70214,0,0,0,0,0,17434,0,17434,0,'Deremiis','Hunter Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2800,2000,1,1,2,0,16384,0,0,0,0,3,11,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'hunter_bot',-1),(70215,0,0,0,0,0,17247,0,17247,0,'Caedmos','Priest Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3600,2000,1,1,8,0,16384,0,0,0,0,5,11,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'priest_bot',-1),(70216,0,0,0,0,0,17225,0,17225,0,'Baatun','Paladin Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2300,2000,1,1,2,0,16384,0,0,0,0,2,11,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'paladin_bot',-1),(70217,0,0,0,0,0,17212,0,17212,0,'Ahonan','Warrior Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3400,2000,1,1,1,0,16384,0,0,0,0,1,11,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warrior_bot',-1),(70218,0,0,0,0,0,17598,0,17598,0,'Firmanvaar','Shaman Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2600,2000,1,1,2,0,16384,0,0,0,0,7,11,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'shaman_bot',-1),(70219,0,0,0,0,0,16860,0,16860,0,'Actron','Hunter Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2800,2000,1,1,2,0,16384,0,0,0,0,3,11,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'hunter_bot',-1),(70220,0,0,0,0,0,17213,0,17213,0,'Behomat','Warrior Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3400,2000,1,1,1,0,16384,0,0,0,0,1,11,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warrior_bot',-1),(70221,0,0,0,0,0,17600,0,17600,0,'Nobundo','Shaman Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2600,2000,1,1,2,0,16384,0,0,0,0,7,11,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'shaman_bot',-1),(70222,0,0,0,0,0,17599,0,17599,0,'Tuluun','Shaman Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2600,2000,1,1,2,0,16384,0,0,0,0,7,11,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'shaman_bot',-1),(70223,0,0,0,0,0,16914,0,16914,0,'Sulaa','Shaman Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2600,2000,1,1,2,0,16384,0,0,0,0,7,11,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'shaman_bot',-1),(70224,0,0,0,0,0,17215,0,17215,0,'Ruada','Warrior Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3400,2000,1,1,1,0,16384,0,0,0,0,1,11,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'warrior_bot',-1),(70225,0,0,0,0,0,17233,0,17233,0,'Semid','Mage Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3800,2000,1,1,8,0,16384,0,0,0,0,8,11,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'mage_bot',-1),(70226,0,0,0,0,0,17232,0,17232,0,'Guvan','Priest Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3600,2000,1,1,8,0,16384,0,0,0,0,5,11,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'priest_bot',-1),(70227,0,0,0,0,0,17234,0,17234,0,'Tullas','Paladin Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2300,2000,1,1,2,0,16384,0,0,0,0,2,11,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'paladin_bot',-1),(70228,0,0,0,0,0,17488,0,17488,0,'Killac','Hunter bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2800,2000,1,1,2,0,16384,0,0,0,0,3,11,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'hunter_bot',-1),(70229,0,0,0,0,0,17226,0,17226,0,'Jol','Paladin Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2300,2000,1,1,2,0,16384,0,0,0,0,2,11,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'paladin_bot',-1),(70230,0,0,0,0,0,17248,0,17248,0,'Fallat','Priest Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3600,2000,1,1,8,0,16384,0,0,0,0,5,11,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'priest_bot',-1),(70231,0,0,0,0,0,17243,0,17243,0,'Harnan','Mage Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3800,2000,1,1,8,0,16384,0,0,0,0,8,11,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'mage_bot',-1),(70232,0,0,0,0,0,17241,0,17241,0,'Bati','Mage Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3800,2000,1,1,8,0,16384,0,0,0,0,8,11,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'mage_bot',-1),(70233,0,0,0,0,0,17792,0,17792,0,'Hobahken','Shaman Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2600,2000,1,1,2,0,16384,0,0,0,0,7,11,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'shaman_bot',-1),(70234,0,0,0,0,0,6820,0,6820,0,'Gurrag','Shaman Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2600,2000,1,1,2,0,16384,0,0,0,0,7,11,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'shaman_bot',-1),(70235,0,0,0,0,0,19596,0,19596,0,'Auberose','Paladin Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,2300,2000,1,1,2,0,16384,0,0,0,0,2,10,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'paladin_bot',-1),(70236,0,0,0,0,0,10335,10335,10335,10335,'Afina','Priest Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3600,2000,1,1,8,0,16384,0,0,0,0,5,1,7,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'priest_bot',-1),(70237,0,0,0,0,0,26939,26939,26939,26939,'Imhadria','Death Knight Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3300,2000,1,1,1,0,16384,0,0,0,0,6,10,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'death_knight_bot',-1),(70238,0,0,0,0,0,28039,28039,28039,28039,'Mynx','Death Knight Bot','',0,1,80,2,14,1,1.2,1.3,0.8,0,0,3300,2000,1,1,1,0,16384,0,0,0,0,6,10,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'death_knight_bot',-1),(70239,0,0,0,0,0,26688,26688,26688,26688,'Lankral','Death Knight Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3300,2000,1,1,1,0,16384,0,0,0,0,6,1,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'death_knight_bot',-1),(70240,0,0,0,0,0,26195,26195,26195,26195,'Silver','Death Knight Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3300,2000,1,1,1,0,16384,0,0,0,0,6,10,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'death_knight_bot',-1),(70241,0,0,0,0,0,27402,27402,27402,27402,'Vereth','Death Knight Bot','',0,1,80,2,14,1,1.2,1.3,0.8,0,0,3300,2000,1,1,1,0,16384,0,0,0,0,6,5,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'death_knight_bot',-1),(70242,0,0,0,0,0,27189,27189,27189,27189,'Arly','Death Knight Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3300,2000,1,1,1,0,16384,0,0,0,0,6,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'death_knight_bot',-1),(70243,0,0,0,0,0,26217,26217,26217,26217,'Setaal','Death Knight Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3300,2000,1,1,1,0,16384,0,0,0,0,6,11,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'death_knight_bot',-1),(70244,0,0,0,0,0,28842,28842,28842,28842,'Illyrie','Death Knight Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3300,2000,1,1,1,0,16384,0,0,0,0,6,4,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'death_knight_bot',-1),(70245,0,0,0,0,0,28840,28840,28840,28840,'Zor\'be','Death Knight Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3300,2000,1,1,1,0,16384,0,0,0,0,6,8,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'death_knight_bot',-1),(70246,0,0,0,0,0,25512,25512,25512,25512,'Datura','Death Knight Bot','',0,1,80,2,14,1,1.2,1.3,1,0,0,3300,2000,1,1,1,0,16384,0,0,0,0,6,10,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157552,'death_knight_bot',-1),(70247,0,0,0,0,0,1132,0,1132,0,'Voidwalker','Warlock\'s Pet Bot',NULL,0,1,80,2,14,0,1.2,1.3,1,0,0,2000,2000,1,1,2,0,0,0,16,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,1048688,'voidwalker_bot',-1),(70248,0,0,0,0,0,1105,0,0,0,'Hunter\'s Pet',NULL,NULL,0,1,80,0,14,0,1.1,1.14286,1,0,0,2000,0,1,1,1,0,0,0,7,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,5708,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,149,1,0,0,'',-1),(70301,0,0,0,0,0,17659,17659,17659,17659,'Gorkramato','Ex. Blademaster','',0,81,81,2,14,1,1.2,1.3,1.05,4,0,2200,2000,1,1,1,0,16384,0,0,0,0,12,2,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1,1,1,1,1,0,0,0,1,68157560,'blademaster_bot',-1),(71000,0,0,0,0,0,16853,16853,16853,16853,'Airen','Priestess of Suffering',NULL,0,95,95,1,14,1,1.2,1.3,1.173,4,0,1500,0,1,1,1,898,49152,2,0,0,0,0,0,3,67110912,0,0,0,450,450,450,450,450,450,0,0,0,0,0,0,0,0,0,0,0,0,'',0,3,1,1000,1,5,5,1,1,0,0,617299839,1048946,'npc_Airen_qI',-213);
+
+
+-- EQUIPS --
+
+delete from `creature_equip_template` where CreatureID between @BOT_START and @BOT_END;
+
+insert into `creature_equip_template` (`CreatureID`, `ID`, `itemID1`, `itemID2`, `itemID3`, `VerifiedBuild`) values
+('70001','1','18842','0','0','0'), ('70002','1','18842','0','0','0'), ('70003','1','18842','0','0','0'), ('70004','1','31289','0','0','0'), ('70005','1','31289','0','0','0'), ('70006','1','31289','0','0','0'),
+('70007','1','31186','0','0','0'), ('70008','1','31186','0','0','0'), ('70009','1','31186','0','0','0'), ('70010','1','2291','0','2825','0'), ('70011','1','31289','0','0','0'), ('70012','1','2291','0','2825','0'),
+('70013','1','18002','0','0','0'), ('70014','1','27903','0','0','0'), ('70015','1','7723','0','0','0'), ('70016','1','13984','6448','0','0'), ('70017','1','13984','6448','0','0'), ('70018','1','6633','820','0','0'),
+('70019','1','13984','6448','0','0'), ('70020','1','12584','18825','0','0'), ('70021','1','18876','0','0','0'), ('70022','1','12584','18825','0','0'), ('70023','1','18876','0','0','0'), ('70024','1','18842','0','0','0'),
+('70025','1','18203','18202','0','0'), ('70026','1','31186','0','0','0'), ('70027','1','31289','0','0','0'), ('70028','1','18842','0','0','0'), ('70029','1','28367','0','0','0'), ('70030','1','12584','18825','0','0'),
+('70031','1','13984','6448','0','0'), ('70032','1','27903','0','0','0'), ('70033','1','18002','0','0','0'), ('70034','1','31289','0','0','0'), ('70035','1','18842','0','0','0'), ('70036','1','31186','0','0','0'),
+('70037','1','31186','0','0','0'), ('70038','1','18842','0','0','0'), ('70039','1','31289','0','0','0'), ('70041','1','18842','0','0','0'), ('70042','1','18842','0','0','0'), ('70043','1','18203','18202','0','0'),
+('70044','1','18203','18202','0','0'), ('70045','1','18203','18202','0','0'), ('70046','1','18203','18202','0','0'), ('70047','1','25622','0','0','0'), ('70048','1','25622','0','0','0'), ('70049','1','25622','0','0','0'),
+('70050','1','2291','0','2825','0'), ('70051','1','2291','0','2825','0'), ('70052','1','2291','0','2825','0'), ('70053','1','18002','0','0','0'), ('70054','1','27903','0','0','0'), ('70055','1','28367','0','0','0'),
+('70056','1','31289','0','0','0'), ('70057','1','31289','0','0','0'), ('70058','1','31289','0','0','0'), ('70059','1','18842','0','0','0'), ('70060','1','18842','0','0','0'), ('70061','1','18842','0','0','0'),
+('70062','1','28367','0','0','0'), ('70063','1','25622','0','0','0'), ('70064','1','2291','0','2825','0'), ('70065','1','18203','18202','0','0'), ('70066','1','18002','0','0','0'), ('70067','1','25622','0','0','0'),
+('70068','1','2291','0','2825','0'), ('70069','1','18203','18202','0','0'), ('70070','1','27903','0','0','0'), ('70071','1','2291','0','2825','0'), ('70072','1','31186','0','0','0'), ('70073','1','18203','18202','0','0'),
+('70074','1','18002','0','0','0'), ('70075','1','2291','0','2825','0'), ('70076','1','31186','0','0','0'), ('70077','1','18203','18202','0','0'), ('70078','1','31186','0','0','0'), ('70079','1','31186','0','0','0'),
+('70080','1','31186','0','0','0'), ('70081','1','18203','18202','0','0'), ('70082','1','2291','0','2825','0'), ('70083','1','7723','0','0','0'), ('70084','1','18002','0','0','0'), ('70085','1','18203','18202','0','0'),
+('70086','1','2291','0','2825','0'), ('70087','1','2291','0','2825','0'), ('70088','1','27903','0','0','0'), ('70089','1','2291','0','2825','0'), ('70090','1','28367','0','0','0'), ('70091','1','6633','820','0','0'),
+('70092','1','31289','0','0','0'), ('70093','1','25622','0','0','0'), ('70094','1','18002','0','0','0'), ('70095','1','13984','6448','0','0'), ('70096','1','31289','0','0','0'), ('70097','1','25622','0','0','0'),
+('70098','1','2291','0','2825','0'), ('70099','1','2291','0','2825','0'),
+('70100','1','2291','0','2825','0'), ('70101','1','31289','0','0','0'), ('70102','1','31289','0','0','0'), ('70103','1','2291','0','2825','0'), ('70104','1','7723','0','0','0'), ('70105','1','18002','0','0','0'),
+('70106','1','31289','0','0','0'), ('70107','1','31289','0','0','0'), ('70108','1','31289','0','0','0'), ('70109','1','13984','6448','0','0'), ('70110','1','18842','0','0','0'), ('70111','1','6633','820','0','0'),
+('70112','1','13984','6448','0','0'), ('70113','1','25622','0','0','0'), ('70114','1','25622','0','0','0'), ('70115','1','2291','0','2825','0'), ('70116','1','31186','0','0','0'), ('70117','1','31186','0','0','0'),
+('70118','1','31186','0','0','0'), ('70119','1','18842','0','0','0'), ('70120','1','18842','0','0','0'), ('70121','1','18842','0','0','0'), ('70122','1','27903','0','0','0'), ('70123','1','18002','0','0','0'),
+('70124','1','7723','0','0','0'), ('70125','1','18002','0','0','0'), ('70126','1','28367','0','0','0'), ('70127','1','2291','0','2825','0'), ('70128','1','2291','0','2825','0'), ('70129','1','2291','0','2825','0'),
+('70130','1','31289','0','0','0'), ('70131','1','31289','0','0','0'), ('70132','1','31289','0','0','0'), ('70134','1','18842','0','0','0'), ('70135','1','18842','0','0','0'), ('70136','1','18842','0','0','0'),
+('70137','1','18876','0','0','0'), ('70138','1','12584','18825','0','0'), ('70139','1','18876','0','0','0'), ('70140','1','6633','820','0','0'), ('70141','1','13984','6448','0','0'), ('70142','1','6633','820','0','0'),
+('70143','1','31186','0','0','0'), ('70144','1','31186','0','0','0'), ('70145','1','31186','0','0','0'), ('70146','1','27903','0','0','0'), ('70147','1','18002','0','0','0'), ('70148','1','31289','0','0','0'),
+('70149','1','12584','18825','0','0'), ('70150','1','18876','0','0','0'),
+('70151','1','31186','0','0','0'), ('70152','1','31186','0','0','0'), ('70153','1','18842','0','0','0'), ('70154','1','18842','0','0','0'), ('70155','1','2291','0','2825','0'), ('70156','1','25622','0','0','0'),
+('70157','1','25622','0','0','0'), ('70158','1','2291','0','2825','0'), ('70159','1','2291','0','2825','0'), ('70160','1','2291','0','2825','0'), ('70161','1','18842','0','0','0'), ('70162','1','18842','0','0','0'),
+('70163','1','18842','0','0','0'), ('70164','1','18842','0','0','0'), ('70165','1','18842','0','0','0'), ('70166','1','18842','0','0','0'), ('70167','1','18842','0','0','0'), ('70168','1','31289','0','0','0'),
+('70169','1','31289','0','0','0'), ('70170','1','31289','0','0','0'), ('70171','1','18842','0','0','0'), ('70172','1','18842','0','0','0'), ('70173','1','28367','0','0','0'), ('70174','1','12584','18825','0','0'),
+('70175','1','7723','0','0','0'), ('70176','1','25622','0','0','0'), ('70177','1','2291','0','2825','0'), ('70178','1','25622','0','0','0'), ('70179','1','2291','0','2825','0'), ('70180','1','2291','0','2825','0'),
+('70181','1','2291','0','2825','0'), ('70182','1','2291','0','2825','0'), ('70183','1','31289','0','0','0'), ('70184','1','31289','0','0','0'), ('70185','1','31289','0','0','0'), ('70186','1','25622','0','0','0'),
+('70187','1','13984','6448','0','0'), ('70188','1','18203','18202','0','0'), ('70189','1','18842','0','0','0'), ('70190','1','12584','18826','0','0'), ('70191','1','31186','0','0','0'), ('70192','1','31289','0','0','0'),
+('70193','1','13984','6448','0','0'), ('70194','1','2291','0','2825','0'), ('70195','1','12584','18826','0','0'), ('70196','1','31289','0','0','0'), ('70197','1','2291','0','2825','0'), ('70198','1','18842','0','0','0'),
+('70199','1','18876','0','0','0'), ('70200','1','31289','0','0','0'),
+('70201','1','27903','0','0','0'), ('70202','1','31186','0','0','0'), ('70203','1','31186','0','0','0'), ('70204','1','31186','0','0','0'), ('70205','1','18842','0','0','0'), ('70206','1','18842','0','0','0'),
+('70207','1','25622','0','0','0'), ('70208','1','2291','0','2825','0'), ('70209','1','2291','0','2825','0'), ('70210','1','12584','18826','0','0'), ('70211','1','6633','820','0','0'), ('70212','1','13984','6448','0','0'),
+('70213','1','25622','0','0','0'), ('70214','1','2291','0','2825','0'), ('70215','1','31289','0','0','0'), ('70216','1','18876','0','0','0'), ('70217','1','28367','0','0','0'), ('70218','1','18203','18202','0','0'),
+('70219','1','2291','0','2825','0'), ('70220','1','18002','0','0','0'), ('70221','1','18203','18202','0','0'), ('70222','1','18203','18202','0','0'), ('70223','1','18203','18202','0','0'), ('70224','1','27903','0','0','0'),
+('70225','1','18842','0','0','0'), ('70226','1','31289','0','0','0'), ('70227','1','12584','18825','0','0'), ('70228','1','2291','0','2825','0'), ('70229','1','18876','0','0','0'), ('70230','1','31289','0','0','0'),
+('70231','1','18842','0','0','0'), ('70232','1','18842','0','0','0'), ('70233','1','18203','18202','0','0'), ('70234','1','18203','18202','0','0'), ('70235','1','29175','18826','0','0'), ('70236','1','31289','0','0','0'),
+('70237','1','13505','0','0','0'), ('70238','1','12775','0','0','0'), ('70239','1','24044','0','0','0'), ('70240','1','43601','0','0','0'), ('70241','1','23499','0','0','0'), ('70242','1','38632','0','0','0'),
+('70243','1','34891','0','0','0'), ('70244','1','38632','0','0','0'), ('70245','1','50798','0','0','0'), ('70246','1','12592','0','0','0'), ('70301','1','24044','0','0','0'),
+
+('71000','1','0','30902','0','0');
+
+-- -- -- Update 18.09.13 - Equips for shamans
+-- Orcs and Draenei. Mainhand: Cudgel of Furious Justice, Offhand: Azure-Shield of Coldarra
+UPDATE `creature_equip_template` SET `itemID1` = '50050', `itemID2` = '29266', `itemID3` = '0' WHERE `CreatureID` IN (SELECT entry FROM `creature_template` WHERE (`entry` BETWEEN @BOT_START AND @BOT_END) AND `trainer_class` = '7' AND (`trainer_race` = '2' OR `trainer_race` = '11'));
+-- Taurens and some Draenei. De-Raged Waraxe (Two-Hand)
+UPDATE `creature_equip_template` SET `itemID1` = '41816', `itemID2` = '0', `itemID3` = '0' WHERE `CreatureID` IN (SELECT entry FROM `creature_template` WHERE (`entry` BETWEEN @BOT_START AND @BOT_END) AND `trainer_class` = '7' AND (`trainer_race` = '6' OR `entry` IN (70218,70222,70223,70233)));
+
+
+-- GOSSIPS --
+delete from `npc_text` where ID between @BOT_START and @BOT_END;
+insert into `npc_text` (`ID`, `text0_0`, `text0_1`, `lang0`, `Probability0`, `em0_0`, `em0_1`, `em0_2`, `em0_3`, `em0_4`, `em0_5`, `text1_0`, `text1_1`, `lang1`, `Probability1`, `em1_0`, `em1_1`, `em1_2`, `em1_3`, `em1_4`, `em1_5`, `text2_0`, `text2_1`, `lang2`, `Probability2`, `em2_0`, `em2_1`, `em2_2`, `em2_3`, `em2_4`, `em2_5`, `text3_0`, `text3_1`, `lang3`, `Probability3`, `em3_0`, `em3_1`, `em3_2`, `em3_3`, `em3_4`, `em3_5`,
+`text4_0`, `text4_1`, `lang4`, `Probability4`, `em4_0`, `em4_1`, `em4_2`, `em4_3`, `em4_4`, `em4_5`, `text5_0`, `text5_1`, `lang5`, `Probability5`, `em5_0`, `em5_1`, `em5_2`, `em5_3`, `em5_4`, `em5_5`, `text6_0`, `text6_1`, `lang6`, `Probability6`, `em6_0`, `em6_1`, `em6_2`, `em6_3`, `em6_4`, `em6_5`, `text7_0`, `text7_1`, `lang7`, `Probability7`, `em7_0`, `em7_1`, `em7_2`, `em7_3`, `em7_4`, `em7_5`, `VerifiedBuild`)
+values
+('70001','I live only to serve the master.','','0','1','0','0','0','0','0','0','','','0','0','0','0','0','0','0','0','','','0','0','0','0','0','0','0','0','','','0','0','0','0','0','0','0','0','','','0','0','0','0','0','0','0','0','','','0','0','0','0','0','0','0','0','','','0','0','0','0','0','0','0','0','','','0','0','0','0','0','0','0','0','-213'),
+('70002','You need something?','','0','1','0','0','0','0','0','0','','','0','0','0','0','0','0','0','0','','','0','0','0','0','0','0','0','0','','','0','0','0','0','0','0','0','0','','','0','0','0','0','0','0','0','0','','','0','0','0','0','0','0','0','0','','','0','0','0','0','0','0','0','0','','','0','0','0','0','0','0','0','0','-213'),
+('70003','Mortals... usually I kill wretches like you at sight',NULL,'0','1','396','0','0','0','0','0',NULL,NULL,'0','0','0','0','0','0','0','0',NULL,NULL,'0','0','0','0','0','0','0','0',NULL,NULL,'0','0','0','0','0','0','0','0',NULL,NULL,'0','0','0','0','0','0','0','0',NULL,NULL,'0','0','0','0','0','0','0','0',NULL,NULL,'0','0','0','0','0','0','0','0',NULL,NULL,'0','0','0','0','0','0','0','0','-213');
+
+
+-- OUTFITS --
+-- Npc Dress mod by Rochet2
+CREATE TABLE IF NOT EXISTS `creature_template_outfits` (
+    `entry` INT(10) UNSIGNED NOT NULL,
+    `race` tinyint(3) UNSIGNED NOT NULL DEFAULT '1',
+    `gender` tinyint(3) UNSIGNED NOT NULL DEFAULT '0' COMMENT '0 for male, 1 for female',
+    `skin` tinyint(3) UNSIGNED NOT NULL DEFAULT '0',
+    `face` tinyint(3) UNSIGNED NOT NULL DEFAULT '0',
+    `hair` tinyint(3) UNSIGNED NOT NULL DEFAULT '0',
+    `haircolor` tinyint(3) UNSIGNED NOT NULL DEFAULT '0',
+    `facialhair` tinyint(3) UNSIGNED NOT NULL DEFAULT '0',
+    `head` INT(10) UNSIGNED NOT NULL DEFAULT '0',
+    `shoulders` INT(10) UNSIGNED NOT NULL DEFAULT '0',
+    `body` INT(10) UNSIGNED NOT NULL DEFAULT '0',
+    `chest` INT(10) UNSIGNED NOT NULL DEFAULT '0',
+    `waist` INT(10) UNSIGNED NOT NULL DEFAULT '0',
+    `legs` INT(10) UNSIGNED NOT NULL DEFAULT '0',
+    `feet` INT(10) UNSIGNED NOT NULL DEFAULT '0',
+    `wrists` INT(10) UNSIGNED NOT NULL DEFAULT '0',
+    `hands` INT(10) UNSIGNED NOT NULL DEFAULT '0',
+    `back` INT(10) UNSIGNED NOT NULL DEFAULT '0',
+    `tabard` INT(10) UNSIGNED NOT NULL DEFAULT '0',
+    PRIMARY KEY  (`entry`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+-- End Npc Dress mod
+
+replace into `creature_template_outfits` (`entry`, `race`, `gender`, `skin`, `face`, `hair`, `haircolor`, `facialhair`, `head`, `shoulders`, `body`, `chest`, `waist`, `legs`, `feet`, `wrists`, `hands`, `back`, `tabard`)
+values
+('70301','2','0','0','14','9','7','5','0','0','0','0','59194','64674','0','36248','0','0','0'), -- Blademaster
+('71000','11','1','0','5','0','6','0','0','53903','21842','35049','35058','35051','35067','35044','0','0','0'); -- Airen
+
+
+-- Customize section
+-- You can create your own values to be in line with your own server if these are not acceptable.
+
+SET @CLASS_WARRIOR = 1;
+SET @CLASS_PALADIN = 2;
+SET @CLASS_HUNTER  = 3;
+SET @CLASS_ROGUE   = 4;
+SET @CLASS_PRIEST  = 5;
+SET @CLASS_DK      = 6;
+SET @CLASS_SHAMAN  = 7;
+SET @CLASS_MAGE    = 8;
+SET @CLASS_WARLOCK = 9;
+SET @CLASS_DRUID   = 11;
+SET @CLASS_BM      = 12;
+
+-- Add flags_extra
+-- -- -- Update 6.04.14 - extra flags for recognizing bots core-side - CREATURE_FLAG_EXTRA_NPCBOT
+
+SET @EX_NO_PARRY_HASTEN = 8; -- 0x00000008 - CREATURE_FLAG_EXTRA_NO_PARRY_HASTEN
+SET @EX_NO_BLOCK = 16; -- 0x00000010 - CREATURE_FLAG_EXTRA_NO_BLOCK
+SET @EX_NO_CRUSH = 32; -- 0x00000020 - CREATURE_FLAG_EXTRA_NO_CRUSH
+SET @EX_NO_XP = 64; -- 0x00000040 - CREATURE_FLAG_EXTRA_NO_XP_AT_KILL
+SET @EX_DIMINISH = 1048576; -- 0x00100000 - CREATURE_FLAG_EXTRA_ALL_DIMINISH
+SET @EX_NPCBOT = 67108864; -- 0x04000000 - CREATURE_FLAG_EXTRA_NPCBOT - custom flag
+SET @FLAGS_EX = @EX_NO_BLOCK | @EX_NO_CRUSH | @EX_NO_XP | @EX_DIMINISH | @EX_NPCBOT;
+SET @FLAGS_EXN = @EX_NO_BLOCK | @EX_NO_CRUSH | @EX_NO_XP | @EX_DIMINISH | @EX_NPCBOT | @EX_NO_PARRY_HASTEN;
+SET @FLAGS_EX_PET = @EX_NO_BLOCK | @EX_NO_CRUSH | @EX_NO_XP | @EX_DIMINISH;
+
+-- Add extra 'unit_flags2' flags
+SET @U2_ENEMY_INTERRACT = 16384; -- 0x00004000 - UNIT_FLAG2_ALLOW_ENEMY_INTERACT
+SET @FLAGS_U2 = @U2_ENEMY_INTERRACT;
+
+-- minions
+UPDATE `creature_template` SET exp:=2, faction:=14, DamageModifier:=1.0, minlevel:=80, maxlevel:=80, baseattacktime:=3300, rangeattacktime:=2000, dynamicflags:=0, speed_walk:=1.2, speed_run:=1.3, InhabitType:=3, HealthModifier:=1, ManaModifier:=1, ArmorModifier:=1, RegenHealth:=0, mechanic_immune_mask:=1, flags_extra:=@FLAGS_EX, unit_flags2:=`unit_flags2`|@FLAGS_U2, AIName:='', VerifiedBuild:=-1 where entry between @BOT_START and @BOT_END-1 and trainer_class=@CLASS_DK;
+UPDATE `creature_template` SET exp:=2, faction:=14, DamageModifier:=1.0, minlevel:=80, maxlevel:=80, baseattacktime:=2200, rangeattacktime:=2000, dynamicflags:=0, speed_walk:=1.2, speed_run:=1.3, InhabitType:=3, HealthModifier:=1, ManaModifier:=1, ArmorModifier:=1, RegenHealth:=0, mechanic_immune_mask:=1, flags_extra:=@FLAGS_EX, unit_flags2:=`unit_flags2`|@FLAGS_U2, AIName:='', VerifiedBuild:=-1 where entry between @BOT_START and @BOT_END-1 and trainer_class=@CLASS_DRUID;
+UPDATE `creature_template` SET exp:=2, faction:=14, DamageModifier:=1.0, minlevel:=80, maxlevel:=80, baseattacktime:=2800, rangeattacktime:=2000, dynamicflags:=0, speed_walk:=1.2, speed_run:=1.3, InhabitType:=3, HealthModifier:=1, ManaModifier:=1, ArmorModifier:=1, RegenHealth:=0, mechanic_immune_mask:=1, flags_extra:=@FLAGS_EX, unit_flags2:=`unit_flags2`|@FLAGS_U2, AIName:='', VerifiedBuild:=-1 where entry between @BOT_START and @BOT_END-1 and trainer_class=@CLASS_HUNTER;
+UPDATE `creature_template` SET exp:=2, faction:=14, DamageModifier:=1.0, minlevel:=80, maxlevel:=80, baseattacktime:=3800, rangeattacktime:=2000, dynamicflags:=0, speed_walk:=1.2, speed_run:=1.3, InhabitType:=3, HealthModifier:=1, ManaModifier:=1, ArmorModifier:=1, RegenHealth:=0, mechanic_immune_mask:=1, flags_extra:=@FLAGS_EX, unit_flags2:=`unit_flags2`|@FLAGS_U2, AIName:='', VerifiedBuild:=-1 where entry between @BOT_START and @BOT_END-1 and trainer_class=@CLASS_MAGE;
+UPDATE `creature_template` SET exp:=2, faction:=14, DamageModifier:=1.0, minlevel:=80, maxlevel:=80, baseattacktime:=2300, rangeattacktime:=2000, dynamicflags:=0, speed_walk:=1.2, speed_run:=1.3, InhabitType:=3, HealthModifier:=1, ManaModifier:=1, ArmorModifier:=1, RegenHealth:=0, mechanic_immune_mask:=1, flags_extra:=@FLAGS_EX, unit_flags2:=`unit_flags2`|@FLAGS_U2, AIName:='', VerifiedBuild:=-1 where entry between @BOT_START and @BOT_END-1 and trainer_class=@CLASS_PALADIN;
+UPDATE `creature_template` SET exp:=2, faction:=14, DamageModifier:=1.0, minlevel:=80, maxlevel:=80, baseattacktime:=3600, rangeattacktime:=2000, dynamicflags:=0, speed_walk:=1.2, speed_run:=1.3, InhabitType:=3, HealthModifier:=1, ManaModifier:=1, ArmorModifier:=1, RegenHealth:=0, mechanic_immune_mask:=1, flags_extra:=@FLAGS_EX, unit_flags2:=`unit_flags2`|@FLAGS_U2, AIName:='', VerifiedBuild:=-1 where entry between @BOT_START and @BOT_END-1 and trainer_class=@CLASS_PRIEST;
+UPDATE `creature_template` SET exp:=2, faction:=14, DamageModifier:=1.0, minlevel:=80, maxlevel:=80, baseattacktime:=1600, rangeattacktime:=2000, dynamicflags:=0, speed_walk:=1.2, speed_run:=1.3, InhabitType:=3, HealthModifier:=1, ManaModifier:=1, ArmorModifier:=1, RegenHealth:=0, mechanic_immune_mask:=1, flags_extra:=@FLAGS_EX, unit_flags2:=`unit_flags2`|@FLAGS_U2, AIName:='', VerifiedBuild:=-1 where entry between @BOT_START and @BOT_END-1 and trainer_class=@CLASS_ROGUE;
+UPDATE `creature_template` SET exp:=2, faction:=14, DamageModifier:=1.0, minlevel:=80, maxlevel:=80, baseattacktime:=2600, rangeattacktime:=2000, dynamicflags:=0, speed_walk:=1.2, speed_run:=1.3, InhabitType:=3, HealthModifier:=1, ManaModifier:=1, ArmorModifier:=1, RegenHealth:=0, mechanic_immune_mask:=1, flags_extra:=@FLAGS_EX, unit_flags2:=`unit_flags2`|@FLAGS_U2, AIName:='', VerifiedBuild:=-1 where entry between @BOT_START and @BOT_END-1 and trainer_class=@CLASS_SHAMAN;
+UPDATE `creature_template` SET exp:=2, faction:=14, DamageModifier:=1.0, minlevel:=80, maxlevel:=80, baseattacktime:=3500, rangeattacktime:=2000, dynamicflags:=0, speed_walk:=1.2, speed_run:=1.3, InhabitType:=3, HealthModifier:=1, ManaModifier:=1, ArmorModifier:=1, RegenHealth:=0, mechanic_immune_mask:=1, flags_extra:=@FLAGS_EX, unit_flags2:=`unit_flags2`|@FLAGS_U2, AIName:='', VerifiedBuild:=-1 where entry between @BOT_START and @BOT_END-1 and trainer_class=@CLASS_WARLOCK;
+UPDATE `creature_template` SET exp:=2, faction:=14, DamageModifier:=1.0, minlevel:=80, maxlevel:=80, baseattacktime:=3400, rangeattacktime:=2000, dynamicflags:=0, speed_walk:=1.2, speed_run:=1.3, InhabitType:=3, HealthModifier:=1, ManaModifier:=1, ArmorModifier:=1, RegenHealth:=0, mechanic_immune_mask:=1, flags_extra:=@FLAGS_EX, unit_flags2:=`unit_flags2`|@FLAGS_U2, AIName:='', VerifiedBuild:=-1 where entry between @BOT_START and @BOT_END-1 and trainer_class=@CLASS_WARRIOR;
+UPDATE `creature_template` SET exp:=2, faction:=14, DamageModifier:=1.0, minlevel:=81, maxlevel:=81, baseattacktime:=2200, rangeattacktime:=2000, dynamicflags:=0, speed_walk:=1.2, speed_run:=1.3, InhabitType:=3, HealthModifier:=1, ManaModifier:=1, ArmorModifier:=1, RegenHealth:=0, mechanic_immune_mask:=1, flags_extra:=@FLAGS_EXN, unit_flags2:=`unit_flags2`|@FLAGS_U2, AIName:='', VerifiedBuild:=-1 where entry between @BOT_START and @BOT_END-1 and trainer_class=@CLASS_BM;
+

+-- Druid    -- Druid    -- Druid    -- Druid    -- Druid    -- Druid    -- Druid    -- Druid    -- Druid    -- Druid    -- Druid    -- Druid    -- Druid    -- Druid    -- Druid    -- Druid    -- Druid    -- Druid    -- Druid    -- Druid    -- Druid    -- Druid    -- Druid    -- Druid    -- Druid    -- Druid    -- Druid    -- Druid    -- Druid    -- Druid    -- Druid    -- Druid    -- Druid    -- Druid    -- Druid    -- Druid    -- Druid    -- Druid    -- Druid    -- Druid    -- Druid    -- Druid    -- Druid    -- Druid    -- Druid    -- Druid    -- Druid
+-- Hunter   -- Hunter   -- Hunter   -- Hunter   -- Hunter   -- Hunter   -- Hunter   -- Hunter   -- Hunter   -- Hunter   -- Hunter   -- Hunter   -- Hunter   -- Hunter   -- Hunter   -- Hunter   -- Hunter   -- Hunter   -- Hunter   -- Hunter   -- Hunter   -- Hunter   -- Hunter   -- Hunter   -- Hunter   -- Hunter   -- Hunter   -- Hunter   -- Hunter   -- Hunter   -- Hunter   -- Hunter   -- Hunter   -- Hunter   -- Hunter   -- Hunter   -- Hunter   -- Hunter   -- Hunter   -- Hunter   -- Hunter   -- Hunter   -- Hunter   -- Hunter   -- Hunter   -- Hunter   -- Hunter
+-- Mage     -- Mage     -- Mage     -- Mage     -- Mage     -- Mage     -- Mage     -- Mage     -- Mage     -- Mage     -- Mage     -- Mage     -- Mage     -- Mage     -- Mage     -- Mage     -- Mage     -- Mage     -- Mage     -- Mage     -- Mage     -- Mage     -- Mage     -- Mage     -- Mage     -- Mage     -- Mage     -- Mage     -- Mage     -- Mage     -- Mage     -- Mage     -- Mage     -- Mage     -- Mage     -- Mage     -- Mage     -- Mage     -- Mage     -- Mage     -- Mage     -- Mage     -- Mage     -- Mage     -- Mage     -- Mage     -- Mage
+-- Paladin  -- Paladin  -- Paladin  -- Paladin  -- Paladin  -- Paladin  -- Paladin  -- Paladin  -- Paladin  -- Paladin  -- Paladin  -- Paladin  -- Paladin  -- Paladin  -- Paladin  -- Paladin  -- Paladin  -- Paladin  -- Paladin  -- Paladin  -- Paladin  -- Paladin  -- Paladin  -- Paladin  -- Paladin  -- Paladin  -- Paladin  -- Paladin  -- Paladin  -- Paladin  -- Paladin  -- Paladin  -- Paladin  -- Paladin  -- Paladin  -- Paladin  -- Paladin  -- Paladin  -- Paladin  -- Paladin  -- Paladin  -- Paladin  -- Paladin  -- Paladin  -- Paladin  -- Paladin  -- Paladin
+-- Priest   -- Priest   -- Priest   -- Priest   -- Priest   -- Priest   -- Priest   -- Priest   -- Priest   -- Priest   -- Priest   -- Priest   -- Priest   -- Priest   -- Priest   -- Priest   -- Priest   -- Priest   -- Priest   -- Priest   -- Priest   -- Priest   -- Priest   -- Priest   -- Priest   -- Priest   -- Priest   -- Priest   -- Priest   -- Priest   -- Priest   -- Priest   -- Priest   -- Priest   -- Priest   -- Priest   -- Priest   -- Priest   -- Priest   -- Priest   -- Priest   -- Priest   -- Priest   -- Priest   -- Priest   -- Priest   -- Priest
+-- Rogue    -- Rogue    -- Rogue    -- Rogue    -- Rogue    -- Rogue    -- Rogue    -- Rogue    -- Rogue    -- Rogue    -- Rogue    -- Rogue    -- Rogue    -- Rogue    -- Rogue    -- Rogue    -- Rogue    -- Rogue    -- Rogue    -- Rogue    -- Rogue    -- Rogue    -- Rogue    -- Rogue    -- Rogue    -- Rogue    -- Rogue    -- Rogue    -- Rogue    -- Rogue    -- Rogue    -- Rogue    -- Rogue    -- Rogue    -- Rogue    -- Rogue    -- Rogue    -- Rogue    -- Rogue    -- Rogue    -- Rogue    -- Rogue    -- Rogue    -- Rogue    -- Rogue    -- Rogue    -- Rogue
+-- Shaman   -- Shaman   -- Shaman   -- Shaman   -- Shaman   -- Shaman   -- Shaman   -- Shaman   -- Shaman   -- Shaman   -- Shaman   -- Shaman   -- Shaman   -- Shaman   -- Shaman   -- Shaman   -- Shaman   -- Shaman   -- Shaman   -- Shaman   -- Shaman   -- Shaman   -- Shaman   -- Shaman   -- Shaman   -- Shaman   -- Shaman   -- Shaman   -- Shaman   -- Shaman   -- Shaman   -- Shaman   -- Shaman   -- Shaman   -- Shaman   -- Shaman   -- Shaman   -- Shaman   -- Shaman   -- Shaman   -- Shaman   -- Shaman   -- Shaman   -- Shaman   -- Shaman   -- Shaman   -- Shaman
+-- Warlock  -- Warlock  -- Warlock  -- Warlock  -- Warlock  -- Warlock  -- Warlock  -- Warlock  -- Warlock  -- Warlock  -- Warlock  -- Warlock  -- Warlock  -- Warlock  -- Warlock  -- Warlock  -- Warlock  -- Warlock  -- Warlock  -- Warlock  -- Warlock  -- Warlock  -- Warlock  -- Warlock  -- Warlock  -- Warlock  -- Warlock  -- Warlock  -- Warlock  -- Warlock  -- Warlock  -- Warlock  -- Warlock  -- Warlock  -- Warlock  -- Warlock  -- Warlock  -- Warlock  -- Warlock  -- Warlock  -- Warlock  -- Warlock  -- Warlock  -- Warlock  -- Warlock  -- Warlock  -- Warlock
+-- Warrior  -- Warrior  -- Warrior  -- Warrior  -- Warrior  -- Warrior  -- Warrior  -- Warrior  -- Warrior  -- Warrior  -- Warrior  -- Warrior  -- Warrior  -- Warrior  -- Warrior  -- Warrior  -- Warrior  -- Warrior  -- Warrior  -- Warrior  -- Warrior  -- Warrior  -- Warrior  -- Warrior  -- Warrior  -- Warrior  -- Warrior  -- Warrior  -- Warrior  -- Warrior  -- Warrior  -- Warrior  -- Warrior  -- Warrior  -- Warrior  -- Warrior  -- Warrior  -- Warrior  -- Warrior  -- Warrior  -- Warrior  -- Warrior  -- Warrior  -- Warrior  -- Warrior  -- Warrior  -- Warrior
+-- BMaster  -- BMaster  -- BMaster  -- BMaster  -- BMaster  -- BMaster  -- BMaster  -- BMaster  -- BMaster  -- BMaster  -- BMaster  -- BMaster  -- BMaster  -- BMaster  -- BMaster  -- BMaster  -- BMaster  -- BMaster  -- BMaster  -- BMaster  -- BMaster  -- BMaster  -- BMaster  -- BMaster  -- BMaster  -- BMaster  -- BMaster  -- BMaster  -- BMaster  -- BMaster  -- BMaster  -- BMaster  -- BMaster  -- BMaster  -- BMaster  -- BMaster  -- BMaster  -- BMaster  -- BMaster  -- BMaster  -- BMaster  -- BMaster  -- BMaster  -- BMaster  -- BMaster  -- BMaster  -- BMaster
+
+-- pets
+UPDATE `creature_template` SET exp:=2, faction:=14, DamageModifier:=1.0, minlevel:=80, maxlevel:=80, baseattacktime:=2000, dynamicflags:=0, speed_walk:=1.2, speed_run:=1.3, InhabitType:=3, HealthModifier:=1, ManaModifier:=1, ArmorModifier:=1, RegenHealth:=0, mechanic_immune_mask:=1, flags_extra:=@FLAGS_EX_PET,                                       AIName:='', VerifiedBuild:=-1 where entry between @BOT_START and @BOT_END-1 and name='Voidwalker';
+
+-- end
diff --git a/sql/base/characters.LordPsyanBots-base.sql b/sql/base/characters.LordPsyanBots-base.sql
new file mode 100644
index 0000000..e3abe68
--- /dev/null
+++ b/sql/base/characters.LordPsyanBots-base.sql
@@ -0,0 +1,1793 @@
+/*
+SQLyog Enterprise - MySQL GUI v8.18 
+MySQL - 5.6.17 : Database - characters
+*********************************************************************
+*/
+
+/*!40101 SET NAMES utf8 */;
+
+/*!40101 SET SQL_MODE=''*/;
+
+/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
+/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
+/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
+/*Table structure for table `account_data` */
+
+DROP TABLE IF EXISTS `account_data`;
+
+CREATE TABLE `account_data` (
+  `accountId` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Account Identifier',
+  `type` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `time` int(10) unsigned NOT NULL DEFAULT '0',
+  `data` blob NOT NULL,
+  PRIMARY KEY (`accountId`,`type`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+/*Data for the table `account_data` */
+
+/*Table structure for table `account_instance_times` */
+
+DROP TABLE IF EXISTS `account_instance_times`;
+
+CREATE TABLE `account_instance_times` (
+  `accountId` int(10) unsigned NOT NULL,
+  `instanceId` int(10) unsigned NOT NULL DEFAULT '0',
+  `releaseTime` bigint(20) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`accountId`,`instanceId`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+/*Data for the table `account_instance_times` */
+
+/*Table structure for table `account_tutorial` */
+
+DROP TABLE IF EXISTS `account_tutorial`;
+
+CREATE TABLE `account_tutorial` (
+  `accountId` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Account Identifier',
+  `tut0` int(10) unsigned NOT NULL DEFAULT '0',
+  `tut1` int(10) unsigned NOT NULL DEFAULT '0',
+  `tut2` int(10) unsigned NOT NULL DEFAULT '0',
+  `tut3` int(10) unsigned NOT NULL DEFAULT '0',
+  `tut4` int(10) unsigned NOT NULL DEFAULT '0',
+  `tut5` int(10) unsigned NOT NULL DEFAULT '0',
+  `tut6` int(10) unsigned NOT NULL DEFAULT '0',
+  `tut7` int(10) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`accountId`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+/*Data for the table `account_tutorial` */
+
+/*Table structure for table `addons` */
+
+DROP TABLE IF EXISTS `addons`;
+
+CREATE TABLE `addons` (
+  `name` varchar(120) NOT NULL DEFAULT '',
+  `crc` int(10) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`name`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Addons';
+
+/*Data for the table `addons` */
+
+/*Table structure for table `ahbot_category` */
+
+DROP TABLE IF EXISTS `ahbot_category`;
+
+CREATE TABLE `ahbot_category` (
+  `id` bigint(20) NOT NULL AUTO_INCREMENT,
+  `category` varchar(45) DEFAULT NULL,
+  `multiplier` decimal(20,2) NOT NULL,
+  `max_auction_count` bigint(20) NOT NULL,
+  `expire_time` bigint(20) NOT NULL,
+  PRIMARY KEY (`id`),
+  KEY `helper` (`category`,`multiplier`,`expire_time`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+/*Data for the table `ahbot_category` */
+
+/*Table structure for table `ahbot_history` */
+
+DROP TABLE IF EXISTS `ahbot_history`;
+
+CREATE TABLE `ahbot_history` (
+  `id` bigint(20) NOT NULL AUTO_INCREMENT,
+  `buytime` bigint(20) NOT NULL,
+  `item` bigint(20) NOT NULL,
+  `bid` bigint(20) NOT NULL,
+  `buyout` bigint(20) NOT NULL,
+  `won` bigint(20) NOT NULL,
+  `category` varchar(45) DEFAULT NULL,
+  `auction_house` bigint(20) NOT NULL,
+  PRIMARY KEY (`id`),
+  KEY `won` (`won`),
+  KEY `category` (`category`),
+  KEY `auction_house` (`auction_house`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+/*Data for the table `ahbot_history` */
+
+/*Table structure for table `ahbot_price` */
+
+DROP TABLE IF EXISTS `ahbot_price`;
+
+CREATE TABLE `ahbot_price` (
+  `id` bigint(20) NOT NULL AUTO_INCREMENT,
+  `item` varchar(45) DEFAULT NULL,
+  `price` decimal(20,2) NOT NULL,
+  `auction_house` bigint(20) NOT NULL,
+  PRIMARY KEY (`id`),
+  KEY `ahbot_price_item` (`item`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+/*Data for the table `ahbot_price` */
+
+/*Table structure for table `ai_playerbot_guild_names` */
+
+DROP TABLE IF EXISTS `ai_playerbot_guild_names`;
+
+CREATE TABLE `ai_playerbot_guild_names` (
+  `name_id` mediumint(8) NOT NULL AUTO_INCREMENT,
+  `name` varchar(24) NOT NULL,
+  PRIMARY KEY (`name_id`),
+  UNIQUE KEY `name_id` (`name_id`),
+  UNIQUE KEY `name` (`name`)
+) ENGINE=MyISAM AUTO_INCREMENT=642 DEFAULT CHARSET=utf8 ROW_FORMAT=FIXED COMMENT='PlayerbotAI guild names';
+
+/*Data for the table `ai_playerbot_guild_names` */
+
+insert  into `ai_playerbot_guild_names`(`name_id`,`name`) values (1,'Black Guard'),(2,'Abyssal Kingdoms'),(3,'Acid Evil'),(4,'Addicts Muskateers'),(5,'Adventurers War'),(6,'Age of Red Water Clan'),(7,'Alivso Reason'),(8,'All Knights'),(9,'Allegiance of the Vile'),(10,'Alliance Clan'),(11,'Alliance of Defectives'),(12,'Alti Legions'),(13,'Anarchie Shi'),(14,'Anchors of the Nominal'),(15,'Ancients of Part Times'),(16,'Angelus Gods'),(17,'Angry Party'),(18,'Apocalyptic Lamont'),(19,'Architects of Green'),(20,'Army of Black Widows'),(21,'Army of Orgrimmar Minds'),(22,'Army of Three Horses'),(23,'Arrows of Midlight'),(24,'Artisans of Best Guild'),(25,'Assasins of the Pyrewood'),(26,'Assassins Bane'),(27,'Avatars of Warsong Stuff'),(28,'Axis of the Funky Night'),(29,'Azeroth Souls'),(30,'Azeroths Rabbits'),(31,'Bad Sentinels'),(32,'Banana Song'),(33,'Band of Tarantula Attack'),(34,'Band of the Dark Reveren'),(35,'Barcode Praised'),(36,'Basher Goats'),(37,'Basic Order'),(38,'Batman of Banished'),(39,'Betrayers of Lucky Child'),(40,'Blackwater Committee'),(41,'Blades of Lich Kings'),(42,'Blades of the Hive'),(43,'Blades of the Total'),(44,'Bleeding War'),(45,'Blessed Lair'),(46,'Blizzards of the Iron'),(47,'Blood Chaos'),(48,'Blood Intrigue'),(49,'Blood Samurai'),(50,'Bloodlust Good'),(51,'Bonds of Reported Ignore'),(52,'Booty Cry'),(53,'Border Knights'),(54,'Bossmans Targaryen'),(55,'Braveheart Heaven'),(56,'Brotherhood of Twilight'),(57,'Bruised Pain'),(58,'Burning Control'),(59,'Burning Oblivion'),(60,'Cabal of Kalimdor'),(61,'Cake Crusade'),(62,'Call of the Ironforge'),(63,'Carebears Thunder'),(64,'Carpe Heaven'),(65,'Carpe Regiment'),(66,'Children of Order'),(67,'Children of the Gods'),(68,'Circle of Amor E Bobby'),(69,'Clan of the Elven Toys'),(70,'Clan of the Strike Light'),(71,'Coalition of Super Best'),(72,'Collective Pimps'),(73,'Companions of the Gnome'),(74,'Company of the Vibe'),(75,'Conclave of the Triad'),(76,'Council of Final Demise'),(77,'Council of Hard Core Ord'),(78,'Craaweh Thrall'),(79,'Cradle Scourge'),(80,'Crimson Angels'),(81,'Crimson Saints'),(82,'Crusade of Oh'),(83,'Crusaders of Undead'),(84,'Cryptic Serenity'),(85,'Csa Rigged'),(86,'Cult of the Raging Raid'),(87,'Dalaran Fair'),(88,'Damage Inc'),(89,'Dark Alliance'),(90,'Dark Azeroth'),(91,'Dark Damage'),(92,'Dark Resistus'),(93,'Dark Samurai'),(94,'Dark Turtles'),(95,'Darken Mercenaries'),(96,'Darkened Malevolence'),(97,'Darkness of Sword Coast'),(98,'Dawn of Knights Society'),(99,'Dawn of Mad Sentry'),(100,'Dead Zug'),(101,'Death Darkness'),(102,'Death Knights'),(103,'Deathlike Goods'),(104,'Deaths Venoms'),(105,'Decree of the Phumpers'),(106,'Defenders of Da Raised'),(107,'Defenders of Hyuuga Dark'),(108,'Defenders of Sacred Harm'),(109,'Deths Lords'),(110,'Devil Circl'),(111,'Devils Klng'),(112,'Dharma Hand'),(113,'Dharma Thorn'),(114,'Dies Ravager'),(115,'Disciples of Dead Panda'),(116,'Disciples of the Rot'),(117,'Doomsday Youth'),(118,'Dorcha Knights'),(119,'Dots of Dead Skull'),(120,'Dragon Arms'),(121,'Dragonhawk Revolution'),(122,'Dragons Erythnul'),(123,'Dragons of the Black'),(124,'Drunken Thunder'),(125,'Drunks of Matoskan'),(126,'Dwarven Rock'),(127,'Dynasty of the Emerald'),(128,'Eastern Asylum'),(129,'Echo Sanctus'),(130,'Echoes of the Muphin'),(131,'Effreno Death'),(132,'Elite Guild'),(133,'Elite Legion'),(134,'Elite Veritas'),(135,'Elunes Meat'),(136,'Emerald Men'),(137,'Emerald Mjolnir'),(138,'Endless Defense'),(139,'Enemies of Bleeding'),(140,'Enternal Saber'),(141,'Evictors of the Returned'),(142,'Evil Guard'),(143,'Exalted Effect'),(144,'Eyes of a Night Elf'),(145,'Eyes of the Elton Souls'),(146,'Fallen Clan'),(147,'Fallen Milk'),(148,'Fenrir Seeker'),(149,'Final Army'),(150,'Flames of Ale Drinkers'),(151,'Flames of Antarian Chaos'),(152,'Forestt\'s Wrath'),(153,'Forgotten Within'),(154,'From Synergy'),(155,'Frozen Oblivion'),(156,'Gashlycrumb Rollers'),(157,'Giovannitwos Elune'),(158,'Glass Meridian'),(159,'Gnome Faction'),(160,'Gods Gold'),(161,'Gods of the Complete'),(162,'Gold Catchers'),(163,'Golden Legendz'),(164,'Golden Souls'),(165,'Goldshire Goats'),(166,'Good Azeroth'),(167,'Gotz Safety'),(168,'Grammaton Alliance'),(169,'Great Circle'),(170,'Guardians of Honor'),(171,'Guards of Frostmane'),(172,'Guild of La Mano Dragons'),(173,'Guild of the Puppet'),(174,'Haggles Brigade'),(175,'Hammer of the Moral'),(176,'Hand of the Iron'),(177,'Hands of Far Con Buddies'),(178,'Hearts Knights'),(179,'Hell Angels'),(180,'Hells Thorn'),(181,'Holy Darnassus'),(182,'Horde Abh'),(183,'Horde Dragons'),(184,'Horde Leaders'),(185,'Horde Squad'),(186,'Horde of Omnia'),(187,'Horde of Free Brigade'),(188,'Horde of Shadow Flush'),(189,'Hordes Buccaneers'),(190,'Hordes Marauders'),(191,'House Crusaders'),(192,'Immortality Honor'),(193,'Inside Poof'),(194,'Iron Boyz'),(195,'Iscariot Ginas'),(196,'Island Kimchi'),(197,'Jenovas Wild'),(198,'Kalimdor Darkness'),(199,'Keepers of Golden Misery'),(200,'Keggers of Alt Hand Aton'),(201,'Kill Mafia'),(202,'Killer Durotar'),(203,'Killer Force'),(204,'Kindred Yardies'),(205,'Kindred of King Assassin'),(206,'Kingdom of the Ordo Crew'),(207,'Kings Boys'),(208,'Kings Windstorm'),(209,'Kings of Blood Knuckle'),(210,'Kings of Dol Aegis'),(211,'Knight Combat'),(212,'Knight of Fuzzy Night'),(213,'Knights of Darkspear'),(214,'Knights of Heavens Grave'),(215,'Knights of Myrmidon Ivxx'),(216,'Knights of the Avenging'),(217,'Knights of the Ballpeen'),(218,'Knights of the Black'),(219,'Knights of the Bloodhoof'),(220,'Knights of the Sovereign'),(221,'Knights of the Storm'),(222,'Knights of the Zulian'),(223,'Last Ptesanwi'),(224,'League of Hate Crew Seek'),(225,'Legacy of Ninth Beard'),(226,'Legendary Sons'),(227,'Legion of Maple Syrup'),(228,'Legion of Public Works'),(229,'Legion of Three Course'),(230,'Legion of United Souls'),(231,'Legion of Westfall Gold'),(232,'Legion of the Dark'),(233,'Legionnaires of Skull'),(234,'Les Warriors'),(235,'Lifetakers Inc'),(236,'Light of Dark Spire'),(237,'Light of Jade Renegade'),(238,'Liquid Guild'),(239,'Lone Side'),(240,'Lords of Fallen Blood'),(241,'Los Frum'),(242,'Lost Boyz'),(243,'Lost Squad'),(244,'Mad Daggers'),(245,'Malice Fatale'),(246,'Mandate of Jade'),(247,'Marines of the Butt'),(248,'Mercenaries of the Death'),(249,'Midget Council'),(250,'Midgets of Dark Sexy'),(251,'Midnight Norrathians'),(252,'Midnight Slayer'),(253,'Midnight War'),(254,'Minions of the Shadow'),(255,'Ministry of the Allince'),(256,'Mithril Destiny'),(257,'Monarchs of Party Crew'),(258,'Money Call'),(259,'Moonwood Redeye'),(260,'Narrow Patrol'),(261,'New Clan'),(262,'Night Pack'),(263,'Nightmare Guild'),(264,'Ninja Pledge'),(265,'Nocturne of Totally Dead'),(266,'Obsidian Fish'),(267,'Old Cosa'),(268,'One Valor'),(269,'Opus Faithful'),(270,'Order of Alts oF Fate'),(271,'Order of Nagas Bike Hunt'),(272,'Order of Omega Wards'),(273,'Order of Pink'),(274,'Order of Shield Bed'),(275,'Order of the Alt Sheep'),(276,'Order of the Honor'),(277,'Order of the Divine Lord'),(278,'Ordo Force'),(279,'Orgrimmar Ones'),(280,'Out of Lw Downed Wrynn'),(281,'Out of Mithril Avengers'),(282,'Oxbloods Medivh'),(283,'Pally Guard'),(284,'Path of the Brain'),(285,'Peddlers of the Hidden'),(286,'Phantoms of Wicked'),(287,'Phoenix Keepers'),(288,'Pillowcase Azeroth'),(289,'Pillowcase Cats'),(290,'Pius Tribe'),(291,'Plague of Human Slayer'),(292,'Plan Hand'),(293,'Power of Tuatha De Blood'),(294,'Priest Guild'),(295,'Prophets of Fatima War'),(296,'Prophets of Outlaw'),(297,'Prophets of the Red Mean'),(298,'Protectors of Black Hand'),(299,'Pure Aequitas'),(300,'Question Thrall'),(301,'Quintessential Sister'),(302,'Rage of Prairie Black'),(303,'Rage of the Flame'),(304,'Raiders of Candy Heart'),(305,'Raiders of the Purple'),(306,'Raiders of the Sil'),(307,'Ram Runners'),(308,'Rangers Vengeance'),(309,'Rangers of Interitus'),(310,'Raven Clan'),(311,'Razzle Guardian'),(312,'Reapers of the Shadow'),(313,'Reckless Knights'),(314,'Red Byam'),(315,'Red Death'),(316,'Reign of Alliance Task'),(317,'Reign of Blazing Frell'),(318,'Reign of Pure Conway'),(319,'Restoration of Illegal'),(320,'Resurrection of Tenui'),(321,'Ronin Kalimdor'),(322,'Rotting Tears'),(323,'Ruins of Dark Azeroth'),(324,'Rulers of Devils'),(325,'Sacred Parts'),(326,'Sacred Society'),(327,'Sacrificial Brotherhood'),(328,'Sanguine Council'),(329,'Sapphic Exiles'),(330,'Savage Kalimdor'),(331,'Scourge of Eight Inches'),(332,'Scourge of Wow Knights'),(333,'Scythe Sauce'),(334,'Secret Clan'),(335,'Seki Council'),(336,'Seraph Legends'),(337,'Shaded Judgement'),(338,'Shadow America'),(339,'Shadow Boys'),(340,'Shadow Knights'),(341,'Shadowed Ghosts'),(342,'Shadowed Goat'),(343,'Shadows of Cole Trainz'),(344,'Shadows of Los Banditos'),(345,'Shattered Stormrage'),(346,'Silent Night'),(347,'Silver Fools'),(348,'Silversky Sun'),(349,'Sisters of Kalimdor'),(350,'Skulled Ironforge'),(351,'Slayers of the Primals'),(352,'Sleepy Steel'),(353,'Soldiers of Azeroth'),(354,'Soldiers of Stalker'),(355,'Sons of Lambent Virtue'),(356,'Sons of the Top Truth'),(357,'Soul Wish'),(358,'Souls of Elite Gnome'),(359,'Spanaway Metalheadz'),(360,'Spoony Demise'),(361,'Squires of Sacred Tribe'),(362,'Stagnant Jesters'),(363,'Stars of Gear Farming'),(364,'Stupid Crusaders'),(365,'Stop Guides'),(366,'Storm of the Mope\'s'),(367,'Stormrage Ferguson'),(368,'Stormtroopers of Fatima '),(369,'Stormwind Crew'),(370,'Straight Caedes'),(371,'Stronghold Angels'),(372,'Sturgeon Empire'),(373,'Survivors of Devil Club'),(374,'Sweet Bear'),(375,'Sword of Lost Evil'),(376,'Tainted Bunnies'),(377,'Talon of the Eclectic'),(378,'Team Kingdom'),(379,'Team United'),(380,'Tears of Eternal Kitties'),(381,'Tears of Phantom Druids'),(382,'Templar of Raid Dodgers'),(383,'Templars of Plagueware'),(384,'Terra Totem'),(385,'Terra War'),(386,'Abiem'),(387,'Aceofchaos'),(388,'Afterlife'),(389,'Aggression'),(390,'Alliance of Dark'),(391,'Altimate'),(392,'Ancona Fire'),(393,'Apocalypse'),(394,'Arcane Monkey'),(395,'Army of Spartans'),(396,'Avalon'),(397,'Avengers of Shining'),(398,'Azure Gangstaz'),(399,'Battlegnome'),(400,'Black Hand Haven'),(401,'Blackdraygon'),(402,'Blackout'),(403,'Blade'),(404,'Blades of Caer Eel'),(405,'Blades of Onyxia'),(406,'Blood Red Violence'),(407,'Blood of Red Powers'),(408,'Bloodycrusaders'),(409,'Blues Azeroth'),(410,'Blues Grimfang'),(411,'Bluethunder'),(412,'Bonds of Arcane'),(413,'Brimstone'),(414,'Broken Chaos'),(415,'Brood of Unknown'),(416,'Burning Dog Firewall'),(417,'Cabal'),(418,'Cake Gankers'),(419,'Cannabuddies'),(420,'Circle of Shadow'),(421,'Clan Blackwatch Few'),(422,'Clan Cats'),(423,'Clan Knights'),(424,'Clean Combinations'),(425,'Clean Up Guard'),(426,'Council of Dark'),(427,'Covenant'),(428,'Crimson Guild'),(429,'Crimson Marbock'),(430,'Crusaders of Horde'),(431,'Crusaders of Seksoni'),(432,'Cult of Clan Brigade'),(433,'Cult of the Pink'),(434,'Daggers of the Vile'),(435,'Dark'),(436,'Dark Dogs'),(437,'Dark Pain'),(438,'Darkfall'),(439,'Darkside Vanguard'),(440,'Darkside of Initium'),(441,'Daughters of the Elite'),(442,'Daytripper'),(443,'Deadfriends'),(444,'Defiant'),(445,'Dont Overwhelming'),(446,'Doom Pasta'),(447,'Dragon Redeye'),(448,'Dragons Flame'),(449,'Dreadlords'),(450,'Dublainn Crown'),(451,'Durban Protecters'),(452,'Echoes of Goldshire'),(453,'Elit of Dark Elune'),(454,'Emissaries of Furiou'),(455,'Eternal Chaos'),(456,'Eternus'),(457,'Exiie'),(458,'Expendable Shadow'),(459,'Faith of Desert'),(460,'Family Misfits'),(461,'Fere Darkness'),(462,'Final Tears'),(463,'Forsaken Boochies'),(464,'Gates of the Bloody'),(465,'Gnomes Lordaero'),(466,'Gods of Blackscar'),(467,'Gods of Twilight'),(468,'Gold Fighters'),(469,'Guardian Thieves'),(470,'Guardians of Gnome'),(471,'Hands of Redridge'),(472,'Hawk'),(473,'Hearts Images'),(474,'Hellborn Die'),(475,'Heroes Plague'),(476,'Horde Farmer'),(477,'Horde Honor'),(478,'Hotpocket'),(479,'Ignis Prophecy'),(480,'Illuminatie'),(481,'Immortal League'),(482,'Independant'),(483,'Infragilis Legion'),(484,'Jag'),(485,'Jookmaster'),(486,'Kataclysm'),(487,'Knight'),(488,'Knightelf'),(489,'Knights Thorn'),(490,'Knights of Gods Fury'),(491,'Knights of Lost Peon'),(492,'Knights of Mortal'),(493,'Knights of Samurai'),(494,'Kobra'),(495,'Leaders of Evil'),(496,'Leaders of Life'),(497,'League of Red Knight'),(498,'Legacy Meathooks'),(499,'Legion of the Blue'),(500,'Legion of Death'),(501,'Lemmings of Flaming'),(502,'Let Blood Gamer'),(503,'Light'),(504,'Little Hunters'),(505,'Lords of Vae Knight'),(506,'Mercenaries'),(507,'Midieval Vanguard'),(508,'Might of Dark Tong'),(509,'Mithril Justice'),(510,'Mithril Pepsi'),(511,'Mjollnir'),(512,'Moo Licht'),(513,'Morgantis'),(514,'Mulletmen'),(515,'Necrontyr of Eternal'),(516,'Nedrage Kills'),(517,'Night'),(518,'Nightfall'),(519,'Ninja Heroes'),(520,'Order of Gold'),(521,'Order of Warcraft'),(522,'Order of Warsong'),(523,'Over Louder'),(524,'Overlord'),(525,'Pants'),(526,'Pie'),(527,'Pretectors'),(528,'Project Disease'),(529,'Psychotics'),(530,'Puggers'),(531,'Pyreborne'),(532,'Queen of Meow'),(533,'Red Hood Thunder'),(534,'Reign of Uber Enigma'),(535,'Resurrection'),(536,'Ring of Honor'),(537,'Ropetown'),(538,'Royal Militia Blanco'),(539,'Samurai Banda'),(540,'Sanity'),(541,'Sauce'),(542,'Schoolyard Reapers'),(543,'Secrets of Hehog'),(544,'Seers'),(545,'Servants of Cyclone'),(546,'Seven'),(547,'Shadow Gate'),(548,'Shadow Misfits'),(549,'Shadow of Ninja Pain'),(550,'Shadowborn'),(551,'Shizam'),(552,'Shockers'),(553,'Shriek of Nightmare'),(554,'Silent Grunts'),(555,'Silent Legion'),(556,'Skunkdesigns'),(557,'Sorrow'),(558,'Souls of Azeroth Old'),(559,'Spazler'),(560,'Squirrels'),(561,'Stringville'),(562,'Stronghold of Reds'),(563,'Tha Handlers'),(564,'Thieves of Moral'),(565,'Thorium Claw'),(566,'Thread'),(567,'Thule'),(568,'Thunderslayers'),(569,'True Wow'),(570,'Trusted Minions'),(571,'Twilight Rangers'),(572,'Tyraels Aggression'),(573,'Ultimates'),(574,'Unforgiven Heresy'),(575,'Unholy Bards'),(576,'Unsung Efficiency'),(577,'Valley of the Demon'),(578,'Valor'),(579,'Violent Chaos'),(580,'Virus Eternal'),(581,'War'),(582,'Warsong Gnomeregan'),(583,'Westcoast'),(584,'Wicked'),(585,'Will of Chronicles'),(586,'Windsword Nightmare'),(587,'Wings of Oxy Claw'),(588,'Wrath of Elton'),(589,'Wut'),(590,'Yoricks Assassins'),(591,'Zeksonic Thieves'),(592,'Theramore Azeroth'),(593,'Thirstquencher Chaos'),(594,'Thralls Caribous'),(595,'Three Alive'),(596,'Titans of Blood Sun'),(597,'Torvus Dragons'),(598,'Tower of the Little'),(599,'True Team'),(600,'Tul Inc'),(601,'Twinks of Cold Club'),(602,'Twinks of Hidden Venture'),(603,'Ultimate Rules'),(604,'Undead Kingdom'),(605,'Unforgiven Destiny'),(606,'Unguilded War'),(607,'Unholy Cats'),(608,'Unholy Teeth'),(609,'Union of Burning Prz'),(610,'Unusual Guard'),(611,'Valiant Riderz'),(612,'Vanguard Omen'),(613,'Vanguard Redeemers'),(614,'Vanguard of Teutonic'),(615,'Vengeful Mayhem'),(616,'Verata Blackflame'),(617,'Vicious Renegade'),(618,'Vile Dead'),(619,'Voodoo Hearth'),(620,'War Legion'),(621,'Warlockian Tree'),(622,'Warlords of Kungfu Army'),(623,'Warriors of Happy Death'),(624,'Warriors of the Tundra'),(625,'Warsong Insanity'),(626,'Waste of Grey Death'),(627,'Wayfarers of Maple Leaf'),(628,'Wayward Agenda'),(629,'Web of Forgoten Warfare'),(630,'Wet Guard'),(631,'Wild Fire'),(632,'Will of the Forgotten'),(633,'Winds of Steve Irwin'),(634,'Wings of Emerald Minions'),(635,'Wintermane Good'),(636,'Witchhunters of Chaos'),(637,'With Sea'),(638,'Wrath of the Horde Troop'),(639,'Wtf Losers'),(640,'Xcalibur of Shogunz Depo'),(641,'Xelium Determination');
+
+/*Table structure for table `ai_playerbot_guild_tasks` */
+
+DROP TABLE IF EXISTS `ai_playerbot_guild_tasks`;
+
+CREATE TABLE `ai_playerbot_guild_tasks` (
+  `id` bigint(20) NOT NULL AUTO_INCREMENT,
+  `owner` bigint(20) NOT NULL,
+  `guildid` bigint(20) NOT NULL,
+  `time` bigint(20) NOT NULL,
+  `validIn` bigint(20) DEFAULT NULL,
+  `type` varchar(45) DEFAULT NULL,
+  `value` bigint(20) DEFAULT NULL,
+  `data` varchar(255) DEFAULT NULL,
+  PRIMARY KEY (`id`),
+  KEY `owner` (`owner`),
+  KEY `guildid` (`guildid`),
+  KEY `type` (`type`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+/*Data for the table `ai_playerbot_guild_tasks` */
+
+/*Table structure for table `ai_playerbot_names` */
+
+DROP TABLE IF EXISTS `ai_playerbot_names`;
+
+CREATE TABLE `ai_playerbot_names` (
+  `name_id` mediumint(8) NOT NULL AUTO_INCREMENT,
+  `name` varchar(13) NOT NULL,
+  `gender` tinyint(3) unsigned NOT NULL,
+  `race` smallint(5) unsigned NOT NULL,
+  `class` smallint(5) unsigned NOT NULL,
+  `purpose` int(11) unsigned NOT NULL,
+  `priority` bit(1) NOT NULL,
+  `in_use` bit(1) NOT NULL,
+  PRIMARY KEY (`name_id`),
+  UNIQUE KEY `name_id` (`name_id`),
+  UNIQUE KEY `name` (`name`)
+) ENGINE=MyISAM AUTO_INCREMENT=10001 DEFAULT CHARSET=utf8 ROW_FORMAT=FIXED COMMENT='PlayerbotAI AutoBot names';
+
+/*Data for the table `ai_playerbot_names` */
+
+insert  into `ai_playerbot_names`(`name_id`,`name`,`gender`,`race`,`class`,`purpose`,`priority`,`in_use`) values (1,'Cuan',255,65535,65535,4294967295,'\0','\0'),(2,'Ilit',255,65535,65535,4294967295,'\0','\0'),(3,'Yahaerai',255,65535,65535,4294967295,'\0','\0'),(4,'Adycrhesa',255,65535,65535,4294967295,'\0','\0'),(5,'Stimeenu',255,65535,65535,4294967295,'\0','\0'),(6,'Riarroseop',255,65535,65535,4294967295,'\0','\0'),(7,'Rigraemsi',255,65535,65535,4294967295,'\0','\0'),(8,'Iuneso',255,65535,65535,4294967295,'\0','\0'),(9,'Elmuorie',255,65535,65535,4294967295,'\0','\0'),(10,'Eaohea',255,65535,65535,4294967295,'\0','\0'),(11,'Whaaimpiidri',255,65535,65535,4294967295,'\0','\0'),(12,'Agtyiencra',255,65535,65535,4294967295,'\0','\0'),(13,'Ketnea',255,65535,65535,4294967295,'\0','\0'),(14,'Arpraerela',255,65535,65535,4294967295,'\0','\0'),(15,'Nirier',255,65535,65535,4294967295,'\0','\0'),(16,'Gaent',255,65535,65535,4294967295,'\0','\0'),(17,'Youeeso',255,65535,65535,4294967295,'\0','\0'),(18,'Eongdeathiic',255,65535,65535,4294967295,'\0','\0'),(19,'Stritosa',255,65535,65535,4294967295,'\0','\0'),(20,'Itaifein',255,65535,65535,4294967295,'\0','\0'),(21,'Desteoloest',255,65535,65535,4294967295,'\0','\0'),(22,'Inrodi',255,65535,65535,4294967295,'\0','\0'),(23,'Tiesoghaadny',255,65535,65535,4294967295,'\0','\0'),(24,'Noyoenie',255,65535,65535,4294967295,'\0','\0'),(25,'Agmaoga',255,65535,65535,4294967295,'\0','\0'),(26,'Uturoerim',255,65535,65535,4294967295,'\0','\0'),(27,'Spuicoab',255,65535,65535,4294967295,'\0','\0'),(28,'Acuseflini',255,65535,65535,4294967295,'\0','\0'),(29,'Erwoulase',255,65535,65535,4294967295,'\0','\0'),(30,'Lyerary',255,65535,65535,4294967295,'\0','\0'),(31,'Staheaoejgho',255,65535,65535,4294967295,'\0','\0'),(32,'Umaintosp',255,65535,65535,4294967295,'\0','\0'),(33,'Omeqis',255,65535,65535,4294967295,'\0','\0'),(34,'Seniosomocat',255,65535,65535,4294967295,'\0','\0'),(35,'Laewaulefi',255,65535,65535,4294967295,'\0','\0'),(36,'Eshalech',255,65535,65535,4294967295,'\0','\0'),(37,'Iflae',255,65535,65535,4294967295,'\0','\0'),(38,'Cauif',255,65535,65535,4294967295,'\0','\0'),(39,'Rarelmarial',255,65535,65535,4294967295,'\0','\0'),(40,'Erhoyeroneal',255,65535,65535,4294967295,'\0','\0'),(41,'Atriupbei',255,65535,65535,4294967295,'\0','\0'),(42,'Aleruficem',255,65535,65535,4294967295,'\0','\0'),(43,'Leiani',255,65535,65535,4294967295,'\0','\0'),(44,'Etiyb',255,65535,65535,4294967295,'\0','\0'),(45,'Hamoro',255,65535,65535,4294967295,'\0','\0'),(46,'Shiedfoeraa',255,65535,65535,4294967295,'\0','\0'),(47,'Siisa',255,65535,65535,4294967295,'\0','\0'),(48,'Erpoudcoel',255,65535,65535,4294967295,'\0','\0'),(49,'Neiea',255,65535,65535,4294967295,'\0','\0'),(50,'Ayospavae',255,65535,65535,4294967295,'\0','\0'),(51,'Xipoteiyse',255,65535,65535,4294967295,'\0','\0'),(52,'Tieniocif',255,65535,65535,4294967295,'\0','\0'),(53,'Naocoopic',255,65535,65535,4294967295,'\0','\0'),(54,'Ytwoabrise',255,65535,65535,4294967295,'\0','\0'),(55,'Opcoerical',255,65535,65535,4294967295,'\0','\0'),(56,'Okyestraec',255,65535,65535,4294967295,'\0','\0'),(57,'Okonekpaund',255,65535,65535,4294967295,'\0','\0'),(58,'Fastryaneara',255,65535,65535,4294967295,'\0','\0'),(59,'Istio',255,65535,65535,4294967295,'\0','\0'),(60,'Elaquoyya',255,65535,65535,4294967295,'\0','\0'),(61,'Privegais',255,65535,65535,4294967295,'\0','\0'),(62,'Eroiobipu',255,65535,65535,4294967295,'\0','\0'),(63,'Boisaisaot',255,65535,65535,4294967295,'\0','\0'),(64,'Toaysce',255,65535,65535,4294967295,'\0','\0'),(65,'Osici',255,65535,65535,4294967295,'\0','\0'),(66,'Voecy',255,65535,65535,4294967295,'\0','\0'),(67,'Iulcri',255,65535,65535,4294967295,'\0','\0'),(68,'Ciabatase',255,65535,65535,4294967295,'\0','\0'),(69,'Yaeay',255,65535,65535,4294967295,'\0','\0'),(70,'Oyit',255,65535,65535,4294967295,'\0','\0'),(71,'Etwiace',255,65535,65535,4294967295,'\0','\0'),(72,'Muni',255,65535,65535,4294967295,'\0','\0'),(73,'Ethtaegnmi',255,65535,65535,4294967295,'\0','\0'),(74,'Oyra',255,65535,65535,4294967295,'\0','\0'),(75,'Inmuinseoat',255,65535,65535,4294967295,'\0','\0'),(76,'Yonashuo',255,65535,65535,4294967295,'\0','\0'),(77,'Iesleeist',255,65535,65535,4294967295,'\0','\0'),(78,'Ayigste',255,65535,65535,4294967295,'\0','\0'),(79,'Vomeiug',255,65535,65535,4294967295,'\0','\0'),(80,'Aoevi',255,65535,65535,4294967295,'\0','\0'),(81,'Ersnyla',255,65535,65535,4294967295,'\0','\0'),(82,'Uplychyevedi',255,65535,65535,4294967295,'\0','\0'),(83,'Otueialfe',255,65535,65535,4294967295,'\0','\0'),(84,'Tiimaite',255,65535,65535,4294967295,'\0','\0'),(85,'Nioreyro',255,65535,65535,4294967295,'\0','\0'),(86,'Odraemab',255,65535,65535,4294967295,'\0','\0'),(87,'Meat',255,65535,65535,4294967295,'\0','\0'),(88,'Ibliab',255,65535,65535,4294967295,'\0','\0'),(89,'Lueid',255,65535,65535,4294967295,'\0','\0'),(90,'Yngyalmeni',255,65535,65535,4294967295,'\0','\0'),(91,'Ineyicaci',255,65535,65535,4294967295,'\0','\0'),(92,'Uroloveiab',255,65535,65535,4294967295,'\0','\0'),(93,'Kierer',255,65535,65535,4294967295,'\0','\0'),(94,'Antesadinag',255,65535,65535,4294967295,'\0','\0'),(95,'Abmuatmour',255,65535,65535,4294967295,'\0','\0'),(96,'Ibnere',255,65535,65535,4294967295,'\0','\0'),(97,'Tele',255,65535,65535,4294967295,'\0','\0'),(98,'Eyngisym',255,65535,65535,4294967295,'\0','\0'),(99,'Insene',255,65535,65535,4294967295,'\0','\0'),(100,'Athcheoirdlo',255,65535,65535,4294967295,'\0','\0'),(101,'Ompsaetpobo',255,65535,65535,4294967295,'\0','\0'),(102,'Aleaemyau',255,65535,65535,4294967295,'\0','\0'),(103,'Bimoloaanbla',255,65535,65535,4294967295,'\0','\0'),(104,'Amashuulid',255,65535,65535,4294967295,'\0','\0'),(105,'Liitiori',255,65535,65535,4294967295,'\0','\0'),(106,'Oroliliel',255,65535,65535,4294967295,'\0','\0'),(107,'Piiftap',255,65535,65535,4294967295,'\0','\0'),(108,'Ostamu',255,65535,65535,4294967295,'\0','\0'),(109,'Iorhoi',255,65535,65535,4294967295,'\0','\0'),(110,'Enge',255,65535,65535,4294967295,'\0','\0'),(111,'Ahleluali',255,65535,65535,4294967295,'\0','\0'),(112,'Ilyvione',255,65535,65535,4294967295,'\0','\0'),(113,'Nimoawao',255,65535,65535,4294967295,'\0','\0'),(114,'Teswoenedau',255,65535,65535,4294967295,'\0','\0'),(115,'Tysha',255,65535,65535,4294967295,'\0','\0'),(116,'Raosoamen',255,65535,65535,4294967295,'\0','\0'),(117,'Ugruepeke',255,65535,65535,4294967295,'\0','\0'),(118,'Teulat',255,65535,65535,4294967295,'\0','\0'),(119,'Cielpruroor',255,65535,65535,4294967295,'\0','\0'),(120,'Oyroichet',255,65535,65535,4294967295,'\0','\0'),(121,'Aeronaesa',255,65535,65535,4294967295,'\0','\0'),(122,'Eckomayii',255,65535,65535,4294967295,'\0','\0'),(123,'Otearccheto',255,65535,65535,4294967295,'\0','\0'),(124,'Oinlo',255,65535,65535,4294967295,'\0','\0'),(125,'Eulyoflamu',255,65535,65535,4294967295,'\0','\0'),(126,'Raastafo',255,65535,65535,4294967295,'\0','\0'),(127,'Prorilapoun',255,65535,65535,4294967295,'\0','\0'),(128,'Eymaent',255,65535,65535,4294967295,'\0','\0'),(129,'Ocinealon',255,65535,65535,4294967295,'\0','\0'),(130,'Yisoc',255,65535,65535,4294967295,'\0','\0'),(131,'Alureeicis',255,65535,65535,4294967295,'\0','\0'),(132,'Iraker',255,65535,65535,4294967295,'\0','\0'),(133,'Eisiet',255,65535,65535,4294967295,'\0','\0'),(134,'Jualenefily',255,65535,65535,4294967295,'\0','\0'),(135,'Ethasiisenxo',255,65535,65535,4294967295,'\0','\0'),(136,'Ogetiyija',255,65535,65535,4294967295,'\0','\0'),(137,'Coucreasto',255,65535,65535,4294967295,'\0','\0'),(138,'Ceyrnac',255,65535,65535,4294967295,'\0','\0'),(139,'Teonierayp',255,65535,65535,4294967295,'\0','\0'),(140,'Chotelerer',255,65535,65535,4294967295,'\0','\0'),(141,'Uapra',255,65535,65535,4294967295,'\0','\0'),(142,'Ydepe',255,65535,65535,4294967295,'\0','\0'),(143,'Liosthe',255,65535,65535,4294967295,'\0','\0'),(144,'Reineatitle',255,65535,65535,4294967295,'\0','\0'),(145,'Lochekeu',255,65535,65535,4294967295,'\0','\0'),(146,'Samiefetuit',255,65535,65535,4294967295,'\0','\0'),(147,'Ersiuuphaeng',255,65535,65535,4294967295,'\0','\0'),(148,'Usericlao',255,65535,65535,4294967295,'\0','\0'),(149,'Stuaiiack',255,65535,65535,4294967295,'\0','\0'),(150,'Oioyuer',255,65535,65535,4294967295,'\0','\0'),(151,'Dren',255,65535,65535,4294967295,'\0','\0'),(152,'Iienneify',255,65535,65535,4294967295,'\0','\0'),(153,'Uuarcteyn',255,65535,65535,4294967295,'\0','\0'),(154,'Olsuraeom',255,65535,65535,4294967295,'\0','\0'),(155,'Imumutrishi',255,65535,65535,4294967295,'\0','\0'),(156,'Iigoxaoye',255,65535,65535,4294967295,'\0','\0'),(157,'Iaisgi',255,65535,65535,4294967295,'\0','\0'),(158,'Ystri',255,65535,65535,4294967295,'\0','\0'),(159,'Lusiurho',255,65535,65535,4294967295,'\0','\0'),(160,'Neayisal',255,65535,65535,4294967295,'\0','\0'),(161,'Afaa',255,65535,65535,4294967295,'\0','\0'),(162,'Onefnerevi',255,65535,65535,4294967295,'\0','\0'),(163,'Iteyeneaw',255,65535,65535,4294967295,'\0','\0'),(164,'Byubiubeco',255,65535,65535,4294967295,'\0','\0'),(165,'Geaoenis',255,65535,65535,4294967295,'\0','\0'),(166,'Adamoifona',255,65535,65535,4294967295,'\0','\0'),(167,'Edwiaban',255,65535,65535,4294967295,'\0','\0'),(168,'Meiacyeru',255,65535,65535,4294967295,'\0','\0'),(169,'Aplyeyalanra',255,65535,65535,4294967295,'\0','\0'),(170,'Rieaninespi',255,65535,65535,4294967295,'\0','\0'),(171,'Scheeschiero',255,65535,65535,4294967295,'\0','\0'),(172,'Arkrafliu',255,65535,65535,4294967295,'\0','\0'),(173,'Aronaah',255,65535,65535,4294967295,'\0','\0'),(174,'Emerla',255,65535,65535,4294967295,'\0','\0'),(175,'Rhasemieaci',255,65535,65535,4294967295,'\0','\0'),(176,'Atoma',255,65535,65535,4294967295,'\0','\0'),(177,'Opaghancoar',255,65535,65535,4294967295,'\0','\0'),(178,'Bleitrieae',255,65535,65535,4294967295,'\0','\0'),(179,'Osaivocomo',255,65535,65535,4294967295,'\0','\0'),(180,'Anodivli',255,65535,65535,4294967295,'\0','\0'),(181,'Izaneunbo',255,65535,65535,4294967295,'\0','\0'),(182,'Eoctniisi',255,65535,65535,4294967295,'\0','\0'),(183,'Icizsycheh',255,65535,65535,4294967295,'\0','\0'),(184,'Essar',255,65535,65535,4294967295,'\0','\0'),(185,'Eumalioo',255,65535,65535,4294967295,'\0','\0'),(186,'Bunoovane',255,65535,65535,4294967295,'\0','\0'),(187,'Chiama',255,65535,65535,4294967295,'\0','\0'),(188,'Imtiob',255,65535,65535,4294967295,'\0','\0'),(189,'Urefpligruco',255,65535,65535,4294967295,'\0','\0'),(190,'Erakimze',255,65535,65535,4294967295,'\0','\0'),(191,'Iangoecayond',255,65535,65535,4294967295,'\0','\0'),(192,'Yoroboakix',255,65535,65535,4294967295,'\0','\0'),(193,'Stoeea',255,65535,65535,4294967295,'\0','\0'),(194,'Indio',255,65535,65535,4294967295,'\0','\0'),(195,'Isloa',255,65535,65535,4294967295,'\0','\0'),(196,'Eatolisuret',255,65535,65535,4294967295,'\0','\0'),(197,'Edetirynaus',255,65535,65535,4294967295,'\0','\0'),(198,'Occheyoulro',255,65535,65535,4294967295,'\0','\0'),(199,'Ubainteoer',255,65535,65535,4294967295,'\0','\0'),(200,'Ilfreceane',255,65535,65535,4294967295,'\0','\0'),(201,'Atonorori',255,65535,65535,4294967295,'\0','\0'),(202,'Adfleledeip',255,65535,65535,4294967295,'\0','\0'),(203,'Ocbeul',255,65535,65535,4294967295,'\0','\0'),(204,'Undopheyie',255,65535,65535,4294967295,'\0','\0'),(205,'Sothete',255,65535,65535,4294967295,'\0','\0'),(206,'Usrawaanir',255,65535,65535,4294967295,'\0','\0'),(207,'Aroiatbistro',255,65535,65535,4294967295,'\0','\0'),(208,'Culilile',255,65535,65535,4294967295,'\0','\0'),(209,'Odioyusgliiz',255,65535,65535,4294967295,'\0','\0'),(210,'Rizoossneop',255,65535,65535,4294967295,'\0','\0'),(211,'Eyoigae',255,65535,65535,4294967295,'\0','\0'),(212,'Orea',255,65535,65535,4294967295,'\0','\0'),(213,'Rioceric',255,65535,65535,4294967295,'\0','\0'),(214,'Osariai',255,65535,65535,4294967295,'\0','\0'),(215,'Caikeabinis',255,65535,65535,4294967295,'\0','\0'),(216,'Aupissohcin',255,65535,65535,4294967295,'\0','\0'),(217,'Nieroachek',255,65535,65535,4294967295,'\0','\0'),(218,'Eatipedi',255,65535,65535,4294967295,'\0','\0'),(219,'Eyteyngleilp',255,65535,65535,4294967295,'\0','\0'),(220,'Alcepe',255,65535,65535,4294967295,'\0','\0'),(221,'Ogtyabstoiz',255,65535,65535,4294967295,'\0','\0'),(222,'Noroengut',255,65535,65535,4294967295,'\0','\0'),(223,'Mitamac',255,65535,65535,4294967295,'\0','\0'),(224,'Idul',255,65535,65535,4294967295,'\0','\0'),(225,'Ritana',255,65535,65535,4294967295,'\0','\0'),(226,'Aepmuleshige',255,65535,65535,4294967295,'\0','\0'),(227,'Esussdoe',255,65535,65535,4294967295,'\0','\0'),(228,'Iame',255,65535,65535,4294967295,'\0','\0'),(229,'Upeveolsaas',255,65535,65535,4294967295,'\0','\0'),(230,'Sceycerne',255,65535,65535,4294967295,'\0','\0'),(231,'Peesholecraa',255,65535,65535,4294967295,'\0','\0'),(232,'Akcefoveiss',255,65535,65535,4294967295,'\0','\0'),(233,'Cospaulyi',255,65535,65535,4294967295,'\0','\0'),(234,'Noilwaisio',255,65535,65535,4294967295,'\0','\0'),(235,'Aunodebo',255,65535,65535,4294967295,'\0','\0'),(236,'Eocsounkora',255,65535,65535,4294967295,'\0','\0'),(237,'Ehyes',255,65535,65535,4294967295,'\0','\0'),(238,'Troic',255,65535,65535,4294967295,'\0','\0'),(239,'Onmibible',255,65535,65535,4294967295,'\0','\0'),(240,'Iultismewoac',255,65535,65535,4294967295,'\0','\0'),(241,'Reyikovu',255,65535,65535,4294967295,'\0','\0'),(242,'Acoaga',255,65535,65535,4294967295,'\0','\0'),(243,'Doore',255,65535,65535,4294967295,'\0','\0'),(244,'Eibdaeng',255,65535,65535,4294967295,'\0','\0'),(245,'Oinsuer',255,65535,65535,4294967295,'\0','\0'),(246,'Scistociae',255,65535,65535,4294967295,'\0','\0'),(247,'Gemiecipre',255,65535,65535,4294967295,'\0','\0'),(248,'Reacop',255,65535,65535,4294967295,'\0','\0'),(249,'Erooayil',255,65535,65535,4294967295,'\0','\0'),(250,'Yoodan',255,65535,65535,4294967295,'\0','\0'),(251,'Jaedhebiamu',255,65535,65535,4294967295,'\0','\0'),(252,'Istdibo',255,65535,65535,4294967295,'\0','\0'),(253,'Oraacumaeng',255,65535,65535,4294967295,'\0','\0'),(254,'Croaengye',255,65535,65535,4294967295,'\0','\0'),(255,'Roenethexart',255,65535,65535,4294967295,'\0','\0'),(256,'Azsaashir',255,65535,65535,4294967295,'\0','\0'),(257,'Bitreiepi',255,65535,65535,4294967295,'\0','\0'),(258,'Ayapsuno',255,65535,65535,4294967295,'\0','\0'),(259,'Olne',255,65535,65535,4294967295,'\0','\0'),(260,'Iadisi',255,65535,65535,4294967295,'\0','\0'),(261,'Itmeecelera',255,65535,65535,4294967295,'\0','\0'),(262,'Uzluailan',255,65535,65535,4294967295,'\0','\0'),(263,'Assigh',255,65535,65535,4294967295,'\0','\0'),(264,'Chamey',255,65535,65535,4294967295,'\0','\0'),(265,'Iiroa',255,65535,65535,4294967295,'\0','\0'),(266,'Loorephyri',255,65535,65535,4294967295,'\0','\0'),(267,'Ewnudli',255,65535,65535,4294967295,'\0','\0'),(268,'Yazaedigate',255,65535,65535,4294967295,'\0','\0'),(269,'Alpaul',255,65535,65535,4294967295,'\0','\0'),(270,'Repaoliseoc',255,65535,65535,4294967295,'\0','\0'),(271,'Ipeit',255,65535,65535,4294967295,'\0','\0'),(272,'Owpreti',255,65535,65535,4294967295,'\0','\0'),(273,'Temaicainik',255,65535,65535,4294967295,'\0','\0'),(274,'Iamahyon',255,65535,65535,4294967295,'\0','\0'),(275,'Eroxaoyera',255,65535,65535,4294967295,'\0','\0'),(276,'Hanagoory',255,65535,65535,4294967295,'\0','\0'),(277,'Gaumigisviod',255,65535,65535,4294967295,'\0','\0'),(278,'Onreat',255,65535,65535,4294967295,'\0','\0'),(279,'Amingmoumepa',255,65535,65535,4294967295,'\0','\0'),(280,'Itualcirye',255,65535,65535,4294967295,'\0','\0'),(281,'Atank',255,65535,65535,4294967295,'\0','\0'),(282,'Ayminefa',255,65535,65535,4294967295,'\0','\0'),(283,'Emenreficli',255,65535,65535,4294967295,'\0','\0'),(284,'Erisdho',255,65535,65535,4294967295,'\0','\0'),(285,'Imneao',255,65535,65535,4294967295,'\0','\0'),(286,'Rezaidikdi',255,65535,65535,4294967295,'\0','\0'),(287,'Ereat',255,65535,65535,4294967295,'\0','\0'),(288,'Erpiylahro',255,65535,65535,4294967295,'\0','\0'),(289,'Yoleoubet',255,65535,65535,4294967295,'\0','\0'),(290,'Niradoeyee',255,65535,65535,4294967295,'\0','\0'),(291,'Erteflaonla',255,65535,65535,4294967295,'\0','\0'),(292,'Ueneosibte',255,65535,65535,4294967295,'\0','\0'),(293,'Neleais',255,65535,65535,4294967295,'\0','\0'),(294,'Anelediudu',255,65535,65535,4294967295,'\0','\0'),(295,'Maetriabox',255,65535,65535,4294967295,'\0','\0'),(296,'Itulni',255,65535,65535,4294967295,'\0','\0'),(297,'Emysceer',255,65535,65535,4294967295,'\0','\0'),(298,'Gamabacpeeck',255,65535,65535,4294967295,'\0','\0'),(299,'Casii',255,65535,65535,4294967295,'\0','\0'),(300,'Praryinial',255,65535,65535,4294967295,'\0','\0'),(301,'Ipatielana',255,65535,65535,4294967295,'\0','\0'),(302,'Lophirielpi',255,65535,65535,4294967295,'\0','\0'),(303,'Ystere',255,65535,65535,4294967295,'\0','\0'),(304,'Yein',255,65535,65535,4294967295,'\0','\0'),(305,'Lerew',255,65535,65535,4294967295,'\0','\0'),(306,'Ifle',255,65535,65535,4294967295,'\0','\0'),(307,'Niial',255,65535,65535,4294967295,'\0','\0'),(308,'Albusoni',255,65535,65535,4294967295,'\0','\0'),(309,'Ytiesiare',255,65535,65535,4294967295,'\0','\0'),(310,'Aeero',255,65535,65535,4294967295,'\0','\0'),(311,'Ivboaeeske',255,65535,65535,4294967295,'\0','\0'),(312,'Erereraanye',255,65535,65535,4294967295,'\0','\0'),(313,'Toedale',255,65535,65535,4294967295,'\0','\0'),(314,'Zema',255,65535,65535,4294967295,'\0','\0'),(315,'Oaha',255,65535,65535,4294967295,'\0','\0'),(316,'Yatcooyiki',255,65535,65535,4294967295,'\0','\0'),(317,'Tromahyeil',255,65535,65535,4294967295,'\0','\0'),(318,'Aoed',255,65535,65535,4294967295,'\0','\0'),(319,'Ontoeovothan',255,65535,65535,4294967295,'\0','\0'),(320,'Neililiai',255,65535,65535,4294967295,'\0','\0'),(321,'Otagermi',255,65535,65535,4294967295,'\0','\0'),(322,'Acua',255,65535,65535,4294967295,'\0','\0'),(323,'Edualaheth',255,65535,65535,4294967295,'\0','\0'),(324,'Yoanuet',255,65535,65535,4294967295,'\0','\0'),(325,'Riliiagyae',255,65535,65535,4294967295,'\0','\0'),(326,'Hocoinerays',255,65535,65535,4294967295,'\0','\0'),(327,'Yaaeoca',255,65535,65535,4294967295,'\0','\0'),(328,'Iete',255,65535,65535,4294967295,'\0','\0'),(329,'Clionieayu',255,65535,65535,4294967295,'\0','\0'),(330,'Iemasehoc',255,65535,65535,4294967295,'\0','\0'),(331,'Oeipeisspo',255,65535,65535,4294967295,'\0','\0'),(332,'Veiodayeif',255,65535,65535,4294967295,'\0','\0'),(333,'Antamisanneu',255,65535,65535,4294967295,'\0','\0'),(334,'Ayistmoumins',255,65535,65535,4294967295,'\0','\0'),(335,'Itarer',255,65535,65535,4294967295,'\0','\0'),(336,'Saite',255,65535,65535,4294967295,'\0','\0'),(337,'Enovespu',255,65535,65535,4294967295,'\0','\0'),(338,'Rena',255,65535,65535,4294967295,'\0','\0'),(339,'Craneenyley',255,65535,65535,4294967295,'\0','\0'),(340,'Olaegu',255,65535,65535,4294967295,'\0','\0'),(341,'Aeoc',255,65535,65535,4294967295,'\0','\0'),(342,'Ertoab',255,65535,65535,4294967295,'\0','\0'),(343,'Aniar',255,65535,65535,4294967295,'\0','\0'),(344,'Umomwaisoss',255,65535,65535,4294967295,'\0','\0'),(345,'Oardemeaba',255,65535,65535,4294967295,'\0','\0'),(346,'Yiocredoes',255,65535,65535,4294967295,'\0','\0'),(347,'Eoinsiangit',255,65535,65535,4294967295,'\0','\0'),(348,'Lianiflidyna',255,65535,65535,4294967295,'\0','\0'),(349,'Ilobiit',255,65535,65535,4294967295,'\0','\0'),(350,'Ogghiecapta',255,65535,65535,4294967295,'\0','\0'),(351,'Meroabiejic',255,65535,65535,4294967295,'\0','\0'),(352,'Yeturitro',255,65535,65535,4294967295,'\0','\0'),(353,'Anaraengue',255,65535,65535,4294967295,'\0','\0'),(354,'Eiableatne',255,65535,65535,4294967295,'\0','\0'),(355,'Arly',255,65535,65535,4294967295,'\0','\0'),(356,'Baneon',255,65535,65535,4294967295,'\0','\0'),(357,'Chei',255,65535,65535,4294967295,'\0','\0'),(358,'Anatne',255,65535,65535,4294967295,'\0','\0'),(359,'Naare',255,65535,65535,4294967295,'\0','\0'),(360,'Eheni',255,65535,65535,4294967295,'\0','\0'),(361,'Miaextraoe',255,65535,65535,4294967295,'\0','\0'),(362,'Duomurer',255,65535,65535,4294967295,'\0','\0'),(363,'Aroareumab',255,65535,65535,4294967295,'\0','\0'),(364,'Pory',255,65535,65535,4294967295,'\0','\0'),(365,'Coutiteal',255,65535,65535,4294967295,'\0','\0'),(366,'Tabu',255,65535,65535,4294967295,'\0','\0'),(367,'Ackusterthie',255,65535,65535,4294967295,'\0','\0'),(368,'Abicniaeog',255,65535,65535,4294967295,'\0','\0'),(369,'Eutaachoay',255,65535,65535,4294967295,'\0','\0'),(370,'Eceurfuel',255,65535,65535,4294967295,'\0','\0'),(371,'Erooe',255,65535,65535,4294967295,'\0','\0'),(372,'Neaspuaten',255,65535,65535,4294967295,'\0','\0'),(373,'Aieinayo',255,65535,65535,4294967295,'\0','\0'),(374,'Moate',255,65535,65535,4294967295,'\0','\0'),(375,'Nuicriey',255,65535,65535,4294967295,'\0','\0'),(376,'Dodepo',255,65535,65535,4294967295,'\0','\0'),(377,'Aunorgo',255,65535,65535,4294967295,'\0','\0'),(378,'Isassyercem',255,65535,65535,4294967295,'\0','\0'),(379,'Migioible',255,65535,65535,4294967295,'\0','\0'),(380,'Bonorio',255,65535,65535,4294967295,'\0','\0'),(381,'Ayoistroe',255,65535,65535,4294967295,'\0','\0'),(382,'Oeer',255,65535,65535,4294967295,'\0','\0'),(383,'Rafiomeesp',255,65535,65535,4294967295,'\0','\0'),(384,'Eteu',255,65535,65535,4294967295,'\0','\0'),(385,'Asheyestra',255,65535,65535,4294967295,'\0','\0'),(386,'Atauu',255,65535,65535,4294967295,'\0','\0'),(387,'Untayege',255,65535,65535,4294967295,'\0','\0'),(388,'Irsaudabev',255,65535,65535,4294967295,'\0','\0'),(389,'Iitgearah',255,65535,65535,4294967295,'\0','\0'),(390,'Applitaeti',255,65535,65535,4294967295,'\0','\0'),(391,'Leovy',255,65535,65535,4294967295,'\0','\0'),(392,'Anod',255,65535,65535,4294967295,'\0','\0'),(393,'Ronisara',255,65535,65535,4294967295,'\0','\0'),(394,'Ketidre',255,65535,65535,4294967295,'\0','\0'),(395,'Uanet',255,65535,65535,4294967295,'\0','\0'),(396,'Oceler',255,65535,65535,4294967295,'\0','\0'),(397,'Ivwhiesmte',255,65535,65535,4294967295,'\0','\0'),(398,'Yiymped',255,65535,65535,4294967295,'\0','\0'),(399,'Isowheyngu',255,65535,65535,4294967295,'\0','\0'),(400,'Orev',255,65535,65535,4294967295,'\0','\0'),(401,'Erstecaijala',255,65535,65535,4294967295,'\0','\0'),(402,'Ogicecegop',255,65535,65535,4294967295,'\0','\0'),(403,'Eheamlaaten',255,65535,65535,4294967295,'\0','\0'),(404,'Yiahema',255,65535,65535,4294967295,'\0','\0'),(405,'Nobuilasy',255,65535,65535,4294967295,'\0','\0'),(406,'Enalua',255,65535,65535,4294967295,'\0','\0'),(407,'Ateole',255,65535,65535,4294967295,'\0','\0'),(408,'Omiabenier',255,65535,65535,4294967295,'\0','\0'),(409,'Pamiismod',255,65535,65535,4294967295,'\0','\0'),(410,'Ewogrecola',255,65535,65535,4294967295,'\0','\0'),(411,'Pauadotao',255,65535,65535,4294967295,'\0','\0'),(412,'Roivey',255,65535,65535,4294967295,'\0','\0'),(413,'Maraibaror',255,65535,65535,4294967295,'\0','\0'),(414,'Reaynive',255,65535,65535,4294967295,'\0','\0'),(415,'Esscha',255,65535,65535,4294967295,'\0','\0'),(416,'Schealzewoya',255,65535,65535,4294967295,'\0','\0'),(417,'Ipohocanic',255,65535,65535,4294967295,'\0','\0'),(418,'Blinoumey',255,65535,65535,4294967295,'\0','\0'),(419,'Civonmae',255,65535,65535,4294967295,'\0','\0'),(420,'Teelaefgape',255,65535,65535,4294967295,'\0','\0'),(421,'Aisplaay',255,65535,65535,4294967295,'\0','\0'),(422,'Alaociny',255,65535,65535,4294967295,'\0','\0'),(423,'Enite',255,65535,65535,4294967295,'\0','\0'),(424,'Ceuc',255,65535,65535,4294967295,'\0','\0'),(425,'Osrhetememi',255,65535,65535,4294967295,'\0','\0'),(426,'Asciraoiss',255,65535,65535,4294967295,'\0','\0'),(427,'Eochya',255,65535,65535,4294967295,'\0','\0'),(428,'Caopreaor',255,65535,65535,4294967295,'\0','\0'),(429,'Keoaote',255,65535,65535,4294967295,'\0','\0'),(430,'Deryacoeron',255,65535,65535,4294967295,'\0','\0'),(431,'Noiri',255,65535,65535,4294967295,'\0','\0'),(432,'Deueyro',255,65535,65535,4294967295,'\0','\0'),(433,'Itagoacrayst',255,65535,65535,4294967295,'\0','\0'),(434,'Abneesi',255,65535,65535,4294967295,'\0','\0'),(435,'Meoi',255,65535,65535,4294967295,'\0','\0'),(436,'Axamlene',255,65535,65535,4294967295,'\0','\0'),(437,'Chaaweng',255,65535,65535,4294967295,'\0','\0'),(438,'Esengaost',255,65535,65535,4294967295,'\0','\0'),(439,'Fleracehayse',255,65535,65535,4294967295,'\0','\0'),(440,'Aeubtizetru',255,65535,65535,4294967295,'\0','\0'),(441,'Strogioemis',255,65535,65535,4294967295,'\0','\0'),(442,'Ayegahi',255,65535,65535,4294967295,'\0','\0'),(443,'Oyol',255,65535,65535,4294967295,'\0','\0'),(444,'Eugyacho',255,65535,65535,4294967295,'\0','\0'),(445,'Ithaef',255,65535,65535,4294967295,'\0','\0'),(446,'Irghoecteawo',255,65535,65535,4294967295,'\0','\0'),(447,'Inat',255,65535,65535,4294967295,'\0','\0'),(448,'Tideulcaoer',255,65535,65535,4294967295,'\0','\0'),(449,'Roehiar',255,65535,65535,4294967295,'\0','\0'),(450,'Dateameze',255,65535,65535,4294967295,'\0','\0'),(451,'Ermaieera',255,65535,65535,4294967295,'\0','\0'),(452,'Poumumweynko',255,65535,65535,4294967295,'\0','\0'),(453,'Opheoad',255,65535,65535,4294967295,'\0','\0'),(454,'Oshat',255,65535,65535,4294967295,'\0','\0'),(455,'Heere',255,65535,65535,4294967295,'\0','\0'),(456,'Atoremeibig',255,65535,65535,4294967295,'\0','\0'),(457,'Flerpero',255,65535,65535,4294967295,'\0','\0'),(458,'Tishayen',255,65535,65535,4294967295,'\0','\0'),(459,'Uclualete',255,65535,65535,4294967295,'\0','\0'),(460,'Eiestvie',255,65535,65535,4294967295,'\0','\0'),(461,'Ubsiahyaomi',255,65535,65535,4294967295,'\0','\0'),(462,'Isioarke',255,65535,65535,4294967295,'\0','\0'),(463,'Beinoti',255,65535,65535,4294967295,'\0','\0'),(464,'Alaspoasixo',255,65535,65535,4294967295,'\0','\0'),(465,'Teibalavesho',255,65535,65535,4294967295,'\0','\0'),(466,'Ecicia',255,65535,65535,4294967295,'\0','\0'),(467,'Poeumo',255,65535,65535,4294967295,'\0','\0'),(468,'Pesiasifbi',255,65535,65535,4294967295,'\0','\0'),(469,'Iillacibeen',255,65535,65535,4294967295,'\0','\0'),(470,'Acerne',255,65535,65535,4294967295,'\0','\0'),(471,'Yerdiasa',255,65535,65535,4294967295,'\0','\0'),(472,'Tolaiteathm',255,65535,65535,4294967295,'\0','\0'),(473,'Pryculo',255,65535,65535,4294967295,'\0','\0'),(474,'Aosxurouso',255,65535,65535,4294967295,'\0','\0'),(475,'Idyynyont',255,65535,65535,4294967295,'\0','\0'),(476,'Atquer',255,65535,65535,4294967295,'\0','\0'),(477,'Uorechos',255,65535,65535,4294967295,'\0','\0'),(478,'Ecraenag',255,65535,65535,4294967295,'\0','\0'),(479,'Tieinee',255,65535,65535,4294967295,'\0','\0'),(480,'Deneula',255,65535,65535,4294967295,'\0','\0'),(481,'Icenanfly',255,65535,65535,4294967295,'\0','\0'),(482,'Edyeneage',255,65535,65535,4294967295,'\0','\0'),(483,'Aimoyiri',255,65535,65535,4294967295,'\0','\0'),(484,'Eigeniizi',255,65535,65535,4294967295,'\0','\0'),(485,'Reutyaczy',255,65535,65535,4294967295,'\0','\0'),(486,'Iupomang',255,65535,65535,4294967295,'\0','\0'),(487,'Adieitego',255,65535,65535,4294967295,'\0','\0'),(488,'Resoba',255,65535,65535,4294967295,'\0','\0'),(489,'Enalde',255,65535,65535,4294967295,'\0','\0'),(490,'Daausteiess',255,65535,65535,4294967295,'\0','\0'),(491,'Onti',255,65535,65535,4294967295,'\0','\0'),(492,'Ijiea',255,65535,65535,4294967295,'\0','\0'),(493,'Uina',255,65535,65535,4294967295,'\0','\0'),(494,'Eaigeonoy',255,65535,65535,4294967295,'\0','\0'),(495,'Iooyco',255,65535,65535,4294967295,'\0','\0'),(496,'Opestoxiok',255,65535,65535,4294967295,'\0','\0'),(497,'Aneyieway',255,65535,65535,4294967295,'\0','\0'),(498,'Oahis',255,65535,65535,4294967295,'\0','\0'),(499,'Mouewreoip',255,65535,65535,4294967295,'\0','\0'),(500,'Avatpremi',255,65535,65535,4294967295,'\0','\0'),(501,'Iediswialry',255,65535,65535,4294967295,'\0','\0'),(502,'Ichparier',255,65535,65535,4294967295,'\0','\0'),(503,'Adernedo',255,65535,65535,4294967295,'\0','\0'),(504,'Utsticemp',255,65535,65535,4294967295,'\0','\0'),(505,'Ecreebco',255,65535,65535,4294967295,'\0','\0'),(506,'Ohaenritha',255,65535,65535,4294967295,'\0','\0'),(507,'Aheatxech',255,65535,65535,4294967295,'\0','\0'),(508,'Apco',255,65535,65535,4294967295,'\0','\0'),(509,'Ulenoron',255,65535,65535,4294967295,'\0','\0'),(510,'Eyfemihaesya',255,65535,65535,4294967295,'\0','\0'),(511,'Oeruckewoyo',255,65535,65535,4294967295,'\0','\0'),(512,'Ustamoe',255,65535,65535,4294967295,'\0','\0'),(513,'Ariy',255,65535,65535,4294967295,'\0','\0'),(514,'Rainsaiog',255,65535,65535,4294967295,'\0','\0'),(515,'Elnaierle',255,65535,65535,4294967295,'\0','\0'),(516,'Yeyuibeng',255,65535,65535,4294967295,'\0','\0'),(517,'Tuoplivee',255,65535,65535,4294967295,'\0','\0'),(518,'Opiceve',255,65535,65535,4294967295,'\0','\0'),(519,'Oxeiv',255,65535,65535,4294967295,'\0','\0'),(520,'Osioastcapo',255,65535,65535,4294967295,'\0','\0'),(521,'Apryu',255,65535,65535,4294967295,'\0','\0'),(522,'Efnea',255,65535,65535,4294967295,'\0','\0'),(523,'Teagecliommo',255,65535,65535,4294967295,'\0','\0'),(524,'Aayaeca',255,65535,65535,4294967295,'\0','\0'),(525,'Osmi',255,65535,65535,4294967295,'\0','\0'),(526,'Blaeodedto',255,65535,65535,4294967295,'\0','\0'),(527,'Islanathyiar',255,65535,65535,4294967295,'\0','\0'),(528,'Niaotephao',255,65535,65535,4294967295,'\0','\0'),(529,'Abidby',255,65535,65535,4294967295,'\0','\0'),(530,'Loitoinader',255,65535,65535,4294967295,'\0','\0'),(531,'Toudiaghmia',255,65535,65535,4294967295,'\0','\0'),(532,'Nyiedev',255,65535,65535,4294967295,'\0','\0'),(533,'Reahify',255,65535,65535,4294967295,'\0','\0'),(534,'Caetinasi',255,65535,65535,4294967295,'\0','\0'),(535,'Ayiangandeti',255,65535,65535,4294967295,'\0','\0'),(536,'Yaroyig',255,65535,65535,4294967295,'\0','\0'),(537,'Lauinoave',255,65535,65535,4294967295,'\0','\0'),(538,'Tryeaduerho',255,65535,65535,4294967295,'\0','\0'),(539,'Noabroei',255,65535,65535,4294967295,'\0','\0'),(540,'Needefeay',255,65535,65535,4294967295,'\0','\0'),(541,'Uferetho',255,65535,65535,4294967295,'\0','\0'),(542,'Iecop',255,65535,65535,4294967295,'\0','\0'),(543,'Esttalaamos',255,65535,65535,4294967295,'\0','\0'),(544,'Aravepyro',255,65535,65535,4294967295,'\0','\0'),(545,'Noenungo',255,65535,65535,4294967295,'\0','\0'),(546,'Iibaea',255,65535,65535,4294967295,'\0','\0'),(547,'Erlerku',255,65535,65535,4294967295,'\0','\0'),(548,'Eytear',255,65535,65535,4294967295,'\0','\0'),(549,'Iareent',255,65535,65535,4294967295,'\0','\0'),(550,'Eiomsenou',255,65535,65535,4294967295,'\0','\0'),(551,'Eraimfoossoh',255,65535,65535,4294967295,'\0','\0'),(552,'Denoeroyei',255,65535,65535,4294967295,'\0','\0'),(553,'Ouolpeye',255,65535,65535,4294967295,'\0','\0'),(554,'Odlearea',255,65535,65535,4294967295,'\0','\0'),(555,'Efyraeckdabe',255,65535,65535,4294967295,'\0','\0'),(556,'Atpaestuzenu',255,65535,65535,4294967295,'\0','\0'),(557,'Autmeo',255,65535,65535,4294967295,'\0','\0'),(558,'Eptmeerimmoo',255,65535,65535,4294967295,'\0','\0'),(559,'Upaalino',255,65535,65535,4294967295,'\0','\0'),(560,'Etybo',255,65535,65535,4294967295,'\0','\0'),(561,'Sceictineem',255,65535,65535,4294967295,'\0','\0'),(562,'Lyuyod',255,65535,65535,4294967295,'\0','\0'),(563,'Tyuacloacat',255,65535,65535,4294967295,'\0','\0'),(564,'Ofaagule',255,65535,65535,4294967295,'\0','\0'),(565,'Itxilyliema',255,65535,65535,4294967295,'\0','\0'),(566,'Ebwogoy',255,65535,65535,4294967295,'\0','\0'),(567,'Ilehe',255,65535,65535,4294967295,'\0','\0'),(568,'Verhoegaza',255,65535,65535,4294967295,'\0','\0'),(569,'Zeuf',255,65535,65535,4294967295,'\0','\0'),(570,'Ehtsebi',255,65535,65535,4294967295,'\0','\0'),(571,'Olierin',255,65535,65535,4294967295,'\0','\0'),(572,'Cucoicaro',255,65535,65535,4294967295,'\0','\0'),(573,'Aataaxte',255,65535,65535,4294967295,'\0','\0'),(574,'Mileladri',255,65535,65535,4294967295,'\0','\0'),(575,'Tyol',255,65535,65535,4294967295,'\0','\0'),(576,'Ovogepru',255,65535,65535,4294967295,'\0','\0'),(577,'Ranohchenoa',255,65535,65535,4294967295,'\0','\0'),(578,'Pleacha',255,65535,65535,4294967295,'\0','\0'),(579,'Esneti',255,65535,65535,4294967295,'\0','\0'),(580,'Aleraruaa',255,65535,65535,4294967295,'\0','\0'),(581,'Ondielfriisp',255,65535,65535,4294967295,'\0','\0'),(582,'Acoena',255,65535,65535,4294967295,'\0','\0'),(583,'Eliao',255,65535,65535,4294967295,'\0','\0'),(584,'Ragoitrie',255,65535,65535,4294967295,'\0','\0'),(585,'Enbu',255,65535,65535,4294967295,'\0','\0'),(586,'Oboagbruliat',255,65535,65535,4294967295,'\0','\0'),(587,'Iorebiose',255,65535,65535,4294967295,'\0','\0'),(588,'Eyahospa',255,65535,65535,4294967295,'\0','\0'),(589,'Iaroni',255,65535,65535,4294967295,'\0','\0'),(590,'Omiwheer',255,65535,65535,4294967295,'\0','\0'),(591,'Ymetiohyo',255,65535,65535,4294967295,'\0','\0'),(592,'Seeytaelmeha',255,65535,65535,4294967295,'\0','\0'),(593,'Lucrepisadui',255,65535,65535,4294967295,'\0','\0'),(594,'Ogrina',255,65535,65535,4294967295,'\0','\0'),(595,'Tuyititi',255,65535,65535,4294967295,'\0','\0'),(596,'Riengviya',255,65535,65535,4294967295,'\0','\0'),(597,'Seuvilema',255,65535,65535,4294967295,'\0','\0'),(598,'Eunees',255,65535,65535,4294967295,'\0','\0'),(599,'Reeyleisle',255,65535,65535,4294967295,'\0','\0'),(600,'Sparielyporo',255,65535,65535,4294967295,'\0','\0'),(601,'Imaus',255,65535,65535,4294967295,'\0','\0'),(602,'Eared',255,65535,65535,4294967295,'\0','\0'),(603,'Tachiyel',255,65535,65535,4294967295,'\0','\0'),(604,'Akyaoyee',255,65535,65535,4294967295,'\0','\0'),(605,'Eutmiymeip',255,65535,65535,4294967295,'\0','\0'),(606,'Osbau',255,65535,65535,4294967295,'\0','\0'),(607,'Cuifiscy',255,65535,65535,4294967295,'\0','\0'),(608,'Oayau',255,65535,65535,4294967295,'\0','\0'),(609,'Uqahperee',255,65535,65535,4294967295,'\0','\0'),(610,'Ulipa',255,65535,65535,4294967295,'\0','\0'),(611,'Ypurverali',255,65535,65535,4294967295,'\0','\0'),(612,'Prei',255,65535,65535,4294967295,'\0','\0'),(613,'Erneoeg',255,65535,65535,4294967295,'\0','\0'),(614,'Dyisale',255,65535,65535,4294967295,'\0','\0'),(615,'Ecalmyer',255,65535,65535,4294967295,'\0','\0'),(616,'Neoledier',255,65535,65535,4294967295,'\0','\0'),(617,'Deetenoth',255,65535,65535,4294967295,'\0','\0'),(618,'Oarraorke',255,65535,65535,4294967295,'\0','\0'),(619,'Umileriut',255,65535,65535,4294967295,'\0','\0'),(620,'Wenoeo',255,65535,65535,4294967295,'\0','\0'),(621,'Noililadeag',255,65535,65535,4294967295,'\0','\0'),(622,'Oicu',255,65535,65535,4294967295,'\0','\0'),(623,'Ughteardahid',255,65535,65535,4294967295,'\0','\0'),(624,'Geue',255,65535,65535,4294967295,'\0','\0'),(625,'Neestah',255,65535,65535,4294967295,'\0','\0'),(626,'Iltdite',255,65535,65535,4294967295,'\0','\0'),(627,'Deale',255,65535,65535,4294967295,'\0','\0'),(628,'Prebloela',255,65535,65535,4294967295,'\0','\0'),(629,'Teyxditri',255,65535,65535,4294967295,'\0','\0'),(630,'Ilaed',255,65535,65535,4294967295,'\0','\0'),(631,'Itolecaly',255,65535,65535,4294967295,'\0','\0'),(632,'Uleoem',255,65535,65535,4294967295,'\0','\0'),(633,'Meamiosni',255,65535,65535,4294967295,'\0','\0'),(634,'Eratbotobana',255,65535,65535,4294967295,'\0','\0'),(635,'Toreic',255,65535,65535,4294967295,'\0','\0'),(636,'Iriecheklian',255,65535,65535,4294967295,'\0','\0'),(637,'Holasline',255,65535,65535,4294967295,'\0','\0'),(638,'Ifpaamugal',255,65535,65535,4294967295,'\0','\0'),(639,'Iconan',255,65535,65535,4294967295,'\0','\0'),(640,'Icstraeare',255,65535,65535,4294967295,'\0','\0'),(641,'Biglusithi',255,65535,65535,4294967295,'\0','\0'),(642,'Riryfi',255,65535,65535,4294967295,'\0','\0'),(643,'Oeypliao',255,65535,65535,4294967295,'\0','\0'),(644,'Doyamizul',255,65535,65535,4294967295,'\0','\0'),(645,'Ishea',255,65535,65535,4294967295,'\0','\0'),(646,'Asuliereys',255,65535,65535,4294967295,'\0','\0'),(647,'Amdrereoi',255,65535,65535,4294967295,'\0','\0'),(648,'Raleeomois',255,65535,65535,4294967295,'\0','\0'),(649,'Praneneoc',255,65535,65535,4294967295,'\0','\0'),(650,'Ockphoalni',255,65535,65535,4294967295,'\0','\0'),(651,'Emiahikaren',255,65535,65535,4294967295,'\0','\0'),(652,'Eioyicky',255,65535,65535,4294967295,'\0','\0'),(653,'Akac',255,65535,65535,4294967295,'\0','\0'),(654,'Linederti',255,65535,65535,4294967295,'\0','\0'),(655,'Naibatay',255,65535,65535,4294967295,'\0','\0'),(656,'Ohecsiae',255,65535,65535,4294967295,'\0','\0'),(657,'Enogeashnero',255,65535,65535,4294967295,'\0','\0'),(658,'Caostschere',255,65535,65535,4294967295,'\0','\0'),(659,'Eisogilico',255,65535,65535,4294967295,'\0','\0'),(660,'Oesaclene',255,65535,65535,4294967295,'\0','\0'),(661,'Iclaloove',255,65535,65535,4294967295,'\0','\0'),(662,'Ispreruiny',255,65535,65535,4294967295,'\0','\0'),(663,'Eteeus',255,65535,65535,4294967295,'\0','\0'),(664,'Deaeray',255,65535,65535,4294967295,'\0','\0'),(665,'Alysinorha',255,65535,65535,4294967295,'\0','\0'),(666,'Wrieowausge',255,65535,65535,4294967295,'\0','\0'),(667,'Atumcywheeq',255,65535,65535,4294967295,'\0','\0'),(668,'Eeyooiz',255,65535,65535,4294967295,'\0','\0'),(669,'Tomoagharo',255,65535,65535,4294967295,'\0','\0'),(670,'Esoayoclefe',255,65535,65535,4294967295,'\0','\0'),(671,'Teolerchui',255,65535,65535,4294967295,'\0','\0'),(672,'Unateol',255,65535,65535,4294967295,'\0','\0'),(673,'Ikoneferol',255,65535,65535,4294967295,'\0','\0'),(674,'Gayo',255,65535,65535,4294967295,'\0','\0'),(675,'Ateudod',255,65535,65535,4294967295,'\0','\0'),(676,'Eyaoumero',255,65535,65535,4294967295,'\0','\0'),(677,'Icevdyatac',255,65535,65535,4294967295,'\0','\0'),(678,'Staeodev',255,65535,65535,4294967295,'\0','\0'),(679,'Emamest',255,65535,65535,4294967295,'\0','\0'),(680,'Icgruproier',255,65535,65535,4294967295,'\0','\0'),(681,'Lecysubeormi',255,65535,65535,4294967295,'\0','\0'),(682,'Alutif',255,65535,65535,4294967295,'\0','\0'),(683,'Untabofi',255,65535,65535,4294967295,'\0','\0'),(684,'Yluminmaor',255,65535,65535,4294967295,'\0','\0'),(685,'Unbeiseogne',255,65535,65535,4294967295,'\0','\0'),(686,'Aindasuatze',255,65535,65535,4294967295,'\0','\0'),(687,'Ameresioul',255,65535,65535,4294967295,'\0','\0'),(688,'Yubpre',255,65535,65535,4294967295,'\0','\0'),(689,'Nuniveso',255,65535,65535,4294967295,'\0','\0'),(690,'Yolonime',255,65535,65535,4294967295,'\0','\0'),(691,'Gilipra',255,65535,65535,4294967295,'\0','\0'),(692,'Ilrieilyja',255,65535,65535,4294967295,'\0','\0'),(693,'Eakodead',255,65535,65535,4294967295,'\0','\0'),(694,'Uladi',255,65535,65535,4294967295,'\0','\0'),(695,'Yeyrsveety',255,65535,65535,4294967295,'\0','\0'),(696,'Yebeontael',255,65535,65535,4294967295,'\0','\0'),(697,'Ecuaatyeass',255,65535,65535,4294967295,'\0','\0'),(698,'Eratadegye',255,65535,65535,4294967295,'\0','\0'),(699,'Anostri',255,65535,65535,4294967295,'\0','\0'),(700,'Antracaru',255,65535,65535,4294967295,'\0','\0'),(701,'Ilolgierild',255,65535,65535,4294967295,'\0','\0'),(702,'Icuneint',255,65535,65535,4294967295,'\0','\0'),(703,'Stoagcoeryar',255,65535,65535,4294967295,'\0','\0'),(704,'Raenraeo',255,65535,65535,4294967295,'\0','\0'),(705,'Olmaesend',255,65535,65535,4294967295,'\0','\0'),(706,'Leepi',255,65535,65535,4294967295,'\0','\0'),(707,'Eanega',255,65535,65535,4294967295,'\0','\0'),(708,'Eltmoiidli',255,65535,65535,4294967295,'\0','\0'),(709,'Elinulupo',255,65535,65535,4294967295,'\0','\0'),(710,'Aterei',255,65535,65535,4294967295,'\0','\0'),(711,'Icuireana',255,65535,65535,4294967295,'\0','\0'),(712,'Luueoev',255,65535,65535,4294967295,'\0','\0'),(713,'Ropleeara',255,65535,65535,4294967295,'\0','\0'),(714,'Eolea',255,65535,65535,4294967295,'\0','\0'),(715,'Fehme',255,65535,65535,4294967295,'\0','\0'),(716,'Erawlyatneca',255,65535,65535,4294967295,'\0','\0'),(717,'Ulua',255,65535,65535,4294967295,'\0','\0'),(718,'Epoyepode',255,65535,65535,4294967295,'\0','\0'),(719,'Tesantxy',255,65535,65535,4294967295,'\0','\0'),(720,'Kihie',255,65535,65535,4294967295,'\0','\0'),(721,'Iprieoti',255,65535,65535,4294967295,'\0','\0'),(722,'Gobryinkliy',255,65535,65535,4294967295,'\0','\0'),(723,'Brathoheibo',255,65535,65535,4294967295,'\0','\0'),(724,'Etisiizi',255,65535,65535,4294967295,'\0','\0'),(725,'Ockutoxi',255,65535,65535,4294967295,'\0','\0'),(726,'Paeyotliase',255,65535,65535,4294967295,'\0','\0'),(727,'Anas',255,65535,65535,4294967295,'\0','\0'),(728,'Oalybab',255,65535,65535,4294967295,'\0','\0'),(729,'Iatasm',255,65535,65535,4294967295,'\0','\0'),(730,'Shogeteak',255,65535,65535,4294967295,'\0','\0'),(731,'Eliyiea',255,65535,65535,4294967295,'\0','\0'),(732,'Epuatcelepre',255,65535,65535,4294967295,'\0','\0'),(733,'Iperacra',255,65535,65535,4294967295,'\0','\0'),(734,'Dyale',255,65535,65535,4294967295,'\0','\0'),(735,'Ifepraebodyu',255,65535,65535,4294967295,'\0','\0'),(736,'Ostiachenae',255,65535,65535,4294967295,'\0','\0'),(737,'Inkitatrou',255,65535,65535,4294967295,'\0','\0'),(738,'Eyisineleoy',255,65535,65535,4294967295,'\0','\0'),(739,'Asyilyustor',255,65535,65535,4294967295,'\0','\0'),(740,'Onilm',255,65535,65535,4294967295,'\0','\0'),(741,'Ayao',255,65535,65535,4294967295,'\0','\0'),(742,'Queayurniong',255,65535,65535,4294967295,'\0','\0'),(743,'Itia',255,65535,65535,4294967295,'\0','\0'),(744,'Cheo',255,65535,65535,4294967295,'\0','\0'),(745,'Otna',255,65535,65535,4294967295,'\0','\0'),(746,'Atoagi',255,65535,65535,4294967295,'\0','\0'),(747,'Amdefla',255,65535,65535,4294967295,'\0','\0'),(748,'Olce',255,65535,65535,4294967295,'\0','\0'),(749,'Tyarilanonli',255,65535,65535,4294967295,'\0','\0'),(750,'Eryucili',255,65535,65535,4294967295,'\0','\0'),(751,'Esmosa',255,65535,65535,4294967295,'\0','\0'),(752,'Flicioomopli',255,65535,65535,4294967295,'\0','\0'),(753,'Diudineest',255,65535,65535,4294967295,'\0','\0'),(754,'Egeblaesa',255,65535,65535,4294967295,'\0','\0'),(755,'Gymeareq',255,65535,65535,4294967295,'\0','\0'),(756,'Naoodfyib',255,65535,65535,4294967295,'\0','\0'),(757,'Aegaioy',255,65535,65535,4294967295,'\0','\0'),(758,'Isidealul',255,65535,65535,4294967295,'\0','\0'),(759,'Etpeyshiorud',255,65535,65535,4294967295,'\0','\0'),(760,'Cyobieil',255,65535,65535,4294967295,'\0','\0'),(761,'Ancsidi',255,65535,65535,4294967295,'\0','\0'),(762,'Ragaer',255,65535,65535,4294967295,'\0','\0'),(763,'Upini',255,65535,65535,4294967295,'\0','\0'),(764,'Anari',255,65535,65535,4294967295,'\0','\0'),(765,'Ilmonare',255,65535,65535,4294967295,'\0','\0'),(766,'Opbloytshe',255,65535,65535,4294967295,'\0','\0'),(767,'Fiuho',255,65535,65535,4294967295,'\0','\0'),(768,'Yceykieoret',255,65535,65535,4294967295,'\0','\0'),(769,'Arleaento',255,65535,65535,4294967295,'\0','\0'),(770,'Coneahunle',255,65535,65535,4294967295,'\0','\0'),(771,'Ilniur',255,65535,65535,4294967295,'\0','\0'),(772,'Bubyarif',255,65535,65535,4294967295,'\0','\0'),(773,'Yalooedece',255,65535,65535,4294967295,'\0','\0'),(774,'Asubowa',255,65535,65535,4294967295,'\0','\0'),(775,'Toamve',255,65535,65535,4294967295,'\0','\0'),(776,'Ligro',255,65535,65535,4294967295,'\0','\0'),(777,'Roethaliliap',255,65535,65535,4294967295,'\0','\0'),(778,'Motieei',255,65535,65535,4294967295,'\0','\0'),(779,'Goarimae',255,65535,65535,4294967295,'\0','\0'),(780,'Onsenobru',255,65535,65535,4294967295,'\0','\0'),(781,'Oampat',255,65535,65535,4294967295,'\0','\0'),(782,'Xaithsheipas',255,65535,65535,4294967295,'\0','\0'),(783,'Eerohai',255,65535,65535,4294967295,'\0','\0'),(784,'Ispiater',255,65535,65535,4294967295,'\0','\0'),(785,'Ientroitwait',255,65535,65535,4294967295,'\0','\0'),(786,'Iredize',255,65535,65535,4294967295,'\0','\0'),(787,'Engach',255,65535,65535,4294967295,'\0','\0'),(788,'Manesiecyare',255,65535,65535,4294967295,'\0','\0'),(789,'Seesocawao',255,65535,65535,4294967295,'\0','\0'),(790,'Reacorteurt',255,65535,65535,4294967295,'\0','\0'),(791,'Iipioyelfe',255,65535,65535,4294967295,'\0','\0'),(792,'Inneypahang',255,65535,65535,4294967295,'\0','\0'),(793,'Ayuegiuow',255,65535,65535,4294967295,'\0','\0'),(794,'Yowstiomiub',255,65535,65535,4294967295,'\0','\0'),(795,'Heeciattula',255,65535,65535,4294967295,'\0','\0'),(796,'Isadisuisim',255,65535,65535,4294967295,'\0','\0'),(797,'Esie',255,65535,65535,4294967295,'\0','\0'),(798,'Terono',255,65535,65535,4294967295,'\0','\0'),(799,'Ayechti',255,65535,65535,4294967295,'\0','\0'),(800,'Eassinogi',255,65535,65535,4294967295,'\0','\0'),(801,'Opoco',255,65535,65535,4294967295,'\0','\0'),(802,'Upepotockey',255,65535,65535,4294967295,'\0','\0'),(803,'Udtoorbuproe',255,65535,65535,4294967295,'\0','\0'),(804,'Lolerole',255,65535,65535,4294967295,'\0','\0'),(805,'Aniiet',255,65535,65535,4294967295,'\0','\0'),(806,'Hierwriom',255,65535,65535,4294967295,'\0','\0'),(807,'Robrilote',255,65535,65535,4294967295,'\0','\0'),(808,'Otgorilca',255,65535,65535,4294967295,'\0','\0'),(809,'Eistewa',255,65535,65535,4294967295,'\0','\0'),(810,'Oeajow',255,65535,65535,4294967295,'\0','\0'),(811,'Laant',255,65535,65535,4294967295,'\0','\0'),(812,'Coaltearuy',255,65535,65535,4294967295,'\0','\0'),(813,'Raaoacu',255,65535,65535,4294967295,'\0','\0'),(814,'Iiserdgao',255,65535,65535,4294967295,'\0','\0'),(815,'Inru',255,65535,65535,4294967295,'\0','\0'),(816,'Buareru',255,65535,65535,4294967295,'\0','\0'),(817,'Anarai',255,65535,65535,4294967295,'\0','\0'),(818,'Teropale',255,65535,65535,4294967295,'\0','\0'),(819,'Ieriipub',255,65535,65535,4294967295,'\0','\0'),(820,'Itlyass',255,65535,65535,4294967295,'\0','\0'),(821,'Ernicime',255,65535,65535,4294967295,'\0','\0'),(822,'Afohynari',255,65535,65535,4294967295,'\0','\0'),(823,'Aisser',255,65535,65535,4294967295,'\0','\0'),(824,'Proraileine',255,65535,65535,4294967295,'\0','\0'),(825,'Icieneqfliet',255,65535,65535,4294967295,'\0','\0'),(826,'Eruere',255,65535,65535,4294967295,'\0','\0'),(827,'Yareao',255,65535,65535,4294967295,'\0','\0'),(828,'Stoine',255,65535,65535,4294967295,'\0','\0'),(829,'Eicumedrayn',255,65535,65535,4294967295,'\0','\0'),(830,'Ileubunan',255,65535,65535,4294967295,'\0','\0'),(831,'Iqcuxaiz',255,65535,65535,4294967295,'\0','\0'),(832,'Dececrypaaki',255,65535,65535,4294967295,'\0','\0'),(833,'Griurfcaeme',255,65535,65535,4294967295,'\0','\0'),(834,'Ungolifepa',255,65535,65535,4294967295,'\0','\0'),(835,'Acteatiy',255,65535,65535,4294967295,'\0','\0'),(836,'Onhyatadni',255,65535,65535,4294967295,'\0','\0'),(837,'Igayoelsme',255,65535,65535,4294967295,'\0','\0'),(838,'Aish',255,65535,65535,4294967295,'\0','\0'),(839,'Cuapraama',255,65535,65535,4294967295,'\0','\0'),(840,'Oesdorusese',255,65535,65535,4294967295,'\0','\0'),(841,'Egobite',255,65535,65535,4294967295,'\0','\0'),(842,'Tinaeh',255,65535,65535,4294967295,'\0','\0'),(843,'Isoylhe',255,65535,65535,4294967295,'\0','\0'),(844,'Detefohail',255,65535,65535,4294967295,'\0','\0'),(845,'Trezekephale',255,65535,65535,4294967295,'\0','\0'),(846,'Sioussema',255,65535,65535,4294967295,'\0','\0'),(847,'Deylapchoil',255,65535,65535,4294967295,'\0','\0'),(848,'Ramay',255,65535,65535,4294967295,'\0','\0'),(849,'Eungoromiy',255,65535,65535,4294967295,'\0','\0'),(850,'Ilclemebotea',255,65535,65535,4294967295,'\0','\0'),(851,'Ingelelyp',255,65535,65535,4294967295,'\0','\0'),(852,'Opainoa',255,65535,65535,4294967295,'\0','\0'),(853,'Ultoatinao',255,65535,65535,4294967295,'\0','\0'),(854,'Omesmuist',255,65535,65535,4294967295,'\0','\0'),(855,'Ceyapio',255,65535,65535,4294967295,'\0','\0'),(856,'Eroypaivle',255,65535,65535,4294967295,'\0','\0'),(857,'Iearci',255,65535,65535,4294967295,'\0','\0'),(858,'Difatye',255,65535,65535,4294967295,'\0','\0'),(859,'Angrymuiha',255,65535,65535,4294967295,'\0','\0'),(860,'Estioitveon',255,65535,65535,4294967295,'\0','\0'),(861,'Eymagilai',255,65535,65535,4294967295,'\0','\0'),(862,'Aderruoioch',255,65535,65535,4294967295,'\0','\0'),(863,'Plucaaockum',255,65535,65535,4294967295,'\0','\0'),(864,'Uemolel',255,65535,65535,4294967295,'\0','\0'),(865,'Aalak',255,65535,65535,4294967295,'\0','\0'),(866,'Gynoatae',255,65535,65535,4294967295,'\0','\0'),(867,'Yuarzaerldti',255,65535,65535,4294967295,'\0','\0'),(868,'Uftiebi',255,65535,65535,4294967295,'\0','\0'),(869,'Ingoe',255,65535,65535,4294967295,'\0','\0'),(870,'Pihale',255,65535,65535,4294967295,'\0','\0'),(871,'Urelgeani',255,65535,65535,4294967295,'\0','\0'),(872,'Retuiastwata',255,65535,65535,4294967295,'\0','\0'),(873,'Tidetete',255,65535,65535,4294967295,'\0','\0'),(874,'Allypeisaes',255,65535,65535,4294967295,'\0','\0'),(875,'Oant',255,65535,65535,4294967295,'\0','\0'),(876,'Biiadilede',255,65535,65535,4294967295,'\0','\0'),(877,'Ockiarorloo',255,65535,65535,4294967295,'\0','\0'),(878,'Ickuhy',255,65535,65535,4294967295,'\0','\0'),(879,'Ethwaymerwo',255,65535,65535,4294967295,'\0','\0'),(880,'Ukethosdifle',255,65535,65535,4294967295,'\0','\0'),(881,'Aatiine',255,65535,65535,4294967295,'\0','\0'),(882,'Typro',255,65535,65535,4294967295,'\0','\0'),(883,'Ialori',255,65535,65535,4294967295,'\0','\0'),(884,'Iamysaomco',255,65535,65535,4294967295,'\0','\0'),(885,'Aopocis',255,65535,65535,4294967295,'\0','\0'),(886,'Arakemuno',255,65535,65535,4294967295,'\0','\0'),(887,'Imeotgihie',255,65535,65535,4294967295,'\0','\0'),(888,'Iarteil',255,65535,65535,4294967295,'\0','\0'),(889,'Arsu',255,65535,65535,4294967295,'\0','\0'),(890,'Truircrearu',255,65535,65535,4294967295,'\0','\0'),(891,'Evoply',255,65535,65535,4294967295,'\0','\0'),(892,'Iteyaewoes',255,65535,65535,4294967295,'\0','\0'),(893,'Eyiloa',255,65535,65535,4294967295,'\0','\0'),(894,'Earyaaney',255,65535,65535,4294967295,'\0','\0'),(895,'Elinisaghie',255,65535,65535,4294967295,'\0','\0'),(896,'Rielfov',255,65535,65535,4294967295,'\0','\0'),(897,'Beyl',255,65535,65535,4294967295,'\0','\0'),(898,'Orbo',255,65535,65535,4294967295,'\0','\0'),(899,'Aibesharab',255,65535,65535,4294967295,'\0','\0'),(900,'Inopotigry',255,65535,65535,4294967295,'\0','\0'),(901,'Neaueotscho',255,65535,65535,4294967295,'\0','\0'),(902,'Rialbao',255,65535,65535,4294967295,'\0','\0'),(903,'Ipoil',255,65535,65535,4294967295,'\0','\0'),(904,'Yshoispe',255,65535,65535,4294967295,'\0','\0'),(905,'Tocifae',255,65535,65535,4294967295,'\0','\0'),(906,'Tymipeyo',255,65535,65535,4294967295,'\0','\0'),(907,'Tichye',255,65535,65535,4294967295,'\0','\0'),(908,'Etaizilli',255,65535,65535,4294967295,'\0','\0'),(909,'Uataury',255,65535,65535,4294967295,'\0','\0'),(910,'Ovte',255,65535,65535,4294967295,'\0','\0'),(911,'Teoceuk',255,65535,65535,4294967295,'\0','\0'),(912,'Eilsec',255,65535,65535,4294967295,'\0','\0'),(913,'Neac',255,65535,65535,4294967295,'\0','\0'),(914,'Neatogic',255,65535,65535,4294967295,'\0','\0'),(915,'Mahyye',255,65535,65535,4294967295,'\0','\0'),(916,'Reupore',255,65535,65535,4294967295,'\0','\0'),(917,'Allweionddi',255,65535,65535,4294967295,'\0','\0'),(918,'Ithey',255,65535,65535,4294967295,'\0','\0'),(919,'Fuademomy',255,65535,65535,4294967295,'\0','\0'),(920,'Siic',255,65535,65535,4294967295,'\0','\0'),(921,'Abedoye',255,65535,65535,4294967295,'\0','\0'),(922,'Aeroerache',255,65535,65535,4294967295,'\0','\0'),(923,'Iloeeock',255,65535,65535,4294967295,'\0','\0'),(924,'Riamacbio',255,65535,65535,4294967295,'\0','\0'),(925,'Elecuetro',255,65535,65535,4294967295,'\0','\0'),(926,'Aparilgeuogh',255,65535,65535,4294967295,'\0','\0'),(927,'Peol',255,65535,65535,4294967295,'\0','\0'),(928,'Ucyrsooner',255,65535,65535,4294967295,'\0','\0'),(929,'Ahowirya',255,65535,65535,4294967295,'\0','\0'),(930,'Osurut',255,65535,65535,4294967295,'\0','\0'),(931,'Emeaaii',255,65535,65535,4294967295,'\0','\0'),(932,'Woeluly',255,65535,65535,4294967295,'\0','\0'),(933,'Nerosniodo',255,65535,65535,4294967295,'\0','\0'),(934,'Iytee',255,65535,65535,4294967295,'\0','\0'),(935,'Bleiresla',255,65535,65535,4294967295,'\0','\0'),(936,'Ytreoesoet',255,65535,65535,4294967295,'\0','\0'),(937,'Eefoa',255,65535,65535,4294967295,'\0','\0'),(938,'Toetuogca',255,65535,65535,4294967295,'\0','\0'),(939,'Iniesmialu',255,65535,65535,4294967295,'\0','\0'),(940,'Iaaepait',255,65535,65535,4294967295,'\0','\0'),(941,'Onemohvatior',255,65535,65535,4294967295,'\0','\0'),(942,'Piterecao',255,65535,65535,4294967295,'\0','\0'),(943,'Umestoo',255,65535,65535,4294967295,'\0','\0'),(944,'Otaloisti',255,65535,65535,4294967295,'\0','\0'),(945,'Dephoai',255,65535,65535,4294967295,'\0','\0'),(946,'Plekeikid',255,65535,65535,4294967295,'\0','\0'),(947,'Astxyoctyp',255,65535,65535,4294967295,'\0','\0'),(948,'Coriledeira',255,65535,65535,4294967295,'\0','\0'),(949,'Uonleri',255,65535,65535,4294967295,'\0','\0'),(950,'Arapichoae',255,65535,65535,4294967295,'\0','\0'),(951,'Meymyal',255,65535,65535,4294967295,'\0','\0'),(952,'Pruouldai',255,65535,65535,4294967295,'\0','\0'),(953,'Tepiawryokci',255,65535,65535,4294967295,'\0','\0'),(954,'Spioaoin',255,65535,65535,4294967295,'\0','\0'),(955,'Operne',255,65535,65535,4294967295,'\0','\0'),(956,'Itelossu',255,65535,65535,4294967295,'\0','\0'),(957,'Zealreonalli',255,65535,65535,4294967295,'\0','\0'),(958,'Learenengliy',255,65535,65535,4294967295,'\0','\0'),(959,'Oareructeil',255,65535,65535,4294967295,'\0','\0'),(960,'Enob',255,65535,65535,4294967295,'\0','\0'),(961,'Taiog',255,65535,65535,4294967295,'\0','\0'),(962,'Hyleindeompo',255,65535,65535,4294967295,'\0','\0'),(963,'Uegoayi',255,65535,65535,4294967295,'\0','\0'),(964,'Erapaeta',255,65535,65535,4294967295,'\0','\0'),(965,'Oltonkeeaste',255,65535,65535,4294967295,'\0','\0'),(966,'Ashaegle',255,65535,65535,4294967295,'\0','\0'),(967,'Ochonteriast',255,65535,65535,4294967295,'\0','\0'),(968,'Ubodrotce',255,65535,65535,4294967295,'\0','\0'),(969,'Ysry',255,65535,65535,4294967295,'\0','\0'),(970,'Iacueghuruck',255,65535,65535,4294967295,'\0','\0'),(971,'Ciisynei',255,65535,65535,4294967295,'\0','\0'),(972,'Ikue',255,65535,65535,4294967295,'\0','\0'),(973,'Aunetsi',255,65535,65535,4294967295,'\0','\0'),(974,'Yaohud',255,65535,65535,4294967295,'\0','\0'),(975,'Raorneuci',255,65535,65535,4294967295,'\0','\0'),(976,'Esmealonae',255,65535,65535,4294967295,'\0','\0'),(977,'Molianohrle',255,65535,65535,4294967295,'\0','\0'),(978,'Isoynunla',255,65535,65535,4294967295,'\0','\0'),(979,'Umtiiph',255,65535,65535,4294967295,'\0','\0'),(980,'Sirhuorichid',255,65535,65535,4294967295,'\0','\0'),(981,'Itisso',255,65535,65535,4294967295,'\0','\0'),(982,'Ainnedeoul',255,65535,65535,4294967295,'\0','\0'),(983,'Retxihiditi',255,65535,65535,4294967295,'\0','\0'),(984,'Usphubuac',255,65535,65535,4294967295,'\0','\0'),(985,'Sieraver',255,65535,65535,4294967295,'\0','\0'),(986,'Raemedoitur',255,65535,65535,4294967295,'\0','\0'),(987,'Astelumesif',255,65535,65535,4294967295,'\0','\0'),(988,'Ionorm',255,65535,65535,4294967295,'\0','\0'),(989,'Neboital',255,65535,65535,4294967295,'\0','\0'),(990,'Usiim',255,65535,65535,4294967295,'\0','\0'),(991,'Ailoco',255,65535,65535,4294967295,'\0','\0'),(992,'Ilte',255,65535,65535,4294967295,'\0','\0'),(993,'Ibishan',255,65535,65535,4294967295,'\0','\0'),(994,'Snecrobuo',255,65535,65535,4294967295,'\0','\0'),(995,'Isiryrunedi',255,65535,65535,4294967295,'\0','\0'),(996,'Etiexiet',255,65535,65535,4294967295,'\0','\0'),(997,'Enveunome',255,65535,65535,4294967295,'\0','\0'),(998,'Eneru',255,65535,65535,4294967295,'\0','\0'),(999,'Ayssaghebra',255,65535,65535,4294967295,'\0','\0'),(1000,'Tialri',255,65535,65535,4294967295,'\0','\0'),(1001,'Taemid',255,65535,65535,4294967295,'\0','\0'),(1002,'Dinoeaes',255,65535,65535,4294967295,'\0','\0'),(1003,'Rikleov',255,65535,65535,4294967295,'\0','\0'),(1004,'Aynwa',255,65535,65535,4294967295,'\0','\0'),(1005,'Suleyrtpe',255,65535,65535,4294967295,'\0','\0'),(1006,'Yoggeaja',255,65535,65535,4294967295,'\0','\0'),(1007,'Ayverae',255,65535,65535,4294967295,'\0','\0'),(1008,'Essor',255,65535,65535,4294967295,'\0','\0'),(1009,'Irnulidu',255,65535,65535,4294967295,'\0','\0'),(1010,'Roinun',255,65535,65535,4294967295,'\0','\0'),(1011,'Eila',255,65535,65535,4294967295,'\0','\0'),(1012,'Isaon',255,65535,65535,4294967295,'\0','\0'),(1013,'Theonety',255,65535,65535,4294967295,'\0','\0'),(1014,'Ymiortea',255,65535,65535,4294967295,'\0','\0'),(1015,'Iryhiosreon',255,65535,65535,4294967295,'\0','\0'),(1016,'Eerifepedu',255,65535,65535,4294967295,'\0','\0'),(1017,'Linuepor',255,65535,65535,4294967295,'\0','\0'),(1018,'Ziip',255,65535,65535,4294967295,'\0','\0'),(1019,'Useqinywkle',255,65535,65535,4294967295,'\0','\0'),(1020,'Euohpab',255,65535,65535,4294967295,'\0','\0'),(1021,'Poicheoso',255,65535,65535,4294967295,'\0','\0'),(1022,'Ockuroeya',255,65535,65535,4294967295,'\0','\0'),(1023,'Acoyaesin',255,65535,65535,4294967295,'\0','\0'),(1024,'Ieongioyne',255,65535,65535,4294967295,'\0','\0'),(1025,'Eryetdierye',255,65535,65535,4294967295,'\0','\0'),(1026,'Aosmibiue',255,65535,65535,4294967295,'\0','\0'),(1027,'Loru',255,65535,65535,4294967295,'\0','\0'),(1028,'Enatulriu',255,65535,65535,4294967295,'\0','\0'),(1029,'Irinabiphire',255,65535,65535,4294967295,'\0','\0'),(1030,'Inyu',255,65535,65535,4294967295,'\0','\0'),(1031,'Siahes',255,65535,65535,4294967295,'\0','\0'),(1032,'Craeidahiss',255,65535,65535,4294967295,'\0','\0'),(1033,'Oamine',255,65535,65535,4294967295,'\0','\0'),(1034,'Unuviba',255,65535,65535,4294967295,'\0','\0'),(1035,'Aogmech',255,65535,65535,4294967295,'\0','\0'),(1036,'Echnoeroit',255,65535,65535,4294967295,'\0','\0'),(1037,'Mapeneymapo',255,65535,65535,4294967295,'\0','\0'),(1038,'Luadoy',255,65535,65535,4294967295,'\0','\0'),(1039,'Ubereag',255,65535,65535,4294967295,'\0','\0'),(1040,'Ueat',255,65535,65535,4294967295,'\0','\0'),(1041,'Edousaibo',255,65535,65535,4294967295,'\0','\0'),(1042,'Sareydyeus',255,65535,65535,4294967295,'\0','\0'),(1043,'Sogieyost',255,65535,65535,4294967295,'\0','\0'),(1044,'Chelsiadiny',255,65535,65535,4294967295,'\0','\0'),(1045,'Eathiciati',255,65535,65535,4294967295,'\0','\0'),(1046,'Preyay',255,65535,65535,4294967295,'\0','\0'),(1047,'Hoise',255,65535,65535,4294967295,'\0','\0'),(1048,'Ongauticeest',255,65535,65535,4294967295,'\0','\0'),(1049,'Idote',255,65535,65535,4294967295,'\0','\0'),(1050,'Suodtu',255,65535,65535,4294967295,'\0','\0'),(1051,'Eyurti',255,65535,65535,4294967295,'\0','\0'),(1052,'Reathalfeiag',255,65535,65535,4294967295,'\0','\0'),(1053,'Lauixa',255,65535,65535,4294967295,'\0','\0'),(1054,'Ioye',255,65535,65535,4294967295,'\0','\0'),(1055,'Ebupnetau',255,65535,65535,4294967295,'\0','\0'),(1056,'Itraplapruel',255,65535,65535,4294967295,'\0','\0'),(1057,'Urah',255,65535,65535,4294967295,'\0','\0'),(1058,'Creu',255,65535,65535,4294967295,'\0','\0'),(1059,'Eraniaci',255,65535,65535,4294967295,'\0','\0'),(1060,'Ovphomesay',255,65535,65535,4294967295,'\0','\0'),(1061,'Aigioscu',255,65535,65535,4294967295,'\0','\0'),(1062,'Owieriaak',255,65535,65535,4294967295,'\0','\0'),(1063,'Ingentmuea',255,65535,65535,4294967295,'\0','\0'),(1064,'Oodterii',255,65535,65535,4294967295,'\0','\0'),(1065,'Toesdo',255,65535,65535,4294967295,'\0','\0'),(1066,'Pachealrauca',255,65535,65535,4294967295,'\0','\0'),(1067,'Iryolaoywa',255,65535,65535,4294967295,'\0','\0'),(1068,'Eitil',255,65535,65535,4294967295,'\0','\0'),(1069,'Eraniicko',255,65535,65535,4294967295,'\0','\0'),(1070,'Igeathoraeg',255,65535,65535,4294967295,'\0','\0'),(1071,'Reecuast',255,65535,65535,4294967295,'\0','\0'),(1072,'Eronsyatrig',255,65535,65535,4294967295,'\0','\0'),(1073,'Nilere',255,65535,65535,4294967295,'\0','\0'),(1074,'Amowi',255,65535,65535,4294967295,'\0','\0'),(1075,'Yaba',255,65535,65535,4294967295,'\0','\0'),(1076,'Oibfreiltra',255,65535,65535,4294967295,'\0','\0'),(1077,'Aneheyeyma',255,65535,65535,4294967295,'\0','\0'),(1078,'Obicucerrin',255,65535,65535,4294967295,'\0','\0'),(1079,'Iletegeem',255,65535,65535,4294967295,'\0','\0'),(1080,'Miutom',255,65535,65535,4294967295,'\0','\0'),(1081,'Quostyionthu',255,65535,65535,4294967295,'\0','\0'),(1082,'Unyoeve',255,65535,65535,4294967295,'\0','\0'),(1083,'Ayre',255,65535,65535,4294967295,'\0','\0'),(1084,'Odiayhe',255,65535,65535,4294967295,'\0','\0'),(1085,'Suon',255,65535,65535,4294967295,'\0','\0'),(1086,'Noreoiyoick',255,65535,65535,4294967295,'\0','\0'),(1087,'Eonk',255,65535,65535,4294967295,'\0','\0'),(1088,'Iaesiddurhe',255,65535,65535,4294967295,'\0','\0'),(1089,'Lipawienerot',255,65535,65535,4294967295,'\0','\0'),(1090,'Beial',255,65535,65535,4294967295,'\0','\0'),(1091,'Erayhee',255,65535,65535,4294967295,'\0','\0'),(1092,'Aicero',255,65535,65535,4294967295,'\0','\0'),(1093,'Okmiee',255,65535,65535,4294967295,'\0','\0'),(1094,'Arstre',255,65535,65535,4294967295,'\0','\0'),(1095,'Edear',255,65535,65535,4294967295,'\0','\0'),(1096,'Liranenear',255,65535,65535,4294967295,'\0','\0'),(1097,'Ouratono',255,65535,65535,4294967295,'\0','\0'),(1098,'Fielmanerom',255,65535,65535,4294967295,'\0','\0'),(1099,'Eoilud',255,65535,65535,4294967295,'\0','\0'),(1100,'Ezyialba',255,65535,65535,4294967295,'\0','\0'),(1101,'Floili',255,65535,65535,4294967295,'\0','\0'),(1102,'Sieeht',255,65535,65535,4294967295,'\0','\0'),(1103,'Inaywa',255,65535,65535,4294967295,'\0','\0'),(1104,'Taesetdeot',255,65535,65535,4294967295,'\0','\0'),(1105,'Uohtoplesa',255,65535,65535,4294967295,'\0','\0'),(1106,'Anaroa',255,65535,65535,4294967295,'\0','\0'),(1107,'Oobbri',255,65535,65535,4294967295,'\0','\0'),(1108,'Orsecreagua',255,65535,65535,4294967295,'\0','\0'),(1109,'Viuoar',255,65535,65535,4294967295,'\0','\0'),(1110,'Esraidov',255,65535,65535,4294967295,'\0','\0'),(1111,'Iquynua',255,65535,65535,4294967295,'\0','\0'),(1112,'Emonyaupie',255,65535,65535,4294967295,'\0','\0'),(1113,'Oaloydoalar',255,65535,65535,4294967295,'\0','\0'),(1114,'Erispeodura',255,65535,65535,4294967295,'\0','\0'),(1115,'Heim',255,65535,65535,4294967295,'\0','\0'),(1116,'Coeura',255,65535,65535,4294967295,'\0','\0'),(1117,'Ychteiz',255,65535,65535,4294967295,'\0','\0'),(1118,'Teliimoty',255,65535,65535,4294967295,'\0','\0'),(1119,'Raohme',255,65535,65535,4294967295,'\0','\0'),(1120,'Orleaion',255,65535,65535,4294967295,'\0','\0'),(1121,'Yaonanicoa',255,65535,65535,4294967295,'\0','\0'),(1122,'Evefier',255,65535,65535,4294967295,'\0','\0'),(1123,'Alaada',255,65535,65535,4294967295,'\0','\0'),(1124,'Onidapagemte',255,65535,65535,4294967295,'\0','\0'),(1125,'Trityase',255,65535,65535,4294967295,'\0','\0'),(1126,'Stroiveruc',255,65535,65535,4294967295,'\0','\0'),(1127,'Achodi',255,65535,65535,4294967295,'\0','\0'),(1128,'Ereftetila',255,65535,65535,4294967295,'\0','\0'),(1129,'Pleneopa',255,65535,65535,4294967295,'\0','\0'),(1130,'Oealengam',255,65535,65535,4294967295,'\0','\0'),(1131,'Estiaco',255,65535,65535,4294967295,'\0','\0'),(1132,'Scoeoypfra',255,65535,65535,4294967295,'\0','\0'),(1133,'Yssrulioli',255,65535,65535,4294967295,'\0','\0'),(1134,'Echeaayinde',255,65535,65535,4294967295,'\0','\0'),(1135,'Haorey',255,65535,65535,4294967295,'\0','\0'),(1136,'Yaniyngna',255,65535,65535,4294967295,'\0','\0'),(1137,'Lialie',255,65535,65535,4294967295,'\0','\0'),(1138,'Ucarvepe',255,65535,65535,4294967295,'\0','\0'),(1139,'Odtatie',255,65535,65535,4294967295,'\0','\0'),(1140,'Tiom',255,65535,65535,4294967295,'\0','\0'),(1141,'Ulavoago',255,65535,65535,4294967295,'\0','\0'),(1142,'Uvbitailice',255,65535,65535,4294967295,'\0','\0'),(1143,'Paoxetof',255,65535,65535,4294967295,'\0','\0'),(1144,'Senonuaisi',255,65535,65535,4294967295,'\0','\0'),(1145,'Uponeil',255,65535,65535,4294967295,'\0','\0'),(1146,'Equmos',255,65535,65535,4294967295,'\0','\0'),(1147,'Ogori',255,65535,65535,4294967295,'\0','\0'),(1148,'Veorliumxi',255,65535,65535,4294967295,'\0','\0'),(1149,'Optere',255,65535,65535,4294967295,'\0','\0'),(1150,'Umatrechup',255,65535,65535,4294967295,'\0','\0'),(1151,'Aobicke',255,65535,65535,4294967295,'\0','\0'),(1152,'Ylogriig',255,65535,65535,4294967295,'\0','\0'),(1153,'Paessoleboel',255,65535,65535,4294967295,'\0','\0'),(1154,'Ucepacri',255,65535,65535,4294967295,'\0','\0'),(1155,'Teielimde',255,65535,65535,4294967295,'\0','\0'),(1156,'Evcoinyi',255,65535,65535,4294967295,'\0','\0'),(1157,'Tifsinure',255,65535,65535,4294967295,'\0','\0'),(1158,'Riniuntrono',255,65535,65535,4294967295,'\0','\0'),(1159,'Yareybrezo',255,65535,65535,4294967295,'\0','\0'),(1160,'Vauaeboi',255,65535,65535,4294967295,'\0','\0'),(1161,'Veeckurtyra',255,65535,65535,4294967295,'\0','\0'),(1162,'Epingarta',255,65535,65535,4294967295,'\0','\0'),(1163,'Liadentcryis',255,65535,65535,4294967295,'\0','\0'),(1164,'Odyickhenee',255,65535,65535,4294967295,'\0','\0'),(1165,'Peorata',255,65535,65535,4294967295,'\0','\0'),(1166,'Iaupyte',255,65535,65535,4294967295,'\0','\0'),(1167,'Mepiilais',255,65535,65535,4294967295,'\0','\0'),(1168,'Onoeresenick',255,65535,65535,4294967295,'\0','\0'),(1169,'Reumpisomcae',255,65535,65535,4294967295,'\0','\0'),(1170,'Aliraowney',255,65535,65535,4294967295,'\0','\0'),(1171,'Wooistauti',255,65535,65535,4294967295,'\0','\0'),(1172,'Oalidie',255,65535,65535,4294967295,'\0','\0'),(1173,'Raroa',255,65535,65535,4294967295,'\0','\0'),(1174,'Tiylvi',255,65535,65535,4294967295,'\0','\0'),(1175,'Erunulleoti',255,65535,65535,4294967295,'\0','\0'),(1176,'Alinoyatis',255,65535,65535,4294967295,'\0','\0'),(1177,'Leyeinryla',255,65535,65535,4294967295,'\0','\0'),(1178,'Urazoo',255,65535,65535,4294967295,'\0','\0'),(1179,'Radoai',255,65535,65535,4294967295,'\0','\0'),(1180,'Itmikicho',255,65535,65535,4294967295,'\0','\0'),(1181,'Elteyoi',255,65535,65535,4294967295,'\0','\0'),(1182,'Esuspuo',255,65535,65535,4294967295,'\0','\0'),(1183,'Laiheygehe',255,65535,65535,4294967295,'\0','\0'),(1184,'Anaagohle',255,65535,65535,4294967295,'\0','\0'),(1185,'Teaneweoyig',255,65535,65535,4294967295,'\0','\0'),(1186,'Idkebreaent',255,65535,65535,4294967295,'\0','\0'),(1187,'Digliarolam',255,65535,65535,4294967295,'\0','\0'),(1188,'Eseba',255,65535,65535,4294967295,'\0','\0'),(1189,'Ibgeciumre',255,65535,65535,4294967295,'\0','\0'),(1190,'Nasea',255,65535,65535,4294967295,'\0','\0'),(1191,'Vediwayo',255,65535,65535,4294967295,'\0','\0'),(1192,'Urebontenaok',255,65535,65535,4294967295,'\0','\0'),(1193,'Taoewere',255,65535,65535,4294967295,'\0','\0'),(1194,'Eicalstaorov',255,65535,65535,4294967295,'\0','\0'),(1195,'Iaruogu',255,65535,65535,4294967295,'\0','\0'),(1196,'Aychue',255,65535,65535,4294967295,'\0','\0'),(1197,'Sutewoola',255,65535,65535,4294967295,'\0','\0'),(1198,'Itchimieolo',255,65535,65535,4294967295,'\0','\0'),(1199,'Olehoi',255,65535,65535,4294967295,'\0','\0'),(1200,'Icmoreaosman',255,65535,65535,4294967295,'\0','\0'),(1201,'Anim',255,65535,65535,4294967295,'\0','\0'),(1202,'Toaloymowor',255,65535,65535,4294967295,'\0','\0'),(1203,'Egyeerseacky',255,65535,65535,4294967295,'\0','\0'),(1204,'Ideagila',255,65535,65535,4294967295,'\0','\0'),(1205,'Eyerelrie',255,65535,65535,4294967295,'\0','\0'),(1206,'Ifneyahabuin',255,65535,65535,4294967295,'\0','\0'),(1207,'Erem',255,65535,65535,4294967295,'\0','\0'),(1208,'Ohmoaynoelt',255,65535,65535,4294967295,'\0','\0'),(1209,'Waie',255,65535,65535,4294967295,'\0','\0'),(1210,'Mara',255,65535,65535,4294967295,'\0','\0'),(1211,'Yliroayene',255,65535,65535,4294967295,'\0','\0'),(1212,'Ogonke',255,65535,65535,4294967295,'\0','\0'),(1213,'Coowyatreasi',255,65535,65535,4294967295,'\0','\0'),(1214,'Stroyossizra',255,65535,65535,4294967295,'\0','\0'),(1215,'Eivreneag',255,65535,65535,4294967295,'\0','\0'),(1216,'Apoeacra',255,65535,65535,4294967295,'\0','\0'),(1217,'Ilaksack',255,65535,65535,4294967295,'\0','\0'),(1218,'Ebrunaug',255,65535,65535,4294967295,'\0','\0'),(1219,'Losta',255,65535,65535,4294967295,'\0','\0'),(1220,'Ieropli',255,65535,65535,4294967295,'\0','\0'),(1221,'Seeratmi',255,65535,65535,4294967295,'\0','\0'),(1222,'Ycentyggeati',255,65535,65535,4294967295,'\0','\0'),(1223,'Yflu',255,65535,65535,4294967295,'\0','\0'),(1224,'Cueriymi',255,65535,65535,4294967295,'\0','\0'),(1225,'Neercapaor',255,65535,65535,4294967295,'\0','\0'),(1226,'Ereminino',255,65535,65535,4294967295,'\0','\0'),(1227,'Iqiaan',255,65535,65535,4294967295,'\0','\0'),(1228,'Behy',255,65535,65535,4294967295,'\0','\0'),(1229,'Owesitery',255,65535,65535,4294967295,'\0','\0'),(1230,'Chicheatae',255,65535,65535,4294967295,'\0','\0'),(1231,'Enttrapoci',255,65535,65535,4294967295,'\0','\0'),(1232,'Tueromi',255,65535,65535,4294967295,'\0','\0'),(1233,'Aneaer',255,65535,65535,4294967295,'\0','\0'),(1234,'Neked',255,65535,65535,4294967295,'\0','\0'),(1235,'Eengisyngphe',255,65535,65535,4294967295,'\0','\0'),(1236,'Abaeaew',255,65535,65535,4294967295,'\0','\0'),(1237,'Spuowobri',255,65535,65535,4294967295,'\0','\0'),(1238,'Uputhutroel',255,65535,65535,4294967295,'\0','\0'),(1239,'Icleongsqelt',255,65535,65535,4294967295,'\0','\0'),(1240,'Atuasnepla',255,65535,65535,4294967295,'\0','\0'),(1241,'Otierla',255,65535,65535,4294967295,'\0','\0'),(1242,'Ollseaoc',255,65535,65535,4294967295,'\0','\0'),(1243,'Eyuia',255,65535,65535,4294967295,'\0','\0'),(1244,'Edpliilla',255,65535,65535,4294967295,'\0','\0'),(1245,'Yeyteu',255,65535,65535,4294967295,'\0','\0'),(1246,'Adaca',255,65535,65535,4294967295,'\0','\0'),(1247,'Trueshmalee',255,65535,65535,4294967295,'\0','\0'),(1248,'Epheneho',255,65535,65535,4294967295,'\0','\0'),(1249,'Imatiassel',255,65535,65535,4294967295,'\0','\0'),(1250,'Atesedaessid',255,65535,65535,4294967295,'\0','\0'),(1251,'Aryisiuni',255,65535,65535,4294967295,'\0','\0'),(1252,'Nieso',255,65535,65535,4294967295,'\0','\0'),(1253,'Isyepintpa',255,65535,65535,4294967295,'\0','\0'),(1254,'Nageener',255,65535,65535,4294967295,'\0','\0'),(1255,'Lepaeyceeh',255,65535,65535,4294967295,'\0','\0'),(1256,'Aghpeomchi',255,65535,65535,4294967295,'\0','\0'),(1257,'Isriegfi',255,65535,65535,4294967295,'\0','\0'),(1258,'Etaebiater',255,65535,65535,4294967295,'\0','\0'),(1259,'Echiataf',255,65535,65535,4294967295,'\0','\0'),(1260,'Echieypuise',255,65535,65535,4294967295,'\0','\0'),(1261,'Onte',255,65535,65535,4294967295,'\0','\0'),(1262,'Ioroeab',255,65535,65535,4294967295,'\0','\0'),(1263,'Ulastam',255,65535,65535,4294967295,'\0','\0'),(1264,'Eityi',255,65535,65535,4294967295,'\0','\0'),(1265,'Oigiumlana',255,65535,65535,4294967295,'\0','\0'),(1266,'Osiucilryi',255,65535,65535,4294967295,'\0','\0'),(1267,'Gosteenewiod',255,65535,65535,4294967295,'\0','\0'),(1268,'Aebiee',255,65535,65535,4294967295,'\0','\0'),(1269,'Saeyneryen',255,65535,65535,4294967295,'\0','\0'),(1270,'Iniledeapt',255,65535,65535,4294967295,'\0','\0'),(1271,'Tyteflitu',255,65535,65535,4294967295,'\0','\0'),(1272,'Oalidtalati',255,65535,65535,4294967295,'\0','\0'),(1273,'Seye',255,65535,65535,4294967295,'\0','\0'),(1274,'Noonre',255,65535,65535,4294967295,'\0','\0'),(1275,'Lutenipi',255,65535,65535,4294967295,'\0','\0'),(1276,'Yorickasiz',255,65535,65535,4294967295,'\0','\0'),(1277,'Spiraeunapu',255,65535,65535,4294967295,'\0','\0'),(1278,'Jeilonuam',255,65535,65535,4294967295,'\0','\0'),(1279,'Grozety',255,65535,65535,4294967295,'\0','\0'),(1280,'Areri',255,65535,65535,4294967295,'\0','\0'),(1281,'Wieyotiamul',255,65535,65535,4294967295,'\0','\0'),(1282,'Ymuinsel',255,65535,65535,4294967295,'\0','\0'),(1283,'Imieriff',255,65535,65535,4294967295,'\0','\0'),(1284,'Eutete',255,65535,65535,4294967295,'\0','\0'),(1285,'Leogueri',255,65535,65535,4294967295,'\0','\0'),(1286,'Ictutevekale',255,65535,65535,4294967295,'\0','\0'),(1287,'Ucaneiech',255,65535,65535,4294967295,'\0','\0'),(1288,'Unes',255,65535,65535,4294967295,'\0','\0'),(1289,'Ehplotyogste',255,65535,65535,4294967295,'\0','\0'),(1290,'Eooh',255,65535,65535,4294967295,'\0','\0'),(1291,'Quenti',255,65535,65535,4294967295,'\0','\0'),(1292,'Nepraad',255,65535,65535,4294967295,'\0','\0'),(1293,'Roemevhe',255,65535,65535,4294967295,'\0','\0'),(1294,'Atnequmiey',255,65535,65535,4294967295,'\0','\0'),(1295,'Eamisachi',255,65535,65535,4294967295,'\0','\0'),(1296,'Izonemookek',255,65535,65535,4294967295,'\0','\0'),(1297,'Uiyyp',255,65535,65535,4294967295,'\0','\0'),(1298,'Usanaple',255,65535,65535,4294967295,'\0','\0'),(1299,'Espfeitaub',255,65535,65535,4294967295,'\0','\0'),(1300,'Tiissee',255,65535,65535,4294967295,'\0','\0'),(1301,'Eongtruuin',255,65535,65535,4294967295,'\0','\0'),(1302,'Aeck',255,65535,65535,4294967295,'\0','\0'),(1303,'Anretyan',255,65535,65535,4294967295,'\0','\0'),(1304,'Dooatevti',255,65535,65535,4294967295,'\0','\0'),(1305,'Onailayingde',255,65535,65535,4294967295,'\0','\0'),(1306,'Oecbuoyo',255,65535,65535,4294967295,'\0','\0'),(1307,'Neathtaeay',255,65535,65535,4294967295,'\0','\0'),(1308,'Inieserycy',255,65535,65535,4294967295,'\0','\0'),(1309,'Ealbe',255,65535,65535,4294967295,'\0','\0'),(1310,'Intreen',255,65535,65535,4294967295,'\0','\0'),(1311,'Biquosraor',255,65535,65535,4294967295,'\0','\0'),(1312,'Ibpromicshe',255,65535,65535,4294967295,'\0','\0'),(1313,'Nointeni',255,65535,65535,4294967295,'\0','\0'),(1314,'Egyow',255,65535,65535,4294967295,'\0','\0'),(1315,'Phuanios',255,65535,65535,4294967295,'\0','\0'),(1316,'Ipureglieis',255,65535,65535,4294967295,'\0','\0'),(1317,'Alokraeti',255,65535,65535,4294967295,'\0','\0'),(1318,'Liyi',255,65535,65535,4294967295,'\0','\0'),(1319,'Idnachaitri',255,65535,65535,4294967295,'\0','\0'),(1320,'Uitnenak',255,65535,65535,4294967295,'\0','\0'),(1321,'Leingoe',255,65535,65535,4294967295,'\0','\0'),(1322,'Ahei',255,65535,65535,4294967295,'\0','\0'),(1323,'Oopueyeat',255,65535,65535,4294967295,'\0','\0'),(1324,'Sphiista',255,65535,65535,4294967295,'\0','\0'),(1325,'Ecesri',255,65535,65535,4294967295,'\0','\0'),(1326,'Oksopa',255,65535,65535,4294967295,'\0','\0'),(1327,'Akadbiubrair',255,65535,65535,4294967295,'\0','\0'),(1328,'Ereagoo',255,65535,65535,4294967295,'\0','\0'),(1329,'Lyshefebe',255,65535,65535,4294967295,'\0','\0'),(1330,'Aecktealjoes',255,65535,65535,4294967295,'\0','\0'),(1331,'Pryindowa',255,65535,65535,4294967295,'\0','\0'),(1332,'Ypreanisoyf',255,65535,65535,4294967295,'\0','\0'),(1333,'Ukyi',255,65535,65535,4294967295,'\0','\0'),(1334,'Doredo',255,65535,65535,4294967295,'\0','\0'),(1335,'Reve',255,65535,65535,4294967295,'\0','\0'),(1336,'Deowatoel',255,65535,65535,4294967295,'\0','\0'),(1337,'Toehaseu',255,65535,65535,4294967295,'\0','\0'),(1338,'Eoba',255,65535,65535,4294967295,'\0','\0'),(1339,'Niscianotoe',255,65535,65535,4294967295,'\0','\0'),(1340,'Ealraca',255,65535,65535,4294967295,'\0','\0'),(1341,'Peabrae',255,65535,65535,4294967295,'\0','\0'),(1342,'Atiriiela',255,65535,65535,4294967295,'\0','\0'),(1343,'Nilenai',255,65535,65535,4294967295,'\0','\0'),(1344,'Yecksiin',255,65535,65535,4294967295,'\0','\0'),(1345,'Aoyupacu',255,65535,65535,4294967295,'\0','\0'),(1346,'Eiprecubaun',255,65535,65535,4294967295,'\0','\0'),(1347,'Ostolimaito',255,65535,65535,4294967295,'\0','\0'),(1348,'Ciet',255,65535,65535,4294967295,'\0','\0'),(1349,'Oalote',255,65535,65535,4294967295,'\0','\0'),(1350,'Ivascria',255,65535,65535,4294967295,'\0','\0'),(1351,'Iasroeilo',255,65535,65535,4294967295,'\0','\0'),(1352,'Tioratip',255,65535,65535,4294967295,'\0','\0'),(1353,'Meigneal',255,65535,65535,4294967295,'\0','\0'),(1354,'Peni',255,65535,65535,4294967295,'\0','\0'),(1355,'Inaph',255,65535,65535,4294967295,'\0','\0'),(1356,'Urca',255,65535,65535,4294967295,'\0','\0'),(1357,'Heopnao',255,65535,65535,4294967295,'\0','\0'),(1358,'Roefe',255,65535,65535,4294967295,'\0','\0'),(1359,'Neelian',255,65535,65535,4294967295,'\0','\0'),(1360,'Eifrabe',255,65535,65535,4294967295,'\0','\0'),(1361,'Rayndamamti',255,65535,65535,4294967295,'\0','\0'),(1362,'Yapayost',255,65535,65535,4294967295,'\0','\0'),(1363,'Tuer',255,65535,65535,4294967295,'\0','\0'),(1364,'Niiriadi',255,65535,65535,4294967295,'\0','\0'),(1365,'Penaalgepe',255,65535,65535,4294967295,'\0','\0'),(1366,'Eceili',255,65535,65535,4294967295,'\0','\0'),(1367,'Irbaragosi',255,65535,65535,4294967295,'\0','\0'),(1368,'Edosceipoab',255,65535,65535,4294967295,'\0','\0'),(1369,'Yeoxenuto',255,65535,65535,4294967295,'\0','\0'),(1370,'Aoafanofo',255,65535,65535,4294967295,'\0','\0'),(1371,'Aboom',255,65535,65535,4294967295,'\0','\0'),(1372,'Neyrnog',255,65535,65535,4294967295,'\0','\0'),(1373,'Eaecitpra',255,65535,65535,4294967295,'\0','\0'),(1374,'Royarchinirm',255,65535,65535,4294967295,'\0','\0'),(1375,'Uroneiic',255,65535,65535,4294967295,'\0','\0'),(1376,'Eysnaoua',255,65535,65535,4294967295,'\0','\0'),(1377,'Ereuith',255,65535,65535,4294967295,'\0','\0'),(1378,'Omecidstaew',255,65535,65535,4294967295,'\0','\0'),(1379,'Empna',255,65535,65535,4294967295,'\0','\0'),(1380,'Oshastaliefu',255,65535,65535,4294967295,'\0','\0'),(1381,'Peieigaiss',255,65535,65535,4294967295,'\0','\0'),(1382,'Uieatrea',255,65535,65535,4294967295,'\0','\0'),(1383,'Mueoteagre',255,65535,65535,4294967295,'\0','\0'),(1384,'Ereenin',255,65535,65535,4294967295,'\0','\0'),(1385,'Ukbliego',255,65535,65535,4294967295,'\0','\0'),(1386,'Rewordreeh',255,65535,65535,4294967295,'\0','\0'),(1387,'Engo',255,65535,65535,4294967295,'\0','\0'),(1388,'Emkii',255,65535,65535,4294967295,'\0','\0'),(1389,'Maine',255,65535,65535,4294967295,'\0','\0'),(1390,'Niwhuyatie',255,65535,65535,4294967295,'\0','\0'),(1391,'Tilareut',255,65535,65535,4294967295,'\0','\0'),(1392,'Ooaloalzi',255,65535,65535,4294967295,'\0','\0'),(1393,'Coyackesyth',255,65535,65535,4294967295,'\0','\0'),(1394,'Naenotee',255,65535,65535,4294967295,'\0','\0'),(1395,'Isaiwnaso',255,65535,65535,4294967295,'\0','\0'),(1396,'Sleuctait',255,65535,65535,4294967295,'\0','\0'),(1397,'Eaingiger',255,65535,65535,4294967295,'\0','\0'),(1398,'Aratyaa',255,65535,65535,4294967295,'\0','\0'),(1399,'Nesphoeiro',255,65535,65535,4294967295,'\0','\0'),(1400,'Annatram',255,65535,65535,4294967295,'\0','\0'),(1401,'Iniaijumin',255,65535,65535,4294967295,'\0','\0'),(1402,'Iana',255,65535,65535,4294967295,'\0','\0'),(1403,'Geoy',255,65535,65535,4294967295,'\0','\0'),(1404,'Neyero',255,65535,65535,4294967295,'\0','\0'),(1405,'Aroehti',255,65535,65535,4294967295,'\0','\0'),(1406,'Anseati',255,65535,65535,4294967295,'\0','\0'),(1407,'Leomaef',255,65535,65535,4294967295,'\0','\0'),(1408,'Atoop',255,65535,65535,4294967295,'\0','\0'),(1409,'Pireroie',255,65535,65535,4294967295,'\0','\0'),(1410,'Anicafri',255,65535,65535,4294967295,'\0','\0'),(1411,'Hefrechear',255,65535,65535,4294967295,'\0','\0'),(1412,'Usieroarad',255,65535,65535,4294967295,'\0','\0'),(1413,'Oshengbeseni',255,65535,65535,4294967295,'\0','\0'),(1414,'Iginiouon',255,65535,65535,4294967295,'\0','\0'),(1415,'Ogiynoit',255,65535,65535,4294967295,'\0','\0'),(1416,'Woriteoe',255,65535,65535,4294967295,'\0','\0'),(1417,'Olyiy',255,65535,65535,4294967295,'\0','\0'),(1418,'Oate',255,65535,65535,4294967295,'\0','\0'),(1419,'Neraele',255,65535,65535,4294967295,'\0','\0'),(1420,'Ogfiar',255,65535,65535,4294967295,'\0','\0'),(1421,'Ilau',255,65535,65535,4294967295,'\0','\0'),(1422,'Netuliast',255,65535,65535,4294967295,'\0','\0'),(1423,'Ayurpuhomo',255,65535,65535,4294967295,'\0','\0'),(1424,'Palioet',255,65535,65535,4294967295,'\0','\0'),(1425,'Iiatag',255,65535,65535,4294967295,'\0','\0'),(1426,'Etwoivbuihi',255,65535,65535,4294967295,'\0','\0'),(1427,'Yosiache',255,65535,65535,4294967295,'\0','\0'),(1428,'Eesteai',255,65535,65535,4294967295,'\0','\0'),(1429,'Isopato',255,65535,65535,4294967295,'\0','\0'),(1430,'Meleaslyug',255,65535,65535,4294967295,'\0','\0'),(1431,'Ateoyetmao',255,65535,65535,4294967295,'\0','\0'),(1432,'Laraoyerurow',255,65535,65535,4294967295,'\0','\0'),(1433,'Riclomdo',255,65535,65535,4294967295,'\0','\0'),(1434,'Necoasupiz',255,65535,65535,4294967295,'\0','\0'),(1435,'Tiyelealpi',255,65535,65535,4294967295,'\0','\0'),(1436,'Amon',255,65535,65535,4294967295,'\0','\0'),(1437,'Ioiur',255,65535,65535,4294967295,'\0','\0'),(1438,'Iaayap',255,65535,65535,4294967295,'\0','\0'),(1439,'Clereuimipu',255,65535,65535,4294967295,'\0','\0'),(1440,'Onirklovaeg',255,65535,65535,4294967295,'\0','\0'),(1441,'Eorekeyese',255,65535,65535,4294967295,'\0','\0'),(1442,'Umianraron',255,65535,65535,4294967295,'\0','\0'),(1443,'Dueazocheon',255,65535,65535,4294967295,'\0','\0'),(1444,'Astrioboet',255,65535,65535,4294967295,'\0','\0'),(1445,'Criaohas',255,65535,65535,4294967295,'\0','\0'),(1446,'Iceod',255,65535,65535,4294967295,'\0','\0'),(1447,'Nyacoluery',255,65535,65535,4294967295,'\0','\0'),(1448,'Eteev',255,65535,65535,4294967295,'\0','\0'),(1449,'Yaaloyicoril',255,65535,65535,4294967295,'\0','\0'),(1450,'Togaopioli',255,65535,65535,4294967295,'\0','\0'),(1451,'Eynaiasolint',255,65535,65535,4294967295,'\0','\0'),(1452,'Reymiocatpa',255,65535,65535,4294967295,'\0','\0'),(1453,'Atsie',255,65535,65535,4294967295,'\0','\0'),(1454,'Esatedou',255,65535,65535,4294967295,'\0','\0'),(1455,'Ondvysetuer',255,65535,65535,4294967295,'\0','\0'),(1456,'Ucrihyry',255,65535,65535,4294967295,'\0','\0'),(1457,'Arebiic',255,65535,65535,4294967295,'\0','\0'),(1458,'Itaarelexi',255,65535,65535,4294967295,'\0','\0'),(1459,'Yopoonet',255,65535,65535,4294967295,'\0','\0'),(1460,'Adyuodpoild',255,65535,65535,4294967295,'\0','\0'),(1461,'Amyemovo',255,65535,65535,4294967295,'\0','\0'),(1462,'Rokeclau',255,65535,65535,4294967295,'\0','\0'),(1463,'Opthocamu',255,65535,65535,4294967295,'\0','\0'),(1464,'Scoasasane',255,65535,65535,4294967295,'\0','\0'),(1465,'Teaiyema',255,65535,65535,4294967295,'\0','\0'),(1466,'Angweeucu',255,65535,65535,4294967295,'\0','\0'),(1467,'Sealbra',255,65535,65535,4294967295,'\0','\0'),(1468,'Onseetsaylo',255,65535,65535,4294967295,'\0','\0'),(1469,'Aieuue',255,65535,65535,4294967295,'\0','\0'),(1470,'Adbenoe',255,65535,65535,4294967295,'\0','\0'),(1471,'Adeicaali',255,65535,65535,4294967295,'\0','\0'),(1472,'Achrecif',255,65535,65535,4294967295,'\0','\0'),(1473,'Iuayp',255,65535,65535,4294967295,'\0','\0'),(1474,'Onenpuei',255,65535,65535,4294967295,'\0','\0'),(1475,'Inraoeag',255,65535,65535,4294967295,'\0','\0'),(1476,'Idnisevove',255,65535,65535,4294967295,'\0','\0'),(1477,'Ipaer',255,65535,65535,4294967295,'\0','\0'),(1478,'Eoltipuople',255,65535,65535,4294967295,'\0','\0'),(1479,'Tiienemayb',255,65535,65535,4294967295,'\0','\0'),(1480,'Puonic',255,65535,65535,4294967295,'\0','\0'),(1481,'Reree',255,65535,65535,4294967295,'\0','\0'),(1482,'Ateanad',255,65535,65535,4294967295,'\0','\0'),(1483,'Tooi',255,65535,65535,4294967295,'\0','\0'),(1484,'Hafithareon',255,65535,65535,4294967295,'\0','\0'),(1485,'Flapaeit',255,65535,65535,4294967295,'\0','\0'),(1486,'Adeaifra',255,65535,65535,4294967295,'\0','\0'),(1487,'Iepmeat',255,65535,65535,4294967295,'\0','\0'),(1488,'Teneocyoes',255,65535,65535,4294967295,'\0','\0'),(1489,'Etplipui',255,65535,65535,4294967295,'\0','\0'),(1490,'Tokeazriatow',255,65535,65535,4294967295,'\0','\0'),(1491,'Roeadio',255,65535,65535,4294967295,'\0','\0'),(1492,'Atlaisteha',255,65535,65535,4294967295,'\0','\0'),(1493,'Erthliviest',255,65535,65535,4294967295,'\0','\0'),(1494,'Ylyenuta',255,65535,65535,4294967295,'\0','\0'),(1495,'Udleitnia',255,65535,65535,4294967295,'\0','\0'),(1496,'Eredi',255,65535,65535,4294967295,'\0','\0'),(1497,'Eray',255,65535,65535,4294967295,'\0','\0'),(1498,'Ohaeayiss',255,65535,65535,4294967295,'\0','\0'),(1499,'Ehaov',255,65535,65535,4294967295,'\0','\0'),(1500,'Uaesolla',255,65535,65535,4294967295,'\0','\0'),(1501,'Oporauckeck',255,65535,65535,4294967295,'\0','\0'),(1502,'Brerorief',255,65535,65535,4294967295,'\0','\0'),(1503,'Esherstroesh',255,65535,65535,4294967295,'\0','\0'),(1504,'Atiyrengy',255,65535,65535,4294967295,'\0','\0'),(1505,'Euremeri',255,65535,65535,4294967295,'\0','\0'),(1506,'Itoava',255,65535,65535,4294967295,'\0','\0'),(1507,'Ilnoalratila',255,65535,65535,4294967295,'\0','\0'),(1508,'Arearsy',255,65535,65535,4294967295,'\0','\0'),(1509,'Naestbo',255,65535,65535,4294967295,'\0','\0'),(1510,'Eynggiigili',255,65535,65535,4294967295,'\0','\0'),(1511,'Xeteanerkplu',255,65535,65535,4294967295,'\0','\0'),(1512,'Ayessidskuin',255,65535,65535,4294967295,'\0','\0'),(1513,'Urdtanedi',255,65535,65535,4294967295,'\0','\0'),(1514,'Ebiwkugal',255,65535,65535,4294967295,'\0','\0'),(1515,'Ayatliniecro',255,65535,65535,4294967295,'\0','\0'),(1516,'Elalgies',255,65535,65535,4294967295,'\0','\0'),(1517,'Oraleardupa',255,65535,65535,4294967295,'\0','\0'),(1518,'Onyaypeisat',255,65535,65535,4294967295,'\0','\0'),(1519,'Gucoehxagoe',255,65535,65535,4294967295,'\0','\0'),(1520,'Aecyipid',255,65535,65535,4294967295,'\0','\0'),(1521,'Rareia',255,65535,65535,4294967295,'\0','\0'),(1522,'Awieegh',255,65535,65535,4294967295,'\0','\0'),(1523,'Friaeaec',255,65535,65535,4294967295,'\0','\0'),(1524,'Uieselee',255,65535,65535,4294967295,'\0','\0'),(1525,'Aryhatsi',255,65535,65535,4294967295,'\0','\0'),(1526,'Emeono',255,65535,65535,4294967295,'\0','\0'),(1527,'Etissumnoog',255,65535,65535,4294967295,'\0','\0'),(1528,'Tien',255,65535,65535,4294967295,'\0','\0'),(1529,'Ingim',255,65535,65535,4294967295,'\0','\0'),(1530,'Dachashixae',255,65535,65535,4294967295,'\0','\0'),(1531,'Atoqicar',255,65535,65535,4294967295,'\0','\0'),(1532,'Ramaoubdiet',255,65535,65535,4294967295,'\0','\0'),(1533,'Icnoa',255,65535,65535,4294967295,'\0','\0'),(1534,'Deabaufxi',255,65535,65535,4294967295,'\0','\0'),(1535,'Reunonte',255,65535,65535,4294967295,'\0','\0'),(1536,'Ryalohe',255,65535,65535,4294967295,'\0','\0'),(1537,'Orayntenine',255,65535,65535,4294967295,'\0','\0'),(1538,'Eqieolfnimi',255,65535,65535,4294967295,'\0','\0'),(1539,'Unido',255,65535,65535,4294967295,'\0','\0'),(1540,'Uenubkiok',255,65535,65535,4294967295,'\0','\0'),(1541,'Aesois',255,65535,65535,4294967295,'\0','\0'),(1542,'Uunreidth',255,65535,65535,4294967295,'\0','\0'),(1543,'Ethbiuke',255,65535,65535,4294967295,'\0','\0'),(1544,'Lerorisi',255,65535,65535,4294967295,'\0','\0'),(1545,'Teilisloor',255,65535,65535,4294967295,'\0','\0'),(1546,'Ornedaer',255,65535,65535,4294967295,'\0','\0'),(1547,'Pnane',255,65535,65535,4294967295,'\0','\0'),(1548,'Neomdeilom',255,65535,65535,4294967295,'\0','\0'),(1549,'Ohoin',255,65535,65535,4294967295,'\0','\0'),(1550,'Tetagoypse',255,65535,65535,4294967295,'\0','\0'),(1551,'Baissivonuoh',255,65535,65535,4294967295,'\0','\0'),(1552,'Caerri',255,65535,65535,4294967295,'\0','\0'),(1553,'Oeratco',255,65535,65535,4294967295,'\0','\0'),(1554,'Anwhoingo',255,65535,65535,4294967295,'\0','\0'),(1555,'Oldinyexqura',255,65535,65535,4294967295,'\0','\0'),(1556,'Aceelerd',255,65535,65535,4294967295,'\0','\0'),(1557,'Imde',255,65535,65535,4294967295,'\0','\0'),(1558,'Paerisyiic',255,65535,65535,4294967295,'\0','\0'),(1559,'Abideseu',255,65535,65535,4294967295,'\0','\0'),(1560,'Peabit',255,65535,65535,4294967295,'\0','\0'),(1561,'Tipisuo',255,65535,65535,4294967295,'\0','\0'),(1562,'Nionstamatre',255,65535,65535,4294967295,'\0','\0'),(1563,'Kaiyeriz',255,65535,65535,4294967295,'\0','\0'),(1564,'Istafueie',255,65535,65535,4294967295,'\0','\0'),(1565,'Gehis',255,65535,65535,4294967295,'\0','\0'),(1566,'Izilnipu',255,65535,65535,4294967295,'\0','\0'),(1567,'Werypaefhia',255,65535,65535,4294967295,'\0','\0'),(1568,'Scaeooratil',255,65535,65535,4294967295,'\0','\0'),(1569,'Etfiwoayat',255,65535,65535,4294967295,'\0','\0'),(1570,'Ieasihic',255,65535,65535,4294967295,'\0','\0'),(1571,'Emaoctpris',255,65535,65535,4294967295,'\0','\0'),(1572,'Ieninowdul',255,65535,65535,4294967295,'\0','\0'),(1573,'Detry',255,65535,65535,4294967295,'\0','\0'),(1574,'Acchoye',255,65535,65535,4294967295,'\0','\0'),(1575,'Keyl',255,65535,65535,4294967295,'\0','\0'),(1576,'Stueragsi',255,65535,65535,4294967295,'\0','\0'),(1577,'Owneifhoeh',255,65535,65535,4294967295,'\0','\0'),(1578,'Coipetyoipra',255,65535,65535,4294967295,'\0','\0'),(1579,'Zioles',255,65535,65535,4294967295,'\0','\0'),(1580,'Esroaged',255,65535,65535,4294967295,'\0','\0'),(1581,'Elaseide',255,65535,65535,4294967295,'\0','\0'),(1582,'Eaelieort',255,65535,65535,4294967295,'\0','\0'),(1583,'Tare',255,65535,65535,4294967295,'\0','\0'),(1584,'Alhyuowbi',255,65535,65535,4294967295,'\0','\0'),(1585,'Aloyssoauc',255,65535,65535,4294967295,'\0','\0'),(1586,'Pute',255,65535,65535,4294967295,'\0','\0'),(1587,'Ideepati',255,65535,65535,4294967295,'\0','\0'),(1588,'Adroaspoli',255,65535,65535,4294967295,'\0','\0'),(1589,'Eosyawene',255,65535,65535,4294967295,'\0','\0'),(1590,'Afnieowe',255,65535,65535,4294967295,'\0','\0'),(1591,'Umcuneita',255,65535,65535,4294967295,'\0','\0'),(1592,'Phietmio',255,65535,65535,4294967295,'\0','\0'),(1593,'Scyiga',255,65535,65535,4294967295,'\0','\0'),(1594,'Ivimoast',255,65535,65535,4294967295,'\0','\0'),(1595,'Syerectiul',255,65535,65535,4294967295,'\0','\0'),(1596,'Beinruer',255,65535,65535,4294967295,'\0','\0'),(1597,'Lioparelier',255,65535,65535,4294967295,'\0','\0'),(1598,'Yoldomabste',255,65535,65535,4294967295,'\0','\0'),(1599,'Heparivuwe',255,65535,65535,4294967295,'\0','\0'),(1600,'Oelesee',255,65535,65535,4294967295,'\0','\0'),(1601,'Aidomabock',255,65535,65535,4294967295,'\0','\0'),(1602,'Eitibo',255,65535,65535,4294967295,'\0','\0'),(1603,'Neicamumer',255,65535,65535,4294967295,'\0','\0'),(1604,'Nereealeust',255,65535,65535,4294967295,'\0','\0'),(1605,'Scuneeumya',255,65535,65535,4294967295,'\0','\0'),(1606,'Netyulda',255,65535,65535,4294967295,'\0','\0'),(1607,'Quile',255,65535,65535,4294967295,'\0','\0'),(1608,'Ufoanuteer',255,65535,65535,4294967295,'\0','\0'),(1609,'Raeryichost',255,65535,65535,4294967295,'\0','\0'),(1610,'Abyriola',255,65535,65535,4294967295,'\0','\0'),(1611,'Raolaum',255,65535,65535,4294967295,'\0','\0'),(1612,'Umimirana',255,65535,65535,4294967295,'\0','\0'),(1613,'Udeilbueyp',255,65535,65535,4294967295,'\0','\0'),(1614,'Osayowecyhzo',255,65535,65535,4294967295,'\0','\0'),(1615,'Auvistiay',255,65535,65535,4294967295,'\0','\0'),(1616,'Oniceahxy',255,65535,65535,4294967295,'\0','\0'),(1617,'Entlibaeano',255,65535,65535,4294967295,'\0','\0'),(1618,'Tetspo',255,65535,65535,4294967295,'\0','\0'),(1619,'Wieyma',255,65535,65535,4294967295,'\0','\0'),(1620,'Inoeocyhe',255,65535,65535,4294967295,'\0','\0'),(1621,'Orol',255,65535,65535,4294967295,'\0','\0'),(1622,'Deies',255,65535,65535,4294967295,'\0','\0'),(1623,'Reivbuie',255,65535,65535,4294967295,'\0','\0'),(1624,'Itetiaora',255,65535,65535,4294967295,'\0','\0'),(1625,'Laeellaando',255,65535,65535,4294967295,'\0','\0'),(1626,'Obarcory',255,65535,65535,4294967295,'\0','\0'),(1627,'Spiolastay',255,65535,65535,4294967295,'\0','\0'),(1628,'Norele',255,65535,65535,4294967295,'\0','\0'),(1629,'Eaiprichon',255,65535,65535,4294967295,'\0','\0'),(1630,'Ivie',255,65535,65535,4294967295,'\0','\0'),(1631,'Ehist',255,65535,65535,4294967295,'\0','\0'),(1632,'Mepiy',255,65535,65535,4294967295,'\0','\0'),(1633,'Scustiooyam',255,65535,65535,4294967295,'\0','\0'),(1634,'Peiorop',255,65535,65535,4294967295,'\0','\0'),(1635,'Eitrary',255,65535,65535,4294967295,'\0','\0'),(1636,'Tiotentocub',255,65535,65535,4294967295,'\0','\0'),(1637,'Ebeiotorack',255,65535,65535,4294967295,'\0','\0'),(1638,'Ueewarepi',255,65535,65535,4294967295,'\0','\0'),(1639,'Pianiclae',255,65535,65535,4294967295,'\0','\0'),(1640,'Reexyarpa',255,65535,65535,4294967295,'\0','\0'),(1641,'Abitonaner',255,65535,65535,4294967295,'\0','\0'),(1642,'Ealoae',255,65535,65535,4294967295,'\0','\0'),(1643,'Uuapeyogle',255,65535,65535,4294967295,'\0','\0'),(1644,'Almaiik',255,65535,65535,4294967295,'\0','\0'),(1645,'Neonre',255,65535,65535,4294967295,'\0','\0'),(1646,'Enisecarolqu',255,65535,65535,4294967295,'\0','\0'),(1647,'Anyulnepoab',255,65535,65535,4294967295,'\0','\0'),(1648,'Eletiuena',255,65535,65535,4294967295,'\0','\0'),(1649,'Rishistuoed',255,65535,65535,4294967295,'\0','\0'),(1650,'Atunroesal',255,65535,65535,4294967295,'\0','\0'),(1651,'Ygeangei',255,65535,65535,4294967295,'\0','\0'),(1652,'Talaitystra',255,65535,65535,4294967295,'\0','\0'),(1653,'Inpetootarol',255,65535,65535,4294967295,'\0','\0'),(1654,'Otessgloiv',255,65535,65535,4294967295,'\0','\0'),(1655,'Razyap',255,65535,65535,4294967295,'\0','\0'),(1656,'Unle',255,65535,65535,4294967295,'\0','\0'),(1657,'Aysaey',255,65535,65535,4294967295,'\0','\0'),(1658,'Pealysauna',255,65535,65535,4294967295,'\0','\0'),(1659,'Cocoeerigo',255,65535,65535,4294967295,'\0','\0'),(1660,'Poeri',255,65535,65535,4294967295,'\0','\0'),(1661,'Aldoomadac',255,65535,65535,4294967295,'\0','\0'),(1662,'Rala',255,65535,65535,4294967295,'\0','\0'),(1663,'Ectehthey',255,65535,65535,4294967295,'\0','\0'),(1664,'Araciciiup',255,65535,65535,4294967295,'\0','\0'),(1665,'Invesiioctom',255,65535,65535,4294967295,'\0','\0'),(1666,'Ismoreg',255,65535,65535,4294967295,'\0','\0'),(1667,'Efleokipyhga',255,65535,65535,4294967295,'\0','\0'),(1668,'Iboienesti',255,65535,65535,4294967295,'\0','\0'),(1669,'Tiiaboispya',255,65535,65535,4294967295,'\0','\0'),(1670,'Ubutearnu',255,65535,65535,4294967295,'\0','\0'),(1671,'Leossaeyne',255,65535,65535,4294967295,'\0','\0'),(1672,'Hagirodikeep',255,65535,65535,4294967295,'\0','\0'),(1673,'Izpunaohtan',255,65535,65535,4294967295,'\0','\0'),(1674,'Intiteizyo',255,65535,65535,4294967295,'\0','\0'),(1675,'Eaateyat',255,65535,65535,4294967295,'\0','\0'),(1676,'Lire',255,65535,65535,4294967295,'\0','\0'),(1677,'Umonahetrao',255,65535,65535,4294967295,'\0','\0'),(1678,'Lani',255,65535,65535,4294967295,'\0','\0'),(1679,'Caqomeimay',255,65535,65535,4294967295,'\0','\0'),(1680,'Opierenire',255,65535,65535,4294967295,'\0','\0'),(1681,'Roiliipa',255,65535,65535,4294967295,'\0','\0'),(1682,'Icumem',255,65535,65535,4294967295,'\0','\0'),(1683,'Useoctrali',255,65535,65535,4294967295,'\0','\0'),(1684,'Revule',255,65535,65535,4294967295,'\0','\0'),(1685,'Iessupum',255,65535,65535,4294967295,'\0','\0'),(1686,'Sasepolue',255,65535,65535,4294967295,'\0','\0'),(1687,'Ostseel',255,65535,65535,4294967295,'\0','\0'),(1688,'Iyemaytaty',255,65535,65535,4294967295,'\0','\0'),(1689,'Eyetnioira',255,65535,65535,4294967295,'\0','\0'),(1690,'Oasieuwket',255,65535,65535,4294967295,'\0','\0'),(1691,'Iceyieirin',255,65535,65535,4294967295,'\0','\0'),(1692,'Dean',255,65535,65535,4294967295,'\0','\0'),(1693,'Fyoc',255,65535,65535,4294967295,'\0','\0'),(1694,'Awiybstio',255,65535,65535,4294967295,'\0','\0'),(1695,'Xili',255,65535,65535,4294967295,'\0','\0'),(1696,'Gyiunat',255,65535,65535,4294967295,'\0','\0'),(1697,'Riaewfeteiz',255,65535,65535,4294967295,'\0','\0'),(1698,'Alatoqu',255,65535,65535,4294967295,'\0','\0'),(1699,'Ainays',255,65535,65535,4294967295,'\0','\0'),(1700,'Uerutcaate',255,65535,65535,4294967295,'\0','\0'),(1701,'Veano',255,65535,65535,4294967295,'\0','\0'),(1702,'Fuoiic',255,65535,65535,4294967295,'\0','\0'),(1703,'Ealekugg',255,65535,65535,4294967295,'\0','\0'),(1704,'Adoxuocola',255,65535,65535,4294967295,'\0','\0'),(1705,'Amapiah',255,65535,65535,4294967295,'\0','\0'),(1706,'Rytiesuer',255,65535,65535,4294967295,'\0','\0'),(1707,'Eghibimal',255,65535,65535,4294967295,'\0','\0'),(1708,'Totteiem',255,65535,65535,4294967295,'\0','\0'),(1709,'Amupolro',255,65535,65535,4294967295,'\0','\0'),(1710,'Reoy',255,65535,65535,4294967295,'\0','\0'),(1711,'Riensdioymdu',255,65535,65535,4294967295,'\0','\0'),(1712,'Pliauspayaor',255,65535,65535,4294967295,'\0','\0'),(1713,'Ototerie',255,65535,65535,4294967295,'\0','\0'),(1714,'Hoibyathe',255,65535,65535,4294967295,'\0','\0'),(1715,'Aholer',255,65535,65535,4294967295,'\0','\0'),(1716,'Atalaoel',255,65535,65535,4294967295,'\0','\0'),(1717,'Ayorideomo',255,65535,65535,4294967295,'\0','\0'),(1718,'Oimni',255,65535,65535,4294967295,'\0','\0'),(1719,'Avpoheara',255,65535,65535,4294967295,'\0','\0'),(1720,'Ipgeprea',255,65535,65535,4294967295,'\0','\0'),(1721,'Abblueonlito',255,65535,65535,4294967295,'\0','\0'),(1722,'Eryorbepuist',255,65535,65535,4294967295,'\0','\0'),(1723,'Laessag',255,65535,65535,4294967295,'\0','\0'),(1724,'Foalsipast',255,65535,65535,4294967295,'\0','\0'),(1725,'Yostucuise',255,65535,65535,4294967295,'\0','\0'),(1726,'Atrooscepri',255,65535,65535,4294967295,'\0','\0'),(1727,'Esayoy',255,65535,65535,4294967295,'\0','\0'),(1728,'Leimemca',255,65535,65535,4294967295,'\0','\0'),(1729,'Aniicicli',255,65535,65535,4294967295,'\0','\0'),(1730,'Estreoa',255,65535,65535,4294967295,'\0','\0'),(1731,'Igipeiddlu',255,65535,65535,4294967295,'\0','\0'),(1732,'Moeiislacry',255,65535,65535,4294967295,'\0','\0'),(1733,'Adabemil',255,65535,65535,4294967295,'\0','\0'),(1734,'Depri',255,65535,65535,4294967295,'\0','\0'),(1735,'Theteusmiah',255,65535,65535,4294967295,'\0','\0'),(1736,'Avadiockey',255,65535,65535,4294967295,'\0','\0'),(1737,'Eaxai',255,65535,65535,4294967295,'\0','\0'),(1738,'Erio',255,65535,65535,4294967295,'\0','\0'),(1739,'Piyrodtyone',255,65535,65535,4294967295,'\0','\0'),(1740,'Ayiba',255,65535,65535,4294967295,'\0','\0'),(1741,'Neri',255,65535,65535,4294967295,'\0','\0'),(1742,'Tiankea',255,65535,65535,4294967295,'\0','\0'),(1743,'Oecferaea',255,65535,65535,4294967295,'\0','\0'),(1744,'Amniriad',255,65535,65535,4294967295,'\0','\0'),(1745,'Esti',255,65535,65535,4294967295,'\0','\0'),(1746,'Gydeaovli',255,65535,65535,4294967295,'\0','\0'),(1747,'Reonoro',255,65535,65535,4294967295,'\0','\0'),(1748,'Issvedreief',255,65535,65535,4294967295,'\0','\0'),(1749,'Plioneesoa',255,65535,65535,4294967295,'\0','\0'),(1750,'Uatemre',255,65535,65535,4294967295,'\0','\0'),(1751,'Naifniiso',255,65535,65535,4294967295,'\0','\0'),(1752,'Enkyat',255,65535,65535,4294967295,'\0','\0'),(1753,'Anaes',255,65535,65535,4294967295,'\0','\0'),(1754,'Oicintore',255,65535,65535,4294967295,'\0','\0'),(1755,'Obueisu',255,65535,65535,4294967295,'\0','\0'),(1756,'Ebitan',255,65535,65535,4294967295,'\0','\0'),(1757,'Choertru',255,65535,65535,4294967295,'\0','\0'),(1758,'Uoabeasm',255,65535,65535,4294967295,'\0','\0'),(1759,'Udbu',255,65535,65535,4294967295,'\0','\0'),(1760,'Idsoategor',255,65535,65535,4294967295,'\0','\0'),(1761,'Gloumsa',255,65535,65535,4294967295,'\0','\0'),(1762,'Silera',255,65535,65535,4294967295,'\0','\0'),(1763,'Ykidriegenew',255,65535,65535,4294967295,'\0','\0'),(1764,'Epeas',255,65535,65535,4294967295,'\0','\0'),(1765,'Eovtitepai',255,65535,65535,4294967295,'\0','\0'),(1766,'Ayeieriston',255,65535,65535,4294967295,'\0','\0'),(1767,'Iontno',255,65535,65535,4294967295,'\0','\0'),(1768,'Idrenor',255,65535,65535,4294967295,'\0','\0'),(1769,'Omiscaileni',255,65535,65535,4294967295,'\0','\0'),(1770,'Caopdaomse',255,65535,65535,4294967295,'\0','\0'),(1771,'Ehigoesy',255,65535,65535,4294967295,'\0','\0'),(1772,'Atapmosceute',255,65535,65535,4294967295,'\0','\0'),(1773,'Yeasmeaer',255,65535,65535,4294967295,'\0','\0'),(1774,'Rihetenefica',255,65535,65535,4294967295,'\0','\0'),(1775,'Oryceysayi',255,65535,65535,4294967295,'\0','\0'),(1776,'Iumne',255,65535,65535,4294967295,'\0','\0'),(1777,'Raycae',255,65535,65535,4294967295,'\0','\0'),(1778,'Hatu',255,65535,65535,4294967295,'\0','\0'),(1779,'Omiurithin',255,65535,65535,4294967295,'\0','\0'),(1780,'Eithucinaoth',255,65535,65535,4294967295,'\0','\0'),(1781,'Wealis',255,65535,65535,4294967295,'\0','\0'),(1782,'Cuyeowysy',255,65535,65535,4294967295,'\0','\0'),(1783,'Ytintri',255,65535,65535,4294967295,'\0','\0'),(1784,'Oratclanasee',255,65535,65535,4294967295,'\0','\0'),(1785,'Miark',255,65535,65535,4294967295,'\0','\0'),(1786,'Ainarule',255,65535,65535,4294967295,'\0','\0'),(1787,'Rhiaeseadec',255,65535,65535,4294967295,'\0','\0'),(1788,'Iistjuem',255,65535,65535,4294967295,'\0','\0'),(1789,'Baisboiur',255,65535,65535,4294967295,'\0','\0'),(1790,'Iseylaleno',255,65535,65535,4294967295,'\0','\0'),(1791,'Ahopoao',255,65535,65535,4294967295,'\0','\0'),(1792,'Engigsie',255,65535,65535,4294967295,'\0','\0'),(1793,'Niuniukhyo',255,65535,65535,4294967295,'\0','\0'),(1794,'Utpleanay',255,65535,65535,4294967295,'\0','\0'),(1795,'Arkeefeshies',255,65535,65535,4294967295,'\0','\0'),(1796,'Ajskoeuguco',255,65535,65535,4294967295,'\0','\0'),(1797,'Eourni',255,65535,65535,4294967295,'\0','\0'),(1798,'Ybingoli',255,65535,65535,4294967295,'\0','\0'),(1799,'Iangbutees',255,65535,65535,4294967295,'\0','\0'),(1800,'Ispipoentisi',255,65535,65535,4294967295,'\0','\0'),(1801,'Doeyertiona',255,65535,65535,4294967295,'\0','\0'),(1802,'Areneisash',255,65535,65535,4294967295,'\0','\0'),(1803,'Oreyaher',255,65535,65535,4294967295,'\0','\0'),(1804,'Isreti',255,65535,65535,4294967295,'\0','\0'),(1805,'Earydle',255,65535,65535,4294967295,'\0','\0'),(1806,'Iteongi',255,65535,65535,4294967295,'\0','\0'),(1807,'Atslohoemow',255,65535,65535,4294967295,'\0','\0'),(1808,'Eueflanoast',255,65535,65535,4294967295,'\0','\0'),(1809,'Isditimioov',255,65535,65535,4294967295,'\0','\0'),(1810,'Yhyemeini',255,65535,65535,4294967295,'\0','\0'),(1811,'Aocyovete',255,65535,65535,4294967295,'\0','\0'),(1812,'Easip',255,65535,65535,4294967295,'\0','\0'),(1813,'Yalty',255,65535,65535,4294967295,'\0','\0'),(1814,'Epchyilopab',255,65535,65535,4294967295,'\0','\0'),(1815,'Estidifa',255,65535,65535,4294967295,'\0','\0'),(1816,'Oluolaodat',255,65535,65535,4294967295,'\0','\0'),(1817,'Ayolan',255,65535,65535,4294967295,'\0','\0'),(1818,'Iypapariun',255,65535,65535,4294967295,'\0','\0'),(1819,'Anesifare',255,65535,65535,4294967295,'\0','\0'),(1820,'Amastaisreac',255,65535,65535,4294967295,'\0','\0'),(1821,'Loocechanes',255,65535,65535,4294967295,'\0','\0'),(1822,'Leraoseor',255,65535,65535,4294967295,'\0','\0'),(1823,'Ocok',255,65535,65535,4294967295,'\0','\0'),(1824,'Atriyses',255,65535,65535,4294967295,'\0','\0'),(1825,'Eaane',255,65535,65535,4294967295,'\0','\0'),(1826,'Urra',255,65535,65535,4294967295,'\0','\0'),(1827,'Giteniastai',255,65535,65535,4294967295,'\0','\0'),(1828,'Awaile',255,65535,65535,4294967295,'\0','\0'),(1829,'Iome',255,65535,65535,4294967295,'\0','\0'),(1830,'Ossakoreat',255,65535,65535,4294967295,'\0','\0'),(1831,'Aheceur',255,65535,65535,4294967295,'\0','\0'),(1832,'Yonachlu',255,65535,65535,4294967295,'\0','\0'),(1833,'Agakpraa',255,65535,65535,4294967295,'\0','\0'),(1834,'Entytiean',255,65535,65535,4294967295,'\0','\0'),(1835,'Ryakati',255,65535,65535,4294967295,'\0','\0'),(1836,'Cuvi',255,65535,65535,4294967295,'\0','\0'),(1837,'Ofatuche',255,65535,65535,4294967295,'\0','\0'),(1838,'Omaaonumo',255,65535,65535,4294967295,'\0','\0'),(1839,'Fuoyiri',255,65535,65535,4294967295,'\0','\0'),(1840,'Doassaboidi',255,65535,65535,4294967295,'\0','\0'),(1841,'Aalneq',255,65535,65535,4294967295,'\0','\0'),(1842,'Icorosiok',255,65535,65535,4294967295,'\0','\0'),(1843,'Ylve',255,65535,65535,4294967295,'\0','\0'),(1844,'Grionoru',255,65535,65535,4294967295,'\0','\0'),(1845,'Uaiac',255,65535,65535,4294967295,'\0','\0'),(1846,'Leinibli',255,65535,65535,4294967295,'\0','\0'),(1847,'Eapoenpie',255,65535,65535,4294967295,'\0','\0'),(1848,'Arireulona',255,65535,65535,4294967295,'\0','\0'),(1849,'Aiyaprena',255,65535,65535,4294967295,'\0','\0'),(1850,'Umagivisato',255,65535,65535,4294967295,'\0','\0'),(1851,'Exalo',255,65535,65535,4294967295,'\0','\0'),(1852,'Eglifu',255,65535,65535,4294967295,'\0','\0'),(1853,'Leinhyola',255,65535,65535,4294967295,'\0','\0'),(1854,'Adte',255,65535,65535,4294967295,'\0','\0'),(1855,'Buniootier',255,65535,65535,4294967295,'\0','\0'),(1856,'Uastriinnu',255,65535,65535,4294967295,'\0','\0'),(1857,'Yediavioh',255,65535,65535,4294967295,'\0','\0'),(1858,'Ayakauryus',255,65535,65535,4294967295,'\0','\0'),(1859,'Umteuyiab',255,65535,65535,4294967295,'\0','\0'),(1860,'Boapertweaer',255,65535,65535,4294967295,'\0','\0'),(1861,'Peteyo',255,65535,65535,4294967295,'\0','\0'),(1862,'Dicedae',255,65535,65535,4294967295,'\0','\0'),(1863,'Neaistine',255,65535,65535,4294967295,'\0','\0'),(1864,'Mayanodpe',255,65535,65535,4294967295,'\0','\0'),(1865,'Aeleeonu',255,65535,65535,4294967295,'\0','\0'),(1866,'Exyliyh',255,65535,65535,4294967295,'\0','\0'),(1867,'Giylataonon',255,65535,65535,4294967295,'\0','\0'),(1868,'Badoonhy',255,65535,65535,4294967295,'\0','\0'),(1869,'Ieeye',255,65535,65535,4294967295,'\0','\0'),(1870,'Nautedo',255,65535,65535,4294967295,'\0','\0'),(1871,'Nortanoto',255,65535,65535,4294967295,'\0','\0'),(1872,'Nieo',255,65535,65535,4294967295,'\0','\0'),(1873,'Letyrais',255,65535,65535,4294967295,'\0','\0'),(1874,'Keotreosimb',255,65535,65535,4294967295,'\0','\0'),(1875,'Ubki',255,65535,65535,4294967295,'\0','\0'),(1876,'Teanarytri',255,65535,65535,4294967295,'\0','\0'),(1877,'Ayidchaolera',255,65535,65535,4294967295,'\0','\0'),(1878,'Arein',255,65535,65535,4294967295,'\0','\0'),(1879,'Essioniedo',255,65535,65535,4294967295,'\0','\0'),(1880,'Strucapla',255,65535,65535,4294967295,'\0','\0'),(1881,'Erboocuniat',255,65535,65535,4294967295,'\0','\0'),(1882,'Lafuakuot',255,65535,65535,4294967295,'\0','\0'),(1883,'Iluasotmaov',255,65535,65535,4294967295,'\0','\0'),(1884,'Uobo',255,65535,65535,4294967295,'\0','\0'),(1885,'Nesucuraet',255,65535,65535,4294967295,'\0','\0'),(1886,'Miorploe',255,65535,65535,4294967295,'\0','\0'),(1887,'Abygiebaog',255,65535,65535,4294967295,'\0','\0'),(1888,'Litiarigroa',255,65535,65535,4294967295,'\0','\0'),(1889,'Uleauira',255,65535,65535,4294967295,'\0','\0'),(1890,'Anilungatne',255,65535,65535,4294967295,'\0','\0'),(1891,'Aructiad',255,65535,65535,4294967295,'\0','\0'),(1892,'Uknemougagi',255,65535,65535,4294967295,'\0','\0'),(1893,'Iniy',255,65535,65535,4294967295,'\0','\0'),(1894,'Zoisniis',255,65535,65535,4294967295,'\0','\0'),(1895,'Yiaciag',255,65535,65535,4294967295,'\0','\0'),(1896,'Keep',255,65535,65535,4294967295,'\0','\0'),(1897,'Acydophe',255,65535,65535,4294967295,'\0','\0'),(1898,'Geaemi',255,65535,65535,4294967295,'\0','\0'),(1899,'Ospuxieteo',255,65535,65535,4294967295,'\0','\0'),(1900,'Coivri',255,65535,65535,4294967295,'\0','\0'),(1901,'Apil',255,65535,65535,4294967295,'\0','\0'),(1902,'Axulerehco',255,65535,65535,4294967295,'\0','\0'),(1903,'Oedifali',255,65535,65535,4294967295,'\0','\0'),(1904,'Tety',255,65535,65535,4294967295,'\0','\0'),(1905,'Saeftolfiody',255,65535,65535,4294967295,'\0','\0'),(1906,'Itmiogacmuan',255,65535,65535,4294967295,'\0','\0'),(1907,'Estismupeet',255,65535,65535,4294967295,'\0','\0'),(1908,'Oeio',255,65535,65535,4294967295,'\0','\0'),(1909,'Ahaog',255,65535,65535,4294967295,'\0','\0'),(1910,'Ranei',255,65535,65535,4294967295,'\0','\0'),(1911,'Vebuereru',255,65535,65535,4294967295,'\0','\0'),(1912,'Haerubhe',255,65535,65535,4294967295,'\0','\0'),(1913,'Adaufra',255,65535,65535,4294967295,'\0','\0'),(1914,'Tiuanta',255,65535,65535,4294967295,'\0','\0'),(1915,'Weocynis',255,65535,65535,4294967295,'\0','\0'),(1916,'Ireraeeas',255,65535,65535,4294967295,'\0','\0'),(1917,'Deirdesmpaca',255,65535,65535,4294967295,'\0','\0'),(1918,'Roaoveang',255,65535,65535,4294967295,'\0','\0'),(1919,'Onisag',255,65535,65535,4294967295,'\0','\0'),(1920,'Gruarhipra',255,65535,65535,4294967295,'\0','\0'),(1921,'Aroesinufu',255,65535,65535,4294967295,'\0','\0'),(1922,'Trileigha',255,65535,65535,4294967295,'\0','\0'),(1923,'Ertiem',255,65535,65535,4294967295,'\0','\0'),(1924,'Etubluyp',255,65535,65535,4294967295,'\0','\0'),(1925,'Aosciey',255,65535,65535,4294967295,'\0','\0'),(1926,'Oraie',255,65535,65535,4294967295,'\0','\0'),(1927,'Lomyeapleu',255,65535,65535,4294967295,'\0','\0'),(1928,'Dateo',255,65535,65535,4294967295,'\0','\0'),(1929,'Mion',255,65535,65535,4294967295,'\0','\0'),(1930,'Inpoeri',255,65535,65535,4294967295,'\0','\0'),(1931,'Aneeinein',255,65535,65535,4294967295,'\0','\0'),(1932,'Aphisieato',255,65535,65535,4294967295,'\0','\0'),(1933,'Utopmitrat',255,65535,65535,4294967295,'\0','\0'),(1934,'Orca',255,65535,65535,4294967295,'\0','\0'),(1935,'Tieat',255,65535,65535,4294967295,'\0','\0'),(1936,'Udino',255,65535,65535,4294967295,'\0','\0'),(1937,'Uddsae',255,65535,65535,4294967295,'\0','\0'),(1938,'Aadaryfrosu',255,65535,65535,4294967295,'\0','\0'),(1939,'Epafco',255,65535,65535,4294967295,'\0','\0'),(1940,'Epleal',255,65535,65535,4294967295,'\0','\0'),(1941,'Odiyiaani',255,65535,65535,4294967295,'\0','\0'),(1942,'Odmi',255,65535,65535,4294967295,'\0','\0'),(1943,'Eliyocme',255,65535,65535,4294967295,'\0','\0'),(1944,'Ateceetlene',255,65535,65535,4294967295,'\0','\0'),(1945,'Swaino',255,65535,65535,4294967295,'\0','\0'),(1946,'Eashie',255,65535,65535,4294967295,'\0','\0'),(1947,'Radesciaoni',255,65535,65535,4294967295,'\0','\0'),(1948,'Rousi',255,65535,65535,4294967295,'\0','\0'),(1949,'Onteaduho',255,65535,65535,4294967295,'\0','\0'),(1950,'Yddudermo',255,65535,65535,4294967295,'\0','\0'),(1951,'Sukasha',255,65535,65535,4294967295,'\0','\0'),(1952,'Epnease',255,65535,65535,4294967295,'\0','\0'),(1953,'Aybefo',255,65535,65535,4294967295,'\0','\0'),(1954,'Ewacuifa',255,65535,65535,4294967295,'\0','\0'),(1955,'Meipeal',255,65535,65535,4294967295,'\0','\0'),(1956,'Iriaybutea',255,65535,65535,4294967295,'\0','\0'),(1957,'Relolossem',255,65535,65535,4294967295,'\0','\0'),(1958,'Ifneleinie',255,65535,65535,4294967295,'\0','\0'),(1959,'Isilotio',255,65535,65535,4294967295,'\0','\0'),(1960,'Oresyeeoer',255,65535,65535,4294967295,'\0','\0'),(1961,'Idaow',255,65535,65535,4294967295,'\0','\0'),(1962,'Otuon',255,65535,65535,4294967295,'\0','\0'),(1963,'Erigelieve',255,65535,65535,4294967295,'\0','\0'),(1964,'Puotayone',255,65535,65535,4294967295,'\0','\0'),(1965,'Uroentullia',255,65535,65535,4294967295,'\0','\0'),(1966,'Eneus',255,65535,65535,4294967295,'\0','\0'),(1967,'Tezegotiva',255,65535,65535,4294967295,'\0','\0'),(1968,'Idalselyois',255,65535,65535,4294967295,'\0','\0'),(1969,'Eintuautsci',255,65535,65535,4294967295,'\0','\0'),(1970,'Untuonassca',255,65535,65535,4294967295,'\0','\0'),(1971,'Elengleneo',255,65535,65535,4294967295,'\0','\0'),(1972,'Atesismaobra',255,65535,65535,4294967295,'\0','\0'),(1973,'Ajikadiantoc',255,65535,65535,4294967295,'\0','\0'),(1974,'Therepeyvo',255,65535,65535,4294967295,'\0','\0'),(1975,'Aojoingy',255,65535,65535,4294967295,'\0','\0'),(1976,'Itiyaent',255,65535,65535,4294967295,'\0','\0'),(1977,'Methy',255,65535,65535,4294967295,'\0','\0'),(1978,'Aordeaa',255,65535,65535,4294967295,'\0','\0'),(1979,'Onizatbra',255,65535,65535,4294967295,'\0','\0'),(1980,'Seom',255,65535,65535,4294967295,'\0','\0'),(1981,'Ainustpasta',255,65535,65535,4294967295,'\0','\0'),(1982,'Ayalesnolans',255,65535,65535,4294967295,'\0','\0'),(1983,'Yautinif',255,65535,65535,4294967295,'\0','\0'),(1984,'Anayaro',255,65535,65535,4294967295,'\0','\0'),(1985,'Zecli',255,65535,65535,4294967295,'\0','\0'),(1986,'Droeianop',255,65535,65535,4294967295,'\0','\0'),(1987,'Mieoostil',255,65535,65535,4294967295,'\0','\0'),(1988,'Ararens',255,65535,65535,4294967295,'\0','\0'),(1989,'Lineaeti',255,65535,65535,4294967295,'\0','\0'),(1990,'Raowuwnal',255,65535,65535,4294967295,'\0','\0'),(1991,'Oeris',255,65535,65535,4294967295,'\0','\0'),(1992,'Algaosheiper',255,65535,65535,4294967295,'\0','\0'),(1993,'Ismyraieu',255,65535,65535,4294967295,'\0','\0'),(1994,'Raride',255,65535,65535,4294967295,'\0','\0'),(1995,'Estabembaoa',255,65535,65535,4294967295,'\0','\0'),(1996,'Reaiyoa',255,65535,65535,4294967295,'\0','\0'),(1997,'Ibid',255,65535,65535,4294967295,'\0','\0'),(1998,'Neyaetseo',255,65535,65535,4294967295,'\0','\0'),(1999,'Hoseageatsa',255,65535,65535,4294967295,'\0','\0'),(2000,'Isemrepalre',255,65535,65535,4294967295,'\0','\0'),(2001,'Laed',255,65535,65535,4294967295,'\0','\0'),(2002,'Swierheoang',255,65535,65535,4294967295,'\0','\0'),(2003,'Echenemaolte',255,65535,65535,4294967295,'\0','\0'),(2004,'Etogpeu',255,65535,65535,4294967295,'\0','\0'),(2005,'Miedgula',255,65535,65535,4294967295,'\0','\0'),(2006,'Eirth',255,65535,65535,4294967295,'\0','\0'),(2007,'Erotaile',255,65535,65535,4294967295,'\0','\0'),(2008,'Rausmaeoba',255,65535,65535,4294967295,'\0','\0'),(2009,'Riciseualhy',255,65535,65535,4294967295,'\0','\0'),(2010,'Isicerkaogli',255,65535,65535,4294967295,'\0','\0'),(2011,'Otoupavy',255,65535,65535,4294967295,'\0','\0'),(2012,'Liyrueay',255,65535,65535,4294967295,'\0','\0'),(2013,'Gleenessuma',255,65535,65535,4294967295,'\0','\0'),(2014,'Anathiiyaol',255,65535,65535,4294967295,'\0','\0'),(2015,'Keiedinoem',255,65535,65535,4294967295,'\0','\0'),(2016,'Choame',255,65535,65535,4294967295,'\0','\0'),(2017,'Apear',255,65535,65535,4294967295,'\0','\0'),(2018,'Unabluerylge',255,65535,65535,4294967295,'\0','\0'),(2019,'Heifryaeox',255,65535,65535,4294967295,'\0','\0'),(2020,'Urfmaoae',255,65535,65535,4294967295,'\0','\0'),(2021,'Okee',255,65535,65535,4294967295,'\0','\0'),(2022,'Igeesick',255,65535,65535,4294967295,'\0','\0'),(2023,'Afruoieras',255,65535,65535,4294967295,'\0','\0'),(2024,'Paulroate',255,65535,65535,4294967295,'\0','\0'),(2025,'Epivel',255,65535,65535,4294967295,'\0','\0'),(2026,'Iheraesmlomi',255,65535,65535,4294967295,'\0','\0'),(2027,'Meonaigaqu',255,65535,65535,4294967295,'\0','\0'),(2028,'Enestriion',255,65535,65535,4294967295,'\0','\0'),(2029,'Maariq',255,65535,65535,4294967295,'\0','\0'),(2030,'Acchiieri',255,65535,65535,4294967295,'\0','\0'),(2031,'Oowaph',255,65535,65535,4294967295,'\0','\0'),(2032,'Iokineyae',255,65535,65535,4294967295,'\0','\0'),(2033,'Oiobteocke',255,65535,65535,4294967295,'\0','\0'),(2034,'Ayuatu',255,65535,65535,4294967295,'\0','\0'),(2035,'Suake',255,65535,65535,4294967295,'\0','\0'),(2036,'Aacid',255,65535,65535,4294967295,'\0','\0'),(2037,'Eoau',255,65535,65535,4294967295,'\0','\0'),(2038,'Scilydiiol',255,65535,65535,4294967295,'\0','\0'),(2039,'Ahesolidycad',255,65535,65535,4294967295,'\0','\0'),(2040,'Adalyboveom',255,65535,65535,4294967295,'\0','\0'),(2041,'Atyete',255,65535,65535,4294967295,'\0','\0'),(2042,'Inblationeic',255,65535,65535,4294967295,'\0','\0'),(2043,'Eaaviile',255,65535,65535,4294967295,'\0','\0'),(2044,'Pheperailk',255,65535,65535,4294967295,'\0','\0'),(2045,'Lidrytotiail',255,65535,65535,4294967295,'\0','\0'),(2046,'Oesyiran',255,65535,65535,4294967295,'\0','\0'),(2047,'Iyissoth',255,65535,65535,4294967295,'\0','\0'),(2048,'Olou',255,65535,65535,4294967295,'\0','\0'),(2049,'Piuoe',255,65535,65535,4294967295,'\0','\0'),(2050,'Ecti',255,65535,65535,4294967295,'\0','\0'),(2051,'Itoscote',255,65535,65535,4294967295,'\0','\0'),(2052,'Cometirondco',255,65535,65535,4294967295,'\0','\0'),(2053,'Yonieiis',255,65535,65535,4294967295,'\0','\0'),(2054,'Balaeri',255,65535,65535,4294967295,'\0','\0'),(2055,'Epethio',255,65535,65535,4294967295,'\0','\0'),(2056,'Illyey',255,65535,65535,4294967295,'\0','\0'),(2057,'Voeivfido',255,65535,65535,4294967295,'\0','\0'),(2058,'Seasteaolen',255,65535,65535,4294967295,'\0','\0'),(2059,'Ivromioev',255,65535,65535,4294967295,'\0','\0'),(2060,'Ionyoete',255,65535,65535,4294967295,'\0','\0'),(2061,'Aloa',255,65535,65535,4294967295,'\0','\0'),(2062,'Eual',255,65535,65535,4294967295,'\0','\0'),(2063,'Omclueeub',255,65535,65535,4294967295,'\0','\0'),(2064,'Ilalyuafon',255,65535,65535,4294967295,'\0','\0'),(2065,'Atayoado',255,65535,65535,4294967295,'\0','\0'),(2066,'Mameaecde',255,65535,65535,4294967295,'\0','\0'),(2067,'Ehenilioi',255,65535,65535,4294967295,'\0','\0'),(2068,'Ioeyainurn',255,65535,65535,4294967295,'\0','\0'),(2069,'Opyrybiot',255,65535,65535,4294967295,'\0','\0'),(2070,'Useintinusu',255,65535,65535,4294967295,'\0','\0'),(2071,'Esieacwo',255,65535,65535,4294967295,'\0','\0'),(2072,'Saeliedai',255,65535,65535,4294967295,'\0','\0'),(2073,'Leabanetoit',255,65535,65535,4294967295,'\0','\0'),(2074,'Paotatape',255,65535,65535,4294967295,'\0','\0'),(2075,'Neceseatus',255,65535,65535,4294967295,'\0','\0'),(2076,'Ellapati',255,65535,65535,4294967295,'\0','\0'),(2077,'Ospiful',255,65535,65535,4294967295,'\0','\0'),(2078,'Eurep',255,65535,65535,4294967295,'\0','\0'),(2079,'Neacap',255,65535,65535,4294967295,'\0','\0'),(2080,'Eraveawnaul',255,65535,65535,4294967295,'\0','\0'),(2081,'Aigaitobo',255,65535,65535,4294967295,'\0','\0'),(2082,'Neeyloadpe',255,65535,65535,4294967295,'\0','\0'),(2083,'Teaghoryul',255,65535,65535,4294967295,'\0','\0'),(2084,'Eraommuseste',255,65535,65535,4294967295,'\0','\0'),(2085,'Aeyuciagy',255,65535,65535,4294967295,'\0','\0'),(2086,'Ipyai',255,65535,65535,4294967295,'\0','\0'),(2087,'Aralenvi',255,65535,65535,4294967295,'\0','\0'),(2088,'Neipao',255,65535,65535,4294967295,'\0','\0'),(2089,'Ointtaau',255,65535,65535,4294967295,'\0','\0'),(2090,'Agenithubuid',255,65535,65535,4294967295,'\0','\0'),(2091,'Gielima',255,65535,65535,4294967295,'\0','\0'),(2092,'Looleae',255,65535,65535,4294967295,'\0','\0'),(2093,'Ezahoveonen',255,65535,65535,4294967295,'\0','\0'),(2094,'Adinle',255,65535,65535,4294967295,'\0','\0'),(2095,'Asonniqueblo',255,65535,65535,4294967295,'\0','\0'),(2096,'Bueicprogli',255,65535,65535,4294967295,'\0','\0'),(2097,'Ilneeloyal',255,65535,65535,4294967295,'\0','\0'),(2098,'Rilori',255,65535,65535,4294967295,'\0','\0'),(2099,'Anifsa',255,65535,65535,4294967295,'\0','\0'),(2100,'Aokalcoiz',255,65535,65535,4294967295,'\0','\0'),(2101,'Eseuimponesm',255,65535,65535,4294967295,'\0','\0'),(2102,'Ilalea',255,65535,65535,4294967295,'\0','\0'),(2103,'Eaeadog',255,65535,65535,4294967295,'\0','\0'),(2104,'Ayoyve',255,65535,65535,4294967295,'\0','\0'),(2105,'Onneieram',255,65535,65535,4294967295,'\0','\0'),(2106,'Keohesoreem',255,65535,65535,4294967295,'\0','\0'),(2107,'Aminisentare',255,65535,65535,4294967295,'\0','\0'),(2108,'Olondix',255,65535,65535,4294967295,'\0','\0'),(2109,'Engigeotiste',255,65535,65535,4294967295,'\0','\0'),(2110,'Icalyaul',255,65535,65535,4294967295,'\0','\0'),(2111,'Elapceuy',255,65535,65535,4294967295,'\0','\0'),(2112,'Obliyakist',255,65535,65535,4294967295,'\0','\0'),(2113,'Moebaima',255,65535,65535,4294967295,'\0','\0'),(2114,'Gitiatspu',255,65535,65535,4294967295,'\0','\0'),(2115,'Ylpyehbli',255,65535,65535,4294967295,'\0','\0'),(2116,'Alodaucenke',255,65535,65535,4294967295,'\0','\0'),(2117,'Alentsa',255,65535,65535,4294967295,'\0','\0'),(2118,'Ceabrispypre',255,65535,65535,4294967295,'\0','\0'),(2119,'Diteabic',255,65535,65535,4294967295,'\0','\0'),(2120,'Youmalizo',255,65535,65535,4294967295,'\0','\0'),(2121,'Ostae',255,65535,65535,4294967295,'\0','\0'),(2122,'Nashupra',255,65535,65535,4294967295,'\0','\0'),(2123,'Naetioroye',255,65535,65535,4294967295,'\0','\0'),(2124,'Ezzisayimar',255,65535,65535,4294967295,'\0','\0'),(2125,'Moageydofni',255,65535,65535,4294967295,'\0','\0'),(2126,'Ymiolpetier',255,65535,65535,4294967295,'\0','\0'),(2127,'Enust',255,65535,65535,4294967295,'\0','\0'),(2128,'Bleal',255,65535,65535,4294967295,'\0','\0'),(2129,'Ytarea',255,65535,65535,4294967295,'\0','\0'),(2130,'Ickyi',255,65535,65535,4294967295,'\0','\0'),(2131,'Efonclo',255,65535,65535,4294967295,'\0','\0'),(2132,'Sorute',255,65535,65535,4294967295,'\0','\0'),(2133,'Inorarmi',255,65535,65535,4294967295,'\0','\0'),(2134,'Caooramte',255,65535,65535,4294967295,'\0','\0'),(2135,'Ongeyaos',255,65535,65535,4294967295,'\0','\0'),(2136,'Ulabuine',255,65535,65535,4294967295,'\0','\0'),(2137,'Edryassit',255,65535,65535,4294967295,'\0','\0'),(2138,'Owroachga',255,65535,65535,4294967295,'\0','\0'),(2139,'Olabopyta',255,65535,65535,4294967295,'\0','\0'),(2140,'Arearo',255,65535,65535,4294967295,'\0','\0'),(2141,'Caeq',255,65535,65535,4294967295,'\0','\0'),(2142,'Tomerwhatiro',255,65535,65535,4294967295,'\0','\0'),(2143,'Trientoyiae',255,65535,65535,4294967295,'\0','\0'),(2144,'Askibluift',255,65535,65535,4294967295,'\0','\0'),(2145,'Utuout',255,65535,65535,4294967295,'\0','\0'),(2146,'Suieai',255,65535,65535,4294967295,'\0','\0'),(2147,'Osot',255,65535,65535,4294967295,'\0','\0'),(2148,'Litieesedi',255,65535,65535,4294967295,'\0','\0'),(2149,'Peeowywang',255,65535,65535,4294967295,'\0','\0'),(2150,'Tuee',255,65535,65535,4294967295,'\0','\0'),(2151,'Pashyontini',255,65535,65535,4294967295,'\0','\0'),(2152,'Ceetreonoer',255,65535,65535,4294967295,'\0','\0'),(2153,'Iisemuinunt',255,65535,65535,4294967295,'\0','\0'),(2154,'Roechianeci',255,65535,65535,4294967295,'\0','\0'),(2155,'Seinwricyi',255,65535,65535,4294967295,'\0','\0'),(2156,'Ubrewhati',255,65535,65535,4294967295,'\0','\0'),(2157,'Acea',255,65535,65535,4294967295,'\0','\0'),(2158,'Itabeyqu',255,65535,65535,4294967295,'\0','\0'),(2159,'Breadbe',255,65535,65535,4294967295,'\0','\0'),(2160,'Peciye',255,65535,65535,4294967295,'\0','\0'),(2161,'Otitupipeoss',255,65535,65535,4294967295,'\0','\0'),(2162,'Deraolwoaf',255,65535,65535,4294967295,'\0','\0'),(2163,'Cyetil',255,65535,65535,4294967295,'\0','\0'),(2164,'Laeri',255,65535,65535,4294967295,'\0','\0'),(2165,'Ongouo',255,65535,65535,4294967295,'\0','\0'),(2166,'Ogoisediem',255,65535,65535,4294967295,'\0','\0'),(2167,'Itaatolon',255,65535,65535,4294967295,'\0','\0'),(2168,'Ecinambo',255,65535,65535,4294967295,'\0','\0'),(2169,'Ernei',255,65535,65535,4294967295,'\0','\0'),(2170,'Opeieti',255,65535,65535,4294967295,'\0','\0'),(2171,'Etleoe',255,65535,65535,4294967295,'\0','\0'),(2172,'Ononeotuthne',255,65535,65535,4294967295,'\0','\0'),(2173,'Eponesaetar',255,65535,65535,4294967295,'\0','\0'),(2174,'Mayieeymi',255,65535,65535,4294967295,'\0','\0'),(2175,'Ripoaniya',255,65535,65535,4294967295,'\0','\0'),(2176,'Ysmramiteig',255,65535,65535,4294967295,'\0','\0'),(2177,'Ayaicbi',255,65535,65535,4294967295,'\0','\0'),(2178,'Ineatyais',255,65535,65535,4294967295,'\0','\0'),(2179,'Opde',255,65535,65535,4294967295,'\0','\0'),(2180,'Rebobeng',255,65535,65535,4294967295,'\0','\0'),(2181,'Ieawsteop',255,65535,65535,4294967295,'\0','\0'),(2182,'Eneeuibbe',255,65535,65535,4294967295,'\0','\0'),(2183,'Thaay',255,65535,65535,4294967295,'\0','\0'),(2184,'Yoporytepoco',255,65535,65535,4294967295,'\0','\0'),(2185,'Eryeymaiest',255,65535,65535,4294967295,'\0','\0'),(2186,'Tuonyoliar',255,65535,65535,4294967295,'\0','\0'),(2187,'Opsurele',255,65535,65535,4294967295,'\0','\0'),(2188,'Neuntinasma',255,65535,65535,4294967295,'\0','\0'),(2189,'Euen',255,65535,65535,4294967295,'\0','\0'),(2190,'Iinri',255,65535,65535,4294967295,'\0','\0'),(2191,'Areatri',255,65535,65535,4294967295,'\0','\0'),(2192,'Sostrineenos',255,65535,65535,4294967295,'\0','\0'),(2193,'Ysstihi',255,65535,65535,4294967295,'\0','\0'),(2194,'Ynoik',255,65535,65535,4294967295,'\0','\0'),(2195,'Icnibliies',255,65535,65535,4294967295,'\0','\0'),(2196,'Ahar',255,65535,65535,4294967295,'\0','\0'),(2197,'Ehkizeief',255,65535,65535,4294967295,'\0','\0'),(2198,'Uisipri',255,65535,65535,4294967295,'\0','\0'),(2199,'Eozrebti',255,65535,65535,4294967295,'\0','\0'),(2200,'Otseirhuga',255,65535,65535,4294967295,'\0','\0'),(2201,'Caabliaasi',255,65535,65535,4294967295,'\0','\0'),(2202,'Blaacixukne',255,65535,65535,4294967295,'\0','\0'),(2203,'Abriat',255,65535,65535,4294967295,'\0','\0'),(2204,'Edeitigamti',255,65535,65535,4294967295,'\0','\0'),(2205,'Atpar',255,65535,65535,4294967295,'\0','\0'),(2206,'Iale',255,65535,65535,4294967295,'\0','\0'),(2207,'Rieicen',255,65535,65535,4294967295,'\0','\0'),(2208,'Imepra',255,65535,65535,4294967295,'\0','\0'),(2209,'Elynu',255,65535,65535,4294967295,'\0','\0'),(2210,'Eidti',255,65535,65535,4294967295,'\0','\0'),(2211,'Agoucem',255,65535,65535,4294967295,'\0','\0'),(2212,'Deangape',255,65535,65535,4294967295,'\0','\0'),(2213,'Entebe',255,65535,65535,4294967295,'\0','\0'),(2214,'Ottaili',255,65535,65535,4294967295,'\0','\0'),(2215,'Recuypin',255,65535,65535,4294967295,'\0','\0'),(2216,'Wasnaiet',255,65535,65535,4294967295,'\0','\0'),(2217,'Essreacitphe',255,65535,65535,4294967295,'\0','\0'),(2218,'Apmeanyecti',255,65535,65535,4294967295,'\0','\0'),(2219,'Proacte',255,65535,65535,4294967295,'\0','\0'),(2220,'Egiirli',255,65535,65535,4294967295,'\0','\0'),(2221,'Aunera',255,65535,65535,4294967295,'\0','\0'),(2222,'Aneanecey',255,65535,65535,4294967295,'\0','\0'),(2223,'Demeardme',255,65535,65535,4294967295,'\0','\0'),(2224,'Abvate',255,65535,65535,4294967295,'\0','\0'),(2225,'Eymerui',255,65535,65535,4294967295,'\0','\0'),(2226,'Ectoae',255,65535,65535,4294967295,'\0','\0'),(2227,'Osro',255,65535,65535,4294967295,'\0','\0'),(2228,'Ezein',255,65535,65535,4294967295,'\0','\0'),(2229,'Noilasmniosu',255,65535,65535,4294967295,'\0','\0'),(2230,'Melomuraleu',255,65535,65535,4294967295,'\0','\0'),(2231,'Reneumriasol',255,65535,65535,4294967295,'\0','\0'),(2232,'Okgaeve',255,65535,65535,4294967295,'\0','\0'),(2233,'Ysunduea',255,65535,65535,4294967295,'\0','\0'),(2234,'Biasco',255,65535,65535,4294967295,'\0','\0'),(2235,'Oyfomeuxse',255,65535,65535,4294967295,'\0','\0'),(2236,'Atamar',255,65535,65535,4294967295,'\0','\0'),(2237,'Ypaeliosat',255,65535,65535,4294967295,'\0','\0'),(2238,'Yiguldreah',255,65535,65535,4294967295,'\0','\0'),(2239,'Onskaepem',255,65535,65535,4294967295,'\0','\0'),(2240,'Stiyeuy',255,65535,65535,4294967295,'\0','\0'),(2241,'Afenjuorrwai',255,65535,65535,4294967295,'\0','\0'),(2242,'Pepileneord',255,65535,65535,4294967295,'\0','\0'),(2243,'Stiendosli',255,65535,65535,4294967295,'\0','\0'),(2244,'Lobiaoig',255,65535,65535,4294967295,'\0','\0'),(2245,'Engmeclioi',255,65535,65535,4294967295,'\0','\0'),(2246,'Otchoirfluow',255,65535,65535,4294967295,'\0','\0'),(2247,'Ienario',255,65535,65535,4294967295,'\0','\0'),(2248,'Erabtigyh',255,65535,65535,4294967295,'\0','\0'),(2249,'Ilereondofi',255,65535,65535,4294967295,'\0','\0'),(2250,'Amaeyloid',255,65535,65535,4294967295,'\0','\0'),(2251,'Arteveladepi',255,65535,65535,4294967295,'\0','\0'),(2252,'Angapidiao',255,65535,65535,4294967295,'\0','\0'),(2253,'Ticeniaeh',255,65535,65535,4294967295,'\0','\0'),(2254,'Ebaoyga',255,65535,65535,4294967295,'\0','\0'),(2255,'Onobchoienu',255,65535,65535,4294967295,'\0','\0'),(2256,'Fuicetepre',255,65535,65535,4294967295,'\0','\0'),(2257,'Dioe',255,65535,65535,4294967295,'\0','\0'),(2258,'Iseboo',255,65535,65535,4294967295,'\0','\0'),(2259,'Etalo',255,65535,65535,4294967295,'\0','\0'),(2260,'Wenelyie',255,65535,65535,4294967295,'\0','\0'),(2261,'Uptiec',255,65535,65535,4294967295,'\0','\0'),(2262,'Omaeum',255,65535,65535,4294967295,'\0','\0'),(2263,'Tozaere',255,65535,65535,4294967295,'\0','\0'),(2264,'Eiav',255,65535,65535,4294967295,'\0','\0'),(2265,'Uynda',255,65535,65535,4294967295,'\0','\0'),(2266,'Enonkiufo',255,65535,65535,4294967295,'\0','\0'),(2267,'Ekcefoxyan',255,65535,65535,4294967295,'\0','\0'),(2268,'Dealhaass',255,65535,65535,4294967295,'\0','\0'),(2269,'Cesourto',255,65535,65535,4294967295,'\0','\0'),(2270,'Aneoonover',255,65535,65535,4294967295,'\0','\0'),(2271,'Orelollo',255,65535,65535,4294967295,'\0','\0'),(2272,'Susesau',255,65535,65535,4294967295,'\0','\0'),(2273,'Oinogeut',255,65535,65535,4294967295,'\0','\0'),(2274,'Raalipio',255,65535,65535,4294967295,'\0','\0'),(2275,'Iwsoraikeon',255,65535,65535,4294967295,'\0','\0'),(2276,'Aibiroe',255,65535,65535,4294967295,'\0','\0'),(2277,'Neneurlorira',255,65535,65535,4294967295,'\0','\0'),(2278,'Amdwesinyad',255,65535,65535,4294967295,'\0','\0'),(2279,'Nireetra',255,65535,65535,4294967295,'\0','\0'),(2280,'Oceroeraga',255,65535,65535,4294967295,'\0','\0'),(2281,'Isecignia',255,65535,65535,4294967295,'\0','\0'),(2282,'Uneicno',255,65535,65535,4294967295,'\0','\0'),(2283,'Topreirmne',255,65535,65535,4294967295,'\0','\0'),(2284,'Intiaye',255,65535,65535,4294967295,'\0','\0'),(2285,'Iznosi',255,65535,65535,4294967295,'\0','\0'),(2286,'Astudodro',255,65535,65535,4294967295,'\0','\0'),(2287,'Issnaickorie',255,65535,65535,4294967295,'\0','\0'),(2288,'Uneshge',255,65535,65535,4294967295,'\0','\0'),(2289,'Erushthanide',255,65535,65535,4294967295,'\0','\0'),(2290,'Drolenypa',255,65535,65535,4294967295,'\0','\0'),(2291,'Elasoanenef',255,65535,65535,4294967295,'\0','\0'),(2292,'Ehyeaira',255,65535,65535,4294967295,'\0','\0'),(2293,'Uemshoeme',255,65535,65535,4294967295,'\0','\0'),(2294,'Coicentyatei',255,65535,65535,4294967295,'\0','\0'),(2295,'Daeti',255,65535,65535,4294967295,'\0','\0'),(2296,'Erasaio',255,65535,65535,4294967295,'\0','\0'),(2297,'Cairteau',255,65535,65535,4294967295,'\0','\0'),(2298,'Ogneabdaest',255,65535,65535,4294967295,'\0','\0'),(2299,'Aysiooperflo',255,65535,65535,4294967295,'\0','\0'),(2300,'Imerfioao',255,65535,65535,4294967295,'\0','\0'),(2301,'Etucar',255,65535,65535,4294967295,'\0','\0'),(2302,'Aorot',255,65535,65535,4294967295,'\0','\0'),(2303,'Efatinib',255,65535,65535,4294967295,'\0','\0'),(2304,'Dimo',255,65535,65535,4294967295,'\0','\0'),(2305,'Ereglakeaol',255,65535,65535,4294967295,'\0','\0'),(2306,'Egliediaal',255,65535,65535,4294967295,'\0','\0'),(2307,'Oorcobi',255,65535,65535,4294967295,'\0','\0'),(2308,'Onglaineri',255,65535,65535,4294967295,'\0','\0'),(2309,'Iubo',255,65535,65535,4294967295,'\0','\0'),(2310,'Ifroi',255,65535,65535,4294967295,'\0','\0'),(2311,'Italaniop',255,65535,65535,4294967295,'\0','\0'),(2312,'Otleagyeci',255,65535,65535,4294967295,'\0','\0'),(2313,'Ayngoiruci',255,65535,65535,4294967295,'\0','\0'),(2314,'Iomho',255,65535,65535,4294967295,'\0','\0'),(2315,'Neitaonir',255,65535,65535,4294967295,'\0','\0'),(2316,'Ongeyikar',255,65535,65535,4294967295,'\0','\0'),(2317,'Intutopsti',255,65535,65535,4294967295,'\0','\0'),(2318,'Epracomew',255,65535,65535,4294967295,'\0','\0'),(2319,'Aivo',255,65535,65535,4294967295,'\0','\0'),(2320,'Tomeyom',255,65535,65535,4294967295,'\0','\0'),(2321,'Irchaonriu',255,65535,65535,4294967295,'\0','\0'),(2322,'Ryolastryer',255,65535,65535,4294967295,'\0','\0'),(2323,'Ieickriiz',255,65535,65535,4294967295,'\0','\0'),(2324,'Eiebiri',255,65535,65535,4294967295,'\0','\0'),(2325,'Eshpountangi',255,65535,65535,4294967295,'\0','\0'),(2326,'Onugleo',255,65535,65535,4294967295,'\0','\0'),(2327,'Oileroag',255,65535,65535,4294967295,'\0','\0'),(2328,'Epeoass',255,65535,65535,4294967295,'\0','\0'),(2329,'Thacesrymi',255,65535,65535,4294967295,'\0','\0'),(2330,'Ivoeoe',255,65535,65535,4294967295,'\0','\0'),(2331,'Noryilalo',255,65535,65535,4294967295,'\0','\0'),(2332,'Deossceye',255,65535,65535,4294967295,'\0','\0'),(2333,'Mecle',255,65535,65535,4294967295,'\0','\0'),(2334,'Ercoeyhexida',255,65535,65535,4294967295,'\0','\0'),(2335,'Leinayi',255,65535,65535,4294967295,'\0','\0'),(2336,'Ishaist',255,65535,65535,4294967295,'\0','\0'),(2337,'Stroe',255,65535,65535,4294967295,'\0','\0'),(2338,'Ayyaynpesaal',255,65535,65535,4294967295,'\0','\0'),(2339,'Yngoxepgapeo',255,65535,65535,4294967295,'\0','\0'),(2340,'Acoyagoststo',255,65535,65535,4294967295,'\0','\0'),(2341,'Mouiemey',255,65535,65535,4294967295,'\0','\0'),(2342,'Restesliao',255,65535,65535,4294967295,'\0','\0'),(2343,'Awandardo',255,65535,65535,4294967295,'\0','\0'),(2344,'Uitasphuup',255,65535,65535,4294967295,'\0','\0'),(2345,'Eertiordri',255,65535,65535,4294967295,'\0','\0'),(2346,'Iplueyuz',255,65535,65535,4294967295,'\0','\0'),(2347,'Steoeyesisam',255,65535,65535,4294967295,'\0','\0'),(2348,'Ulnizoe',255,65535,65535,4294967295,'\0','\0'),(2349,'Ubsoo',255,65535,65535,4294967295,'\0','\0'),(2350,'Siitopari',255,65535,65535,4294967295,'\0','\0'),(2351,'Atisfriplu',255,65535,65535,4294967295,'\0','\0'),(2352,'Efdieig',255,65535,65535,4294967295,'\0','\0'),(2353,'Apreusma',255,65535,65535,4294967295,'\0','\0'),(2354,'Aenfenaode',255,65535,65535,4294967295,'\0','\0'),(2355,'Atilaopoyte',255,65535,65535,4294967295,'\0','\0'),(2356,'Troolkea',255,65535,65535,4294967295,'\0','\0'),(2357,'Weofneontran',255,65535,65535,4294967295,'\0','\0'),(2358,'Tipeerpususe',255,65535,65535,4294967295,'\0','\0'),(2359,'Ieshaon',255,65535,65535,4294967295,'\0','\0'),(2360,'Uchaasy',255,65535,65535,4294967295,'\0','\0'),(2361,'Taeyreeckri',255,65535,65535,4294967295,'\0','\0'),(2362,'Gyieyuokple',255,65535,65535,4294967295,'\0','\0'),(2363,'Citywoaald',255,65535,65535,4294967295,'\0','\0'),(2364,'Wosuve',255,65535,65535,4294967295,'\0','\0'),(2365,'Sete',255,65535,65535,4294967295,'\0','\0'),(2366,'Cheuheanabdu',255,65535,65535,4294967295,'\0','\0'),(2367,'Erkaaf',255,65535,65535,4294967295,'\0','\0'),(2368,'Igamyaelat',255,65535,65535,4294967295,'\0','\0'),(2369,'Ubikireneat',255,65535,65535,4294967295,'\0','\0'),(2370,'Iualdarot',255,65535,65535,4294967295,'\0','\0'),(2371,'Ialsuiceeng',255,65535,65535,4294967295,'\0','\0'),(2372,'Yfstreine',255,65535,65535,4294967295,'\0','\0'),(2373,'Oisovnecha',255,65535,65535,4294967295,'\0','\0'),(2374,'Ightedei',255,65535,65535,4294967295,'\0','\0'),(2375,'Eautoimi',255,65535,65535,4294967295,'\0','\0'),(2376,'Eratnyi',255,65535,65535,4294967295,'\0','\0'),(2377,'Uvloa',255,65535,65535,4294967295,'\0','\0'),(2378,'Engy',255,65535,65535,4294967295,'\0','\0'),(2379,'Caleahith',255,65535,65535,4294967295,'\0','\0'),(2380,'Ossmuenekieq',255,65535,65535,4294967295,'\0','\0'),(2381,'Efaetuluxte',255,65535,65535,4294967295,'\0','\0'),(2382,'Ecieva',255,65535,65535,4294967295,'\0','\0'),(2383,'Noawnete',255,65535,65535,4294967295,'\0','\0'),(2384,'Uhyta',255,65535,65535,4294967295,'\0','\0'),(2385,'Aneifupeep',255,65535,65535,4294967295,'\0','\0'),(2386,'Inase',255,65535,65535,4294967295,'\0','\0'),(2387,'Aeneciyao',255,65535,65535,4294967295,'\0','\0'),(2388,'Temsi',255,65535,65535,4294967295,'\0','\0'),(2389,'Oeusra',255,65535,65535,4294967295,'\0','\0'),(2390,'Omtoyepaaye',255,65535,65535,4294967295,'\0','\0'),(2391,'Ephiefipade',255,65535,65535,4294967295,'\0','\0'),(2392,'Acholdeat',255,65535,65535,4294967295,'\0','\0'),(2393,'Ompe',255,65535,65535,4294967295,'\0','\0'),(2394,'Ocierovplu',255,65535,65535,4294967295,'\0','\0'),(2395,'Uriubboa',255,65535,65535,4294967295,'\0','\0'),(2396,'Afetepeic',255,65535,65535,4294967295,'\0','\0'),(2397,'Oeonco',255,65535,65535,4294967295,'\0','\0'),(2398,'Oriona',255,65535,65535,4294967295,'\0','\0'),(2399,'Enefloarne',255,65535,65535,4294967295,'\0','\0'),(2400,'Iffeiani',255,65535,65535,4294967295,'\0','\0'),(2401,'Olumalfi',255,65535,65535,4294967295,'\0','\0'),(2402,'Eretiyaat',255,65535,65535,4294967295,'\0','\0'),(2403,'Oluilach',255,65535,65535,4294967295,'\0','\0'),(2404,'Oscoomedipla',255,65535,65535,4294967295,'\0','\0'),(2405,'Yataniurepme',255,65535,65535,4294967295,'\0','\0'),(2406,'Aunushilmo',255,65535,65535,4294967295,'\0','\0'),(2407,'Ciyo',255,65535,65535,4294967295,'\0','\0'),(2408,'Erliliro',255,65535,65535,4294967295,'\0','\0'),(2409,'Elteloge',255,65535,65535,4294967295,'\0','\0'),(2410,'Shire',255,65535,65535,4294967295,'\0','\0'),(2411,'Kiama',255,65535,65535,4294967295,'\0','\0'),(2412,'Teme',255,65535,65535,4294967295,'\0','\0'),(2413,'Inulamlie',255,65535,65535,4294967295,'\0','\0'),(2414,'Irdjain',255,65535,65535,4294967295,'\0','\0'),(2415,'Aseye',255,65535,65535,4294967295,'\0','\0'),(2416,'Ererfoabesip',255,65535,65535,4294967295,'\0','\0'),(2417,'Lanebuoephi',255,65535,65535,4294967295,'\0','\0'),(2418,'Puesaeiri',255,65535,65535,4294967295,'\0','\0'),(2419,'Atimaelbere',255,65535,65535,4294967295,'\0','\0'),(2420,'Oleacetei',255,65535,65535,4294967295,'\0','\0'),(2421,'Oalamcyge',255,65535,65535,4294967295,'\0','\0'),(2422,'Fogrozaiper',255,65535,65535,4294967295,'\0','\0'),(2423,'Loeiskekuem',255,65535,65535,4294967295,'\0','\0'),(2424,'Ulyeneof',255,65535,65535,4294967295,'\0','\0'),(2425,'Amaynemalre',255,65535,65535,4294967295,'\0','\0'),(2426,'Eurartbi',255,65535,65535,4294967295,'\0','\0'),(2427,'Sioclalaaren',255,65535,65535,4294967295,'\0','\0'),(2428,'Eotop',255,65535,65535,4294967295,'\0','\0'),(2429,'Inonryco',255,65535,65535,4294967295,'\0','\0'),(2430,'Icruatcireno',255,65535,65535,4294967295,'\0','\0'),(2431,'Yeisnuam',255,65535,65535,4294967295,'\0','\0'),(2432,'Arlialmeun',255,65535,65535,4294967295,'\0','\0'),(2433,'Toigahych',255,65535,65535,4294967295,'\0','\0'),(2434,'Uyaopabse',255,65535,65535,4294967295,'\0','\0'),(2435,'Ubninyepke',255,65535,65535,4294967295,'\0','\0'),(2436,'Oiaeom',255,65535,65535,4294967295,'\0','\0'),(2437,'Ivoblor',255,65535,65535,4294967295,'\0','\0'),(2438,'Acmuassuan',255,65535,65535,4294967295,'\0','\0'),(2439,'Keteoyeni',255,65535,65535,4294967295,'\0','\0'),(2440,'Oimpi',255,65535,65535,4294967295,'\0','\0'),(2441,'Omemiz',255,65535,65535,4294967295,'\0','\0'),(2442,'Oispeo',255,65535,65535,4294967295,'\0','\0'),(2443,'Aecku',255,65535,65535,4294967295,'\0','\0'),(2444,'Earym',255,65535,65535,4294967295,'\0','\0'),(2445,'Ostunocyoni',255,65535,65535,4294967295,'\0','\0'),(2446,'Suat',255,65535,65535,4294967295,'\0','\0'),(2447,'Floite',255,65535,65535,4294967295,'\0','\0'),(2448,'Peseosui',255,65535,65535,4294967295,'\0','\0'),(2449,'Asne',255,65535,65535,4294967295,'\0','\0'),(2450,'Ooaeach',255,65535,65535,4294967295,'\0','\0'),(2451,'Eoipi',255,65535,65535,4294967295,'\0','\0'),(2452,'Erfa',255,65535,65535,4294967295,'\0','\0'),(2453,'Istguvyotata',255,65535,65535,4294967295,'\0','\0'),(2454,'Aschystiow',255,65535,65535,4294967295,'\0','\0'),(2455,'Ruenstaasa',255,65535,65535,4294967295,'\0','\0'),(2456,'Doaymyeat',255,65535,65535,4294967295,'\0','\0'),(2457,'Crygaoenyyd',255,65535,65535,4294967295,'\0','\0'),(2458,'Tiacsma',255,65535,65535,4294967295,'\0','\0'),(2459,'Eireyebisten',255,65535,65535,4294967295,'\0','\0'),(2460,'Gaistaual',255,65535,65535,4294967295,'\0','\0'),(2461,'Embe',255,65535,65535,4294967295,'\0','\0'),(2462,'Reihtne',255,65535,65535,4294967295,'\0','\0'),(2463,'Entnaroaci',255,65535,65535,4294967295,'\0','\0'),(2464,'Etuinre',255,65535,65535,4294967295,'\0','\0'),(2465,'Atablaioch',255,65535,65535,4294967295,'\0','\0'),(2466,'Dadiaworar',255,65535,65535,4294967295,'\0','\0'),(2467,'Gevecuorer',255,65535,65535,4294967295,'\0','\0'),(2468,'Xievatect',255,65535,65535,4294967295,'\0','\0'),(2469,'Ralaeierit',255,65535,65535,4294967295,'\0','\0'),(2470,'Anoit',255,65535,65535,4294967295,'\0','\0'),(2471,'Atyoisi',255,65535,65535,4294967295,'\0','\0'),(2472,'Eoyni',255,65535,65535,4294967295,'\0','\0'),(2473,'Maionglege',255,65535,65535,4294967295,'\0','\0'),(2474,'Aseromepod',255,65535,65535,4294967295,'\0','\0'),(2475,'Fluaheme',255,65535,65535,4294967295,'\0','\0'),(2476,'Mupeaeni',255,65535,65535,4294967295,'\0','\0'),(2477,'Emaare',255,65535,65535,4294967295,'\0','\0'),(2478,'Aiaevin',255,65535,65535,4294967295,'\0','\0'),(2479,'Aleaolyplu',255,65535,65535,4294967295,'\0','\0'),(2480,'Maertsuusie',255,65535,65535,4294967295,'\0','\0'),(2481,'Alladyceaoct',255,65535,65535,4294967295,'\0','\0'),(2482,'Untaerca',255,65535,65535,4294967295,'\0','\0'),(2483,'Mainaryete',255,65535,65535,4294967295,'\0','\0'),(2484,'Atec',255,65535,65535,4294967295,'\0','\0'),(2485,'Chido',255,65535,65535,4294967295,'\0','\0'),(2486,'Ieay',255,65535,65535,4294967295,'\0','\0'),(2487,'Neapesscriop',255,65535,65535,4294967295,'\0','\0'),(2488,'Ripli',255,65535,65535,4294967295,'\0','\0'),(2489,'Enotesili',255,65535,65535,4294967295,'\0','\0'),(2490,'Aeniu',255,65535,65535,4294967295,'\0','\0'),(2491,'Dyowsoliea',255,65535,65535,4294967295,'\0','\0'),(2492,'Aeteneul',255,65535,65535,4294967295,'\0','\0'),(2493,'Etyema',255,65535,65535,4294967295,'\0','\0'),(2494,'Ernismoca',255,65535,65535,4294967295,'\0','\0'),(2495,'Caopone',255,65535,65535,4294967295,'\0','\0'),(2496,'Meacashu',255,65535,65535,4294967295,'\0','\0'),(2497,'Eraecick',255,65535,65535,4294967295,'\0','\0'),(2498,'Ecrira',255,65535,65535,4294967295,'\0','\0'),(2499,'Idogimpli',255,65535,65535,4294967295,'\0','\0'),(2500,'Oower',255,65535,65535,4294967295,'\0','\0'),(2501,'Aissniic',255,65535,65535,4294967295,'\0','\0'),(2502,'Unuinom',255,65535,65535,4294967295,'\0','\0'),(2503,'Phaenmeo',255,65535,65535,4294967295,'\0','\0'),(2504,'Oroikior',255,65535,65535,4294967295,'\0','\0'),(2505,'Neiospelayrd',255,65535,65535,4294967295,'\0','\0'),(2506,'Linasha',255,65535,65535,4294967295,'\0','\0'),(2507,'Iatueur',255,65535,65535,4294967295,'\0','\0'),(2508,'Ycoeug',255,65535,65535,4294967295,'\0','\0'),(2509,'Tyoaortitha',255,65535,65535,4294967295,'\0','\0'),(2510,'Liiablio',255,65535,65535,4294967295,'\0','\0'),(2511,'Anea',255,65535,65535,4294967295,'\0','\0'),(2512,'Yaefaeng',255,65535,65535,4294967295,'\0','\0'),(2513,'Oreelanyi',255,65535,65535,4294967295,'\0','\0'),(2514,'Alat',255,65535,65535,4294967295,'\0','\0'),(2515,'Tidro',255,65535,65535,4294967295,'\0','\0'),(2516,'Tiegere',255,65535,65535,4294967295,'\0','\0'),(2517,'Diomnoeebe',255,65535,65535,4294967295,'\0','\0'),(2518,'Leantis',255,65535,65535,4294967295,'\0','\0'),(2519,'Esompredail',255,65535,65535,4294967295,'\0','\0'),(2520,'Uastetiar',255,65535,65535,4294967295,'\0','\0'),(2521,'Ufindoan',255,65535,65535,4294967295,'\0','\0'),(2522,'Abdeus',255,65535,65535,4294967295,'\0','\0'),(2523,'Rizere',255,65535,65535,4294967295,'\0','\0'),(2524,'Smianiterig',255,65535,65535,4294967295,'\0','\0'),(2525,'Orscroalac',255,65535,65535,4294967295,'\0','\0'),(2526,'Onaisofot',255,65535,65535,4294967295,'\0','\0'),(2527,'Yeneeteemla',255,65535,65535,4294967295,'\0','\0'),(2528,'Ugera',255,65535,65535,4294967295,'\0','\0'),(2529,'Ypeahic',255,65535,65535,4294967295,'\0','\0'),(2530,'Atecode',255,65535,65535,4294967295,'\0','\0'),(2531,'Arneealalo',255,65535,65535,4294967295,'\0','\0'),(2532,'Istvai',255,65535,65535,4294967295,'\0','\0'),(2533,'Naymugaitit',255,65535,65535,4294967295,'\0','\0'),(2534,'Cuailiora',255,65535,65535,4294967295,'\0','\0'),(2535,'Aoupaygi',255,65535,65535,4294967295,'\0','\0'),(2536,'Aypihaacyli',255,65535,65535,4294967295,'\0','\0'),(2537,'Yiant',255,65535,65535,4294967295,'\0','\0'),(2538,'Eronro',255,65535,65535,4294967295,'\0','\0'),(2539,'Ubchuostoith',255,65535,65535,4294967295,'\0','\0'),(2540,'Udericktigro',255,65535,65535,4294967295,'\0','\0'),(2541,'Eriiro',255,65535,65535,4294967295,'\0','\0'),(2542,'Owaepayel',255,65535,65535,4294967295,'\0','\0'),(2543,'Sioc',255,65535,65535,4294967295,'\0','\0'),(2544,'Sesoneehoah',255,65535,65535,4294967295,'\0','\0'),(2545,'Foay',255,65535,65535,4294967295,'\0','\0'),(2546,'Echoissor',255,65535,65535,4294967295,'\0','\0'),(2547,'Acorbi',255,65535,65535,4294967295,'\0','\0'),(2548,'Azium',255,65535,65535,4294967295,'\0','\0'),(2549,'Erageumo',255,65535,65535,4294967295,'\0','\0'),(2550,'Eehodca',255,65535,65535,4294967295,'\0','\0'),(2551,'Ipphyileribi',255,65535,65535,4294967295,'\0','\0'),(2552,'Depaiestheif',255,65535,65535,4294967295,'\0','\0'),(2553,'Aicirpe',255,65535,65535,4294967295,'\0','\0'),(2554,'Ehstigrarai',255,65535,65535,4294967295,'\0','\0'),(2555,'Iamad',255,65535,65535,4294967295,'\0','\0'),(2556,'Eaqtaneanunc',255,65535,65535,4294967295,'\0','\0'),(2557,'Ocorre',255,65535,65535,4294967295,'\0','\0'),(2558,'Bareifeceir',255,65535,65535,4294967295,'\0','\0'),(2559,'Trichoee',255,65535,65535,4294967295,'\0','\0'),(2560,'Selyderiful',255,65535,65535,4294967295,'\0','\0'),(2561,'Entike',255,65535,65535,4294967295,'\0','\0'),(2562,'Iolatmonadu',255,65535,65535,4294967295,'\0','\0'),(2563,'Isugreopil',255,65535,65535,4294967295,'\0','\0'),(2564,'Ceietilpra',255,65535,65535,4294967295,'\0','\0'),(2565,'Ongiha',255,65535,65535,4294967295,'\0','\0'),(2566,'Suodeyafe',255,65535,65535,4294967295,'\0','\0'),(2567,'Ahro',255,65535,65535,4294967295,'\0','\0'),(2568,'Viefco',255,65535,65535,4294967295,'\0','\0'),(2569,'Aygeoel',255,65535,65535,4294967295,'\0','\0'),(2570,'Ipnaonsta',255,65535,65535,4294967295,'\0','\0'),(2571,'Teiloshopco',255,65535,65535,4294967295,'\0','\0'),(2572,'Arialitni',255,65535,65535,4294967295,'\0','\0'),(2573,'Eyecirdspo',255,65535,65535,4294967295,'\0','\0'),(2574,'Roupitirk',255,65535,65535,4294967295,'\0','\0'),(2575,'Eseynt',255,65535,65535,4294967295,'\0','\0'),(2576,'Teakici',255,65535,65535,4294967295,'\0','\0'),(2577,'Ubeyemai',255,65535,65535,4294967295,'\0','\0'),(2578,'Ansfaess',255,65535,65535,4294967295,'\0','\0'),(2579,'Erraoyesomri',255,65535,65535,4294967295,'\0','\0'),(2580,'Latroeonlosi',255,65535,65535,4294967295,'\0','\0'),(2581,'Ourushae',255,65535,65535,4294967295,'\0','\0'),(2582,'Enoe',255,65535,65535,4294967295,'\0','\0'),(2583,'Riti',255,65535,65535,4294967295,'\0','\0'),(2584,'Oanteeae',255,65535,65535,4294967295,'\0','\0'),(2585,'Eimueuno',255,65535,65535,4294967295,'\0','\0'),(2586,'Ninugyu',255,65535,65535,4294967295,'\0','\0'),(2587,'Asiuquro',255,65535,65535,4294967295,'\0','\0'),(2588,'Olicgle',255,65535,65535,4294967295,'\0','\0'),(2589,'Elat',255,65535,65535,4294967295,'\0','\0'),(2590,'Ilud',255,65535,65535,4294967295,'\0','\0'),(2591,'Atlyyehylu',255,65535,65535,4294967295,'\0','\0'),(2592,'Aovacgeow',255,65535,65535,4294967295,'\0','\0'),(2593,'Cageamocisce',255,65535,65535,4294967295,'\0','\0'),(2594,'Tiatriinerm',255,65535,65535,4294967295,'\0','\0'),(2595,'Uaflao',255,65535,65535,4294967295,'\0','\0'),(2596,'Roipitomea',255,65535,65535,4294967295,'\0','\0'),(2597,'Oleehise',255,65535,65535,4294967295,'\0','\0'),(2598,'Ricepothow',255,65535,65535,4294967295,'\0','\0'),(2599,'Cooatraac',255,65535,65535,4294967295,'\0','\0'),(2600,'Leloveiya',255,65535,65535,4294967295,'\0','\0'),(2601,'Skeistri',255,65535,65535,4294967295,'\0','\0'),(2602,'Lakoecohtov',255,65535,65535,4294967295,'\0','\0'),(2603,'Ikeheskawhi',255,65535,65535,4294967295,'\0','\0'),(2604,'Naiei',255,65535,65535,4294967295,'\0','\0'),(2605,'Eayoyier',255,65535,65535,4294967295,'\0','\0'),(2606,'Assaoneat',255,65535,65535,4294967295,'\0','\0'),(2607,'Isecha',255,65535,65535,4294967295,'\0','\0'),(2608,'Espuyele',255,65535,65535,4294967295,'\0','\0'),(2609,'Eroseire',255,65535,65535,4294967295,'\0','\0'),(2610,'Eafiliawor',255,65535,65535,4294967295,'\0','\0'),(2611,'Aikingum',255,65535,65535,4294967295,'\0','\0'),(2612,'Etemine',255,65535,65535,4294967295,'\0','\0'),(2613,'Yaifaapat',255,65535,65535,4294967295,'\0','\0'),(2614,'Okaeu',255,65535,65535,4294967295,'\0','\0'),(2615,'Roesilack',255,65535,65535,4294967295,'\0','\0'),(2616,'Erlies',255,65535,65535,4294967295,'\0','\0'),(2617,'Heanba',255,65535,65535,4294967295,'\0','\0'),(2618,'Ankreimi',255,65535,65535,4294967295,'\0','\0'),(2619,'Escro',255,65535,65535,4294967295,'\0','\0'),(2620,'Lisearoti',255,65535,65535,4294967295,'\0','\0'),(2621,'Ocoeromab',255,65535,65535,4294967295,'\0','\0'),(2622,'Inca',255,65535,65535,4294967295,'\0','\0'),(2623,'Eanablurial',255,65535,65535,4294967295,'\0','\0'),(2624,'Tyac',255,65535,65535,4294967295,'\0','\0'),(2625,'Reysmeretig',255,65535,65535,4294967295,'\0','\0'),(2626,'Vineanemteo',255,65535,65535,4294967295,'\0','\0'),(2627,'Tyeere',255,65535,65535,4294967295,'\0','\0'),(2628,'Deitine',255,65535,65535,4294967295,'\0','\0'),(2629,'Uyaroeite',255,65535,65535,4294967295,'\0','\0'),(2630,'Oraamubsece',255,65535,65535,4294967295,'\0','\0'),(2631,'Lateayerlo',255,65535,65535,4294967295,'\0','\0'),(2632,'Neerbetosa',255,65535,65535,4294967295,'\0','\0'),(2633,'Oyeakienal',255,65535,65535,4294967295,'\0','\0'),(2634,'Preaeroex',255,65535,65535,4294967295,'\0','\0'),(2635,'Reukiatolen',255,65535,65535,4294967295,'\0','\0'),(2636,'Abidhapeate',255,65535,65535,4294967295,'\0','\0'),(2637,'Diuyealatid',255,65535,65535,4294967295,'\0','\0'),(2638,'Otaey',255,65535,65535,4294967295,'\0','\0'),(2639,'Shueatfo',255,65535,65535,4294967295,'\0','\0'),(2640,'Austoses',255,65535,65535,4294967295,'\0','\0'),(2641,'Avsleneser',255,65535,65535,4294967295,'\0','\0'),(2642,'Elema',255,65535,65535,4294967295,'\0','\0'),(2643,'Teyait',255,65535,65535,4294967295,'\0','\0'),(2644,'Ramekye',255,65535,65535,4294967295,'\0','\0'),(2645,'Ayese',255,65535,65535,4294967295,'\0','\0'),(2646,'Ututatro',255,65535,65535,4294967295,'\0','\0'),(2647,'Ongoparuco',255,65535,65535,4294967295,'\0','\0'),(2648,'Enueylou',255,65535,65535,4294967295,'\0','\0'),(2649,'Uisoolah',255,65535,65535,4294967295,'\0','\0'),(2650,'Lymyusm',255,65535,65535,4294967295,'\0','\0'),(2651,'Iatiymam',255,65535,65535,4294967295,'\0','\0'),(2652,'Amelwa',255,65535,65535,4294967295,'\0','\0'),(2653,'Ubliiesa',255,65535,65535,4294967295,'\0','\0'),(2654,'Ecin',255,65535,65535,4294967295,'\0','\0'),(2655,'Ketiaexash',255,65535,65535,4294967295,'\0','\0'),(2656,'Adiftev',255,65535,65535,4294967295,'\0','\0'),(2657,'Icnoha',255,65535,65535,4294967295,'\0','\0'),(2658,'Muecho',255,65535,65535,4294967295,'\0','\0'),(2659,'Eialliapri',255,65535,65535,4294967295,'\0','\0'),(2660,'Teinutne',255,65535,65535,4294967295,'\0','\0'),(2661,'Asatereis',255,65535,65535,4294967295,'\0','\0'),(2662,'Ianriel',255,65535,65535,4294967295,'\0','\0'),(2663,'Atstaon',255,65535,65535,4294967295,'\0','\0'),(2664,'Enef',255,65535,65535,4294967295,'\0','\0'),(2665,'Steat',255,65535,65535,4294967295,'\0','\0'),(2666,'Aeeprosore',255,65535,65535,4294967295,'\0','\0'),(2667,'Ineyiso',255,65535,65535,4294967295,'\0','\0'),(2668,'Eubsostoibra',255,65535,65535,4294967295,'\0','\0'),(2669,'Orintenti',255,65535,65535,4294967295,'\0','\0'),(2670,'Suyeso',255,65535,65535,4294967295,'\0','\0'),(2671,'Roagueryst',255,65535,65535,4294967295,'\0','\0'),(2672,'Deoshini',255,65535,65535,4294967295,'\0','\0'),(2673,'Ermoicay',255,65535,65535,4294967295,'\0','\0'),(2674,'Eacdoeen',255,65535,65535,4294967295,'\0','\0'),(2675,'Esteopare',255,65535,65535,4294967295,'\0','\0'),(2676,'Ikiepao',255,65535,65535,4294967295,'\0','\0'),(2677,'Eafi',255,65535,65535,4294967295,'\0','\0'),(2678,'Neoneromu',255,65535,65535,4294967295,'\0','\0'),(2679,'Testraiil',255,65535,65535,4294967295,'\0','\0'),(2680,'Amobialrya',255,65535,65535,4294967295,'\0','\0'),(2681,'Uareyome',255,65535,65535,4294967295,'\0','\0'),(2682,'Eimpaywera',255,65535,65535,4294967295,'\0','\0'),(2683,'Quaonse',255,65535,65535,4294967295,'\0','\0'),(2684,'Eatoiryin',255,65535,65535,4294967295,'\0','\0'),(2685,'Oreghutae',255,65535,65535,4294967295,'\0','\0'),(2686,'Anonim',255,65535,65535,4294967295,'\0','\0'),(2687,'Acoaa',255,65535,65535,4294967295,'\0','\0'),(2688,'Esto',255,65535,65535,4294967295,'\0','\0'),(2689,'Acootecelf',255,65535,65535,4294967295,'\0','\0'),(2690,'Nayoeisseyna',255,65535,65535,4294967295,'\0','\0'),(2691,'Edal',255,65535,65535,4294967295,'\0','\0'),(2692,'Guebaer',255,65535,65535,4294967295,'\0','\0'),(2693,'Rearosan',255,65535,65535,4294967295,'\0','\0'),(2694,'Itbeo',255,65535,65535,4294967295,'\0','\0'),(2695,'Veieopla',255,65535,65535,4294967295,'\0','\0'),(2696,'Uspa',255,65535,65535,4294967295,'\0','\0'),(2697,'Ienerosie',255,65535,65535,4294967295,'\0','\0'),(2698,'Nehyidyiciew',255,65535,65535,4294967295,'\0','\0'),(2699,'Otdi',255,65535,65535,4294967295,'\0','\0'),(2700,'Ackagre',255,65535,65535,4294967295,'\0','\0'),(2701,'Acivavryoay',255,65535,65535,4294967295,'\0','\0'),(2702,'Inizayivri',255,65535,65535,4294967295,'\0','\0'),(2703,'Ellaihalti',255,65535,65535,4294967295,'\0','\0'),(2704,'Eliogy',255,65535,65535,4294967295,'\0','\0'),(2705,'Vaonestinafo',255,65535,65535,4294967295,'\0','\0'),(2706,'Uraspiage',255,65535,65535,4294967295,'\0','\0'),(2707,'Tocarareo',255,65535,65535,4294967295,'\0','\0'),(2708,'Seutlyum',255,65535,65535,4294967295,'\0','\0'),(2709,'Intiize',255,65535,65535,4294967295,'\0','\0'),(2710,'Niase',255,65535,65535,4294967295,'\0','\0'),(2711,'Oseofed',255,65535,65535,4294967295,'\0','\0'),(2712,'Raye',255,65535,65535,4294967295,'\0','\0'),(2713,'Omirasetito',255,65535,65535,4294967295,'\0','\0'),(2714,'Ateolada',255,65535,65535,4294967295,'\0','\0'),(2715,'Oriwaulangat',255,65535,65535,4294967295,'\0','\0'),(2716,'Floipce',255,65535,65535,4294967295,'\0','\0'),(2717,'Asleali',255,65535,65535,4294967295,'\0','\0'),(2718,'Aafbapa',255,65535,65535,4294967295,'\0','\0'),(2719,'Uaoeneel',255,65535,65535,4294967295,'\0','\0'),(2720,'Mocaul',255,65535,65535,4294967295,'\0','\0'),(2721,'Uenaneiat',255,65535,65535,4294967295,'\0','\0'),(2722,'Clefumewi',255,65535,65535,4294967295,'\0','\0'),(2723,'Ouret',255,65535,65535,4294967295,'\0','\0'),(2724,'Iicoirt',255,65535,65535,4294967295,'\0','\0'),(2725,'Idtepacoy',255,65535,65535,4294967295,'\0','\0'),(2726,'Snene',255,65535,65535,4294967295,'\0','\0'),(2727,'Keiareigut',255,65535,65535,4294967295,'\0','\0'),(2728,'Ananenaror',255,65535,65535,4294967295,'\0','\0'),(2729,'Itcinieiggi',255,65535,65535,4294967295,'\0','\0'),(2730,'Easteg',255,65535,65535,4294967295,'\0','\0'),(2731,'Eymraogira',255,65535,65535,4294967295,'\0','\0'),(2732,'Uchribarara',255,65535,65535,4294967295,'\0','\0'),(2733,'Sieichene',255,65535,65535,4294967295,'\0','\0'),(2734,'Asmies',255,65535,65535,4294967295,'\0','\0'),(2735,'Naasesyaor',255,65535,65535,4294967295,'\0','\0'),(2736,'Ifutema',255,65535,65535,4294967295,'\0','\0'),(2737,'Guium',255,65535,65535,4294967295,'\0','\0'),(2738,'Omtiaeduand',255,65535,65535,4294967295,'\0','\0'),(2739,'Ateyea',255,65535,65535,4294967295,'\0','\0'),(2740,'Uacaul',255,65535,65535,4294967295,'\0','\0'),(2741,'Ejostbei',255,65535,65535,4294967295,'\0','\0'),(2742,'Atriroinre',255,65535,65535,4294967295,'\0','\0'),(2743,'Vedaur',255,65535,65535,4294967295,'\0','\0'),(2744,'Agleoceiy',255,65535,65535,4294967295,'\0','\0'),(2745,'Enoi',255,65535,65535,4294967295,'\0','\0'),(2746,'Essitesuca',255,65535,65535,4294967295,'\0','\0'),(2747,'Ooyiaed',255,65535,65535,4294967295,'\0','\0'),(2748,'Obira',255,65535,65535,4294967295,'\0','\0'),(2749,'Arue',255,65535,65535,4294967295,'\0','\0'),(2750,'Oryprenie',255,65535,65535,4294967295,'\0','\0'),(2751,'Leodmyeyeang',255,65535,65535,4294967295,'\0','\0'),(2752,'Diaar',255,65535,65535,4294967295,'\0','\0'),(2753,'Ohnoia',255,65535,65535,4294967295,'\0','\0'),(2754,'Gusechani',255,65535,65535,4294967295,'\0','\0'),(2755,'Erac',255,65535,65535,4294967295,'\0','\0'),(2756,'Tirelaphi',255,65535,65535,4294967295,'\0','\0'),(2757,'Teer',255,65535,65535,4294967295,'\0','\0'),(2758,'Omseorhien',255,65535,65535,4294967295,'\0','\0'),(2759,'Oovstuhaema',255,65535,65535,4294967295,'\0','\0'),(2760,'Fulinioama',255,65535,65535,4294967295,'\0','\0'),(2761,'Toneat',255,65535,65535,4294967295,'\0','\0'),(2762,'Cauecnaey',255,65535,65535,4294967295,'\0','\0'),(2763,'Attriynareni',255,65535,65535,4294967295,'\0','\0'),(2764,'Eowadis',255,65535,65535,4294967295,'\0','\0'),(2765,'Inutfeaem',255,65535,65535,4294967295,'\0','\0'),(2766,'Rieleati',255,65535,65535,4294967295,'\0','\0'),(2767,'Empaen',255,65535,65535,4294967295,'\0','\0'),(2768,'Yreyget',255,65535,65535,4294967295,'\0','\0'),(2769,'Voian',255,65535,65535,4294967295,'\0','\0'),(2770,'Ytio',255,65535,65535,4294967295,'\0','\0'),(2771,'Ucioanfe',255,65535,65535,4294967295,'\0','\0'),(2772,'Ernelyopleso',255,65535,65535,4294967295,'\0','\0'),(2773,'Ecyperuil',255,65535,65535,4294967295,'\0','\0'),(2774,'Rexoycebovo',255,65535,65535,4294967295,'\0','\0'),(2775,'Sesphyha',255,65535,65535,4294967295,'\0','\0'),(2776,'Licalo',255,65535,65535,4294967295,'\0','\0'),(2777,'Teseoysopait',255,65535,65535,4294967295,'\0','\0'),(2778,'Engeyoelee',255,65535,65535,4294967295,'\0','\0'),(2779,'Deieyer',255,65535,65535,4294967295,'\0','\0'),(2780,'Suitpla',255,65535,65535,4294967295,'\0','\0'),(2781,'Agesqieary',255,65535,65535,4294967295,'\0','\0'),(2782,'Disylofaerli',255,65535,65535,4294967295,'\0','\0'),(2783,'Onzenuescri',255,65535,65535,4294967295,'\0','\0'),(2784,'Choibgatape',255,65535,65535,4294967295,'\0','\0'),(2785,'Creleatmege',255,65535,65535,4294967295,'\0','\0'),(2786,'Ileifu',255,65535,65535,4294967295,'\0','\0'),(2787,'Tariamlo',255,65535,65535,4294967295,'\0','\0'),(2788,'Ichuespidi',255,65535,65535,4294967295,'\0','\0'),(2789,'Eoyonimceeng',255,65535,65535,4294967295,'\0','\0'),(2790,'Amalauser',255,65535,65535,4294967295,'\0','\0'),(2791,'Aarezaedchi',255,65535,65535,4294967295,'\0','\0'),(2792,'Phiethmsu',255,65535,65535,4294967295,'\0','\0'),(2793,'Kibi',255,65535,65535,4294967295,'\0','\0'),(2794,'Iitassopge',255,65535,65535,4294967295,'\0','\0'),(2795,'Nibuyswa',255,65535,65535,4294967295,'\0','\0'),(2796,'Eruenasonit',255,65535,65535,4294967295,'\0','\0'),(2797,'Ekealash',255,65535,65535,4294967295,'\0','\0'),(2798,'Yocebainzove',255,65535,65535,4294967295,'\0','\0'),(2799,'Orereik',255,65535,65535,4294967295,'\0','\0'),(2800,'Picepemutiha',255,65535,65535,4294967295,'\0','\0'),(2801,'Ulonoaie',255,65535,65535,4294967295,'\0','\0'),(2802,'Erag',255,65535,65535,4294967295,'\0','\0'),(2803,'Elgoquise',255,65535,65535,4294967295,'\0','\0'),(2804,'Muexkeain',255,65535,65535,4294967295,'\0','\0'),(2805,'Zoegrorzetro',255,65535,65535,4294967295,'\0','\0'),(2806,'Ernayaan',255,65535,65535,4294967295,'\0','\0'),(2807,'Uchilre',255,65535,65535,4294967295,'\0','\0'),(2808,'Thiluema',255,65535,65535,4294967295,'\0','\0'),(2809,'Etenabei',255,65535,65535,4294967295,'\0','\0'),(2810,'Acto',255,65535,65535,4294967295,'\0','\0'),(2811,'Ciponeutri',255,65535,65535,4294967295,'\0','\0'),(2812,'Avdaolyleop',255,65535,65535,4294967295,'\0','\0'),(2813,'Coloneesnui',255,65535,65535,4294967295,'\0','\0'),(2814,'Isawneo',255,65535,65535,4294967295,'\0','\0'),(2815,'Nyeral',255,65535,65535,4294967295,'\0','\0'),(2816,'Armiomleneca',255,65535,65535,4294967295,'\0','\0'),(2817,'Dopuipy',255,65535,65535,4294967295,'\0','\0'),(2818,'Dulawiivey',255,65535,65535,4294967295,'\0','\0'),(2819,'Estisaerik',255,65535,65535,4294967295,'\0','\0'),(2820,'Alitafe',255,65535,65535,4294967295,'\0','\0'),(2821,'Ryakeabecgri',255,65535,65535,4294967295,'\0','\0'),(2822,'Graiqutophoi',255,65535,65535,4294967295,'\0','\0'),(2823,'Utentifo',255,65535,65535,4294967295,'\0','\0'),(2824,'Goomoradro',255,65535,65535,4294967295,'\0','\0'),(2825,'Echili',255,65535,65535,4294967295,'\0','\0'),(2826,'Aneshliessa',255,65535,65535,4294967295,'\0','\0'),(2827,'Efiungkieug',255,65535,65535,4294967295,'\0','\0'),(2828,'Weapdoef',255,65535,65535,4294967295,'\0','\0'),(2829,'Aveal',255,65535,65535,4294967295,'\0','\0'),(2830,'Ciheacesyo',255,65535,65535,4294967295,'\0','\0'),(2831,'Phitrail',255,65535,65535,4294967295,'\0','\0'),(2832,'Oeisoule',255,65535,65535,4294967295,'\0','\0'),(2833,'Rieruntpreov',255,65535,65535,4294967295,'\0','\0'),(2834,'Iposiadaon',255,65535,65535,4294967295,'\0','\0'),(2835,'Scairepi',255,65535,65535,4294967295,'\0','\0'),(2836,'Einseateath',255,65535,65535,4294967295,'\0','\0'),(2837,'Eipmeoroes',255,65535,65535,4294967295,'\0','\0'),(2838,'Tiengbrie',255,65535,65535,4294967295,'\0','\0'),(2839,'Boaadnewi',255,65535,65535,4294967295,'\0','\0'),(2840,'Naraetebothi',255,65535,65535,4294967295,'\0','\0'),(2841,'Ipeourcoti',255,65535,65535,4294967295,'\0','\0'),(2842,'Ersieraeflu',255,65535,65535,4294967295,'\0','\0'),(2843,'Otlamio',255,65535,65535,4294967295,'\0','\0'),(2844,'Eatsianstre',255,65535,65535,4294967295,'\0','\0'),(2845,'Gyebiael',255,65535,65535,4294967295,'\0','\0'),(2846,'Ieeae',255,65535,65535,4294967295,'\0','\0'),(2847,'Oilelestao',255,65535,65535,4294967295,'\0','\0'),(2848,'Iniegail',255,65535,65535,4294967295,'\0','\0'),(2849,'Viaicarta',255,65535,65535,4294967295,'\0','\0'),(2850,'Putuacay',255,65535,65535,4294967295,'\0','\0'),(2851,'Ayphaomisni',255,65535,65535,4294967295,'\0','\0'),(2852,'Uticot',255,65535,65535,4294967295,'\0','\0'),(2853,'Eafepo',255,65535,65535,4294967295,'\0','\0'),(2854,'Usistins',255,65535,65535,4294967295,'\0','\0'),(2855,'Beemgealue',255,65535,65535,4294967295,'\0','\0'),(2856,'Isscreoru',255,65535,65535,4294967295,'\0','\0'),(2857,'Ierearior',255,65535,65535,4294967295,'\0','\0'),(2858,'Saia',255,65535,65535,4294967295,'\0','\0'),(2859,'Sescoye',255,65535,65535,4294967295,'\0','\0'),(2860,'Ravyal',255,65535,65535,4294967295,'\0','\0'),(2861,'Nojaseeassub',255,65535,65535,4294967295,'\0','\0'),(2862,'Aveteurep',255,65535,65535,4294967295,'\0','\0'),(2863,'Idakyidreyo',255,65535,65535,4294967295,'\0','\0'),(2864,'Ingeio',255,65535,65535,4294967295,'\0','\0'),(2865,'Urnhiwistro',255,65535,65535,4294967295,'\0','\0'),(2866,'Ayusamepid',255,65535,65535,4294967295,'\0','\0'),(2867,'Blaogesniro',255,65535,65535,4294967295,'\0','\0'),(2868,'Oeritetno',255,65535,65535,4294967295,'\0','\0'),(2869,'Ebnitrio',255,65535,65535,4294967295,'\0','\0'),(2870,'Ferereoloan',255,65535,65535,4294967295,'\0','\0'),(2871,'Espescahii',255,65535,65535,4294967295,'\0','\0'),(2872,'Antti',255,65535,65535,4294967295,'\0','\0'),(2873,'Liess',255,65535,65535,4294967295,'\0','\0'),(2874,'Achead',255,65535,65535,4294967295,'\0','\0'),(2875,'Ipax',255,65535,65535,4294967295,'\0','\0'),(2876,'Eosasm',255,65535,65535,4294967295,'\0','\0'),(2877,'Ingetifatyi',255,65535,65535,4294967295,'\0','\0'),(2878,'Uvofyoubed',255,65535,65535,4294967295,'\0','\0'),(2879,'Ildugleif',255,65535,65535,4294967295,'\0','\0'),(2880,'Noloniecose',255,65535,65535,4294967295,'\0','\0'),(2881,'Olon',255,65535,65535,4294967295,'\0','\0'),(2882,'Neealioah',255,65535,65535,4294967295,'\0','\0'),(2883,'Itralulo',255,65535,65535,4294967295,'\0','\0'),(2884,'Loliizri',255,65535,65535,4294967295,'\0','\0'),(2885,'Onechanopge',255,65535,65535,4294967295,'\0','\0'),(2886,'Upre',255,65535,65535,4294967295,'\0','\0'),(2887,'Utaenryabe',255,65535,65535,4294967295,'\0','\0'),(2888,'Lueaete',255,65535,65535,4294967295,'\0','\0'),(2889,'Eapyri',255,65535,65535,4294967295,'\0','\0'),(2890,'Evschoto',255,65535,65535,4294967295,'\0','\0'),(2891,'Ifeinti',255,65535,65535,4294967295,'\0','\0'),(2892,'Hoitehao',255,65535,65535,4294967295,'\0','\0'),(2893,'Abeorirkciel',255,65535,65535,4294967295,'\0','\0'),(2894,'Rolfo',255,65535,65535,4294967295,'\0','\0'),(2895,'Emaonan',255,65535,65535,4294967295,'\0','\0'),(2896,'Orayaa',255,65535,65535,4294967295,'\0','\0'),(2897,'Puve',255,65535,65535,4294967295,'\0','\0'),(2898,'Omenipmite',255,65535,65535,4294967295,'\0','\0'),(2899,'Oleatacingew',255,65535,65535,4294967295,'\0','\0'),(2900,'Arfoayeere',255,65535,65535,4294967295,'\0','\0'),(2901,'Orowerme',255,65535,65535,4294967295,'\0','\0'),(2902,'Leronayrzeon',255,65535,65535,4294967295,'\0','\0'),(2903,'Ilyarongay',255,65535,65535,4294967295,'\0','\0'),(2904,'Raecac',255,65535,65535,4294967295,'\0','\0'),(2905,'Iugeedo',255,65535,65535,4294967295,'\0','\0'),(2906,'Onedale',255,65535,65535,4294967295,'\0','\0'),(2907,'Earorneyi',255,65535,65535,4294967295,'\0','\0'),(2908,'Ithyumun',255,65535,65535,4294967295,'\0','\0'),(2909,'Owyeaerce',255,65535,65535,4294967295,'\0','\0'),(2910,'Yeeboziabyi',255,65535,65535,4294967295,'\0','\0'),(2911,'Ofce',255,65535,65535,4294967295,'\0','\0'),(2912,'Eniatmait',255,65535,65535,4294967295,'\0','\0'),(2913,'Ogeaotehe',255,65535,65535,4294967295,'\0','\0'),(2914,'Eroigeply',255,65535,65535,4294967295,'\0','\0'),(2915,'Icelae',255,65535,65535,4294967295,'\0','\0'),(2916,'Acuote',255,65535,65535,4294967295,'\0','\0'),(2917,'Lyogoicy',255,65535,65535,4294967295,'\0','\0'),(2918,'Moim',255,65535,65535,4294967295,'\0','\0'),(2919,'Ikeepro',255,65535,65535,4294967295,'\0','\0'),(2920,'Eotnaceto',255,65535,65535,4294967295,'\0','\0'),(2921,'Eleoa',255,65535,65535,4294967295,'\0','\0'),(2922,'Inobkosau',255,65535,65535,4294967295,'\0','\0'),(2923,'Ibaewogont',255,65535,65535,4294967295,'\0','\0'),(2924,'Paproedobke',255,65535,65535,4294967295,'\0','\0'),(2925,'Omcokees',255,65535,65535,4294967295,'\0','\0'),(2926,'Yaobuny',255,65535,65535,4294967295,'\0','\0'),(2927,'Ioeybu',255,65535,65535,4294967295,'\0','\0'),(2928,'Atool',255,65535,65535,4294967295,'\0','\0'),(2929,'Revateiti',255,65535,65535,4294967295,'\0','\0'),(2930,'Ayiadil',255,65535,65535,4294967295,'\0','\0'),(2931,'Aticneayiiz',255,65535,65535,4294967295,'\0','\0'),(2932,'Osoi',255,65535,65535,4294967295,'\0','\0'),(2933,'Togmein',255,65535,65535,4294967295,'\0','\0'),(2934,'Dieli',255,65535,65535,4294967295,'\0','\0'),(2935,'Eyovag',255,65535,65535,4294967295,'\0','\0'),(2936,'Esoicabro',255,65535,65535,4294967295,'\0','\0'),(2937,'Icroinarbye',255,65535,65535,4294967295,'\0','\0'),(2938,'Pochiiex',255,65535,65535,4294967295,'\0','\0'),(2939,'Teone',255,65535,65535,4294967295,'\0','\0'),(2940,'Zesciacveami',255,65535,65535,4294967295,'\0','\0'),(2941,'Ialodo',255,65535,65535,4294967295,'\0','\0'),(2942,'Avecnena',255,65535,65535,4294967295,'\0','\0'),(2943,'Proyotaa',255,65535,65535,4294967295,'\0','\0'),(2944,'Apeiz',255,65535,65535,4294967295,'\0','\0'),(2945,'Estuiojo',255,65535,65535,4294967295,'\0','\0'),(2946,'Roayuciachli',255,65535,65535,4294967295,'\0','\0'),(2947,'Ubov',255,65535,65535,4294967295,'\0','\0'),(2948,'Odayo',255,65535,65535,4294967295,'\0','\0'),(2949,'Owgoarbclo',255,65535,65535,4294967295,'\0','\0'),(2950,'Reieyost',255,65535,65535,4294967295,'\0','\0'),(2951,'Streaibudi',255,65535,65535,4294967295,'\0','\0'),(2952,'Esnotaire',255,65535,65535,4294967295,'\0','\0'),(2953,'Iltecktogomu',255,65535,65535,4294967295,'\0','\0'),(2954,'Iedomguat',255,65535,65535,4294967295,'\0','\0'),(2955,'Oxskisintqu',255,65535,65535,4294967295,'\0','\0'),(2956,'Inealereot',255,65535,65535,4294967295,'\0','\0'),(2957,'Icinaderam',255,65535,65535,4294967295,'\0','\0'),(2958,'Ehualire',255,65535,65535,4294967295,'\0','\0'),(2959,'Mapriiospi',255,65535,65535,4294967295,'\0','\0'),(2960,'Enui',255,65535,65535,4294967295,'\0','\0'),(2961,'Undik',255,65535,65535,4294967295,'\0','\0'),(2962,'Ateniweli',255,65535,65535,4294967295,'\0','\0'),(2963,'Allepipat',255,65535,65535,4294967295,'\0','\0'),(2964,'Iditlesiep',255,65535,65535,4294967295,'\0','\0'),(2965,'Maoleneudi',255,65535,65535,4294967295,'\0','\0'),(2966,'Usioren',255,65535,65535,4294967295,'\0','\0'),(2967,'Ciulo',255,65535,65535,4294967295,'\0','\0'),(2968,'Ovowra',255,65535,65535,4294967295,'\0','\0'),(2969,'Neentlaeina',255,65535,65535,4294967295,'\0','\0'),(2970,'Yrelti',255,65535,65535,4294967295,'\0','\0'),(2971,'Anxyum',255,65535,65535,4294967295,'\0','\0'),(2972,'Soacari',255,65535,65535,4294967295,'\0','\0'),(2973,'Ooei',255,65535,65535,4294967295,'\0','\0'),(2974,'Ayfioca',255,65535,65535,4294967295,'\0','\0'),(2975,'Adoavei',255,65535,65535,4294967295,'\0','\0'),(2976,'Eadcheylo',255,65535,65535,4294967295,'\0','\0'),(2977,'Toalymetno',255,65535,65535,4294967295,'\0','\0'),(2978,'Ohfreonruche',255,65535,65535,4294967295,'\0','\0'),(2979,'Ongonte',255,65535,65535,4294967295,'\0','\0'),(2980,'Liismasotune',255,65535,65535,4294967295,'\0','\0'),(2981,'Foaat',255,65535,65535,4294967295,'\0','\0'),(2982,'Enoatery',255,65535,65535,4294967295,'\0','\0'),(2983,'Naeoe',255,65535,65535,4294967295,'\0','\0'),(2984,'Esiethloha',255,65535,65535,4294967295,'\0','\0'),(2985,'Efosuiawo',255,65535,65535,4294967295,'\0','\0'),(2986,'Paogeuteu',255,65535,65535,4294967295,'\0','\0'),(2987,'Ryinsieui',255,65535,65535,4294967295,'\0','\0'),(2988,'Thucliustze',255,65535,65535,4294967295,'\0','\0'),(2989,'Maoyabal',255,65535,65535,4294967295,'\0','\0'),(2990,'Ricesa',255,65535,65535,4294967295,'\0','\0'),(2991,'Ungye',255,65535,65535,4294967295,'\0','\0'),(2992,'Onasicbayni',255,65535,65535,4294967295,'\0','\0'),(2993,'Ieoidep',255,65535,65535,4294967295,'\0','\0'),(2994,'Eaohap',255,65535,65535,4294967295,'\0','\0'),(2995,'Nenocori',255,65535,65535,4294967295,'\0','\0'),(2996,'Iulyoiot',255,65535,65535,4294967295,'\0','\0'),(2997,'Naeyhoedos',255,65535,65535,4294967295,'\0','\0'),(2998,'Itado',255,65535,65535,4294967295,'\0','\0'),(2999,'Icrieicori',255,65535,65535,4294967295,'\0','\0'),(3000,'Asri',255,65535,65535,4294967295,'\0','\0'),(3001,'Staifceoni',255,65535,65535,4294967295,'\0','\0'),(3002,'Itnoero',255,65535,65535,4294967295,'\0','\0'),(3003,'Noaom',255,65535,65535,4294967295,'\0','\0'),(3004,'Istialtoaho',255,65535,65535,4294967295,'\0','\0'),(3005,'Esetraeru',255,65535,65535,4294967295,'\0','\0'),(3006,'Sialieic',255,65535,65535,4294967295,'\0','\0'),(3007,'Idoroisu',255,65535,65535,4294967295,'\0','\0'),(3008,'Diedudko',255,65535,65535,4294967295,'\0','\0'),(3009,'Nocias',255,65535,65535,4294967295,'\0','\0'),(3010,'Dodesho',255,65535,65535,4294967295,'\0','\0'),(3011,'Yoolegero',255,65535,65535,4294967295,'\0','\0'),(3012,'Shehefleohpa',255,65535,65535,4294967295,'\0','\0'),(3013,'Biogy',255,65535,65535,4294967295,'\0','\0'),(3014,'Diwiangurab',255,65535,65535,4294967295,'\0','\0'),(3015,'Iumoirmi',255,65535,65535,4294967295,'\0','\0'),(3016,'Erolayip',255,65535,65535,4294967295,'\0','\0'),(3017,'Ounoneal',255,65535,65535,4294967295,'\0','\0'),(3018,'Umopocream',255,65535,65535,4294967295,'\0','\0'),(3019,'Oyoatonbebre',255,65535,65535,4294967295,'\0','\0'),(3020,'Erneop',255,65535,65535,4294967295,'\0','\0'),(3021,'Ahaveni',255,65535,65535,4294967295,'\0','\0'),(3022,'Neurnamareba',255,65535,65535,4294967295,'\0','\0'),(3023,'Izuoriss',255,65535,65535,4294967295,'\0','\0'),(3024,'Muitinutip',255,65535,65535,4294967295,'\0','\0'),(3025,'Alainener',255,65535,65535,4294967295,'\0','\0'),(3026,'Olohesea',255,65535,65535,4294967295,'\0','\0'),(3027,'Ityoetichila',255,65535,65535,4294967295,'\0','\0'),(3028,'Arftoleidi',255,65535,65535,4294967295,'\0','\0'),(3029,'Foeniecha',255,65535,65535,4294967295,'\0','\0'),(3030,'Uawitiopi',255,65535,65535,4294967295,'\0','\0'),(3031,'Gauma',255,65535,65535,4294967295,'\0','\0'),(3032,'Orterapheo',255,65535,65535,4294967295,'\0','\0'),(3033,'Odapoesab',255,65535,65535,4294967295,'\0','\0'),(3034,'Onaeslipu',255,65535,65535,4294967295,'\0','\0'),(3035,'Biusat',255,65535,65535,4294967295,'\0','\0'),(3036,'Uococal',255,65535,65535,4294967295,'\0','\0'),(3037,'Eduilegoveg',255,65535,65535,4294967295,'\0','\0'),(3038,'Aong',255,65535,65535,4294967295,'\0','\0'),(3039,'Omeni',255,65535,65535,4294967295,'\0','\0'),(3040,'Letribe',255,65535,65535,4294967295,'\0','\0'),(3041,'Oarserle',255,65535,65535,4294967295,'\0','\0'),(3042,'Eglaogheroar',255,65535,65535,4294967295,'\0','\0'),(3043,'Iogu',255,65535,65535,4294967295,'\0','\0'),(3044,'Atutriil',255,65535,65535,4294967295,'\0','\0'),(3045,'Eteohechie',255,65535,65535,4294967295,'\0','\0'),(3046,'Ciatsuagoryp',255,65535,65535,4294967295,'\0','\0'),(3047,'Aligho',255,65535,65535,4294967295,'\0','\0'),(3048,'Geoymeldu',255,65535,65535,4294967295,'\0','\0'),(3049,'Aiedyupsa',255,65535,65535,4294967295,'\0','\0'),(3050,'Insidisnuye',255,65535,65535,4294967295,'\0','\0'),(3051,'Peod',255,65535,65535,4294967295,'\0','\0'),(3052,'Shaichdiust',255,65535,65535,4294967295,'\0','\0'),(3053,'Ainka',255,65535,65535,4294967295,'\0','\0'),(3054,'Olacab',255,65535,65535,4294967295,'\0','\0'),(3055,'Iabak',255,65535,65535,4294967295,'\0','\0'),(3056,'Neah',255,65535,65535,4294967295,'\0','\0'),(3057,'Alamyicont',255,65535,65535,4294967295,'\0','\0'),(3058,'Wovoilgeic',255,65535,65535,4294967295,'\0','\0'),(3059,'Iaeayro',255,65535,65535,4294967295,'\0','\0'),(3060,'Gemeruer',255,65535,65535,4294967295,'\0','\0'),(3061,'Reya',255,65535,65535,4294967295,'\0','\0'),(3062,'Ioneti',255,65535,65535,4294967295,'\0','\0'),(3063,'Wetabatyrkid',255,65535,65535,4294967295,'\0','\0'),(3064,'Estoiesroad',255,65535,65535,4294967295,'\0','\0'),(3065,'Yenesale',255,65535,65535,4294967295,'\0','\0'),(3066,'Abinile',255,65535,65535,4294967295,'\0','\0'),(3067,'Uoane',255,65535,65535,4294967295,'\0','\0'),(3068,'Olfriisyig',255,65535,65535,4294967295,'\0','\0'),(3069,'Siosimi',255,65535,65535,4294967295,'\0','\0'),(3070,'Ocay',255,65535,65535,4294967295,'\0','\0'),(3071,'Atorerethol',255,65535,65535,4294967295,'\0','\0'),(3072,'Tareo',255,65535,65535,4294967295,'\0','\0'),(3073,'Buwe',255,65535,65535,4294967295,'\0','\0'),(3074,'Mueoesore',255,65535,65535,4294967295,'\0','\0'),(3075,'Nuikup',255,65535,65535,4294967295,'\0','\0'),(3076,'Atido',255,65535,65535,4294967295,'\0','\0'),(3077,'Aultiteya',255,65535,65535,4294967295,'\0','\0'),(3078,'Estroineckef',255,65535,65535,4294967295,'\0','\0'),(3079,'Momeoacze',255,65535,65535,4294967295,'\0','\0'),(3080,'Oaind',255,65535,65535,4294967295,'\0','\0'),(3081,'Atabic',255,65535,65535,4294967295,'\0','\0'),(3082,'Ockenuesmspy',255,65535,65535,4294967295,'\0','\0'),(3083,'Igom',255,65535,65535,4294967295,'\0','\0'),(3084,'Ilisseanucy',255,65535,65535,4294967295,'\0','\0'),(3085,'Ceehoymiuab',255,65535,65535,4294967295,'\0','\0'),(3086,'Espliticruoy',255,65535,65535,4294967295,'\0','\0'),(3087,'Alta',255,65535,65535,4294967295,'\0','\0'),(3088,'Joinuu',255,65535,65535,4294967295,'\0','\0'),(3089,'Graioagowpa',255,65535,65535,4294967295,'\0','\0'),(3090,'Aapa',255,65535,65535,4294967295,'\0','\0'),(3091,'Infragoretu',255,65535,65535,4294967295,'\0','\0'),(3092,'Tioayuntis',255,65535,65535,4294967295,'\0','\0'),(3093,'Akacaveat',255,65535,65535,4294967295,'\0','\0'),(3094,'Egliarasi',255,65535,65535,4294967295,'\0','\0'),(3095,'Osoabe',255,65535,65535,4294967295,'\0','\0'),(3096,'Poarigana',255,65535,65535,4294967295,'\0','\0'),(3097,'Paiblileoh',255,65535,65535,4294967295,'\0','\0'),(3098,'Ospoad',255,65535,65535,4294967295,'\0','\0'),(3099,'Aaurkecsa',255,65535,65535,4294967295,'\0','\0'),(3100,'Agabaisi',255,65535,65535,4294967295,'\0','\0'),(3101,'Iaso',255,65535,65535,4294967295,'\0','\0'),(3102,'Roaera',255,65535,65535,4294967295,'\0','\0'),(3103,'Neciraraey',255,65535,65535,4294967295,'\0','\0'),(3104,'Tyyatolo',255,65535,65535,4294967295,'\0','\0'),(3105,'Enamtesaot',255,65535,65535,4294967295,'\0','\0'),(3106,'Edstirodi',255,65535,65535,4294967295,'\0','\0'),(3107,'Ockcoi',255,65535,65535,4294967295,'\0','\0'),(3108,'Biampegoicar',255,65535,65535,4294967295,'\0','\0'),(3109,'Kearycko',255,65535,65535,4294967295,'\0','\0'),(3110,'Oianolite',255,65535,65535,4294967295,'\0','\0'),(3111,'Trauan',255,65535,65535,4294967295,'\0','\0'),(3112,'Iromoiplo',255,65535,65535,4294967295,'\0','\0'),(3113,'Zohoageve',255,65535,65535,4294967295,'\0','\0'),(3114,'Iseupe',255,65535,65535,4294967295,'\0','\0'),(3115,'Oytyaale',255,65535,65535,4294967295,'\0','\0'),(3116,'Maroiaui',255,65535,65535,4294967295,'\0','\0'),(3117,'Notoayyol',255,65535,65535,4294967295,'\0','\0'),(3118,'Oacai',255,65535,65535,4294967295,'\0','\0'),(3119,'Rayfalo',255,65535,65535,4294967295,'\0','\0'),(3120,'Oauoel',255,65535,65535,4294967295,'\0','\0'),(3121,'Imcaifowy',255,65535,65535,4294967295,'\0','\0'),(3122,'Nayoecra',255,65535,65535,4294967295,'\0','\0'),(3123,'Igtoursta',255,65535,65535,4294967295,'\0','\0'),(3124,'Ignocefoi',255,65535,65535,4294967295,'\0','\0'),(3125,'Ingabfliuob',255,65535,65535,4294967295,'\0','\0'),(3126,'Ataitay',255,65535,65535,4294967295,'\0','\0'),(3127,'Erawaoleo',255,65535,65535,4294967295,'\0','\0'),(3128,'Lobti',255,65535,65535,4294967295,'\0','\0'),(3129,'Staiegtocin',255,65535,65535,4294967295,'\0','\0'),(3130,'Veskoiz',255,65535,65535,4294967295,'\0','\0'),(3131,'Esco',255,65535,65535,4294967295,'\0','\0'),(3132,'Pataotyqu',255,65535,65535,4294967295,'\0','\0'),(3133,'Eacruni',255,65535,65535,4294967295,'\0','\0'),(3134,'Aiteiba',255,65535,65535,4294967295,'\0','\0'),(3135,'Ickesstroi',255,65535,65535,4294967295,'\0','\0'),(3136,'Temoeuqni',255,65535,65535,4294967295,'\0','\0'),(3137,'Olinule',255,65535,65535,4294967295,'\0','\0'),(3138,'Feupiahofe',255,65535,65535,4294967295,'\0','\0'),(3139,'Pryisdeacpre',255,65535,65535,4294967295,'\0','\0'),(3140,'Aligeopcue',255,65535,65535,4294967295,'\0','\0'),(3141,'Erdeilswail',255,65535,65535,4294967295,'\0','\0'),(3142,'Nise',255,65535,65535,4294967295,'\0','\0'),(3143,'Staaske',255,65535,65535,4294967295,'\0','\0'),(3144,'Ollrapro',255,65535,65535,4294967295,'\0','\0'),(3145,'Imchaarneid',255,65535,65535,4294967295,'\0','\0'),(3146,'Girioploonud',255,65535,65535,4294967295,'\0','\0'),(3147,'Edaltyeya',255,65535,65535,4294967295,'\0','\0'),(3148,'Ytesaea',255,65535,65535,4294967295,'\0','\0'),(3149,'Eliap',255,65535,65535,4294967295,'\0','\0'),(3150,'Tuliliuogy',255,65535,65535,4294967295,'\0','\0'),(3151,'Inteyer',255,65535,65535,4294967295,'\0','\0'),(3152,'Ienedioca',255,65535,65535,4294967295,'\0','\0'),(3153,'Elyayake',255,65535,65535,4294967295,'\0','\0'),(3154,'Itrina',255,65535,65535,4294967295,'\0','\0'),(3155,'Esphelero',255,65535,65535,4294967295,'\0','\0'),(3156,'Aguou',255,65535,65535,4294967295,'\0','\0'),(3157,'Adnocipe',255,65535,65535,4294967295,'\0','\0'),(3158,'Aranekoch',255,65535,65535,4294967295,'\0','\0'),(3159,'Utuyin',255,65535,65535,4294967295,'\0','\0'),(3160,'Reaaunon',255,65535,65535,4294967295,'\0','\0'),(3161,'Apoatnai',255,65535,65535,4294967295,'\0','\0'),(3162,'Aeleraly',255,65535,65535,4294967295,'\0','\0'),(3163,'Yiesoballata',255,65535,65535,4294967295,'\0','\0'),(3164,'Iveasaro',255,65535,65535,4294967295,'\0','\0'),(3165,'Yiareckent',255,65535,65535,4294967295,'\0','\0'),(3166,'Nilistepi',255,65535,65535,4294967295,'\0','\0'),(3167,'Nediertoeod',255,65535,65535,4294967295,'\0','\0'),(3168,'Poboyente',255,65535,65535,4294967295,'\0','\0'),(3169,'Oloe',255,65535,65535,4294967295,'\0','\0'),(3170,'Auipauel',255,65535,65535,4294967295,'\0','\0'),(3171,'Unefleito',255,65535,65535,4294967295,'\0','\0'),(3172,'Tilaboo',255,65535,65535,4294967295,'\0','\0'),(3173,'Choea',255,65535,65535,4294967295,'\0','\0'),(3174,'Ioni',255,65535,65535,4294967295,'\0','\0'),(3175,'Erdaebo',255,65535,65535,4294967295,'\0','\0'),(3176,'Ilaara',255,65535,65535,4294967295,'\0','\0'),(3177,'Gaikdoaorny',255,65535,65535,4294967295,'\0','\0'),(3178,'Adguetobia',255,65535,65535,4294967295,'\0','\0'),(3179,'Ordriluic',255,65535,65535,4294967295,'\0','\0'),(3180,'Edoasae',255,65535,65535,4294967295,'\0','\0'),(3181,'Isiuntei',255,65535,65535,4294967295,'\0','\0'),(3182,'Oaurou',255,65535,65535,4294967295,'\0','\0'),(3183,'Muazan',255,65535,65535,4294967295,'\0','\0'),(3184,'Abuno',255,65535,65535,4294967295,'\0','\0'),(3185,'Cotiet',255,65535,65535,4294967295,'\0','\0'),(3186,'Aovessligre',255,65535,65535,4294967295,'\0','\0'),(3187,'Rialeleigo',255,65535,65535,4294967295,'\0','\0'),(3188,'Amaerau',255,65535,65535,4294967295,'\0','\0'),(3189,'Emtarauc',255,65535,65535,4294967295,'\0','\0'),(3190,'Namibe',255,65535,65535,4294967295,'\0','\0'),(3191,'Otatiopa',255,65535,65535,4294967295,'\0','\0'),(3192,'Onutywe',255,65535,65535,4294967295,'\0','\0'),(3193,'Ueyon',255,65535,65535,4294967295,'\0','\0'),(3194,'Zale',255,65535,65535,4294967295,'\0','\0'),(3195,'Raop',255,65535,65535,4294967295,'\0','\0'),(3196,'Entiop',255,65535,65535,4294967295,'\0','\0'),(3197,'Reipeam',255,65535,65535,4294967295,'\0','\0'),(3198,'Zery',255,65535,65535,4294967295,'\0','\0'),(3199,'Iuprirona',255,65535,65535,4294967295,'\0','\0'),(3200,'Tiaosuary',255,65535,65535,4294967295,'\0','\0'),(3201,'Icelanych',255,65535,65535,4294967295,'\0','\0'),(3202,'Itneurstaoer',255,65535,65535,4294967295,'\0','\0'),(3203,'Nicuio',255,65535,65535,4294967295,'\0','\0'),(3204,'Orsypboao',255,65535,65535,4294967295,'\0','\0'),(3205,'Ayenaafedo',255,65535,65535,4294967295,'\0','\0'),(3206,'Oezesmin',255,65535,65535,4294967295,'\0','\0'),(3207,'Inmarwasca',255,65535,65535,4294967295,'\0','\0'),(3208,'Alepoayra',255,65535,65535,4294967295,'\0','\0'),(3209,'Atanebatner',255,65535,65535,4294967295,'\0','\0'),(3210,'Itesiert',255,65535,65535,4294967295,'\0','\0'),(3211,'Odiegwhoonle',255,65535,65535,4294967295,'\0','\0'),(3212,'Vaorpaercoon',255,65535,65535,4294967295,'\0','\0'),(3213,'Itla',255,65535,65535,4294967295,'\0','\0'),(3214,'Iastde',255,65535,65535,4294967295,'\0','\0'),(3215,'Ortunakat',255,65535,65535,4294967295,'\0','\0'),(3216,'Atleetethi',255,65535,65535,4294967295,'\0','\0'),(3217,'Peti',255,65535,65535,4294967295,'\0','\0'),(3218,'Esaesafa',255,65535,65535,4294967295,'\0','\0'),(3219,'Osimei',255,65535,65535,4294967295,'\0','\0'),(3220,'Oveioat',255,65535,65535,4294967295,'\0','\0'),(3221,'Onianeid',255,65535,65535,4294967295,'\0','\0'),(3222,'Oleyashiai',255,65535,65535,4294967295,'\0','\0'),(3223,'Ayirapa',255,65535,65535,4294967295,'\0','\0'),(3224,'Sutudesiple',255,65535,65535,4294967295,'\0','\0'),(3225,'Siyepeockano',255,65535,65535,4294967295,'\0','\0'),(3226,'Roeyptore',255,65535,65535,4294967295,'\0','\0'),(3227,'Hyotoent',255,65535,65535,4294967295,'\0','\0'),(3228,'Aymei',255,65535,65535,4294967295,'\0','\0'),(3229,'Haitchaiec',255,65535,65535,4294967295,'\0','\0'),(3230,'Oymaflais',255,65535,65535,4294967295,'\0','\0'),(3231,'Syolachi',255,65535,65535,4294967295,'\0','\0'),(3232,'Asmedoewloit',255,65535,65535,4294967295,'\0','\0'),(3233,'Etassimubome',255,65535,65535,4294967295,'\0','\0'),(3234,'Ayatoltorois',255,65535,65535,4294967295,'\0','\0'),(3235,'Peneagfriyi',255,65535,65535,4294967295,'\0','\0'),(3236,'Ployeupotat',255,65535,65535,4294967295,'\0','\0'),(3237,'Alexegac',255,65535,65535,4294967295,'\0','\0'),(3238,'Niimoa',255,65535,65535,4294967295,'\0','\0'),(3239,'Leisryait',255,65535,65535,4294967295,'\0','\0'),(3240,'Eitoespoe',255,65535,65535,4294967295,'\0','\0'),(3241,'Shadiseos',255,65535,65535,4294967295,'\0','\0'),(3242,'Hestaki',255,65535,65535,4294967295,'\0','\0'),(3243,'Aeyckorocy',255,65535,65535,4294967295,'\0','\0'),(3244,'Doatorop',255,65535,65535,4294967295,'\0','\0'),(3245,'Epcluosti',255,65535,65535,4294967295,'\0','\0'),(3246,'Nuarohan',255,65535,65535,4294967295,'\0','\0'),(3247,'Youlafeim',255,65535,65535,4294967295,'\0','\0'),(3248,'Instru',255,65535,65535,4294967295,'\0','\0'),(3249,'Utosuens',255,65535,65535,4294967295,'\0','\0'),(3250,'Tamiupeubo',255,65535,65535,4294967295,'\0','\0'),(3251,'Ypatoencea',255,65535,65535,4294967295,'\0','\0'),(3252,'Hyneiba',255,65535,65535,4294967295,'\0','\0'),(3253,'Iurp',255,65535,65535,4294967295,'\0','\0'),(3254,'Vyereoysem',255,65535,65535,4294967295,'\0','\0'),(3255,'Braiuck',255,65535,65535,4294967295,'\0','\0'),(3256,'Abuessyicuit',255,65535,65535,4294967295,'\0','\0'),(3257,'Eiganerla',255,65535,65535,4294967295,'\0','\0'),(3258,'Usectroeuo',255,65535,65535,4294967295,'\0','\0'),(3259,'Iowdnecoma',255,65535,65535,4294967295,'\0','\0'),(3260,'Nadelierne',255,65535,65535,4294967295,'\0','\0'),(3261,'Fiesmnein',255,65535,65535,4294967295,'\0','\0'),(3262,'Ockliupti',255,65535,65535,4294967295,'\0','\0'),(3263,'Oesed',255,65535,65535,4294967295,'\0','\0'),(3264,'Poerilpa',255,65535,65535,4294967295,'\0','\0'),(3265,'Aday',255,65535,65535,4294967295,'\0','\0'),(3266,'Roassietethi',255,65535,65535,4294967295,'\0','\0'),(3267,'Uboubrae',255,65535,65535,4294967295,'\0','\0'),(3268,'Adienruntaf',255,65535,65535,4294967295,'\0','\0'),(3269,'Uybi',255,65535,65535,4294967295,'\0','\0'),(3270,'Ovdoyuk',255,65535,65535,4294967295,'\0','\0'),(3271,'Ohisceodeol',255,65535,65535,4294967295,'\0','\0'),(3272,'Urusoetex',255,65535,65535,4294967295,'\0','\0'),(3273,'Yaeceroe',255,65535,65535,4294967295,'\0','\0'),(3274,'Ingirtu',255,65535,65535,4294967295,'\0','\0'),(3275,'Geichnesone',255,65535,65535,4294967295,'\0','\0'),(3276,'Coarthumiges',255,65535,65535,4294967295,'\0','\0'),(3277,'Efase',255,65535,65535,4294967295,'\0','\0'),(3278,'Ayogneob',255,65535,65535,4294967295,'\0','\0'),(3279,'Omsieuypt',255,65535,65535,4294967295,'\0','\0'),(3280,'Aledateerdo',255,65535,65535,4294967295,'\0','\0'),(3281,'Priaha',255,65535,65535,4294967295,'\0','\0'),(3282,'Ozeedyob',255,65535,65535,4294967295,'\0','\0'),(3283,'Orisasun',255,65535,65535,4294967295,'\0','\0'),(3284,'Atanizcyi',255,65535,65535,4294967295,'\0','\0'),(3285,'Etenal',255,65535,65535,4294967295,'\0','\0'),(3286,'Oamedire',255,65535,65535,4294967295,'\0','\0'),(3287,'Riovedi',255,65535,65535,4294967295,'\0','\0'),(3288,'Ayafal',255,65535,65535,4294967295,'\0','\0'),(3289,'Uraune',255,65535,65535,4294967295,'\0','\0'),(3290,'Erutrual',255,65535,65535,4294967295,'\0','\0'),(3291,'Ogwrenea',255,65535,65535,4294967295,'\0','\0'),(3292,'Laryoatoyi',255,65535,65535,4294967295,'\0','\0'),(3293,'Etzdu',255,65535,65535,4294967295,'\0','\0'),(3294,'Uesh',255,65535,65535,4294967295,'\0','\0'),(3295,'Seisi',255,65535,65535,4294967295,'\0','\0'),(3296,'Esaiad',255,65535,65535,4294967295,'\0','\0'),(3297,'Eghqubiseat',255,65535,65535,4294967295,'\0','\0'),(3298,'Biipailco',255,65535,65535,4294967295,'\0','\0'),(3299,'Ulyg',255,65535,65535,4294967295,'\0','\0'),(3300,'Irdilespa',255,65535,65535,4294967295,'\0','\0'),(3301,'Evneablo',255,65535,65535,4294967295,'\0','\0'),(3302,'Iyaedihire',255,65535,65535,4294967295,'\0','\0'),(3303,'Alnenouk',255,65535,65535,4294967295,'\0','\0'),(3304,'Waao',255,65535,65535,4294967295,'\0','\0'),(3305,'Ereilphaex',255,65535,65535,4294967295,'\0','\0'),(3306,'Ehgeiigco',255,65535,65535,4294967295,'\0','\0'),(3307,'Daatovi',255,65535,65535,4294967295,'\0','\0'),(3308,'Ongniyindiuk',255,65535,65535,4294967295,'\0','\0'),(3309,'Tredlidode',255,65535,65535,4294967295,'\0','\0'),(3310,'Acedinegloti',255,65535,65535,4294967295,'\0','\0'),(3311,'Greuadniethe',255,65535,65535,4294967295,'\0','\0'),(3312,'Liiau',255,65535,65535,4294967295,'\0','\0'),(3313,'Liernyeiv',255,65535,65535,4294967295,'\0','\0'),(3314,'Liceulel',255,65535,65535,4294967295,'\0','\0'),(3315,'Eahentroinra',255,65535,65535,4294967295,'\0','\0'),(3316,'Ilneic',255,65535,65535,4294967295,'\0','\0'),(3317,'Nelaidice',255,65535,65535,4294967295,'\0','\0'),(3318,'Sieidaocri',255,65535,65535,4294967295,'\0','\0'),(3319,'Iteeylcevo',255,65535,65535,4294967295,'\0','\0'),(3320,'Meen',255,65535,65535,4294967295,'\0','\0'),(3321,'Leguepme',255,65535,65535,4294967295,'\0','\0'),(3322,'Abuwhena',255,65535,65535,4294967295,'\0','\0'),(3323,'Yzao',255,65535,65535,4294967295,'\0','\0'),(3324,'Atadoifug',255,65535,65535,4294967295,'\0','\0'),(3325,'Ilstreiphi',255,65535,65535,4294967295,'\0','\0'),(3326,'Ublyliiage',255,65535,65535,4294967295,'\0','\0'),(3327,'Lyutboyund',255,65535,65535,4294967295,'\0','\0'),(3328,'Loateteimpe',255,65535,65535,4294967295,'\0','\0'),(3329,'Streasmee',255,65535,65535,4294967295,'\0','\0'),(3330,'Obein',255,65535,65535,4294967295,'\0','\0'),(3331,'Amuncraec',255,65535,65535,4294967295,'\0','\0'),(3332,'Edordina',255,65535,65535,4294967295,'\0','\0'),(3333,'Keerecita',255,65535,65535,4294967295,'\0','\0'),(3334,'Gili',255,65535,65535,4294967295,'\0','\0'),(3335,'Aotiphapig',255,65535,65535,4294967295,'\0','\0'),(3336,'Eneunastier',255,65535,65535,4294967295,'\0','\0'),(3337,'Oaest',255,65535,65535,4294967295,'\0','\0'),(3338,'Riessotbu',255,65535,65535,4294967295,'\0','\0'),(3339,'Inutei',255,65535,65535,4294967295,'\0','\0'),(3340,'Veacutde',255,65535,65535,4294967295,'\0','\0'),(3341,'Eoreu',255,65535,65535,4294967295,'\0','\0'),(3342,'Atulap',255,65535,65535,4294967295,'\0','\0'),(3343,'Aleat',255,65535,65535,4294967295,'\0','\0'),(3344,'Uckanowulaul',255,65535,65535,4294967295,'\0','\0'),(3345,'Aicuarer',255,65535,65535,4294967295,'\0','\0'),(3346,'Ayutysitii',255,65535,65535,4294967295,'\0','\0'),(3347,'Stripebe',255,65535,65535,4294967295,'\0','\0'),(3348,'Cabeniixa',255,65535,65535,4294967295,'\0','\0'),(3349,'Idli',255,65535,65535,4294967295,'\0','\0'),(3350,'Inhe',255,65535,65535,4294967295,'\0','\0'),(3351,'Ardores',255,65535,65535,4294967295,'\0','\0'),(3352,'Egonenoivam',255,65535,65535,4294967295,'\0','\0'),(3353,'Oreziatu',255,65535,65535,4294967295,'\0','\0'),(3354,'Unceyae',255,65535,65535,4294967295,'\0','\0'),(3355,'Echecoho',255,65535,65535,4294967295,'\0','\0'),(3356,'Elienigoa',255,65535,65535,4294967295,'\0','\0'),(3357,'Lialadayi',255,65535,65535,4294967295,'\0','\0'),(3358,'Ytufralu',255,65535,65535,4294967295,'\0','\0'),(3359,'Ayiorat',255,65535,65535,4294967295,'\0','\0'),(3360,'Rireeipufe',255,65535,65535,4294967295,'\0','\0'),(3361,'Noroamasvope',255,65535,65535,4294967295,'\0','\0'),(3362,'Yvasuodke',255,65535,65535,4294967295,'\0','\0'),(3363,'Assiesariin',255,65535,65535,4294967295,'\0','\0'),(3364,'Eibuimabis',255,65535,65535,4294967295,'\0','\0'),(3365,'Ycoaitea',255,65535,65535,4294967295,'\0','\0'),(3366,'Isena',255,65535,65535,4294967295,'\0','\0'),(3367,'Amcaorit',255,65535,65535,4294967295,'\0','\0'),(3368,'Lisetick',255,65535,65535,4294967295,'\0','\0'),(3369,'Acatiamobre',255,65535,65535,4294967295,'\0','\0'),(3370,'Uiulu',255,65535,65535,4294967295,'\0','\0'),(3371,'Adveyt',255,65535,65535,4294967295,'\0','\0'),(3372,'Rerasle',255,65535,65535,4294967295,'\0','\0'),(3373,'Upzeneome',255,65535,65535,4294967295,'\0','\0'),(3374,'Hineda',255,65535,65535,4294967295,'\0','\0'),(3375,'Timeyomameck',255,65535,65535,4294967295,'\0','\0'),(3376,'Ayasero',255,65535,65535,4294967295,'\0','\0'),(3377,'Icayeaya',255,65535,65535,4294967295,'\0','\0'),(3378,'Estinraig',255,65535,65535,4294967295,'\0','\0'),(3379,'Tauteoliye',255,65535,65535,4294967295,'\0','\0'),(3380,'Usalayto',255,65535,65535,4294967295,'\0','\0'),(3381,'Eliocacla',255,65535,65535,4294967295,'\0','\0'),(3382,'Yaocescoyc',255,65535,65535,4294967295,'\0','\0'),(3383,'Esta',255,65535,65535,4294967295,'\0','\0'),(3384,'Ulecisuoti',255,65535,65535,4294967295,'\0','\0'),(3385,'Oregorerigri',255,65535,65535,4294967295,'\0','\0'),(3386,'Hiass',255,65535,65535,4294967295,'\0','\0'),(3387,'Ixic',255,65535,65535,4294967295,'\0','\0'),(3388,'Bitaaboss',255,65535,65535,4294967295,'\0','\0'),(3389,'Kutoitunkzoa',255,65535,65535,4294967295,'\0','\0'),(3390,'Aexakeism',255,65535,65535,4294967295,'\0','\0'),(3391,'Yoysta',255,65535,65535,4294967295,'\0','\0'),(3392,'Eychiochiag',255,65535,65535,4294967295,'\0','\0'),(3393,'Odeaotne',255,65535,65535,4294967295,'\0','\0'),(3394,'Idud',255,65535,65535,4294967295,'\0','\0'),(3395,'Efrune',255,65535,65535,4294967295,'\0','\0'),(3396,'Tisa',255,65535,65535,4294967295,'\0','\0'),(3397,'Eolotnauso',255,65535,65535,4294967295,'\0','\0'),(3398,'Aniangi',255,65535,65535,4294967295,'\0','\0'),(3399,'Oderadure',255,65535,65535,4294967295,'\0','\0'),(3400,'Iodvopesthe',255,65535,65535,4294967295,'\0','\0'),(3401,'Etelabanaot',255,65535,65535,4294967295,'\0','\0'),(3402,'Ankilyuhe',255,65535,65535,4294967295,'\0','\0'),(3403,'Shieceed',255,65535,65535,4294967295,'\0','\0'),(3404,'Oldguintne',255,65535,65535,4294967295,'\0','\0'),(3405,'Ecemis',255,65535,65535,4294967295,'\0','\0'),(3406,'Eypo',255,65535,65535,4294967295,'\0','\0'),(3407,'Ring',255,65535,65535,4294967295,'\0','\0'),(3408,'Maecduiat',255,65535,65535,4294967295,'\0','\0'),(3409,'Moatgoian',255,65535,65535,4294967295,'\0','\0'),(3410,'Phoewengahyu',255,65535,65535,4294967295,'\0','\0'),(3411,'Ohuasere',255,65535,65535,4294967295,'\0','\0'),(3412,'Leti',255,65535,65535,4294967295,'\0','\0'),(3413,'Reot',255,65535,65535,4294967295,'\0','\0'),(3414,'Olesya',255,65535,65535,4294967295,'\0','\0'),(3415,'Etgro',255,65535,65535,4294967295,'\0','\0'),(3416,'Abbluelxi',255,65535,65535,4294967295,'\0','\0'),(3417,'Migrilie',255,65535,65535,4294967295,'\0','\0'),(3418,'Umasahat',255,65535,65535,4294967295,'\0','\0'),(3419,'Onierero',255,65535,65535,4294967295,'\0','\0'),(3420,'Alpeklyeewn',255,65535,65535,4294967295,'\0','\0'),(3421,'Seaisyaial',255,65535,65535,4294967295,'\0','\0'),(3422,'Toae',255,65535,65535,4294967295,'\0','\0'),(3423,'Aluypoghon',255,65535,65535,4294967295,'\0','\0'),(3424,'Neroyaheesul',255,65535,65535,4294967295,'\0','\0'),(3425,'Ticlonuse',255,65535,65535,4294967295,'\0','\0'),(3426,'Ifahenoleim',255,65535,65535,4294967295,'\0','\0'),(3427,'Aanoe',255,65535,65535,4294967295,'\0','\0'),(3428,'Enumamom',255,65535,65535,4294967295,'\0','\0'),(3429,'Meanlaer',255,65535,65535,4294967295,'\0','\0'),(3430,'Yulluide',255,65535,65535,4294967295,'\0','\0'),(3431,'Tempsojoib',255,65535,65535,4294967295,'\0','\0'),(3432,'Eole',255,65535,65535,4294967295,'\0','\0'),(3433,'Westre',255,65535,65535,4294967295,'\0','\0'),(3434,'Agoliblaorci',255,65535,65535,4294967295,'\0','\0'),(3435,'Fete',255,65535,65535,4294967295,'\0','\0'),(3436,'Deteyraene',255,65535,65535,4294967295,'\0','\0'),(3437,'Oyeenwa',255,65535,65535,4294967295,'\0','\0'),(3438,'Eshdediwi',255,65535,65535,4294967295,'\0','\0'),(3439,'Olacryohdaup',255,65535,65535,4294967295,'\0','\0'),(3440,'Eraliteos',255,65535,65535,4294967295,'\0','\0'),(3441,'Yekiacsniu',255,65535,65535,4294967295,'\0','\0'),(3442,'Irenierac',255,65535,65535,4294967295,'\0','\0'),(3443,'Neaso',255,65535,65535,4294967295,'\0','\0'),(3444,'Itteeakiart',255,65535,65535,4294967295,'\0','\0'),(3445,'Iheprainble',255,65535,65535,4294967295,'\0','\0'),(3446,'Edotilsi',255,65535,65535,4294967295,'\0','\0'),(3447,'Enasatnoiuch',255,65535,65535,4294967295,'\0','\0'),(3448,'Capeeraid',255,65535,65535,4294967295,'\0','\0'),(3449,'Vihe',255,65535,65535,4294967295,'\0','\0'),(3450,'Ecuecsu',255,65535,65535,4294967295,'\0','\0'),(3451,'Istrealma',255,65535,65535,4294967295,'\0','\0'),(3452,'Neasplaory',255,65535,65535,4294967295,'\0','\0'),(3453,'Olepostahaph',255,65535,65535,4294967295,'\0','\0'),(3454,'Laonaah',255,65535,65535,4294967295,'\0','\0'),(3455,'Esade',255,65535,65535,4294967295,'\0','\0'),(3456,'Traoshuwepoa',255,65535,65535,4294967295,'\0','\0'),(3457,'Adio',255,65535,65535,4294967295,'\0','\0'),(3458,'Esanidip',255,65535,65535,4294967295,'\0','\0'),(3459,'Oneoggesla',255,65535,65535,4294967295,'\0','\0'),(3460,'Upraylinses',255,65535,65535,4294967295,'\0','\0'),(3461,'Anemo',255,65535,65535,4294967295,'\0','\0'),(3462,'Etaasserita',255,65535,65535,4294967295,'\0','\0'),(3463,'Iaordread',255,65535,65535,4294967295,'\0','\0'),(3464,'Ialimaetar',255,65535,65535,4294967295,'\0','\0'),(3465,'Inoheo',255,65535,65535,4294967295,'\0','\0'),(3466,'Omafi',255,65535,65535,4294967295,'\0','\0'),(3467,'Neitapanqu',255,65535,65535,4294967295,'\0','\0'),(3468,'Yaburonei',255,65535,65535,4294967295,'\0','\0'),(3469,'Segla',255,65535,65535,4294967295,'\0','\0'),(3470,'Buibisarere',255,65535,65535,4294967295,'\0','\0'),(3471,'Essyde',255,65535,65535,4294967295,'\0','\0'),(3472,'Uliuc',255,65535,65535,4294967295,'\0','\0'),(3473,'Ecactra',255,65535,65535,4294967295,'\0','\0'),(3474,'Uyanica',255,65535,65535,4294967295,'\0','\0'),(3475,'Uapilai',255,65535,65535,4294967295,'\0','\0'),(3476,'Eraerohuz',255,65535,65535,4294967295,'\0','\0'),(3477,'Uylgioesscra',255,65535,65535,4294967295,'\0','\0'),(3478,'Isat',255,65535,65535,4294967295,'\0','\0'),(3479,'Istyemapien',255,65535,65535,4294967295,'\0','\0'),(3480,'Iistayloeqya',255,65535,65535,4294967295,'\0','\0'),(3481,'Emosiy',255,65535,65535,4294967295,'\0','\0'),(3482,'Engcuetymli',255,65535,65535,4294967295,'\0','\0'),(3483,'Susigreroal',255,65535,65535,4294967295,'\0','\0'),(3484,'Inchitebi',255,65535,65535,4294967295,'\0','\0'),(3485,'Ryoao',255,65535,65535,4294967295,'\0','\0'),(3486,'Efaeismadgy',255,65535,65535,4294967295,'\0','\0'),(3487,'Elanne',255,65535,65535,4294967295,'\0','\0'),(3488,'Nomaut',255,65535,65535,4294967295,'\0','\0'),(3489,'Iacao',255,65535,65535,4294967295,'\0','\0'),(3490,'Usackayimer',255,65535,65535,4294967295,'\0','\0'),(3491,'Roumgeaurpo',255,65535,65535,4294967295,'\0','\0'),(3492,'Jieara',255,65535,65535,4294967295,'\0','\0'),(3493,'Ifcawoanni',255,65535,65535,4294967295,'\0','\0'),(3494,'Awgeoryeas',255,65535,65535,4294967295,'\0','\0'),(3495,'Yserae',255,65535,65535,4294967295,'\0','\0'),(3496,'Fieatdra',255,65535,65535,4294967295,'\0','\0'),(3497,'Neusi',255,65535,65535,4294967295,'\0','\0'),(3498,'Operayoy',255,65535,65535,4294967295,'\0','\0'),(3499,'Urflaloerici',255,65535,65535,4294967295,'\0','\0'),(3500,'Arishaze',255,65535,65535,4294967295,'\0','\0'),(3501,'Yirmtai',255,65535,65535,4294967295,'\0','\0'),(3502,'Urdi',255,65535,65535,4294967295,'\0','\0'),(3503,'Inopeb',255,65535,65535,4294967295,'\0','\0'),(3504,'Oolowhiede',255,65535,65535,4294967295,'\0','\0'),(3505,'Kaoari',255,65535,65535,4294967295,'\0','\0'),(3506,'Husuiore',255,65535,65535,4294967295,'\0','\0'),(3507,'Ohem',255,65535,65535,4294967295,'\0','\0'),(3508,'Gliasiemo',255,65535,65535,4294967295,'\0','\0'),(3509,'Ekpriuteuli',255,65535,65535,4294967295,'\0','\0'),(3510,'Ilmitete',255,65535,65535,4294967295,'\0','\0'),(3511,'Aseexveiso',255,65535,65535,4294967295,'\0','\0'),(3512,'Eula',255,65535,65535,4294967295,'\0','\0'),(3513,'Ayramene',255,65535,65535,4294967295,'\0','\0'),(3514,'Othaplatiya',255,65535,65535,4294967295,'\0','\0'),(3515,'Ayhubsaymu',255,65535,65535,4294967295,'\0','\0'),(3516,'Echbateutno',255,65535,65535,4294967295,'\0','\0'),(3517,'Imotwao',255,65535,65535,4294967295,'\0','\0'),(3518,'Uosceansiov',255,65535,65535,4294967295,'\0','\0'),(3519,'Caeatucemre',255,65535,65535,4294967295,'\0','\0'),(3520,'Avizowlcaele',255,65535,65535,4294967295,'\0','\0'),(3521,'Eyaoistli',255,65535,65535,4294967295,'\0','\0'),(3522,'Eranoaai',255,65535,65535,4294967295,'\0','\0'),(3523,'Shaaeshiar',255,65535,65535,4294967295,'\0','\0'),(3524,'Ytaliad',255,65535,65535,4294967295,'\0','\0'),(3525,'Blonocoes',255,65535,65535,4294967295,'\0','\0'),(3526,'Ismearnichay',255,65535,65535,4294967295,'\0','\0'),(3527,'Ycireeula',255,65535,65535,4294967295,'\0','\0'),(3528,'Aecheey',255,65535,65535,4294967295,'\0','\0'),(3529,'Negeor',255,65535,65535,4294967295,'\0','\0'),(3530,'Iscapenaisnu',255,65535,65535,4294967295,'\0','\0'),(3531,'Lyroieforhe',255,65535,65535,4294967295,'\0','\0'),(3532,'Abofyeloba',255,65535,65535,4294967295,'\0','\0'),(3533,'Ydesdeey',255,65535,65535,4294967295,'\0','\0'),(3534,'Parueplyehti',255,65535,65535,4294967295,'\0','\0'),(3535,'Lodipi',255,65535,65535,4294967295,'\0','\0'),(3536,'Urebdi',255,65535,65535,4294967295,'\0','\0'),(3537,'Enevo',255,65535,65535,4294967295,'\0','\0'),(3538,'Olmiureub',255,65535,65535,4294967295,'\0','\0'),(3539,'Irisincaem',255,65535,65535,4294967295,'\0','\0'),(3540,'Arifoit',255,65535,65535,4294967295,'\0','\0'),(3541,'Astui',255,65535,65535,4294967295,'\0','\0'),(3542,'Ungsealavayo',255,65535,65535,4294967295,'\0','\0'),(3543,'Owalfyiey',255,65535,65535,4294967295,'\0','\0'),(3544,'Iatesizpiac',255,65535,65535,4294967295,'\0','\0'),(3545,'Kiille',255,65535,65535,4294967295,'\0','\0'),(3546,'Ciuogtenei',255,65535,65535,4294967295,'\0','\0'),(3547,'Iceailpo',255,65535,65535,4294967295,'\0','\0'),(3548,'Iliniox',255,65535,65535,4294967295,'\0','\0'),(3549,'Mioomuuri',255,65535,65535,4294967295,'\0','\0'),(3550,'Uplaishuie',255,65535,65535,4294967295,'\0','\0'),(3551,'Userinoede',255,65535,65535,4294967295,'\0','\0'),(3552,'Ooyohe',255,65535,65535,4294967295,'\0','\0'),(3553,'Eaosm',255,65535,65535,4294967295,'\0','\0'),(3554,'Eemydoass',255,65535,65535,4294967295,'\0','\0'),(3555,'Cihi',255,65535,65535,4294967295,'\0','\0'),(3556,'Eceluijse',255,65535,65535,4294967295,'\0','\0'),(3557,'Chirayrtma',255,65535,65535,4294967295,'\0','\0'),(3558,'Mesu',255,65535,65535,4294967295,'\0','\0'),(3559,'Aemesedig',255,65535,65535,4294967295,'\0','\0'),(3560,'Eretun',255,65535,65535,4294967295,'\0','\0'),(3561,'Doedcouh',255,65535,65535,4294967295,'\0','\0'),(3562,'Essooaraun',255,65535,65535,4294967295,'\0','\0'),(3563,'Zeriiyiter',255,65535,65535,4294967295,'\0','\0'),(3564,'Neeocolyoe',255,65535,65535,4294967295,'\0','\0'),(3565,'Iorhamu',255,65535,65535,4294967295,'\0','\0'),(3566,'Exsherereu',255,65535,65535,4294967295,'\0','\0'),(3567,'Tiraneteagya',255,65535,65535,4294967295,'\0','\0'),(3568,'Axoiermceil',255,65535,65535,4294967295,'\0','\0'),(3569,'Eribeop',255,65535,65535,4294967295,'\0','\0'),(3570,'Atemetnaell',255,65535,65535,4294967295,'\0','\0'),(3571,'Ossreteae',255,65535,65535,4294967295,'\0','\0'),(3572,'Blail',255,65535,65535,4294967295,'\0','\0'),(3573,'Atofe',255,65535,65535,4294967295,'\0','\0'),(3574,'Haolec',255,65535,65535,4294967295,'\0','\0'),(3575,'Oundo',255,65535,65535,4294967295,'\0','\0'),(3576,'Aniev',255,65535,65535,4294967295,'\0','\0'),(3577,'Orozre',255,65535,65535,4294967295,'\0','\0'),(3578,'Navire',255,65535,65535,4294967295,'\0','\0'),(3579,'Niryorunin',255,65535,65535,4294967295,'\0','\0'),(3580,'Okoyistitu',255,65535,65535,4294967295,'\0','\0'),(3581,'Teent',255,65535,65535,4294967295,'\0','\0'),(3582,'Nyigmi',255,65535,65535,4294967295,'\0','\0'),(3583,'Ordoraneryny',255,65535,65535,4294967295,'\0','\0'),(3584,'Ieli',255,65535,65535,4294967295,'\0','\0'),(3585,'Unoquog',255,65535,65535,4294967295,'\0','\0'),(3586,'Umadniglaun',255,65535,65535,4294967295,'\0','\0'),(3587,'Eyotry',255,65535,65535,4294967295,'\0','\0'),(3588,'Yoishoilem',255,65535,65535,4294967295,'\0','\0'),(3589,'Zestaeat',255,65535,65535,4294967295,'\0','\0'),(3590,'Ioriolo',255,65535,65535,4294967295,'\0','\0'),(3591,'Aper',255,65535,65535,4294967295,'\0','\0'),(3592,'Etreuzaj',255,65535,65535,4294967295,'\0','\0'),(3593,'Aaorinafi',255,65535,65535,4294967295,'\0','\0'),(3594,'Ockiovdao',255,65535,65535,4294967295,'\0','\0'),(3595,'Creacoiza',255,65535,65535,4294967295,'\0','\0'),(3596,'Criun',255,65535,65535,4294967295,'\0','\0'),(3597,'Eneritioc',255,65535,65535,4294967295,'\0','\0'),(3598,'Apyachse',255,65535,65535,4294967295,'\0','\0'),(3599,'Jeomionio',255,65535,65535,4294967295,'\0','\0'),(3600,'Abyrmskour',255,65535,65535,4294967295,'\0','\0'),(3601,'Aggutkiopai',255,65535,65535,4294967295,'\0','\0'),(3602,'Ycalyine',255,65535,65535,4294967295,'\0','\0'),(3603,'Geheonisphoa',255,65535,65535,4294967295,'\0','\0'),(3604,'Enyaopirun',255,65535,65535,4294967295,'\0','\0'),(3605,'Seinsympao',255,65535,65535,4294967295,'\0','\0'),(3606,'Iddilasesean',255,65535,65535,4294967295,'\0','\0'),(3607,'Glialoivarro',255,65535,65535,4294967295,'\0','\0'),(3608,'Oweatharinme',255,65535,65535,4294967295,'\0','\0'),(3609,'Dianseroais',255,65535,65535,4294967295,'\0','\0'),(3610,'Ionaran',255,65535,65535,4294967295,'\0','\0'),(3611,'Moyckessoay',255,65535,65535,4294967295,'\0','\0'),(3612,'Biasatu',255,65535,65535,4294967295,'\0','\0'),(3613,'Tiemge',255,65535,65535,4294967295,'\0','\0'),(3614,'Choisa',255,65535,65535,4294967295,'\0','\0'),(3615,'Aaheng',255,65535,65535,4294967295,'\0','\0'),(3616,'Nyichiafia',255,65535,65535,4294967295,'\0','\0'),(3617,'Ahleaone',255,65535,65535,4294967295,'\0','\0'),(3618,'Retoagalig',255,65535,65535,4294967295,'\0','\0'),(3619,'Arey',255,65535,65535,4294967295,'\0','\0'),(3620,'Omurenecest',255,65535,65535,4294967295,'\0','\0'),(3621,'Onraeulio',255,65535,65535,4294967295,'\0','\0'),(3622,'Abliad',255,65535,65535,4294967295,'\0','\0'),(3623,'Rieerio',255,65535,65535,4294967295,'\0','\0'),(3624,'Eagtoega',255,65535,65535,4294967295,'\0','\0'),(3625,'Yierthspo',255,65535,65535,4294967295,'\0','\0'),(3626,'Conoialust',255,65535,65535,4294967295,'\0','\0'),(3627,'Oniaystrati',255,65535,65535,4294967295,'\0','\0'),(3628,'Aleatoxu',255,65535,65535,4294967295,'\0','\0'),(3629,'Aceosweidef',255,65535,65535,4294967295,'\0','\0'),(3630,'Yaeliera',255,65535,65535,4294967295,'\0','\0'),(3631,'Rayenge',255,65535,65535,4294967295,'\0','\0'),(3632,'Itzdu',255,65535,65535,4294967295,'\0','\0'),(3633,'Nieid',255,65535,65535,4294967295,'\0','\0'),(3634,'Arolosk',255,65535,65535,4294967295,'\0','\0'),(3635,'Noltea',255,65535,65535,4294967295,'\0','\0'),(3636,'Icruongane',255,65535,65535,4294967295,'\0','\0'),(3637,'Reuv',255,65535,65535,4294967295,'\0','\0'),(3638,'Arermioadu',255,65535,65535,4294967295,'\0','\0'),(3639,'Oeixa',255,65535,65535,4294967295,'\0','\0'),(3640,'Emovehtiade',255,65535,65535,4294967295,'\0','\0'),(3641,'Etaira',255,65535,65535,4294967295,'\0','\0'),(3642,'Stylaooa',255,65535,65535,4294967295,'\0','\0'),(3643,'Epseinib',255,65535,65535,4294967295,'\0','\0'),(3644,'Otheatsosu',255,65535,65535,4294967295,'\0','\0'),(3645,'Erbecise',255,65535,65535,4294967295,'\0','\0'),(3646,'Aiqro',255,65535,65535,4294967295,'\0','\0'),(3647,'Iofian',255,65535,65535,4294967295,'\0','\0'),(3648,'Olroreico',255,65535,65535,4294967295,'\0','\0'),(3649,'Otonausco',255,65535,65535,4294967295,'\0','\0'),(3650,'Prahawooiro',255,65535,65535,4294967295,'\0','\0'),(3651,'Aynaoviod',255,65535,65535,4294967295,'\0','\0'),(3652,'Reoguivlao',255,65535,65535,4294967295,'\0','\0'),(3653,'Enioe',255,65535,65535,4294967295,'\0','\0'),(3654,'Laedduse',255,65535,65535,4294967295,'\0','\0'),(3655,'Owelriaus',255,65535,65535,4294967295,'\0','\0'),(3656,'Riolirpraan',255,65535,65535,4294967295,'\0','\0'),(3657,'Almayotel',255,65535,65535,4294967295,'\0','\0'),(3658,'Leurneas',255,65535,65535,4294967295,'\0','\0'),(3659,'Liosharedri',255,65535,65535,4294967295,'\0','\0'),(3660,'Oifyeoliil',255,65535,65535,4294967295,'\0','\0'),(3661,'Leceorduri',255,65535,65535,4294967295,'\0','\0'),(3662,'Oieaga',255,65535,65535,4294967295,'\0','\0'),(3663,'Unriro',255,65535,65535,4294967295,'\0','\0'),(3664,'Orelliizcry',255,65535,65535,4294967295,'\0','\0'),(3665,'Ocion',255,65535,65535,4294967295,'\0','\0'),(3666,'Cyocak',255,65535,65535,4294967295,'\0','\0'),(3667,'Egeati',255,65535,65535,4294967295,'\0','\0'),(3668,'Yaedawanio',255,65535,65535,4294967295,'\0','\0'),(3669,'Zeutintre',255,65535,65535,4294967295,'\0','\0'),(3670,'Iolreriami',255,65535,65535,4294967295,'\0','\0'),(3671,'Omayeati',255,65535,65535,4294967295,'\0','\0'),(3672,'Indfiarira',255,65535,65535,4294967295,'\0','\0'),(3673,'Ineemi',255,65535,65535,4294967295,'\0','\0'),(3674,'Ameyaraeh',255,65535,65535,4294967295,'\0','\0'),(3675,'Iloineu',255,65535,65535,4294967295,'\0','\0'),(3676,'Hoyyle',255,65535,65535,4294967295,'\0','\0'),(3677,'Eteishoncaic',255,65535,65535,4294967295,'\0','\0'),(3678,'Ailacoyesre',255,65535,65535,4294967295,'\0','\0'),(3679,'Ehethulahiya',255,65535,65535,4294967295,'\0','\0'),(3680,'Abligaechu',255,65535,65535,4294967295,'\0','\0'),(3681,'Onrilaresmo',255,65535,65535,4294967295,'\0','\0'),(3682,'Irdlemaehow',255,65535,65535,4294967295,'\0','\0'),(3683,'Staliscadea',255,65535,65535,4294967295,'\0','\0'),(3684,'Zecochailm',255,65535,65535,4294967295,'\0','\0'),(3685,'Eroataoh',255,65535,65535,4294967295,'\0','\0'),(3686,'Acacogi',255,65535,65535,4294967295,'\0','\0'),(3687,'Neererscieu',255,65535,65535,4294967295,'\0','\0'),(3688,'Eaud',255,65535,65535,4294967295,'\0','\0'),(3689,'Ramoyereab',255,65535,65535,4294967295,'\0','\0'),(3690,'Niapra',255,65535,65535,4294967295,'\0','\0'),(3691,'Loelas',255,65535,65535,4294967295,'\0','\0'),(3692,'Taensletyong',255,65535,65535,4294967295,'\0','\0'),(3693,'Utspoocfoig',255,65535,65535,4294967295,'\0','\0'),(3694,'Henaeche',255,65535,65535,4294967295,'\0','\0'),(3695,'Sasooerin',255,65535,65535,4294967295,'\0','\0'),(3696,'Aopluinhait',255,65535,65535,4294967295,'\0','\0'),(3697,'Ouithmglahi',255,65535,65535,4294967295,'\0','\0'),(3698,'Staisa',255,65535,65535,4294967295,'\0','\0'),(3699,'Onatel',255,65535,65535,4294967295,'\0','\0'),(3700,'Yoaesmtitaen',255,65535,65535,4294967295,'\0','\0'),(3701,'Otliatu',255,65535,65535,4294967295,'\0','\0'),(3702,'Ecnospuaya',255,65535,65535,4294967295,'\0','\0'),(3703,'Agtiatno',255,65535,65535,4294967295,'\0','\0'),(3704,'Erzaiyasic',255,65535,65535,4294967295,'\0','\0'),(3705,'Screeragtami',255,65535,65535,4294967295,'\0','\0'),(3706,'Reizairm',255,65535,65535,4294967295,'\0','\0'),(3707,'Ucpri',255,65535,65535,4294967295,'\0','\0'),(3708,'Caobe',255,65535,65535,4294967295,'\0','\0'),(3709,'Peeg',255,65535,65535,4294967295,'\0','\0'),(3710,'Imayatea',255,65535,65535,4294967295,'\0','\0'),(3711,'Rimeotega',255,65535,65535,4294967295,'\0','\0'),(3712,'Enacbli',255,65535,65535,4294967295,'\0','\0'),(3713,'Yaiacefe',255,65535,65535,4294967295,'\0','\0'),(3714,'Lapreug',255,65535,65535,4294967295,'\0','\0'),(3715,'Laze',255,65535,65535,4294967295,'\0','\0'),(3716,'Raca',255,65535,65535,4294967295,'\0','\0'),(3717,'Oraiercao',255,65535,65535,4294967295,'\0','\0'),(3718,'Emepa',255,65535,65535,4294967295,'\0','\0'),(3719,'Uaamaed',255,65535,65535,4294967295,'\0','\0'),(3720,'Renecoestyo',255,65535,65535,4294967295,'\0','\0'),(3721,'Eusaputtearl',255,65535,65535,4294967295,'\0','\0'),(3722,'Etaerne',255,65535,65535,4294967295,'\0','\0'),(3723,'Eftediey',255,65535,65535,4294967295,'\0','\0'),(3724,'Itwiemeaa',255,65535,65535,4294967295,'\0','\0'),(3725,'Enolo',255,65535,65535,4294967295,'\0','\0'),(3726,'Aruri',255,65535,65535,4294967295,'\0','\0'),(3727,'Hoeil',255,65535,65535,4294967295,'\0','\0'),(3728,'Aleyub',255,65535,65535,4294967295,'\0','\0'),(3729,'Oteotang',255,65535,65535,4294967295,'\0','\0'),(3730,'Edahzeizce',255,65535,65535,4294967295,'\0','\0'),(3731,'Ewolaeri',255,65535,65535,4294967295,'\0','\0'),(3732,'Ardiaette',255,65535,65535,4294967295,'\0','\0'),(3733,'Ecao',255,65535,65535,4294967295,'\0','\0'),(3734,'Tryfierow',255,65535,65535,4294967295,'\0','\0'),(3735,'Osstyalerper',255,65535,65535,4294967295,'\0','\0'),(3736,'Vilifistomei',255,65535,65535,4294967295,'\0','\0'),(3737,'Abofa',255,65535,65535,4294967295,'\0','\0'),(3738,'Uenase',255,65535,65535,4294967295,'\0','\0'),(3739,'Unditarbenta',255,65535,65535,4294967295,'\0','\0'),(3740,'Omtoee',255,65535,65535,4294967295,'\0','\0'),(3741,'Lebiesoat',255,65535,65535,4294967295,'\0','\0'),(3742,'Yoha',255,65535,65535,4294967295,'\0','\0'),(3743,'Ohie',255,65535,65535,4294967295,'\0','\0'),(3744,'Eush',255,65535,65535,4294967295,'\0','\0'),(3745,'Twemariiye',255,65535,65535,4294967295,'\0','\0'),(3746,'Gegiaeod',255,65535,65535,4294967295,'\0','\0'),(3747,'Ialgoerth',255,65535,65535,4294967295,'\0','\0'),(3748,'Aevooperd',255,65535,65535,4294967295,'\0','\0'),(3749,'Leeimhy',255,65535,65535,4294967295,'\0','\0'),(3750,'Ohdite',255,65535,65535,4294967295,'\0','\0'),(3751,'Esackaloestu',255,65535,65535,4294967295,'\0','\0'),(3752,'Ionleaoss',255,65535,65535,4294967295,'\0','\0'),(3753,'Igow',255,65535,65535,4294967295,'\0','\0'),(3754,'Peri',255,65535,65535,4294967295,'\0','\0'),(3755,'Ilra',255,65535,65535,4294967295,'\0','\0'),(3756,'Eyockol',255,65535,65535,4294967295,'\0','\0'),(3757,'Azostinbly',255,65535,65535,4294967295,'\0','\0'),(3758,'Ochiodinteit',255,65535,65535,4294967295,'\0','\0'),(3759,'Asautell',255,65535,65535,4294967295,'\0','\0'),(3760,'Aytisle',255,65535,65535,4294967295,'\0','\0'),(3761,'Icealolar',255,65535,65535,4294967295,'\0','\0'),(3762,'Alorieiko',255,65535,65535,4294967295,'\0','\0'),(3763,'Ovaor',255,65535,65535,4294967295,'\0','\0'),(3764,'Oyecboureor',255,65535,65535,4294967295,'\0','\0'),(3765,'Ayatarering',255,65535,65535,4294967295,'\0','\0'),(3766,'Anocopian',255,65535,65535,4294967295,'\0','\0'),(3767,'Sieecereiz',255,65535,65535,4294967295,'\0','\0'),(3768,'Hosweabiz',255,65535,65535,4294967295,'\0','\0'),(3769,'Nitiyergora',255,65535,65535,4294967295,'\0','\0'),(3770,'Neape',255,65535,65535,4294967295,'\0','\0'),(3771,'Achitow',255,65535,65535,4294967295,'\0','\0'),(3772,'Aubya',255,65535,65535,4294967295,'\0','\0'),(3773,'Erlaizleuye',255,65535,65535,4294967295,'\0','\0'),(3774,'Taeki',255,65535,65535,4294967295,'\0','\0'),(3775,'Reotreyomye',255,65535,65535,4294967295,'\0','\0'),(3776,'Izucta',255,65535,65535,4294967295,'\0','\0'),(3777,'Gulpe',255,65535,65535,4294967295,'\0','\0'),(3778,'Ofueba',255,65535,65535,4294967295,'\0','\0'),(3779,'Puinarreeh',255,65535,65535,4294967295,'\0','\0'),(3780,'Emab',255,65535,65535,4294967295,'\0','\0'),(3781,'Voele',255,65535,65535,4294967295,'\0','\0'),(3782,'Eostpieope',255,65535,65535,4294967295,'\0','\0'),(3783,'Uesreipute',255,65535,65535,4294967295,'\0','\0'),(3784,'Rioivestripi',255,65535,65535,4294967295,'\0','\0'),(3785,'Imtoerpatla',255,65535,65535,4294967295,'\0','\0'),(3786,'Otenvedewa',255,65535,65535,4294967295,'\0','\0'),(3787,'Roeugonlo',255,65535,65535,4294967295,'\0','\0'),(3788,'Icyerestreo',255,65535,65535,4294967295,'\0','\0'),(3789,'Ataro',255,65535,65535,4294967295,'\0','\0'),(3790,'Uniqfi',255,65535,65535,4294967295,'\0','\0'),(3791,'Airkmalo',255,65535,65535,4294967295,'\0','\0'),(3792,'Echehehei',255,65535,65535,4294967295,'\0','\0'),(3793,'Lietrimoipub',255,65535,65535,4294967295,'\0','\0'),(3794,'Ismieronta',255,65535,65535,4294967295,'\0','\0'),(3795,'Rebusolo',255,65535,65535,4294967295,'\0','\0'),(3796,'Stropo',255,65535,65535,4294967295,'\0','\0'),(3797,'Aiae',255,65535,65535,4294967295,'\0','\0'),(3798,'Uogayo',255,65535,65535,4294967295,'\0','\0'),(3799,'Orirallipri',255,65535,65535,4294967295,'\0','\0'),(3800,'Oritpeysi',255,65535,65535,4294967295,'\0','\0'),(3801,'Ecisumen',255,65535,65535,4294967295,'\0','\0'),(3802,'Esape',255,65535,65535,4294967295,'\0','\0'),(3803,'Reoalnievu',255,65535,65535,4294967295,'\0','\0'),(3804,'Oteamefato',255,65535,65535,4294967295,'\0','\0'),(3805,'Bipaoap',255,65535,65535,4294967295,'\0','\0'),(3806,'Yeys',255,65535,65535,4294967295,'\0','\0'),(3807,'Erueliua',255,65535,65535,4294967295,'\0','\0'),(3808,'Idroowpeico',255,65535,65535,4294967295,'\0','\0'),(3809,'Tybatscene',255,65535,65535,4294967295,'\0','\0'),(3810,'Othlaoyne',255,65535,65535,4294967295,'\0','\0'),(3811,'Melay',255,65535,65535,4294967295,'\0','\0'),(3812,'Acimaesri',255,65535,65535,4294967295,'\0','\0'),(3813,'Encaallihiak',255,65535,65535,4294967295,'\0','\0'),(3814,'Chaarstanier',255,65535,65535,4294967295,'\0','\0'),(3815,'Boecanin',255,65535,65535,4294967295,'\0','\0'),(3816,'Eonwopifeyst',255,65535,65535,4294967295,'\0','\0'),(3817,'Ostuow',255,65535,65535,4294967295,'\0','\0'),(3818,'Resonipeoss',255,65535,65535,4294967295,'\0','\0'),(3819,'Denegii',255,65535,65535,4294967295,'\0','\0'),(3820,'Atidieb',255,65535,65535,4294967295,'\0','\0'),(3821,'Ebreetheiegh',255,65535,65535,4294967295,'\0','\0'),(3822,'Iqessioed',255,65535,65535,4294967295,'\0','\0'),(3823,'Eryoae',255,65535,65535,4294967295,'\0','\0'),(3824,'Aissaipi',255,65535,65535,4294967295,'\0','\0'),(3825,'Nisuit',255,65535,65535,4294967295,'\0','\0'),(3826,'Inhytatiemi',255,65535,65535,4294967295,'\0','\0'),(3827,'Geua',255,65535,65535,4294967295,'\0','\0'),(3828,'Omaantadier',255,65535,65535,4294967295,'\0','\0'),(3829,'Ailneayean',255,65535,65535,4294967295,'\0','\0'),(3830,'Ipulinty',255,65535,65535,4294967295,'\0','\0'),(3831,'Erlail',255,65535,65535,4294967295,'\0','\0'),(3832,'Yier',255,65535,65535,4294967295,'\0','\0'),(3833,'Ulteabaeri',255,65535,65535,4294967295,'\0','\0'),(3834,'Geytaht',255,65535,65535,4294967295,'\0','\0'),(3835,'Teshigaeite',255,65535,65535,4294967295,'\0','\0'),(3836,'Axotroishi',255,65535,65535,4294967295,'\0','\0'),(3837,'Alisdoagus',255,65535,65535,4294967295,'\0','\0'),(3838,'Onieider',255,65535,65535,4294967295,'\0','\0'),(3839,'Aangoo',255,65535,65535,4294967295,'\0','\0'),(3840,'Omsuiey',255,65535,65535,4294967295,'\0','\0'),(3841,'Usreum',255,65535,65535,4294967295,'\0','\0'),(3842,'Iisotmyob',255,65535,65535,4294967295,'\0','\0'),(3843,'Guonaebju',255,65535,65535,4294967295,'\0','\0'),(3844,'Teacesty',255,65535,65535,4294967295,'\0','\0'),(3845,'Tryodingari',255,65535,65535,4294967295,'\0','\0'),(3846,'Usohabaoro',255,65535,65535,4294967295,'\0','\0'),(3847,'Nieldosarean',255,65535,65535,4294967295,'\0','\0'),(3848,'Aeeaer',255,65535,65535,4294967295,'\0','\0'),(3849,'Ateochipa',255,65535,65535,4294967295,'\0','\0'),(3850,'Laalsein',255,65535,65535,4294967295,'\0','\0'),(3851,'Olneimose',255,65535,65535,4294967295,'\0','\0'),(3852,'Priklykial',255,65535,65535,4294967295,'\0','\0'),(3853,'Segri',255,65535,65535,4294967295,'\0','\0'),(3854,'Anasiine',255,65535,65535,4294967295,'\0','\0'),(3855,'Oserilyo',255,65535,65535,4294967295,'\0','\0'),(3856,'Riastreomny',255,65535,65535,4294967295,'\0','\0'),(3857,'Isoylaoroce',255,65535,65535,4294967295,'\0','\0'),(3858,'Gleiusyaoht',255,65535,65535,4294967295,'\0','\0'),(3859,'Olang',255,65535,65535,4294967295,'\0','\0'),(3860,'Mesies',255,65535,65535,4294967295,'\0','\0'),(3861,'Orustaxi',255,65535,65535,4294967295,'\0','\0'),(3862,'Atma',255,65535,65535,4294967295,'\0','\0'),(3863,'Nioksneite',255,65535,65535,4294967295,'\0','\0'),(3864,'Anrar',255,65535,65535,4294967295,'\0','\0'),(3865,'Aeqeonso',255,65535,65535,4294967295,'\0','\0'),(3866,'Ayyeskedrhe',255,65535,65535,4294967295,'\0','\0'),(3867,'Fohococaa',255,65535,65535,4294967295,'\0','\0'),(3868,'Leiiech',255,65535,65535,4294967295,'\0','\0'),(3869,'Obacruerer',255,65535,65535,4294967295,'\0','\0'),(3870,'Rohomdrycoro',255,65535,65535,4294967295,'\0','\0'),(3871,'Ubinomi',255,65535,65535,4294967295,'\0','\0'),(3872,'Epiner',255,65535,65535,4294967295,'\0','\0'),(3873,'Ieamebay',255,65535,65535,4294967295,'\0','\0'),(3874,'Itao',255,65535,65535,4294967295,'\0','\0'),(3875,'Owurer',255,65535,65535,4294967295,'\0','\0'),(3876,'Teaytusy',255,65535,65535,4294967295,'\0','\0'),(3877,'Icureoed',255,65535,65535,4294967295,'\0','\0'),(3878,'Eobul',255,65535,65535,4294967295,'\0','\0'),(3879,'Tiateoiy',255,65535,65535,4294967295,'\0','\0'),(3880,'Ugatiamipra',255,65535,65535,4294967295,'\0','\0'),(3881,'Ocirlu',255,65535,65535,4294967295,'\0','\0'),(3882,'Euer',255,65535,65535,4294967295,'\0','\0'),(3883,'Uerpheutety',255,65535,65535,4294967295,'\0','\0'),(3884,'Rasha',255,65535,65535,4294967295,'\0','\0'),(3885,'Udreyeute',255,65535,65535,4294967295,'\0','\0'),(3886,'Shaogac',255,65535,65535,4294967295,'\0','\0'),(3887,'Anye',255,65535,65535,4294967295,'\0','\0'),(3888,'Ragileiam',255,65535,65535,4294967295,'\0','\0'),(3889,'Iataele',255,65535,65535,4294967295,'\0','\0'),(3890,'Eacirmesonse',255,65535,65535,4294967295,'\0','\0'),(3891,'Maleoonmoam',255,65535,65535,4294967295,'\0','\0'),(3892,'Iaireya',255,65535,65535,4294967295,'\0','\0'),(3893,'Riioniehyo',255,65535,65535,4294967295,'\0','\0'),(3894,'Imoerinena',255,65535,65535,4294967295,'\0','\0'),(3895,'Biismy',255,65535,65535,4294967295,'\0','\0'),(3896,'Aseasinanle',255,65535,65535,4294967295,'\0','\0'),(3897,'Lyocnego',255,65535,65535,4294967295,'\0','\0'),(3898,'Sepe',255,65535,65535,4294967295,'\0','\0'),(3899,'Ageief',255,65535,65535,4294967295,'\0','\0'),(3900,'Tiliultuatri',255,65535,65535,4294967295,'\0','\0'),(3901,'Peoweatar',255,65535,65535,4294967295,'\0','\0'),(3902,'Laerecriipra',255,65535,65535,4294967295,'\0','\0'),(3903,'Eehardoiqunt',255,65535,65535,4294967295,'\0','\0'),(3904,'Aticorabaest',255,65535,65535,4294967295,'\0','\0'),(3905,'Ewacroyp',255,65535,65535,4294967295,'\0','\0'),(3906,'Ubatypspe',255,65535,65535,4294967295,'\0','\0'),(3907,'Aestid',255,65535,65535,4294967295,'\0','\0'),(3908,'Ilbraichro',255,65535,65535,4294967295,'\0','\0'),(3909,'Erlioannebri',255,65535,65535,4294967295,'\0','\0'),(3910,'Osecaaspa',255,65535,65535,4294967295,'\0','\0'),(3911,'Egoqneomolo',255,65535,65535,4294967295,'\0','\0'),(3912,'Usir',255,65535,65535,4294967295,'\0','\0'),(3913,'Siriapipese',255,65535,65535,4294967295,'\0','\0'),(3914,'Osnoeod',255,65535,65535,4294967295,'\0','\0'),(3915,'Snunoehari',255,65535,65535,4294967295,'\0','\0'),(3916,'Alnoiro',255,65535,65535,4294967295,'\0','\0'),(3917,'Artaotaassar',255,65535,65535,4294967295,'\0','\0'),(3918,'Meba',255,65535,65535,4294967295,'\0','\0'),(3919,'Urdniiaatre',255,65535,65535,4294967295,'\0','\0'),(3920,'Fuis',255,65535,65535,4294967295,'\0','\0'),(3921,'Eleah',255,65535,65535,4294967295,'\0','\0'),(3922,'Obbetelyro',255,65535,65535,4294967295,'\0','\0'),(3923,'Ihuao',255,65535,65535,4294967295,'\0','\0'),(3924,'Atyrouteic',255,65535,65535,4294967295,'\0','\0'),(3925,'Omiupoatno',255,65535,65535,4294967295,'\0','\0'),(3926,'Iossastenguc',255,65535,65535,4294967295,'\0','\0'),(3927,'Niopailes',255,65535,65535,4294967295,'\0','\0'),(3928,'Diati',255,65535,65535,4294967295,'\0','\0'),(3929,'Suoplineri',255,65535,65535,4294967295,'\0','\0'),(3930,'Egenoiftopo',255,65535,65535,4294967295,'\0','\0'),(3931,'Erzeo',255,65535,65535,4294967295,'\0','\0'),(3932,'Deind',255,65535,65535,4294967295,'\0','\0'),(3933,'Aigentiarso',255,65535,65535,4294967295,'\0','\0'),(3934,'Tioratcoblu',255,65535,65535,4294967295,'\0','\0'),(3935,'Odagrisceol',255,65535,65535,4294967295,'\0','\0'),(3936,'Amatsobesce',255,65535,65535,4294967295,'\0','\0'),(3937,'Coodesciaum',255,65535,65535,4294967295,'\0','\0'),(3938,'Gaerabord',255,65535,65535,4294967295,'\0','\0'),(3939,'Inytesh',255,65535,65535,4294967295,'\0','\0'),(3940,'Tawouni',255,65535,65535,4294967295,'\0','\0'),(3941,'Otiaes',255,65535,65535,4294967295,'\0','\0'),(3942,'Irerey',255,65535,65535,4294967295,'\0','\0'),(3943,'Luasale',255,65535,65535,4294967295,'\0','\0'),(3944,'Aolba',255,65535,65535,4294967295,'\0','\0'),(3945,'Pevoraorpra',255,65535,65535,4294967295,'\0','\0'),(3946,'Eneanaipiz',255,65535,65535,4294967295,'\0','\0'),(3947,'Erehutyo',255,65535,65535,4294967295,'\0','\0'),(3948,'Aumettongero',255,65535,65535,4294967295,'\0','\0'),(3949,'Lope',255,65535,65535,4294967295,'\0','\0'),(3950,'Ockadhoni',255,65535,65535,4294967295,'\0','\0'),(3951,'Emho',255,65535,65535,4294967295,'\0','\0'),(3952,'Opoana',255,65535,65535,4294967295,'\0','\0'),(3953,'Itmaeu',255,65535,65535,4294967295,'\0','\0'),(3954,'Mies',255,65535,65535,4294967295,'\0','\0'),(3955,'Mapier',255,65535,65535,4294967295,'\0','\0'),(3956,'Atoeur',255,65535,65535,4294967295,'\0','\0'),(3957,'Owahelhean',255,65535,65535,4294967295,'\0','\0'),(3958,'Inumarsilo',255,65535,65535,4294967295,'\0','\0'),(3959,'Eteindkeje',255,65535,65535,4294967295,'\0','\0'),(3960,'Ilonilesedny',255,65535,65535,4294967295,'\0','\0'),(3961,'Adneacutyilk',255,65535,65535,4294967295,'\0','\0'),(3962,'Opulenigh',255,65535,65535,4294967295,'\0','\0'),(3963,'Ahtoraurond',255,65535,65535,4294967295,'\0','\0'),(3964,'Tesyossemoli',255,65535,65535,4294967295,'\0','\0'),(3965,'Uhafu',255,65535,65535,4294967295,'\0','\0'),(3966,'Lapeacedi',255,65535,65535,4294967295,'\0','\0'),(3967,'Ceyeyet',255,65535,65535,4294967295,'\0','\0'),(3968,'Orut',255,65535,65535,4294967295,'\0','\0'),(3969,'Inewnapreor',255,65535,65535,4294967295,'\0','\0'),(3970,'Phapimi',255,65535,65535,4294967295,'\0','\0'),(3971,'Yppachibeiap',255,65535,65535,4294967295,'\0','\0'),(3972,'Meprohiyec',255,65535,65535,4294967295,'\0','\0'),(3973,'Deinmiaphe',255,65535,65535,4294967295,'\0','\0'),(3974,'Yneifo',255,65535,65535,4294967295,'\0','\0'),(3975,'Ertrie',255,65535,65535,4294967295,'\0','\0'),(3976,'Laeockefeu',255,65535,65535,4294967295,'\0','\0'),(3977,'Ernoanif',255,65535,65535,4294967295,'\0','\0'),(3978,'Echuoiv',255,65535,65535,4294967295,'\0','\0'),(3979,'Oscidaicse',255,65535,65535,4294967295,'\0','\0'),(3980,'Onolte',255,65535,65535,4294967295,'\0','\0'),(3981,'Sleagrey',255,65535,65535,4294967295,'\0','\0'),(3982,'Ehicya',255,65535,65535,4294967295,'\0','\0'),(3983,'Eyegeor',255,65535,65535,4294967295,'\0','\0'),(3984,'Stiolueiq',255,65535,65535,4294967295,'\0','\0'),(3985,'Elerdysep',255,65535,65535,4294967295,'\0','\0'),(3986,'Ligiodroice',255,65535,65535,4294967295,'\0','\0'),(3987,'Anayera',255,65535,65535,4294967295,'\0','\0'),(3988,'Natemaow',255,65535,65535,4294967295,'\0','\0'),(3989,'Siryimfecuol',255,65535,65535,4294967295,'\0','\0'),(3990,'Aboceaghloe',255,65535,65535,4294967295,'\0','\0'),(3991,'Inefaloatli',255,65535,65535,4294967295,'\0','\0'),(3992,'Bimoakin',255,65535,65535,4294967295,'\0','\0'),(3993,'Sukeiiteyof',255,65535,65535,4294967295,'\0','\0'),(3994,'Goucrieevo',255,65535,65535,4294967295,'\0','\0'),(3995,'Remaecestro',255,65535,65535,4294967295,'\0','\0'),(3996,'Isom',255,65535,65535,4294967295,'\0','\0'),(3997,'Iistyintabmi',255,65535,65535,4294967295,'\0','\0'),(3998,'Ialeetypnu',255,65535,65535,4294967295,'\0','\0'),(3999,'Eovesponon',255,65535,65535,4294967295,'\0','\0'),(4000,'Ahireer',255,65535,65535,4294967295,'\0','\0'),(4001,'Otaereet',255,65535,65535,4294967295,'\0','\0'),(4002,'Aogine',255,65535,65535,4294967295,'\0','\0'),(4003,'Oatuiweri',255,65535,65535,4294967295,'\0','\0'),(4004,'Einedoaa',255,65535,65535,4294967295,'\0','\0'),(4005,'Inoleisme',255,65535,65535,4294967295,'\0','\0'),(4006,'Untef',255,65535,65535,4294967295,'\0','\0'),(4007,'Ioycoino',255,65535,65535,4294967295,'\0','\0'),(4008,'Astochaireor',255,65535,65535,4294967295,'\0','\0'),(4009,'Anlikeese',255,65535,65535,4294967295,'\0','\0'),(4010,'Urwautryeh',255,65535,65535,4294967295,'\0','\0'),(4011,'Pirashapugro',255,65535,65535,4294967295,'\0','\0'),(4012,'Suamolit',255,65535,65535,4294967295,'\0','\0'),(4013,'Erona',255,65535,65535,4294967295,'\0','\0'),(4014,'Xiantihte',255,65535,65535,4294967295,'\0','\0'),(4015,'Ueldepo',255,65535,65535,4294967295,'\0','\0'),(4016,'Owatroistre',255,65535,65535,4294967295,'\0','\0'),(4017,'Owyu',255,65535,65535,4294967295,'\0','\0'),(4018,'Ilze',255,65535,65535,4294967295,'\0','\0'),(4019,'Lehuaripein',255,65535,65535,4294967295,'\0','\0'),(4020,'Peicowa',255,65535,65535,4294967295,'\0','\0'),(4021,'Utalalicre',255,65535,65535,4294967295,'\0','\0'),(4022,'Oaezeo',255,65535,65535,4294967295,'\0','\0'),(4023,'Raaoodna',255,65535,65535,4294967295,'\0','\0'),(4024,'Raajioryed',255,65535,65535,4294967295,'\0','\0'),(4025,'Engadie',255,65535,65535,4294967295,'\0','\0'),(4026,'Eolefi',255,65535,65535,4294967295,'\0','\0'),(4027,'Laepeis',255,65535,65535,4294967295,'\0','\0'),(4028,'Teochascroe',255,65535,65535,4294967295,'\0','\0'),(4029,'Eheov',255,65535,65535,4294967295,'\0','\0'),(4030,'Erapupeaga',255,65535,65535,4294967295,'\0','\0'),(4031,'Milaameuxol',255,65535,65535,4294967295,'\0','\0'),(4032,'Luinefro',255,65535,65535,4294967295,'\0','\0'),(4033,'Siumon',255,65535,65535,4294967295,'\0','\0'),(4034,'Siahoi',255,65535,65535,4294967295,'\0','\0'),(4035,'Cemiabortme',255,65535,65535,4294967295,'\0','\0'),(4036,'Yiteehtibi',255,65535,65535,4294967295,'\0','\0'),(4037,'Gousole',255,65535,65535,4294967295,'\0','\0'),(4038,'Uhtoo',255,65535,65535,4294967295,'\0','\0'),(4039,'Ovatypoca',255,65535,65535,4294967295,'\0','\0'),(4040,'Aremevo',255,65535,65535,4294967295,'\0','\0'),(4041,'Egoyeotcoce',255,65535,65535,4294967295,'\0','\0'),(4042,'Eemeri',255,65535,65535,4294967295,'\0','\0'),(4043,'Umengvealalo',255,65535,65535,4294967295,'\0','\0'),(4044,'Otcoeckelyp',255,65535,65535,4294967295,'\0','\0'),(4045,'Upoaalatco',255,65535,65535,4294967295,'\0','\0'),(4046,'Tehin',255,65535,65535,4294967295,'\0','\0'),(4047,'Seayesoo',255,65535,65535,4294967295,'\0','\0'),(4048,'Leontog',255,65535,65535,4294967295,'\0','\0'),(4049,'Othma',255,65535,65535,4294967295,'\0','\0'),(4050,'Deleneas',255,65535,65535,4294967295,'\0','\0'),(4051,'Euliy',255,65535,65535,4294967295,'\0','\0'),(4052,'Aeunugh',255,65535,65535,4294967295,'\0','\0'),(4053,'Idinenecoga',255,65535,65535,4294967295,'\0','\0'),(4054,'Curaona',255,65535,65535,4294967295,'\0','\0'),(4055,'Uchoadaene',255,65535,65535,4294967295,'\0','\0'),(4056,'Nekenarech',255,65535,65535,4294967295,'\0','\0'),(4057,'Esinefueic',255,65535,65535,4294967295,'\0','\0'),(4058,'Aeaeic',255,65535,65535,4294967295,'\0','\0'),(4059,'Nauesptri',255,65535,65535,4294967295,'\0','\0'),(4060,'Odteumstune',255,65535,65535,4294967295,'\0','\0'),(4061,'Nema',255,65535,65535,4294967295,'\0','\0'),(4062,'Vepeedtiim',255,65535,65535,4294967295,'\0','\0'),(4063,'Oloanaaplo',255,65535,65535,4294967295,'\0','\0'),(4064,'Ulitesteatyt',255,65535,65535,4294967295,'\0','\0'),(4065,'Taiveatelo',255,65535,65535,4294967295,'\0','\0'),(4066,'Aaya',255,65535,65535,4294967295,'\0','\0'),(4067,'Aingeemain',255,65535,65535,4294967295,'\0','\0'),(4068,'Reple',255,65535,65535,4294967295,'\0','\0'),(4069,'Iengeul',255,65535,65535,4294967295,'\0','\0'),(4070,'Borybaa',255,65535,65535,4294967295,'\0','\0'),(4071,'Ayehidne',255,65535,65535,4294967295,'\0','\0'),(4072,'Safreesmolya',255,65535,65535,4294967295,'\0','\0'),(4073,'Yrauro',255,65535,65535,4294967295,'\0','\0'),(4074,'Aloreloora',255,65535,65535,4294967295,'\0','\0'),(4075,'Ipod',255,65535,65535,4294967295,'\0','\0'),(4076,'Udatee',255,65535,65535,4294967295,'\0','\0'),(4077,'Igaerol',255,65535,65535,4294967295,'\0','\0'),(4078,'Ynuipaspiho',255,65535,65535,4294967295,'\0','\0'),(4079,'Teowicbeovdu',255,65535,65535,4294967295,'\0','\0'),(4080,'Erotloinun',255,65535,65535,4294967295,'\0','\0'),(4081,'Uneri',255,65535,65535,4294967295,'\0','\0'),(4082,'Engoessitu',255,65535,65535,4294967295,'\0','\0'),(4083,'Etcetaspi',255,65535,65535,4294967295,'\0','\0'),(4084,'Eigu',255,65535,65535,4294967295,'\0','\0'),(4085,'Nopiar',255,65535,65535,4294967295,'\0','\0'),(4086,'Veni',255,65535,65535,4294967295,'\0','\0'),(4087,'Ewooc',255,65535,65535,4294967295,'\0','\0'),(4088,'Meyamoitli',255,65535,65535,4294967295,'\0','\0'),(4089,'Iabcho',255,65535,65535,4294967295,'\0','\0'),(4090,'Sqimegoan',255,65535,65535,4294967295,'\0','\0'),(4091,'Ivaub',255,65535,65535,4294967295,'\0','\0'),(4092,'Biolucayng',255,65535,65535,4294967295,'\0','\0'),(4093,'Eayessedess',255,65535,65535,4294967295,'\0','\0'),(4094,'Ilcuacro',255,65535,65535,4294967295,'\0','\0'),(4095,'Yoilsidinati',255,65535,65535,4294967295,'\0','\0'),(4096,'Proicoa',255,65535,65535,4294967295,'\0','\0'),(4097,'Erboeng',255,65535,65535,4294967295,'\0','\0'),(4098,'Jiweimoat',255,65535,65535,4294967295,'\0','\0'),(4099,'Isuceassyo',255,65535,65535,4294967295,'\0','\0'),(4100,'Edinsrycyode',255,65535,65535,4294967295,'\0','\0'),(4101,'Obataiocne',255,65535,65535,4294967295,'\0','\0'),(4102,'Antytitheba',255,65535,65535,4294967295,'\0','\0'),(4103,'Aplio',255,65535,65535,4294967295,'\0','\0'),(4104,'Nomoeot',255,65535,65535,4294967295,'\0','\0'),(4105,'Ioatti',255,65535,65535,4294967295,'\0','\0'),(4106,'Erericken',255,65535,65535,4294967295,'\0','\0'),(4107,'Enaemejnime',255,65535,65535,4294967295,'\0','\0'),(4108,'Raimaro',255,65535,65535,4294967295,'\0','\0'),(4109,'Eleeiulco',255,65535,65535,4294967295,'\0','\0'),(4110,'Eidbe',255,65535,65535,4294967295,'\0','\0'),(4111,'Pheial',255,65535,65535,4294967295,'\0','\0'),(4112,'Voidchueeha',255,65535,65535,4294967295,'\0','\0'),(4113,'Ecedlaatis',255,65535,65535,4294967295,'\0','\0'),(4114,'Laeolshoar',255,65535,65535,4294967295,'\0','\0'),(4115,'Canecauer',255,65535,65535,4294967295,'\0','\0'),(4116,'Ealyooro',255,65535,65535,4294967295,'\0','\0'),(4117,'Laeud',255,65535,65535,4294967295,'\0','\0'),(4118,'Arer',255,65535,65535,4294967295,'\0','\0'),(4119,'Racuayetre',255,65535,65535,4294967295,'\0','\0'),(4120,'Iluck',255,65535,65535,4294967295,'\0','\0'),(4121,'Essnyneru',255,65535,65535,4294967295,'\0','\0'),(4122,'Zeme',255,65535,65535,4294967295,'\0','\0'),(4123,'Asobomxoac',255,65535,65535,4294967295,'\0','\0'),(4124,'Esarinoivay',255,65535,65535,4294967295,'\0','\0'),(4125,'Vaomdroag',255,65535,65535,4294967295,'\0','\0'),(4126,'Chayiz',255,65535,65535,4294967295,'\0','\0'),(4127,'Idarnloeram',255,65535,65535,4294967295,'\0','\0'),(4128,'Ysheie',255,65535,65535,4294967295,'\0','\0'),(4129,'Chioamcoi',255,65535,65535,4294967295,'\0','\0'),(4130,'Ehagodu',255,65535,65535,4294967295,'\0','\0'),(4131,'Cruaenoli',255,65535,65535,4294967295,'\0','\0'),(4132,'Upicihy',255,65535,65535,4294967295,'\0','\0'),(4133,'Eftestihaiey',255,65535,65535,4294967295,'\0','\0'),(4134,'Doflikaolte',255,65535,65535,4294967295,'\0','\0'),(4135,'Espisceickua',255,65535,65535,4294967295,'\0','\0'),(4136,'Xoiantco',255,65535,65535,4294967295,'\0','\0'),(4137,'Ayne',255,65535,65535,4294967295,'\0','\0'),(4138,'Teeleni',255,65535,65535,4294967295,'\0','\0'),(4139,'Iium',255,65535,65535,4294967295,'\0','\0'),(4140,'Styabivior',255,65535,65535,4294967295,'\0','\0'),(4141,'Iusk',255,65535,65535,4294967295,'\0','\0'),(4142,'Uopran',255,65535,65535,4294967295,'\0','\0'),(4143,'Ynisstu',255,65535,65535,4294967295,'\0','\0'),(4144,'Beestu',255,65535,65535,4294967295,'\0','\0'),(4145,'Noatod',255,65535,65535,4294967295,'\0','\0'),(4146,'Heyureris',255,65535,65535,4294967295,'\0','\0'),(4147,'Eduonsbona',255,65535,65535,4294967295,'\0','\0'),(4148,'Cierstri',255,65535,65535,4294967295,'\0','\0'),(4149,'Iethociton',255,65535,65535,4294967295,'\0','\0'),(4150,'Noicyye',255,65535,65535,4294967295,'\0','\0'),(4151,'Deiso',255,65535,65535,4294967295,'\0','\0'),(4152,'Raliyctthui',255,65535,65535,4294967295,'\0','\0'),(4153,'Gymeleer',255,65535,65535,4294967295,'\0','\0'),(4154,'Aicstroaldma',255,65535,65535,4294967295,'\0','\0'),(4155,'Roemermesmi',255,65535,65535,4294967295,'\0','\0'),(4156,'Umal',255,65535,65535,4294967295,'\0','\0'),(4157,'Iugi',255,65535,65535,4294967295,'\0','\0'),(4158,'Meesteo',255,65535,65535,4294967295,'\0','\0'),(4159,'Alerlaemp',255,65535,65535,4294967295,'\0','\0'),(4160,'Etyi',255,65535,65535,4294967295,'\0','\0'),(4161,'Leyty',255,65535,65535,4294967295,'\0','\0'),(4162,'Inralieli',255,65535,65535,4294967295,'\0','\0'),(4163,'Uralilae',255,65535,65535,4294967295,'\0','\0'),(4164,'Tioyet',255,65535,65535,4294967295,'\0','\0'),(4165,'Easliom',255,65535,65535,4294967295,'\0','\0'),(4166,'Cheighilahe',255,65535,65535,4294967295,'\0','\0'),(4167,'Aywiaeye',255,65535,65535,4294967295,'\0','\0'),(4168,'Elnenery',255,65535,65535,4294967295,'\0','\0'),(4169,'Inpeinpro',255,65535,65535,4294967295,'\0','\0'),(4170,'Icoxaviyss',255,65535,65535,4294967295,'\0','\0'),(4171,'Idia',255,65535,65535,4294967295,'\0','\0'),(4172,'Ismisam',255,65535,65535,4294967295,'\0','\0'),(4173,'Ocyoyov',255,65535,65535,4294967295,'\0','\0'),(4174,'Eoyas',255,65535,65535,4294967295,'\0','\0'),(4175,'Leareategg',255,65535,65535,4294967295,'\0','\0'),(4176,'Dausa',255,65535,65535,4294967295,'\0','\0'),(4177,'Aneymiandi',255,65535,65535,4294967295,'\0','\0'),(4178,'Neispca',255,65535,65535,4294967295,'\0','\0'),(4179,'Glemoaiowi',255,65535,65535,4294967295,'\0','\0'),(4180,'Beidyoerju',255,65535,65535,4294967295,'\0','\0'),(4181,'Ohfupra',255,65535,65535,4294967295,'\0','\0'),(4182,'Neaciting',255,65535,65535,4294967295,'\0','\0'),(4183,'Woaypeei',255,65535,65535,4294967295,'\0','\0'),(4184,'Deriulitmeba',255,65535,65535,4294967295,'\0','\0'),(4185,'Ignaeyurne',255,65535,65535,4294967295,'\0','\0'),(4186,'Yenismob',255,65535,65535,4294967295,'\0','\0'),(4187,'Elekail',255,65535,65535,4294967295,'\0','\0'),(4188,'Eypoiex',255,65535,65535,4294967295,'\0','\0'),(4189,'Isheopeac',255,65535,65535,4294967295,'\0','\0'),(4190,'Eqlientat',255,65535,65535,4294967295,'\0','\0'),(4191,'Cois',255,65535,65535,4294967295,'\0','\0'),(4192,'Noiterfepra',255,65535,65535,4294967295,'\0','\0'),(4193,'Kaofeeonfi',255,65535,65535,4294967295,'\0','\0'),(4194,'Maniizafioh',255,65535,65535,4294967295,'\0','\0'),(4195,'Daeni',255,65535,65535,4294967295,'\0','\0'),(4196,'Ucoupine',255,65535,65535,4294967295,'\0','\0'),(4197,'Yatomuti',255,65535,65535,4294967295,'\0','\0'),(4198,'Upelute',255,65535,65535,4294967295,'\0','\0'),(4199,'Bueom',255,65535,65535,4294967295,'\0','\0'),(4200,'Ciubatinpra',255,65535,65535,4294967295,'\0','\0'),(4201,'Yafniri',255,65535,65535,4294967295,'\0','\0'),(4202,'Omamyes',255,65535,65535,4294967295,'\0','\0'),(4203,'Uegrure',255,65535,65535,4294967295,'\0','\0'),(4204,'Cuip',255,65535,65535,4294967295,'\0','\0'),(4205,'Daochecamo',255,65535,65535,4294967295,'\0','\0'),(4206,'Oneowlebicu',255,65535,65535,4294967295,'\0','\0'),(4207,'Ieviai',255,65535,65535,4294967295,'\0','\0'),(4208,'Otlaiadubya',255,65535,65535,4294967295,'\0','\0'),(4209,'Honieruseca',255,65535,65535,4294967295,'\0','\0'),(4210,'Orgueragelid',255,65535,65535,4294967295,'\0','\0'),(4211,'Opoyiaa',255,65535,65535,4294967295,'\0','\0'),(4212,'Itxy',255,65535,65535,4294967295,'\0','\0'),(4213,'Opaurpayo',255,65535,65535,4294967295,'\0','\0'),(4214,'Uponstuumry',255,65535,65535,4294967295,'\0','\0'),(4215,'Edeaymy',255,65535,65535,4294967295,'\0','\0'),(4216,'Aaydo',255,65535,65535,4294967295,'\0','\0'),(4217,'Aneshantamu',255,65535,65535,4294967295,'\0','\0'),(4218,'Riultepa',255,65535,65535,4294967295,'\0','\0'),(4219,'Mell',255,65535,65535,4294967295,'\0','\0'),(4220,'Efied',255,65535,65535,4294967295,'\0','\0'),(4221,'Nimeaufli',255,65535,65535,4294967295,'\0','\0'),(4222,'Aoackrosere',255,65535,65535,4294967295,'\0','\0'),(4223,'Etmeja',255,65535,65535,4294967295,'\0','\0'),(4224,'Leyss',255,65535,65535,4294967295,'\0','\0'),(4225,'Astyeahtlaay',255,65535,65535,4294967295,'\0','\0'),(4226,'Myudereatig',255,65535,65535,4294967295,'\0','\0'),(4227,'Onoiyea',255,65535,65535,4294967295,'\0','\0'),(4228,'Aoheos',255,65535,65535,4294967295,'\0','\0'),(4229,'Ocinirat',255,65535,65535,4294967295,'\0','\0'),(4230,'Ricoter',255,65535,65535,4294967295,'\0','\0'),(4231,'Aplula',255,65535,65535,4294967295,'\0','\0'),(4232,'Atcoifama',255,65535,65535,4294967295,'\0','\0'),(4233,'Ombia',255,65535,65535,4294967295,'\0','\0'),(4234,'Aoeabceord',255,65535,65535,4294967295,'\0','\0'),(4235,'Oomomyomer',255,65535,65535,4294967295,'\0','\0'),(4236,'Operleat',255,65535,65535,4294967295,'\0','\0'),(4237,'Onuara',255,65535,65535,4294967295,'\0','\0'),(4238,'Sarerorai',255,65535,65535,4294967295,'\0','\0'),(4239,'Toyperteeo',255,65535,65535,4294967295,'\0','\0'),(4240,'Upioii',255,65535,65535,4294967295,'\0','\0'),(4241,'Raleogribu',255,65535,65535,4294967295,'\0','\0'),(4242,'Idcodi',255,65535,65535,4294967295,'\0','\0'),(4243,'Moapriamp',255,65535,65535,4294967295,'\0','\0'),(4244,'Icisat',255,65535,65535,4294967295,'\0','\0'),(4245,'Aimecy',255,65535,65535,4294967295,'\0','\0'),(4246,'Mauconoer',255,65535,65535,4294967295,'\0','\0'),(4247,'Ertza',255,65535,65535,4294967295,'\0','\0'),(4248,'Istoaz',255,65535,65535,4294967295,'\0','\0'),(4249,'Oweo',255,65535,65535,4294967295,'\0','\0'),(4250,'Phiyienis',255,65535,65535,4294967295,'\0','\0'),(4251,'Raeoeteti',255,65535,65535,4294967295,'\0','\0'),(4252,'Gekhietuyrd',255,65535,65535,4294967295,'\0','\0'),(4253,'Oneiia',255,65535,65535,4294967295,'\0','\0'),(4254,'Lotian',255,65535,65535,4294967295,'\0','\0'),(4255,'Piamily',255,65535,65535,4294967295,'\0','\0'),(4256,'Evucaopnoe',255,65535,65535,4294967295,'\0','\0'),(4257,'Issonnionaiz',255,65535,65535,4294967295,'\0','\0'),(4258,'Yneoa',255,65535,65535,4294967295,'\0','\0'),(4259,'Gieda',255,65535,65535,4294967295,'\0','\0'),(4260,'Edudyuial',255,65535,65535,4294967295,'\0','\0'),(4261,'Imilyome',255,65535,65535,4294967295,'\0','\0'),(4262,'Neefneiya',255,65535,65535,4294967295,'\0','\0'),(4263,'Clion',255,65535,65535,4294967295,'\0','\0'),(4264,'Aforymepo',255,65535,65535,4294967295,'\0','\0'),(4265,'Aeron',255,65535,65535,4294967295,'\0','\0'),(4266,'Oiso',255,65535,65535,4294967295,'\0','\0'),(4267,'Eahysisgapsi',255,65535,65535,4294967295,'\0','\0'),(4268,'Ineyanene',255,65535,65535,4294967295,'\0','\0'),(4269,'Ibnaiinoty',255,65535,65535,4294967295,'\0','\0'),(4270,'Ereoaresto',255,65535,65535,4294967295,'\0','\0'),(4271,'Rueruao',255,65535,65535,4294967295,'\0','\0'),(4272,'Urasinsye',255,65535,65535,4294967295,'\0','\0'),(4273,'Shieanalco',255,65535,65535,4294967295,'\0','\0'),(4274,'Inaofrewi',255,65535,65535,4294967295,'\0','\0'),(4275,'Cafleoth',255,65535,65535,4294967295,'\0','\0'),(4276,'Omygmayng',255,65535,65535,4294967295,'\0','\0'),(4277,'Yieina',255,65535,65535,4294967295,'\0','\0'),(4278,'Ardoshta',255,65535,65535,4294967295,'\0','\0'),(4279,'Isameni',255,65535,65535,4294967295,'\0','\0'),(4280,'Ontiipaar',255,65535,65535,4294967295,'\0','\0'),(4281,'Oneneyo',255,65535,65535,4294967295,'\0','\0'),(4282,'Ubof',255,65535,65535,4294967295,'\0','\0'),(4283,'Isuiws',255,65535,65535,4294967295,'\0','\0'),(4284,'Diyavacuet',255,65535,65535,4294967295,'\0','\0'),(4285,'Aeretop',255,65535,65535,4294967295,'\0','\0'),(4286,'Liiat',255,65535,65535,4294967295,'\0','\0'),(4287,'Seei',255,65535,65535,4294967295,'\0','\0'),(4288,'Eoplylepre',255,65535,65535,4294967295,'\0','\0'),(4289,'Saeost',255,65535,65535,4294967295,'\0','\0'),(4290,'Iviequitic',255,65535,65535,4294967295,'\0','\0'),(4291,'Caodsaerid',255,65535,65535,4294967295,'\0','\0'),(4292,'Ustcuneili',255,65535,65535,4294967295,'\0','\0'),(4293,'Raoshwayol',255,65535,65535,4294967295,'\0','\0'),(4294,'Evimav',255,65535,65535,4294967295,'\0','\0'),(4295,'Ridontsei',255,65535,65535,4294967295,'\0','\0'),(4296,'Kualallatai',255,65535,65535,4294967295,'\0','\0'),(4297,'Ciedinoalit',255,65535,65535,4294967295,'\0','\0'),(4298,'Eraafay',255,65535,65535,4294967295,'\0','\0'),(4299,'Ayinag',255,65535,65535,4294967295,'\0','\0'),(4300,'Neipat',255,65535,65535,4294967295,'\0','\0'),(4301,'Oiysiriop',255,65535,65535,4294967295,'\0','\0'),(4302,'Miomipiurxo',255,65535,65535,4294967295,'\0','\0'),(4303,'Chaocsie',255,65535,65535,4294967295,'\0','\0'),(4304,'Imyrketap',255,65535,65535,4294967295,'\0','\0'),(4305,'Kamystnaery',255,65535,65535,4294967295,'\0','\0'),(4306,'Eris',255,65535,65535,4294967295,'\0','\0'),(4307,'Eguem',255,65535,65535,4294967295,'\0','\0'),(4308,'Plalyobiri',255,65535,65535,4294967295,'\0','\0'),(4309,'Oriqesitiry',255,65535,65535,4294967295,'\0','\0'),(4310,'Anyeuagoten',255,65535,65535,4294967295,'\0','\0'),(4311,'Tiregrayene',255,65535,65535,4294967295,'\0','\0'),(4312,'Bibaroe',255,65535,65535,4294967295,'\0','\0'),(4313,'Eanglestriab',255,65535,65535,4294967295,'\0','\0'),(4314,'Opidiogic',255,65535,65535,4294967295,'\0','\0'),(4315,'Loayipa',255,65535,65535,4294967295,'\0','\0'),(4316,'Iytonenaep',255,65535,65535,4294967295,'\0','\0'),(4317,'Atbori',255,65535,65535,4294967295,'\0','\0'),(4318,'Uromin',255,65535,65535,4294967295,'\0','\0'),(4319,'Duiorte',255,65535,65535,4294967295,'\0','\0'),(4320,'Othaiyae',255,65535,65535,4294967295,'\0','\0'),(4321,'Nouya',255,65535,65535,4294967295,'\0','\0'),(4322,'Laplei',255,65535,65535,4294967295,'\0','\0'),(4323,'Oatadolto',255,65535,65535,4294967295,'\0','\0'),(4324,'Taure',255,65535,65535,4294967295,'\0','\0'),(4325,'Ondeia',255,65535,65535,4294967295,'\0','\0'),(4326,'Olilinin',255,65535,65535,4294967295,'\0','\0'),(4327,'Geotliero',255,65535,65535,4294967295,'\0','\0'),(4328,'Andudaa',255,65535,65535,4294967295,'\0','\0'),(4329,'Yone',255,65535,65535,4294967295,'\0','\0'),(4330,'Eacho',255,65535,65535,4294967295,'\0','\0'),(4331,'Ataneni',255,65535,65535,4294967295,'\0','\0'),(4332,'Oucdreergra',255,65535,65535,4294967295,'\0','\0'),(4333,'Sogoistenesh',255,65535,65535,4294967295,'\0','\0'),(4334,'Emuogi',255,65535,65535,4294967295,'\0','\0'),(4335,'Rihiogiqy',255,65535,65535,4294967295,'\0','\0'),(4336,'Neoatlecreo',255,65535,65535,4294967295,'\0','\0'),(4337,'Igeolnei',255,65535,65535,4294967295,'\0','\0'),(4338,'Edmeoq',255,65535,65535,4294967295,'\0','\0'),(4339,'Ilyihi',255,65535,65535,4294967295,'\0','\0'),(4340,'Ameraon',255,65535,65535,4294967295,'\0','\0'),(4341,'Eyakeanytro',255,65535,65535,4294967295,'\0','\0'),(4342,'Niuio',255,65535,65535,4294967295,'\0','\0'),(4343,'Erdetoutme',255,65535,65535,4294967295,'\0','\0'),(4344,'Sutiroyaper',255,65535,65535,4294967295,'\0','\0'),(4345,'Raowola',255,65535,65535,4294967295,'\0','\0'),(4346,'Ifoliete',255,65535,65535,4294967295,'\0','\0'),(4347,'Fetaaeick',255,65535,65535,4294967295,'\0','\0'),(4348,'Coeromitbyar',255,65535,65535,4294967295,'\0','\0'),(4349,'Yoeisli',255,65535,65535,4294967295,'\0','\0'),(4350,'Naoshu',255,65535,65535,4294967295,'\0','\0'),(4351,'Isowpapeat',255,65535,65535,4294967295,'\0','\0'),(4352,'Ichi',255,65535,65535,4294967295,'\0','\0'),(4353,'Omgraeeda',255,65535,65535,4294967295,'\0','\0'),(4354,'Emiencoa',255,65535,65535,4294967295,'\0','\0'),(4355,'Apeondpe',255,65535,65535,4294967295,'\0','\0'),(4356,'Maoid',255,65535,65535,4294967295,'\0','\0'),(4357,'Ipwhoneelfsi',255,65535,65535,4294967295,'\0','\0'),(4358,'Coin',255,65535,65535,4294967295,'\0','\0'),(4359,'Eseiy',255,65535,65535,4294967295,'\0','\0'),(4360,'Aspa',255,65535,65535,4294967295,'\0','\0'),(4361,'Mala',255,65535,65535,4294967295,'\0','\0'),(4362,'Assug',255,65535,65535,4294967295,'\0','\0'),(4363,'Irircue',255,65535,65535,4294967295,'\0','\0'),(4364,'Roneod',255,65535,65535,4294967295,'\0','\0'),(4365,'Romepeeuno',255,65535,65535,4294967295,'\0','\0'),(4366,'Uroerkokri',255,65535,65535,4294967295,'\0','\0'),(4367,'Teadmaul',255,65535,65535,4294967295,'\0','\0'),(4368,'Aayovyyri',255,65535,65535,4294967295,'\0','\0'),(4369,'Chialupoogto',255,65535,65535,4294967295,'\0','\0'),(4370,'Engaobeat',255,65535,65535,4294967295,'\0','\0'),(4371,'Leonstuatin',255,65535,65535,4294967295,'\0','\0'),(4372,'Olisystredri',255,65535,65535,4294967295,'\0','\0'),(4373,'Ashiote',255,65535,65535,4294967295,'\0','\0'),(4374,'Asesmopuore',255,65535,65535,4294967295,'\0','\0'),(4375,'Capunaivarip',255,65535,65535,4294967295,'\0','\0'),(4376,'Sesce',255,65535,65535,4294967295,'\0','\0'),(4377,'Adteecoxi',255,65535,65535,4294967295,'\0','\0'),(4378,'Esepeyukaba',255,65535,65535,4294967295,'\0','\0'),(4379,'Ectalone',255,65535,65535,4294967295,'\0','\0'),(4380,'Uoychani',255,65535,65535,4294967295,'\0','\0'),(4381,'Ilaey',255,65535,65535,4294967295,'\0','\0'),(4382,'Ithapeyum',255,65535,65535,4294967295,'\0','\0'),(4383,'Necariys',255,65535,65535,4294967295,'\0','\0'),(4384,'Eeneroz',255,65535,65535,4294967295,'\0','\0'),(4385,'Gleyaagpibru',255,65535,65535,4294967295,'\0','\0'),(4386,'Eontaeoryo',255,65535,65535,4294967295,'\0','\0'),(4387,'Stuexildchy',255,65535,65535,4294967295,'\0','\0'),(4388,'Leodus',255,65535,65535,4294967295,'\0','\0'),(4389,'Erlayst',255,65535,65535,4294967295,'\0','\0'),(4390,'Eonion',255,65535,65535,4294967295,'\0','\0'),(4391,'Oycevieto',255,65535,65535,4294967295,'\0','\0'),(4392,'Onungloloom',255,65535,65535,4294967295,'\0','\0'),(4393,'Puabi',255,65535,65535,4294967295,'\0','\0'),(4394,'Mapoesiriv',255,65535,65535,4294967295,'\0','\0'),(4395,'Eootteo',255,65535,65535,4294967295,'\0','\0'),(4396,'Olesstritiao',255,65535,65535,4294967295,'\0','\0'),(4397,'Ianeing',255,65535,65535,4294967295,'\0','\0'),(4398,'Itetaent',255,65535,65535,4294967295,'\0','\0'),(4399,'Tyacaadi',255,65535,65535,4294967295,'\0','\0'),(4400,'Yeotfieo',255,65535,65535,4294967295,'\0','\0'),(4401,'Dezoarog',255,65535,65535,4294967295,'\0','\0'),(4402,'Eimiavasi',255,65535,65535,4294967295,'\0','\0'),(4403,'Opeiriaiz',255,65535,65535,4294967295,'\0','\0'),(4404,'Upooakalso',255,65535,65535,4294967295,'\0','\0'),(4405,'Erati',255,65535,65535,4294967295,'\0','\0'),(4406,'Aantake',255,65535,65535,4294967295,'\0','\0'),(4407,'Emena',255,65535,65535,4294967295,'\0','\0'),(4408,'Utgotreac',255,65535,65535,4294967295,'\0','\0'),(4409,'Laacacapdane',255,65535,65535,4294967295,'\0','\0'),(4410,'Iespuieh',255,65535,65535,4294967295,'\0','\0'),(4411,'Acyatiienthi',255,65535,65535,4294967295,'\0','\0'),(4412,'Rotrispuordy',255,65535,65535,4294967295,'\0','\0'),(4413,'Uaes',255,65535,65535,4294967295,'\0','\0'),(4414,'Itesoem',255,65535,65535,4294967295,'\0','\0'),(4415,'Oerpeost',255,65535,65535,4294967295,'\0','\0'),(4416,'Uduryfemo',255,65535,65535,4294967295,'\0','\0'),(4417,'Opaspuda',255,65535,65535,4294967295,'\0','\0'),(4418,'Yaintardepit',255,65535,65535,4294967295,'\0','\0'),(4419,'Irengu',255,65535,65535,4294967295,'\0','\0'),(4420,'Codyoesta',255,65535,65535,4294967295,'\0','\0'),(4421,'Reforuma',255,65535,65535,4294967295,'\0','\0'),(4422,'Yliacleite',255,65535,65535,4294967295,'\0','\0'),(4423,'Neya',255,65535,65535,4294967295,'\0','\0'),(4424,'Esidi',255,65535,65535,4294967295,'\0','\0'),(4425,'Opeseyay',255,65535,65535,4294967295,'\0','\0'),(4426,'Eber',255,65535,65535,4294967295,'\0','\0'),(4427,'Caeocse',255,65535,65535,4294967295,'\0','\0'),(4428,'Arowigdoseit',255,65535,65535,4294967295,'\0','\0'),(4429,'Onarueisel',255,65535,65535,4294967295,'\0','\0'),(4430,'Chuaereori',255,65535,65535,4294967295,'\0','\0'),(4431,'Diyeavi',255,65535,65535,4294967295,'\0','\0'),(4432,'Iche',255,65535,65535,4294967295,'\0','\0'),(4433,'Opyneoch',255,65535,65535,4294967295,'\0','\0'),(4434,'Ilteoede',255,65535,65535,4294967295,'\0','\0'),(4435,'Entialuidde',255,65535,65535,4294967295,'\0','\0'),(4436,'Aantichni',255,65535,65535,4294967295,'\0','\0'),(4437,'Ereckak',255,65535,65535,4294967295,'\0','\0'),(4438,'Eyoengnenoic',255,65535,65535,4294967295,'\0','\0'),(4439,'Oniwanoarko',255,65535,65535,4294967295,'\0','\0'),(4440,'Idne',255,65535,65535,4294967295,'\0','\0'),(4441,'Otpriolaical',255,65535,65535,4294967295,'\0','\0'),(4442,'Erdougipune',255,65535,65535,4294967295,'\0','\0'),(4443,'Oenooken',255,65535,65535,4294967295,'\0','\0'),(4444,'Anteotar',255,65535,65535,4294967295,'\0','\0'),(4445,'Ifigionvi',255,65535,65535,4294967295,'\0','\0'),(4446,'Yacaient',255,65535,65535,4294967295,'\0','\0'),(4447,'Ecmieourli',255,65535,65535,4294967295,'\0','\0'),(4448,'Eipein',255,65535,65535,4294967295,'\0','\0'),(4449,'Eiulian',255,65535,65535,4294967295,'\0','\0'),(4450,'Uceaycyu',255,65535,65535,4294967295,'\0','\0'),(4451,'Ahercaonspi',255,65535,65535,4294967295,'\0','\0'),(4452,'Apeno',255,65535,65535,4294967295,'\0','\0'),(4453,'Icathuniup',255,65535,65535,4294967295,'\0','\0'),(4454,'Ateog',255,65535,65535,4294967295,'\0','\0'),(4455,'Oteriatripi',255,65535,65535,4294967295,'\0','\0'),(4456,'Ehcity',255,65535,65535,4294967295,'\0','\0'),(4457,'Naiaf',255,65535,65535,4294967295,'\0','\0'),(4458,'Toihtelumla',255,65535,65535,4294967295,'\0','\0'),(4459,'Layie',255,65535,65535,4294967295,'\0','\0'),(4460,'Useli',255,65535,65535,4294967295,'\0','\0'),(4461,'Neoumpeiph',255,65535,65535,4294967295,'\0','\0'),(4462,'Oguibir',255,65535,65535,4294967295,'\0','\0'),(4463,'Yexororo',255,65535,65535,4294967295,'\0','\0'),(4464,'Erdeutnio',255,65535,65535,4294967295,'\0','\0'),(4465,'Libu',255,65535,65535,4294967295,'\0','\0'),(4466,'Iane',255,65535,65535,4294967295,'\0','\0'),(4467,'Fliow',255,65535,65535,4294967295,'\0','\0'),(4468,'Eckildoliem',255,65535,65535,4294967295,'\0','\0'),(4469,'Quizdiifest',255,65535,65535,4294967295,'\0','\0'),(4470,'Abniungbla',255,65535,65535,4294967295,'\0','\0'),(4471,'Biyaemtiu',255,65535,65535,4294967295,'\0','\0'),(4472,'Itermabofa',255,65535,65535,4294967295,'\0','\0'),(4473,'Fuybgoga',255,65535,65535,4294967295,'\0','\0'),(4474,'Aiichfu',255,65535,65535,4294967295,'\0','\0'),(4475,'Oecnirabe',255,65535,65535,4294967295,'\0','\0'),(4476,'Ynoiye',255,65535,65535,4294967295,'\0','\0'),(4477,'Foicaliz',255,65535,65535,4294967295,'\0','\0'),(4478,'Esiigubva',255,65535,65535,4294967295,'\0','\0'),(4479,'Yereraecde',255,65535,65535,4294967295,'\0','\0'),(4480,'Eleiseivi',255,65535,65535,4294967295,'\0','\0'),(4481,'Naaltaitokny',255,65535,65535,4294967295,'\0','\0'),(4482,'Ruraey',255,65535,65535,4294967295,'\0','\0'),(4483,'Ajslaipioin',255,65535,65535,4294967295,'\0','\0'),(4484,'Awonoele',255,65535,65535,4294967295,'\0','\0'),(4485,'Amuaklo',255,65535,65535,4294967295,'\0','\0'),(4486,'Erocaordio',255,65535,65535,4294967295,'\0','\0'),(4487,'Ethoasec',255,65535,65535,4294967295,'\0','\0'),(4488,'Preaismychi',255,65535,65535,4294967295,'\0','\0'),(4489,'Eraun',255,65535,65535,4294967295,'\0','\0'),(4490,'Deitaeathe',255,65535,65535,4294967295,'\0','\0'),(4491,'Soar',255,65535,65535,4294967295,'\0','\0'),(4492,'Atyheaphloi',255,65535,65535,4294967295,'\0','\0'),(4493,'Shoanerillny',255,65535,65535,4294967295,'\0','\0'),(4494,'Tosteyoi',255,65535,65535,4294967295,'\0','\0'),(4495,'Eyinomp',255,65535,65535,4294967295,'\0','\0'),(4496,'Viefla',255,65535,65535,4294967295,'\0','\0'),(4497,'Laadasta',255,65535,65535,4294967295,'\0','\0'),(4498,'Eayrcylord',255,65535,65535,4294967295,'\0','\0'),(4499,'Enaino',255,65535,65535,4294967295,'\0','\0'),(4500,'Yoiliul',255,65535,65535,4294967295,'\0','\0'),(4501,'Amlaeabli',255,65535,65535,4294967295,'\0','\0'),(4502,'Uglybio',255,65535,65535,4294967295,'\0','\0'),(4503,'Eerehboiloc',255,65535,65535,4294967295,'\0','\0'),(4504,'Ececheest',255,65535,65535,4294967295,'\0','\0'),(4505,'Uttbaelenu',255,65535,65535,4294967295,'\0','\0'),(4506,'Diadinopun',255,65535,65535,4294967295,'\0','\0'),(4507,'Ypmoaerkigay',255,65535,65535,4294967295,'\0','\0'),(4508,'Ebuisusi',255,65535,65535,4294967295,'\0','\0'),(4509,'Iupiato',255,65535,65535,4294967295,'\0','\0'),(4510,'Eiltupexi',255,65535,65535,4294967295,'\0','\0'),(4511,'Umutraaytemi',255,65535,65535,4294967295,'\0','\0'),(4512,'Atiseadenge',255,65535,65535,4294967295,'\0','\0'),(4513,'Ospu',255,65535,65535,4294967295,'\0','\0'),(4514,'Uantbrecla',255,65535,65535,4294967295,'\0','\0'),(4515,'Ungneetoetmu',255,65535,65535,4294967295,'\0','\0'),(4516,'Itrieem',255,65535,65535,4294967295,'\0','\0'),(4517,'Tauall',255,65535,65535,4294967295,'\0','\0'),(4518,'Oreshaortil',255,65535,65535,4294967295,'\0','\0'),(4519,'Oseode',255,65535,65535,4294967295,'\0','\0'),(4520,'Ciaemesi',255,65535,65535,4294967295,'\0','\0'),(4521,'Eriy',255,65535,65535,4294967295,'\0','\0'),(4522,'Erpite',255,65535,65535,4294967295,'\0','\0'),(4523,'Yepayaab',255,65535,65535,4294967295,'\0','\0'),(4524,'Oilae',255,65535,65535,4294967295,'\0','\0'),(4525,'Tyererharery',255,65535,65535,4294967295,'\0','\0'),(4526,'Techaogdi',255,65535,65535,4294967295,'\0','\0'),(4527,'Unieomea',255,65535,65535,4294967295,'\0','\0'),(4528,'Iyssaka',255,65535,65535,4294967295,'\0','\0'),(4529,'Aquyhreseof',255,65535,65535,4294967295,'\0','\0'),(4530,'Liayreinemi',255,65535,65535,4294967295,'\0','\0'),(4531,'Caefuver',255,65535,65535,4294967295,'\0','\0'),(4532,'Indabmioctea',255,65535,65535,4294967295,'\0','\0'),(4533,'Eatha',255,65535,65535,4294967295,'\0','\0'),(4534,'Raonabvio',255,65535,65535,4294967295,'\0','\0'),(4535,'Yuteerephe',255,65535,65535,4294967295,'\0','\0'),(4536,'Ugenlo',255,65535,65535,4294967295,'\0','\0'),(4537,'Aonlietib',255,65535,65535,4294967295,'\0','\0'),(4538,'Econaaej',255,65535,65535,4294967295,'\0','\0'),(4539,'Tumeisuath',255,65535,65535,4294967295,'\0','\0'),(4540,'Etmeasrineor',255,65535,65535,4294967295,'\0','\0'),(4541,'Moid',255,65535,65535,4294967295,'\0','\0'),(4542,'Haercaneluse',255,65535,65535,4294967295,'\0','\0'),(4543,'Otseby',255,65535,65535,4294967295,'\0','\0'),(4544,'Agihtazepis',255,65535,65535,4294967295,'\0','\0'),(4545,'Lyrideier',255,65535,65535,4294967295,'\0','\0'),(4546,'Sieitperi',255,65535,65535,4294967295,'\0','\0'),(4547,'Yaoenkve',255,65535,65535,4294967295,'\0','\0'),(4548,'Mitoot',255,65535,65535,4294967295,'\0','\0'),(4549,'Yoneapo',255,65535,65535,4294967295,'\0','\0'),(4550,'Choric',255,65535,65535,4294967295,'\0','\0'),(4551,'Ogumte',255,65535,65535,4294967295,'\0','\0'),(4552,'Sceno',255,65535,65535,4294967295,'\0','\0'),(4553,'Moau',255,65535,65535,4294967295,'\0','\0'),(4554,'Nebosnoenina',255,65535,65535,4294967295,'\0','\0'),(4555,'Iatumanie',255,65535,65535,4294967295,'\0','\0'),(4556,'Erotcosera',255,65535,65535,4294967295,'\0','\0'),(4557,'Giewarano',255,65535,65535,4294967295,'\0','\0'),(4558,'Esteimo',255,65535,65535,4294967295,'\0','\0'),(4559,'Umictisy',255,65535,65535,4294967295,'\0','\0'),(4560,'Epey',255,65535,65535,4294967295,'\0','\0'),(4561,'Enetre',255,65535,65535,4294967295,'\0','\0'),(4562,'Assiapeefta',255,65535,65535,4294967295,'\0','\0'),(4563,'Deata',255,65535,65535,4294967295,'\0','\0'),(4564,'Ogatapale',255,65535,65535,4294967295,'\0','\0'),(4565,'Tiov',255,65535,65535,4294967295,'\0','\0'),(4566,'Oddridyit',255,65535,65535,4294967295,'\0','\0'),(4567,'Voye',255,65535,65535,4294967295,'\0','\0'),(4568,'Poeika',255,65535,65535,4294967295,'\0','\0'),(4569,'Eyssai',255,65535,65535,4294967295,'\0','\0'),(4570,'Ehiuspyo',255,65535,65535,4294967295,'\0','\0'),(4571,'Ofaiea',255,65535,65535,4294967295,'\0','\0'),(4572,'Tyouambi',255,65535,65535,4294967295,'\0','\0'),(4573,'Eteingipry',255,65535,65535,4294967295,'\0','\0'),(4574,'Pieehreebu',255,65535,65535,4294967295,'\0','\0'),(4575,'Ipaienio',255,65535,65535,4294967295,'\0','\0'),(4576,'Phetoab',255,65535,65535,4294967295,'\0','\0'),(4577,'Milieraceno',255,65535,65535,4294967295,'\0','\0'),(4578,'Emacei',255,65535,65535,4294967295,'\0','\0'),(4579,'Eaybaopla',255,65535,65535,4294967295,'\0','\0'),(4580,'Otiind',255,65535,65535,4294967295,'\0','\0'),(4581,'Tiienotra',255,65535,65535,4294967295,'\0','\0'),(4582,'Oleffasidmau',255,65535,65535,4294967295,'\0','\0'),(4583,'Preinspatei',255,65535,65535,4294967295,'\0','\0'),(4584,'Isge',255,65535,65535,4294967295,'\0','\0'),(4585,'Iegauoi',255,65535,65535,4294967295,'\0','\0'),(4586,'Hemecocia',255,65535,65535,4294967295,'\0','\0'),(4587,'Ebaeper',255,65535,65535,4294967295,'\0','\0'),(4588,'Tyleteademo',255,65535,65535,4294967295,'\0','\0'),(4589,'Areil',255,65535,65535,4294967295,'\0','\0'),(4590,'Sporueaiqze',255,65535,65535,4294967295,'\0','\0'),(4591,'Angteine',255,65535,65535,4294967295,'\0','\0'),(4592,'Oroizyicaim',255,65535,65535,4294967295,'\0','\0'),(4593,'Pheieaht',255,65535,65535,4294967295,'\0','\0'),(4594,'Reulevein',255,65535,65535,4294967295,'\0','\0'),(4595,'Yukuecyac',255,65535,65535,4294967295,'\0','\0'),(4596,'Dioru',255,65535,65535,4294967295,'\0','\0'),(4597,'Gutoia',255,65535,65535,4294967295,'\0','\0'),(4598,'Ayadnanetru',255,65535,65535,4294967295,'\0','\0'),(4599,'Eyatabu',255,65535,65535,4294967295,'\0','\0'),(4600,'Tedhokeoal',255,65535,65535,4294967295,'\0','\0'),(4601,'Toerteake',255,65535,65535,4294967295,'\0','\0'),(4602,'Eomam',255,65535,65535,4294967295,'\0','\0'),(4603,'Croe',255,65535,65535,4294967295,'\0','\0'),(4604,'Yocaowur',255,65535,65535,4294967295,'\0','\0'),(4605,'Raivue',255,65535,65535,4294967295,'\0','\0'),(4606,'Umoboce',255,65535,65535,4294967295,'\0','\0'),(4607,'Egerpoayon',255,65535,65535,4294967295,'\0','\0'),(4608,'Iaolchoea',255,65535,65535,4294967295,'\0','\0'),(4609,'Oatriu',255,65535,65535,4294967295,'\0','\0'),(4610,'Asheyetaist',255,65535,65535,4294967295,'\0','\0'),(4611,'Aruaodbo',255,65535,65535,4294967295,'\0','\0'),(4612,'Utoyones',255,65535,65535,4294967295,'\0','\0'),(4613,'Aaseic',255,65535,65535,4294967295,'\0','\0'),(4614,'Tyeutoabro',255,65535,65535,4294967295,'\0','\0'),(4615,'Eraacoyagra',255,65535,65535,4294967295,'\0','\0'),(4616,'Fluyot',255,65535,65535,4294967295,'\0','\0'),(4617,'Eyunt',255,65535,65535,4294967295,'\0','\0'),(4618,'Umacpiflioli',255,65535,65535,4294967295,'\0','\0'),(4619,'Ismeteosm',255,65535,65535,4294967295,'\0','\0'),(4620,'Teaayo',255,65535,65535,4294967295,'\0','\0'),(4621,'Clatinuphiv',255,65535,65535,4294967295,'\0','\0'),(4622,'Phevaorase',255,65535,65535,4294967295,'\0','\0'),(4623,'Ivaliflaotre',255,65535,65535,4294967295,'\0','\0'),(4624,'Iaoiha',255,65535,65535,4294967295,'\0','\0'),(4625,'Reochade',255,65535,65535,4294967295,'\0','\0'),(4626,'Odoper',255,65535,65535,4294967295,'\0','\0'),(4627,'Inidgaodse',255,65535,65535,4294967295,'\0','\0'),(4628,'Izoeabadam',255,65535,65535,4294967295,'\0','\0'),(4629,'Niaogrier',255,65535,65535,4294967295,'\0','\0'),(4630,'Frecoepopo',255,65535,65535,4294967295,'\0','\0'),(4631,'Titaiisonat',255,65535,65535,4294967295,'\0','\0'),(4632,'Bieyacolian',255,65535,65535,4294967295,'\0','\0'),(4633,'Equis',255,65535,65535,4294967295,'\0','\0'),(4634,'Whejuid',255,65535,65535,4294967295,'\0','\0'),(4635,'Apagetri',255,65535,65535,4294967295,'\0','\0'),(4636,'Afliad',255,65535,65535,4294967295,'\0','\0'),(4637,'Oaespalomi',255,65535,65535,4294967295,'\0','\0'),(4638,'Efilothootre',255,65535,65535,4294967295,'\0','\0'),(4639,'Yawehomisail',255,65535,65535,4294967295,'\0','\0'),(4640,'Emsivofo',255,65535,65535,4294967295,'\0','\0'),(4641,'Pacaeeo',255,65535,65535,4294967295,'\0','\0'),(4642,'Ynehiudsu',255,65535,65535,4294967295,'\0','\0'),(4643,'Erly',255,65535,65535,4294967295,'\0','\0'),(4644,'Saifisicve',255,65535,65535,4294967295,'\0','\0'),(4645,'Eaadmi',255,65535,65535,4294967295,'\0','\0'),(4646,'Smiohao',255,65535,65535,4294967295,'\0','\0'),(4647,'Yebireufune',255,65535,65535,4294967295,'\0','\0'),(4648,'Tyneeing',255,65535,65535,4294967295,'\0','\0'),(4649,'Eewonce',255,65535,65535,4294967295,'\0','\0'),(4650,'Eretiecki',255,65535,65535,4294967295,'\0','\0'),(4651,'Nihiadeiv',255,65535,65535,4294967295,'\0','\0'),(4652,'Ipuowilamar',255,65535,65535,4294967295,'\0','\0'),(4653,'Aeaiza',255,65535,65535,4294967295,'\0','\0'),(4654,'Aiasei',255,65535,65535,4294967295,'\0','\0'),(4655,'Enean',255,65535,65535,4294967295,'\0','\0'),(4656,'Rauogheyau',255,65535,65535,4294967295,'\0','\0'),(4657,'Awcha',255,65535,65535,4294967295,'\0','\0'),(4658,'Coong',255,65535,65535,4294967295,'\0','\0'),(4659,'Ugieulraer',255,65535,65535,4294967295,'\0','\0'),(4660,'Seowreupei',255,65535,65535,4294967295,'\0','\0'),(4661,'Orul',255,65535,65535,4294967295,'\0','\0'),(4662,'Lanyfi',255,65535,65535,4294967295,'\0','\0'),(4663,'Ionukagh',255,65535,65535,4294967295,'\0','\0'),(4664,'Nisneiry',255,65535,65535,4294967295,'\0','\0'),(4665,'Ratisiodon',255,65535,65535,4294967295,'\0','\0'),(4666,'Alpoeny',255,65535,65535,4294967295,'\0','\0'),(4667,'Aerimacit',255,65535,65535,4294967295,'\0','\0'),(4668,'Ryfliind',255,65535,65535,4294967295,'\0','\0'),(4669,'Rameitalfona',255,65535,65535,4294967295,'\0','\0'),(4670,'Norina',255,65535,65535,4294967295,'\0','\0'),(4671,'Yitrewaam',255,65535,65535,4294967295,'\0','\0'),(4672,'Afligefipo',255,65535,65535,4294967295,'\0','\0'),(4673,'Isesyeezsho',255,65535,65535,4294967295,'\0','\0'),(4674,'Gelouowix',255,65535,65535,4294967295,'\0','\0'),(4675,'Aayrinanie',255,65535,65535,4294967295,'\0','\0'),(4676,'Yaad',255,65535,65535,4294967295,'\0','\0'),(4677,'Elereneprani',255,65535,65535,4294967295,'\0','\0'),(4678,'Ithreupanuno',255,65535,65535,4294967295,'\0','\0'),(4679,'Ilyisyri',255,65535,65535,4294967295,'\0','\0'),(4680,'Oapo',255,65535,65535,4294967295,'\0','\0'),(4681,'Oifseto',255,65535,65535,4294967295,'\0','\0'),(4682,'Ohichor',255,65535,65535,4294967295,'\0','\0'),(4683,'Stiiroke',255,65535,65535,4294967295,'\0','\0'),(4684,'Ozbyramiyu',255,65535,65535,4294967295,'\0','\0'),(4685,'Aexneiychwa',255,65535,65535,4294967295,'\0','\0'),(4686,'Ecte',255,65535,65535,4294967295,'\0','\0'),(4687,'Yoreaksuoraf',255,65535,65535,4294967295,'\0','\0'),(4688,'Eobeane',255,65535,65535,4294967295,'\0','\0'),(4689,'Neetiyoodje',255,65535,65535,4294967295,'\0','\0'),(4690,'Efanabiopho',255,65535,65535,4294967295,'\0','\0'),(4691,'Keesiri',255,65535,65535,4294967295,'\0','\0'),(4692,'Viiang',255,65535,65535,4294967295,'\0','\0'),(4693,'Yaspebies',255,65535,65535,4294967295,'\0','\0'),(4694,'Omer',255,65535,65535,4294967295,'\0','\0'),(4695,'Natii',255,65535,65535,4294967295,'\0','\0'),(4696,'Nohuinio',255,65535,65535,4294967295,'\0','\0'),(4697,'Uvrayigechi',255,65535,65535,4294967295,'\0','\0'),(4698,'Tusaki',255,65535,65535,4294967295,'\0','\0'),(4699,'Iuetecu',255,65535,65535,4294967295,'\0','\0'),(4700,'Acroos',255,65535,65535,4294967295,'\0','\0'),(4701,'Icteca',255,65535,65535,4294967295,'\0','\0'),(4702,'Atokosawglo',255,65535,65535,4294967295,'\0','\0'),(4703,'Into',255,65535,65535,4294967295,'\0','\0'),(4704,'Obim',255,65535,65535,4294967295,'\0','\0'),(4705,'Udangatomiij',255,65535,65535,4294967295,'\0','\0'),(4706,'Oheonsoh',255,65535,65535,4294967295,'\0','\0'),(4707,'Abeacherea',255,65535,65535,4294967295,'\0','\0'),(4708,'Nearnte',255,65535,65535,4294967295,'\0','\0'),(4709,'Ussomiscoeh',255,65535,65535,4294967295,'\0','\0'),(4710,'Iolumeole',255,65535,65535,4294967295,'\0','\0'),(4711,'Eiurarai',255,65535,65535,4294967295,'\0','\0'),(4712,'Owvieminrom',255,65535,65535,4294967295,'\0','\0'),(4713,'Lial',255,65535,65535,4294967295,'\0','\0'),(4714,'Ninoeurru',255,65535,65535,4294967295,'\0','\0'),(4715,'Reyntyooe',255,65535,65535,4294967295,'\0','\0'),(4716,'Aesi',255,65535,65535,4294967295,'\0','\0'),(4717,'Ayoig',255,65535,65535,4294967295,'\0','\0'),(4718,'Pristro',255,65535,65535,4294967295,'\0','\0'),(4719,'Apaesge',255,65535,65535,4294967295,'\0','\0'),(4720,'Ilisechonebu',255,65535,65535,4294967295,'\0','\0'),(4721,'Ascakyi',255,65535,65535,4294967295,'\0','\0'),(4722,'Yhto',255,65535,65535,4294967295,'\0','\0'),(4723,'Froackne',255,65535,65535,4294967295,'\0','\0'),(4724,'Isesedtre',255,65535,65535,4294967295,'\0','\0'),(4725,'Swuatit',255,65535,65535,4294967295,'\0','\0'),(4726,'Fluais',255,65535,65535,4294967295,'\0','\0'),(4727,'Lieiri',255,65535,65535,4294967295,'\0','\0'),(4728,'Ucto',255,65535,65535,4294967295,'\0','\0'),(4729,'Ongaet',255,65535,65535,4294967295,'\0','\0'),(4730,'Recoepcoe',255,65535,65535,4294967295,'\0','\0'),(4731,'Eoiupe',255,65535,65535,4294967295,'\0','\0'),(4732,'Siboienni',255,65535,65535,4294967295,'\0','\0'),(4733,'Raeiga',255,65535,65535,4294967295,'\0','\0'),(4734,'Ioteo',255,65535,65535,4294967295,'\0','\0'),(4735,'Urespis',255,65535,65535,4294967295,'\0','\0'),(4736,'Upiatro',255,65535,65535,4294967295,'\0','\0'),(4737,'Gepaiotino',255,65535,65535,4294967295,'\0','\0'),(4738,'Knejuatlus',255,65535,65535,4294967295,'\0','\0'),(4739,'Atescatopa',255,65535,65535,4294967295,'\0','\0'),(4740,'Enerioce',255,65535,65535,4294967295,'\0','\0'),(4741,'Ugorinort',255,65535,65535,4294967295,'\0','\0'),(4742,'Oysti',255,65535,65535,4294967295,'\0','\0'),(4743,'Avee',255,65535,65535,4294967295,'\0','\0'),(4744,'Eniubadatey',255,65535,65535,4294967295,'\0','\0'),(4745,'Hefreisak',255,65535,65535,4294967295,'\0','\0'),(4746,'Elvesi',255,65535,65535,4294967295,'\0','\0'),(4747,'Enokeaed',255,65535,65535,4294967295,'\0','\0'),(4748,'Itcha',255,65535,65535,4294967295,'\0','\0'),(4749,'Ivati',255,65535,65535,4294967295,'\0','\0'),(4750,'Orewrinte',255,65535,65535,4294967295,'\0','\0'),(4751,'Iasebiarm',255,65535,65535,4294967295,'\0','\0'),(4752,'Aniesionbo',255,65535,65535,4294967295,'\0','\0'),(4753,'Arusun',255,65535,65535,4294967295,'\0','\0'),(4754,'Iarheioe',255,65535,65535,4294967295,'\0','\0'),(4755,'Ichotiold',255,65535,65535,4294967295,'\0','\0'),(4756,'Prareypmari',255,65535,65535,4294967295,'\0','\0'),(4757,'Sqiemkyigen',255,65535,65535,4294967295,'\0','\0'),(4758,'Astriowciam',255,65535,65535,4294967295,'\0','\0'),(4759,'Aulossicue',255,65535,65535,4294967295,'\0','\0'),(4760,'Aroin',255,65535,65535,4294967295,'\0','\0'),(4761,'Teoyeatequm',255,65535,65535,4294967295,'\0','\0'),(4762,'Triertoinap',255,65535,65535,4294967295,'\0','\0'),(4763,'Utedlu',255,65535,65535,4294967295,'\0','\0'),(4764,'Nereoiiv',255,65535,65535,4294967295,'\0','\0'),(4765,'Yaitli',255,65535,65535,4294967295,'\0','\0'),(4766,'Naiut',255,65535,65535,4294967295,'\0','\0'),(4767,'Uceproehip',255,65535,65535,4294967295,'\0','\0'),(4768,'Abal',255,65535,65535,4294967295,'\0','\0'),(4769,'Eranruomin',255,65535,65535,4294967295,'\0','\0'),(4770,'Apariselaec',255,65535,65535,4294967295,'\0','\0'),(4771,'Suyoeman',255,65535,65535,4294967295,'\0','\0'),(4772,'Isontbeapung',255,65535,65535,4294967295,'\0','\0'),(4773,'Elspie',255,65535,65535,4294967295,'\0','\0'),(4774,'Yenze',255,65535,65535,4294967295,'\0','\0'),(4775,'Isicypoto',255,65535,65535,4294967295,'\0','\0'),(4776,'Ameketiaam',255,65535,65535,4294967295,'\0','\0'),(4777,'Isalpo',255,65535,65535,4294967295,'\0','\0'),(4778,'Tienkeatse',255,65535,65535,4294967295,'\0','\0'),(4779,'Ubutarahafja',255,65535,65535,4294967295,'\0','\0'),(4780,'Nasioayonad',255,65535,65535,4294967295,'\0','\0'),(4781,'Iniuini',255,65535,65535,4294967295,'\0','\0'),(4782,'Miofroneab',255,65535,65535,4294967295,'\0','\0'),(4783,'Flamakeor',255,65535,65535,4294967295,'\0','\0'),(4784,'Edydriuucho',255,65535,65535,4294967295,'\0','\0'),(4785,'Tuipentribly',255,65535,65535,4294967295,'\0','\0'),(4786,'Edreyrispeul',255,65535,65535,4294967295,'\0','\0'),(4787,'Untieup',255,65535,65535,4294967295,'\0','\0'),(4788,'Eseblioinso',255,65535,65535,4294967295,'\0','\0'),(4789,'Itieressca',255,65535,65535,4294967295,'\0','\0'),(4790,'Umnoave',255,65535,65535,4294967295,'\0','\0'),(4791,'Eucymywa',255,65535,65535,4294967295,'\0','\0'),(4792,'Uthoeser',255,65535,65535,4294967295,'\0','\0'),(4793,'Escoyeyie',255,65535,65535,4294967295,'\0','\0'),(4794,'Loyamuperi',255,65535,65535,4294967295,'\0','\0'),(4795,'Ieromalwie',255,65535,65535,4294967295,'\0','\0'),(4796,'Icaed',255,65535,65535,4294967295,'\0','\0'),(4797,'Sageiopri',255,65535,65535,4294967295,'\0','\0'),(4798,'Speureru',255,65535,65535,4294967295,'\0','\0'),(4799,'Ytinesa',255,65535,65535,4294967295,'\0','\0'),(4800,'Ianineie',255,65535,65535,4294967295,'\0','\0'),(4801,'Oniyakecreal',255,65535,65535,4294967295,'\0','\0'),(4802,'Ickneocgeic',255,65535,65535,4294967295,'\0','\0'),(4803,'Ovoztinitire',255,65535,65535,4294967295,'\0','\0'),(4804,'Ebaniyodoat',255,65535,65535,4294967295,'\0','\0'),(4805,'Nueremaent',255,65535,65535,4294967295,'\0','\0'),(4806,'Oinankyaet',255,65535,65535,4294967295,'\0','\0'),(4807,'Eodcaro',255,65535,65535,4294967295,'\0','\0'),(4808,'Thatat',255,65535,65535,4294967295,'\0','\0'),(4809,'Eoistofa',255,65535,65535,4294967295,'\0','\0'),(4810,'Igniatildat',255,65535,65535,4294967295,'\0','\0'),(4811,'Qureki',255,65535,65535,4294967295,'\0','\0'),(4812,'Onrenefe',255,65535,65535,4294967295,'\0','\0'),(4813,'Noelalopois',255,65535,65535,4294967295,'\0','\0'),(4814,'Ceongbeilvei',255,65535,65535,4294967295,'\0','\0'),(4815,'Abcora',255,65535,65535,4294967295,'\0','\0'),(4816,'Hiilboa',255,65535,65535,4294967295,'\0','\0'),(4817,'Urellinismip',255,65535,65535,4294967295,'\0','\0'),(4818,'Museahtimiat',255,65535,65535,4294967295,'\0','\0'),(4819,'Edtroina',255,65535,65535,4294967295,'\0','\0'),(4820,'Yitauy',255,65535,65535,4294967295,'\0','\0'),(4821,'Pidi',255,65535,65535,4294967295,'\0','\0'),(4822,'Uotol',255,65535,65535,4294967295,'\0','\0'),(4823,'Ataondduort',255,65535,65535,4294967295,'\0','\0'),(4824,'Orteshayo',255,65535,65535,4294967295,'\0','\0'),(4825,'Aterrene',255,65535,65535,4294967295,'\0','\0'),(4826,'Peibascanir',255,65535,65535,4294967295,'\0','\0'),(4827,'Earala',255,65535,65535,4294967295,'\0','\0'),(4828,'Iratoelei',255,65535,65535,4294967295,'\0','\0'),(4829,'Oireivtou',255,65535,65535,4294967295,'\0','\0'),(4830,'Iceou',255,65535,65535,4294967295,'\0','\0'),(4831,'Urlu',255,65535,65535,4294967295,'\0','\0'),(4832,'Esaotou',255,65535,65535,4294967295,'\0','\0'),(4833,'Ubugeteai',255,65535,65535,4294967295,'\0','\0'),(4834,'Neranone',255,65535,65535,4294967295,'\0','\0'),(4835,'Neeonuniyu',255,65535,65535,4294967295,'\0','\0'),(4836,'Enfreoncoer',255,65535,65535,4294967295,'\0','\0'),(4837,'Scaov',255,65535,65535,4294967295,'\0','\0'),(4838,'Ruahha',255,65535,65535,4294967295,'\0','\0'),(4839,'Modealasud',255,65535,65535,4294967295,'\0','\0'),(4840,'Eiyaefay',255,65535,65535,4294967295,'\0','\0'),(4841,'Neanuuroat',255,65535,65535,4294967295,'\0','\0'),(4842,'Dalaahec',255,65535,65535,4294967295,'\0','\0'),(4843,'Ertenorutile',255,65535,65535,4294967295,'\0','\0'),(4844,'Tyaebun',255,65535,65535,4294967295,'\0','\0'),(4845,'Iospaose',255,65535,65535,4294967295,'\0','\0'),(4846,'Onuiubat',255,65535,65535,4294967295,'\0','\0'),(4847,'Dexiystuue',255,65535,65535,4294967295,'\0','\0'),(4848,'Rosareiit',255,65535,65535,4294967295,'\0','\0'),(4849,'Ocloekeuleh',255,65535,65535,4294967295,'\0','\0'),(4850,'Aeetarat',255,65535,65535,4294967295,'\0','\0'),(4851,'Vineeter',255,65535,65535,4294967295,'\0','\0'),(4852,'Flait',255,65535,65535,4294967295,'\0','\0'),(4853,'Inebra',255,65535,65535,4294967295,'\0','\0'),(4854,'Icoepeleu',255,65535,65535,4294967295,'\0','\0'),(4855,'Esieo',255,65535,65535,4294967295,'\0','\0'),(4856,'Etop',255,65535,65535,4294967295,'\0','\0'),(4857,'Ashe',255,65535,65535,4294967295,'\0','\0'),(4858,'Puitwetoiss',255,65535,65535,4294967295,'\0','\0'),(4859,'Itievdu',255,65535,65535,4294967295,'\0','\0'),(4860,'Ireheste',255,65535,65535,4294967295,'\0','\0'),(4861,'Aoiisuyty',255,65535,65535,4294967295,'\0','\0'),(4862,'Essuedalis',255,65535,65535,4294967295,'\0','\0'),(4863,'Ortiengese',255,65535,65535,4294967295,'\0','\0'),(4864,'Peiericora',255,65535,65535,4294967295,'\0','\0'),(4865,'Lispheomab',255,65535,65535,4294967295,'\0','\0'),(4866,'Iiopuleent',255,65535,65535,4294967295,'\0','\0'),(4867,'Soabneo',255,65535,65535,4294967295,'\0','\0'),(4868,'Auboh',255,65535,65535,4294967295,'\0','\0'),(4869,'Piua',255,65535,65535,4294967295,'\0','\0'),(4870,'Iormeloal',255,65535,65535,4294967295,'\0','\0'),(4871,'Maielele',255,65535,65535,4294967295,'\0','\0'),(4872,'Raiyen',255,65535,65535,4294967295,'\0','\0'),(4873,'Arbiired',255,65535,65535,4294967295,'\0','\0'),(4874,'Roat',255,65535,65535,4294967295,'\0','\0'),(4875,'Eacne',255,65535,65535,4294967295,'\0','\0'),(4876,'Reteseoldo',255,65535,65535,4294967295,'\0','\0'),(4877,'Mepeyeameog',255,65535,65535,4294967295,'\0','\0'),(4878,'Unompasyyno',255,65535,65535,4294967295,'\0','\0'),(4879,'Erble',255,65535,65535,4294967295,'\0','\0'),(4880,'Ueolu',255,65535,65535,4294967295,'\0','\0'),(4881,'Ingeongum',255,65535,65535,4294967295,'\0','\0'),(4882,'Yliaeytypu',255,65535,65535,4294967295,'\0','\0'),(4883,'Neakae',255,65535,65535,4294967295,'\0','\0'),(4884,'Ebeotines',255,65535,65535,4294967295,'\0','\0'),(4885,'Eyteisliu',255,65535,65535,4294967295,'\0','\0'),(4886,'Ereenientla',255,65535,65535,4294967295,'\0','\0'),(4887,'Onic',255,65535,65535,4294967295,'\0','\0'),(4888,'Essaicaonkba',255,65535,65535,4294967295,'\0','\0'),(4889,'Neibonyp',255,65535,65535,4294967295,'\0','\0'),(4890,'Peleraol',255,65535,65535,4294967295,'\0','\0'),(4891,'Rene',255,65535,65535,4294967295,'\0','\0'),(4892,'Rebleopda',255,65535,65535,4294967295,'\0','\0'),(4893,'Ebni',255,65535,65535,4294967295,'\0','\0'),(4894,'Phagere',255,65535,65535,4294967295,'\0','\0'),(4895,'Uenol',255,65535,65535,4294967295,'\0','\0'),(4896,'Mutiaamra',255,65535,65535,4294967295,'\0','\0'),(4897,'Topseiu',255,65535,65535,4294967295,'\0','\0'),(4898,'Iteary',255,65535,65535,4294967295,'\0','\0'),(4899,'Epeulutiof',255,65535,65535,4294967295,'\0','\0'),(4900,'Hoina',255,65535,65535,4294967295,'\0','\0'),(4901,'Onaloault',255,65535,65535,4294967295,'\0','\0'),(4902,'Itasa',255,65535,65535,4294967295,'\0','\0'),(4903,'Ononoesm',255,65535,65535,4294967295,'\0','\0'),(4904,'Nueonyh',255,65535,65535,4294967295,'\0','\0'),(4905,'Oakaladu',255,65535,65535,4294967295,'\0','\0'),(4906,'Iwkaiil',255,65535,65535,4294967295,'\0','\0'),(4907,'Astuedinktra',255,65535,65535,4294967295,'\0','\0'),(4908,'Yaoxpy',255,65535,65535,4294967295,'\0','\0'),(4909,'Ichaisi',255,65535,65535,4294967295,'\0','\0'),(4910,'Echeir',255,65535,65535,4294967295,'\0','\0'),(4911,'Imre',255,65535,65535,4294967295,'\0','\0'),(4912,'Traely',255,65535,65535,4294967295,'\0','\0'),(4913,'Ignoonimera',255,65535,65535,4294967295,'\0','\0'),(4914,'Retiseichbu',255,65535,65535,4294967295,'\0','\0'),(4915,'Seneemivsi',255,65535,65535,4294967295,'\0','\0'),(4916,'Efeatu',255,65535,65535,4294967295,'\0','\0'),(4917,'Aderyp',255,65535,65535,4294967295,'\0','\0'),(4918,'Ochirheydge',255,65535,65535,4294967295,'\0','\0'),(4919,'Ysseitvoel',255,65535,65535,4294967295,'\0','\0'),(4920,'Oyebe',255,65535,65535,4294967295,'\0','\0'),(4921,'Umesanereom',255,65535,65535,4294967295,'\0','\0'),(4922,'Onetoskiol',255,65535,65535,4294967295,'\0','\0'),(4923,'Evecheut',255,65535,65535,4294967295,'\0','\0'),(4924,'Aacospeeren',255,65535,65535,4294967295,'\0','\0'),(4925,'Eyoieoam',255,65535,65535,4294967295,'\0','\0'),(4926,'Atetra',255,65535,65535,4294967295,'\0','\0'),(4927,'Urovean',255,65535,65535,4294967295,'\0','\0'),(4928,'Omirititar',255,65535,65535,4294967295,'\0','\0'),(4929,'Reidotis',255,65535,65535,4294967295,'\0','\0'),(4930,'Uckto',255,65535,65535,4294967295,'\0','\0'),(4931,'Ullilamoie',255,65535,65535,4294967295,'\0','\0'),(4932,'Duteoniladi',255,65535,65535,4294967295,'\0','\0'),(4933,'Cheuooyower',255,65535,65535,4294967295,'\0','\0'),(4934,'Anieaas',255,65535,65535,4294967295,'\0','\0'),(4935,'Emunihateoh',255,65535,65535,4294967295,'\0','\0'),(4936,'Pudiilesok',255,65535,65535,4294967295,'\0','\0'),(4937,'Ocswo',255,65535,65535,4294967295,'\0','\0'),(4938,'Tiorcoontty',255,65535,65535,4294967295,'\0','\0'),(4939,'Neigusu',255,65535,65535,4294967295,'\0','\0'),(4940,'Umoipeti',255,65535,65535,4294967295,'\0','\0'),(4941,'Asnuoro',255,65535,65535,4294967295,'\0','\0'),(4942,'Aladkiar',255,65535,65535,4294967295,'\0','\0'),(4943,'Istieyanal',255,65535,65535,4294967295,'\0','\0'),(4944,'Alildamee',255,65535,65535,4294967295,'\0','\0'),(4945,'Ucdaigroor',255,65535,65535,4294967295,'\0','\0'),(4946,'Ridaei',255,65535,65535,4294967295,'\0','\0'),(4947,'Iroabrega',255,65535,65535,4294967295,'\0','\0'),(4948,'Snuhataatugh',255,65535,65535,4294967295,'\0','\0'),(4949,'Etatessoani',255,65535,65535,4294967295,'\0','\0'),(4950,'Ortponare',255,65535,65535,4294967295,'\0','\0'),(4951,'Aterliyermno',255,65535,65535,4294967295,'\0','\0'),(4952,'Edwineibuti',255,65535,65535,4294967295,'\0','\0'),(4953,'Yumeon',255,65535,65535,4294967295,'\0','\0'),(4954,'Abloyg',255,65535,65535,4294967295,'\0','\0'),(4955,'Raeol',255,65535,65535,4294967295,'\0','\0'),(4956,'Usisle',255,65535,65535,4294967295,'\0','\0'),(4957,'Eroguo',255,65535,65535,4294967295,'\0','\0'),(4958,'Omereyhosti',255,65535,65535,4294967295,'\0','\0'),(4959,'Noardaeth',255,65535,65535,4294967295,'\0','\0'),(4960,'Atsciriye',255,65535,65535,4294967295,'\0','\0'),(4961,'Oere',255,65535,65535,4294967295,'\0','\0'),(4962,'Usieyeier',255,65535,65535,4294967295,'\0','\0'),(4963,'Yehe',255,65535,65535,4294967295,'\0','\0'),(4964,'Rayoreme',255,65535,65535,4294967295,'\0','\0'),(4965,'Aieoul',255,65535,65535,4294967295,'\0','\0'),(4966,'Ormomiis',255,65535,65535,4294967295,'\0','\0'),(4967,'Oeyrii',255,65535,65535,4294967295,'\0','\0'),(4968,'Ancuem',255,65535,65535,4294967295,'\0','\0'),(4969,'Ayewluaikit',255,65535,65535,4294967295,'\0','\0'),(4970,'Inincatpre',255,65535,65535,4294967295,'\0','\0'),(4971,'Idraena',255,65535,65535,4294967295,'\0','\0'),(4972,'Nicagaythea',255,65535,65535,4294967295,'\0','\0'),(4973,'Eyebacka',255,65535,65535,4294967295,'\0','\0'),(4974,'Pyiesmi',255,65535,65535,4294967295,'\0','\0'),(4975,'Eoxavbraa',255,65535,65535,4294967295,'\0','\0'),(4976,'Usswi',255,65535,65535,4294967295,'\0','\0'),(4977,'Epdepone',255,65535,65535,4294967295,'\0','\0'),(4978,'Erissiute',255,65535,65535,4294967295,'\0','\0'),(4979,'Odilone',255,65535,65535,4294967295,'\0','\0'),(4980,'Tieresro',255,65535,65535,4294967295,'\0','\0'),(4981,'Gusawoleime',255,65535,65535,4294967295,'\0','\0'),(4982,'Etai',255,65535,65535,4294967295,'\0','\0'),(4983,'Ewco',255,65535,65535,4294967295,'\0','\0'),(4984,'Enproty',255,65535,65535,4294967295,'\0','\0'),(4985,'Isabetaeomp',255,65535,65535,4294967295,'\0','\0'),(4986,'Yeulacnousis',255,65535,65535,4294967295,'\0','\0'),(4987,'Alatiayoyre',255,65535,65535,4294967295,'\0','\0'),(4988,'Speatog',255,65535,65535,4294967295,'\0','\0'),(4989,'Igeitait',255,65535,65535,4294967295,'\0','\0'),(4990,'Iisseartfe',255,65535,65535,4294967295,'\0','\0'),(4991,'Eryeiad',255,65535,65535,4294967295,'\0','\0'),(4992,'Gianebois',255,65535,65535,4294967295,'\0','\0'),(4993,'Keabicroo',255,65535,65535,4294967295,'\0','\0'),(4994,'Ynitdolufne',255,65535,65535,4294967295,'\0','\0'),(4995,'Yanispe',255,65535,65535,4294967295,'\0','\0'),(4996,'Ecagte',255,65535,65535,4294967295,'\0','\0'),(4997,'Noriefuonva',255,65535,65535,4294967295,'\0','\0'),(4998,'Gieresocca',255,65535,65535,4294967295,'\0','\0'),(4999,'Acembev',255,65535,65535,4294967295,'\0','\0'),(5000,'Oesheecuthir',255,65535,65535,4294967295,'\0','\0'),(5001,'Gruionitvu',255,65535,65535,4294967295,'\0','\0'),(5002,'Eayerter',255,65535,65535,4294967295,'\0','\0'),(5003,'Eongicee',255,65535,65535,4294967295,'\0','\0'),(5004,'Alpoyra',255,65535,65535,4294967295,'\0','\0'),(5005,'Oeromli',255,65535,65535,4294967295,'\0','\0'),(5006,'Fepeaim',255,65535,65535,4294967295,'\0','\0'),(5007,'Ilraorish',255,65535,65535,4294967295,'\0','\0'),(5008,'Essoakspee',255,65535,65535,4294967295,'\0','\0'),(5009,'Abodligaab',255,65535,65535,4294967295,'\0','\0'),(5010,'Yriitbroig',255,65535,65535,4294967295,'\0','\0'),(5011,'Elyecri',255,65535,65535,4294967295,'\0','\0'),(5012,'Antedog',255,65535,65535,4294967295,'\0','\0'),(5013,'Buowatne',255,65535,65535,4294967295,'\0','\0'),(5014,'Ecliiweni',255,65535,65535,4294967295,'\0','\0'),(5015,'Erin',255,65535,65535,4294967295,'\0','\0'),(5016,'Shoeaort',255,65535,65535,4294967295,'\0','\0'),(5017,'Onindseost',255,65535,65535,4294967295,'\0','\0'),(5018,'Asioder',255,65535,65535,4294967295,'\0','\0'),(5019,'Ismoa',255,65535,65535,4294967295,'\0','\0'),(5020,'Otela',255,65535,65535,4294967295,'\0','\0'),(5021,'Rerguyauf',255,65535,65535,4294967295,'\0','\0'),(5022,'Toaudyaon',255,65535,65535,4294967295,'\0','\0'),(5023,'Tinoayra',255,65535,65535,4294967295,'\0','\0'),(5024,'Tyne',255,65535,65535,4294967295,'\0','\0'),(5025,'Caiddufoaba',255,65535,65535,4294967295,'\0','\0'),(5026,'Roay',255,65535,65535,4294967295,'\0','\0'),(5027,'Pearisy',255,65535,65535,4294967295,'\0','\0'),(5028,'Cheanamudio',255,65535,65535,4294967295,'\0','\0'),(5029,'Copriumirn',255,65535,65535,4294967295,'\0','\0'),(5030,'Lyfieaef',255,65535,65535,4294967295,'\0','\0'),(5031,'Loeypeitrio',255,65535,65535,4294967295,'\0','\0'),(5032,'Trionto',255,65535,65535,4294967295,'\0','\0'),(5033,'User',255,65535,65535,4294967295,'\0','\0'),(5034,'Asalxan',255,65535,65535,4294967295,'\0','\0'),(5035,'Itewokiachar',255,65535,65535,4294967295,'\0','\0'),(5036,'Xiye',255,65535,65535,4294967295,'\0','\0'),(5037,'Cotyniivle',255,65535,65535,4294967295,'\0','\0'),(5038,'Trap',255,65535,65535,4294967295,'\0','\0'),(5039,'Neantro',255,65535,65535,4294967295,'\0','\0'),(5040,'Oliteir',255,65535,65535,4294967295,'\0','\0'),(5041,'Utrour',255,65535,65535,4294967295,'\0','\0'),(5042,'Iplieiwa',255,65535,65535,4294967295,'\0','\0'),(5043,'Ichiteidarom',255,65535,65535,4294967295,'\0','\0'),(5044,'Eryeatnaoyis',255,65535,65535,4294967295,'\0','\0'),(5045,'Slyoaboli',255,65535,65535,4294967295,'\0','\0'),(5046,'Echesianyo',255,65535,65535,4294967295,'\0','\0'),(5047,'Stira',255,65535,65535,4294967295,'\0','\0'),(5048,'Itopayide',255,65535,65535,4294967295,'\0','\0'),(5049,'Omiee',255,65535,65535,4294967295,'\0','\0'),(5050,'Veuckbo',255,65535,65535,4294967295,'\0','\0'),(5051,'Eman',255,65535,65535,4294967295,'\0','\0'),(5052,'Eatsha',255,65535,65535,4294967295,'\0','\0'),(5053,'Oldearyb',255,65535,65535,4294967295,'\0','\0'),(5054,'Eorsku',255,65535,65535,4294967295,'\0','\0'),(5055,'Titeostilo',255,65535,65535,4294967295,'\0','\0'),(5056,'Esagugaer',255,65535,65535,4294967295,'\0','\0'),(5057,'Anoimeya',255,65535,65535,4294967295,'\0','\0'),(5058,'Roescrieloa',255,65535,65535,4294967295,'\0','\0'),(5059,'Eiminosyty',255,65535,65535,4294967295,'\0','\0'),(5060,'Erdre',255,65535,65535,4294967295,'\0','\0'),(5061,'Meamti',255,65535,65535,4294967295,'\0','\0'),(5062,'Laiigeati',255,65535,65535,4294967295,'\0','\0'),(5063,'Afquyeseeyce',255,65535,65535,4294967295,'\0','\0'),(5064,'Icaikriemat',255,65535,65535,4294967295,'\0','\0'),(5065,'Alku',255,65535,65535,4294967295,'\0','\0'),(5066,'Opiaal',255,65535,65535,4294967295,'\0','\0'),(5067,'Freaeu',255,65535,65535,4294967295,'\0','\0'),(5068,'Striolgo',255,65535,65535,4294967295,'\0','\0'),(5069,'Edaitit',255,65535,65535,4294967295,'\0','\0'),(5070,'Iveli',255,65535,65535,4294967295,'\0','\0'),(5071,'Iturike',255,65535,65535,4294967295,'\0','\0'),(5072,'Raire',255,65535,65535,4294967295,'\0','\0'),(5073,'Wieedadie',255,65535,65535,4294967295,'\0','\0'),(5074,'Aclicluo',255,65535,65535,4294967295,'\0','\0'),(5075,'Zeriurimesse',255,65535,65535,4294967295,'\0','\0'),(5076,'Acistag',255,65535,65535,4294967295,'\0','\0'),(5077,'Atbeicep',255,65535,65535,4294967295,'\0','\0'),(5078,'Aperdidopri',255,65535,65535,4294967295,'\0','\0'),(5079,'Rinelaroye',255,65535,65535,4294967295,'\0','\0'),(5080,'Aibyfiley',255,65535,65535,4294967295,'\0','\0'),(5081,'Aafliadcee',255,65535,65535,4294967295,'\0','\0'),(5082,'Otyoetu',255,65535,65535,4294967295,'\0','\0'),(5083,'Crebesiiu',255,65535,65535,4294967295,'\0','\0'),(5084,'Eraenig',255,65535,65535,4294967295,'\0','\0'),(5085,'Ajec',255,65535,65535,4294967295,'\0','\0'),(5086,'Yinesespo',255,65535,65535,4294967295,'\0','\0'),(5087,'Galacaamtei',255,65535,65535,4294967295,'\0','\0'),(5088,'Reruglu',255,65535,65535,4294967295,'\0','\0'),(5089,'Adanoybwai',255,65535,65535,4294967295,'\0','\0'),(5090,'Wilenuisi',255,65535,65535,4294967295,'\0','\0'),(5091,'Oecy',255,65535,65535,4294967295,'\0','\0'),(5092,'Ioyandyie',255,65535,65535,4294967295,'\0','\0'),(5093,'Retroalra',255,65535,65535,4294967295,'\0','\0'),(5094,'Okeno',255,65535,65535,4294967295,'\0','\0'),(5095,'Trepialu',255,65535,65535,4294967295,'\0','\0'),(5096,'Erala',255,65535,65535,4294967295,'\0','\0'),(5097,'Eevoemriel',255,65535,65535,4294967295,'\0','\0'),(5098,'Afiicariig',255,65535,65535,4294967295,'\0','\0'),(5099,'Liirabru',255,65535,65535,4294967295,'\0','\0'),(5100,'Opti',255,65535,65535,4294967295,'\0','\0'),(5101,'Tacceise',255,65535,65535,4294967295,'\0','\0'),(5102,'Olrea',255,65535,65535,4294967295,'\0','\0'),(5103,'Onig',255,65535,65535,4294967295,'\0','\0'),(5104,'Ifyetriroe',255,65535,65535,4294967295,'\0','\0'),(5105,'Uoul',255,65535,65535,4294967295,'\0','\0'),(5106,'Ishepoya',255,65535,65535,4294967295,'\0','\0'),(5107,'Oeeptean',255,65535,65535,4294967295,'\0','\0'),(5108,'Aopynucau',255,65535,65535,4294967295,'\0','\0'),(5109,'Ateuf',255,65535,65535,4294967295,'\0','\0'),(5110,'Evistelkareh',255,65535,65535,4294967295,'\0','\0'),(5111,'Sose',255,65535,65535,4294967295,'\0','\0'),(5112,'Eyimoduasre',255,65535,65535,4294967295,'\0','\0'),(5113,'Ungroeti',255,65535,65535,4294967295,'\0','\0'),(5114,'Icemaypa',255,65535,65535,4294967295,'\0','\0'),(5115,'Oangmeieri',255,65535,65535,4294967295,'\0','\0'),(5116,'Ygfioutwoug',255,65535,65535,4294967295,'\0','\0'),(5117,'Amaycdosa',255,65535,65535,4294967295,'\0','\0'),(5118,'Saevelecio',255,65535,65535,4294967295,'\0','\0'),(5119,'Iapiea',255,65535,65535,4294967295,'\0','\0'),(5120,'Shotaegaan',255,65535,65535,4294967295,'\0','\0'),(5121,'Schaci',255,65535,65535,4294967295,'\0','\0'),(5122,'Raraaya',255,65535,65535,4294967295,'\0','\0'),(5123,'Iglioihoid',255,65535,65535,4294967295,'\0','\0'),(5124,'Erlioageorth',255,65535,65535,4294967295,'\0','\0'),(5125,'Oyolia',255,65535,65535,4294967295,'\0','\0'),(5126,'Nuofyerbliuc',255,65535,65535,4294967295,'\0','\0'),(5127,'Ytaansoesi',255,65535,65535,4294967295,'\0','\0'),(5128,'Loolinare',255,65535,65535,4294967295,'\0','\0'),(5129,'Coti',255,65535,65535,4294967295,'\0','\0'),(5130,'Piydoslady',255,65535,65535,4294967295,'\0','\0'),(5131,'Eurorifgeste',255,65535,65535,4294967295,'\0','\0'),(5132,'Esnojeat',255,65535,65535,4294967295,'\0','\0'),(5133,'Amleontesmi',255,65535,65535,4294967295,'\0','\0'),(5134,'Stuiapit',255,65535,65535,4294967295,'\0','\0'),(5135,'Hoiyare',255,65535,65535,4294967295,'\0','\0'),(5136,'Ocbeypeiyl',255,65535,65535,4294967295,'\0','\0'),(5137,'Xaquilavype',255,65535,65535,4294967295,'\0','\0'),(5138,'Eneun',255,65535,65535,4294967295,'\0','\0'),(5139,'Poayse',255,65535,65535,4294967295,'\0','\0'),(5140,'Exit',255,65535,65535,4294967295,'\0','\0'),(5141,'Teraieritoy',255,65535,65535,4294967295,'\0','\0'),(5142,'Owet',255,65535,65535,4294967295,'\0','\0'),(5143,'Laeoe',255,65535,65535,4294967295,'\0','\0'),(5144,'Atieckwi',255,65535,65535,4294967295,'\0','\0'),(5145,'Eritis',255,65535,65535,4294967295,'\0','\0'),(5146,'Amoifel',255,65535,65535,4294967295,'\0','\0'),(5147,'Avariolleat',255,65535,65535,4294967295,'\0','\0'),(5148,'Dicoocsoraim',255,65535,65535,4294967295,'\0','\0'),(5149,'Enaerosoye',255,65535,65535,4294967295,'\0','\0'),(5150,'Yamoaon',255,65535,65535,4294967295,'\0','\0'),(5151,'Teagedao',255,65535,65535,4294967295,'\0','\0'),(5152,'Yedonicu',255,65535,65535,4294967295,'\0','\0'),(5153,'Fepisedoual',255,65535,65535,4294967295,'\0','\0'),(5154,'Roiemcuucle',255,65535,65535,4294967295,'\0','\0'),(5155,'Ivereicagha',255,65535,65535,4294967295,'\0','\0'),(5156,'Ogeseuedeth',255,65535,65535,4294967295,'\0','\0'),(5157,'Osti',255,65535,65535,4294967295,'\0','\0'),(5158,'Tualerocabre',255,65535,65535,4294967295,'\0','\0'),(5159,'Uaalbetre',255,65535,65535,4294967295,'\0','\0'),(5160,'Oylayro',255,65535,65535,4294967295,'\0','\0'),(5161,'Lina',255,65535,65535,4294967295,'\0','\0'),(5162,'Emneataan',255,65535,65535,4294967295,'\0','\0'),(5163,'Oposseopcaal',255,65535,65535,4294967295,'\0','\0'),(5164,'Aratriathiic',255,65535,65535,4294967295,'\0','\0'),(5165,'Tiuphoowsu',255,65535,65535,4294967295,'\0','\0'),(5166,'Craeshodi',255,65535,65535,4294967295,'\0','\0'),(5167,'Oruoxo',255,65535,65535,4294967295,'\0','\0'),(5168,'Uchieime',255,65535,65535,4294967295,'\0','\0'),(5169,'Saacreoiro',255,65535,65535,4294967295,'\0','\0'),(5170,'Eneove',255,65535,65535,4294967295,'\0','\0'),(5171,'Eqenmi',255,65535,65535,4294967295,'\0','\0'),(5172,'Amindi',255,65535,65535,4294967295,'\0','\0'),(5173,'Mosiercleoc',255,65535,65535,4294967295,'\0','\0'),(5174,'Oorycoana',255,65535,65535,4294967295,'\0','\0'),(5175,'Ieebyiosti',255,65535,65535,4294967295,'\0','\0'),(5176,'Imaipopoi',255,65535,65535,4294967295,'\0','\0'),(5177,'Enasshaooy',255,65535,65535,4294967295,'\0','\0'),(5178,'Buolaliral',255,65535,65535,4294967295,'\0','\0'),(5179,'Maeicea',255,65535,65535,4294967295,'\0','\0'),(5180,'Yropreaoth',255,65535,65535,4294967295,'\0','\0'),(5181,'Echesao',255,65535,65535,4294967295,'\0','\0'),(5182,'Oatveusro',255,65535,65535,4294967295,'\0','\0'),(5183,'Tieri',255,65535,65535,4294967295,'\0','\0'),(5184,'Ypmadeplema',255,65535,65535,4294967295,'\0','\0'),(5185,'Oizitangipi',255,65535,65535,4294967295,'\0','\0'),(5186,'Ieykni',255,65535,65535,4294967295,'\0','\0'),(5187,'Oretsuaton',255,65535,65535,4294967295,'\0','\0'),(5188,'Goonnei',255,65535,65535,4294967295,'\0','\0'),(5189,'Atleta',255,65535,65535,4294967295,'\0','\0'),(5190,'Roryu',255,65535,65535,4294967295,'\0','\0'),(5191,'Ropelead',255,65535,65535,4294967295,'\0','\0'),(5192,'Yoiknyloi',255,65535,65535,4294967295,'\0','\0'),(5193,'Olmeic',255,65535,65535,4294967295,'\0','\0'),(5194,'Heisi',255,65535,65535,4294967295,'\0','\0'),(5195,'Hifoi',255,65535,65535,4294967295,'\0','\0'),(5196,'Idiecifard',255,65535,65535,4294967295,'\0','\0'),(5197,'Doelgioe',255,65535,65535,4294967295,'\0','\0'),(5198,'Epirofotov',255,65535,65535,4294967295,'\0','\0'),(5199,'Leeaberuib',255,65535,65535,4294967295,'\0','\0'),(5200,'Yaniengriot',255,65535,65535,4294967295,'\0','\0'),(5201,'Lerooebihe',255,65535,65535,4294967295,'\0','\0'),(5202,'Oaes',255,65535,65535,4294967295,'\0','\0'),(5203,'Eeicsaobya',255,65535,65535,4294967295,'\0','\0'),(5204,'Iducae',255,65535,65535,4294967295,'\0','\0'),(5205,'Bolod',255,65535,65535,4294967295,'\0','\0'),(5206,'Ikeiicentne',255,65535,65535,4294967295,'\0','\0'),(5207,'Iatonufzao',255,65535,65535,4294967295,'\0','\0'),(5208,'Viinecrenoan',255,65535,65535,4294967295,'\0','\0'),(5209,'Elonlela',255,65535,65535,4294967295,'\0','\0'),(5210,'Onum',255,65535,65535,4294967295,'\0','\0'),(5211,'Adrieumy',255,65535,65535,4294967295,'\0','\0'),(5212,'Atwru',255,65535,65535,4294967295,'\0','\0'),(5213,'Uruickposhe',255,65535,65535,4294967295,'\0','\0'),(5214,'Eifsniu',255,65535,65535,4294967295,'\0','\0'),(5215,'Aynuestismur',255,65535,65535,4294967295,'\0','\0'),(5216,'Apasiurn',255,65535,65535,4294967295,'\0','\0'),(5217,'Anuehe',255,65535,65535,4294967295,'\0','\0'),(5218,'Impyrdatazer',255,65535,65535,4294967295,'\0','\0'),(5219,'Groinayina',255,65535,65535,4294967295,'\0','\0'),(5220,'Watruyo',255,65535,65535,4294967295,'\0','\0'),(5221,'Kuolyroyngij',255,65535,65535,4294967295,'\0','\0'),(5222,'Amleemakre',255,65535,65535,4294967295,'\0','\0'),(5223,'Etmi',255,65535,65535,4294967295,'\0','\0'),(5224,'Estrieoig',255,65535,65535,4294967295,'\0','\0'),(5225,'Angmiingpro',255,65535,65535,4294967295,'\0','\0'),(5226,'Sueyeo',255,65535,65535,4294967295,'\0','\0'),(5227,'Nyelieyowti',255,65535,65535,4294967295,'\0','\0'),(5228,'Ehshoti',255,65535,65535,4294967295,'\0','\0'),(5229,'Aseissuub',255,65535,65535,4294967295,'\0','\0'),(5230,'Ysianivdiis',255,65535,65535,4294967295,'\0','\0'),(5231,'Daeromint',255,65535,65535,4294967295,'\0','\0'),(5232,'Amopwoissexi',255,65535,65535,4294967295,'\0','\0'),(5233,'Ighluopynat',255,65535,65535,4294967295,'\0','\0'),(5234,'Terushebooi',255,65535,65535,4294967295,'\0','\0'),(5235,'Ectur',255,65535,65535,4294967295,'\0','\0'),(5236,'Amineul',255,65535,65535,4294967295,'\0','\0'),(5237,'Xaisenu',255,65535,65535,4294967295,'\0','\0'),(5238,'Staukmi',255,65535,65535,4294967295,'\0','\0'),(5239,'Tifothoad',255,65535,65535,4294967295,'\0','\0'),(5240,'Celene',255,65535,65535,4294967295,'\0','\0'),(5241,'Anuikab',255,65535,65535,4294967295,'\0','\0'),(5242,'Geooessiso',255,65535,65535,4294967295,'\0','\0'),(5243,'Leeche',255,65535,65535,4294967295,'\0','\0'),(5244,'Iureytree',255,65535,65535,4294967295,'\0','\0'),(5245,'Ietuacao',255,65535,65535,4294967295,'\0','\0'),(5246,'Inloele',255,65535,65535,4294967295,'\0','\0'),(5247,'Selcloylni',255,65535,65535,4294967295,'\0','\0'),(5248,'Iarilumubis',255,65535,65535,4294967295,'\0','\0'),(5249,'Hoonhaecesil',255,65535,65535,4294967295,'\0','\0'),(5250,'Eolesooro',255,65535,65535,4294967295,'\0','\0'),(5251,'Deweit',255,65535,65535,4294967295,'\0','\0'),(5252,'Roalaad',255,65535,65535,4294967295,'\0','\0'),(5253,'Ibalypeare',255,65535,65535,4294967295,'\0','\0'),(5254,'Tyseaichaop',255,65535,65535,4294967295,'\0','\0'),(5255,'Istiahenei',255,65535,65535,4294967295,'\0','\0'),(5256,'Aeria',255,65535,65535,4294967295,'\0','\0'),(5257,'Naeresast',255,65535,65535,4294967295,'\0','\0'),(5258,'Adocoke',255,65535,65535,4294967295,'\0','\0'),(5259,'Esubehadonag',255,65535,65535,4294967295,'\0','\0'),(5260,'Tyiunau',255,65535,65535,4294967295,'\0','\0'),(5261,'Alidehees',255,65535,65535,4294967295,'\0','\0'),(5262,'Uesteyoserne',255,65535,65535,4294967295,'\0','\0'),(5263,'Peniuroile',255,65535,65535,4294967295,'\0','\0'),(5264,'Engatlin',255,65535,65535,4294967295,'\0','\0'),(5265,'Nasaak',255,65535,65535,4294967295,'\0','\0'),(5266,'Echcecaef',255,65535,65535,4294967295,'\0','\0'),(5267,'Ahene',255,65535,65535,4294967295,'\0','\0'),(5268,'Ande',255,65535,65535,4294967295,'\0','\0'),(5269,'Esne',255,65535,65535,4294967295,'\0','\0'),(5270,'Acey',255,65535,65535,4294967295,'\0','\0'),(5271,'Aevodeuawn',255,65535,65535,4294967295,'\0','\0'),(5272,'Thiomreiar',255,65535,65535,4294967295,'\0','\0'),(5273,'Peysithoisi',255,65535,65535,4294967295,'\0','\0'),(5274,'Potiap',255,65535,65535,4294967295,'\0','\0'),(5275,'Rydifeayre',255,65535,65535,4294967295,'\0','\0'),(5276,'Axoatutrao',255,65535,65535,4294967295,'\0','\0'),(5277,'Neeyipliisa',255,65535,65535,4294967295,'\0','\0'),(5278,'Oaco',255,65535,65535,4294967295,'\0','\0'),(5279,'Ealopintheey',255,65535,65535,4294967295,'\0','\0'),(5280,'Aciucharoc',255,65535,65535,4294967295,'\0','\0'),(5281,'Speroouhca',255,65535,65535,4294967295,'\0','\0'),(5282,'Eauloctis',255,65535,65535,4294967295,'\0','\0'),(5283,'Okapedarcli',255,65535,65535,4294967295,'\0','\0'),(5284,'Gudemoyofuac',255,65535,65535,4294967295,'\0','\0'),(5285,'Anmeia',255,65535,65535,4294967295,'\0','\0'),(5286,'Spiay',255,65535,65535,4294967295,'\0','\0'),(5287,'Yoseuarpi',255,65535,65535,4294967295,'\0','\0'),(5288,'Eube',255,65535,65535,4294967295,'\0','\0'),(5289,'Teoternossu',255,65535,65535,4294967295,'\0','\0'),(5290,'Eunopyal',255,65535,65535,4294967295,'\0','\0'),(5291,'Iare',255,65535,65535,4294967295,'\0','\0'),(5292,'Guoniusebe',255,65535,65535,4294967295,'\0','\0'),(5293,'Itoeling',255,65535,65535,4294967295,'\0','\0'),(5294,'Erieupo',255,65535,65535,4294967295,'\0','\0'),(5295,'Laerin',255,65535,65535,4294967295,'\0','\0'),(5296,'Mepial',255,65535,65535,4294967295,'\0','\0'),(5297,'Oeoging',255,65535,65535,4294967295,'\0','\0'),(5298,'Ioruedni',255,65535,65535,4294967295,'\0','\0'),(5299,'Liuresso',255,65535,65535,4294967295,'\0','\0'),(5300,'Ohuiwnoeh',255,65535,65535,4294967295,'\0','\0'),(5301,'Ysiois',255,65535,65535,4294967295,'\0','\0'),(5302,'Iece',255,65535,65535,4294967295,'\0','\0'),(5303,'Yotient',255,65535,65535,4294967295,'\0','\0'),(5304,'Eroke',255,65535,65535,4294967295,'\0','\0'),(5305,'Endeermamu',255,65535,65535,4294967295,'\0','\0'),(5306,'Synereeplai',255,65535,65535,4294967295,'\0','\0'),(5307,'Odanduro',255,65535,65535,4294967295,'\0','\0'),(5308,'Iesttimo',255,65535,65535,4294967295,'\0','\0'),(5309,'Eerewao',255,65535,65535,4294967295,'\0','\0'),(5310,'Redroyme',255,65535,65535,4294967295,'\0','\0'),(5311,'Haytanet',255,65535,65535,4294967295,'\0','\0'),(5312,'Auima',255,65535,65535,4294967295,'\0','\0'),(5313,'Oeyaenmo',255,65535,65535,4294967295,'\0','\0'),(5314,'Amacaistode',255,65535,65535,4294967295,'\0','\0'),(5315,'Oyinte',255,65535,65535,4294967295,'\0','\0'),(5316,'Itpoysna',255,65535,65535,4294967295,'\0','\0'),(5317,'Poanse',255,65535,65535,4294967295,'\0','\0'),(5318,'Urot',255,65535,65535,4294967295,'\0','\0'),(5319,'Erklirepiyo',255,65535,65535,4294967295,'\0','\0'),(5320,'Ayoubtevewa',255,65535,65535,4294967295,'\0','\0'),(5321,'Ereahohinche',255,65535,65535,4294967295,'\0','\0'),(5322,'Ectalil',255,65535,65535,4294967295,'\0','\0'),(5323,'Eqgroli',255,65535,65535,4294967295,'\0','\0'),(5324,'Cusoe',255,65535,65535,4294967295,'\0','\0'),(5325,'Inul',255,65535,65535,4294967295,'\0','\0'),(5326,'Efagho',255,65535,65535,4294967295,'\0','\0'),(5327,'Ritwaadras',255,65535,65535,4294967295,'\0','\0'),(5328,'Iongbeid',255,65535,65535,4294967295,'\0','\0'),(5329,'Ceye',255,65535,65535,4294967295,'\0','\0'),(5330,'Exmeaedarla',255,65535,65535,4294967295,'\0','\0'),(5331,'Tiertprete',255,65535,65535,4294967295,'\0','\0'),(5332,'Oisnatdiur',255,65535,65535,4294967295,'\0','\0'),(5333,'Iranireoc',255,65535,65535,4294967295,'\0','\0'),(5334,'Rysay',255,65535,65535,4294967295,'\0','\0'),(5335,'Oriegeehe',255,65535,65535,4294967295,'\0','\0'),(5336,'Haisese',255,65535,65535,4294967295,'\0','\0'),(5337,'Aluoli',255,65535,65535,4294967295,'\0','\0'),(5338,'Nofiabasali',255,65535,65535,4294967295,'\0','\0'),(5339,'Opachtre',255,65535,65535,4294967295,'\0','\0'),(5340,'Gelasi',255,65535,65535,4294967295,'\0','\0'),(5341,'Eayese',255,65535,65535,4294967295,'\0','\0'),(5342,'Upid',255,65535,65535,4294967295,'\0','\0'),(5343,'Treibioh',255,65535,65535,4294967295,'\0','\0'),(5344,'Ibilaopesze',255,65535,65535,4294967295,'\0','\0'),(5345,'Ieyudcito',255,65535,65535,4294967295,'\0','\0'),(5346,'Stacinsubais',255,65535,65535,4294967295,'\0','\0'),(5347,'Truatyeomo',255,65535,65535,4294967295,'\0','\0'),(5348,'Eymisiuyag',255,65535,65535,4294967295,'\0','\0'),(5349,'Agybeilbepe',255,65535,65535,4294967295,'\0','\0'),(5350,'Stiyuaeyem',255,65535,65535,4294967295,'\0','\0'),(5351,'Inermerica',255,65535,65535,4294967295,'\0','\0'),(5352,'Inliorofin',255,65535,65535,4294967295,'\0','\0'),(5353,'Ulialolones',255,65535,65535,4294967295,'\0','\0'),(5354,'Areay',255,65535,65535,4294967295,'\0','\0'),(5355,'Zoephirape',255,65535,65535,4294967295,'\0','\0'),(5356,'Elaerev',255,65535,65535,4294967295,'\0','\0'),(5357,'Oyey',255,65535,65535,4294967295,'\0','\0'),(5358,'Hoenimo',255,65535,65535,4294967295,'\0','\0'),(5359,'Etowhionsu',255,65535,65535,4294967295,'\0','\0'),(5360,'Ivamscrostii',255,65535,65535,4294967295,'\0','\0'),(5361,'Stayni',255,65535,65535,4294967295,'\0','\0'),(5362,'Taeleiben',255,65535,65535,4294967295,'\0','\0'),(5363,'Pinosuaerwi',255,65535,65535,4294967295,'\0','\0'),(5364,'Ihtid',255,65535,65535,4294967295,'\0','\0'),(5365,'Neareire',255,65535,65535,4294967295,'\0','\0'),(5366,'Egon',255,65535,65535,4294967295,'\0','\0'),(5367,'Alielwo',255,65535,65535,4294967295,'\0','\0'),(5368,'Agamcaac',255,65535,65535,4294967295,'\0','\0'),(5369,'Ilybeteine',255,65535,65535,4294967295,'\0','\0'),(5370,'Nainroe',255,65535,65535,4294967295,'\0','\0'),(5371,'Ynernguo',255,65535,65535,4294967295,'\0','\0'),(5372,'Placra',255,65535,65535,4294967295,'\0','\0'),(5373,'Itogliea',255,65535,65535,4294967295,'\0','\0'),(5374,'Inegsi',255,65535,65535,4294967295,'\0','\0'),(5375,'Asalarivne',255,65535,65535,4294967295,'\0','\0'),(5376,'Onial',255,65535,65535,4294967295,'\0','\0'),(5377,'Daumoabe',255,65535,65535,4294967295,'\0','\0'),(5378,'Efkre',255,65535,65535,4294967295,'\0','\0'),(5379,'Inyeocyi',255,65535,65535,4294967295,'\0','\0'),(5380,'Staeyast',255,65535,65535,4294967295,'\0','\0'),(5381,'Onhat',255,65535,65535,4294967295,'\0','\0'),(5382,'Brope',255,65535,65535,4294967295,'\0','\0'),(5383,'Ehcoipaoe',255,65535,65535,4294967295,'\0','\0'),(5384,'Alopie',255,65535,65535,4294967295,'\0','\0'),(5385,'Erdemeurd',255,65535,65535,4294967295,'\0','\0'),(5386,'Orlyoesutco',255,65535,65535,4294967295,'\0','\0'),(5387,'Endulaniging',255,65535,65535,4294967295,'\0','\0'),(5388,'Uoxoeyo',255,65535,65535,4294967295,'\0','\0'),(5389,'Arano',255,65535,65535,4294967295,'\0','\0'),(5390,'Uiecerun',255,65535,65535,4294967295,'\0','\0'),(5391,'Crewar',255,65535,65535,4294967295,'\0','\0'),(5392,'Nabliophao',255,65535,65535,4294967295,'\0','\0'),(5393,'Aahutulrea',255,65535,65535,4294967295,'\0','\0'),(5394,'Iitrierenay',255,65535,65535,4294967295,'\0','\0'),(5395,'Apendinkiala',255,65535,65535,4294967295,'\0','\0'),(5396,'Raoenais',255,65535,65535,4294967295,'\0','\0'),(5397,'Maoetul',255,65535,65535,4294967295,'\0','\0'),(5398,'Ovoarieu',255,65535,65535,4294967295,'\0','\0'),(5399,'Adeabayo',255,65535,65535,4294967295,'\0','\0'),(5400,'Lilaigrei',255,65535,65535,4294967295,'\0','\0'),(5401,'Oiuat',255,65535,65535,4294967295,'\0','\0'),(5402,'Ovamyssclora',255,65535,65535,4294967295,'\0','\0'),(5403,'Veueepi',255,65535,65535,4294967295,'\0','\0'),(5404,'Alciyci',255,65535,65535,4294967295,'\0','\0'),(5405,'Ioeta',255,65535,65535,4294967295,'\0','\0'),(5406,'Needth',255,65535,65535,4294967295,'\0','\0'),(5407,'Loassale',255,65535,65535,4294967295,'\0','\0'),(5408,'Aleburasoe',255,65535,65535,4294967295,'\0','\0'),(5409,'Achyoochie',255,65535,65535,4294967295,'\0','\0'),(5410,'Eahike',255,65535,65535,4294967295,'\0','\0'),(5411,'Orycescloimo',255,65535,65535,4294967295,'\0','\0'),(5412,'Alyosu',255,65535,65535,4294967295,'\0','\0'),(5413,'Glabinome',255,65535,65535,4294967295,'\0','\0'),(5414,'Roiye',255,65535,65535,4294967295,'\0','\0'),(5415,'Affmaveuazli',255,65535,65535,4294967295,'\0','\0'),(5416,'Soesex',255,65535,65535,4294967295,'\0','\0'),(5417,'Orcotyic',255,65535,65535,4294967295,'\0','\0'),(5418,'Peeiitado',255,65535,65535,4294967295,'\0','\0'),(5419,'Ebiciuingve',255,65535,65535,4294967295,'\0','\0'),(5420,'Otaltichono',255,65535,65535,4294967295,'\0','\0'),(5421,'Uarroya',255,65535,65535,4294967295,'\0','\0'),(5422,'Otofowe',255,65535,65535,4294967295,'\0','\0'),(5423,'Imoesmaclie',255,65535,65535,4294967295,'\0','\0'),(5424,'Mipituecot',255,65535,65535,4294967295,'\0','\0'),(5425,'Ablieqgeulsi',255,65535,65535,4294967295,'\0','\0'),(5426,'Ucseo',255,65535,65535,4294967295,'\0','\0'),(5427,'Untguboti',255,65535,65535,4294967295,'\0','\0'),(5428,'Teoviogatde',255,65535,65535,4294967295,'\0','\0'),(5429,'Phemiatessie',255,65535,65535,4294967295,'\0','\0'),(5430,'Reabine',255,65535,65535,4294967295,'\0','\0'),(5431,'Uritarcourt',255,65535,65535,4294967295,'\0','\0'),(5432,'Inriabes',255,65535,65535,4294967295,'\0','\0'),(5433,'Etaic',255,65535,65535,4294967295,'\0','\0'),(5434,'Gaerifu',255,65535,65535,4294967295,'\0','\0'),(5435,'Ariay',255,65535,65535,4294967295,'\0','\0'),(5436,'Otsico',255,65535,65535,4294967295,'\0','\0'),(5437,'Erbeinse',255,65535,65535,4294967295,'\0','\0'),(5438,'Aniuc',255,65535,65535,4294967295,'\0','\0'),(5439,'Idedov',255,65535,65535,4294967295,'\0','\0'),(5440,'Groicait',255,65535,65535,4294967295,'\0','\0'),(5441,'Neeamurol',255,65535,65535,4294967295,'\0','\0'),(5442,'Saumexcait',255,65535,65535,4294967295,'\0','\0'),(5443,'Itauedian',255,65535,65535,4294967295,'\0','\0'),(5444,'Oeffgachi',255,65535,65535,4294967295,'\0','\0'),(5445,'Ackeete',255,65535,65535,4294967295,'\0','\0'),(5446,'Rieyneoyoci',255,65535,65535,4294967295,'\0','\0'),(5447,'Ecaf',255,65535,65535,4294967295,'\0','\0'),(5448,'Osmdoo',255,65535,65535,4294967295,'\0','\0'),(5449,'Noapi',255,65535,65535,4294967295,'\0','\0'),(5450,'Niuone',255,65535,65535,4294967295,'\0','\0'),(5451,'Fietcoeth',255,65535,65535,4294967295,'\0','\0'),(5452,'Lireesh',255,65535,65535,4294967295,'\0','\0'),(5453,'Agsloinit',255,65535,65535,4294967295,'\0','\0'),(5454,'Onayantentae',255,65535,65535,4294967295,'\0','\0'),(5455,'Aemteoenush',255,65535,65535,4294967295,'\0','\0'),(5456,'Tieueu',255,65535,65535,4294967295,'\0','\0'),(5457,'Nityeetsisu',255,65535,65535,4294967295,'\0','\0'),(5458,'Nibrobo',255,65535,65535,4294967295,'\0','\0'),(5459,'Obyaeahemco',255,65535,65535,4294967295,'\0','\0'),(5460,'Atucoav',255,65535,65535,4294967295,'\0','\0'),(5461,'Cheagianis',255,65535,65535,4294967295,'\0','\0'),(5462,'Abeusodaco',255,65535,65535,4294967295,'\0','\0'),(5463,'Useiungi',255,65535,65535,4294967295,'\0','\0'),(5464,'Esiengin',255,65535,65535,4294967295,'\0','\0'),(5465,'Caya',255,65535,65535,4294967295,'\0','\0'),(5466,'Ovaibnaad',255,65535,65535,4294967295,'\0','\0'),(5467,'Eshneyoyumu',255,65535,65535,4294967295,'\0','\0'),(5468,'Ilpeupycoy',255,65535,65535,4294967295,'\0','\0'),(5469,'Iesimpe',255,65535,65535,4294967295,'\0','\0'),(5470,'Uerkisopy',255,65535,65535,4294967295,'\0','\0'),(5471,'Itteatiss',255,65535,65535,4294967295,'\0','\0'),(5472,'Uvsierore',255,65535,65535,4294967295,'\0','\0'),(5473,'Rieiu',255,65535,65535,4294967295,'\0','\0'),(5474,'Raarycea',255,65535,65535,4294967295,'\0','\0'),(5475,'Ryjeico',255,65535,65535,4294967295,'\0','\0'),(5476,'Engfruowi',255,65535,65535,4294967295,'\0','\0'),(5477,'Anuchniutis',255,65535,65535,4294967295,'\0','\0'),(5478,'Oereroa',255,65535,65535,4294967295,'\0','\0'),(5479,'Ubuoneu',255,65535,65535,4294967295,'\0','\0'),(5480,'Omfleaye',255,65535,65535,4294967295,'\0','\0'),(5481,'Luiob',255,65535,65535,4294967295,'\0','\0'),(5482,'Umrapreta',255,65535,65535,4294967295,'\0','\0'),(5483,'Emorpatiry',255,65535,65535,4294967295,'\0','\0'),(5484,'Eovari',255,65535,65535,4294967295,'\0','\0'),(5485,'Iongot',255,65535,65535,4294967295,'\0','\0'),(5486,'Aifroim',255,65535,65535,4294967295,'\0','\0'),(5487,'Uciyany',255,65535,65535,4294967295,'\0','\0'),(5488,'Sone',255,65535,65535,4294967295,'\0','\0'),(5489,'Ashiguaelo',255,65535,65535,4294967295,'\0','\0'),(5490,'Aygi',255,65535,65535,4294967295,'\0','\0'),(5491,'Apvayrnaya',255,65535,65535,4294967295,'\0','\0'),(5492,'Paacerilo',255,65535,65535,4294967295,'\0','\0'),(5493,'Noimloitre',255,65535,65535,4294967295,'\0','\0'),(5494,'Ighy',255,65535,65535,4294967295,'\0','\0'),(5495,'Toiteantrea',255,65535,65535,4294967295,'\0','\0'),(5496,'Pretreen',255,65535,65535,4294967295,'\0','\0'),(5497,'Siive',255,65535,65535,4294967295,'\0','\0'),(5498,'Eitaplymo',255,65535,65535,4294967295,'\0','\0'),(5499,'Ciahamlein',255,65535,65535,4294967295,'\0','\0'),(5500,'Breluinou',255,65535,65535,4294967295,'\0','\0'),(5501,'Idaron',255,65535,65535,4294967295,'\0','\0'),(5502,'Hoiteinia',255,65535,65535,4294967295,'\0','\0'),(5503,'Igedipourimp',255,65535,65535,4294967295,'\0','\0'),(5504,'Indpyeesmyum',255,65535,65535,4294967295,'\0','\0'),(5505,'Deaf',255,65535,65535,4294967295,'\0','\0'),(5506,'Alosahoatye',255,65535,65535,4294967295,'\0','\0'),(5507,'Ehschenolpa',255,65535,65535,4294967295,'\0','\0'),(5508,'Neoi',255,65535,65535,4294967295,'\0','\0'),(5509,'Sceieesca',255,65535,65535,4294967295,'\0','\0'),(5510,'Aseumchori',255,65535,65535,4294967295,'\0','\0'),(5511,'Isygytuesi',255,65535,65535,4294967295,'\0','\0'),(5512,'Ampeuche',255,65535,65535,4294967295,'\0','\0'),(5513,'Oeutkene',255,65535,65535,4294967295,'\0','\0'),(5514,'Hiflioannera',255,65535,65535,4294967295,'\0','\0'),(5515,'Uofiuwkuf',255,65535,65535,4294967295,'\0','\0'),(5516,'Eateyeag',255,65535,65535,4294967295,'\0','\0'),(5517,'Eeorayeef',255,65535,65535,4294967295,'\0','\0'),(5518,'Siseize',255,65535,65535,4294967295,'\0','\0'),(5519,'Eieivein',255,65535,65535,4294967295,'\0','\0'),(5520,'Aeoentre',255,65535,65535,4294967295,'\0','\0'),(5521,'Enpyaru',255,65535,65535,4294967295,'\0','\0'),(5522,'Iebre',255,65535,65535,4294967295,'\0','\0'),(5523,'Urpese',255,65535,65535,4294967295,'\0','\0'),(5524,'Erasui',255,65535,65535,4294967295,'\0','\0'),(5525,'Togiycunto',255,65535,65535,4294967295,'\0','\0'),(5526,'Asmessonu',255,65535,65535,4294967295,'\0','\0'),(5527,'Giotha',255,65535,65535,4294967295,'\0','\0'),(5528,'Ytetoier',255,65535,65535,4294967295,'\0','\0'),(5529,'Ayrain',255,65535,65535,4294967295,'\0','\0'),(5530,'Cheydoc',255,65535,65535,4294967295,'\0','\0'),(5531,'Isiset',255,65535,65535,4294967295,'\0','\0'),(5532,'Apri',255,65535,65535,4294967295,'\0','\0'),(5533,'Utigativein',255,65535,65535,4294967295,'\0','\0'),(5534,'Umfaayyirosu',255,65535,65535,4294967295,'\0','\0'),(5535,'Teire',255,65535,65535,4294967295,'\0','\0'),(5536,'Aloorno',255,65535,65535,4294967295,'\0','\0'),(5537,'Coahwo',255,65535,65535,4294967295,'\0','\0'),(5538,'Igeneitaab',255,65535,65535,4294967295,'\0','\0'),(5539,'Uzeuxatol',255,65535,65535,4294967295,'\0','\0'),(5540,'Maorpiwione',255,65535,65535,4294967295,'\0','\0'),(5541,'Ereyi',255,65535,65535,4294967295,'\0','\0'),(5542,'Eguamahdaic',255,65535,65535,4294967295,'\0','\0'),(5543,'Onacard',255,65535,65535,4294967295,'\0','\0'),(5544,'Itup',255,65535,65535,4294967295,'\0','\0'),(5545,'Riliessuca',255,65535,65535,4294967295,'\0','\0'),(5546,'Oakior',255,65535,65535,4294967295,'\0','\0'),(5547,'Opdeon',255,65535,65535,4294967295,'\0','\0'),(5548,'Ionu',255,65535,65535,4294967295,'\0','\0'),(5549,'Ayoyakeau',255,65535,65535,4294967295,'\0','\0'),(5550,'Epreisyssen',255,65535,65535,4294967295,'\0','\0'),(5551,'Iuzelalo',255,65535,65535,4294967295,'\0','\0'),(5552,'Woeraluia',255,65535,65535,4294967295,'\0','\0'),(5553,'Peahpenaita',255,65535,65535,4294967295,'\0','\0'),(5554,'Isereyec',255,65535,65535,4294967295,'\0','\0'),(5555,'Yatwilaale',255,65535,65535,4294967295,'\0','\0'),(5556,'Ibogog',255,65535,65535,4294967295,'\0','\0'),(5557,'Iniugoypa',255,65535,65535,4294967295,'\0','\0'),(5558,'Ymavuse',255,65535,65535,4294967295,'\0','\0'),(5559,'Oberashaei',255,65535,65535,4294967295,'\0','\0'),(5560,'Nezonie',255,65535,65535,4294967295,'\0','\0'),(5561,'Ickewtuchi',255,65535,65535,4294967295,'\0','\0'),(5562,'Haenizru',255,65535,65535,4294967295,'\0','\0'),(5563,'Neteyusossi',255,65535,65535,4294967295,'\0','\0'),(5564,'Tealkaroya',255,65535,65535,4294967295,'\0','\0'),(5565,'Liole',255,65535,65535,4294967295,'\0','\0'),(5566,'Emiye',255,65535,65535,4294967295,'\0','\0'),(5567,'Oaric',255,65535,65535,4294967295,'\0','\0'),(5568,'Ulayaierot',255,65535,65535,4294967295,'\0','\0'),(5569,'Upiechoesh',255,65535,65535,4294967295,'\0','\0'),(5570,'Tapuiyeil',255,65535,65535,4294967295,'\0','\0'),(5571,'Toheke',255,65535,65535,4294967295,'\0','\0'),(5572,'Eihmo',255,65535,65535,4294967295,'\0','\0'),(5573,'Aarofieok',255,65535,65535,4294967295,'\0','\0'),(5574,'Nonarayenis',255,65535,65535,4294967295,'\0','\0'),(5575,'Apviino',255,65535,65535,4294967295,'\0','\0'),(5576,'Teireule',255,65535,65535,4294967295,'\0','\0'),(5577,'Syued',255,65535,65535,4294967295,'\0','\0'),(5578,'Ymtrato',255,65535,65535,4294967295,'\0','\0'),(5579,'Erabidut',255,65535,65535,4294967295,'\0','\0'),(5580,'Ayraoehpe',255,65535,65535,4294967295,'\0','\0'),(5581,'Essfeoinycy',255,65535,65535,4294967295,'\0','\0'),(5582,'Escoupeuen',255,65535,65535,4294967295,'\0','\0'),(5583,'Soneni',255,65535,65535,4294967295,'\0','\0'),(5584,'Ingyostre',255,65535,65535,4294967295,'\0','\0'),(5585,'Pepsa',255,65535,65535,4294967295,'\0','\0'),(5586,'Upinyist',255,65535,65535,4294967295,'\0','\0'),(5587,'Roaboad',255,65535,65535,4294967295,'\0','\0'),(5588,'Fleevuerin',255,65535,65535,4294967295,'\0','\0'),(5589,'Lawo',255,65535,65535,4294967295,'\0','\0'),(5590,'Enuziaj',255,65535,65535,4294967295,'\0','\0'),(5591,'Ateruleoem',255,65535,65535,4294967295,'\0','\0'),(5592,'Yeaoriege',255,65535,65535,4294967295,'\0','\0'),(5593,'Ryeilfoe',255,65535,65535,4294967295,'\0','\0'),(5594,'Ofatte',255,65535,65535,4294967295,'\0','\0'),(5595,'Rairmsepocin',255,65535,65535,4294967295,'\0','\0'),(5596,'Opeollaesa',255,65535,65535,4294967295,'\0','\0'),(5597,'Ergaichqui',255,65535,65535,4294967295,'\0','\0'),(5598,'Gyomunein',255,65535,65535,4294967295,'\0','\0'),(5599,'Yenulline',255,65535,65535,4294967295,'\0','\0'),(5600,'Ystour',255,65535,65535,4294967295,'\0','\0'),(5601,'Ophianic',255,65535,65535,4294967295,'\0','\0'),(5602,'Enoeyaytac',255,65535,65535,4294967295,'\0','\0'),(5603,'Ueuccuayos',255,65535,65535,4294967295,'\0','\0'),(5604,'Erdiok',255,65535,65535,4294967295,'\0','\0'),(5605,'Yafoar',255,65535,65535,4294967295,'\0','\0'),(5606,'Odmo',255,65535,65535,4294967295,'\0','\0'),(5607,'Ungentiist',255,65535,65535,4294967295,'\0','\0'),(5608,'Otoessenin',255,65535,65535,4294967295,'\0','\0'),(5609,'Geteamtea',255,65535,65535,4294967295,'\0','\0'),(5610,'Ineaiyen',255,65535,65535,4294967295,'\0','\0'),(5611,'Ufriass',255,65535,65535,4294967295,'\0','\0'),(5612,'Elep',255,65535,65535,4294967295,'\0','\0'),(5613,'Shuic',255,65535,65535,4294967295,'\0','\0'),(5614,'Onalti',255,65535,65535,4294967295,'\0','\0'),(5615,'Eguearty',255,65535,65535,4294967295,'\0','\0'),(5616,'Umspe',255,65535,65535,4294967295,'\0','\0'),(5617,'Yaneamoach',255,65535,65535,4294967295,'\0','\0'),(5618,'Eardoo',255,65535,65535,4294967295,'\0','\0'),(5619,'Oeuoal',255,65535,65535,4294967295,'\0','\0'),(5620,'Aenma',255,65535,65535,4294967295,'\0','\0'),(5621,'Sciyp',255,65535,65535,4294967295,'\0','\0'),(5622,'Iano',255,65535,65535,4294967295,'\0','\0'),(5623,'Nioveeco',255,65535,65535,4294967295,'\0','\0'),(5624,'Riaacaenmi',255,65535,65535,4294967295,'\0','\0'),(5625,'Vopraetoolet',255,65535,65535,4294967295,'\0','\0'),(5626,'Ilneconaab',255,65535,65535,4294967295,'\0','\0'),(5627,'Nuaoctadre',255,65535,65535,4294967295,'\0','\0'),(5628,'Eigeyterae',255,65535,65535,4294967295,'\0','\0'),(5629,'Chifoliee',255,65535,65535,4294967295,'\0','\0'),(5630,'Caylciiae',255,65535,65535,4294967295,'\0','\0'),(5631,'Eymoossuro',255,65535,65535,4294967295,'\0','\0'),(5632,'Egatuluce',255,65535,65535,4294967295,'\0','\0'),(5633,'Loyesluailsi',255,65535,65535,4294967295,'\0','\0'),(5634,'Oiare',255,65535,65535,4294967295,'\0','\0'),(5635,'Eteinaasi',255,65535,65535,4294967295,'\0','\0'),(5636,'Briuesodes',255,65535,65535,4294967295,'\0','\0'),(5637,'Bilari',255,65535,65535,4294967295,'\0','\0'),(5638,'Ekani',255,65535,65535,4294967295,'\0','\0'),(5639,'Isantob',255,65535,65535,4294967295,'\0','\0'),(5640,'Efiaagoa',255,65535,65535,4294967295,'\0','\0'),(5641,'Gethoaty',255,65535,65535,4294967295,'\0','\0'),(5642,'Ilomeoti',255,65535,65535,4294967295,'\0','\0'),(5643,'Bibmuadafyn',255,65535,65535,4294967295,'\0','\0'),(5644,'Ainuesci',255,65535,65535,4294967295,'\0','\0'),(5645,'Eesleyerche',255,65535,65535,4294967295,'\0','\0'),(5646,'Piyeeyisve',255,65535,65535,4294967295,'\0','\0'),(5647,'Nife',255,65535,65535,4294967295,'\0','\0'),(5648,'Ditiemam',255,65535,65535,4294967295,'\0','\0'),(5649,'Oesogiarey',255,65535,65535,4294967295,'\0','\0'),(5650,'Baulesan',255,65535,65535,4294967295,'\0','\0'),(5651,'Trekuo',255,65535,65535,4294967295,'\0','\0'),(5652,'Emeclaao',255,65535,65535,4294967295,'\0','\0'),(5653,'Iliruncba',255,65535,65535,4294967295,'\0','\0'),(5654,'Eapawuo',255,65535,65535,4294967295,'\0','\0'),(5655,'Ekayicalgiya',255,65535,65535,4294967295,'\0','\0'),(5656,'Asinraacto',255,65535,65535,4294967295,'\0','\0'),(5657,'Araelar',255,65535,65535,4294967295,'\0','\0'),(5658,'Eitaibho',255,65535,65535,4294967295,'\0','\0'),(5659,'Aoypae',255,65535,65535,4294967295,'\0','\0'),(5660,'Isleei',255,65535,65535,4294967295,'\0','\0'),(5661,'Arewil',255,65535,65535,4294967295,'\0','\0'),(5662,'Indoqlipru',255,65535,65535,4294967295,'\0','\0'),(5663,'Enyesne',255,65535,65535,4294967295,'\0','\0'),(5664,'Ilincuro',255,65535,65535,4294967295,'\0','\0'),(5665,'Fiubraanpro',255,65535,65535,4294967295,'\0','\0'),(5666,'Enasineolul',255,65535,65535,4294967295,'\0','\0'),(5667,'Aselaoefo',255,65535,65535,4294967295,'\0','\0'),(5668,'Maicoistsali',255,65535,65535,4294967295,'\0','\0'),(5669,'Umeoe',255,65535,65535,4294967295,'\0','\0'),(5670,'Iamesoito',255,65535,65535,4294967295,'\0','\0'),(5671,'Adfle',255,65535,65535,4294967295,'\0','\0'),(5672,'Onoiathe',255,65535,65535,4294967295,'\0','\0'),(5673,'Ohing',255,65535,65535,4294967295,'\0','\0'),(5674,'Vaiaoyi',255,65535,65535,4294967295,'\0','\0'),(5675,'Uliepyoklyi',255,65535,65535,4294967295,'\0','\0'),(5676,'Ycimalemale',255,65535,65535,4294967295,'\0','\0'),(5677,'Xiaada',255,65535,65535,4294967295,'\0','\0'),(5678,'Upyaneyd',255,65535,65535,4294967295,'\0','\0'),(5679,'Ibuleyab',255,65535,65535,4294967295,'\0','\0'),(5680,'Ewesyspoo',255,65535,65535,4294967295,'\0','\0'),(5681,'Esangoagcora',255,65535,65535,4294967295,'\0','\0'),(5682,'Ekitherendog',255,65535,65535,4294967295,'\0','\0'),(5683,'Ataaledy',255,65535,65535,4294967295,'\0','\0'),(5684,'Leubca',255,65535,65535,4294967295,'\0','\0'),(5685,'Eyepeat',255,65535,65535,4294967295,'\0','\0'),(5686,'Deyxibituna',255,65535,65535,4294967295,'\0','\0'),(5687,'Iziab',255,65535,65535,4294967295,'\0','\0'),(5688,'Siaraeschav',255,65535,65535,4294967295,'\0','\0'),(5689,'Imibmanetroa',255,65535,65535,4294967295,'\0','\0'),(5690,'Eusmswa',255,65535,65535,4294967295,'\0','\0'),(5691,'Oeree',255,65535,65535,4294967295,'\0','\0'),(5692,'Oalmounom',255,65535,65535,4294967295,'\0','\0'),(5693,'Ipfli',255,65535,65535,4294967295,'\0','\0'),(5694,'Syyemaenerd',255,65535,65535,4294967295,'\0','\0'),(5695,'Laushosroi',255,65535,65535,4294967295,'\0','\0'),(5696,'Icyrei',255,65535,65535,4294967295,'\0','\0'),(5697,'Oiceghyewhu',255,65535,65535,4294967295,'\0','\0'),(5698,'Acoin',255,65535,65535,4294967295,'\0','\0'),(5699,'Roaotitha',255,65535,65535,4294967295,'\0','\0'),(5700,'Imaticorayal',255,65535,65535,4294967295,'\0','\0'),(5701,'Okacotytow',255,65535,65535,4294967295,'\0','\0'),(5702,'Aliduktool',255,65535,65535,4294967295,'\0','\0'),(5703,'Emloisnooet',255,65535,65535,4294967295,'\0','\0'),(5704,'Erexneuyou',255,65535,65535,4294967295,'\0','\0'),(5705,'Icfrecu',255,65535,65535,4294967295,'\0','\0'),(5706,'Oxinauara',255,65535,65535,4294967295,'\0','\0'),(5707,'Gloiwaeec',255,65535,65535,4294967295,'\0','\0'),(5708,'Oivtenegyme',255,65535,65535,4294967295,'\0','\0'),(5709,'Loang',255,65535,65535,4294967295,'\0','\0'),(5710,'Oonphaant',255,65535,65535,4294967295,'\0','\0'),(5711,'Knyaestu',255,65535,65535,4294967295,'\0','\0'),(5712,'Aylie',255,65535,65535,4294967295,'\0','\0'),(5713,'Afege',255,65535,65535,4294967295,'\0','\0'),(5714,'Isea',255,65535,65535,4294967295,'\0','\0'),(5715,'Ethlieritio',255,65535,65535,4294967295,'\0','\0'),(5716,'Rerse',255,65535,65535,4294967295,'\0','\0'),(5717,'Udireati',255,65535,65535,4294967295,'\0','\0'),(5718,'Direra',255,65535,65535,4294967295,'\0','\0'),(5719,'Eluaysuu',255,65535,65535,4294967295,'\0','\0'),(5720,'Orye',255,65535,65535,4294967295,'\0','\0'),(5721,'Gaicilunbry',255,65535,65535,4294967295,'\0','\0'),(5722,'Aeteca',255,65535,65535,4294967295,'\0','\0'),(5723,'Aealiba',255,65535,65535,4294967295,'\0','\0'),(5724,'Yieyaer',255,65535,65535,4294967295,'\0','\0'),(5725,'Reinbeniehco',255,65535,65535,4294967295,'\0','\0'),(5726,'Atwao',255,65535,65535,4294967295,'\0','\0'),(5727,'Amabicesgefu',255,65535,65535,4294967295,'\0','\0'),(5728,'Araolsercra',255,65535,65535,4294967295,'\0','\0'),(5729,'Maialei',255,65535,65535,4294967295,'\0','\0'),(5730,'Bleiployga',255,65535,65535,4294967295,'\0','\0'),(5731,'Esproe',255,65535,65535,4294967295,'\0','\0'),(5732,'Etico',255,65535,65535,4294967295,'\0','\0'),(5733,'Nian',255,65535,65535,4294967295,'\0','\0'),(5734,'Oheal',255,65535,65535,4294967295,'\0','\0'),(5735,'Iolam',255,65535,65535,4294967295,'\0','\0'),(5736,'Asseyayle',255,65535,65535,4294967295,'\0','\0'),(5737,'Uatishueon',255,65535,65535,4294967295,'\0','\0'),(5738,'Iciine',255,65535,65535,4294967295,'\0','\0'),(5739,'Itunealsteon',255,65535,65535,4294967295,'\0','\0'),(5740,'Othiondarat',255,65535,65535,4294967295,'\0','\0'),(5741,'Xaiascily',255,65535,65535,4294967295,'\0','\0'),(5742,'Ugeulifare',255,65535,65535,4294967295,'\0','\0'),(5743,'Eleiaear',255,65535,65535,4294967295,'\0','\0'),(5744,'Roiseopkno',255,65535,65535,4294967295,'\0','\0'),(5745,'Lautteenop',255,65535,65535,4294967295,'\0','\0'),(5746,'Ysgerpak',255,65535,65535,4294967295,'\0','\0'),(5747,'Aseucrais',255,65535,65535,4294967295,'\0','\0'),(5748,'Avosite',255,65535,65535,4294967295,'\0','\0'),(5749,'Ivpei',255,65535,65535,4294967295,'\0','\0'),(5750,'Edeai',255,65535,65535,4294967295,'\0','\0'),(5751,'Abock',255,65535,65535,4294967295,'\0','\0'),(5752,'Ogaiore',255,65535,65535,4294967295,'\0','\0'),(5753,'Iqaevaszo',255,65535,65535,4294967295,'\0','\0'),(5754,'Roluit',255,65535,65535,4294967295,'\0','\0'),(5755,'Goitisniyo',255,65535,65535,4294967295,'\0','\0'),(5756,'Tynaolyme',255,65535,65535,4294967295,'\0','\0'),(5757,'Edichaeirm',255,65535,65535,4294967295,'\0','\0'),(5758,'Ileawexle',255,65535,65535,4294967295,'\0','\0'),(5759,'Mimiayeno',255,65535,65535,4294967295,'\0','\0'),(5760,'Besuaog',255,65535,65535,4294967295,'\0','\0'),(5761,'Daotanyis',255,65535,65535,4294967295,'\0','\0'),(5762,'Atreue',255,65535,65535,4294967295,'\0','\0'),(5763,'Acrosuiye',255,65535,65535,4294967295,'\0','\0'),(5764,'Gailydiuluj',255,65535,65535,4294967295,'\0','\0'),(5765,'Oigie',255,65535,65535,4294967295,'\0','\0'),(5766,'Fyunralu',255,65535,65535,4294967295,'\0','\0'),(5767,'Ugesatoum',255,65535,65535,4294967295,'\0','\0'),(5768,'Yrsebimadior',255,65535,65535,4294967295,'\0','\0'),(5769,'Aticat',255,65535,65535,4294967295,'\0','\0'),(5770,'Olauria',255,65535,65535,4294967295,'\0','\0'),(5771,'Scoedbrica',255,65535,65535,4294967295,'\0','\0'),(5772,'Eogoaita',255,65535,65535,4294967295,'\0','\0'),(5773,'Eluoatsepla',255,65535,65535,4294967295,'\0','\0'),(5774,'Etussnedeile',255,65535,65535,4294967295,'\0','\0'),(5775,'Nela',255,65535,65535,4294967295,'\0','\0'),(5776,'Lenaexraesh',255,65535,65535,4294967295,'\0','\0'),(5777,'Meprios',255,65535,65535,4294967295,'\0','\0'),(5778,'Oeycpreucmu',255,65535,65535,4294967295,'\0','\0'),(5779,'Oukne',255,65535,65535,4294967295,'\0','\0'),(5780,'Oneah',255,65535,65535,4294967295,'\0','\0'),(5781,'Mialelian',255,65535,65535,4294967295,'\0','\0'),(5782,'Lionian',255,65535,65535,4294967295,'\0','\0'),(5783,'Roindebike',255,65535,65535,4294967295,'\0','\0'),(5784,'Zese',255,65535,65535,4294967295,'\0','\0'),(5785,'Aechiadad',255,65535,65535,4294967295,'\0','\0'),(5786,'Yeaab',255,65535,65535,4294967295,'\0','\0'),(5787,'Upasumdou',255,65535,65535,4294967295,'\0','\0'),(5788,'Eaerair',255,65535,65535,4294967295,'\0','\0'),(5789,'Neudtaut',255,65535,65535,4294967295,'\0','\0'),(5790,'Pieiule',255,65535,65535,4294967295,'\0','\0'),(5791,'Uticnoin',255,65535,65535,4294967295,'\0','\0'),(5792,'Lericaity',255,65535,65535,4294967295,'\0','\0'),(5793,'Ecsucoengce',255,65535,65535,4294967295,'\0','\0'),(5794,'Iatwostry',255,65535,65535,4294967295,'\0','\0'),(5795,'Yaeahsi',255,65535,65535,4294967295,'\0','\0'),(5796,'Nelolelu',255,65535,65535,4294967295,'\0','\0'),(5797,'Olerdobaoeck',255,65535,65535,4294967295,'\0','\0'),(5798,'Ihoco',255,65535,65535,4294967295,'\0','\0'),(5799,'Yoite',255,65535,65535,4294967295,'\0','\0'),(5800,'Enunen',255,65535,65535,4294967295,'\0','\0'),(5801,'Itacaurgre',255,65535,65535,4294967295,'\0','\0'),(5802,'Telioeff',255,65535,65535,4294967295,'\0','\0'),(5803,'Yeatehreeri',255,65535,65535,4294967295,'\0','\0'),(5804,'Oqneogumoe',255,65535,65535,4294967295,'\0','\0'),(5805,'Empoyisae',255,65535,65535,4294967295,'\0','\0'),(5806,'Aanreoteh',255,65535,65535,4294967295,'\0','\0'),(5807,'Ofka',255,65535,65535,4294967295,'\0','\0'),(5808,'Estcro',255,65535,65535,4294967295,'\0','\0'),(5809,'Ayene',255,65535,65535,4294967295,'\0','\0'),(5810,'Orynkemeri',255,65535,65535,4294967295,'\0','\0'),(5811,'Veta',255,65535,65535,4294967295,'\0','\0'),(5812,'Imaipyi',255,65535,65535,4294967295,'\0','\0'),(5813,'Monayr',255,65535,65535,4294967295,'\0','\0'),(5814,'Teiteoplao',255,65535,65535,4294967295,'\0','\0'),(5815,'Acyeyteyba',255,65535,65535,4294967295,'\0','\0'),(5816,'Freaego',255,65535,65535,4294967295,'\0','\0'),(5817,'Suameobint',255,65535,65535,4294967295,'\0','\0'),(5818,'Ilaylnoaryo',255,65535,65535,4294967295,'\0','\0'),(5819,'Whorupyrhoco',255,65535,65535,4294967295,'\0','\0'),(5820,'Ebieffsly',255,65535,65535,4294967295,'\0','\0'),(5821,'Ulnecrizyur',255,65535,65535,4294967295,'\0','\0'),(5822,'Lyeicsuompbu',255,65535,65535,4294967295,'\0','\0'),(5823,'Oynerena',255,65535,65535,4294967295,'\0','\0'),(5824,'Enolsuaman',255,65535,65535,4294967295,'\0','\0'),(5825,'Ahlioabat',255,65535,65535,4294967295,'\0','\0'),(5826,'Ussacyeirve',255,65535,65535,4294967295,'\0','\0'),(5827,'Omesiatere',255,65535,65535,4294967295,'\0','\0'),(5828,'Agorid',255,65535,65535,4294967295,'\0','\0'),(5829,'Asesia',255,65535,65535,4294967295,'\0','\0'),(5830,'Uptoetstepe',255,65535,65535,4294967295,'\0','\0'),(5831,'Oceeurea',255,65535,65535,4294967295,'\0','\0'),(5832,'Edereiqin',255,65535,65535,4294967295,'\0','\0'),(5833,'Iirnaous',255,65535,65535,4294967295,'\0','\0'),(5834,'Ielycgoest',255,65535,65535,4294967295,'\0','\0'),(5835,'Woho',255,65535,65535,4294967295,'\0','\0'),(5836,'Lipeoteo',255,65535,65535,4294967295,'\0','\0'),(5837,'Efleidureyp',255,65535,65535,4294967295,'\0','\0'),(5838,'Ismeraey',255,65535,65535,4294967295,'\0','\0'),(5839,'Seisewpea',255,65535,65535,4294967295,'\0','\0'),(5840,'Mabi',255,65535,65535,4294967295,'\0','\0'),(5841,'Teatares',255,65535,65535,4294967295,'\0','\0'),(5842,'Elaren',255,65535,65535,4294967295,'\0','\0'),(5843,'Palaolali',255,65535,65535,4294967295,'\0','\0'),(5844,'Niufe',255,65535,65535,4294967295,'\0','\0'),(5845,'Nayzussalge',255,65535,65535,4294967295,'\0','\0'),(5846,'Spouola',255,65535,65535,4294967295,'\0','\0'),(5847,'Naerra',255,65535,65535,4294967295,'\0','\0'),(5848,'Aoqlo',255,65535,65535,4294967295,'\0','\0'),(5849,'Obiahchuriar',255,65535,65535,4294967295,'\0','\0'),(5850,'Onrieacscu',255,65535,65535,4294967295,'\0','\0'),(5851,'Opriogioist',255,65535,65535,4294967295,'\0','\0'),(5852,'Inceopri',255,65535,65535,4294967295,'\0','\0'),(5853,'Uortean',255,65535,65535,4294967295,'\0','\0'),(5854,'Ensuytyean',255,65535,65535,4294967295,'\0','\0'),(5855,'Loretyi',255,65535,65535,4294967295,'\0','\0'),(5856,'Tyaudsi',255,65535,65535,4294967295,'\0','\0'),(5857,'Coeckgi',255,65535,65535,4294967295,'\0','\0'),(5858,'Ealtruciy',255,65535,65535,4294967295,'\0','\0'),(5859,'Tuincloli',255,65535,65535,4294967295,'\0','\0'),(5860,'Aeyot',255,65535,65535,4294967295,'\0','\0'),(5861,'Abpeneusho',255,65535,65535,4294967295,'\0','\0'),(5862,'Desoec',255,65535,65535,4294967295,'\0','\0'),(5863,'Ecytuime',255,65535,65535,4294967295,'\0','\0'),(5864,'Ouynie',255,65535,65535,4294967295,'\0','\0'),(5865,'Oynuilmeprog',255,65535,65535,4294967295,'\0','\0'),(5866,'Lilioantatse',255,65535,65535,4294967295,'\0','\0'),(5867,'Cleeoblene',255,65535,65535,4294967295,'\0','\0'),(5868,'Oaebe',255,65535,65535,4294967295,'\0','\0'),(5869,'Icresoye',255,65535,65535,4294967295,'\0','\0'),(5870,'Egcygune',255,65535,65535,4294967295,'\0','\0'),(5871,'Egackduac',255,65535,65535,4294967295,'\0','\0'),(5872,'Eclioybara',255,65535,65535,4294967295,'\0','\0'),(5873,'Anif',255,65535,65535,4294967295,'\0','\0'),(5874,'Atoeibne',255,65535,65535,4294967295,'\0','\0'),(5875,'Optatealo',255,65535,65535,4294967295,'\0','\0'),(5876,'Ieye',255,65535,65535,4294967295,'\0','\0'),(5877,'Epiguseme',255,65535,65535,4294967295,'\0','\0'),(5878,'Umscrei',255,65535,65535,4294967295,'\0','\0'),(5879,'Egelira',255,65535,65535,4294967295,'\0','\0'),(5880,'Ystmahioayti',255,65535,65535,4294967295,'\0','\0'),(5881,'Riatef',255,65535,65535,4294967295,'\0','\0'),(5882,'Iteceniahe',255,65535,65535,4294967295,'\0','\0'),(5883,'Necoeste',255,65535,65535,4294967295,'\0','\0'),(5884,'Inaktolave',255,65535,65535,4294967295,'\0','\0'),(5885,'Otativinrira',255,65535,65535,4294967295,'\0','\0'),(5886,'Odolaranro',255,65535,65535,4294967295,'\0','\0'),(5887,'Hasomeoboht',255,65535,65535,4294967295,'\0','\0'),(5888,'Schoetalepry',255,65535,65535,4294967295,'\0','\0'),(5889,'Uyhi',255,65535,65535,4294967295,'\0','\0'),(5890,'Neiothesibay',255,65535,65535,4294967295,'\0','\0'),(5891,'Straideune',255,65535,65535,4294967295,'\0','\0'),(5892,'Metyloa',255,65535,65535,4294967295,'\0','\0'),(5893,'Oyeb',255,65535,65535,4294967295,'\0','\0'),(5894,'Assamivtinu',255,65535,65535,4294967295,'\0','\0'),(5895,'Ingumipaeste',255,65535,65535,4294967295,'\0','\0'),(5896,'Urtnemorewro',255,65535,65535,4294967295,'\0','\0'),(5897,'Lyoas',255,65535,65535,4294967295,'\0','\0'),(5898,'Aouit',255,65535,65535,4294967295,'\0','\0'),(5899,'Bypaesae',255,65535,65535,4294967295,'\0','\0'),(5900,'Anby',255,65535,65535,4294967295,'\0','\0'),(5901,'Ufun',255,65535,65535,4294967295,'\0','\0'),(5902,'Toiorthi',255,65535,65535,4294967295,'\0','\0'),(5903,'Moayayn',255,65535,65535,4294967295,'\0','\0'),(5904,'Steneaig',255,65535,65535,4294967295,'\0','\0'),(5905,'Eciltheolste',255,65535,65535,4294967295,'\0','\0'),(5906,'Ipypia',255,65535,65535,4294967295,'\0','\0'),(5907,'Eoleasya',255,65535,65535,4294967295,'\0','\0'),(5908,'Intky',255,65535,65535,4294967295,'\0','\0'),(5909,'Eteyi',255,65535,65535,4294967295,'\0','\0'),(5910,'Yeacauopon',255,65535,65535,4294967295,'\0','\0'),(5911,'Althe',255,65535,65535,4294967295,'\0','\0'),(5912,'Ainleane',255,65535,65535,4294967295,'\0','\0'),(5913,'Liaitaruor',255,65535,65535,4294967295,'\0','\0'),(5914,'Orasicime',255,65535,65535,4294967295,'\0','\0'),(5915,'Areadmeo',255,65535,65535,4294967295,'\0','\0'),(5916,'Naisbi',255,65535,65535,4294967295,'\0','\0'),(5917,'Erpichoes',255,65535,65535,4294967295,'\0','\0'),(5918,'Roimeton',255,65535,65535,4294967295,'\0','\0'),(5919,'Omayageossug',255,65535,65535,4294967295,'\0','\0'),(5920,'Tayalraswoco',255,65535,65535,4294967295,'\0','\0'),(5921,'Idtreiess',255,65535,65535,4294967295,'\0','\0'),(5922,'Iurylitre',255,65535,65535,4294967295,'\0','\0'),(5923,'Omayphi',255,65535,65535,4294967295,'\0','\0'),(5924,'Aboa',255,65535,65535,4294967295,'\0','\0'),(5925,'Isire',255,65535,65535,4294967295,'\0','\0'),(5926,'Icast',255,65535,65535,4294967295,'\0','\0'),(5927,'Ehus',255,65535,65535,4294967295,'\0','\0'),(5928,'Eisybote',255,65535,65535,4294967295,'\0','\0'),(5929,'Eryrlu',255,65535,65535,4294967295,'\0','\0'),(5930,'Bipuinara',255,65535,65535,4294967295,'\0','\0'),(5931,'Revapaoyera',255,65535,65535,4294967295,'\0','\0'),(5932,'Yoyloby',255,65535,65535,4294967295,'\0','\0'),(5933,'Colot',255,65535,65535,4294967295,'\0','\0'),(5934,'Borao',255,65535,65535,4294967295,'\0','\0'),(5935,'Iingiti',255,65535,65535,4294967295,'\0','\0'),(5936,'Popepaliti',255,65535,65535,4294967295,'\0','\0'),(5937,'Loerdiunse',255,65535,65535,4294967295,'\0','\0'),(5938,'Iinine',255,65535,65535,4294967295,'\0','\0'),(5939,'Hehi',255,65535,65535,4294967295,'\0','\0'),(5940,'Entiba',255,65535,65535,4294967295,'\0','\0'),(5941,'Meaokdithebo',255,65535,65535,4294967295,'\0','\0'),(5942,'Nedaico',255,65535,65535,4294967295,'\0','\0'),(5943,'Opeti',255,65535,65535,4294967295,'\0','\0'),(5944,'Exyssaltele',255,65535,65535,4294967295,'\0','\0'),(5945,'Laiutueston',255,65535,65535,4294967295,'\0','\0'),(5946,'Oycu',255,65535,65535,4294967295,'\0','\0'),(5947,'Urowackteri',255,65535,65535,4294967295,'\0','\0'),(5948,'Iluoeng',255,65535,65535,4294967295,'\0','\0'),(5949,'Oladraze',255,65535,65535,4294967295,'\0','\0'),(5950,'Veem',255,65535,65535,4294967295,'\0','\0'),(5951,'Roawimgurine',255,65535,65535,4294967295,'\0','\0'),(5952,'Erdcostalete',255,65535,65535,4294967295,'\0','\0'),(5953,'Eessossildid',255,65535,65535,4294967295,'\0','\0'),(5954,'Maexonexno',255,65535,65535,4294967295,'\0','\0'),(5955,'Aerei',255,65535,65535,4294967295,'\0','\0'),(5956,'Eftsuaor',255,65535,65535,4294967295,'\0','\0'),(5957,'Nerea',255,65535,65535,4294967295,'\0','\0'),(5958,'Yoliand',255,65535,65535,4294967295,'\0','\0'),(5959,'Akconeaom',255,65535,65535,4294967295,'\0','\0'),(5960,'Luil',255,65535,65535,4294967295,'\0','\0'),(5961,'Edagipva',255,65535,65535,4294967295,'\0','\0'),(5962,'Acarkothgoyo',255,65535,65535,4294967295,'\0','\0'),(5963,'Ifonassungak',255,65535,65535,4294967295,'\0','\0'),(5964,'Urto',255,65535,65535,4294967295,'\0','\0'),(5965,'Jokeenacke',255,65535,65535,4294967295,'\0','\0'),(5966,'Itakesiness',255,65535,65535,4294967295,'\0','\0'),(5967,'Amichogult',255,65535,65535,4294967295,'\0','\0'),(5968,'Ewoel',255,65535,65535,4294967295,'\0','\0'),(5969,'Caomongi',255,65535,65535,4294967295,'\0','\0'),(5970,'Ealavoara',255,65535,65535,4294967295,'\0','\0'),(5971,'Elostaenige',255,65535,65535,4294967295,'\0','\0'),(5972,'Waerleicotme',255,65535,65535,4294967295,'\0','\0'),(5973,'Epeypre',255,65535,65535,4294967295,'\0','\0'),(5974,'Abtiowa',255,65535,65535,4294967295,'\0','\0'),(5975,'Nefedwestri',255,65535,65535,4294967295,'\0','\0'),(5976,'Asactoo',255,65535,65535,4294967295,'\0','\0'),(5977,'Aghsesume',255,65535,65535,4294967295,'\0','\0'),(5978,'Itraahalxoa',255,65535,65535,4294967295,'\0','\0'),(5979,'Ozze',255,65535,65535,4294967295,'\0','\0'),(5980,'Omaera',255,65535,65535,4294967295,'\0','\0'),(5981,'Gebiiow',255,65535,65535,4294967295,'\0','\0'),(5982,'Lekieoati',255,65535,65535,4294967295,'\0','\0'),(5983,'Ewoaicutre',255,65535,65535,4294967295,'\0','\0'),(5984,'Eoal',255,65535,65535,4294967295,'\0','\0'),(5985,'Else',255,65535,65535,4294967295,'\0','\0'),(5986,'Altaoho',255,65535,65535,4294967295,'\0','\0'),(5987,'Spoecliet',255,65535,65535,4294967295,'\0','\0'),(5988,'Isentrenoiem',255,65535,65535,4294967295,'\0','\0'),(5989,'Anain',255,65535,65535,4294967295,'\0','\0'),(5990,'Inatuawe',255,65535,65535,4294967295,'\0','\0'),(5991,'Enludeoyio',255,65535,65535,4294967295,'\0','\0'),(5992,'Solaentoc',255,65535,65535,4294967295,'\0','\0'),(5993,'Otreoril',255,65535,65535,4294967295,'\0','\0'),(5994,'Zatoerois',255,65535,65535,4294967295,'\0','\0'),(5995,'Teyoto',255,65535,65535,4294967295,'\0','\0'),(5996,'Ogchoa',255,65535,65535,4294967295,'\0','\0'),(5997,'Tigetaapinus',255,65535,65535,4294967295,'\0','\0'),(5998,'Oerostat',255,65535,65535,4294967295,'\0','\0'),(5999,'Uobruy',255,65535,65535,4294967295,'\0','\0'),(6000,'Anotioa',255,65535,65535,4294967295,'\0','\0'),(6001,'Eizis',255,65535,65535,4294967295,'\0','\0'),(6002,'Toului',255,65535,65535,4294967295,'\0','\0'),(6003,'Noerabeit',255,65535,65535,4294967295,'\0','\0'),(6004,'Laeric',255,65535,65535,4294967295,'\0','\0'),(6005,'Ianeoud',255,65535,65535,4294967295,'\0','\0'),(6006,'Adalitos',255,65535,65535,4294967295,'\0','\0'),(6007,'Hoinrenorore',255,65535,65535,4294967295,'\0','\0'),(6008,'Mogu',255,65535,65535,4294967295,'\0','\0'),(6009,'Orathiclaa',255,65535,65535,4294967295,'\0','\0'),(6010,'Icaav',255,65535,65535,4294967295,'\0','\0'),(6011,'Utilhoumci',255,65535,65535,4294967295,'\0','\0'),(6012,'Iuilte',255,65535,65535,4294967295,'\0','\0'),(6013,'Erkveke',255,65535,65535,4294967295,'\0','\0'),(6014,'Goneiel',255,65535,65535,4294967295,'\0','\0'),(6015,'Yeangif',255,65535,65535,4294967295,'\0','\0'),(6016,'Gratongio',255,65535,65535,4294967295,'\0','\0'),(6017,'Nepiro',255,65535,65535,4294967295,'\0','\0'),(6018,'Yaijirdse',255,65535,65535,4294967295,'\0','\0'),(6019,'Lagrozina',255,65535,65535,4294967295,'\0','\0'),(6020,'Eraic',255,65535,65535,4294967295,'\0','\0'),(6021,'Oferieder',255,65535,65535,4294967295,'\0','\0'),(6022,'Raiclyalip',255,65535,65535,4294967295,'\0','\0'),(6023,'Pecoabon',255,65535,65535,4294967295,'\0','\0'),(6024,'Itosin',255,65535,65535,4294967295,'\0','\0'),(6025,'Orongpuildi',255,65535,65535,4294967295,'\0','\0'),(6026,'Gaiheupe',255,65535,65535,4294967295,'\0','\0'),(6027,'Unkokulo',255,65535,65535,4294967295,'\0','\0'),(6028,'Iswoirilo',255,65535,65535,4294967295,'\0','\0'),(6029,'Atebiha',255,65535,65535,4294967295,'\0','\0'),(6030,'Chiesanaxi',255,65535,65535,4294967295,'\0','\0'),(6031,'Lyoyabonspry',255,65535,65535,4294967295,'\0','\0'),(6032,'Isitsheti',255,65535,65535,4294967295,'\0','\0'),(6033,'Icdroenam',255,65535,65535,4294967295,'\0','\0'),(6034,'Icaonehopat',255,65535,65535,4294967295,'\0','\0'),(6035,'Ereioesfe',255,65535,65535,4294967295,'\0','\0'),(6036,'Ibtriat',255,65535,65535,4294967295,'\0','\0'),(6037,'Uotree',255,65535,65535,4294967295,'\0','\0'),(6038,'Lieolieniz',255,65535,65535,4294967295,'\0','\0'),(6039,'Otei',255,65535,65535,4294967295,'\0','\0'),(6040,'Wolavoeyazfo',255,65535,65535,4294967295,'\0','\0'),(6041,'Ogelarti',255,65535,65535,4294967295,'\0','\0'),(6042,'Ihtuauutgi',255,65535,65535,4294967295,'\0','\0'),(6043,'Poehopbeso',255,65535,65535,4294967295,'\0','\0'),(6044,'Isbi',255,65535,65535,4294967295,'\0','\0'),(6045,'Yapoao',255,65535,65535,4294967295,'\0','\0'),(6046,'Opifruilesy',255,65535,65535,4294967295,'\0','\0'),(6047,'Isuniddeosy',255,65535,65535,4294967295,'\0','\0'),(6048,'Mestamia',255,65535,65535,4294967295,'\0','\0'),(6049,'Antponivierd',255,65535,65535,4294967295,'\0','\0'),(6050,'Etorbiaty',255,65535,65535,4294967295,'\0','\0'),(6051,'Ocmi',255,65535,65535,4294967295,'\0','\0'),(6052,'Omleungan',255,65535,65535,4294967295,'\0','\0'),(6053,'Ucinanois',255,65535,65535,4294967295,'\0','\0'),(6054,'Haerehe',255,65535,65535,4294967295,'\0','\0'),(6055,'Etushentlo',255,65535,65535,4294967295,'\0','\0'),(6056,'Urleiayat',255,65535,65535,4294967295,'\0','\0'),(6057,'Etiatongonin',255,65535,65535,4294967295,'\0','\0'),(6058,'Teryeyee',255,65535,65535,4294967295,'\0','\0'),(6059,'Loesem',255,65535,65535,4294967295,'\0','\0'),(6060,'Yeadisin',255,65535,65535,4294967295,'\0','\0'),(6061,'Erayohidro',255,65535,65535,4294967295,'\0','\0'),(6062,'Oaberae',255,65535,65535,4294967295,'\0','\0'),(6063,'Bireoldulees',255,65535,65535,4294967295,'\0','\0'),(6064,'Emel',255,65535,65535,4294967295,'\0','\0'),(6065,'Iulnikema',255,65535,65535,4294967295,'\0','\0'),(6066,'Ertiie',255,65535,65535,4294967295,'\0','\0'),(6067,'Usvyolab',255,65535,65535,4294967295,'\0','\0'),(6068,'Uchur',255,65535,65535,4294967295,'\0','\0'),(6069,'Zeage',255,65535,65535,4294967295,'\0','\0'),(6070,'Ordo',255,65535,65535,4294967295,'\0','\0'),(6071,'Eyeictea',255,65535,65535,4294967295,'\0','\0'),(6072,'Uxan',255,65535,65535,4294967295,'\0','\0'),(6073,'Dedierreuti',255,65535,65535,4294967295,'\0','\0'),(6074,'Xyocynade',255,65535,65535,4294967295,'\0','\0'),(6075,'Awraevup',255,65535,65535,4294967295,'\0','\0'),(6076,'Eovisin',255,65535,65535,4294967295,'\0','\0'),(6077,'Elatoeocan',255,65535,65535,4294967295,'\0','\0'),(6078,'Iroiya',255,65535,65535,4294967295,'\0','\0'),(6079,'Irxi',255,65535,65535,4294967295,'\0','\0'),(6080,'Onmimcenei',255,65535,65535,4294967295,'\0','\0'),(6081,'Eththomo',255,65535,65535,4294967295,'\0','\0'),(6082,'Weiozspe',255,65535,65535,4294967295,'\0','\0'),(6083,'Olaeranax',255,65535,65535,4294967295,'\0','\0'),(6084,'Moeei',255,65535,65535,4294967295,'\0','\0'),(6085,'Ibruakhaol',255,65535,65535,4294967295,'\0','\0'),(6086,'Elasiaer',255,65535,65535,4294967295,'\0','\0'),(6087,'Tiesantey',255,65535,65535,4294967295,'\0','\0'),(6088,'Icaife',255,65535,65535,4294967295,'\0','\0'),(6089,'Motoyderniit',255,65535,65535,4294967295,'\0','\0'),(6090,'Ipolernaer',255,65535,65535,4294967295,'\0','\0'),(6091,'Aysafeu',255,65535,65535,4294967295,'\0','\0'),(6092,'Ubiod',255,65535,65535,4294967295,'\0','\0'),(6093,'Aconmei',255,65535,65535,4294967295,'\0','\0'),(6094,'Imgaansleip',255,65535,65535,4294967295,'\0','\0'),(6095,'Odociho',255,65535,65535,4294967295,'\0','\0'),(6096,'Emehatiypi',255,65535,65535,4294967295,'\0','\0'),(6097,'Uloeo',255,65535,65535,4294967295,'\0','\0'),(6098,'Iehtwio',255,65535,65535,4294967295,'\0','\0'),(6099,'Esmmucoe',255,65535,65535,4294967295,'\0','\0'),(6100,'Icusaid',255,65535,65535,4294967295,'\0','\0'),(6101,'Iddexpi',255,65535,65535,4294967295,'\0','\0'),(6102,'Utaiuga',255,65535,65535,4294967295,'\0','\0'),(6103,'Erese',255,65535,65535,4294967295,'\0','\0'),(6104,'Ladoa',255,65535,65535,4294967295,'\0','\0'),(6105,'Prohylo',255,65535,65535,4294967295,'\0','\0'),(6106,'Earmo',255,65535,65535,4294967295,'\0','\0'),(6107,'Winoabtegrao',255,65535,65535,4294967295,'\0','\0'),(6108,'Ivaojaiu',255,65535,65535,4294967295,'\0','\0'),(6109,'Eoffi',255,65535,65535,4294967295,'\0','\0'),(6110,'Ehvac',255,65535,65535,4294967295,'\0','\0'),(6111,'Ohoyodojesi',255,65535,65535,4294967295,'\0','\0'),(6112,'Igrau',255,65535,65535,4294967295,'\0','\0'),(6113,'Taice',255,65535,65535,4294967295,'\0','\0'),(6114,'Nireolastula',255,65535,65535,4294967295,'\0','\0'),(6115,'Eprufusi',255,65535,65535,4294967295,'\0','\0'),(6116,'Catiiere',255,65535,65535,4294967295,'\0','\0'),(6117,'Onoruiybe',255,65535,65535,4294967295,'\0','\0'),(6118,'Tichicu',255,65535,65535,4294967295,'\0','\0'),(6119,'Iatxioew',255,65535,65535,4294967295,'\0','\0'),(6120,'Aeizriz',255,65535,65535,4294967295,'\0','\0'),(6121,'Myraae',255,65535,65535,4294967295,'\0','\0'),(6122,'Utolica',255,65535,65535,4294967295,'\0','\0'),(6123,'Apciane',255,65535,65535,4294967295,'\0','\0'),(6124,'Coloutatri',255,65535,65535,4294967295,'\0','\0'),(6125,'Proabraict',255,65535,65535,4294967295,'\0','\0'),(6126,'Iotudiu',255,65535,65535,4294967295,'\0','\0'),(6127,'Onoe',255,65535,65535,4294967295,'\0','\0'),(6128,'Nitrobeosais',255,65535,65535,4294967295,'\0','\0'),(6129,'Eayreano',255,65535,65535,4294967295,'\0','\0'),(6130,'Oustco',255,65535,65535,4294967295,'\0','\0'),(6131,'Diatsutak',255,65535,65535,4294967295,'\0','\0'),(6132,'Uniia',255,65535,65535,4294967295,'\0','\0'),(6133,'Aityhush',255,65535,65535,4294967295,'\0','\0'),(6134,'Ostbiamun',255,65535,65535,4294967295,'\0','\0'),(6135,'Wheolee',255,65535,65535,4294967295,'\0','\0'),(6136,'Saecio',255,65535,65535,4294967295,'\0','\0'),(6137,'Eiluyiiluck',255,65535,65535,4294967295,'\0','\0'),(6138,'Yshfri',255,65535,65535,4294967295,'\0','\0'),(6139,'Caneontere',255,65535,65535,4294967295,'\0','\0'),(6140,'Iseryblaed',255,65535,65535,4294967295,'\0','\0'),(6141,'Eoareab',255,65535,65535,4294967295,'\0','\0'),(6142,'Ongrohip',255,65535,65535,4294967295,'\0','\0'),(6143,'Oywegaelyle',255,65535,65535,4294967295,'\0','\0'),(6144,'Swioyi',255,65535,65535,4294967295,'\0','\0'),(6145,'Oael',255,65535,65535,4294967295,'\0','\0'),(6146,'Asententsoqu',255,65535,65535,4294967295,'\0','\0'),(6147,'Udussoniio',255,65535,65535,4294967295,'\0','\0'),(6148,'Oustada',255,65535,65535,4294967295,'\0','\0'),(6149,'Telyep',255,65535,65535,4294967295,'\0','\0'),(6150,'Essanlyeoc',255,65535,65535,4294967295,'\0','\0'),(6151,'Tiroen',255,65535,65535,4294967295,'\0','\0'),(6152,'Ravemordar',255,65535,65535,4294967295,'\0','\0'),(6153,'Yaismevaonti',255,65535,65535,4294967295,'\0','\0'),(6154,'Edbointoivso',255,65535,65535,4294967295,'\0','\0'),(6155,'Irianoft',255,65535,65535,4294967295,'\0','\0'),(6156,'Anwai',255,65535,65535,4294967295,'\0','\0'),(6157,'Veuenaben',255,65535,65535,4294967295,'\0','\0'),(6158,'Ieleiatno',255,65535,65535,4294967295,'\0','\0'),(6159,'Coaprorodo',255,65535,65535,4294967295,'\0','\0'),(6160,'Unie',255,65535,65535,4294967295,'\0','\0'),(6161,'Retre',255,65535,65535,4294967295,'\0','\0'),(6162,'Phefaseya',255,65535,65535,4294967295,'\0','\0'),(6163,'Aneipsemi',255,65535,65535,4294967295,'\0','\0'),(6164,'Itoyoe',255,65535,65535,4294967295,'\0','\0'),(6165,'Stainetesibi',255,65535,65535,4294967295,'\0','\0'),(6166,'Rayiodflea',255,65535,65535,4294967295,'\0','\0'),(6167,'Ackca',255,65535,65535,4294967295,'\0','\0'),(6168,'Owfioroi',255,65535,65535,4294967295,'\0','\0'),(6169,'Eretnaivoil',255,65535,65535,4294967295,'\0','\0'),(6170,'Errieegh',255,65535,65535,4294967295,'\0','\0'),(6171,'Turaorenin',255,65535,65535,4294967295,'\0','\0'),(6172,'Iueshu',255,65535,65535,4294967295,'\0','\0'),(6173,'Aronaw',255,65535,65535,4294967295,'\0','\0'),(6174,'Anscry',255,65535,65535,4294967295,'\0','\0'),(6175,'Lyeneysena',255,65535,65535,4294967295,'\0','\0'),(6176,'Otoumem',255,65535,65535,4294967295,'\0','\0'),(6177,'Striustiul',255,65535,65535,4294967295,'\0','\0'),(6178,'Ejaghteab',255,65535,65535,4294967295,'\0','\0'),(6179,'Piifmieig',255,65535,65535,4294967295,'\0','\0'),(6180,'Onachde',255,65535,65535,4294967295,'\0','\0'),(6181,'Uliarniomath',255,65535,65535,4294967295,'\0','\0'),(6182,'Idoxteorcete',255,65535,65535,4294967295,'\0','\0'),(6183,'Ibunaoen',255,65535,65535,4294967295,'\0','\0'),(6184,'Idaetala',255,65535,65535,4294967295,'\0','\0'),(6185,'Enenogre',255,65535,65535,4294967295,'\0','\0'),(6186,'Bamo',255,65535,65535,4294967295,'\0','\0'),(6187,'Oteyoapar',255,65535,65535,4294967295,'\0','\0'),(6188,'Endeanipet',255,65535,65535,4294967295,'\0','\0'),(6189,'Ecaiitspeas',255,65535,65535,4294967295,'\0','\0'),(6190,'Taestciug',255,65535,65535,4294967295,'\0','\0'),(6191,'Ounaliep',255,65535,65535,4294967295,'\0','\0'),(6192,'Ytoat',255,65535,65535,4294967295,'\0','\0'),(6193,'Oerboteit',255,65535,65535,4294967295,'\0','\0'),(6194,'Tieyengto',255,65535,65535,4294967295,'\0','\0'),(6195,'Uorinphae',255,65535,65535,4294967295,'\0','\0'),(6196,'Repli',255,65535,65535,4294967295,'\0','\0'),(6197,'Paepapakia',255,65535,65535,4294967295,'\0','\0'),(6198,'Seyrig',255,65535,65535,4294967295,'\0','\0'),(6199,'Inot',255,65535,65535,4294967295,'\0','\0'),(6200,'Emyeu',255,65535,65535,4294967295,'\0','\0'),(6201,'Amuancheoh',255,65535,65535,4294967295,'\0','\0'),(6202,'Joame',255,65535,65535,4294967295,'\0','\0'),(6203,'Ribiyhi',255,65535,65535,4294967295,'\0','\0'),(6204,'Efasiam',255,65535,65535,4294967295,'\0','\0'),(6205,'Teiyainew',255,65535,65535,4294967295,'\0','\0'),(6206,'Breypearisa',255,65535,65535,4294967295,'\0','\0'),(6207,'Eyuys',255,65535,65535,4294967295,'\0','\0'),(6208,'Ahilaucusti',255,65535,65535,4294967295,'\0','\0'),(6209,'Etefexgleoy',255,65535,65535,4294967295,'\0','\0'),(6210,'Aeten',255,65535,65535,4294967295,'\0','\0'),(6211,'Aecif',255,65535,65535,4294967295,'\0','\0'),(6212,'Cayorocioyov',255,65535,65535,4294967295,'\0','\0'),(6213,'Isone',255,65535,65535,4294967295,'\0','\0'),(6214,'Onelinifor',255,65535,65535,4294967295,'\0','\0'),(6215,'Rinilio',255,65535,65535,4294967295,'\0','\0'),(6216,'Oeuyaypt',255,65535,65535,4294967295,'\0','\0'),(6217,'Aloapnela',255,65535,65535,4294967295,'\0','\0'),(6218,'Hianseit',255,65535,65535,4294967295,'\0','\0'),(6219,'Ostetiocage',255,65535,65535,4294967295,'\0','\0'),(6220,'Emeniuti',255,65535,65535,4294967295,'\0','\0'),(6221,'Ooiduast',255,65535,65535,4294967295,'\0','\0'),(6222,'Iatyer',255,65535,65535,4294967295,'\0','\0'),(6223,'Aweatyprol',255,65535,65535,4294967295,'\0','\0'),(6224,'Onpihibanglo',255,65535,65535,4294967295,'\0','\0'),(6225,'Iteck',255,65535,65535,4294967295,'\0','\0'),(6226,'Reuterminga',255,65535,65535,4294967295,'\0','\0'),(6227,'Alow',255,65535,65535,4294967295,'\0','\0'),(6228,'Iinepo',255,65535,65535,4294967295,'\0','\0'),(6229,'Siproweire',255,65535,65535,4294967295,'\0','\0'),(6230,'Aesteselua',255,65535,65535,4294967295,'\0','\0'),(6231,'Ifmascee',255,65535,65535,4294967295,'\0','\0'),(6232,'Ineiti',255,65535,65535,4294967295,'\0','\0'),(6233,'Bakeclemide',255,65535,65535,4294967295,'\0','\0'),(6234,'Iiycpue',255,65535,65535,4294967295,'\0','\0'),(6235,'Eptryseinier',255,65535,65535,4294967295,'\0','\0'),(6236,'Niysmtydeyom',255,65535,65535,4294967295,'\0','\0'),(6237,'Isohandaer',255,65535,65535,4294967295,'\0','\0'),(6238,'Neayamwaerre',255,65535,65535,4294967295,'\0','\0'),(6239,'Iraaina',255,65535,65535,4294967295,'\0','\0'),(6240,'Yeesni',255,65535,65535,4294967295,'\0','\0'),(6241,'Pirel',255,65535,65535,4294967295,'\0','\0'),(6242,'Miorth',255,65535,65535,4294967295,'\0','\0'),(6243,'Rueost',255,65535,65535,4294967295,'\0','\0'),(6244,'Eierwece',255,65535,65535,4294967295,'\0','\0'),(6245,'Aichyuseer',255,65535,65535,4294967295,'\0','\0'),(6246,'Aepyaetiko',255,65535,65535,4294967295,'\0','\0'),(6247,'Usve',255,65535,65535,4294967295,'\0','\0'),(6248,'Tynioktuneip',255,65535,65535,4294967295,'\0','\0'),(6249,'Aetsara',255,65535,65535,4294967295,'\0','\0'),(6250,'Caeoabis',255,65535,65535,4294967295,'\0','\0'),(6251,'Erktecoisri',255,65535,65535,4294967295,'\0','\0'),(6252,'Nefreilarma',255,65535,65535,4294967295,'\0','\0'),(6253,'Aiatirden',255,65535,65535,4294967295,'\0','\0'),(6254,'Sier',255,65535,65535,4294967295,'\0','\0'),(6255,'Ikgoweic',255,65535,65535,4294967295,'\0','\0'),(6256,'Izrenediflo',255,65535,65535,4294967295,'\0','\0'),(6257,'Leandekono',255,65535,65535,4294967295,'\0','\0'),(6258,'Poamy',255,65535,65535,4294967295,'\0','\0'),(6259,'Ertmi',255,65535,65535,4294967295,'\0','\0'),(6260,'Omeidswodise',255,65535,65535,4294967295,'\0','\0'),(6261,'Abroese',255,65535,65535,4294967295,'\0','\0'),(6262,'Heieconea',255,65535,65535,4294967295,'\0','\0'),(6263,'Loasoytiiti',255,65535,65535,4294967295,'\0','\0'),(6264,'Orasteca',255,65535,65535,4294967295,'\0','\0'),(6265,'Rutryeroin',255,65535,65535,4294967295,'\0','\0'),(6266,'Oxgefiec',255,65535,65535,4294967295,'\0','\0'),(6267,'Demeta',255,65535,65535,4294967295,'\0','\0'),(6268,'Yabbruseo',255,65535,65535,4294967295,'\0','\0'),(6269,'Cyplo',255,65535,65535,4294967295,'\0','\0'),(6270,'Laatnaixle',255,65535,65535,4294967295,'\0','\0'),(6271,'Tomeyy',255,65535,65535,4294967295,'\0','\0'),(6272,'Omtioidya',255,65535,65535,4294967295,'\0','\0'),(6273,'Uasecingut',255,65535,65535,4294967295,'\0','\0'),(6274,'Lyusro',255,65535,65535,4294967295,'\0','\0'),(6275,'Losaoengug',255,65535,65535,4294967295,'\0','\0'),(6276,'Ebrakeye',255,65535,65535,4294967295,'\0','\0'),(6277,'Iasmont',255,65535,65535,4294967295,'\0','\0'),(6278,'Wiyesa',255,65535,65535,4294967295,'\0','\0'),(6279,'Peer',255,65535,65535,4294967295,'\0','\0'),(6280,'Apigru',255,65535,65535,4294967295,'\0','\0'),(6281,'Cyiupinseqi',255,65535,65535,4294967295,'\0','\0'),(6282,'Alisasak',255,65535,65535,4294967295,'\0','\0'),(6283,'Atoumig',255,65535,65535,4294967295,'\0','\0'),(6284,'Astesapiam',255,65535,65535,4294967295,'\0','\0'),(6285,'Leulrinoasti',255,65535,65535,4294967295,'\0','\0'),(6286,'Ecmealheum',255,65535,65535,4294967295,'\0','\0'),(6287,'Eacutilkeul',255,65535,65535,4294967295,'\0','\0'),(6288,'Oelanymuneth',255,65535,65535,4294967295,'\0','\0'),(6289,'Irtflaeylyc',255,65535,65535,4294967295,'\0','\0'),(6290,'Raitsape',255,65535,65535,4294967295,'\0','\0'),(6291,'Iyetipemo',255,65535,65535,4294967295,'\0','\0'),(6292,'Litaoaxit',255,65535,65535,4294967295,'\0','\0'),(6293,'Oineferda',255,65535,65535,4294967295,'\0','\0'),(6294,'Liinagoyao',255,65535,65535,4294967295,'\0','\0'),(6295,'Unyoelro',255,65535,65535,4294967295,'\0','\0'),(6296,'Astoypote',255,65535,65535,4294967295,'\0','\0'),(6297,'Vude',255,65535,65535,4294967295,'\0','\0'),(6298,'Erevdo',255,65535,65535,4294967295,'\0','\0'),(6299,'Eitial',255,65535,65535,4294967295,'\0','\0'),(6300,'Atatruier',255,65535,65535,4294967295,'\0','\0'),(6301,'Oemenaent',255,65535,65535,4294967295,'\0','\0'),(6302,'Intyungre',255,65535,65535,4294967295,'\0','\0'),(6303,'Uneoncii',255,65535,65535,4294967295,'\0','\0'),(6304,'Onospeaanir',255,65535,65535,4294967295,'\0','\0'),(6305,'Uecigerem',255,65535,65535,4294967295,'\0','\0'),(6306,'Naizeip',255,65535,65535,4294967295,'\0','\0'),(6307,'Iatymiulasp',255,65535,65535,4294967295,'\0','\0'),(6308,'Nioludie',255,65535,65535,4294967295,'\0','\0'),(6309,'Uvogumi',255,65535,65535,4294967295,'\0','\0'),(6310,'Eigabio',255,65535,65535,4294967295,'\0','\0'),(6311,'Rulaneco',255,65535,65535,4294967295,'\0','\0'),(6312,'Naierxiedof',255,65535,65535,4294967295,'\0','\0'),(6313,'Estereruce',255,65535,65535,4294967295,'\0','\0'),(6314,'Reilucotoat',255,65535,65535,4294967295,'\0','\0'),(6315,'Iarie',255,65535,65535,4294967295,'\0','\0'),(6316,'Guacetierfub',255,65535,65535,4294967295,'\0','\0'),(6317,'Ehun',255,65535,65535,4294967295,'\0','\0'),(6318,'Eleaam',255,65535,65535,4294967295,'\0','\0'),(6319,'Maisalimys',255,65535,65535,4294967295,'\0','\0'),(6320,'Ceayloikzien',255,65535,65535,4294967295,'\0','\0'),(6321,'Nanitalscru',255,65535,65535,4294967295,'\0','\0'),(6322,'Aine',255,65535,65535,4294967295,'\0','\0'),(6323,'Ubob',255,65535,65535,4294967295,'\0','\0'),(6324,'Yecaoast',255,65535,65535,4294967295,'\0','\0'),(6325,'Crialcail',255,65535,65535,4294967295,'\0','\0'),(6326,'Araum',255,65535,65535,4294967295,'\0','\0'),(6327,'Peokomoer',255,65535,65535,4294967295,'\0','\0'),(6328,'Liealibiv',255,65535,65535,4294967295,'\0','\0'),(6329,'Etoneihod',255,65535,65535,4294967295,'\0','\0'),(6330,'Aptebindcete',255,65535,65535,4294967295,'\0','\0'),(6331,'Iofatsalaoc',255,65535,65535,4294967295,'\0','\0'),(6332,'Hoeem',255,65535,65535,4294967295,'\0','\0'),(6333,'Utailarosle',255,65535,65535,4294967295,'\0','\0'),(6334,'Beryeshryeaz',255,65535,65535,4294967295,'\0','\0'),(6335,'Ehymasity',255,65535,65535,4294967295,'\0','\0'),(6336,'Ingyoalissi',255,65535,65535,4294967295,'\0','\0'),(6337,'Sulesto',255,65535,65535,4294967295,'\0','\0'),(6338,'Cyej',255,65535,65535,4294967295,'\0','\0'),(6339,'Etiofcata',255,65535,65535,4294967295,'\0','\0'),(6340,'Efeigtiandba',255,65535,65535,4294967295,'\0','\0'),(6341,'Owmemase',255,65535,65535,4294967295,'\0','\0'),(6342,'Ecetsereaib',255,65535,65535,4294967295,'\0','\0'),(6343,'Heoaodea',255,65535,65535,4294967295,'\0','\0'),(6344,'Umeduneose',255,65535,65535,4294967295,'\0','\0'),(6345,'Ifialreo',255,65535,65535,4294967295,'\0','\0'),(6346,'Oaaryi',255,65535,65535,4294967295,'\0','\0'),(6347,'Loobesepya',255,65535,65535,4294967295,'\0','\0'),(6348,'Ethava',255,65535,65535,4294967295,'\0','\0'),(6349,'Ophearetero',255,65535,65535,4294967295,'\0','\0'),(6350,'Roeroco',255,65535,65535,4294967295,'\0','\0'),(6351,'Heuayana',255,65535,65535,4294967295,'\0','\0'),(6352,'Imfeyay',255,65535,65535,4294967295,'\0','\0'),(6353,'Ateya',255,65535,65535,4294967295,'\0','\0'),(6354,'Aykoumew',255,65535,65535,4294967295,'\0','\0'),(6355,'Risiatomta',255,65535,65535,4294967295,'\0','\0'),(6356,'Inerouelni',255,65535,65535,4294967295,'\0','\0'),(6357,'Zereyeeye',255,65535,65535,4294967295,'\0','\0'),(6358,'Upad',255,65535,65535,4294967295,'\0','\0'),(6359,'Ogifa',255,65535,65535,4294967295,'\0','\0'),(6360,'Wapishee',255,65535,65535,4294967295,'\0','\0'),(6361,'Ongedira',255,65535,65535,4294967295,'\0','\0'),(6362,'Lagiahachroe',255,65535,65535,4294967295,'\0','\0'),(6363,'Ponila',255,65535,65535,4294967295,'\0','\0'),(6364,'Anineiengy',255,65535,65535,4294967295,'\0','\0'),(6365,'Igea',255,65535,65535,4294967295,'\0','\0'),(6366,'Seiep',255,65535,65535,4294967295,'\0','\0'),(6367,'Paimtofeo',255,65535,65535,4294967295,'\0','\0'),(6368,'Setuogyc',255,65535,65535,4294967295,'\0','\0'),(6369,'Ocsty',255,65535,65535,4294967295,'\0','\0'),(6370,'Goeira',255,65535,65535,4294967295,'\0','\0'),(6371,'Taawteip',255,65535,65535,4294967295,'\0','\0'),(6372,'Ireyesneo',255,65535,65535,4294967295,'\0','\0'),(6373,'Ypealri',255,65535,65535,4294967295,'\0','\0'),(6374,'Aiirkotera',255,65535,65535,4294967295,'\0','\0'),(6375,'Ieibwane',255,65535,65535,4294967295,'\0','\0'),(6376,'Niroer',255,65535,65535,4294967295,'\0','\0'),(6377,'Paflocooea',255,65535,65535,4294967295,'\0','\0'),(6378,'Avolat',255,65535,65535,4294967295,'\0','\0'),(6379,'Alerle',255,65535,65535,4294967295,'\0','\0'),(6380,'Oarooli',255,65535,65535,4294967295,'\0','\0'),(6381,'Atpaivrialo',255,65535,65535,4294967295,'\0','\0'),(6382,'Caiangidmequ',255,65535,65535,4294967295,'\0','\0'),(6383,'Ownen',255,65535,65535,4294967295,'\0','\0'),(6384,'Aunkocu',255,65535,65535,4294967295,'\0','\0'),(6385,'Atyapaea',255,65535,65535,4294967295,'\0','\0'),(6386,'Iselreeyer',255,65535,65535,4294967295,'\0','\0'),(6387,'Isoneroayma',255,65535,65535,4294967295,'\0','\0'),(6388,'Yevesedoil',255,65535,65535,4294967295,'\0','\0'),(6389,'Aplotebre',255,65535,65535,4294967295,'\0','\0'),(6390,'Bokeishe',255,65535,65535,4294967295,'\0','\0'),(6391,'Umieder',255,65535,65535,4294967295,'\0','\0'),(6392,'Uropraot',255,65535,65535,4294967295,'\0','\0'),(6393,'Unitiuleeft',255,65535,65535,4294967295,'\0','\0'),(6394,'Otokienit',255,65535,65535,4294967295,'\0','\0'),(6395,'Ipirartte',255,65535,65535,4294967295,'\0','\0'),(6396,'Articocamno',255,65535,65535,4294967295,'\0','\0'),(6397,'Uheifaity',255,65535,65535,4294967295,'\0','\0'),(6398,'Xeleenafi',255,65535,65535,4294967295,'\0','\0'),(6399,'Owot',255,65535,65535,4294967295,'\0','\0'),(6400,'Naiae',255,65535,65535,4294967295,'\0','\0'),(6401,'Cokerniuc',255,65535,65535,4294967295,'\0','\0'),(6402,'Ogofru',255,65535,65535,4294967295,'\0','\0'),(6403,'Duemphaewi',255,65535,65535,4294967295,'\0','\0'),(6404,'Raredieroc',255,65535,65535,4294967295,'\0','\0'),(6405,'Unehoay',255,65535,65535,4294967295,'\0','\0'),(6406,'Bomafe',255,65535,65535,4294967295,'\0','\0'),(6407,'Macaosiho',255,65535,65535,4294967295,'\0','\0'),(6408,'Etilitrefi',255,65535,65535,4294967295,'\0','\0'),(6409,'Iyodci',255,65535,65535,4294967295,'\0','\0'),(6410,'Cyeweyejatra',255,65535,65535,4294967295,'\0','\0'),(6411,'Echesiost',255,65535,65535,4294967295,'\0','\0'),(6412,'Itdeoyangie',255,65535,65535,4294967295,'\0','\0'),(6413,'Edeoc',255,65535,65535,4294967295,'\0','\0'),(6414,'Ystroimi',255,65535,65535,4294967295,'\0','\0'),(6415,'Yaoniossabre',255,65535,65535,4294967295,'\0','\0'),(6416,'Etahti',255,65535,65535,4294967295,'\0','\0'),(6417,'Nesiilur',255,65535,65535,4294967295,'\0','\0'),(6418,'Tetuoeeft',255,65535,65535,4294967295,'\0','\0'),(6419,'Ayleeramco',255,65535,65535,4294967295,'\0','\0'),(6420,'Omsuatyp',255,65535,65535,4294967295,'\0','\0'),(6421,'Ismounusnanu',255,65535,65535,4294967295,'\0','\0'),(6422,'Liareub',255,65535,65535,4294967295,'\0','\0'),(6423,'Gryoyng',255,65535,65535,4294967295,'\0','\0'),(6424,'Iceyma',255,65535,65535,4294967295,'\0','\0'),(6425,'Rauyeolero',255,65535,65535,4294967295,'\0','\0'),(6426,'Kajochyyoido',255,65535,65535,4294967295,'\0','\0'),(6427,'Tiwaonira',255,65535,65535,4294967295,'\0','\0'),(6428,'Ofisty',255,65535,65535,4294967295,'\0','\0'),(6429,'Itpoa',255,65535,65535,4294967295,'\0','\0'),(6430,'Icaozhore',255,65535,65535,4294967295,'\0','\0'),(6431,'Ashnandiyg',255,65535,65535,4294967295,'\0','\0'),(6432,'Esseatak',255,65535,65535,4294967295,'\0','\0'),(6433,'Emetopti',255,65535,65535,4294967295,'\0','\0'),(6434,'Aerameesag',255,65535,65535,4294967295,'\0','\0'),(6435,'Ogyonosirndo',255,65535,65535,4294967295,'\0','\0'),(6436,'Raid',255,65535,65535,4294967295,'\0','\0'),(6437,'Umypuxomeen',255,65535,65535,4294967295,'\0','\0'),(6438,'Lati',255,65535,65535,4294967295,'\0','\0'),(6439,'Seif',255,65535,65535,4294967295,'\0','\0'),(6440,'Galomeattien',255,65535,65535,4294967295,'\0','\0'),(6441,'Oabuduethih',255,65535,65535,4294967295,'\0','\0'),(6442,'Lyiz',255,65535,65535,4294967295,'\0','\0'),(6443,'Imneniomei',255,65535,65535,4294967295,'\0','\0'),(6444,'Izuspi',255,65535,65535,4294967295,'\0','\0'),(6445,'Eaoenoct',255,65535,65535,4294967295,'\0','\0'),(6446,'Engmiabru',255,65535,65535,4294967295,'\0','\0'),(6447,'Erae',255,65535,65535,4294967295,'\0','\0'),(6448,'Neeneonoik',255,65535,65535,4294967295,'\0','\0'),(6449,'Etpoyo',255,65535,65535,4294967295,'\0','\0'),(6450,'Bapa',255,65535,65535,4294967295,'\0','\0'),(6451,'Esudraoig',255,65535,65535,4294967295,'\0','\0'),(6452,'Oyeswougis',255,65535,65535,4294967295,'\0','\0'),(6453,'Esleyswi',255,65535,65535,4294967295,'\0','\0'),(6454,'Erihuac',255,65535,65535,4294967295,'\0','\0'),(6455,'Troyosealoy',255,65535,65535,4294967295,'\0','\0'),(6456,'Joatagpuil',255,65535,65535,4294967295,'\0','\0'),(6457,'Obtido',255,65535,65535,4294967295,'\0','\0'),(6458,'Ossnie',255,65535,65535,4294967295,'\0','\0'),(6459,'Ysele',255,65535,65535,4294967295,'\0','\0'),(6460,'Urosaiehy',255,65535,65535,4294967295,'\0','\0'),(6461,'Roteapinooc',255,65535,65535,4294967295,'\0','\0'),(6462,'Atiri',255,65535,65535,4294967295,'\0','\0'),(6463,'Einim',255,65535,65535,4294967295,'\0','\0'),(6464,'Eciirne',255,65535,65535,4294967295,'\0','\0'),(6465,'Aaoperyow',255,65535,65535,4294967295,'\0','\0'),(6466,'Peersecyrou',255,65535,65535,4294967295,'\0','\0'),(6467,'Aoeyoploin',255,65535,65535,4294967295,'\0','\0'),(6468,'Ongyuribaom',255,65535,65535,4294967295,'\0','\0'),(6469,'Teniesmaican',255,65535,65535,4294967295,'\0','\0'),(6470,'Twichui',255,65535,65535,4294967295,'\0','\0'),(6471,'Rasarkynal',255,65535,65535,4294967295,'\0','\0'),(6472,'Ixecatwo',255,65535,65535,4294967295,'\0','\0'),(6473,'Uoleey',255,65535,65535,4294967295,'\0','\0'),(6474,'Alymenub',255,65535,65535,4294967295,'\0','\0'),(6475,'Avpi',255,65535,65535,4294967295,'\0','\0'),(6476,'Omsuraurtero',255,65535,65535,4294967295,'\0','\0'),(6477,'Iscreontya',255,65535,65535,4294967295,'\0','\0'),(6478,'Maumodfinele',255,65535,65535,4294967295,'\0','\0'),(6479,'Eymioro',255,65535,65535,4294967295,'\0','\0'),(6480,'Estnoes',255,65535,65535,4294967295,'\0','\0'),(6481,'Lyanete',255,65535,65535,4294967295,'\0','\0'),(6482,'Efetoa',255,65535,65535,4294967295,'\0','\0'),(6483,'Uynidrisein',255,65535,65535,4294967295,'\0','\0'),(6484,'Cieia',255,65535,65535,4294967295,'\0','\0'),(6485,'Usobinareo',255,65535,65535,4294967295,'\0','\0'),(6486,'Fanhari',255,65535,65535,4294967295,'\0','\0'),(6487,'Idsoolnaode',255,65535,65535,4294967295,'\0','\0'),(6488,'Hiecreoas',255,65535,65535,4294967295,'\0','\0'),(6489,'Teis',255,65535,65535,4294967295,'\0','\0'),(6490,'Sechanieplea',255,65535,65535,4294967295,'\0','\0'),(6491,'Wiesseki',255,65535,65535,4294967295,'\0','\0'),(6492,'Waisef',255,65535,65535,4294967295,'\0','\0'),(6493,'Abtaenboe',255,65535,65535,4294967295,'\0','\0'),(6494,'Neilkese',255,65535,65535,4294967295,'\0','\0'),(6495,'Sliokinate',255,65535,65535,4294967295,'\0','\0'),(6496,'Earief',255,65535,65535,4294967295,'\0','\0'),(6497,'Caceaumeyb',255,65535,65535,4294967295,'\0','\0'),(6498,'Slitieyalore',255,65535,65535,4294967295,'\0','\0'),(6499,'Nedu',255,65535,65535,4294967295,'\0','\0'),(6500,'Awalaia',255,65535,65535,4294967295,'\0','\0'),(6501,'Caesemceager',255,65535,65535,4294967295,'\0','\0'),(6502,'Yevmoyeti',255,65535,65535,4294967295,'\0','\0'),(6503,'Duuinishak',255,65535,65535,4294967295,'\0','\0'),(6504,'Yapupfaono',255,65535,65535,4294967295,'\0','\0'),(6505,'Ucoicme',255,65535,65535,4294967295,'\0','\0'),(6506,'Tudeynibroge',255,65535,65535,4294967295,'\0','\0'),(6507,'Odtewavece',255,65535,65535,4294967295,'\0','\0'),(6508,'Ioniaqu',255,65535,65535,4294967295,'\0','\0'),(6509,'Briiye',255,65535,65535,4294967295,'\0','\0'),(6510,'Bigeinool',255,65535,65535,4294967295,'\0','\0'),(6511,'Ostcozey',255,65535,65535,4294967295,'\0','\0'),(6512,'Onkaifpisho',255,65535,65535,4294967295,'\0','\0'),(6513,'Orlegiipar',255,65535,65535,4294967295,'\0','\0'),(6514,'Wiitina',255,65535,65535,4294967295,'\0','\0'),(6515,'Eotnuefapstu',255,65535,65535,4294967295,'\0','\0'),(6516,'Esebieong',255,65535,65535,4294967295,'\0','\0'),(6517,'Eotei',255,65535,65535,4294967295,'\0','\0'),(6518,'Acaesteasy',255,65535,65535,4294967295,'\0','\0'),(6519,'Etetjaoe',255,65535,65535,4294967295,'\0','\0'),(6520,'Shekiatogotu',255,65535,65535,4294967295,'\0','\0'),(6521,'Brinepaainu',255,65535,65535,4294967295,'\0','\0'),(6522,'Ospe',255,65535,65535,4294967295,'\0','\0'),(6523,'Deadiolam',255,65535,65535,4294967295,'\0','\0'),(6524,'Giospoah',255,65535,65535,4294967295,'\0','\0'),(6525,'Aipodraronu',255,65535,65535,4294967295,'\0','\0'),(6526,'Trouyemo',255,65535,65535,4294967295,'\0','\0'),(6527,'Ooiausso',255,65535,65535,4294967295,'\0','\0'),(6528,'Imhuecagu',255,65535,65535,4294967295,'\0','\0'),(6529,'Oxieck',255,65535,65535,4294967295,'\0','\0'),(6530,'Aclarelo',255,65535,65535,4294967295,'\0','\0'),(6531,'Raoen',255,65535,65535,4294967295,'\0','\0'),(6532,'Eeabeate',255,65535,65535,4294967295,'\0','\0'),(6533,'Yrmnagoeson',255,65535,65535,4294967295,'\0','\0'),(6534,'Ieromo',255,65535,65535,4294967295,'\0','\0'),(6535,'Ocnepiab',255,65535,65535,4294967295,'\0','\0'),(6536,'Enmoayet',255,65535,65535,4294967295,'\0','\0'),(6537,'Ikiicol',255,65535,65535,4294967295,'\0','\0'),(6538,'Yaboleici',255,65535,65535,4294967295,'\0','\0'),(6539,'Zetiimeis',255,65535,65535,4294967295,'\0','\0'),(6540,'Diruat',255,65535,65535,4294967295,'\0','\0'),(6541,'Otieralufa',255,65535,65535,4294967295,'\0','\0'),(6542,'Noriorveuti',255,65535,65535,4294967295,'\0','\0'),(6543,'Ohmizeuberce',255,65535,65535,4294967295,'\0','\0'),(6544,'Arsicatelu',255,65535,65535,4294967295,'\0','\0'),(6545,'Ecusoonhiel',255,65535,65535,4294967295,'\0','\0'),(6546,'Aihiorni',255,65535,65535,4294967295,'\0','\0'),(6547,'Upemcuao',255,65535,65535,4294967295,'\0','\0'),(6548,'Ebqu',255,65535,65535,4294967295,'\0','\0'),(6549,'Thaumarpei',255,65535,65535,4294967295,'\0','\0'),(6550,'Wiplopeti',255,65535,65535,4294967295,'\0','\0'),(6551,'Ielaod',255,65535,65535,4294967295,'\0','\0'),(6552,'Eruel',255,65535,65535,4294967295,'\0','\0'),(6553,'Enyoratnean',255,65535,65535,4294967295,'\0','\0'),(6554,'Alouwkiotwa',255,65535,65535,4294967295,'\0','\0'),(6555,'Eceliailla',255,65535,65535,4294967295,'\0','\0'),(6556,'Camia',255,65535,65535,4294967295,'\0','\0'),(6557,'Oimbarey',255,65535,65535,4294967295,'\0','\0'),(6558,'Orpovlaapxa',255,65535,65535,4294967295,'\0','\0'),(6559,'Oinlioninoh',255,65535,65535,4294967295,'\0','\0'),(6560,'Anciental',255,65535,65535,4294967295,'\0','\0'),(6561,'Geuith',255,65535,65535,4294967295,'\0','\0'),(6562,'Baprenaal',255,65535,65535,4294967295,'\0','\0'),(6563,'Aoyoontor',255,65535,65535,4294967295,'\0','\0'),(6564,'Ouveokho',255,65535,65535,4294967295,'\0','\0'),(6565,'Capluteai',255,65535,65535,4294967295,'\0','\0'),(6566,'Roroea',255,65535,65535,4294967295,'\0','\0'),(6567,'Onon',255,65535,65535,4294967295,'\0','\0'),(6568,'Niugra',255,65535,65535,4294967295,'\0','\0'),(6569,'Wiamatift',255,65535,65535,4294967295,'\0','\0'),(6570,'Xaen',255,65535,65535,4294967295,'\0','\0'),(6571,'Ukrisaentze',255,65535,65535,4294967295,'\0','\0'),(6572,'Etioseno',255,65535,65535,4294967295,'\0','\0'),(6573,'Erbuoewiog',255,65535,65535,4294967295,'\0','\0'),(6574,'Tyeyke',255,65535,65535,4294967295,'\0','\0'),(6575,'Esiflotwee',255,65535,65535,4294967295,'\0','\0'),(6576,'Acuaydoscoin',255,65535,65535,4294967295,'\0','\0'),(6577,'Enochotomoi',255,65535,65535,4294967295,'\0','\0'),(6578,'Onpradi',255,65535,65535,4294967295,'\0','\0'),(6579,'Epleungay',255,65535,65535,4294967295,'\0','\0'),(6580,'Relowe',255,65535,65535,4294967295,'\0','\0'),(6581,'Ydgyesco',255,65535,65535,4294967295,'\0','\0'),(6582,'Remeprirade',255,65535,65535,4294967295,'\0','\0'),(6583,'Opeoinicpri',255,65535,65535,4294967295,'\0','\0'),(6584,'Seigeitet',255,65535,65535,4294967295,'\0','\0'),(6585,'Litamo',255,65535,65535,4294967295,'\0','\0'),(6586,'Ishom',255,65535,65535,4294967295,'\0','\0'),(6587,'Teetego',255,65535,65535,4294967295,'\0','\0'),(6588,'Fleefyoni',255,65535,65535,4294967295,'\0','\0'),(6589,'Ninya',255,65535,65535,4294967295,'\0','\0'),(6590,'Oreinstu',255,65535,65535,4294967295,'\0','\0'),(6591,'Omouvcaufu',255,65535,65535,4294967295,'\0','\0'),(6592,'Buarmuse',255,65535,65535,4294967295,'\0','\0'),(6593,'Stoicne',255,65535,65535,4294967295,'\0','\0'),(6594,'Arasit',255,65535,65535,4294967295,'\0','\0'),(6595,'Yoachli',255,65535,65535,4294967295,'\0','\0'),(6596,'Hiao',255,65535,65535,4294967295,'\0','\0'),(6597,'Ougrieus',255,65535,65535,4294967295,'\0','\0'),(6598,'Psocuoge',255,65535,65535,4294967295,'\0','\0'),(6599,'Esormeu',255,65535,65535,4294967295,'\0','\0'),(6600,'Ewefdaelkio',255,65535,65535,4294967295,'\0','\0'),(6601,'Izraoin',255,65535,65535,4294967295,'\0','\0'),(6602,'Eralcly',255,65535,65535,4294967295,'\0','\0'),(6603,'Erobgicitent',255,65535,65535,4294967295,'\0','\0'),(6604,'Owogasere',255,65535,65535,4294967295,'\0','\0'),(6605,'Ciruabrioyi',255,65535,65535,4294967295,'\0','\0'),(6606,'Riash',255,65535,65535,4294967295,'\0','\0'),(6607,'Etblia',255,65535,65535,4294967295,'\0','\0'),(6608,'Eyedib',255,65535,65535,4294967295,'\0','\0'),(6609,'Ieiilal',255,65535,65535,4294967295,'\0','\0'),(6610,'Ayroreersto',255,65535,65535,4294967295,'\0','\0'),(6611,'Apotiauneth',255,65535,65535,4294967295,'\0','\0'),(6612,'Doeoxmer',255,65535,65535,4294967295,'\0','\0'),(6613,'Rauteitidi',255,65535,65535,4294967295,'\0','\0'),(6614,'Idamasolmo',255,65535,65535,4294967295,'\0','\0'),(6615,'Recetei',255,65535,65535,4294967295,'\0','\0'),(6616,'Neibul',255,65535,65535,4294967295,'\0','\0'),(6617,'Ieicsee',255,65535,65535,4294967295,'\0','\0'),(6618,'Stuiuer',255,65535,65535,4294967295,'\0','\0'),(6619,'Eiss',255,65535,65535,4294967295,'\0','\0'),(6620,'Lidloste',255,65535,65535,4294967295,'\0','\0'),(6621,'Omirieang',255,65535,65535,4294967295,'\0','\0'),(6622,'Eoutsi',255,65535,65535,4294967295,'\0','\0'),(6623,'Rate',255,65535,65535,4294967295,'\0','\0'),(6624,'Ukuacnein',255,65535,65535,4294967295,'\0','\0'),(6625,'Mutoei',255,65535,65535,4294967295,'\0','\0'),(6626,'Oadeteass',255,65535,65535,4294967295,'\0','\0'),(6627,'Ofoly',255,65535,65535,4294967295,'\0','\0'),(6628,'Etmieiro',255,65535,65535,4294967295,'\0','\0'),(6629,'Cheti',255,65535,65535,4294967295,'\0','\0'),(6630,'Rateicgeizo',255,65535,65535,4294967295,'\0','\0'),(6631,'Imorore',255,65535,65535,4294967295,'\0','\0'),(6632,'Tolaernenis',255,65535,65535,4294967295,'\0','\0'),(6633,'Loemtiirtoki',255,65535,65535,4294967295,'\0','\0'),(6634,'Ereaghic',255,65535,65535,4294967295,'\0','\0'),(6635,'Orreoipne',255,65535,65535,4294967295,'\0','\0'),(6636,'Upsesmo',255,65535,65535,4294967295,'\0','\0'),(6637,'Iwaonvecoo',255,65535,65535,4294967295,'\0','\0'),(6638,'Erutebeid',255,65535,65535,4294967295,'\0','\0'),(6639,'Eusiewa',255,65535,65535,4294967295,'\0','\0'),(6640,'Diomtreoip',255,65535,65535,4294967295,'\0','\0'),(6641,'Buloeacre',255,65535,65535,4294967295,'\0','\0'),(6642,'Ogonbovari',255,65535,65535,4294967295,'\0','\0'),(6643,'Iltaneneyu',255,65535,65535,4294967295,'\0','\0'),(6644,'Ipiegycyni',255,65535,65535,4294967295,'\0','\0'),(6645,'Oapiap',255,65535,65535,4294967295,'\0','\0'),(6646,'Eesmere',255,65535,65535,4294967295,'\0','\0'),(6647,'Esit',255,65535,65535,4294967295,'\0','\0'),(6648,'Aniciseatul',255,65535,65535,4294967295,'\0','\0'),(6649,'Akshia',255,65535,65535,4294967295,'\0','\0'),(6650,'Inelciesep',255,65535,65535,4294967295,'\0','\0'),(6651,'Ohoi',255,65535,65535,4294967295,'\0','\0'),(6652,'Olesynaue',255,65535,65535,4294967295,'\0','\0'),(6653,'Lemecryoam',255,65535,65535,4294967295,'\0','\0'),(6654,'Rieyigle',255,65535,65535,4294967295,'\0','\0'),(6655,'Itreeat',255,65535,65535,4294967295,'\0','\0'),(6656,'Seactudatme',255,65535,65535,4294967295,'\0','\0'),(6657,'Oxeoayssish',255,65535,65535,4294967295,'\0','\0'),(6658,'Mapheebati',255,65535,65535,4294967295,'\0','\0'),(6659,'Pranetui',255,65535,65535,4294967295,'\0','\0'),(6660,'Mawoisnaraac',255,65535,65535,4294967295,'\0','\0'),(6661,'Asmizglacosy',255,65535,65535,4294967295,'\0','\0'),(6662,'Scoruastne',255,65535,65535,4294967295,'\0','\0'),(6663,'Arephi',255,65535,65535,4294967295,'\0','\0'),(6664,'Praquokera',255,65535,65535,4294967295,'\0','\0'),(6665,'Ebepoackopdi',255,65535,65535,4294967295,'\0','\0'),(6666,'Naeov',255,65535,65535,4294967295,'\0','\0'),(6667,'Enuuottio',255,65535,65535,4294967295,'\0','\0'),(6668,'Ausalene',255,65535,65535,4294967295,'\0','\0'),(6669,'Uefyopsisa',255,65535,65535,4294967295,'\0','\0'),(6670,'Owipa',255,65535,65535,4294967295,'\0','\0'),(6671,'Frainoeegent',255,65535,65535,4294967295,'\0','\0'),(6672,'Uoroin',255,65535,65535,4294967295,'\0','\0'),(6673,'Tefoarjo',255,65535,65535,4294967295,'\0','\0'),(6674,'Oawyroga',255,65535,65535,4294967295,'\0','\0'),(6675,'Oerlieve',255,65535,65535,4294967295,'\0','\0'),(6676,'Tostecoassre',255,65535,65535,4294967295,'\0','\0'),(6677,'Iotnininosto',255,65535,65535,4294967295,'\0','\0'),(6678,'Tybayeinat',255,65535,65535,4294967295,'\0','\0'),(6679,'Elelye',255,65535,65535,4294967295,'\0','\0'),(6680,'Intyuetofre',255,65535,65535,4294967295,'\0','\0'),(6681,'Opeate',255,65535,65535,4294967295,'\0','\0'),(6682,'Soenoramer',255,65535,65535,4294967295,'\0','\0'),(6683,'Ariaco',255,65535,65535,4294967295,'\0','\0'),(6684,'Ochystpu',255,65535,65535,4294967295,'\0','\0'),(6685,'Ingdagier',255,65535,65535,4294967295,'\0','\0'),(6686,'Imstretheho',255,65535,65535,4294967295,'\0','\0'),(6687,'Olero',255,65535,65535,4294967295,'\0','\0'),(6688,'Haoyitilel',255,65535,65535,4294967295,'\0','\0'),(6689,'Eolyhta',255,65535,65535,4294967295,'\0','\0'),(6690,'Uglirupira',255,65535,65535,4294967295,'\0','\0'),(6691,'Neaute',255,65535,65535,4294967295,'\0','\0'),(6692,'Aeoactyat',255,65535,65535,4294967295,'\0','\0'),(6693,'Tonaoemax',255,65535,65535,4294967295,'\0','\0'),(6694,'Onissosmaare',255,65535,65535,4294967295,'\0','\0'),(6695,'Noceih',255,65535,65535,4294967295,'\0','\0'),(6696,'Ciici',255,65535,65535,4294967295,'\0','\0'),(6697,'Ojruermwa',255,65535,65535,4294967295,'\0','\0'),(6698,'Ishryatatlue',255,65535,65535,4294967295,'\0','\0'),(6699,'Yngup',255,65535,65535,4294967295,'\0','\0'),(6700,'Deetlo',255,65535,65535,4294967295,'\0','\0'),(6701,'Ereye',255,65535,65535,4294967295,'\0','\0'),(6702,'Kieodu',255,65535,65535,4294967295,'\0','\0'),(6703,'Ogspa',255,65535,65535,4294967295,'\0','\0'),(6704,'Neoumapre',255,65535,65535,4294967295,'\0','\0'),(6705,'Acorase',255,65535,65535,4294967295,'\0','\0'),(6706,'Blamam',255,65535,65535,4294967295,'\0','\0'),(6707,'Ongiderswipi',255,65535,65535,4294967295,'\0','\0'),(6708,'Paicami',255,65535,65535,4294967295,'\0','\0'),(6709,'Fereiclana',255,65535,65535,4294967295,'\0','\0'),(6710,'Ectaekchei',255,65535,65535,4294967295,'\0','\0'),(6711,'Leleesume',255,65535,65535,4294967295,'\0','\0'),(6712,'Leyseamla',255,65535,65535,4294967295,'\0','\0'),(6713,'Ehiepaom',255,65535,65535,4294967295,'\0','\0'),(6714,'Etaewija',255,65535,65535,4294967295,'\0','\0'),(6715,'Ishuori',255,65535,65535,4294967295,'\0','\0'),(6716,'Glasetryno',255,65535,65535,4294967295,'\0','\0'),(6717,'Izorxienoit',255,65535,65535,4294967295,'\0','\0'),(6718,'Ataar',255,65535,65535,4294967295,'\0','\0'),(6719,'Idaniyhyui',255,65535,65535,4294967295,'\0','\0'),(6720,'Lougali',255,65535,65535,4294967295,'\0','\0'),(6721,'Ontolro',255,65535,65535,4294967295,'\0','\0'),(6722,'Eroltufois',255,65535,65535,4294967295,'\0','\0'),(6723,'Ibliu',255,65535,65535,4294967295,'\0','\0'),(6724,'Ephios',255,65535,65535,4294967295,'\0','\0'),(6725,'Ardnonsu',255,65535,65535,4294967295,'\0','\0'),(6726,'Enela',255,65535,65535,4294967295,'\0','\0'),(6727,'Irotiaoaf',255,65535,65535,4294967295,'\0','\0'),(6728,'Laromecufie',255,65535,65535,4294967295,'\0','\0'),(6729,'Cepeyisen',255,65535,65535,4294967295,'\0','\0'),(6730,'Omazesope',255,65535,65535,4294967295,'\0','\0'),(6731,'Neatouoib',255,65535,65535,4294967295,'\0','\0'),(6732,'Fryintineip',255,65535,65535,4294967295,'\0','\0'),(6733,'Olarthogeow',255,65535,65535,4294967295,'\0','\0'),(6734,'Etawitiayit',255,65535,65535,4294967295,'\0','\0'),(6735,'Gresieid',255,65535,65535,4294967295,'\0','\0'),(6736,'Doydointog',255,65535,65535,4294967295,'\0','\0'),(6737,'Enuxacoess',255,65535,65535,4294967295,'\0','\0'),(6738,'Lipasabstee',255,65535,65535,4294967295,'\0','\0'),(6739,'Ojvetreheele',255,65535,65535,4294967295,'\0','\0'),(6740,'Eigiluler',255,65535,65535,4294967295,'\0','\0'),(6741,'Yeonaleyl',255,65535,65535,4294967295,'\0','\0'),(6742,'Estclyideoa',255,65535,65535,4294967295,'\0','\0'),(6743,'Yenas',255,65535,65535,4294967295,'\0','\0'),(6744,'Epiol',255,65535,65535,4294967295,'\0','\0'),(6745,'Ertada',255,65535,65535,4294967295,'\0','\0'),(6746,'Uafawtaasti',255,65535,65535,4294967295,'\0','\0'),(6747,'Acrialipamam',255,65535,65535,4294967295,'\0','\0'),(6748,'Odensi',255,65535,65535,4294967295,'\0','\0'),(6749,'Enuindong',255,65535,65535,4294967295,'\0','\0'),(6750,'Delecopro',255,65535,65535,4294967295,'\0','\0'),(6751,'Omaatucine',255,65535,65535,4294967295,'\0','\0'),(6752,'Ionynetaer',255,65535,65535,4294967295,'\0','\0'),(6753,'Lesura',255,65535,65535,4294967295,'\0','\0'),(6754,'Aratiro',255,65535,65535,4294967295,'\0','\0'),(6755,'Chearonuart',255,65535,65535,4294967295,'\0','\0'),(6756,'Egoekate',255,65535,65535,4294967295,'\0','\0'),(6757,'Woarpi',255,65535,65535,4294967295,'\0','\0'),(6758,'Almyfoyele',255,65535,65535,4294967295,'\0','\0'),(6759,'Paueywilo',255,65535,65535,4294967295,'\0','\0'),(6760,'Eceilagy',255,65535,65535,4294967295,'\0','\0'),(6761,'Atatuoe',255,65535,65535,4294967295,'\0','\0'),(6762,'Faloaaz',255,65535,65535,4294967295,'\0','\0'),(6763,'Ioylorane',255,65535,65535,4294967295,'\0','\0'),(6764,'Tabeabrai',255,65535,65535,4294967295,'\0','\0'),(6765,'Scoyekdiiss',255,65535,65535,4294967295,'\0','\0'),(6766,'Miemclihi',255,65535,65535,4294967295,'\0','\0'),(6767,'Tiarneluupre',255,65535,65535,4294967295,'\0','\0'),(6768,'Iguleawikni',255,65535,65535,4294967295,'\0','\0'),(6769,'Iulra',255,65535,65535,4294967295,'\0','\0'),(6770,'Aroacowhyen',255,65535,65535,4294967295,'\0','\0'),(6771,'Enacakintine',255,65535,65535,4294967295,'\0','\0'),(6772,'Emigolou',255,65535,65535,4294967295,'\0','\0'),(6773,'Ecol',255,65535,65535,4294967295,'\0','\0'),(6774,'Paesrachic',255,65535,65535,4294967295,'\0','\0'),(6775,'Ubisin',255,65535,65535,4294967295,'\0','\0'),(6776,'Naicazar',255,65535,65535,4294967295,'\0','\0'),(6777,'Aiei',255,65535,65535,4294967295,'\0','\0'),(6778,'Ucruoylaepli',255,65535,65535,4294967295,'\0','\0'),(6779,'Panur',255,65535,65535,4294967295,'\0','\0'),(6780,'Eraom',255,65535,65535,4294967295,'\0','\0'),(6781,'Iascaw',255,65535,65535,4294967295,'\0','\0'),(6782,'Veoicien',255,65535,65535,4294967295,'\0','\0'),(6783,'Aootcosa',255,65535,65535,4294967295,'\0','\0'),(6784,'Eecreplite',255,65535,65535,4294967295,'\0','\0'),(6785,'Roiuyya',255,65535,65535,4294967295,'\0','\0'),(6786,'Iuhoel',255,65535,65535,4294967295,'\0','\0'),(6787,'Enateulachy',255,65535,65535,4294967295,'\0','\0'),(6788,'Athy',255,65535,65535,4294967295,'\0','\0'),(6789,'Nigemalipra',255,65535,65535,4294967295,'\0','\0'),(6790,'Iesta',255,65535,65535,4294967295,'\0','\0'),(6791,'Heafofeid',255,65535,65535,4294967295,'\0','\0'),(6792,'Ertatiwaohe',255,65535,65535,4294967295,'\0','\0'),(6793,'Dimeonorao',255,65535,65535,4294967295,'\0','\0'),(6794,'Ivoceronria',255,65535,65535,4294967295,'\0','\0'),(6795,'Etoe',255,65535,65535,4294967295,'\0','\0'),(6796,'Elondne',255,65535,65535,4294967295,'\0','\0'),(6797,'Oest',255,65535,65535,4294967295,'\0','\0'),(6798,'Netebinie',255,65535,65535,4294967295,'\0','\0'),(6799,'Neenotesi',255,65535,65535,4294967295,'\0','\0'),(6800,'Pootasoivsy',255,65535,65535,4294967295,'\0','\0'),(6801,'Ionodyekif',255,65535,65535,4294967295,'\0','\0'),(6802,'Astongonurdu',255,65535,65535,4294967295,'\0','\0'),(6803,'Anilitdu',255,65535,65535,4294967295,'\0','\0'),(6804,'Miicureyar',255,65535,65535,4294967295,'\0','\0'),(6805,'Eptrewour',255,65535,65535,4294967295,'\0','\0'),(6806,'Phaoa',255,65535,65535,4294967295,'\0','\0'),(6807,'Nemiiepifi',255,65535,65535,4294967295,'\0','\0'),(6808,'Ikewona',255,65535,65535,4294967295,'\0','\0'),(6809,'Yffoi',255,65535,65535,4294967295,'\0','\0'),(6810,'Noeruath',255,65535,65535,4294967295,'\0','\0'),(6811,'Etaesherang',255,65535,65535,4294967295,'\0','\0'),(6812,'Afscheypri',255,65535,65535,4294967295,'\0','\0'),(6813,'Detrea',255,65535,65535,4294967295,'\0','\0'),(6814,'Isiengeerub',255,65535,65535,4294967295,'\0','\0'),(6815,'Geeliongeis',255,65535,65535,4294967295,'\0','\0'),(6816,'Eldehtim',255,65535,65535,4294967295,'\0','\0'),(6817,'Beotaool',255,65535,65535,4294967295,'\0','\0'),(6818,'Dyinoprioni',255,65535,65535,4294967295,'\0','\0'),(6819,'Oulay',255,65535,65535,4294967295,'\0','\0'),(6820,'Eseeseleov',255,65535,65535,4294967295,'\0','\0'),(6821,'Oupidatu',255,65535,65535,4294967295,'\0','\0'),(6822,'Orstriwamauy',255,65535,65535,4294967295,'\0','\0'),(6823,'Esgealown',255,65535,65535,4294967295,'\0','\0'),(6824,'Eyiamhy',255,65535,65535,4294967295,'\0','\0'),(6825,'Omtoege',255,65535,65535,4294967295,'\0','\0'),(6826,'Einauma',255,65535,65535,4294967295,'\0','\0'),(6827,'Yotiyaresum',255,65535,65535,4294967295,'\0','\0'),(6828,'Eitoiitri',255,65535,65535,4294967295,'\0','\0'),(6829,'Eresnaetniya',255,65535,65535,4294967295,'\0','\0'),(6830,'Deiyachyontu',255,65535,65535,4294967295,'\0','\0'),(6831,'Ceizroioam',255,65535,65535,4294967295,'\0','\0'),(6832,'Atcali',255,65535,65535,4294967295,'\0','\0'),(6833,'Etimytha',255,65535,65535,4294967295,'\0','\0'),(6834,'Omsekeuei',255,65535,65535,4294967295,'\0','\0'),(6835,'Echediefyna',255,65535,65535,4294967295,'\0','\0'),(6836,'Shuisie',255,65535,65535,4294967295,'\0','\0'),(6837,'Emenetilike',255,65535,65535,4294967295,'\0','\0'),(6838,'Foun',255,65535,65535,4294967295,'\0','\0'),(6839,'Atatifraya',255,65535,65535,4294967295,'\0','\0'),(6840,'Etgobun',255,65535,65535,4294967295,'\0','\0'),(6841,'Icoalerle',255,65535,65535,4294967295,'\0','\0'),(6842,'Dwineisk',255,65535,65535,4294967295,'\0','\0'),(6843,'Ipitigpyna',255,65535,65535,4294967295,'\0','\0'),(6844,'Eyteiucead',255,65535,65535,4294967295,'\0','\0'),(6845,'Speeche',255,65535,65535,4294967295,'\0','\0'),(6846,'Veneeo',255,65535,65535,4294967295,'\0','\0'),(6847,'Efengoiyi',255,65535,65535,4294967295,'\0','\0'),(6848,'Niytdiva',255,65535,65535,4294967295,'\0','\0'),(6849,'Eatreraead',255,65535,65535,4294967295,'\0','\0'),(6850,'Eerloye',255,65535,65535,4294967295,'\0','\0'),(6851,'Paesicouet',255,65535,65535,4294967295,'\0','\0'),(6852,'Idetyouo',255,65535,65535,4294967295,'\0','\0'),(6853,'Ilielpi',255,65535,65535,4294967295,'\0','\0'),(6854,'Arsue',255,65535,65535,4294967295,'\0','\0'),(6855,'Asteonali',255,65535,65535,4294967295,'\0','\0'),(6856,'Nakeilirvu',255,65535,65535,4294967295,'\0','\0'),(6857,'Esnaeeu',255,65535,65535,4294967295,'\0','\0'),(6858,'Keideat',255,65535,65535,4294967295,'\0','\0'),(6859,'Sniyoefluiso',255,65535,65535,4294967295,'\0','\0'),(6860,'Socroyeelo',255,65535,65535,4294967295,'\0','\0'),(6861,'Pokliacmoori',255,65535,65535,4294967295,'\0','\0'),(6862,'Enut',255,65535,65535,4294967295,'\0','\0'),(6863,'Ineooro',255,65535,65535,4294967295,'\0','\0'),(6864,'Asostaesid',255,65535,65535,4294967295,'\0','\0'),(6865,'Ielsoiewyg',255,65535,65535,4294967295,'\0','\0'),(6866,'Teapous',255,65535,65535,4294967295,'\0','\0'),(6867,'Atindemaide',255,65535,65535,4294967295,'\0','\0'),(6868,'Sinsa',255,65535,65535,4294967295,'\0','\0'),(6869,'Ediapni',255,65535,65535,4294967295,'\0','\0'),(6870,'Lecyanagiha',255,65535,65535,4294967295,'\0','\0'),(6871,'Sireskuyilao',255,65535,65535,4294967295,'\0','\0'),(6872,'Elalalewpede',255,65535,65535,4294967295,'\0','\0'),(6873,'Ewnidwinoi',255,65535,65535,4294967295,'\0','\0'),(6874,'Nieano',255,65535,65535,4294967295,'\0','\0'),(6875,'Tipsecery',255,65535,65535,4294967295,'\0','\0'),(6876,'Caopatcateir',255,65535,65535,4294967295,'\0','\0'),(6877,'Yaufegey',255,65535,65535,4294967295,'\0','\0'),(6878,'Chaentakloo',255,65535,65535,4294967295,'\0','\0'),(6879,'Tearuaol',255,65535,65535,4294967295,'\0','\0'),(6880,'Ceopulnees',255,65535,65535,4294967295,'\0','\0'),(6881,'Anmiraz',255,65535,65535,4294967295,'\0','\0'),(6882,'Sabi',255,65535,65535,4294967295,'\0','\0'),(6883,'Eogbu',255,65535,65535,4294967295,'\0','\0'),(6884,'Cooctehyprit',255,65535,65535,4294967295,'\0','\0'),(6885,'Ceoneifoic',255,65535,65535,4294967295,'\0','\0'),(6886,'Ymedoriti',255,65535,65535,4294967295,'\0','\0'),(6887,'Eurerifo',255,65535,65535,4294967295,'\0','\0'),(6888,'Niypesmeois',255,65535,65535,4294967295,'\0','\0'),(6889,'Usondca',255,65535,65535,4294967295,'\0','\0'),(6890,'Atetizereol',255,65535,65535,4294967295,'\0','\0'),(6891,'Intcaou',255,65535,65535,4294967295,'\0','\0'),(6892,'Weyehore',255,65535,65535,4294967295,'\0','\0'),(6893,'Tari',255,65535,65535,4294967295,'\0','\0'),(6894,'Omaufdi',255,65535,65535,4294967295,'\0','\0'),(6895,'Theoy',255,65535,65535,4294967295,'\0','\0'),(6896,'Ooaieul',255,65535,65535,4294967295,'\0','\0'),(6897,'Inenoyreect',255,65535,65535,4294967295,'\0','\0'),(6898,'Isrirua',255,65535,65535,4294967295,'\0','\0'),(6899,'Uprab',255,65535,65535,4294967295,'\0','\0'),(6900,'Pithetiyspa',255,65535,65535,4294967295,'\0','\0'),(6901,'Iluso',255,65535,65535,4294967295,'\0','\0'),(6902,'Ilioerar',255,65535,65535,4294967295,'\0','\0'),(6903,'Omcheil',255,65535,65535,4294967295,'\0','\0'),(6904,'Yuermuabywe',255,65535,65535,4294967295,'\0','\0'),(6905,'Xiereeoda',255,65535,65535,4294967295,'\0','\0'),(6906,'Ayabigeyis',255,65535,65535,4294967295,'\0','\0'),(6907,'Peede',255,65535,65535,4294967295,'\0','\0'),(6908,'Otina',255,65535,65535,4294967295,'\0','\0'),(6909,'Scephicoune',255,65535,65535,4294967295,'\0','\0'),(6910,'Omcheoctilu',255,65535,65535,4294967295,'\0','\0'),(6911,'Meararta',255,65535,65535,4294967295,'\0','\0'),(6912,'Ycuatiar',255,65535,65535,4294967295,'\0','\0'),(6913,'Reroitha',255,65535,65535,4294967295,'\0','\0'),(6914,'Issyupcae',255,65535,65535,4294967295,'\0','\0'),(6915,'Neeitia',255,65535,65535,4294967295,'\0','\0'),(6916,'Rotopoic',255,65535,65535,4294967295,'\0','\0'),(6917,'Crulymawiene',255,65535,65535,4294967295,'\0','\0'),(6918,'Eaneruaw',255,65535,65535,4294967295,'\0','\0'),(6919,'Engeriyiom',255,65535,65535,4294967295,'\0','\0'),(6920,'Ilceuchspi',255,65535,65535,4294967295,'\0','\0'),(6921,'Pruosi',255,65535,65535,4294967295,'\0','\0'),(6922,'Ancaalchievu',255,65535,65535,4294967295,'\0','\0'),(6923,'Ashoaro',255,65535,65535,4294967295,'\0','\0'),(6924,'Moumianno',255,65535,65535,4294967295,'\0','\0'),(6925,'Anliavess',255,65535,65535,4294967295,'\0','\0'),(6926,'Aehro',255,65535,65535,4294967295,'\0','\0'),(6927,'Ulifaspe',255,65535,65535,4294967295,'\0','\0'),(6928,'Drei',255,65535,65535,4294967295,'\0','\0'),(6929,'Niypuisi',255,65535,65535,4294967295,'\0','\0'),(6930,'Ebesillora',255,65535,65535,4294967295,'\0','\0'),(6931,'Erdoat',255,65535,65535,4294967295,'\0','\0'),(6932,'Ehizoyel',255,65535,65535,4294967295,'\0','\0'),(6933,'Ohorti',255,65535,65535,4294967295,'\0','\0'),(6934,'Toaytaene',255,65535,65535,4294967295,'\0','\0'),(6935,'Acoasastor',255,65535,65535,4294967295,'\0','\0'),(6936,'Beayenin',255,65535,65535,4294967295,'\0','\0'),(6937,'Aathey',255,65535,65535,4294967295,'\0','\0'),(6938,'Seeomesve',255,65535,65535,4294967295,'\0','\0'),(6939,'Owyayioa',255,65535,65535,4294967295,'\0','\0'),(6940,'Inteonspyid',255,65535,65535,4294967295,'\0','\0'),(6941,'Laerwadies',255,65535,65535,4294967295,'\0','\0'),(6942,'Uroecie',255,65535,65535,4294967295,'\0','\0'),(6943,'Neinmaet',255,65535,65535,4294967295,'\0','\0'),(6944,'Ugaondoor',255,65535,65535,4294967295,'\0','\0'),(6945,'Ucfoyaef',255,65535,65535,4294967295,'\0','\0'),(6946,'Aashoeha',255,65535,65535,4294967295,'\0','\0'),(6947,'Aldseifalrae',255,65535,65535,4294967295,'\0','\0'),(6948,'Doemroep',255,65535,65535,4294967295,'\0','\0'),(6949,'Eopthodra',255,65535,65535,4294967295,'\0','\0'),(6950,'Clocheay',255,65535,65535,4294967295,'\0','\0'),(6951,'Auranju',255,65535,65535,4294967295,'\0','\0'),(6952,'Uuop',255,65535,65535,4294967295,'\0','\0'),(6953,'Uottayoe',255,65535,65535,4294967295,'\0','\0'),(6954,'Yaighe',255,65535,65535,4294967295,'\0','\0'),(6955,'Teyialseit',255,65535,65535,4294967295,'\0','\0'),(6956,'Ereui',255,65535,65535,4294967295,'\0','\0'),(6957,'Ealiasta',255,65535,65535,4294967295,'\0','\0'),(6958,'Dezatoensou',255,65535,65535,4294967295,'\0','\0'),(6959,'Peubo',255,65535,65535,4294967295,'\0','\0'),(6960,'Etatao',255,65535,65535,4294967295,'\0','\0'),(6961,'Userodeoe',255,65535,65535,4294967295,'\0','\0'),(6962,'Ionmiety',255,65535,65535,4294967295,'\0','\0'),(6963,'Yinmilea',255,65535,65535,4294967295,'\0','\0'),(6964,'Irbueti',255,65535,65535,4294967295,'\0','\0'),(6965,'Ophanaesajra',255,65535,65535,4294967295,'\0','\0'),(6966,'Oainolin',255,65535,65535,4294967295,'\0','\0'),(6967,'Utgeyle',255,65535,65535,4294967295,'\0','\0'),(6968,'Aoil',255,65535,65535,4294967295,'\0','\0'),(6969,'Rupano',255,65535,65535,4294967295,'\0','\0'),(6970,'Edaingu',255,65535,65535,4294967295,'\0','\0'),(6971,'Oabita',255,65535,65535,4294967295,'\0','\0'),(6972,'Eoent',255,65535,65535,4294967295,'\0','\0'),(6973,'Ogova',255,65535,65535,4294967295,'\0','\0'),(6974,'Lielhai',255,65535,65535,4294967295,'\0','\0'),(6975,'Toebliomple',255,65535,65535,4294967295,'\0','\0'),(6976,'Neonerappoi',255,65535,65535,4294967295,'\0','\0'),(6977,'Orini',255,65535,65535,4294967295,'\0','\0'),(6978,'Icnoabesa',255,65535,65535,4294967295,'\0','\0'),(6979,'Teroil',255,65535,65535,4294967295,'\0','\0'),(6980,'Esyoyoatan',255,65535,65535,4294967295,'\0','\0'),(6981,'Okaulatmibla',255,65535,65535,4294967295,'\0','\0'),(6982,'Aphuarri',255,65535,65535,4294967295,'\0','\0'),(6983,'Ouomon',255,65535,65535,4294967295,'\0','\0'),(6984,'Eomlaeser',255,65535,65535,4294967295,'\0','\0'),(6985,'Diliepe',255,65535,65535,4294967295,'\0','\0'),(6986,'Iosa',255,65535,65535,4294967295,'\0','\0'),(6987,'Eristiopo',255,65535,65535,4294967295,'\0','\0'),(6988,'Intmo',255,65535,65535,4294967295,'\0','\0'),(6989,'Uneyearaim',255,65535,65535,4294967295,'\0','\0'),(6990,'Rareaile',255,65535,65535,4294967295,'\0','\0'),(6991,'Oatmi',255,65535,65535,4294967295,'\0','\0'),(6992,'Isnies',255,65535,65535,4294967295,'\0','\0'),(6993,'Ecitaistael',255,65535,65535,4294967295,'\0','\0'),(6994,'Yeomioe',255,65535,65535,4294967295,'\0','\0'),(6995,'Unusentinfli',255,65535,65535,4294967295,'\0','\0'),(6996,'Cowirithimeo',255,65535,65535,4294967295,'\0','\0'),(6997,'Agneti',255,65535,65535,4294967295,'\0','\0'),(6998,'Seodu',255,65535,65535,4294967295,'\0','\0'),(6999,'Olayoc',255,65535,65535,4294967295,'\0','\0'),(7000,'Gepulieoh',255,65535,65535,4294967295,'\0','\0'),(7001,'Esedeen',255,65535,65535,4294967295,'\0','\0'),(7002,'Odho',255,65535,65535,4294967295,'\0','\0'),(7003,'Ineyage',255,65535,65535,4294967295,'\0','\0'),(7004,'Asripea',255,65535,65535,4294967295,'\0','\0'),(7005,'Apalu',255,65535,65535,4294967295,'\0','\0'),(7006,'Ufraige',255,65535,65535,4294967295,'\0','\0'),(7007,'Anueudcuiq',255,65535,65535,4294967295,'\0','\0'),(7008,'Taiose',255,65535,65535,4294967295,'\0','\0'),(7009,'Vesyaleit',255,65535,65535,4294967295,'\0','\0'),(7010,'Ulianisufti',255,65535,65535,4294967295,'\0','\0'),(7011,'Iyarwiep',255,65535,65535,4294967295,'\0','\0'),(7012,'Yitenecio',255,65535,65535,4294967295,'\0','\0'),(7013,'Onasitii',255,65535,65535,4294967295,'\0','\0'),(7014,'Uoaf',255,65535,65535,4294967295,'\0','\0'),(7015,'Priaeyoripi',255,65535,65535,4294967295,'\0','\0'),(7016,'Urisutepru',255,65535,65535,4294967295,'\0','\0'),(7017,'Ilaoounird',255,65535,65535,4294967295,'\0','\0'),(7018,'Doimrasachea',255,65535,65535,4294967295,'\0','\0'),(7019,'Eratobe',255,65535,65535,4294967295,'\0','\0'),(7020,'Ipolydeat',255,65535,65535,4294967295,'\0','\0'),(7021,'Reecoyr',255,65535,65535,4294967295,'\0','\0'),(7022,'Ilioteea',255,65535,65535,4294967295,'\0','\0'),(7023,'Ileilonrea',255,65535,65535,4294967295,'\0','\0'),(7024,'Necrousnerso',255,65535,65535,4294967295,'\0','\0'),(7025,'Roetel',255,65535,65535,4294967295,'\0','\0'),(7026,'Yomu',255,65535,65535,4294967295,'\0','\0'),(7027,'Oienupu',255,65535,65535,4294967295,'\0','\0'),(7028,'Athire',255,65535,65535,4294967295,'\0','\0'),(7029,'Elye',255,65535,65535,4294967295,'\0','\0'),(7030,'Asezepiele',255,65535,65535,4294967295,'\0','\0'),(7031,'Osiey',255,65535,65535,4294967295,'\0','\0'),(7032,'Miaryop',255,65535,65535,4294967295,'\0','\0'),(7033,'Laonerhene',255,65535,65535,4294967295,'\0','\0'),(7034,'Eitfayius',255,65535,65535,4294967295,'\0','\0'),(7035,'Akgaaninore',255,65535,65535,4294967295,'\0','\0'),(7036,'Theoer',255,65535,65535,4294967295,'\0','\0'),(7037,'Ceiohi',255,65535,65535,4294967295,'\0','\0'),(7038,'Bealaupeu',255,65535,65535,4294967295,'\0','\0'),(7039,'Opad',255,65535,65535,4294967295,'\0','\0'),(7040,'Rioeni',255,65535,65535,4294967295,'\0','\0'),(7041,'Izensi',255,65535,65535,4294967295,'\0','\0'),(7042,'Coenktier',255,65535,65535,4294967295,'\0','\0'),(7043,'Elacwoa',255,65535,65535,4294967295,'\0','\0'),(7044,'Nogeibafaner',255,65535,65535,4294967295,'\0','\0'),(7045,'Negiallniqua',255,65535,65535,4294967295,'\0','\0'),(7046,'Aorloeumli',255,65535,65535,4294967295,'\0','\0'),(7047,'Ubeuncole',255,65535,65535,4294967295,'\0','\0'),(7048,'Roathap',255,65535,65535,4294967295,'\0','\0'),(7049,'Atedymcaur',255,65535,65535,4294967295,'\0','\0'),(7050,'Eiopplio',255,65535,65535,4294967295,'\0','\0'),(7051,'Iossaurec',255,65535,65535,4294967295,'\0','\0'),(7052,'Canulill',255,65535,65535,4294967295,'\0','\0'),(7053,'Teoynetebaag',255,65535,65535,4294967295,'\0','\0'),(7054,'Itieht',255,65535,65535,4294967295,'\0','\0'),(7055,'Aejo',255,65535,65535,4294967295,'\0','\0'),(7056,'Theoaltuared',255,65535,65535,4294967295,'\0','\0'),(7057,'Ento',255,65535,65535,4294967295,'\0','\0'),(7058,'Eolasuri',255,65535,65535,4294967295,'\0','\0'),(7059,'Atdioco',255,65535,65535,4294967295,'\0','\0'),(7060,'Brayaapveat',255,65535,65535,4294967295,'\0','\0'),(7061,'Oemam',255,65535,65535,4294967295,'\0','\0'),(7062,'Raovyela',255,65535,65535,4294967295,'\0','\0'),(7063,'Seseabmi',255,65535,65535,4294967295,'\0','\0'),(7064,'Riryessyal',255,65535,65535,4294967295,'\0','\0'),(7065,'Aamsioeo',255,65535,65535,4294967295,'\0','\0'),(7066,'Toiutzene',255,65535,65535,4294967295,'\0','\0'),(7067,'Idin',255,65535,65535,4294967295,'\0','\0'),(7068,'Usstraerely',255,65535,65535,4294967295,'\0','\0'),(7069,'Aeifeo',255,65535,65535,4294967295,'\0','\0'),(7070,'Onoya',255,65535,65535,4294967295,'\0','\0'),(7071,'Iaederey',255,65535,65535,4294967295,'\0','\0'),(7072,'Endnamanaoy',255,65535,65535,4294967295,'\0','\0'),(7073,'Utaneceo',255,65535,65535,4294967295,'\0','\0'),(7074,'Leonsoya',255,65535,65535,4294967295,'\0','\0'),(7075,'Rins',255,65535,65535,4294967295,'\0','\0'),(7076,'Oihao',255,65535,65535,4294967295,'\0','\0'),(7077,'Abpaobige',255,65535,65535,4294967295,'\0','\0'),(7078,'Oyeifloosm',255,65535,65535,4294967295,'\0','\0'),(7079,'Siilusmolar',255,65535,65535,4294967295,'\0','\0'),(7080,'Aochya',255,65535,65535,4294967295,'\0','\0'),(7081,'Teissiedatne',255,65535,65535,4294967295,'\0','\0'),(7082,'Leyourirei',255,65535,65535,4294967295,'\0','\0'),(7083,'Tiicoemaob',255,65535,65535,4294967295,'\0','\0'),(7084,'Eoli',255,65535,65535,4294967295,'\0','\0'),(7085,'Inonoani',255,65535,65535,4294967295,'\0','\0'),(7086,'Aassro',255,65535,65535,4294967295,'\0','\0'),(7087,'Laudlicha',255,65535,65535,4294967295,'\0','\0'),(7088,'Roubaocrera',255,65535,65535,4294967295,'\0','\0'),(7089,'Namiro',255,65535,65535,4294967295,'\0','\0'),(7090,'Oasirt',255,65535,65535,4294967295,'\0','\0'),(7091,'Asmcymuicpe',255,65535,65535,4294967295,'\0','\0'),(7092,'Ohao',255,65535,65535,4294967295,'\0','\0'),(7093,'Oebriioin',255,65535,65535,4294967295,'\0','\0'),(7094,'Styneab',255,65535,65535,4294967295,'\0','\0'),(7095,'Adraiudim',255,65535,65535,4294967295,'\0','\0'),(7096,'Irsuseoity',255,65535,65535,4294967295,'\0','\0'),(7097,'Lelaoasweol',255,65535,65535,4294967295,'\0','\0'),(7098,'Eserial',255,65535,65535,4294967295,'\0','\0'),(7099,'Nenegaelieb',255,65535,65535,4294967295,'\0','\0'),(7100,'Ecagit',255,65535,65535,4294967295,'\0','\0'),(7101,'Ahbautay',255,65535,65535,4294967295,'\0','\0'),(7102,'Yyatauntpo',255,65535,65535,4294967295,'\0','\0'),(7103,'Failiislado',255,65535,65535,4294967295,'\0','\0'),(7104,'Inepiace',255,65535,65535,4294967295,'\0','\0'),(7105,'Odtyeyeo',255,65535,65535,4294967295,'\0','\0'),(7106,'Thaitereani',255,65535,65535,4294967295,'\0','\0'),(7107,'Oicxiac',255,65535,65535,4294967295,'\0','\0'),(7108,'Itejogpuxaco',255,65535,65535,4294967295,'\0','\0'),(7109,'Stoata',255,65535,65535,4294967295,'\0','\0'),(7110,'Enismido',255,65535,65535,4294967295,'\0','\0'),(7111,'Ideteuns',255,65535,65535,4294967295,'\0','\0'),(7112,'Ukitausglo',255,65535,65535,4294967295,'\0','\0'),(7113,'Otoanenadspe',255,65535,65535,4294967295,'\0','\0'),(7114,'Ianer',255,65535,65535,4294967295,'\0','\0'),(7115,'Reacinta',255,65535,65535,4294967295,'\0','\0'),(7116,'Supeamiassu',255,65535,65535,4294967295,'\0','\0'),(7117,'Scroauptetri',255,65535,65535,4294967295,'\0','\0'),(7118,'Edoaeduan',255,65535,65535,4294967295,'\0','\0'),(7119,'Inrotabpyke',255,65535,65535,4294967295,'\0','\0'),(7120,'Oweadu',255,65535,65535,4294967295,'\0','\0'),(7121,'Aoarcaute',255,65535,65535,4294967295,'\0','\0'),(7122,'Izoilidihtre',255,65535,65535,4294967295,'\0','\0'),(7123,'Abitegumy',255,65535,65535,4294967295,'\0','\0'),(7124,'Charaeulee',255,65535,65535,4294967295,'\0','\0'),(7125,'Noaialtopo',255,65535,65535,4294967295,'\0','\0'),(7126,'Udlygycoe',255,65535,65535,4294967295,'\0','\0'),(7127,'Aceokno',255,65535,65535,4294967295,'\0','\0'),(7128,'Aoadcoeg',255,65535,65535,4294967295,'\0','\0'),(7129,'Elyceoneim',255,65535,65535,4294967295,'\0','\0'),(7130,'Hoctaele',255,65535,65535,4294967295,'\0','\0'),(7131,'Ices',255,65535,65535,4294967295,'\0','\0'),(7132,'Aopchiseot',255,65535,65535,4294967295,'\0','\0'),(7133,'Ereau',255,65535,65535,4294967295,'\0','\0'),(7134,'Nuseivaol',255,65535,65535,4294967295,'\0','\0'),(7135,'Edso',255,65535,65535,4294967295,'\0','\0'),(7136,'Riaeizit',255,65535,65535,4294967295,'\0','\0'),(7137,'Bacoarat',255,65535,65535,4294967295,'\0','\0'),(7138,'Voneaerere',255,65535,65535,4294967295,'\0','\0'),(7139,'Iowy',255,65535,65535,4294967295,'\0','\0'),(7140,'Eusonos',255,65535,65535,4294967295,'\0','\0'),(7141,'Iarivowa',255,65535,65535,4294967295,'\0','\0'),(7142,'Meostoave',255,65535,65535,4294967295,'\0','\0'),(7143,'Ryor',255,65535,65535,4294967295,'\0','\0'),(7144,'Linerer',255,65535,65535,4294967295,'\0','\0'),(7145,'Ystamia',255,65535,65535,4294967295,'\0','\0'),(7146,'Uasetatei',255,65535,65535,4294967295,'\0','\0'),(7147,'Ucrabi',255,65535,65535,4294967295,'\0','\0'),(7148,'Inagecoefu',255,65535,65535,4294967295,'\0','\0'),(7149,'Isehun',255,65535,65535,4294967295,'\0','\0'),(7150,'Dorayolyt',255,65535,65535,4294967295,'\0','\0'),(7151,'Aenyyo',255,65535,65535,4294967295,'\0','\0'),(7152,'Ayunin',255,65535,65535,4294967295,'\0','\0'),(7153,'Ceiuc',255,65535,65535,4294967295,'\0','\0'),(7154,'Orapereike',255,65535,65535,4294967295,'\0','\0'),(7155,'Ahfoamee',255,65535,65535,4294967295,'\0','\0'),(7156,'Lieblaadtro',255,65535,65535,4294967295,'\0','\0'),(7157,'Lifouesour',255,65535,65535,4294967295,'\0','\0'),(7158,'Umdewa',255,65535,65535,4294967295,'\0','\0'),(7159,'Eyangniaodle',255,65535,65535,4294967295,'\0','\0'),(7160,'Brytoa',255,65535,65535,4294967295,'\0','\0'),(7161,'Antis',255,65535,65535,4294967295,'\0','\0'),(7162,'Abowfiex',255,65535,65535,4294967295,'\0','\0'),(7163,'Oglior',255,65535,65535,4294967295,'\0','\0'),(7164,'Iengaoyua',255,65535,65535,4294967295,'\0','\0'),(7165,'Eauvua',255,65535,65535,4294967295,'\0','\0'),(7166,'Eethtreitre',255,65535,65535,4294967295,'\0','\0'),(7167,'Alsiub',255,65535,65535,4294967295,'\0','\0'),(7168,'Iolosheireth',255,65535,65535,4294967295,'\0','\0'),(7169,'Ineersea',255,65535,65535,4294967295,'\0','\0'),(7170,'Ralume',255,65535,65535,4294967295,'\0','\0'),(7171,'Ynseblaenli',255,65535,65535,4294967295,'\0','\0'),(7172,'Lirao',255,65535,65535,4294967295,'\0','\0'),(7173,'Eaceedamla',255,65535,65535,4294967295,'\0','\0'),(7174,'Odoxounde',255,65535,65535,4294967295,'\0','\0'),(7175,'Fueipas',255,65535,65535,4294967295,'\0','\0'),(7176,'Miubwiiedpe',255,65535,65535,4294967295,'\0','\0'),(7177,'Vero',255,65535,65535,4294967295,'\0','\0'),(7178,'Ieeclai',255,65535,65535,4294967295,'\0','\0'),(7179,'Hemyieowsi',255,65535,65535,4294967295,'\0','\0'),(7180,'Letonayc',255,65535,65535,4294967295,'\0','\0'),(7181,'Caegruelyid',255,65535,65535,4294967295,'\0','\0'),(7182,'Draeudypra',255,65535,65535,4294967295,'\0','\0'),(7183,'Emapsentifol',255,65535,65535,4294967295,'\0','\0'),(7184,'Gaolaen',255,65535,65535,4294967295,'\0','\0'),(7185,'Yilewaot',255,65535,65535,4294967295,'\0','\0'),(7186,'Leawyoyiain',255,65535,65535,4294967295,'\0','\0'),(7187,'Teso',255,65535,65535,4294967295,'\0','\0'),(7188,'Ajasspi',255,65535,65535,4294967295,'\0','\0'),(7189,'Atnilaes',255,65535,65535,4294967295,'\0','\0'),(7190,'Nuspeay',255,65535,65535,4294967295,'\0','\0'),(7191,'Plotupeiijti',255,65535,65535,4294967295,'\0','\0'),(7192,'Aayicmeiber',255,65535,65535,4294967295,'\0','\0'),(7193,'Geninigryne',255,65535,65535,4294967295,'\0','\0'),(7194,'Colies',255,65535,65535,4294967295,'\0','\0'),(7195,'Sheeae',255,65535,65535,4294967295,'\0','\0'),(7196,'Inve',255,65535,65535,4294967295,'\0','\0'),(7197,'Priangitiryo',255,65535,65535,4294967295,'\0','\0'),(7198,'Ulle',255,65535,65535,4294967295,'\0','\0'),(7199,'Yneanonyeny',255,65535,65535,4294967295,'\0','\0'),(7200,'Ifincodiop',255,65535,65535,4294967295,'\0','\0'),(7201,'Emiey',255,65535,65535,4294967295,'\0','\0'),(7202,'Atimelyib',255,65535,65535,4294967295,'\0','\0'),(7203,'Oleetiaan',255,65535,65535,4294967295,'\0','\0'),(7204,'Apaatroeng',255,65535,65535,4294967295,'\0','\0'),(7205,'Oenemgayo',255,65535,65535,4294967295,'\0','\0'),(7206,'Liomi',255,65535,65535,4294967295,'\0','\0'),(7207,'Ohhyoab',255,65535,65535,4294967295,'\0','\0'),(7208,'Answoliae',255,65535,65535,4294967295,'\0','\0'),(7209,'Raroron',255,65535,65535,4294967295,'\0','\0'),(7210,'Cauhetyre',255,65535,65535,4294967295,'\0','\0'),(7211,'Oneim',255,65535,65535,4294967295,'\0','\0'),(7212,'Phioki',255,65535,65535,4294967295,'\0','\0'),(7213,'Paiurojo',255,65535,65535,4294967295,'\0','\0'),(7214,'Ibclaniaemi',255,65535,65535,4294967295,'\0','\0'),(7215,'Macrei',255,65535,65535,4294967295,'\0','\0'),(7216,'Uaseo',255,65535,65535,4294967295,'\0','\0'),(7217,'Yengilomena',255,65535,65535,4294967295,'\0','\0'),(7218,'Esheid',255,65535,65535,4294967295,'\0','\0'),(7219,'Itachodeeryf',255,65535,65535,4294967295,'\0','\0'),(7220,'Stiakekciul',255,65535,65535,4294967295,'\0','\0'),(7221,'Raoumi',255,65535,65535,4294967295,'\0','\0'),(7222,'Hoewho',255,65535,65535,4294967295,'\0','\0'),(7223,'Eteulenea',255,65535,65535,4294967295,'\0','\0'),(7224,'Osuacfuin',255,65535,65535,4294967295,'\0','\0'),(7225,'Isatumruyag',255,65535,65535,4294967295,'\0','\0'),(7226,'Aayaces',255,65535,65535,4294967295,'\0','\0'),(7227,'Chyaracetve',255,65535,65535,4294967295,'\0','\0'),(7228,'Eexirizrile',255,65535,65535,4294967295,'\0','\0'),(7229,'Otierkiub',255,65535,65535,4294967295,'\0','\0'),(7230,'Atis',255,65535,65535,4294967295,'\0','\0'),(7231,'Ieangiige',255,65535,65535,4294967295,'\0','\0'),(7232,'Lyluapao',255,65535,65535,4294967295,'\0','\0'),(7233,'Lidepryaster',255,65535,65535,4294967295,'\0','\0'),(7234,'Titanituei',255,65535,65535,4294967295,'\0','\0'),(7235,'Earnies',255,65535,65535,4294967295,'\0','\0'),(7236,'Meapra',255,65535,65535,4294967295,'\0','\0'),(7237,'Teisespo',255,65535,65535,4294967295,'\0','\0'),(7238,'Ixwadia',255,65535,65535,4294967295,'\0','\0'),(7239,'Doad',255,65535,65535,4294967295,'\0','\0'),(7240,'Yesaigchey',255,65535,65535,4294967295,'\0','\0'),(7241,'Cuerponoe',255,65535,65535,4294967295,'\0','\0'),(7242,'Siri',255,65535,65535,4294967295,'\0','\0'),(7243,'Ayuteecgaes',255,65535,65535,4294967295,'\0','\0'),(7244,'Zeroare',255,65535,65535,4294967295,'\0','\0'),(7245,'Uplaeongya',255,65535,65535,4294967295,'\0','\0'),(7246,'Yrseaae',255,65535,65535,4294967295,'\0','\0'),(7247,'Roabreele',255,65535,65535,4294967295,'\0','\0'),(7248,'Acicine',255,65535,65535,4294967295,'\0','\0'),(7249,'Lyaosi',255,65535,65535,4294967295,'\0','\0'),(7250,'Ioicibe',255,65535,65535,4294967295,'\0','\0'),(7251,'Adroatitai',255,65535,65535,4294967295,'\0','\0'),(7252,'Gilepeae',255,65535,65535,4294967295,'\0','\0'),(7253,'Ocisengiayga',255,65535,65535,4294967295,'\0','\0'),(7254,'Coat',255,65535,65535,4294967295,'\0','\0'),(7255,'Oetigi',255,65535,65535,4294967295,'\0','\0'),(7256,'Sounrieer',255,65535,65535,4294967295,'\0','\0'),(7257,'Deer',255,65535,65535,4294967295,'\0','\0'),(7258,'Tyifucnuni',255,65535,65535,4294967295,'\0','\0'),(7259,'Ewraiti',255,65535,65535,4294967295,'\0','\0'),(7260,'Ripoendy',255,65535,65535,4294967295,'\0','\0'),(7261,'Cougistli',255,65535,65535,4294967295,'\0','\0'),(7262,'Dotaepoeyem',255,65535,65535,4294967295,'\0','\0'),(7263,'Agacread',255,65535,65535,4294967295,'\0','\0'),(7264,'Puorielat',255,65535,65535,4294967295,'\0','\0'),(7265,'Cyaypaieh',255,65535,65535,4294967295,'\0','\0'),(7266,'Ungionea',255,65535,65535,4294967295,'\0','\0'),(7267,'Tieaeya',255,65535,65535,4294967295,'\0','\0'),(7268,'Maifciau',255,65535,65535,4294967295,'\0','\0'),(7269,'Oenailan',255,65535,65535,4294967295,'\0','\0'),(7270,'Eqeeis',255,65535,65535,4294967295,'\0','\0'),(7271,'Etiysmniovu',255,65535,65535,4294967295,'\0','\0'),(7272,'Acha',255,65535,65535,4294967295,'\0','\0'),(7273,'Omnieama',255,65535,65535,4294967295,'\0','\0'),(7274,'Iscay',255,65535,65535,4294967295,'\0','\0'),(7275,'Isengviad',255,65535,65535,4294967295,'\0','\0'),(7276,'Imibruedsura',255,65535,65535,4294967295,'\0','\0'),(7277,'Nicoeroyui',255,65535,65535,4294967295,'\0','\0'),(7278,'Deserepino',255,65535,65535,4294967295,'\0','\0'),(7279,'Inemte',255,65535,65535,4294967295,'\0','\0'),(7280,'Acahoerpra',255,65535,65535,4294967295,'\0','\0'),(7281,'Alyomore',255,65535,65535,4294967295,'\0','\0'),(7282,'Eonira',255,65535,65535,4294967295,'\0','\0'),(7283,'Isaluf',255,65535,65535,4294967295,'\0','\0'),(7284,'Acboerde',255,65535,65535,4294967295,'\0','\0'),(7285,'Inaplanoin',255,65535,65535,4294967295,'\0','\0'),(7286,'Ruoon',255,65535,65535,4294967295,'\0','\0'),(7287,'Inki',255,65535,65535,4294967295,'\0','\0'),(7288,'Arda',255,65535,65535,4294967295,'\0','\0'),(7289,'Ibyumiliyp',255,65535,65535,4294967295,'\0','\0'),(7290,'Iaet',255,65535,65535,4294967295,'\0','\0'),(7291,'Euanesi',255,65535,65535,4294967295,'\0','\0'),(7292,'Eryemeifaoh',255,65535,65535,4294967295,'\0','\0'),(7293,'Iloapylap',255,65535,65535,4294967295,'\0','\0'),(7294,'Auemoee',255,65535,65535,4294967295,'\0','\0'),(7295,'Cazastoteblu',255,65535,65535,4294967295,'\0','\0'),(7296,'Ahiareyre',255,65535,65535,4294967295,'\0','\0'),(7297,'Iodlineoa',255,65535,65535,4294967295,'\0','\0'),(7298,'Esafraeti',255,65535,65535,4294967295,'\0','\0'),(7299,'Geriusluese',255,65535,65535,4294967295,'\0','\0'),(7300,'Agotiricniex',255,65535,65535,4294967295,'\0','\0'),(7301,'Iveyaatny',255,65535,65535,4294967295,'\0','\0'),(7302,'Eslatab',255,65535,65535,4294967295,'\0','\0'),(7303,'Zelsueh',255,65535,65535,4294967295,'\0','\0'),(7304,'Omoeuade',255,65535,65535,4294967295,'\0','\0'),(7305,'Thylepseuch',255,65535,65535,4294967295,'\0','\0'),(7306,'Eniem',255,65535,65535,4294967295,'\0','\0'),(7307,'Tetiobripi',255,65535,65535,4294967295,'\0','\0'),(7308,'Ehyoehdi',255,65535,65535,4294967295,'\0','\0'),(7309,'Metepaso',255,65535,65535,4294967295,'\0','\0'),(7310,'Teclaspeudew',255,65535,65535,4294967295,'\0','\0'),(7311,'Lazupovi',255,65535,65535,4294967295,'\0','\0'),(7312,'Etibievo',255,65535,65535,4294967295,'\0','\0'),(7313,'Tikaotel',255,65535,65535,4294967295,'\0','\0'),(7314,'Ulpeacsui',255,65535,65535,4294967295,'\0','\0'),(7315,'Etdeytai',255,65535,65535,4294967295,'\0','\0'),(7316,'Ciotrieyel',255,65535,65535,4294967295,'\0','\0'),(7317,'Igegaadule',255,65535,65535,4294967295,'\0','\0'),(7318,'Toamcorehep',255,65535,65535,4294967295,'\0','\0'),(7319,'Rispupo',255,65535,65535,4294967295,'\0','\0'),(7320,'Oreimeode',255,65535,65535,4294967295,'\0','\0'),(7321,'Cretwuac',255,65535,65535,4294967295,'\0','\0'),(7322,'Alyiier',255,65535,65535,4294967295,'\0','\0'),(7323,'Asyipotnoah',255,65535,65535,4294967295,'\0','\0'),(7324,'Yabbuwophuu',255,65535,65535,4294967295,'\0','\0'),(7325,'Smaiffaicin',255,65535,65535,4294967295,'\0','\0'),(7326,'Exioto',255,65535,65535,4294967295,'\0','\0'),(7327,'Ickienid',255,65535,65535,4294967295,'\0','\0'),(7328,'Ifepaglapmo',255,65535,65535,4294967295,'\0','\0'),(7329,'Caerveadre',255,65535,65535,4294967295,'\0','\0'),(7330,'Thaileentsu',255,65535,65535,4294967295,'\0','\0'),(7331,'Toeapriharho',255,65535,65535,4294967295,'\0','\0'),(7332,'Rarep',255,65535,65535,4294967295,'\0','\0'),(7333,'Otayala',255,65535,65535,4294967295,'\0','\0'),(7334,'Octeryp',255,65535,65535,4294967295,'\0','\0'),(7335,'Otasaf',255,65535,65535,4294967295,'\0','\0'),(7336,'Fiajiyear',255,65535,65535,4294967295,'\0','\0'),(7337,'Isaeyeoh',255,65535,65535,4294967295,'\0','\0'),(7338,'Sculita',255,65535,65535,4294967295,'\0','\0'),(7339,'Otanewians',255,65535,65535,4294967295,'\0','\0'),(7340,'Emteoodsee',255,65535,65535,4294967295,'\0','\0'),(7341,'Ainifoweri',255,65535,65535,4294967295,'\0','\0'),(7342,'Adarulyc',255,65535,65535,4294967295,'\0','\0'),(7343,'Theweehumein',255,65535,65535,4294967295,'\0','\0'),(7344,'Aceni',255,65535,65535,4294967295,'\0','\0'),(7345,'Toupiroyao',255,65535,65535,4294967295,'\0','\0'),(7346,'Obroac',255,65535,65535,4294967295,'\0','\0'),(7347,'Tethogea',255,65535,65535,4294967295,'\0','\0'),(7348,'Ertyaop',255,65535,65535,4294967295,'\0','\0'),(7349,'Piroinog',255,65535,65535,4294967295,'\0','\0'),(7350,'Oppesurani',255,65535,65535,4294967295,'\0','\0'),(7351,'Acieaamco',255,65535,65535,4294967295,'\0','\0'),(7352,'Eruacoyp',255,65535,65535,4294967295,'\0','\0'),(7353,'Iuite',255,65535,65535,4294967295,'\0','\0'),(7354,'Onubarthuo',255,65535,65535,4294967295,'\0','\0'),(7355,'Yyaamuoco',255,65535,65535,4294967295,'\0','\0'),(7356,'Creerisna',255,65535,65535,4294967295,'\0','\0'),(7357,'Atiyafe',255,65535,65535,4294967295,'\0','\0'),(7358,'Yeexfyar',255,65535,65535,4294967295,'\0','\0'),(7359,'Eyopiearar',255,65535,65535,4294967295,'\0','\0'),(7360,'Sinet',255,65535,65535,4294967295,'\0','\0'),(7361,'Blionethaoo',255,65535,65535,4294967295,'\0','\0'),(7362,'Opusandeby',255,65535,65535,4294967295,'\0','\0'),(7363,'Ucphiarogwhe',255,65535,65535,4294967295,'\0','\0'),(7364,'Rekefeflemi',255,65535,65535,4294967295,'\0','\0'),(7365,'Sadii',255,65535,65535,4294967295,'\0','\0'),(7366,'Itiiedoe',255,65535,65535,4294967295,'\0','\0'),(7367,'Eytiathbula',255,65535,65535,4294967295,'\0','\0'),(7368,'Stediaclov',255,65535,65535,4294967295,'\0','\0'),(7369,'Etote',255,65535,65535,4294967295,'\0','\0'),(7370,'Daiapenti',255,65535,65535,4294967295,'\0','\0'),(7371,'Ledelouray',255,65535,65535,4294967295,'\0','\0'),(7372,'Ayretarera',255,65535,65535,4294967295,'\0','\0'),(7373,'Naetrifinu',255,65535,65535,4294967295,'\0','\0'),(7374,'Onagetie',255,65535,65535,4294967295,'\0','\0'),(7375,'Steyumi',255,65535,65535,4294967295,'\0','\0'),(7376,'Oeweam',255,65535,65535,4294967295,'\0','\0'),(7377,'Deissenasat',255,65535,65535,4294967295,'\0','\0'),(7378,'Meaengnira',255,65535,65535,4294967295,'\0','\0'),(7379,'Xiocora',255,65535,65535,4294967295,'\0','\0'),(7380,'Letaqu',255,65535,65535,4294967295,'\0','\0'),(7381,'Odxyeteerit',255,65535,65535,4294967295,'\0','\0'),(7382,'Doertz',255,65535,65535,4294967295,'\0','\0'),(7383,'Ilyocone',255,65535,65535,4294967295,'\0','\0'),(7384,'Omtyngues',255,65535,65535,4294967295,'\0','\0'),(7385,'Ahodanyan',255,65535,65535,4294967295,'\0','\0'),(7386,'Cocento',255,65535,65535,4294967295,'\0','\0'),(7387,'Imema',255,65535,65535,4294967295,'\0','\0'),(7388,'Ioamif',255,65535,65535,4294967295,'\0','\0'),(7389,'Enimiubeh',255,65535,65535,4294967295,'\0','\0'),(7390,'Eaton',255,65535,65535,4294967295,'\0','\0'),(7391,'Inutundyop',255,65535,65535,4294967295,'\0','\0'),(7392,'Untipety',255,65535,65535,4294967295,'\0','\0'),(7393,'Umdeoludtho',255,65535,65535,4294967295,'\0','\0'),(7394,'Omia',255,65535,65535,4294967295,'\0','\0'),(7395,'Gitoistyhon',255,65535,65535,4294967295,'\0','\0'),(7396,'Asaesto',255,65535,65535,4294967295,'\0','\0'),(7397,'Pheroau',255,65535,65535,4294967295,'\0','\0'),(7398,'Ogungangaon',255,65535,65535,4294967295,'\0','\0'),(7399,'Eldiosion',255,65535,65535,4294967295,'\0','\0'),(7400,'Aovep',255,65535,65535,4294967295,'\0','\0'),(7401,'Inheil',255,65535,65535,4294967295,'\0','\0'),(7402,'Raonishyenya',255,65535,65535,4294967295,'\0','\0'),(7403,'Oalite',255,65535,65535,4294967295,'\0','\0'),(7404,'Omliolre',255,65535,65535,4294967295,'\0','\0'),(7405,'Uyita',255,65535,65535,4294967295,'\0','\0'),(7406,'Ororreiz',255,65535,65535,4294967295,'\0','\0'),(7407,'Troepieroow',255,65535,65535,4294967295,'\0','\0'),(7408,'Cefuanobeck',255,65535,65535,4294967295,'\0','\0'),(7409,'Kemonaeon',255,65535,65535,4294967295,'\0','\0'),(7410,'Veatre',255,65535,65535,4294967295,'\0','\0'),(7411,'Erihe',255,65535,65535,4294967295,'\0','\0'),(7412,'Urerneaalat',255,65535,65535,4294967295,'\0','\0'),(7413,'Praisointe',255,65535,65535,4294967295,'\0','\0'),(7414,'Eoiat',255,65535,65535,4294967295,'\0','\0'),(7415,'Iyngegn',255,65535,65535,4294967295,'\0','\0'),(7416,'Aegisitat',255,65535,65535,4294967295,'\0','\0'),(7417,'Lyateflei',255,65535,65535,4294967295,'\0','\0'),(7418,'Choontane',255,65535,65535,4294967295,'\0','\0'),(7419,'Geodxy',255,65535,65535,4294967295,'\0','\0'),(7420,'Insruolir',255,65535,65535,4294967295,'\0','\0'),(7421,'Acphuomame',255,65535,65535,4294967295,'\0','\0'),(7422,'Wetalenya',255,65535,65535,4294967295,'\0','\0'),(7423,'Etee',255,65535,65535,4294967295,'\0','\0'),(7424,'Fatpetrayi',255,65535,65535,4294967295,'\0','\0'),(7425,'Taraio',255,65535,65535,4294967295,'\0','\0'),(7426,'Yeeresiat',255,65535,65535,4294967295,'\0','\0'),(7427,'Grypaetfrei',255,65535,65535,4294967295,'\0','\0'),(7428,'Gokaoitcyorm',255,65535,65535,4294967295,'\0','\0'),(7429,'Esheinedege',255,65535,65535,4294967295,'\0','\0'),(7430,'Jirosal',255,65535,65535,4294967295,'\0','\0'),(7431,'Vecitiyuke',255,65535,65535,4294967295,'\0','\0'),(7432,'Ohysewoeve',255,65535,65535,4294967295,'\0','\0'),(7433,'Eneesot',255,65535,65535,4294967295,'\0','\0'),(7434,'Maromeoamp',255,65535,65535,4294967295,'\0','\0'),(7435,'Eiot',255,65535,65535,4294967295,'\0','\0'),(7436,'Oapreepuos',255,65535,65535,4294967295,'\0','\0'),(7437,'Ionicu',255,65535,65535,4294967295,'\0','\0'),(7438,'Eheht',255,65535,65535,4294967295,'\0','\0'),(7439,'Icoriemi',255,65535,65535,4294967295,'\0','\0'),(7440,'Unoeassneso',255,65535,65535,4294967295,'\0','\0'),(7441,'Efevepy',255,65535,65535,4294967295,'\0','\0'),(7442,'Ermeincashal',255,65535,65535,4294967295,'\0','\0'),(7443,'Ooflu',255,65535,65535,4294967295,'\0','\0'),(7444,'Meatopommire',255,65535,65535,4294967295,'\0','\0'),(7445,'Moac',255,65535,65535,4294967295,'\0','\0'),(7446,'Pluarieyi',255,65535,65535,4294967295,'\0','\0'),(7447,'Lale',255,65535,65535,4294967295,'\0','\0'),(7448,'Iowaiciok',255,65535,65535,4294967295,'\0','\0'),(7449,'Eragfae',255,65535,65535,4294967295,'\0','\0'),(7450,'Iacriyi',255,65535,65535,4294967295,'\0','\0'),(7451,'Lereprasi',255,65535,65535,4294967295,'\0','\0'),(7452,'Iser',255,65535,65535,4294967295,'\0','\0'),(7453,'Atguenk',255,65535,65535,4294967295,'\0','\0'),(7454,'Anolar',255,65535,65535,4294967295,'\0','\0'),(7455,'Narefiacra',255,65535,65535,4294967295,'\0','\0'),(7456,'Aiekel',255,65535,65535,4294967295,'\0','\0'),(7457,'Ayinyuy',255,65535,65535,4294967295,'\0','\0'),(7458,'Oiungslail',255,65535,65535,4294967295,'\0','\0'),(7459,'Iamostoit',255,65535,65535,4294967295,'\0','\0'),(7460,'Iureuo',255,65535,65535,4294967295,'\0','\0'),(7461,'Imhaeti',255,65535,65535,4294967295,'\0','\0'),(7462,'Kiyoegatmo',255,65535,65535,4294967295,'\0','\0'),(7463,'Ipialiti',255,65535,65535,4294967295,'\0','\0'),(7464,'Seporayge',255,65535,65535,4294967295,'\0','\0'),(7465,'Edercoell',255,65535,65535,4294967295,'\0','\0'),(7466,'Nearpra',255,65535,65535,4294967295,'\0','\0'),(7467,'Ohowancez',255,65535,65535,4294967295,'\0','\0'),(7468,'Teeyi',255,65535,65535,4294967295,'\0','\0'),(7469,'Uapme',255,65535,65535,4294967295,'\0','\0'),(7470,'Acnedico',255,65535,65535,4294967295,'\0','\0'),(7471,'Ilasupgru',255,65535,65535,4294967295,'\0','\0'),(7472,'Iogamteog',255,65535,65535,4294967295,'\0','\0'),(7473,'Ocenicpiyei',255,65535,65535,4294967295,'\0','\0'),(7474,'Eizei',255,65535,65535,4294967295,'\0','\0'),(7475,'Yuckleanato',255,65535,65535,4294967295,'\0','\0'),(7476,'Eohmaa',255,65535,65535,4294967295,'\0','\0'),(7477,'Inetaulpei',255,65535,65535,4294967295,'\0','\0'),(7478,'Itinriyipru',255,65535,65535,4294967295,'\0','\0'),(7479,'Yeicealsche',255,65535,65535,4294967295,'\0','\0'),(7480,'Iadhohete',255,65535,65535,4294967295,'\0','\0'),(7481,'Eiogackokni',255,65535,65535,4294967295,'\0','\0'),(7482,'Pliuya',255,65535,65535,4294967295,'\0','\0'),(7483,'Notaraiach',255,65535,65535,4294967295,'\0','\0'),(7484,'Siuhodetre',255,65535,65535,4294967295,'\0','\0'),(7485,'Nepoami',255,65535,65535,4294967295,'\0','\0'),(7486,'Adetecewe',255,65535,65535,4294967295,'\0','\0'),(7487,'Atloni',255,65535,65535,4294967295,'\0','\0'),(7488,'Orolteonin',255,65535,65535,4294967295,'\0','\0'),(7489,'Lispewhiotro',255,65535,65535,4294967295,'\0','\0'),(7490,'Oramphoitac',255,65535,65535,4294967295,'\0','\0'),(7491,'Veatatilge',255,65535,65535,4294967295,'\0','\0'),(7492,'Ahpeepizya',255,65535,65535,4294967295,'\0','\0'),(7493,'Acbuyenoulay',255,65535,65535,4294967295,'\0','\0'),(7494,'Idirk',255,65535,65535,4294967295,'\0','\0'),(7495,'Aslaeqapal',255,65535,65535,4294967295,'\0','\0'),(7496,'Ostonexoono',255,65535,65535,4294967295,'\0','\0'),(7497,'Oboe',255,65535,65535,4294967295,'\0','\0'),(7498,'Iphuetdewe',255,65535,65535,4294967295,'\0','\0'),(7499,'Ayilyarimsu',255,65535,65535,4294967295,'\0','\0'),(7500,'Lioleieble',255,65535,65535,4294967295,'\0','\0'),(7501,'Ecocjoeb',255,65535,65535,4294967295,'\0','\0'),(7502,'Claao',255,65535,65535,4294967295,'\0','\0'),(7503,'Upbogeawplo',255,65535,65535,4294967295,'\0','\0'),(7504,'Onoi',255,65535,65535,4294967295,'\0','\0'),(7505,'Coatraoeln',255,65535,65535,4294967295,'\0','\0'),(7506,'Reicybucdro',255,65535,65535,4294967295,'\0','\0'),(7507,'Vieorthleto',255,65535,65535,4294967295,'\0','\0'),(7508,'Emoyspeos',255,65535,65535,4294967295,'\0','\0'),(7509,'Inoetoac',255,65535,65535,4294967295,'\0','\0'),(7510,'Ceilifte',255,65535,65535,4294967295,'\0','\0'),(7511,'Ialpiuyiss',255,65535,65535,4294967295,'\0','\0'),(7512,'Nepriaccyei',255,65535,65535,4294967295,'\0','\0'),(7513,'Isagetoenna',255,65535,65535,4294967295,'\0','\0'),(7514,'Reyeatcreeit',255,65535,65535,4294967295,'\0','\0'),(7515,'Tadiobcaisu',255,65535,65535,4294967295,'\0','\0'),(7516,'Echephose',255,65535,65535,4294967295,'\0','\0'),(7517,'Yrtsune',255,65535,65535,4294967295,'\0','\0'),(7518,'Ieshul',255,65535,65535,4294967295,'\0','\0'),(7519,'Staczene',255,65535,65535,4294967295,'\0','\0'),(7520,'Urupo',255,65535,65535,4294967295,'\0','\0'),(7521,'Midilol',255,65535,65535,4294967295,'\0','\0'),(7522,'Putirophe',255,65535,65535,4294967295,'\0','\0'),(7523,'Tetraci',255,65535,65535,4294967295,'\0','\0'),(7524,'Isici',255,65535,65535,4294967295,'\0','\0'),(7525,'Ofbot',255,65535,65535,4294967295,'\0','\0'),(7526,'Truatesorla',255,65535,65535,4294967295,'\0','\0'),(7527,'Oami',255,65535,65535,4294967295,'\0','\0'),(7528,'Reresyalit',255,65535,65535,4294967295,'\0','\0'),(7529,'Enif',255,65535,65535,4294967295,'\0','\0'),(7530,'Rauleye',255,65535,65535,4294967295,'\0','\0'),(7531,'Ifisaesste',255,65535,65535,4294967295,'\0','\0'),(7532,'Emererna',255,65535,65535,4294967295,'\0','\0'),(7533,'Oguenktie',255,65535,65535,4294967295,'\0','\0'),(7534,'Ituinel',255,65535,65535,4294967295,'\0','\0'),(7535,'Ensocke',255,65535,65535,4294967295,'\0','\0'),(7536,'Muergleao',255,65535,65535,4294967295,'\0','\0'),(7537,'Nesaururos',255,65535,65535,4294967295,'\0','\0'),(7538,'Roalme',255,65535,65535,4294967295,'\0','\0'),(7539,'Uouaidah',255,65535,65535,4294967295,'\0','\0'),(7540,'Usleaop',255,65535,65535,4294967295,'\0','\0'),(7541,'Eefnoil',255,65535,65535,4294967295,'\0','\0'),(7542,'Ischazisbao',255,65535,65535,4294967295,'\0','\0'),(7543,'Oseveo',255,65535,65535,4294967295,'\0','\0'),(7544,'Atumwo',255,65535,65535,4294967295,'\0','\0'),(7545,'Caoickue',255,65535,65535,4294967295,'\0','\0'),(7546,'Aytuehtha',255,65535,65535,4294967295,'\0','\0'),(7547,'Eantdeanple',255,65535,65535,4294967295,'\0','\0'),(7548,'Yafu',255,65535,65535,4294967295,'\0','\0'),(7549,'Jolei',255,65535,65535,4294967295,'\0','\0'),(7550,'Edchatraraow',255,65535,65535,4294967295,'\0','\0'),(7551,'Eruninoleri',255,65535,65535,4294967295,'\0','\0'),(7552,'Nooss',255,65535,65535,4294967295,'\0','\0'),(7553,'Iogsca',255,65535,65535,4294967295,'\0','\0'),(7554,'Aontryuseru',255,65535,65535,4294967295,'\0','\0'),(7555,'Inekabo',255,65535,65535,4294967295,'\0','\0'),(7556,'Aesamta',255,65535,65535,4294967295,'\0','\0'),(7557,'Leseve',255,65535,65535,4294967295,'\0','\0'),(7558,'Gaskoninuye',255,65535,65535,4294967295,'\0','\0'),(7559,'Oasete',255,65535,65535,4294967295,'\0','\0'),(7560,'Litaye',255,65535,65535,4294967295,'\0','\0'),(7561,'Olalero',255,65535,65535,4294967295,'\0','\0'),(7562,'Eaumtora',255,65535,65535,4294967295,'\0','\0'),(7563,'Inmaliorniey',255,65535,65535,4294967295,'\0','\0'),(7564,'Hixenteeto',255,65535,65535,4294967295,'\0','\0'),(7565,'Ieltubi',255,65535,65535,4294967295,'\0','\0'),(7566,'Iendapa',255,65535,65535,4294967295,'\0','\0'),(7567,'Aslacherza',255,65535,65535,4294967295,'\0','\0'),(7568,'Eodanish',255,65535,65535,4294967295,'\0','\0'),(7569,'Oolda',255,65535,65535,4294967295,'\0','\0'),(7570,'Oywarne',255,65535,65535,4294967295,'\0','\0'),(7571,'Eoifymed',255,65535,65535,4294967295,'\0','\0'),(7572,'Bestaumin',255,65535,65535,4294967295,'\0','\0'),(7573,'Dopaeye',255,65535,65535,4294967295,'\0','\0'),(7574,'Okoiteonli',255,65535,65535,4294967295,'\0','\0'),(7575,'Ygno',255,65535,65535,4294967295,'\0','\0'),(7576,'Aireayowar',255,65535,65535,4294967295,'\0','\0'),(7577,'Iveroustama',255,65535,65535,4294967295,'\0','\0'),(7578,'Uideibowa',255,65535,65535,4294967295,'\0','\0'),(7579,'Eetostre',255,65535,65535,4294967295,'\0','\0'),(7580,'Empioligy',255,65535,65535,4294967295,'\0','\0'),(7581,'Aaidsima',255,65535,65535,4294967295,'\0','\0'),(7582,'Sqeireeng',255,65535,65535,4294967295,'\0','\0'),(7583,'Raukoliacem',255,65535,65535,4294967295,'\0','\0'),(7584,'Iroprenaviut',255,65535,65535,4294967295,'\0','\0'),(7585,'Acnesee',255,65535,65535,4294967295,'\0','\0'),(7586,'Aice',255,65535,65535,4294967295,'\0','\0'),(7587,'Omalysre',255,65535,65535,4294967295,'\0','\0'),(7588,'Arleu',255,65535,65535,4294967295,'\0','\0'),(7589,'Rierairo',255,65535,65535,4294967295,'\0','\0'),(7590,'Unweiatu',255,65535,65535,4294967295,'\0','\0'),(7591,'Eruntip',255,65535,65535,4294967295,'\0','\0'),(7592,'Earini',255,65535,65535,4294967295,'\0','\0'),(7593,'Ecead',255,65535,65535,4294967295,'\0','\0'),(7594,'Ofhihewe',255,65535,65535,4294967295,'\0','\0'),(7595,'Eocit',255,65535,65535,4294967295,'\0','\0'),(7596,'Anesgypaong',255,65535,65535,4294967295,'\0','\0'),(7597,'Urnyieosi',255,65535,65535,4294967295,'\0','\0'),(7598,'Neucoramule',255,65535,65535,4294967295,'\0','\0'),(7599,'Nounapwatei',255,65535,65535,4294967295,'\0','\0'),(7600,'Ebaoo',255,65535,65535,4294967295,'\0','\0'),(7601,'Iqinieo',255,65535,65535,4294967295,'\0','\0'),(7602,'Erstinaayi',255,65535,65535,4294967295,'\0','\0'),(7603,'Oaunoner',255,65535,65535,4294967295,'\0','\0'),(7604,'Onneelciro',255,65535,65535,4294967295,'\0','\0'),(7605,'Ytepi',255,65535,65535,4294967295,'\0','\0'),(7606,'Elevliprial',255,65535,65535,4294967295,'\0','\0'),(7607,'Raarcmeat',255,65535,65535,4294967295,'\0','\0'),(7608,'Pruatchurape',255,65535,65535,4294967295,'\0','\0'),(7609,'Esyau',255,65535,65535,4294967295,'\0','\0'),(7610,'Ewesatoi',255,65535,65535,4294967295,'\0','\0'),(7611,'Irtheockamok',255,65535,65535,4294967295,'\0','\0'),(7612,'Ivadata',255,65535,65535,4294967295,'\0','\0'),(7613,'Aktienoje',255,65535,65535,4294967295,'\0','\0'),(7614,'Eala',255,65535,65535,4294967295,'\0','\0'),(7615,'Nuhebyoonil',255,65535,65535,4294967295,'\0','\0'),(7616,'Stiabzeizgae',255,65535,65535,4294967295,'\0','\0'),(7617,'Oiatclyi',255,65535,65535,4294967295,'\0','\0'),(7618,'Ocnorekeasye',255,65535,65535,4294967295,'\0','\0'),(7619,'Meiesicrico',255,65535,65535,4294967295,'\0','\0'),(7620,'Crive',255,65535,65535,4294967295,'\0','\0'),(7621,'Soadiat',255,65535,65535,4294967295,'\0','\0'),(7622,'Manoiri',255,65535,65535,4294967295,'\0','\0'),(7623,'Creidmoe',255,65535,65535,4294967295,'\0','\0'),(7624,'Enti',255,65535,65535,4294967295,'\0','\0'),(7625,'Tace',255,65535,65535,4294967295,'\0','\0'),(7626,'Rainao',255,65535,65535,4294967295,'\0','\0'),(7627,'Aist',255,65535,65535,4294967295,'\0','\0'),(7628,'Amostue',255,65535,65535,4294967295,'\0','\0'),(7629,'Elaishiyu',255,65535,65535,4294967295,'\0','\0'),(7630,'Atitzsioffo',255,65535,65535,4294967295,'\0','\0'),(7631,'Coyocelili',255,65535,65535,4294967295,'\0','\0'),(7632,'Ecautiheaf',255,65535,65535,4294967295,'\0','\0'),(7633,'Eyiru',255,65535,65535,4294967295,'\0','\0'),(7634,'Styonaerde',255,65535,65535,4294967295,'\0','\0'),(7635,'Averellasu',255,65535,65535,4294967295,'\0','\0'),(7636,'Anermatuae',255,65535,65535,4294967295,'\0','\0'),(7637,'Undiabepe',255,65535,65535,4294967295,'\0','\0'),(7638,'Aassheoli',255,65535,65535,4294967295,'\0','\0'),(7639,'Alsuseer',255,65535,65535,4294967295,'\0','\0'),(7640,'Iaum',255,65535,65535,4294967295,'\0','\0'),(7641,'Ioranath',255,65535,65535,4294967295,'\0','\0'),(7642,'Yeocka',255,65535,65535,4294967295,'\0','\0'),(7643,'Raulal',255,65535,65535,4294967295,'\0','\0'),(7644,'Neon',255,65535,65535,4294967295,'\0','\0'),(7645,'Newatiuidne',255,65535,65535,4294967295,'\0','\0'),(7646,'Assyiued',255,65535,65535,4294967295,'\0','\0'),(7647,'Eauwnsteay',255,65535,65535,4294967295,'\0','\0'),(7648,'Ifnefigeape',255,65535,65535,4294967295,'\0','\0'),(7649,'Donapelye',255,65535,65535,4294967295,'\0','\0'),(7650,'Vescrepa',255,65535,65535,4294967295,'\0','\0'),(7651,'Utae',255,65535,65535,4294967295,'\0','\0'),(7652,'Ilru',255,65535,65535,4294967295,'\0','\0'),(7653,'Eqdacateri',255,65535,65535,4294967295,'\0','\0'),(7654,'Oeimlode',255,65535,65535,4294967295,'\0','\0'),(7655,'Ratrekeraub',255,65535,65535,4294967295,'\0','\0'),(7656,'Olad',255,65535,65535,4294967295,'\0','\0'),(7657,'Emtyaoulti',255,65535,65535,4294967295,'\0','\0'),(7658,'Agariyi',255,65535,65535,4294967295,'\0','\0'),(7659,'Pastraicua',255,65535,65535,4294967295,'\0','\0'),(7660,'Eteynii',255,65535,65535,4294967295,'\0','\0'),(7661,'Ingsceziateq',255,65535,65535,4294967295,'\0','\0'),(7662,'Vieyy',255,65535,65535,4294967295,'\0','\0'),(7663,'Hyirei',255,65535,65535,4294967295,'\0','\0'),(7664,'Peotisiack',255,65535,65535,4294967295,'\0','\0'),(7665,'Eoengsho',255,65535,65535,4294967295,'\0','\0'),(7666,'Chiogoiyarni',255,65535,65535,4294967295,'\0','\0'),(7667,'Elekerati',255,65535,65535,4294967295,'\0','\0'),(7668,'Bremeneemoe',255,65535,65535,4294967295,'\0','\0'),(7669,'Obik',255,65535,65535,4294967295,'\0','\0'),(7670,'Itinoeng',255,65535,65535,4294967295,'\0','\0'),(7671,'Oerdi',255,65535,65535,4294967295,'\0','\0'),(7672,'Estienge',255,65535,65535,4294967295,'\0','\0'),(7673,'Skaosmiverd',255,65535,65535,4294967295,'\0','\0'),(7674,'Pede',255,65535,65535,4294967295,'\0','\0'),(7675,'Adehertecem',255,65535,65535,4294967295,'\0','\0'),(7676,'Eores',255,65535,65535,4294967295,'\0','\0'),(7677,'Mearineup',255,65535,65535,4294967295,'\0','\0'),(7678,'Ipiedasne',255,65535,65535,4294967295,'\0','\0'),(7679,'Raytea',255,65535,65535,4294967295,'\0','\0'),(7680,'Knaitulemroo',255,65535,65535,4294967295,'\0','\0'),(7681,'Tiealscilor',255,65535,65535,4294967295,'\0','\0'),(7682,'Oeshogteecev',255,65535,65535,4294967295,'\0','\0'),(7683,'Tiamsole',255,65535,65535,4294967295,'\0','\0'),(7684,'Ereyer',255,65535,65535,4294967295,'\0','\0'),(7685,'Piakesmpi',255,65535,65535,4294967295,'\0','\0'),(7686,'Inkyadeted',255,65535,65535,4294967295,'\0','\0'),(7687,'Aveim',255,65535,65535,4294967295,'\0','\0'),(7688,'Timeiteagg',255,65535,65535,4294967295,'\0','\0'),(7689,'Aehgeerina',255,65535,65535,4294967295,'\0','\0'),(7690,'Hiyna',255,65535,65535,4294967295,'\0','\0'),(7691,'Veim',255,65535,65535,4294967295,'\0','\0'),(7692,'Isamiiteum',255,65535,65535,4294967295,'\0','\0'),(7693,'Ilapinei',255,65535,65535,4294967295,'\0','\0'),(7694,'Isoseapatec',255,65535,65535,4294967295,'\0','\0'),(7695,'Este',255,65535,65535,4294967295,'\0','\0'),(7696,'Speina',255,65535,65535,4294967295,'\0','\0'),(7697,'Teoawegipflo',255,65535,65535,4294967295,'\0','\0'),(7698,'Tiini',255,65535,65535,4294967295,'\0','\0'),(7699,'Raor',255,65535,65535,4294967295,'\0','\0'),(7700,'Otienia',255,65535,65535,4294967295,'\0','\0'),(7701,'Resmiqe',255,65535,65535,4294967295,'\0','\0'),(7702,'Yame',255,65535,65535,4294967295,'\0','\0'),(7703,'Uerga',255,65535,65535,4294967295,'\0','\0'),(7704,'Ileouysay',255,65535,65535,4294967295,'\0','\0'),(7705,'Palkeuog',255,65535,65535,4294967295,'\0','\0'),(7706,'Nopo',255,65535,65535,4294967295,'\0','\0'),(7707,'Griphisio',255,65535,65535,4294967295,'\0','\0'),(7708,'Evemuertoag',255,65535,65535,4294967295,'\0','\0'),(7709,'Eicose',255,65535,65535,4294967295,'\0','\0'),(7710,'Epneqioipco',255,65535,65535,4294967295,'\0','\0'),(7711,'Omicreiuc',255,65535,65535,4294967295,'\0','\0'),(7712,'Etsarii',255,65535,65535,4294967295,'\0','\0'),(7713,'Inttiuackne',255,65535,65535,4294967295,'\0','\0'),(7714,'Soiotisfi',255,65535,65535,4294967295,'\0','\0'),(7715,'Aeckialinda',255,65535,65535,4294967295,'\0','\0'),(7716,'Geugrage',255,65535,65535,4294967295,'\0','\0'),(7717,'Pasacoas',255,65535,65535,4294967295,'\0','\0'),(7718,'Ydseidenda',255,65535,65535,4294967295,'\0','\0'),(7719,'Umdoaht',255,65535,65535,4294967295,'\0','\0'),(7720,'Floenenaylo',255,65535,65535,4294967295,'\0','\0'),(7721,'Ichei',255,65535,65535,4294967295,'\0','\0'),(7722,'Cies',255,65535,65535,4294967295,'\0','\0'),(7723,'Iloly',255,65535,65535,4294967295,'\0','\0'),(7724,'Ialureim',255,65535,65535,4294967295,'\0','\0'),(7725,'Ardteatila',255,65535,65535,4294967295,'\0','\0'),(7726,'Cyayra',255,65535,65535,4294967295,'\0','\0'),(7727,'Intafisiaco',255,65535,65535,4294967295,'\0','\0'),(7728,'Eaoctgegy',255,65535,65535,4294967295,'\0','\0'),(7729,'Tyco',255,65535,65535,4294967295,'\0','\0'),(7730,'Yilosheson',255,65535,65535,4294967295,'\0','\0'),(7731,'Omsiehtima',255,65535,65535,4294967295,'\0','\0'),(7732,'Epzonabyt',255,65535,65535,4294967295,'\0','\0'),(7733,'Reuo',255,65535,65535,4294967295,'\0','\0'),(7734,'Ileer',255,65535,65535,4294967295,'\0','\0'),(7735,'Gadonaboiy',255,65535,65535,4294967295,'\0','\0'),(7736,'Iessnenyeti',255,65535,65535,4294967295,'\0','\0'),(7737,'Oyecadusas',255,65535,65535,4294967295,'\0','\0'),(7738,'Tenaopre',255,65535,65535,4294967295,'\0','\0'),(7739,'Liebaaeca',255,65535,65535,4294967295,'\0','\0'),(7740,'Oesocava',255,65535,65535,4294967295,'\0','\0'),(7741,'Aikcae',255,65535,65535,4294967295,'\0','\0'),(7742,'Feid',255,65535,65535,4294967295,'\0','\0'),(7743,'Trucarointe',255,65535,65535,4294967295,'\0','\0'),(7744,'Umefreelig',255,65535,65535,4294967295,'\0','\0'),(7745,'Ossnoda',255,65535,65535,4294967295,'\0','\0'),(7746,'Sqecatuo',255,65535,65535,4294967295,'\0','\0'),(7747,'Onlaeiumust',255,65535,65535,4294967295,'\0','\0'),(7748,'Yemuio',255,65535,65535,4294967295,'\0','\0'),(7749,'Etartityote',255,65535,65535,4294967295,'\0','\0'),(7750,'Opro',255,65535,65535,4294967295,'\0','\0'),(7751,'Eypse',255,65535,65535,4294967295,'\0','\0'),(7752,'Agey',255,65535,65535,4294967295,'\0','\0'),(7753,'Yapuordel',255,65535,65535,4294967295,'\0','\0'),(7754,'Tespaepstene',255,65535,65535,4294967295,'\0','\0'),(7755,'Tionmeveone',255,65535,65535,4294967295,'\0','\0'),(7756,'Licaibyesu',255,65535,65535,4294967295,'\0','\0'),(7757,'Erornyia',255,65535,65535,4294967295,'\0','\0'),(7758,'Oedua',255,65535,65535,4294967295,'\0','\0'),(7759,'Owtirdi',255,65535,65535,4294967295,'\0','\0'),(7760,'Uopeov',255,65535,65535,4294967295,'\0','\0'),(7761,'Uyppreibesri',255,65535,65535,4294967295,'\0','\0'),(7762,'Ubxiaguut',255,65535,65535,4294967295,'\0','\0'),(7763,'Etsgestrivea',255,65535,65535,4294967295,'\0','\0'),(7764,'Amedruche',255,65535,65535,4294967295,'\0','\0'),(7765,'Oqurouid',255,65535,65535,4294967295,'\0','\0'),(7766,'Itismyssi',255,65535,65535,4294967295,'\0','\0'),(7767,'Eepoiniyo',255,65535,65535,4294967295,'\0','\0'),(7768,'Ulewiobalmi',255,65535,65535,4294967295,'\0','\0'),(7769,'Obusmfiotote',255,65535,65535,4294967295,'\0','\0'),(7770,'Eibyonsaiz',255,65535,65535,4294967295,'\0','\0'),(7771,'Oxiheau',255,65535,65535,4294967295,'\0','\0'),(7772,'Osasreuont',255,65535,65535,4294967295,'\0','\0'),(7773,'Yoesandey',255,65535,65535,4294967295,'\0','\0'),(7774,'Iusto',255,65535,65535,4294967295,'\0','\0'),(7775,'Asit',255,65535,65535,4294967295,'\0','\0'),(7776,'Vueon',255,65535,65535,4294967295,'\0','\0'),(7777,'Ulca',255,65535,65535,4294967295,'\0','\0'),(7778,'Aneoodnena',255,65535,65535,4294967295,'\0','\0'),(7779,'Roneayliri',255,65535,65535,4294967295,'\0','\0'),(7780,'Duocat',255,65535,65535,4294967295,'\0','\0'),(7781,'Agfloanoh',255,65535,65535,4294967295,'\0','\0'),(7782,'Rataysscesue',255,65535,65535,4294967295,'\0','\0'),(7783,'Choetheave',255,65535,65535,4294967295,'\0','\0'),(7784,'Opke',255,65535,65535,4294967295,'\0','\0'),(7785,'Eanut',255,65535,65535,4294967295,'\0','\0'),(7786,'Engrholea',255,65535,65535,4294967295,'\0','\0'),(7787,'Aihtivuch',255,65535,65535,4294967295,'\0','\0'),(7788,'Seeyoapaf',255,65535,65535,4294967295,'\0','\0'),(7789,'Iruleacse',255,65535,65535,4294967295,'\0','\0'),(7790,'Naose',255,65535,65535,4294967295,'\0','\0'),(7791,'Seypriowspe',255,65535,65535,4294967295,'\0','\0'),(7792,'Neniufiue',255,65535,65535,4294967295,'\0','\0'),(7793,'Arfilico',255,65535,65535,4294967295,'\0','\0'),(7794,'Ismacit',255,65535,65535,4294967295,'\0','\0'),(7795,'Poamesepla',255,65535,65535,4294967295,'\0','\0'),(7796,'Oeyoi',255,65535,65535,4294967295,'\0','\0'),(7797,'Oneriloiic',255,65535,65535,4294967295,'\0','\0'),(7798,'Esealbacka',255,65535,65535,4294967295,'\0','\0'),(7799,'Eimnicelo',255,65535,65535,4294967295,'\0','\0'),(7800,'Omitalna',255,65535,65535,4294967295,'\0','\0'),(7801,'Usadcioti',255,65535,65535,4294967295,'\0','\0'),(7802,'Iebluenra',255,65535,65535,4294967295,'\0','\0'),(7803,'Eotyhyya',255,65535,65535,4294967295,'\0','\0'),(7804,'Eogoordete',255,65535,65535,4294967295,'\0','\0'),(7805,'Enarne',255,65535,65535,4294967295,'\0','\0'),(7806,'Onryurald',255,65535,65535,4294967295,'\0','\0'),(7807,'Neameay',255,65535,65535,4294967295,'\0','\0'),(7808,'Peseat',255,65535,65535,4294967295,'\0','\0'),(7809,'Odet',255,65535,65535,4294967295,'\0','\0'),(7810,'Esegendi',255,65535,65535,4294967295,'\0','\0'),(7811,'Nelugave',255,65535,65535,4294967295,'\0','\0'),(7812,'Creibapo',255,65535,65535,4294967295,'\0','\0'),(7813,'Loer',255,65535,65535,4294967295,'\0','\0'),(7814,'Ayorilas',255,65535,65535,4294967295,'\0','\0'),(7815,'Ilnynenie',255,65535,65535,4294967295,'\0','\0'),(7816,'Alilaizo',255,65535,65535,4294967295,'\0','\0'),(7817,'Atonoey',255,65535,65535,4294967295,'\0','\0'),(7818,'Cucaesrionlu',255,65535,65535,4294967295,'\0','\0'),(7819,'Umpoerecliu',255,65535,65535,4294967295,'\0','\0'),(7820,'Iiblierbi',255,65535,65535,4294967295,'\0','\0'),(7821,'Osteoalha',255,65535,65535,4294967295,'\0','\0'),(7822,'Oiiape',255,65535,65535,4294967295,'\0','\0'),(7823,'Atsini',255,65535,65535,4294967295,'\0','\0'),(7824,'Aemaopinin',255,65535,65535,4294967295,'\0','\0'),(7825,'Ineineexom',255,65535,65535,4294967295,'\0','\0'),(7826,'Siuziave',255,65535,65535,4294967295,'\0','\0'),(7827,'Roocmoic',255,65535,65535,4294967295,'\0','\0'),(7828,'Rachocheoar',255,65535,65535,4294967295,'\0','\0'),(7829,'Inopraea',255,65535,65535,4294967295,'\0','\0'),(7830,'Atneimuntino',255,65535,65535,4294967295,'\0','\0'),(7831,'Nele',255,65535,65535,4294967295,'\0','\0'),(7832,'Orelu',255,65535,65535,4294967295,'\0','\0'),(7833,'Apoucameso',255,65535,65535,4294967295,'\0','\0'),(7834,'Ehyjut',255,65535,65535,4294967295,'\0','\0'),(7835,'Neonyiyst',255,65535,65535,4294967295,'\0','\0'),(7836,'Egakeiraep',255,65535,65535,4294967295,'\0','\0'),(7837,'Istestyo',255,65535,65535,4294967295,'\0','\0'),(7838,'Ulpeikohla',255,65535,65535,4294967295,'\0','\0'),(7839,'Fraeleent',255,65535,65535,4294967295,'\0','\0'),(7840,'Roawuidne',255,65535,65535,4294967295,'\0','\0'),(7841,'Iroup',255,65535,65535,4294967295,'\0','\0'),(7842,'Epunewele',255,65535,65535,4294967295,'\0','\0'),(7843,'Tygayastbu',255,65535,65535,4294967295,'\0','\0'),(7844,'Omoamiahtli',255,65535,65535,4294967295,'\0','\0'),(7845,'Syakbretriin',255,65535,65535,4294967295,'\0','\0'),(7846,'Isnema',255,65535,65535,4294967295,'\0','\0'),(7847,'Iesei',255,65535,65535,4294967295,'\0','\0'),(7848,'Hapliaymiuis',255,65535,65535,4294967295,'\0','\0'),(7849,'Rartano',255,65535,65535,4294967295,'\0','\0'),(7850,'Coartao',255,65535,65535,4294967295,'\0','\0'),(7851,'Ciowitoceub',255,65535,65535,4294967295,'\0','\0'),(7852,'Lyaclu',255,65535,65535,4294967295,'\0','\0'),(7853,'Aroki',255,65535,65535,4294967295,'\0','\0'),(7854,'Untoopentoh',255,65535,65535,4294967295,'\0','\0'),(7855,'Apicawreerul',255,65535,65535,4294967295,'\0','\0'),(7856,'Oiopat',255,65535,65535,4294967295,'\0','\0'),(7857,'Ilmleaneac',255,65535,65535,4294967295,'\0','\0'),(7858,'Ayalraefe',255,65535,65535,4294967295,'\0','\0'),(7859,'Riaotte',255,65535,65535,4294967295,'\0','\0'),(7860,'Raaensie',255,65535,65535,4294967295,'\0','\0'),(7861,'Ytuscechaer',255,65535,65535,4294967295,'\0','\0'),(7862,'Eyorakielid',255,65535,65535,4294967295,'\0','\0'),(7863,'Aeinaye',255,65535,65535,4294967295,'\0','\0'),(7864,'Iabelaeh',255,65535,65535,4294967295,'\0','\0'),(7865,'Mierdeyeai',255,65535,65535,4294967295,'\0','\0'),(7866,'Eiasoives',255,65535,65535,4294967295,'\0','\0'),(7867,'Uebegatus',255,65535,65535,4294967295,'\0','\0'),(7868,'Ileheyu',255,65535,65535,4294967295,'\0','\0'),(7869,'Athegerer',255,65535,65535,4294967295,'\0','\0'),(7870,'Imueat',255,65535,65535,4294967295,'\0','\0'),(7871,'Triissisom',255,65535,65535,4294967295,'\0','\0'),(7872,'Buca',255,65535,65535,4294967295,'\0','\0'),(7873,'Emaeiis',255,65535,65535,4294967295,'\0','\0'),(7874,'Mireeyadi',255,65535,65535,4294967295,'\0','\0'),(7875,'Utsidenva',255,65535,65535,4294967295,'\0','\0'),(7876,'Amideave',255,65535,65535,4294967295,'\0','\0'),(7877,'Acic',255,65535,65535,4294967295,'\0','\0'),(7878,'Onissinsama',255,65535,65535,4294967295,'\0','\0'),(7879,'Neeyuse',255,65535,65535,4294967295,'\0','\0'),(7880,'Inochilil',255,65535,65535,4294967295,'\0','\0'),(7881,'Fidese',255,65535,65535,4294967295,'\0','\0'),(7882,'Aierail',255,65535,65535,4294967295,'\0','\0'),(7883,'Emayno',255,65535,65535,4294967295,'\0','\0'),(7884,'Endenuce',255,65535,65535,4294967295,'\0','\0'),(7885,'Poangatompe',255,65535,65535,4294967295,'\0','\0'),(7886,'Ureltaolar',255,65535,65535,4294967295,'\0','\0'),(7887,'Iaorao',255,65535,65535,4294967295,'\0','\0'),(7888,'Ivaeo',255,65535,65535,4294967295,'\0','\0'),(7889,'Ecce',255,65535,65535,4294967295,'\0','\0'),(7890,'Evcoyit',255,65535,65535,4294967295,'\0','\0'),(7891,'Atkeodei',255,65535,65535,4294967295,'\0','\0'),(7892,'Ohme',255,65535,65535,4294967295,'\0','\0'),(7893,'Aojeoju',255,65535,65535,4294967295,'\0','\0'),(7894,'Riey',255,65535,65535,4294967295,'\0','\0'),(7895,'Thussedenroy',255,65535,65535,4294967295,'\0','\0'),(7896,'Voannego',255,65535,65535,4294967295,'\0','\0'),(7897,'Sene',255,65535,65535,4294967295,'\0','\0'),(7898,'Agle',255,65535,65535,4294967295,'\0','\0'),(7899,'Iteaivo',255,65535,65535,4294967295,'\0','\0'),(7900,'Pareilyardi',255,65535,65535,4294967295,'\0','\0'),(7901,'Eoppu',255,65535,65535,4294967295,'\0','\0'),(7902,'Peitbea',255,65535,65535,4294967295,'\0','\0'),(7903,'Saetra',255,65535,65535,4294967295,'\0','\0'),(7904,'Oyui',255,65535,65535,4294967295,'\0','\0'),(7905,'Cyassiertre',255,65535,65535,4294967295,'\0','\0'),(7906,'Zearnikieste',255,65535,65535,4294967295,'\0','\0'),(7907,'Giahotasuve',255,65535,65535,4294967295,'\0','\0'),(7908,'Aemat',255,65535,65535,4294967295,'\0','\0'),(7909,'Veigegle',255,65535,65535,4294967295,'\0','\0'),(7910,'Curyte',255,65535,65535,4294967295,'\0','\0'),(7911,'Atfiraast',255,65535,65535,4294967295,'\0','\0'),(7912,'Entsce',255,65535,65535,4294967295,'\0','\0'),(7913,'Covepruaafri',255,65535,65535,4294967295,'\0','\0'),(7914,'Ateniohail',255,65535,65535,4294967295,'\0','\0'),(7915,'Isol',255,65535,65535,4294967295,'\0','\0'),(7916,'Ahukiero',255,65535,65535,4294967295,'\0','\0'),(7917,'Yininopeub',255,65535,65535,4294967295,'\0','\0'),(7918,'Baigbrebeo',255,65535,65535,4294967295,'\0','\0'),(7919,'Yidco',255,65535,65535,4294967295,'\0','\0'),(7920,'Saachue',255,65535,65535,4294967295,'\0','\0'),(7921,'Iomi',255,65535,65535,4294967295,'\0','\0'),(7922,'Entlean',255,65535,65535,4294967295,'\0','\0'),(7923,'Saios',255,65535,65535,4294967295,'\0','\0'),(7924,'Oyinot',255,65535,65535,4294967295,'\0','\0'),(7925,'Eroeycleni',255,65535,65535,4294967295,'\0','\0'),(7926,'Uabiif',255,65535,65535,4294967295,'\0','\0'),(7927,'Elouoruro',255,65535,65535,4294967295,'\0','\0'),(7928,'Raistasson',255,65535,65535,4294967295,'\0','\0'),(7929,'Naacet',255,65535,65535,4294967295,'\0','\0'),(7930,'Ucenidto',255,65535,65535,4294967295,'\0','\0'),(7931,'Ozavo',255,65535,65535,4294967295,'\0','\0'),(7932,'Tissyveo',255,65535,65535,4294967295,'\0','\0'),(7933,'Voayie',255,65535,65535,4294967295,'\0','\0'),(7934,'Reraproi',255,65535,65535,4294967295,'\0','\0'),(7935,'Oapan',255,65535,65535,4294967295,'\0','\0'),(7936,'Iedleiph',255,65535,65535,4294967295,'\0','\0'),(7937,'Noae',255,65535,65535,4294967295,'\0','\0'),(7938,'Treulaoatard',255,65535,65535,4294967295,'\0','\0'),(7939,'Oayfresiap',255,65535,65535,4294967295,'\0','\0'),(7940,'Itzuoleloor',255,65535,65535,4294967295,'\0','\0'),(7941,'Urpopni',255,65535,65535,4294967295,'\0','\0'),(7942,'Hiebiiear',255,65535,65535,4294967295,'\0','\0'),(7943,'Ueom',255,65535,65535,4294967295,'\0','\0'),(7944,'Yiatheo',255,65535,65535,4294967295,'\0','\0'),(7945,'Uratucabynym',255,65535,65535,4294967295,'\0','\0'),(7946,'Issniusti',255,65535,65535,4294967295,'\0','\0'),(7947,'Ucinrepeba',255,65535,65535,4294967295,'\0','\0'),(7948,'Iackni',255,65535,65535,4294967295,'\0','\0'),(7949,'Igeli',255,65535,65535,4294967295,'\0','\0'),(7950,'Asetiuctog',255,65535,65535,4294967295,'\0','\0'),(7951,'Neesiaysico',255,65535,65535,4294967295,'\0','\0'),(7952,'Ceneroa',255,65535,65535,4294967295,'\0','\0'),(7953,'Eyahith',255,65535,65535,4294967295,'\0','\0'),(7954,'Eoati',255,65535,65535,4294967295,'\0','\0'),(7955,'Oreaceon',255,65535,65535,4294967295,'\0','\0'),(7956,'Adigomonis',255,65535,65535,4294967295,'\0','\0'),(7957,'Eraltoen',255,65535,65535,4294967295,'\0','\0'),(7958,'Ieut',255,65535,65535,4294967295,'\0','\0'),(7959,'Engjeati',255,65535,65535,4294967295,'\0','\0'),(7960,'Enupculyrawo',255,65535,65535,4294967295,'\0','\0'),(7961,'Ipabyoviyat',255,65535,65535,4294967295,'\0','\0'),(7962,'Edatutnai',255,65535,65535,4294967295,'\0','\0'),(7963,'Aonyr',255,65535,65535,4294967295,'\0','\0'),(7964,'Atulstoacwo',255,65535,65535,4294967295,'\0','\0'),(7965,'Yalcheer',255,65535,65535,4294967295,'\0','\0'),(7966,'Iataberdopu',255,65535,65535,4294967295,'\0','\0'),(7967,'Coli',255,65535,65535,4294967295,'\0','\0'),(7968,'Latruza',255,65535,65535,4294967295,'\0','\0'),(7969,'Flaoyraw',255,65535,65535,4294967295,'\0','\0'),(7970,'Ieesoung',255,65535,65535,4294967295,'\0','\0'),(7971,'Uaeyeongal',255,65535,65535,4294967295,'\0','\0'),(7972,'Aitneeram',255,65535,65535,4294967295,'\0','\0'),(7973,'Inuatdo',255,65535,65535,4294967295,'\0','\0'),(7974,'Ipriedeif',255,65535,65535,4294967295,'\0','\0'),(7975,'Yeteedaz',255,65535,65535,4294967295,'\0','\0'),(7976,'Sleroreli',255,65535,65535,4294967295,'\0','\0'),(7977,'Acninphoesmi',255,65535,65535,4294967295,'\0','\0'),(7978,'Naoiphoghem',255,65535,65535,4294967295,'\0','\0'),(7979,'Etuoase',255,65535,65535,4294967295,'\0','\0'),(7980,'Loesag',255,65535,65535,4294967295,'\0','\0'),(7981,'Ynicant',255,65535,65535,4294967295,'\0','\0'),(7982,'Peyoi',255,65535,65535,4294967295,'\0','\0'),(7983,'Spieene',255,65535,65535,4294967295,'\0','\0'),(7984,'Abaede',255,65535,65535,4294967295,'\0','\0'),(7985,'Uaracaerna',255,65535,65535,4294967295,'\0','\0'),(7986,'Yomaunesti',255,65535,65535,4294967295,'\0','\0'),(7987,'Lopaoarpo',255,65535,65535,4294967295,'\0','\0'),(7988,'Uyab',255,65535,65535,4294967295,'\0','\0'),(7989,'Otia',255,65535,65535,4294967295,'\0','\0'),(7990,'Ansalyngai',255,65535,65535,4294967295,'\0','\0'),(7991,'Upuinbiopu',255,65535,65535,4294967295,'\0','\0'),(7992,'Eoinrioo',255,65535,65535,4294967295,'\0','\0'),(7993,'Uioretneto',255,65535,65535,4294967295,'\0','\0'),(7994,'Iumya',255,65535,65535,4294967295,'\0','\0'),(7995,'Shofyro',255,65535,65535,4294967295,'\0','\0'),(7996,'Brooroteo',255,65535,65535,4294967295,'\0','\0'),(7997,'Sisetozelu',255,65535,65535,4294967295,'\0','\0'),(7998,'Uiurloecop',255,65535,65535,4294967295,'\0','\0'),(7999,'Earnoer',255,65535,65535,4294967295,'\0','\0'),(8000,'Ixeangat',255,65535,65535,4294967295,'\0','\0'),(8001,'Turupriro',255,65535,65535,4294967295,'\0','\0'),(8002,'Aieveeyond',255,65535,65535,4294967295,'\0','\0'),(8003,'Waareruleher',255,65535,65535,4294967295,'\0','\0'),(8004,'Apcaerockfa',255,65535,65535,4294967295,'\0','\0'),(8005,'Ymdipyerico',255,65535,65535,4294967295,'\0','\0'),(8006,'Essaichcera',255,65535,65535,4294967295,'\0','\0'),(8007,'Ituri',255,65535,65535,4294967295,'\0','\0'),(8008,'Ecul',255,65535,65535,4294967295,'\0','\0'),(8009,'Saagresa',255,65535,65535,4294967295,'\0','\0'),(8010,'Ieuch',255,65535,65535,4294967295,'\0','\0'),(8011,'Node',255,65535,65535,4294967295,'\0','\0'),(8012,'Omagve',255,65535,65535,4294967295,'\0','\0'),(8013,'Iflodaaon',255,65535,65535,4294967295,'\0','\0'),(8014,'Bianeraob',255,65535,65535,4294967295,'\0','\0'),(8015,'Onamibone',255,65535,65535,4294967295,'\0','\0'),(8016,'Iotluynsniem',255,65535,65535,4294967295,'\0','\0'),(8017,'Pepitooe',255,65535,65535,4294967295,'\0','\0'),(8018,'Lonayomum',255,65535,65535,4294967295,'\0','\0'),(8019,'Akaentianto',255,65535,65535,4294967295,'\0','\0'),(8020,'Ipashimila',255,65535,65535,4294967295,'\0','\0'),(8021,'Uuoelo',255,65535,65535,4294967295,'\0','\0'),(8022,'Uieagshul',255,65535,65535,4294967295,'\0','\0'),(8023,'Atof',255,65535,65535,4294967295,'\0','\0'),(8024,'Apuaonaba',255,65535,65535,4294967295,'\0','\0'),(8025,'Ulmapoe',255,65535,65535,4294967295,'\0','\0'),(8026,'Erme',255,65535,65535,4294967295,'\0','\0'),(8027,'Peoriht',255,65535,65535,4294967295,'\0','\0'),(8028,'Oelice',255,65535,65535,4294967295,'\0','\0'),(8029,'Saleickneey',255,65535,65535,4294967295,'\0','\0'),(8030,'Acoengooad',255,65535,65535,4294967295,'\0','\0'),(8031,'Ibusom',255,65535,65535,4294967295,'\0','\0'),(8032,'Aophubearid',255,65535,65535,4294967295,'\0','\0'),(8033,'Atock',255,65535,65535,4294967295,'\0','\0'),(8034,'Aaornatimu',255,65535,65535,4294967295,'\0','\0'),(8035,'Olothintai',255,65535,65535,4294967295,'\0','\0'),(8036,'Sholaco',255,65535,65535,4294967295,'\0','\0'),(8037,'Atipogroad',255,65535,65535,4294967295,'\0','\0'),(8038,'Iroay',255,65535,65535,4294967295,'\0','\0'),(8039,'Noesiomryre',255,65535,65535,4294967295,'\0','\0'),(8040,'Alsqislouc',255,65535,65535,4294967295,'\0','\0'),(8041,'Eahaulin',255,65535,65535,4294967295,'\0','\0'),(8042,'Ryaleys',255,65535,65535,4294967295,'\0','\0'),(8043,'Elealo',255,65535,65535,4294967295,'\0','\0'),(8044,'Aonami',255,65535,65535,4294967295,'\0','\0'),(8045,'Erraelzedeso',255,65535,65535,4294967295,'\0','\0'),(8046,'Iolsioang',255,65535,65535,4294967295,'\0','\0'),(8047,'Inoymeho',255,65535,65535,4294967295,'\0','\0'),(8048,'Ovilpa',255,65535,65535,4294967295,'\0','\0'),(8049,'Iwkaneismush',255,65535,65535,4294967295,'\0','\0'),(8050,'Boonae',255,65535,65535,4294967295,'\0','\0'),(8051,'Hegleoogi',255,65535,65535,4294967295,'\0','\0'),(8052,'Umriutovma',255,65535,65535,4294967295,'\0','\0'),(8053,'Imin',255,65535,65535,4294967295,'\0','\0'),(8054,'Moso',255,65535,65535,4294967295,'\0','\0'),(8055,'Etspanaad',255,65535,65535,4294967295,'\0','\0'),(8056,'Ulregreejab',255,65535,65535,4294967295,'\0','\0'),(8057,'Ovayico',255,65535,65535,4294967295,'\0','\0'),(8058,'Scueaovos',255,65535,65535,4294967295,'\0','\0'),(8059,'Ucheonayeaft',255,65535,65535,4294967295,'\0','\0'),(8060,'Rodirezetyu',255,65535,65535,4294967295,'\0','\0'),(8061,'Idtoable',255,65535,65535,4294967295,'\0','\0'),(8062,'Uslaifta',255,65535,65535,4294967295,'\0','\0'),(8063,'Ridi',255,65535,65535,4294967295,'\0','\0'),(8064,'Apoaerro',255,65535,65535,4294967295,'\0','\0'),(8065,'Emarmeetond',255,65535,65535,4294967295,'\0','\0'),(8066,'Nimo',255,65535,65535,4294967295,'\0','\0'),(8067,'Azubetymi',255,65535,65535,4294967295,'\0','\0'),(8068,'Coyl',255,65535,65535,4294967295,'\0','\0'),(8069,'Eyefyduopag',255,65535,65535,4294967295,'\0','\0'),(8070,'Odyavimigasi',255,65535,65535,4294967295,'\0','\0'),(8071,'Cheileemspe',255,65535,65535,4294967295,'\0','\0'),(8072,'Anobedetene',255,65535,65535,4294967295,'\0','\0'),(8073,'Corair',255,65535,65535,4294967295,'\0','\0'),(8074,'Esots',255,65535,65535,4294967295,'\0','\0'),(8075,'Varene',255,65535,65535,4294967295,'\0','\0'),(8076,'Iroofcify',255,65535,65535,4294967295,'\0','\0'),(8077,'Einay',255,65535,65535,4294967295,'\0','\0'),(8078,'Uabyose',255,65535,65535,4294967295,'\0','\0'),(8079,'Ytsedor',255,65535,65535,4294967295,'\0','\0'),(8080,'Opit',255,65535,65535,4294967295,'\0','\0'),(8081,'Hoyeswagi',255,65535,65535,4294967295,'\0','\0'),(8082,'Aneouftfi',255,65535,65535,4294967295,'\0','\0'),(8083,'Umismturae',255,65535,65535,4294967295,'\0','\0'),(8084,'Lepoehockeg',255,65535,65535,4294967295,'\0','\0'),(8085,'Ochucenotile',255,65535,65535,4294967295,'\0','\0'),(8086,'Eperla',255,65535,65535,4294967295,'\0','\0'),(8087,'Eiroria',255,65535,65535,4294967295,'\0','\0'),(8088,'Etweeneanol',255,65535,65535,4294967295,'\0','\0'),(8089,'Iaatyfolpe',255,65535,65535,4294967295,'\0','\0'),(8090,'Sleabey',255,65535,65535,4294967295,'\0','\0'),(8091,'Doyoymbawi',255,65535,65535,4294967295,'\0','\0'),(8092,'Shial',255,65535,65535,4294967295,'\0','\0'),(8093,'Nesterohoni',255,65535,65535,4294967295,'\0','\0'),(8094,'Thiape',255,65535,65535,4294967295,'\0','\0'),(8095,'Yedostak',255,65535,65535,4294967295,'\0','\0'),(8096,'Agoocudoert',255,65535,65535,4294967295,'\0','\0'),(8097,'Biceit',255,65535,65535,4294967295,'\0','\0'),(8098,'Biysufreoti',255,65535,65535,4294967295,'\0','\0'),(8099,'Imat',255,65535,65535,4294967295,'\0','\0'),(8100,'Inoa',255,65535,65535,4294967295,'\0','\0'),(8101,'Erchomera',255,65535,65535,4294967295,'\0','\0'),(8102,'Agein',255,65535,65535,4294967295,'\0','\0'),(8103,'Epuob',255,65535,65535,4294967295,'\0','\0'),(8104,'Eypimine',255,65535,65535,4294967295,'\0','\0'),(8105,'Orolcoerti',255,65535,65535,4294967295,'\0','\0'),(8106,'Ivaolue',255,65535,65535,4294967295,'\0','\0'),(8107,'Otopei',255,65535,65535,4294967295,'\0','\0'),(8108,'Kelecephinai',255,65535,65535,4294967295,'\0','\0'),(8109,'Oetspheayo',255,65535,65535,4294967295,'\0','\0'),(8110,'Idetyole',255,65535,65535,4294967295,'\0','\0'),(8111,'Neial',255,65535,65535,4294967295,'\0','\0'),(8112,'Oagti',255,65535,65535,4294967295,'\0','\0'),(8113,'Esaoyergro',255,65535,65535,4294967295,'\0','\0'),(8114,'Evaeorin',255,65535,65535,4294967295,'\0','\0'),(8115,'Abiarpoag',255,65535,65535,4294967295,'\0','\0'),(8116,'Leeakscoaal',255,65535,65535,4294967295,'\0','\0'),(8117,'Odceyoiz',255,65535,65535,4294967295,'\0','\0'),(8118,'Eonhi',255,65535,65535,4294967295,'\0','\0'),(8119,'Aerdmeak',255,65535,65535,4294967295,'\0','\0'),(8120,'Dorudreesro',255,65535,65535,4294967295,'\0','\0'),(8121,'Iesoethoras',255,65535,65535,4294967295,'\0','\0'),(8122,'Ortiongai',255,65535,65535,4294967295,'\0','\0'),(8123,'Zechiteeor',255,65535,65535,4294967295,'\0','\0'),(8124,'Awoutpe',255,65535,65535,4294967295,'\0','\0'),(8125,'Bapiom',255,65535,65535,4294967295,'\0','\0'),(8126,'Untriani',255,65535,65535,4294967295,'\0','\0'),(8127,'Ihoam',255,65535,65535,4294967295,'\0','\0'),(8128,'Neotuyeect',255,65535,65535,4294967295,'\0','\0'),(8129,'Allakrableed',255,65535,65535,4294967295,'\0','\0'),(8130,'Atatikud',255,65535,65535,4294967295,'\0','\0'),(8131,'Eniosa',255,65535,65535,4294967295,'\0','\0'),(8132,'Agaostaec',255,65535,65535,4294967295,'\0','\0'),(8133,'Ealfnozaaf',255,65535,65535,4294967295,'\0','\0'),(8134,'Tica',255,65535,65535,4294967295,'\0','\0'),(8135,'Coisay',255,65535,65535,4294967295,'\0','\0'),(8136,'Owbeuimi',255,65535,65535,4294967295,'\0','\0'),(8137,'Efaerur',255,65535,65535,4294967295,'\0','\0'),(8138,'Astproghse',255,65535,65535,4294967295,'\0','\0'),(8139,'Aneuriznoyu',255,65535,65535,4294967295,'\0','\0'),(8140,'Fleryroeng',255,65535,65535,4294967295,'\0','\0'),(8141,'Otorenraaher',255,65535,65535,4294967295,'\0','\0'),(8142,'Ouscleaap',255,65535,65535,4294967295,'\0','\0'),(8143,'Oghraco',255,65535,65535,4294967295,'\0','\0'),(8144,'Utiomeplati',255,65535,65535,4294967295,'\0','\0'),(8145,'Sepaaitmave',255,65535,65535,4294967295,'\0','\0'),(8146,'Empein',255,65535,65535,4294967295,'\0','\0'),(8147,'Esigse',255,65535,65535,4294967295,'\0','\0'),(8148,'Neasumniit',255,65535,65535,4294967295,'\0','\0'),(8149,'Sueyoitiyi',255,65535,65535,4294967295,'\0','\0'),(8150,'Swemchaep',255,65535,65535,4294967295,'\0','\0'),(8151,'Eayerstre',255,65535,65535,4294967295,'\0','\0'),(8152,'Nieraltruera',255,65535,65535,4294967295,'\0','\0'),(8153,'Aesayesuu',255,65535,65535,4294967295,'\0','\0'),(8154,'Leyage',255,65535,65535,4294967295,'\0','\0'),(8155,'Odonidea',255,65535,65535,4294967295,'\0','\0'),(8156,'Ewhyumahati',255,65535,65535,4294967295,'\0','\0'),(8157,'Utal',255,65535,65535,4294967295,'\0','\0'),(8158,'Keyegaop',255,65535,65535,4294967295,'\0','\0'),(8159,'Neciwa',255,65535,65535,4294967295,'\0','\0'),(8160,'Urona',255,65535,65535,4294967295,'\0','\0'),(8161,'Ateessacai',255,65535,65535,4294967295,'\0','\0'),(8162,'Alabis',255,65535,65535,4294967295,'\0','\0'),(8163,'Iotiryi',255,65535,65535,4294967295,'\0','\0'),(8164,'Moilirseum',255,65535,65535,4294967295,'\0','\0'),(8165,'Atpaikseark',255,65535,65535,4294967295,'\0','\0'),(8166,'Whaodacenito',255,65535,65535,4294967295,'\0','\0'),(8167,'Yfuacse',255,65535,65535,4294967295,'\0','\0'),(8168,'Wyhiidisiv',255,65535,65535,4294967295,'\0','\0'),(8169,'Yraempgyi',255,65535,65535,4294967295,'\0','\0'),(8170,'Achrautri',255,65535,65535,4294967295,'\0','\0'),(8171,'Iicton',255,65535,65535,4294967295,'\0','\0'),(8172,'Memai',255,65535,65535,4294967295,'\0','\0'),(8173,'Fefeao',255,65535,65535,4294967295,'\0','\0'),(8174,'Meam',255,65535,65535,4294967295,'\0','\0'),(8175,'Abeckreic',255,65535,65535,4294967295,'\0','\0'),(8176,'Epneenreus',255,65535,65535,4294967295,'\0','\0'),(8177,'Amooestey',255,65535,65535,4294967295,'\0','\0'),(8178,'Iveyl',255,65535,65535,4294967295,'\0','\0'),(8179,'Beitishulyu',255,65535,65535,4294967295,'\0','\0'),(8180,'Anasia',255,65535,65535,4294967295,'\0','\0'),(8181,'Amnaproip',255,65535,65535,4294967295,'\0','\0'),(8182,'Auanamp',255,65535,65535,4294967295,'\0','\0'),(8183,'Asayobiviap',255,65535,65535,4294967295,'\0','\0'),(8184,'Ugjia',255,65535,65535,4294967295,'\0','\0'),(8185,'Ositivemi',255,65535,65535,4294967295,'\0','\0'),(8186,'Eriele',255,65535,65535,4294967295,'\0','\0'),(8187,'Ezimav',255,65535,65535,4294967295,'\0','\0'),(8188,'Maeayraazza',255,65535,65535,4294967295,'\0','\0'),(8189,'Inoaniefa',255,65535,65535,4294967295,'\0','\0'),(8190,'Yoochayae',255,65535,65535,4294967295,'\0','\0'),(8191,'Maitede',255,65535,65535,4294967295,'\0','\0'),(8192,'Piaiak',255,65535,65535,4294967295,'\0','\0'),(8193,'Itolysielo',255,65535,65535,4294967295,'\0','\0'),(8194,'Ilerite',255,65535,65535,4294967295,'\0','\0'),(8195,'Druvenatepe',255,65535,65535,4294967295,'\0','\0'),(8196,'Loniessryaz',255,65535,65535,4294967295,'\0','\0'),(8197,'Aereeki',255,65535,65535,4294967295,'\0','\0'),(8198,'Ieyayo',255,65535,65535,4294967295,'\0','\0'),(8199,'Alyatbely',255,65535,65535,4294967295,'\0','\0'),(8200,'Aidocoute',255,65535,65535,4294967295,'\0','\0'),(8201,'Ellme',255,65535,65535,4294967295,'\0','\0'),(8202,'Erid',255,65535,65535,4294967295,'\0','\0'),(8203,'Icyoiui',255,65535,65535,4294967295,'\0','\0'),(8204,'Akvio',255,65535,65535,4294967295,'\0','\0'),(8205,'Oorlu',255,65535,65535,4294967295,'\0','\0'),(8206,'Arioiu',255,65535,65535,4294967295,'\0','\0'),(8207,'Amihtusfro',255,65535,65535,4294967295,'\0','\0'),(8208,'Ieatais',255,65535,65535,4294967295,'\0','\0'),(8209,'Oidiptitno',255,65535,65535,4294967295,'\0','\0'),(8210,'Prephazeze',255,65535,65535,4294967295,'\0','\0'),(8211,'Epyendhyie',255,65535,65535,4294967295,'\0','\0'),(8212,'Icchasimea',255,65535,65535,4294967295,'\0','\0'),(8213,'Xibao',255,65535,65535,4294967295,'\0','\0'),(8214,'Echiosi',255,65535,65535,4294967295,'\0','\0'),(8215,'Opnenei',255,65535,65535,4294967295,'\0','\0'),(8216,'Assuocri',255,65535,65535,4294967295,'\0','\0'),(8217,'Uyeo',255,65535,65535,4294967295,'\0','\0'),(8218,'Eretofneipa',255,65535,65535,4294967295,'\0','\0'),(8219,'Nialtmi',255,65535,65535,4294967295,'\0','\0'),(8220,'Bidieraam',255,65535,65535,4294967295,'\0','\0'),(8221,'Aetoneli',255,65535,65535,4294967295,'\0','\0'),(8222,'Ischaboass',255,65535,65535,4294967295,'\0','\0'),(8223,'Igni',255,65535,65535,4294967295,'\0','\0'),(8224,'Oangadra',255,65535,65535,4294967295,'\0','\0'),(8225,'Antzoiomame',255,65535,65535,4294967295,'\0','\0'),(8226,'Bocrituestru',255,65535,65535,4294967295,'\0','\0'),(8227,'Ocinisiproa',255,65535,65535,4294967295,'\0','\0'),(8228,'Upaokaev',255,65535,65535,4294967295,'\0','\0'),(8229,'Ackyo',255,65535,65535,4294967295,'\0','\0'),(8230,'Puetey',255,65535,65535,4294967295,'\0','\0'),(8231,'Eytrapylio',255,65535,65535,4294967295,'\0','\0'),(8232,'Etaes',255,65535,65535,4294967295,'\0','\0'),(8233,'Enveingogco',255,65535,65535,4294967295,'\0','\0'),(8234,'Uioopu',255,65535,65535,4294967295,'\0','\0'),(8235,'Ilroahor',255,65535,65535,4294967295,'\0','\0'),(8236,'Leteerepi',255,65535,65535,4294967295,'\0','\0'),(8237,'Etunona',255,65535,65535,4294967295,'\0','\0'),(8238,'Ogeareno',255,65535,65535,4294967295,'\0','\0'),(8239,'Amifa',255,65535,65535,4294967295,'\0','\0'),(8240,'Ezzaet',255,65535,65535,4294967295,'\0','\0'),(8241,'Oyceyiah',255,65535,65535,4294967295,'\0','\0'),(8242,'Oeertalado',255,65535,65535,4294967295,'\0','\0'),(8243,'Poraireind',255,65535,65535,4294967295,'\0','\0'),(8244,'Usmnane',255,65535,65535,4294967295,'\0','\0'),(8245,'Ibriainaber',255,65535,65535,4294967295,'\0','\0'),(8246,'Izocneno',255,65535,65535,4294967295,'\0','\0'),(8247,'Ofroebynea',255,65535,65535,4294967295,'\0','\0'),(8248,'Eeongro',255,65535,65535,4294967295,'\0','\0'),(8249,'Fapekmeho',255,65535,65535,4294967295,'\0','\0'),(8250,'Caeiena',255,65535,65535,4294967295,'\0','\0'),(8251,'Chepaazyto',255,65535,65535,4294967295,'\0','\0'),(8252,'Rinieszail',255,65535,65535,4294967295,'\0','\0'),(8253,'Abyergestio',255,65535,65535,4294967295,'\0','\0'),(8254,'Neangie',255,65535,65535,4294967295,'\0','\0'),(8255,'Oluoabent',255,65535,65535,4294967295,'\0','\0'),(8256,'Luoypemyte',255,65535,65535,4294967295,'\0','\0'),(8257,'Ioltichida',255,65535,65535,4294967295,'\0','\0'),(8258,'Roinearreant',255,65535,65535,4294967295,'\0','\0'),(8259,'Noaryo',255,65535,65535,4294967295,'\0','\0'),(8260,'Kita',255,65535,65535,4294967295,'\0','\0'),(8261,'Iealiey',255,65535,65535,4294967295,'\0','\0'),(8262,'Thiisaddyeye',255,65535,65535,4294967295,'\0','\0'),(8263,'Ealiwaba',255,65535,65535,4294967295,'\0','\0'),(8264,'Ultyiry',255,65535,65535,4294967295,'\0','\0'),(8265,'Cacoichiko',255,65535,65535,4294967295,'\0','\0'),(8266,'Obameso',255,65535,65535,4294967295,'\0','\0'),(8267,'Lies',255,65535,65535,4294967295,'\0','\0'),(8268,'Neutaermei',255,65535,65535,4294967295,'\0','\0'),(8269,'Inaanu',255,65535,65535,4294967295,'\0','\0'),(8270,'Ilceob',255,65535,65535,4294967295,'\0','\0'),(8271,'Ipskood',255,65535,65535,4294967295,'\0','\0'),(8272,'Sneiszeb',255,65535,65535,4294967295,'\0','\0'),(8273,'Entrionuchao',255,65535,65535,4294967295,'\0','\0'),(8274,'Atikogostquo',255,65535,65535,4294967295,'\0','\0'),(8275,'Ehackat',255,65535,65535,4294967295,'\0','\0'),(8276,'Poactco',255,65535,65535,4294967295,'\0','\0'),(8277,'Inerpgrytelo',255,65535,65535,4294967295,'\0','\0'),(8278,'Hoeyaol',255,65535,65535,4294967295,'\0','\0'),(8279,'Otoan',255,65535,65535,4294967295,'\0','\0'),(8280,'Onetaomchiti',255,65535,65535,4294967295,'\0','\0'),(8281,'Oleore',255,65535,65535,4294967295,'\0','\0'),(8282,'Ilearna',255,65535,65535,4294967295,'\0','\0'),(8283,'Iyechociswo',255,65535,65535,4294967295,'\0','\0'),(8284,'Eheiit',255,65535,65535,4294967295,'\0','\0'),(8285,'Eubqu',255,65535,65535,4294967295,'\0','\0'),(8286,'Preueyii',255,65535,65535,4294967295,'\0','\0'),(8287,'Uphiyiaroq',255,65535,65535,4294967295,'\0','\0'),(8288,'Uatra',255,65535,65535,4294967295,'\0','\0'),(8289,'Apoey',255,65535,65535,4294967295,'\0','\0'),(8290,'Aleanetra',255,65535,65535,4294967295,'\0','\0'),(8291,'Anaibionyp',255,65535,65535,4294967295,'\0','\0'),(8292,'Umterooneda',255,65535,65535,4294967295,'\0','\0'),(8293,'Ebivgioayal',255,65535,65535,4294967295,'\0','\0'),(8294,'Erertaeriss',255,65535,65535,4294967295,'\0','\0'),(8295,'Spiatyueer',255,65535,65535,4294967295,'\0','\0'),(8296,'Iflaupeaon',255,65535,65535,4294967295,'\0','\0'),(8297,'Eyeyoa',255,65535,65535,4294967295,'\0','\0'),(8298,'Eieiohr',255,65535,65535,4294967295,'\0','\0'),(8299,'Amoilna',255,65535,65535,4294967295,'\0','\0'),(8300,'Noepee',255,65535,65535,4294967295,'\0','\0'),(8301,'Efayezemeri',255,65535,65535,4294967295,'\0','\0'),(8302,'Olyis',255,65535,65535,4294967295,'\0','\0'),(8303,'Eseroial',255,65535,65535,4294967295,'\0','\0'),(8304,'Emiinwaibye',255,65535,65535,4294967295,'\0','\0'),(8305,'Inoenne',255,65535,65535,4294967295,'\0','\0'),(8306,'Crerliul',255,65535,65535,4294967295,'\0','\0'),(8307,'Ifonoaa',255,65535,65535,4294967295,'\0','\0'),(8308,'Ipcuossiddy',255,65535,65535,4294967295,'\0','\0'),(8309,'Lierneiya',255,65535,65535,4294967295,'\0','\0'),(8310,'Mueflemi',255,65535,65535,4294967295,'\0','\0'),(8311,'Awnosmenrio',255,65535,65535,4294967295,'\0','\0'),(8312,'Atohtitrio',255,65535,65535,4294967295,'\0','\0'),(8313,'Moglidcha',255,65535,65535,4294967295,'\0','\0'),(8314,'Engdrizarko',255,65535,65535,4294967295,'\0','\0'),(8315,'Sieayonaiz',255,65535,65535,4294967295,'\0','\0'),(8316,'Osaly',255,65535,65535,4294967295,'\0','\0'),(8317,'Lecau',255,65535,65535,4294967295,'\0','\0'),(8318,'Yesriiblari',255,65535,65535,4294967295,'\0','\0'),(8319,'Aotontu',255,65535,65535,4294967295,'\0','\0'),(8320,'Aloplotale',255,65535,65535,4294967295,'\0','\0'),(8321,'Ites',255,65535,65535,4294967295,'\0','\0'),(8322,'Itamdee',255,65535,65535,4294967295,'\0','\0'),(8323,'Eheat',255,65535,65535,4294967295,'\0','\0'),(8324,'Cioney',255,65535,65535,4294967295,'\0','\0'),(8325,'Ateickiorne',255,65535,65535,4294967295,'\0','\0'),(8326,'Uroyo',255,65535,65535,4294967295,'\0','\0'),(8327,'Incleu',255,65535,65535,4294967295,'\0','\0'),(8328,'Tant',255,65535,65535,4294967295,'\0','\0'),(8329,'Riogeoc',255,65535,65535,4294967295,'\0','\0'),(8330,'Ismalabtiaon',255,65535,65535,4294967295,'\0','\0'),(8331,'Assybeay',255,65535,65535,4294967295,'\0','\0'),(8332,'Ituere',255,65535,65535,4294967295,'\0','\0'),(8333,'Opaiopeba',255,65535,65535,4294967295,'\0','\0'),(8334,'Eloayten',255,65535,65535,4294967295,'\0','\0'),(8335,'Ouosmoia',255,65535,65535,4294967295,'\0','\0'),(8336,'Omaso',255,65535,65535,4294967295,'\0','\0'),(8337,'Uoloweche',255,65535,65535,4294967295,'\0','\0'),(8338,'Cyuereto',255,65535,65535,4294967295,'\0','\0'),(8339,'Apinath',255,65535,65535,4294967295,'\0','\0'),(8340,'Istomvemi',255,65535,65535,4294967295,'\0','\0'),(8341,'Araesota',255,65535,65535,4294967295,'\0','\0'),(8342,'Mofriaowom',255,65535,65535,4294967295,'\0','\0'),(8343,'Onaruorciyll',255,65535,65535,4294967295,'\0','\0'),(8344,'Olbiliatle',255,65535,65535,4294967295,'\0','\0'),(8345,'Doetiodrona',255,65535,65535,4294967295,'\0','\0'),(8346,'Maseoctuon',255,65535,65535,4294967295,'\0','\0'),(8347,'Exatbi',255,65535,65535,4294967295,'\0','\0'),(8348,'Biusilino',255,65535,65535,4294967295,'\0','\0'),(8349,'Roent',255,65535,65535,4294967295,'\0','\0'),(8350,'Eorsean',255,65535,65535,4294967295,'\0','\0'),(8351,'Skoieblyip',255,65535,65535,4294967295,'\0','\0'),(8352,'Erurilernear',255,65535,65535,4294967295,'\0','\0'),(8353,'Ayerzoel',255,65535,65535,4294967295,'\0','\0'),(8354,'Uyaviattoly',255,65535,65535,4294967295,'\0','\0'),(8355,'Xesieun',255,65535,65535,4294967295,'\0','\0'),(8356,'Onedi',255,65535,65535,4294967295,'\0','\0'),(8357,'Seyriorryi',255,65535,65535,4294967295,'\0','\0'),(8358,'Iqepetaid',255,65535,65535,4294967295,'\0','\0'),(8359,'Duce',255,65535,65535,4294967295,'\0','\0'),(8360,'Aumegeenk',255,65535,65535,4294967295,'\0','\0'),(8361,'Toveaeor',255,65535,65535,4294967295,'\0','\0'),(8362,'Muarsevease',255,65535,65535,4294967295,'\0','\0'),(8363,'Atonsyltotse',255,65535,65535,4294967295,'\0','\0'),(8364,'Upickimste',255,65535,65535,4294967295,'\0','\0'),(8365,'Neondieiaf',255,65535,65535,4294967295,'\0','\0'),(8366,'Obodaorep',255,65535,65535,4294967295,'\0','\0'),(8367,'Eekeogeh',255,65535,65535,4294967295,'\0','\0'),(8368,'Ryveyiguock',255,65535,65535,4294967295,'\0','\0'),(8369,'Yostraolaes',255,65535,65535,4294967295,'\0','\0'),(8370,'Ywka',255,65535,65535,4294967295,'\0','\0'),(8371,'Yucwobreenti',255,65535,65535,4294967295,'\0','\0'),(8372,'Bealcearade',255,65535,65535,4294967295,'\0','\0'),(8373,'Noptuep',255,65535,65535,4294967295,'\0','\0'),(8374,'Aonly',255,65535,65535,4294967295,'\0','\0'),(8375,'Yfdeeceoske',255,65535,65535,4294967295,'\0','\0'),(8376,'Asielon',255,65535,65535,4294967295,'\0','\0'),(8377,'Amejtoze',255,65535,65535,4294967295,'\0','\0'),(8378,'Riedieyaiph',255,65535,65535,4294967295,'\0','\0'),(8379,'Poumtaie',255,65535,65535,4294967295,'\0','\0'),(8380,'Torateni',255,65535,65535,4294967295,'\0','\0'),(8381,'Engrepyerca',255,65535,65535,4294967295,'\0','\0'),(8382,'Itin',255,65535,65535,4294967295,'\0','\0'),(8383,'Adyiasunru',255,65535,65535,4294967295,'\0','\0'),(8384,'Obmiolomengi',255,65535,65535,4294967295,'\0','\0'),(8385,'Sugeylunt',255,65535,65535,4294967295,'\0','\0'),(8386,'Deicgra',255,65535,65535,4294967295,'\0','\0'),(8387,'Etiub',255,65535,65535,4294967295,'\0','\0'),(8388,'Isucateceed',255,65535,65535,4294967295,'\0','\0'),(8389,'Syjuetteabfo',255,65535,65535,4294967295,'\0','\0'),(8390,'Peroyupru',255,65535,65535,4294967295,'\0','\0'),(8391,'Icelry',255,65535,65535,4294967295,'\0','\0'),(8392,'Yaisomtri',255,65535,65535,4294967295,'\0','\0'),(8393,'Foig',255,65535,65535,4294967295,'\0','\0'),(8394,'Derf',255,65535,65535,4294967295,'\0','\0'),(8395,'Umigasoeste',255,65535,65535,4294967295,'\0','\0'),(8396,'Oxack',255,65535,65535,4294967295,'\0','\0'),(8397,'Ubroegicho',255,65535,65535,4294967295,'\0','\0'),(8398,'Liyeioapra',255,65535,65535,4294967295,'\0','\0'),(8399,'Ilcaope',255,65535,65535,4294967295,'\0','\0'),(8400,'Icliismdifla',255,65535,65535,4294967295,'\0','\0'),(8401,'Emfleoty',255,65535,65535,4294967295,'\0','\0'),(8402,'Uraetat',255,65535,65535,4294967295,'\0','\0'),(8403,'Stuanes',255,65535,65535,4294967295,'\0','\0'),(8404,'Coata',255,65535,65535,4294967295,'\0','\0'),(8405,'Elodeat',255,65535,65535,4294967295,'\0','\0'),(8406,'Tekeocode',255,65535,65535,4294967295,'\0','\0'),(8407,'Irigafeango',255,65535,65535,4294967295,'\0','\0'),(8408,'Oitas',255,65535,65535,4294967295,'\0','\0'),(8409,'Ereseckeaby',255,65535,65535,4294967295,'\0','\0'),(8410,'Niomacrede',255,65535,65535,4294967295,'\0','\0'),(8411,'Alyainonsej',255,65535,65535,4294967295,'\0','\0'),(8412,'Yaniademyen',255,65535,65535,4294967295,'\0','\0'),(8413,'Elyae',255,65535,65535,4294967295,'\0','\0'),(8414,'Equlwa',255,65535,65535,4294967295,'\0','\0'),(8415,'Bierahpoog',255,65535,65535,4294967295,'\0','\0'),(8416,'Iogeowwa',255,65535,65535,4294967295,'\0','\0'),(8417,'Ocuvaatsa',255,65535,65535,4294967295,'\0','\0'),(8418,'Icunggeiath',255,65535,65535,4294967295,'\0','\0'),(8419,'Ciurein',255,65535,65535,4294967295,'\0','\0'),(8420,'Aeri',255,65535,65535,4294967295,'\0','\0'),(8421,'Elayere',255,65535,65535,4294967295,'\0','\0'),(8422,'Ivasniquleme',255,65535,65535,4294967295,'\0','\0'),(8423,'Aaipon',255,65535,65535,4294967295,'\0','\0'),(8424,'Uliaiphstiay',255,65535,65535,4294967295,'\0','\0'),(8425,'Onockco',255,65535,65535,4294967295,'\0','\0'),(8426,'Oceraicugh',255,65535,65535,4294967295,'\0','\0'),(8427,'Ivaouru',255,65535,65535,4294967295,'\0','\0'),(8428,'Itagololy',255,65535,65535,4294967295,'\0','\0'),(8429,'Anpre',255,65535,65535,4294967295,'\0','\0'),(8430,'Otanlieasm',255,65535,65535,4294967295,'\0','\0'),(8431,'Stixoom',255,65535,65535,4294967295,'\0','\0'),(8432,'Asmoade',255,65535,65535,4294967295,'\0','\0'),(8433,'Itoidanine',255,65535,65535,4294967295,'\0','\0'),(8434,'Ynotinig',255,65535,65535,4294967295,'\0','\0'),(8435,'Liineye',255,65535,65535,4294967295,'\0','\0'),(8436,'Ayokanli',255,65535,65535,4294967295,'\0','\0'),(8437,'Iadsphiuor',255,65535,65535,4294967295,'\0','\0'),(8438,'Avra',255,65535,65535,4294967295,'\0','\0'),(8439,'Coreaoca',255,65535,65535,4294967295,'\0','\0'),(8440,'Eron',255,65535,65535,4294967295,'\0','\0'),(8441,'Onreatcuif',255,65535,65535,4294967295,'\0','\0'),(8442,'Itohaet',255,65535,65535,4294967295,'\0','\0'),(8443,'Staod',255,65535,65535,4294967295,'\0','\0'),(8444,'Eckbuaon',255,65535,65535,4294967295,'\0','\0'),(8445,'Meaiicer',255,65535,65535,4294967295,'\0','\0'),(8446,'Brausta',255,65535,65535,4294967295,'\0','\0'),(8447,'Marhoci',255,65535,65535,4294967295,'\0','\0'),(8448,'Iyiabat',255,65535,65535,4294967295,'\0','\0'),(8449,'Itisto',255,65535,65535,4294967295,'\0','\0'),(8450,'Ermuloreiph',255,65535,65535,4294967295,'\0','\0'),(8451,'Atwasiui',255,65535,65535,4294967295,'\0','\0'),(8452,'Izli',255,65535,65535,4294967295,'\0','\0'),(8453,'Eurtergela',255,65535,65535,4294967295,'\0','\0'),(8454,'Giaeobirtad',255,65535,65535,4294967295,'\0','\0'),(8455,'Icarik',255,65535,65535,4294967295,'\0','\0'),(8456,'Emce',255,65535,65535,4294967295,'\0','\0'),(8457,'Omoetny',255,65535,65535,4294967295,'\0','\0'),(8458,'Moaewibro',255,65535,65535,4294967295,'\0','\0'),(8459,'Orer',255,65535,65535,4294967295,'\0','\0'),(8460,'Ieneliteex',255,65535,65535,4294967295,'\0','\0'),(8461,'Itemsteic',255,65535,65535,4294967295,'\0','\0'),(8462,'Tenoehli',255,65535,65535,4294967295,'\0','\0'),(8463,'Noinohaig',255,65535,65535,4294967295,'\0','\0'),(8464,'Conefoesatwa',255,65535,65535,4294967295,'\0','\0'),(8465,'Ooititrove',255,65535,65535,4294967295,'\0','\0'),(8466,'Idetie',255,65535,65535,4294967295,'\0','\0'),(8467,'Ofslee',255,65535,65535,4294967295,'\0','\0'),(8468,'Ipre',255,65535,65535,4294967295,'\0','\0'),(8469,'Mesinier',255,65535,65535,4294967295,'\0','\0'),(8470,'Assanau',255,65535,65535,4294967295,'\0','\0'),(8471,'Ellubeopho',255,65535,65535,4294967295,'\0','\0'),(8472,'Naytog',255,65535,65535,4294967295,'\0','\0'),(8473,'Ithibnu',255,65535,65535,4294967295,'\0','\0'),(8474,'Riua',255,65535,65535,4294967295,'\0','\0'),(8475,'Ofale',255,65535,65535,4294967295,'\0','\0'),(8476,'Unentearf',255,65535,65535,4294967295,'\0','\0'),(8477,'Rupeetplona',255,65535,65535,4294967295,'\0','\0'),(8478,'Imadi',255,65535,65535,4294967295,'\0','\0'),(8479,'Afraasiabe',255,65535,65535,4294967295,'\0','\0'),(8480,'Oroedidoas',255,65535,65535,4294967295,'\0','\0'),(8481,'Anicarcrei',255,65535,65535,4294967295,'\0','\0'),(8482,'Irdaryhney',255,65535,65535,4294967295,'\0','\0'),(8483,'Igatev',255,65535,65535,4294967295,'\0','\0'),(8484,'Rirearorha',255,65535,65535,4294967295,'\0','\0'),(8485,'Boadatenshu',255,65535,65535,4294967295,'\0','\0'),(8486,'Acipulip',255,65535,65535,4294967295,'\0','\0'),(8487,'Reeadayu',255,65535,65535,4294967295,'\0','\0'),(8488,'Leughchiliab',255,65535,65535,4294967295,'\0','\0'),(8489,'Ieil',255,65535,65535,4294967295,'\0','\0'),(8490,'Imiiotoan',255,65535,65535,4294967295,'\0','\0'),(8491,'Lebuopan',255,65535,65535,4294967295,'\0','\0'),(8492,'Aliay',255,65535,65535,4294967295,'\0','\0'),(8493,'Aashimyat',255,65535,65535,4294967295,'\0','\0'),(8494,'Ysunoung',255,65535,65535,4294967295,'\0','\0'),(8495,'Yailerga',255,65535,65535,4294967295,'\0','\0'),(8496,'Geteetogi',255,65535,65535,4294967295,'\0','\0'),(8497,'Uvilaghayi',255,65535,65535,4294967295,'\0','\0'),(8498,'Leayocnoati',255,65535,65535,4294967295,'\0','\0'),(8499,'Usao',255,65535,65535,4294967295,'\0','\0'),(8500,'Opeiome',255,65535,65535,4294967295,'\0','\0'),(8501,'Otnaolk',255,65535,65535,4294967295,'\0','\0'),(8502,'Ipelaere',255,65535,65535,4294967295,'\0','\0'),(8503,'Idnaemroo',255,65535,65535,4294967295,'\0','\0'),(8504,'Ephuahuicmi',255,65535,65535,4294967295,'\0','\0'),(8505,'Doit',255,65535,65535,4294967295,'\0','\0'),(8506,'Diycisiro',255,65535,65535,4294967295,'\0','\0'),(8507,'Ierin',255,65535,65535,4294967295,'\0','\0'),(8508,'Oruaiet',255,65535,65535,4294967295,'\0','\0'),(8509,'Liaheneyifis',255,65535,65535,4294967295,'\0','\0'),(8510,'Ecpoteorshi',255,65535,65535,4294967295,'\0','\0'),(8511,'Nediesen',255,65535,65535,4294967295,'\0','\0'),(8512,'Elaarpney',255,65535,65535,4294967295,'\0','\0'),(8513,'Ostreictia',255,65535,65535,4294967295,'\0','\0'),(8514,'Oycroieja',255,65535,65535,4294967295,'\0','\0'),(8515,'Tetion',255,65535,65535,4294967295,'\0','\0'),(8516,'Eanaldeni',255,65535,65535,4294967295,'\0','\0'),(8517,'Leitheialni',255,65535,65535,4294967295,'\0','\0'),(8518,'Sielmiirco',255,65535,65535,4294967295,'\0','\0'),(8519,'Idsochiadus',255,65535,65535,4294967295,'\0','\0'),(8520,'Uilulatheat',255,65535,65535,4294967295,'\0','\0'),(8521,'Ginioi',255,65535,65535,4294967295,'\0','\0'),(8522,'Sieeiici',255,65535,65535,4294967295,'\0','\0'),(8523,'Alebo',255,65535,65535,4294967295,'\0','\0'),(8524,'Otenihcoi',255,65535,65535,4294967295,'\0','\0'),(8525,'Neagumi',255,65535,65535,4294967295,'\0','\0'),(8526,'Floce',255,65535,65535,4294967295,'\0','\0'),(8527,'Neehxi',255,65535,65535,4294967295,'\0','\0'),(8528,'Lespeiaz',255,65535,65535,4294967295,'\0','\0'),(8529,'Roteneryepe',255,65535,65535,4294967295,'\0','\0'),(8530,'Asati',255,65535,65535,4294967295,'\0','\0'),(8531,'Iderysoro',255,65535,65535,4294967295,'\0','\0'),(8532,'Yaemicsei',255,65535,65535,4294967295,'\0','\0'),(8533,'Bioaewbye',255,65535,65535,4294967295,'\0','\0'),(8534,'Pateaiomi',255,65535,65535,4294967295,'\0','\0'),(8535,'Iesastinraut',255,65535,65535,4294967295,'\0','\0'),(8536,'Taowsucet',255,65535,65535,4294967295,'\0','\0'),(8537,'Alalroleic',255,65535,65535,4294967295,'\0','\0'),(8538,'Ijostra',255,65535,65535,4294967295,'\0','\0'),(8539,'Briolna',255,65535,65535,4294967295,'\0','\0'),(8540,'Strate',255,65535,65535,4294967295,'\0','\0'),(8541,'Stuespauiz',255,65535,65535,4294967295,'\0','\0'),(8542,'Omlauciusno',255,65535,65535,4294967295,'\0','\0'),(8543,'Yngerkire',255,65535,65535,4294967295,'\0','\0'),(8544,'Aebemfimesi',255,65535,65535,4294967295,'\0','\0'),(8545,'Oxnaockgrosa',255,65535,65535,4294967295,'\0','\0'),(8546,'Litesslaleub',255,65535,65535,4294967295,'\0','\0'),(8547,'Tiaa',255,65535,65535,4294967295,'\0','\0'),(8548,'Inilopeiro',255,65535,65535,4294967295,'\0','\0'),(8549,'Hishsi',255,65535,65535,4294967295,'\0','\0'),(8550,'Oniesmi',255,65535,65535,4294967295,'\0','\0'),(8551,'Muishaoeo',255,65535,65535,4294967295,'\0','\0'),(8552,'Onibbugi',255,65535,65535,4294967295,'\0','\0'),(8553,'Oquetisa',255,65535,65535,4294967295,'\0','\0'),(8554,'Edbiyo',255,65535,65535,4294967295,'\0','\0'),(8555,'Teiesaug',255,65535,65535,4294967295,'\0','\0'),(8556,'Isaeluinkto',255,65535,65535,4294967295,'\0','\0'),(8557,'Umeheoluta',255,65535,65535,4294967295,'\0','\0'),(8558,'Ofalipeug',255,65535,65535,4294967295,'\0','\0'),(8559,'Iipiiati',255,65535,65535,4294967295,'\0','\0'),(8560,'Icasoiog',255,65535,65535,4294967295,'\0','\0'),(8561,'Eraszerase',255,65535,65535,4294967295,'\0','\0'),(8562,'Ronefa',255,65535,65535,4294967295,'\0','\0'),(8563,'Liliaodikast',255,65535,65535,4294967295,'\0','\0'),(8564,'Hukeiheyor',255,65535,65535,4294967295,'\0','\0'),(8565,'Otali',255,65535,65535,4294967295,'\0','\0'),(8566,'Gidenimeca',255,65535,65535,4294967295,'\0','\0'),(8567,'Guliakmeow',255,65535,65535,4294967295,'\0','\0'),(8568,'Asnaaimcesi',255,65535,65535,4294967295,'\0','\0'),(8569,'Itiste',255,65535,65535,4294967295,'\0','\0'),(8570,'Moeyano',255,65535,65535,4294967295,'\0','\0'),(8571,'Oengizmeass',255,65535,65535,4294967295,'\0','\0'),(8572,'Ericonemue',255,65535,65535,4294967295,'\0','\0'),(8573,'Mamiycneo',255,65535,65535,4294967295,'\0','\0'),(8574,'Ciseas',255,65535,65535,4294967295,'\0','\0'),(8575,'Trifugmovear',255,65535,65535,4294967295,'\0','\0'),(8576,'Riabe',255,65535,65535,4294967295,'\0','\0'),(8577,'Iteehoyo',255,65535,65535,4294967295,'\0','\0'),(8578,'Antafoesme',255,65535,65535,4294967295,'\0','\0'),(8579,'Ouad',255,65535,65535,4294967295,'\0','\0'),(8580,'Tetitojusa',255,65535,65535,4294967295,'\0','\0'),(8581,'Ekaessipu',255,65535,65535,4294967295,'\0','\0'),(8582,'Veanurote',255,65535,65535,4294967295,'\0','\0'),(8583,'Ryoit',255,65535,65535,4294967295,'\0','\0'),(8584,'Ocyumroi',255,65535,65535,4294967295,'\0','\0'),(8585,'Oiseab',255,65535,65535,4294967295,'\0','\0'),(8586,'Seayaes',255,65535,65535,4294967295,'\0','\0'),(8587,'Cuseahiast',255,65535,65535,4294967295,'\0','\0'),(8588,'Blidautee',255,65535,65535,4294967295,'\0','\0'),(8589,'Plaole',255,65535,65535,4294967295,'\0','\0'),(8590,'Toraoeogod',255,65535,65535,4294967295,'\0','\0'),(8591,'Isflemooer',255,65535,65535,4294967295,'\0','\0'),(8592,'Caiverle',255,65535,65535,4294967295,'\0','\0'),(8593,'Ofism',255,65535,65535,4294967295,'\0','\0'),(8594,'Lyibefrano',255,65535,65535,4294967295,'\0','\0'),(8595,'Aracetheio',255,65535,65535,4294967295,'\0','\0'),(8596,'Neabexni',255,65535,65535,4294967295,'\0','\0'),(8597,'Oineliobed',255,65535,65535,4294967295,'\0','\0'),(8598,'Dyca',255,65535,65535,4294967295,'\0','\0'),(8599,'Atstise',255,65535,65535,4294967295,'\0','\0'),(8600,'Idriite',255,65535,65535,4294967295,'\0','\0'),(8601,'Ioludyla',255,65535,65535,4294967295,'\0','\0'),(8602,'Eblaerbliei',255,65535,65535,4294967295,'\0','\0'),(8603,'Onlyacheleaj',255,65535,65535,4294967295,'\0','\0'),(8604,'Ifiogteile',255,65535,65535,4294967295,'\0','\0'),(8605,'Diatiahwoe',255,65535,65535,4294967295,'\0','\0'),(8606,'Iabiyu',255,65535,65535,4294967295,'\0','\0'),(8607,'Alsyfleaceng',255,65535,65535,4294967295,'\0','\0'),(8608,'Anitpiclie',255,65535,65535,4294967295,'\0','\0'),(8609,'Irpiaghcleo',255,65535,65535,4294967295,'\0','\0'),(8610,'Oyaeilete',255,65535,65535,4294967295,'\0','\0'),(8611,'Esituarkuc',255,65535,65535,4294967295,'\0','\0'),(8612,'Estiroak',255,65535,65535,4294967295,'\0','\0'),(8613,'Diisicentpi',255,65535,65535,4294967295,'\0','\0'),(8614,'Avyuiusla',255,65535,65535,4294967295,'\0','\0'),(8615,'Ucemeat',255,65535,65535,4294967295,'\0','\0'),(8616,'Ideyiordeto',255,65535,65535,4294967295,'\0','\0'),(8617,'Utryti',255,65535,65535,4294967295,'\0','\0'),(8618,'Xayoode',255,65535,65535,4294967295,'\0','\0'),(8619,'Tierfoonoil',255,65535,65535,4294967295,'\0','\0'),(8620,'Oriahaor',255,65535,65535,4294967295,'\0','\0'),(8621,'Ebindyoeo',255,65535,65535,4294967295,'\0','\0'),(8622,'Acowrietise',255,65535,65535,4294967295,'\0','\0'),(8623,'Cyeangecuzop',255,65535,65535,4294967295,'\0','\0'),(8624,'Nekilic',255,65535,65535,4294967295,'\0','\0'),(8625,'Lachonyan',255,65535,65535,4294967295,'\0','\0'),(8626,'Lynecam',255,65535,65535,4294967295,'\0','\0'),(8627,'Ilamicreit',255,65535,65535,4294967295,'\0','\0'),(8628,'Idyaniie',255,65535,65535,4294967295,'\0','\0'),(8629,'Enpsionade',255,65535,65535,4294967295,'\0','\0'),(8630,'Oaerastu',255,65535,65535,4294967295,'\0','\0'),(8631,'Ines',255,65535,65535,4294967295,'\0','\0'),(8632,'Pemawopla',255,65535,65535,4294967295,'\0','\0'),(8633,'Eoumonead',255,65535,65535,4294967295,'\0','\0'),(8634,'Orinore',255,65535,65535,4294967295,'\0','\0'),(8635,'Eomyare',255,65535,65535,4294967295,'\0','\0'),(8636,'Osicousocla',255,65535,65535,4294967295,'\0','\0'),(8637,'Erofagiei',255,65535,65535,4294967295,'\0','\0'),(8638,'Rauliont',255,65535,65535,4294967295,'\0','\0'),(8639,'Clalaockly',255,65535,65535,4294967295,'\0','\0'),(8640,'Asha',255,65535,65535,4294967295,'\0','\0'),(8641,'Xiboise',255,65535,65535,4294967295,'\0','\0'),(8642,'Raoaaychi',255,65535,65535,4294967295,'\0','\0'),(8643,'Yaroeanoyer',255,65535,65535,4294967295,'\0','\0'),(8644,'Niarthien',255,65535,65535,4294967295,'\0','\0'),(8645,'Amineom',255,65535,65535,4294967295,'\0','\0'),(8646,'Uroiasscayf',255,65535,65535,4294967295,'\0','\0'),(8647,'Ilchiowonear',255,65535,65535,4294967295,'\0','\0'),(8648,'Moeueic',255,65535,65535,4294967295,'\0','\0'),(8649,'Neai',255,65535,65535,4294967295,'\0','\0'),(8650,'Imaskueisor',255,65535,65535,4294967295,'\0','\0'),(8651,'Tiayuaorca',255,65535,65535,4294967295,'\0','\0'),(8652,'Atuodpipa',255,65535,65535,4294967295,'\0','\0'),(8653,'Vieo',255,65535,65535,4294967295,'\0','\0'),(8654,'Inayolitero',255,65535,65535,4294967295,'\0','\0'),(8655,'Iteivoand',255,65535,65535,4294967295,'\0','\0'),(8656,'Ouswosiast',255,65535,65535,4294967295,'\0','\0'),(8657,'Uiodsla',255,65535,65535,4294967295,'\0','\0'),(8658,'Iberaagfla',255,65535,65535,4294967295,'\0','\0'),(8659,'Aeoak',255,65535,65535,4294967295,'\0','\0'),(8660,'Reajetoar',255,65535,65535,4294967295,'\0','\0'),(8661,'Tuetanxe',255,65535,65535,4294967295,'\0','\0'),(8662,'Speeiti',255,65535,65535,4294967295,'\0','\0'),(8663,'Nero',255,65535,65535,4294967295,'\0','\0'),(8664,'Caotpreip',255,65535,65535,4294967295,'\0','\0'),(8665,'Erpayedipui',255,65535,65535,4294967295,'\0','\0'),(8666,'Ipsleurtrao',255,65535,65535,4294967295,'\0','\0'),(8667,'Etabpuep',255,65535,65535,4294967295,'\0','\0'),(8668,'Oareinei',255,65535,65535,4294967295,'\0','\0'),(8669,'Oudecrionglo',255,65535,65535,4294967295,'\0','\0'),(8670,'Tauasare',255,65535,65535,4294967295,'\0','\0'),(8671,'Eyeyia',255,65535,65535,4294967295,'\0','\0'),(8672,'Iolaro',255,65535,65535,4294967295,'\0','\0'),(8673,'Ungcoabte',255,65535,65535,4294967295,'\0','\0'),(8674,'Breaorhiur',255,65535,65535,4294967295,'\0','\0'),(8675,'Veelmar',255,65535,65535,4294967295,'\0','\0'),(8676,'Bopineondsu',255,65535,65535,4294967295,'\0','\0'),(8677,'Issoiheabom',255,65535,65535,4294967295,'\0','\0'),(8678,'Icezalaexi',255,65535,65535,4294967295,'\0','\0'),(8679,'Efay',255,65535,65535,4294967295,'\0','\0'),(8680,'Aizeyoma',255,65535,65535,4294967295,'\0','\0'),(8681,'Breoudyit',255,65535,65535,4294967295,'\0','\0'),(8682,'Olasie',255,65535,65535,4294967295,'\0','\0'),(8683,'Elaceph',255,65535,65535,4294967295,'\0','\0'),(8684,'Niei',255,65535,65535,4294967295,'\0','\0'),(8685,'Juanne',255,65535,65535,4294967295,'\0','\0'),(8686,'Oriesoporel',255,65535,65535,4294967295,'\0','\0'),(8687,'Eaora',255,65535,65535,4294967295,'\0','\0'),(8688,'Toipiiseper',255,65535,65535,4294967295,'\0','\0'),(8689,'Leedtuey',255,65535,65535,4294967295,'\0','\0'),(8690,'Alydla',255,65535,65535,4294967295,'\0','\0'),(8691,'Ickablio',255,65535,65535,4294967295,'\0','\0'),(8692,'Ageytioer',255,65535,65535,4294967295,'\0','\0'),(8693,'Satiinoce',255,65535,65535,4294967295,'\0','\0'),(8694,'Tiizirahi',255,65535,65535,4294967295,'\0','\0'),(8695,'Onyldadimiog',255,65535,65535,4294967295,'\0','\0'),(8696,'Anseypvae',255,65535,65535,4294967295,'\0','\0'),(8697,'Atiyouyp',255,65535,65535,4294967295,'\0','\0'),(8698,'Ifumonodiswa',255,65535,65535,4294967295,'\0','\0'),(8699,'Limobitu',255,65535,65535,4294967295,'\0','\0'),(8700,'Eeratinare',255,65535,65535,4294967295,'\0','\0'),(8701,'Sauinbre',255,65535,65535,4294967295,'\0','\0'),(8702,'Uberelee',255,65535,65535,4294967295,'\0','\0'),(8703,'Acatlaeiu',255,65535,65535,4294967295,'\0','\0'),(8704,'Atmiuydae',255,65535,65535,4294967295,'\0','\0'),(8705,'Alieraly',255,65535,65535,4294967295,'\0','\0'),(8706,'Eatnecediav',255,65535,65535,4294967295,'\0','\0'),(8707,'Eorcheistoih',255,65535,65535,4294967295,'\0','\0'),(8708,'Dapiwralu',255,65535,65535,4294967295,'\0','\0'),(8709,'Isentisgy',255,65535,65535,4294967295,'\0','\0'),(8710,'Awoiceolge',255,65535,65535,4294967295,'\0','\0'),(8711,'Away',255,65535,65535,4294967295,'\0','\0'),(8712,'Ongi',255,65535,65535,4294967295,'\0','\0'),(8713,'Gaeinansiov',255,65535,65535,4294967295,'\0','\0'),(8714,'Isanop',255,65535,65535,4294967295,'\0','\0'),(8715,'Chaymeiname',255,65535,65535,4294967295,'\0','\0'),(8716,'Apleehniriu',255,65535,65535,4294967295,'\0','\0'),(8717,'Ehorreneylt',255,65535,65535,4294967295,'\0','\0'),(8718,'Eersaom',255,65535,65535,4294967295,'\0','\0'),(8719,'Ihitine',255,65535,65535,4294967295,'\0','\0'),(8720,'Niaabetya',255,65535,65535,4294967295,'\0','\0'),(8721,'Etiayocu',255,65535,65535,4294967295,'\0','\0'),(8722,'Ordiaceabet',255,65535,65535,4294967295,'\0','\0'),(8723,'Koessaueythe',255,65535,65535,4294967295,'\0','\0'),(8724,'Zeengba',255,65535,65535,4294967295,'\0','\0'),(8725,'Nieipelao',255,65535,65535,4294967295,'\0','\0'),(8726,'Yarutea',255,65535,65535,4294967295,'\0','\0'),(8727,'Atoha',255,65535,65535,4294967295,'\0','\0'),(8728,'Yeegeluot',255,65535,65535,4294967295,'\0','\0'),(8729,'Ilavspoesi',255,65535,65535,4294967295,'\0','\0'),(8730,'Olohoi',255,65535,65535,4294967295,'\0','\0'),(8731,'Fleharo',255,65535,65535,4294967295,'\0','\0'),(8732,'Prenyniam',255,65535,65535,4294967295,'\0','\0'),(8733,'Pragomehafu',255,65535,65535,4294967295,'\0','\0'),(8734,'Inceildiaes',255,65535,65535,4294967295,'\0','\0'),(8735,'Ynsythoiaes',255,65535,65535,4294967295,'\0','\0'),(8736,'Onhanoelya',255,65535,65535,4294967295,'\0','\0'),(8737,'Eicha',255,65535,65535,4294967295,'\0','\0'),(8738,'Erub',255,65535,65535,4294967295,'\0','\0'),(8739,'Esiyaessne',255,65535,65535,4294967295,'\0','\0'),(8740,'Uoken',255,65535,65535,4294967295,'\0','\0'),(8741,'Umorup',255,65535,65535,4294967295,'\0','\0'),(8742,'Atamdeshe',255,65535,65535,4294967295,'\0','\0'),(8743,'Struilopo',255,65535,65535,4294967295,'\0','\0'),(8744,'Bici',255,65535,65535,4294967295,'\0','\0'),(8745,'Iiqen',255,65535,65535,4294967295,'\0','\0'),(8746,'Lieromespeip',255,65535,65535,4294967295,'\0','\0'),(8747,'Colarisp',255,65535,65535,4294967295,'\0','\0'),(8748,'Moapstre',255,65535,65535,4294967295,'\0','\0'),(8749,'Ranui',255,65535,65535,4294967295,'\0','\0'),(8750,'Ateii',255,65535,65535,4294967295,'\0','\0'),(8751,'Aleu',255,65535,65535,4294967295,'\0','\0'),(8752,'Sireiacan',255,65535,65535,4294967295,'\0','\0'),(8753,'Parauxue',255,65535,65535,4294967295,'\0','\0'),(8754,'Trychibryce',255,65535,65535,4294967295,'\0','\0'),(8755,'Cresalxadi',255,65535,65535,4294967295,'\0','\0'),(8756,'Kaafleagoni',255,65535,65535,4294967295,'\0','\0'),(8757,'Liiaao',255,65535,65535,4294967295,'\0','\0'),(8758,'Seaenunsab',255,65535,65535,4294967295,'\0','\0'),(8759,'Egeyrsta',255,65535,65535,4294967295,'\0','\0'),(8760,'Erkitor',255,65535,65535,4294967295,'\0','\0'),(8761,'Tieajenme',255,65535,65535,4294967295,'\0','\0'),(8762,'Sedichumo',255,65535,65535,4294967295,'\0','\0'),(8763,'Emeizre',255,65535,65535,4294967295,'\0','\0'),(8764,'Uastay',255,65535,65535,4294967295,'\0','\0'),(8765,'Anleocoyp',255,65535,65535,4294967295,'\0','\0'),(8766,'Otnuli',255,65535,65535,4294967295,'\0','\0'),(8767,'Peto',255,65535,65535,4294967295,'\0','\0'),(8768,'Chighoho',255,65535,65535,4294967295,'\0','\0'),(8769,'Faotxa',255,65535,65535,4294967295,'\0','\0'),(8770,'Obdiinid',255,65535,65535,4294967295,'\0','\0'),(8771,'Pusiprene',255,65535,65535,4294967295,'\0','\0'),(8772,'Ouluarev',255,65535,65535,4294967295,'\0','\0'),(8773,'Atauacal',255,65535,65535,4294967295,'\0','\0'),(8774,'Praseyhao',255,65535,65535,4294967295,'\0','\0'),(8775,'Poefru',255,65535,65535,4294967295,'\0','\0'),(8776,'Uscyirtne',255,65535,65535,4294967295,'\0','\0'),(8777,'Oyathibrabid',255,65535,65535,4294967295,'\0','\0'),(8778,'Eivestineont',255,65535,65535,4294967295,'\0','\0'),(8779,'Bedeeikalo',255,65535,65535,4294967295,'\0','\0'),(8780,'Cueragim',255,65535,65535,4294967295,'\0','\0'),(8781,'Leadet',255,65535,65535,4294967295,'\0','\0'),(8782,'Aidotreueb',255,65535,65535,4294967295,'\0','\0'),(8783,'Isreaisnoer',255,65535,65535,4294967295,'\0','\0'),(8784,'Asegaegte',255,65535,65535,4294967295,'\0','\0'),(8785,'Ryliumbiraob',255,65535,65535,4294967295,'\0','\0'),(8786,'Acaway',255,65535,65535,4294967295,'\0','\0'),(8787,'Iiham',255,65535,65535,4294967295,'\0','\0'),(8788,'Phaiae',255,65535,65535,4294967295,'\0','\0'),(8789,'Woikinias',255,65535,65535,4294967295,'\0','\0'),(8790,'Isipreivhai',255,65535,65535,4294967295,'\0','\0'),(8791,'Owaknate',255,65535,65535,4294967295,'\0','\0'),(8792,'Idadiat',255,65535,65535,4294967295,'\0','\0'),(8793,'Vecoriet',255,65535,65535,4294967295,'\0','\0'),(8794,'Ilalinory',255,65535,65535,4294967295,'\0','\0'),(8795,'Ihenare',255,65535,65535,4294967295,'\0','\0'),(8796,'Opicner',255,65535,65535,4294967295,'\0','\0'),(8797,'Epuisaedi',255,65535,65535,4294967295,'\0','\0'),(8798,'Eowpem',255,65535,65535,4294967295,'\0','\0'),(8799,'Adliropro',255,65535,65535,4294967295,'\0','\0'),(8800,'Eumpeasor',255,65535,65535,4294967295,'\0','\0'),(8801,'Ikeni',255,65535,65535,4294967295,'\0','\0'),(8802,'Elewiemipne',255,65535,65535,4294967295,'\0','\0'),(8803,'Ydre',255,65535,65535,4294967295,'\0','\0'),(8804,'Octoilime',255,65535,65535,4294967295,'\0','\0'),(8805,'Iptoesse',255,65535,65535,4294967295,'\0','\0'),(8806,'Ainflatiook',255,65535,65535,4294967295,'\0','\0'),(8807,'Oyiochewi',255,65535,65535,4294967295,'\0','\0'),(8808,'Leharaoan',255,65535,65535,4294967295,'\0','\0'),(8809,'Abaing',255,65535,65535,4294967295,'\0','\0'),(8810,'Enailunscuci',255,65535,65535,4294967295,'\0','\0'),(8811,'Ufricuog',255,65535,65535,4294967295,'\0','\0'),(8812,'Istsanuesov',255,65535,65535,4294967295,'\0','\0'),(8813,'Eyokaplasybi',255,65535,65535,4294967295,'\0','\0'),(8814,'Ayodeita',255,65535,65535,4294967295,'\0','\0'),(8815,'Ozfoagto',255,65535,65535,4294967295,'\0','\0'),(8816,'Inopaonnata',255,65535,65535,4294967295,'\0','\0'),(8817,'Pelaieye',255,65535,65535,4294967295,'\0','\0'),(8818,'Paner',255,65535,65535,4294967295,'\0','\0'),(8819,'Buaafulci',255,65535,65535,4294967295,'\0','\0'),(8820,'Oteerole',255,65535,65535,4294967295,'\0','\0'),(8821,'Otiol',255,65535,65535,4294967295,'\0','\0'),(8822,'Deiayaon',255,65535,65535,4294967295,'\0','\0'),(8823,'Atieho',255,65535,65535,4294967295,'\0','\0'),(8824,'Uisleatt',255,65535,65535,4294967295,'\0','\0'),(8825,'Nepriahape',255,65535,65535,4294967295,'\0','\0'),(8826,'Eius',255,65535,65535,4294967295,'\0','\0'),(8827,'Oyesagmi',255,65535,65535,4294967295,'\0','\0'),(8828,'Ogehreeyl',255,65535,65535,4294967295,'\0','\0'),(8829,'Sisiaooi',255,65535,65535,4294967295,'\0','\0'),(8830,'Itriooe',255,65535,65535,4294967295,'\0','\0'),(8831,'Emesemyke',255,65535,65535,4294967295,'\0','\0'),(8832,'Raynd',255,65535,65535,4294967295,'\0','\0'),(8833,'Ceatri',255,65535,65535,4294967295,'\0','\0'),(8834,'Umoy',255,65535,65535,4294967295,'\0','\0'),(8835,'Udooeurism',255,65535,65535,4294967295,'\0','\0'),(8836,'Etednilies',255,65535,65535,4294967295,'\0','\0'),(8837,'Osmihuolyre',255,65535,65535,4294967295,'\0','\0'),(8838,'Ewasirer',255,65535,65535,4294967295,'\0','\0'),(8839,'Ooalneol',255,65535,65535,4294967295,'\0','\0'),(8840,'Negaclyesse',255,65535,65535,4294967295,'\0','\0'),(8841,'Arorimaur',255,65535,65535,4294967295,'\0','\0'),(8842,'Utocepire',255,65535,65535,4294967295,'\0','\0'),(8843,'Anoga',255,65535,65535,4294967295,'\0','\0'),(8844,'Biineion',255,65535,65535,4294967295,'\0','\0'),(8845,'Otoecoal',255,65535,65535,4294967295,'\0','\0'),(8846,'Baenaumo',255,65535,65535,4294967295,'\0','\0'),(8847,'Peat',255,65535,65535,4294967295,'\0','\0'),(8848,'Rieos',255,65535,65535,4294967295,'\0','\0'),(8849,'Cenganla',255,65535,65535,4294967295,'\0','\0'),(8850,'Diasaeremi',255,65535,65535,4294967295,'\0','\0'),(8851,'Inarmasuanli',255,65535,65535,4294967295,'\0','\0'),(8852,'Ityayheyo',255,65535,65535,4294967295,'\0','\0'),(8853,'Aoainmi',255,65535,65535,4294967295,'\0','\0'),(8854,'Neimu',255,65535,65535,4294967295,'\0','\0'),(8855,'Nosfeero',255,65535,65535,4294967295,'\0','\0'),(8856,'Waaiubiic',255,65535,65535,4294967295,'\0','\0'),(8857,'Ahoy',255,65535,65535,4294967295,'\0','\0'),(8858,'Etolopoi',255,65535,65535,4294967295,'\0','\0'),(8859,'Ymaorlin',255,65535,65535,4294967295,'\0','\0'),(8860,'Aakyaluco',255,65535,65535,4294967295,'\0','\0'),(8861,'Atatobre',255,65535,65535,4294967295,'\0','\0'),(8862,'Ulineyinerwa',255,65535,65535,4294967295,'\0','\0'),(8863,'Eticori',255,65535,65535,4294967295,'\0','\0'),(8864,'Oetrini',255,65535,65535,4294967295,'\0','\0'),(8865,'Hyayineamid',255,65535,65535,4294967295,'\0','\0'),(8866,'Atdaeck',255,65535,65535,4294967295,'\0','\0'),(8867,'Reoiodebo',255,65535,65535,4294967295,'\0','\0'),(8868,'Efitomu',255,65535,65535,4294967295,'\0','\0'),(8869,'Loesmpeeye',255,65535,65535,4294967295,'\0','\0'),(8870,'Engipfa',255,65535,65535,4294967295,'\0','\0'),(8871,'Agwa',255,65535,65535,4294967295,'\0','\0'),(8872,'Iodoa',255,65535,65535,4294967295,'\0','\0'),(8873,'Orcheam',255,65535,65535,4294967295,'\0','\0'),(8874,'Letibacito',255,65535,65535,4294967295,'\0','\0'),(8875,'Atoreciodri',255,65535,65535,4294967295,'\0','\0'),(8876,'Muuereze',255,65535,65535,4294967295,'\0','\0'),(8877,'Arfpastri',255,65535,65535,4294967295,'\0','\0'),(8878,'Iulusk',255,65535,65535,4294967295,'\0','\0'),(8879,'Tienreysm',255,65535,65535,4294967295,'\0','\0'),(8880,'Rheleyapae',255,65535,65535,4294967295,'\0','\0'),(8881,'Ditoladein',255,65535,65535,4294967295,'\0','\0'),(8882,'Ridioil',255,65535,65535,4294967295,'\0','\0'),(8883,'Roenoverpa',255,65535,65535,4294967295,'\0','\0'),(8884,'Arotiri',255,65535,65535,4294967295,'\0','\0'),(8885,'Aeute',255,65535,65535,4294967295,'\0','\0'),(8886,'Aghbetiyeona',255,65535,65535,4294967295,'\0','\0'),(8887,'Griyang',255,65535,65535,4294967295,'\0','\0'),(8888,'Efeofdaugalf',255,65535,65535,4294967295,'\0','\0'),(8889,'Iudsieh',255,65535,65535,4294967295,'\0','\0'),(8890,'Eanjealtoche',255,65535,65535,4294967295,'\0','\0'),(8891,'Poin',255,65535,65535,4294967295,'\0','\0'),(8892,'Irdoinfii',255,65535,65535,4294967295,'\0','\0'),(8893,'Utticati',255,65535,65535,4294967295,'\0','\0'),(8894,'Eduayidgo',255,65535,65535,4294967295,'\0','\0'),(8895,'Evaeteele',255,65535,65535,4294967295,'\0','\0'),(8896,'Abasu',255,65535,65535,4294967295,'\0','\0'),(8897,'Dynaeal',255,65535,65535,4294967295,'\0','\0'),(8898,'Ipnetah',255,65535,65535,4294967295,'\0','\0'),(8899,'Astuale',255,65535,65535,4294967295,'\0','\0'),(8900,'Ityzelpousi',255,65535,65535,4294967295,'\0','\0'),(8901,'Teut',255,65535,65535,4294967295,'\0','\0'),(8902,'Boark',255,65535,65535,4294967295,'\0','\0'),(8903,'Oaraploriim',255,65535,65535,4294967295,'\0','\0'),(8904,'Ipzacyy',255,65535,65535,4294967295,'\0','\0'),(8905,'Gliougfeal',255,65535,65535,4294967295,'\0','\0'),(8906,'Eizingey',255,65535,65535,4294967295,'\0','\0'),(8907,'Angneuypla',255,65535,65535,4294967295,'\0','\0'),(8908,'Ishor',255,65535,65535,4294967295,'\0','\0'),(8909,'Testraogod',255,65535,65535,4294967295,'\0','\0'),(8910,'Engyonyetiel',255,65535,65535,4294967295,'\0','\0'),(8911,'Tosi',255,65535,65535,4294967295,'\0','\0'),(8912,'Oxurpaniela',255,65535,65535,4294967295,'\0','\0'),(8913,'Ebneumi',255,65535,65535,4294967295,'\0','\0'),(8914,'Yaleati',255,65535,65535,4294967295,'\0','\0'),(8915,'Inteoomi',255,65535,65535,4294967295,'\0','\0'),(8916,'Attea',255,65535,65535,4294967295,'\0','\0'),(8917,'Utne',255,65535,65535,4294967295,'\0','\0'),(8918,'Telinebioe',255,65535,65535,4294967295,'\0','\0'),(8919,'Izamait',255,65535,65535,4294967295,'\0','\0'),(8920,'Eanenoyo',255,65535,65535,4294967295,'\0','\0'),(8921,'Edkioyaot',255,65535,65535,4294967295,'\0','\0'),(8922,'Omorisoesm',255,65535,65535,4294967295,'\0','\0'),(8923,'Pareotae',255,65535,65535,4294967295,'\0','\0'),(8924,'Catipre',255,65535,65535,4294967295,'\0','\0'),(8925,'Moracef',255,65535,65535,4294967295,'\0','\0'),(8926,'Onanutaya',255,65535,65535,4294967295,'\0','\0'),(8927,'Iufoonleo',255,65535,65535,4294967295,'\0','\0'),(8928,'Oisinopladi',255,65535,65535,4294967295,'\0','\0'),(8929,'Agislie',255,65535,65535,4294967295,'\0','\0'),(8930,'Atlegypheief',255,65535,65535,4294967295,'\0','\0'),(8931,'Eneboodti',255,65535,65535,4294967295,'\0','\0'),(8932,'Cyouerd',255,65535,65535,4294967295,'\0','\0'),(8933,'Euteestno',255,65535,65535,4294967295,'\0','\0'),(8934,'Tebuvospy',255,65535,65535,4294967295,'\0','\0'),(8935,'Nedinuehbro',255,65535,65535,4294967295,'\0','\0'),(8936,'Toaoe',255,65535,65535,4294967295,'\0','\0'),(8937,'Ogedi',255,65535,65535,4294967295,'\0','\0'),(8938,'Gune',255,65535,65535,4294967295,'\0','\0'),(8939,'Cayss',255,65535,65535,4294967295,'\0','\0'),(8940,'Etaesuera',255,65535,65535,4294967295,'\0','\0'),(8941,'Shaoesoia',255,65535,65535,4294967295,'\0','\0'),(8942,'Stutrobicote',255,65535,65535,4294967295,'\0','\0'),(8943,'Cuomerpeur',255,65535,65535,4294967295,'\0','\0'),(8944,'Debloet',255,65535,65535,4294967295,'\0','\0'),(8945,'Acoshonileli',255,65535,65535,4294967295,'\0','\0'),(8946,'Odithoeota',255,65535,65535,4294967295,'\0','\0'),(8947,'Itbaolpa',255,65535,65535,4294967295,'\0','\0'),(8948,'Yrmci',255,65535,65535,4294967295,'\0','\0'),(8949,'Irerip',255,65535,65535,4294967295,'\0','\0'),(8950,'Ayniafpure',255,65535,65535,4294967295,'\0','\0'),(8951,'Trueckentiay',255,65535,65535,4294967295,'\0','\0'),(8952,'Ashothespe',255,65535,65535,4294967295,'\0','\0'),(8953,'Irolonloi',255,65535,65535,4294967295,'\0','\0'),(8954,'Stiswia',255,65535,65535,4294967295,'\0','\0'),(8955,'Opnetior',255,65535,65535,4294967295,'\0','\0'),(8956,'Cheioyieer',255,65535,65535,4294967295,'\0','\0'),(8957,'Ouno',255,65535,65535,4294967295,'\0','\0'),(8958,'Oynaroa',255,65535,65535,4294967295,'\0','\0'),(8959,'Orthudi',255,65535,65535,4294967295,'\0','\0'),(8960,'Poreoler',255,65535,65535,4294967295,'\0','\0'),(8961,'Ethse',255,65535,65535,4294967295,'\0','\0'),(8962,'Iech',255,65535,65535,4294967295,'\0','\0'),(8963,'Yaengtea',255,65535,65535,4294967295,'\0','\0'),(8964,'Wais',255,65535,65535,4294967295,'\0','\0'),(8965,'Owaracircone',255,65535,65535,4294967295,'\0','\0'),(8966,'Esieiyi',255,65535,65535,4294967295,'\0','\0'),(8967,'Eachi',255,65535,65535,4294967295,'\0','\0'),(8968,'Isaneffouik',255,65535,65535,4294967295,'\0','\0'),(8969,'Eitonceal',255,65535,65535,4294967295,'\0','\0'),(8970,'Oseeat',255,65535,65535,4294967295,'\0','\0'),(8971,'Eroipeder',255,65535,65535,4294967295,'\0','\0'),(8972,'Aotabo',255,65535,65535,4294967295,'\0','\0'),(8973,'Eosmucees',255,65535,65535,4294967295,'\0','\0'),(8974,'Ureghba',255,65535,65535,4294967295,'\0','\0'),(8975,'Osinowale',255,65535,65535,4294967295,'\0','\0'),(8976,'Eyibdehemu',255,65535,65535,4294967295,'\0','\0'),(8977,'Ullomatevo',255,65535,65535,4294967295,'\0','\0'),(8978,'Taueysosca',255,65535,65535,4294967295,'\0','\0'),(8979,'Lode',255,65535,65535,4294967295,'\0','\0'),(8980,'Ewhecydaado',255,65535,65535,4294967295,'\0','\0'),(8981,'Oveseaki',255,65535,65535,4294967295,'\0','\0'),(8982,'Arewa',255,65535,65535,4294967295,'\0','\0'),(8983,'Veeplacobuo',255,65535,65535,4294967295,'\0','\0'),(8984,'Kayeaor',255,65535,65535,4294967295,'\0','\0'),(8985,'Inyienta',255,65535,65535,4294967295,'\0','\0'),(8986,'Neweyerca',255,65535,65535,4294967295,'\0','\0'),(8987,'Omoceomis',255,65535,65535,4294967295,'\0','\0'),(8988,'Cerispatko',255,65535,65535,4294967295,'\0','\0'),(8989,'Owatreilties',255,65535,65535,4294967295,'\0','\0'),(8990,'Aertywa',255,65535,65535,4294967295,'\0','\0'),(8991,'Ugallio',255,65535,65535,4294967295,'\0','\0'),(8992,'Choensayaun',255,65535,65535,4294967295,'\0','\0'),(8993,'Renoandaeru',255,65535,65535,4294967295,'\0','\0'),(8994,'Loai',255,65535,65535,4294967295,'\0','\0'),(8995,'Yionleosto',255,65535,65535,4294967295,'\0','\0'),(8996,'Ylumarof',255,65535,65535,4294967295,'\0','\0'),(8997,'Sheub',255,65535,65535,4294967295,'\0','\0'),(8998,'Rasipearet',255,65535,65535,4294967295,'\0','\0'),(8999,'Imvoidyvea',255,65535,65535,4294967295,'\0','\0'),(9000,'Orcoemre',255,65535,65535,4294967295,'\0','\0'),(9001,'Griohy',255,65535,65535,4294967295,'\0','\0'),(9002,'Teasda',255,65535,65535,4294967295,'\0','\0'),(9003,'Uscledeom',255,65535,65535,4294967295,'\0','\0'),(9004,'Onfusididauc',255,65535,65535,4294967295,'\0','\0'),(9005,'Raethmaspaat',255,65535,65535,4294967295,'\0','\0'),(9006,'Olyayatya',255,65535,65535,4294967295,'\0','\0'),(9007,'Arseio',255,65535,65535,4294967295,'\0','\0'),(9008,'Orpecenani',255,65535,65535,4294967295,'\0','\0'),(9009,'Clisimec',255,65535,65535,4294967295,'\0','\0'),(9010,'Omesangse',255,65535,65535,4294967295,'\0','\0'),(9011,'Anenilbaybo',255,65535,65535,4294967295,'\0','\0'),(9012,'Eyeintal',255,65535,65535,4294967295,'\0','\0'),(9013,'Ockwesila',255,65535,65535,4294967295,'\0','\0'),(9014,'Yablete',255,65535,65535,4294967295,'\0','\0'),(9015,'Irneuit',255,65535,65535,4294967295,'\0','\0'),(9016,'Ahizmoiamb',255,65535,65535,4294967295,'\0','\0'),(9017,'Ompstie',255,65535,65535,4294967295,'\0','\0'),(9018,'Omneeid',255,65535,65535,4294967295,'\0','\0'),(9019,'Itsaosa',255,65535,65535,4294967295,'\0','\0'),(9020,'Apausuroyst',255,65535,65535,4294967295,'\0','\0'),(9021,'Etfen',255,65535,65535,4294967295,'\0','\0'),(9022,'Iurmaamve',255,65535,65535,4294967295,'\0','\0'),(9023,'Poafla',255,65535,65535,4294967295,'\0','\0'),(9024,'Ayaconilar',255,65535,65535,4294967295,'\0','\0'),(9025,'Yachna',255,65535,65535,4294967295,'\0','\0'),(9026,'Onilliwaaber',255,65535,65535,4294967295,'\0','\0'),(9027,'Ortastbyiscu',255,65535,65535,4294967295,'\0','\0'),(9028,'Noat',255,65535,65535,4294967295,'\0','\0'),(9029,'Epho',255,65535,65535,4294967295,'\0','\0'),(9030,'Tioalobe',255,65535,65535,4294967295,'\0','\0'),(9031,'Tiabad',255,65535,65535,4294967295,'\0','\0'),(9032,'Enlitietiku',255,65535,65535,4294967295,'\0','\0'),(9033,'Uanalya',255,65535,65535,4294967295,'\0','\0'),(9034,'Agan',255,65535,65535,4294967295,'\0','\0'),(9035,'Geoasech',255,65535,65535,4294967295,'\0','\0'),(9036,'Idoidpereer',255,65535,65535,4294967295,'\0','\0'),(9037,'Sine',255,65535,65535,4294967295,'\0','\0'),(9038,'Irge',255,65535,65535,4294967295,'\0','\0'),(9039,'Lipoisy',255,65535,65535,4294967295,'\0','\0'),(9040,'Inisit',255,65535,65535,4294967295,'\0','\0'),(9041,'Riduleviagri',255,65535,65535,4294967295,'\0','\0'),(9042,'Sceurya',255,65535,65535,4294967295,'\0','\0'),(9043,'Oped',255,65535,65535,4294967295,'\0','\0'),(9044,'Ayeaetho',255,65535,65535,4294967295,'\0','\0'),(9045,'Ovisulesa',255,65535,65535,4294967295,'\0','\0'),(9046,'Eayulians',255,65535,65535,4294967295,'\0','\0'),(9047,'Wainegoeor',255,65535,65535,4294967295,'\0','\0'),(9048,'Dyeki',255,65535,65535,4294967295,'\0','\0'),(9049,'Neoe',255,65535,65535,4294967295,'\0','\0'),(9050,'Eopbroem',255,65535,65535,4294967295,'\0','\0'),(9051,'Nakeap',255,65535,65535,4294967295,'\0','\0'),(9052,'Okgooycocoi',255,65535,65535,4294967295,'\0','\0'),(9053,'Udboyssisone',255,65535,65535,4294967295,'\0','\0'),(9054,'Esmie',255,65535,65535,4294967295,'\0','\0'),(9055,'Enomxiciu',255,65535,65535,4294967295,'\0','\0'),(9056,'Suiwsuegank',255,65535,65535,4294967295,'\0','\0'),(9057,'Aesecospum',255,65535,65535,4294967295,'\0','\0'),(9058,'Diyeaii',255,65535,65535,4294967295,'\0','\0'),(9059,'Osveolkea',255,65535,65535,4294967295,'\0','\0'),(9060,'Caabaltoi',255,65535,65535,4294967295,'\0','\0'),(9061,'Anefleerag',255,65535,65535,4294967295,'\0','\0'),(9062,'Elomneetepu',255,65535,65535,4294967295,'\0','\0'),(9063,'Ityal',255,65535,65535,4294967295,'\0','\0'),(9064,'Ulonocagdayo',255,65535,65535,4294967295,'\0','\0'),(9065,'Oproeni',255,65535,65535,4294967295,'\0','\0'),(9066,'Oedanveieck',255,65535,65535,4294967295,'\0','\0'),(9067,'Entaisneon',255,65535,65535,4294967295,'\0','\0'),(9068,'Utipivieth',255,65535,65535,4294967295,'\0','\0'),(9069,'Eliurt',255,65535,65535,4294967295,'\0','\0'),(9070,'Eskiitbou',255,65535,65535,4294967295,'\0','\0'),(9071,'Ompeidniba',255,65535,65535,4294967295,'\0','\0'),(9072,'Ereyo',255,65535,65535,4294967295,'\0','\0'),(9073,'Eistotybe',255,65535,65535,4294967295,'\0','\0'),(9074,'Eadie',255,65535,65535,4294967295,'\0','\0'),(9075,'Cierboiosu',255,65535,65535,4294967295,'\0','\0'),(9076,'Eltuebhabro',255,65535,65535,4294967295,'\0','\0'),(9077,'Ingeese',255,65535,65535,4294967295,'\0','\0'),(9078,'Otee',255,65535,65535,4294967295,'\0','\0'),(9079,'Onufliat',255,65535,65535,4294967295,'\0','\0'),(9080,'Tasuaesxi',255,65535,65535,4294967295,'\0','\0'),(9081,'Usmeussbru',255,65535,65535,4294967295,'\0','\0'),(9082,'Ubleifiasm',255,65535,65535,4294967295,'\0','\0'),(9083,'Eneniotepa',255,65535,65535,4294967295,'\0','\0'),(9084,'Oneriysqu',255,65535,65535,4294967295,'\0','\0'),(9085,'Oneou',255,65535,65535,4294967295,'\0','\0'),(9086,'Ocloim',255,65535,65535,4294967295,'\0','\0'),(9087,'Opatayuugent',255,65535,65535,4294967295,'\0','\0'),(9088,'Oanil',255,65535,65535,4294967295,'\0','\0'),(9089,'Ilbituloi',255,65535,65535,4294967295,'\0','\0'),(9090,'Edleoty',255,65535,65535,4294967295,'\0','\0'),(9091,'Otoa',255,65535,65535,4294967295,'\0','\0'),(9092,'Inank',255,65535,65535,4294967295,'\0','\0'),(9093,'Eaizpaa',255,65535,65535,4294967295,'\0','\0'),(9094,'Teviaveoif',255,65535,65535,4294967295,'\0','\0'),(9095,'Acidosopaoc',255,65535,65535,4294967295,'\0','\0'),(9096,'Opae',255,65535,65535,4294967295,'\0','\0'),(9097,'Roeuphe',255,65535,65535,4294967295,'\0','\0'),(9098,'Oveernebie',255,65535,65535,4294967295,'\0','\0'),(9099,'Aeyestewouch',255,65535,65535,4294967295,'\0','\0'),(9100,'Ecle',255,65535,65535,4294967295,'\0','\0'),(9101,'Otyupysezo',255,65535,65535,4294967295,'\0','\0'),(9102,'Erlizeey',255,65535,65535,4294967295,'\0','\0'),(9103,'Doildaelitex',255,65535,65535,4294967295,'\0','\0'),(9104,'Eresh',255,65535,65535,4294967295,'\0','\0'),(9105,'Yaeafoopom',255,65535,65535,4294967295,'\0','\0'),(9106,'Inelag',255,65535,65535,4294967295,'\0','\0'),(9107,'Gali',255,65535,65535,4294967295,'\0','\0'),(9108,'Usiho',255,65535,65535,4294967295,'\0','\0'),(9109,'Erswiede',255,65535,65535,4294967295,'\0','\0'),(9110,'Atrapoiclo',255,65535,65535,4294967295,'\0','\0'),(9111,'Aswa',255,65535,65535,4294967295,'\0','\0'),(9112,'Meoerab',255,65535,65535,4294967295,'\0','\0'),(9113,'Isniit',255,65535,65535,4294967295,'\0','\0'),(9114,'Pleheoyl',255,65535,65535,4294967295,'\0','\0'),(9115,'Unupsaulyaer',255,65535,65535,4294967295,'\0','\0'),(9116,'Icoeacnion',255,65535,65535,4294967295,'\0','\0'),(9117,'Isimpdeko',255,65535,65535,4294967295,'\0','\0'),(9118,'Stiuaselite',255,65535,65535,4294967295,'\0','\0'),(9119,'Oniinera',255,65535,65535,4294967295,'\0','\0'),(9120,'Arduatoctoe',255,65535,65535,4294967295,'\0','\0'),(9121,'Arpropakaspi',255,65535,65535,4294967295,'\0','\0'),(9122,'Buiinopga',255,65535,65535,4294967295,'\0','\0'),(9123,'Ihyae',255,65535,65535,4294967295,'\0','\0'),(9124,'Loartyule',255,65535,65535,4294967295,'\0','\0'),(9125,'Entawi',255,65535,65535,4294967295,'\0','\0'),(9126,'Puiletaloan',255,65535,65535,4294967295,'\0','\0'),(9127,'Malenotola',255,65535,65535,4294967295,'\0','\0'),(9128,'Ivriet',255,65535,65535,4294967295,'\0','\0'),(9129,'Brou',255,65535,65535,4294967295,'\0','\0'),(9130,'Aseolelea',255,65535,65535,4294967295,'\0','\0'),(9131,'Geeaody',255,65535,65535,4294967295,'\0','\0'),(9132,'Inte',255,65535,65535,4294967295,'\0','\0'),(9133,'Aawifdee',255,65535,65535,4294967295,'\0','\0'),(9134,'Ocoesko',255,65535,65535,4294967295,'\0','\0'),(9135,'Unforofueg',255,65535,65535,4294967295,'\0','\0'),(9136,'Onere',255,65535,65535,4294967295,'\0','\0'),(9137,'Lenitruoe',255,65535,65535,4294967295,'\0','\0'),(9138,'Eweteepiil',255,65535,65535,4294967295,'\0','\0'),(9139,'Enosesioy',255,65535,65535,4294967295,'\0','\0'),(9140,'Arredaadje',255,65535,65535,4294967295,'\0','\0'),(9141,'Netueldun',255,65535,65535,4294967295,'\0','\0'),(9142,'Elorazbu',255,65535,65535,4294967295,'\0','\0'),(9143,'Aeconat',255,65535,65535,4294967295,'\0','\0'),(9144,'Ogyseagsy',255,65535,65535,4294967295,'\0','\0'),(9145,'Elal',255,65535,65535,4294967295,'\0','\0'),(9146,'Fiyneanne',255,65535,65535,4294967295,'\0','\0'),(9147,'Anebaoplu',255,65535,65535,4294967295,'\0','\0'),(9148,'Egbenitiaton',255,65535,65535,4294967295,'\0','\0'),(9149,'Deete',255,65535,65535,4294967295,'\0','\0'),(9150,'Illar',255,65535,65535,4294967295,'\0','\0'),(9151,'Iudifere',255,65535,65535,4294967295,'\0','\0'),(9152,'Utflias',255,65535,65535,4294967295,'\0','\0'),(9153,'Omig',255,65535,65535,4294967295,'\0','\0'),(9154,'Toaimsi',255,65535,65535,4294967295,'\0','\0'),(9155,'Cureucoae',255,65535,65535,4294967295,'\0','\0'),(9156,'Anyo',255,65535,65535,4294967295,'\0','\0'),(9157,'Itoyayeduna',255,65535,65535,4294967295,'\0','\0'),(9158,'Etotoa',255,65535,65535,4294967295,'\0','\0'),(9159,'Atreuttaos',255,65535,65535,4294967295,'\0','\0'),(9160,'Yseuoes',255,65535,65535,4294967295,'\0','\0'),(9161,'Euneic',255,65535,65535,4294967295,'\0','\0'),(9162,'Rhaord',255,65535,65535,4294967295,'\0','\0'),(9163,'Ifinone',255,65535,65535,4294967295,'\0','\0'),(9164,'Istyexopnoe',255,65535,65535,4294967295,'\0','\0'),(9165,'Seinglecu',255,65535,65535,4294967295,'\0','\0'),(9166,'Iumer',255,65535,65535,4294967295,'\0','\0'),(9167,'Ifahubprayi',255,65535,65535,4294967295,'\0','\0'),(9168,'Etteuengdi',255,65535,65535,4294967295,'\0','\0'),(9169,'Ipemtra',255,65535,65535,4294967295,'\0','\0'),(9170,'Ubro',255,65535,65535,4294967295,'\0','\0'),(9171,'Paroesa',255,65535,65535,4294967295,'\0','\0'),(9172,'Ontethecial',255,65535,65535,4294967295,'\0','\0'),(9173,'Inepenoyf',255,65535,65535,4294967295,'\0','\0'),(9174,'Amefom',255,65535,65535,4294967295,'\0','\0'),(9175,'Beyancoei',255,65535,65535,4294967295,'\0','\0'),(9176,'Onoeki',255,65535,65535,4294967295,'\0','\0'),(9177,'Coseot',255,65535,65535,4294967295,'\0','\0'),(9178,'Eingophati',255,65535,65535,4294967295,'\0','\0'),(9179,'Taeuhoac',255,65535,65535,4294967295,'\0','\0'),(9180,'Obluonkoni',255,65535,65535,4294967295,'\0','\0'),(9181,'Pluidireyo',255,65535,65535,4294967295,'\0','\0'),(9182,'Ifsiodeno',255,65535,65535,4294967295,'\0','\0'),(9183,'Lyuleu',255,65535,65535,4294967295,'\0','\0'),(9184,'Oparbi',255,65535,65535,4294967295,'\0','\0'),(9185,'Osolthyonusm',255,65535,65535,4294967295,'\0','\0'),(9186,'Eissod',255,65535,65535,4294967295,'\0','\0'),(9187,'Tialpuskaele',255,65535,65535,4294967295,'\0','\0'),(9188,'Olakiorze',255,65535,65535,4294967295,'\0','\0'),(9189,'Reun',255,65535,65535,4294967295,'\0','\0'),(9190,'Ilga',255,65535,65535,4294967295,'\0','\0'),(9191,'Etuaeini',255,65535,65535,4294967295,'\0','\0'),(9192,'Duoengonri',255,65535,65535,4294967295,'\0','\0'),(9193,'Inaeoral',255,65535,65535,4294967295,'\0','\0'),(9194,'Riola',255,65535,65535,4294967295,'\0','\0'),(9195,'Ayece',255,65535,65535,4294967295,'\0','\0'),(9196,'Ratretare',255,65535,65535,4294967295,'\0','\0'),(9197,'Hemycoiztyas',255,65535,65535,4294967295,'\0','\0'),(9198,'Eplaeul',255,65535,65535,4294967295,'\0','\0'),(9199,'Uluykinkyne',255,65535,65535,4294967295,'\0','\0'),(9200,'Ryesiap',255,65535,65535,4294967295,'\0','\0'),(9201,'Onatnelubimi',255,65535,65535,4294967295,'\0','\0'),(9202,'Xyketiup',255,65535,65535,4294967295,'\0','\0'),(9203,'Tihueilete',255,65535,65535,4294967295,'\0','\0'),(9204,'Eachraku',255,65535,65535,4294967295,'\0','\0'),(9205,'Noubcieirdi',255,65535,65535,4294967295,'\0','\0'),(9206,'Raustucohae',255,65535,65535,4294967295,'\0','\0'),(9207,'Meagom',255,65535,65535,4294967295,'\0','\0'),(9208,'Tyoyocnaciri',255,65535,65535,4294967295,'\0','\0'),(9209,'Poobuis',255,65535,65535,4294967295,'\0','\0'),(9210,'Doic',255,65535,65535,4294967295,'\0','\0'),(9211,'Romiegegii',255,65535,65535,4294967295,'\0','\0'),(9212,'Esabocingry',255,65535,65535,4294967295,'\0','\0'),(9213,'Ayiispengri',255,65535,65535,4294967295,'\0','\0'),(9214,'Iliftarmjaon',255,65535,65535,4294967295,'\0','\0'),(9215,'Ealyonoyp',255,65535,65535,4294967295,'\0','\0'),(9216,'Yitonu',255,65535,65535,4294967295,'\0','\0'),(9217,'Hitrioad',255,65535,65535,4294967295,'\0','\0'),(9218,'Iudemeori',255,65535,65535,4294967295,'\0','\0'),(9219,'Iekfoegi',255,65535,65535,4294967295,'\0','\0'),(9220,'Sihi',255,65535,65535,4294967295,'\0','\0'),(9221,'Utmeleal',255,65535,65535,4294967295,'\0','\0'),(9222,'Sezeidifla',255,65535,65535,4294967295,'\0','\0'),(9223,'Idtychiat',255,65535,65535,4294967295,'\0','\0'),(9224,'Ilberonaete',255,65535,65535,4294967295,'\0','\0'),(9225,'Hoirano',255,65535,65535,4294967295,'\0','\0'),(9226,'Itorusteoh',255,65535,65535,4294967295,'\0','\0'),(9227,'Latuowatmear',255,65535,65535,4294967295,'\0','\0'),(9228,'Ocoivarsceey',255,65535,65535,4294967295,'\0','\0'),(9229,'Eferetoa',255,65535,65535,4294967295,'\0','\0'),(9230,'Oplaoitma',255,65535,65535,4294967295,'\0','\0'),(9231,'Adyeavioty',255,65535,65535,4294967295,'\0','\0'),(9232,'Icniayheiz',255,65535,65535,4294967295,'\0','\0'),(9233,'Emisahyome',255,65535,65535,4294967295,'\0','\0'),(9234,'Locoato',255,65535,65535,4294967295,'\0','\0'),(9235,'Imodathi',255,65535,65535,4294967295,'\0','\0'),(9236,'Eralyub',255,65535,65535,4294967295,'\0','\0'),(9237,'Nisoaidasthu',255,65535,65535,4294967295,'\0','\0'),(9238,'Esoluovier',255,65535,65535,4294967295,'\0','\0'),(9239,'Uiagle',255,65535,65535,4294967295,'\0','\0'),(9240,'Oreuit',255,65535,65535,4294967295,'\0','\0'),(9241,'Siengunassat',255,65535,65535,4294967295,'\0','\0'),(9242,'Edecyele',255,65535,65535,4294967295,'\0','\0'),(9243,'Otielany',255,65535,65535,4294967295,'\0','\0'),(9244,'Teoe',255,65535,65535,4294967295,'\0','\0'),(9245,'Aboimitiscri',255,65535,65535,4294967295,'\0','\0'),(9246,'Ocapoh',255,65535,65535,4294967295,'\0','\0'),(9247,'Suoimoltroar',255,65535,65535,4294967295,'\0','\0'),(9248,'Rezerene',255,65535,65535,4294967295,'\0','\0'),(9249,'Runoeye',255,65535,65535,4294967295,'\0','\0'),(9250,'Neefla',255,65535,65535,4294967295,'\0','\0'),(9251,'Gioc',255,65535,65535,4294967295,'\0','\0'),(9252,'Gihai',255,65535,65535,4294967295,'\0','\0'),(9253,'Ycoqu',255,65535,65535,4294967295,'\0','\0'),(9254,'Skere',255,65535,65535,4294967295,'\0','\0'),(9255,'Hechafraut',255,65535,65535,4294967295,'\0','\0'),(9256,'Riafioec',255,65535,65535,4294967295,'\0','\0'),(9257,'Irul',255,65535,65535,4294967295,'\0','\0'),(9258,'Peye',255,65535,65535,4294967295,'\0','\0'),(9259,'Diteiemek',255,65535,65535,4294967295,'\0','\0'),(9260,'Uinyo',255,65535,65535,4294967295,'\0','\0'),(9261,'Araioiv',255,65535,65535,4294967295,'\0','\0'),(9262,'Icata',255,65535,65535,4294967295,'\0','\0'),(9263,'Onirxei',255,65535,65535,4294967295,'\0','\0'),(9264,'Faitaneiye',255,65535,65535,4294967295,'\0','\0'),(9265,'Teiamara',255,65535,65535,4294967295,'\0','\0'),(9266,'Eaodya',255,65535,65535,4294967295,'\0','\0'),(9267,'Ikosmuc',255,65535,65535,4294967295,'\0','\0'),(9268,'Ileucooip',255,65535,65535,4294967295,'\0','\0'),(9269,'Fuelogese',255,65535,65535,4294967295,'\0','\0'),(9270,'Araifrera',255,65535,65535,4294967295,'\0','\0'),(9271,'Maasty',255,65535,65535,4294967295,'\0','\0'),(9272,'Ishonete',255,65535,65535,4294967295,'\0','\0'),(9273,'Foyaopalaca',255,65535,65535,4294967295,'\0','\0'),(9274,'Onkbi',255,65535,65535,4294967295,'\0','\0'),(9275,'Insliende',255,65535,65535,4294967295,'\0','\0'),(9276,'Egyivsidaku',255,65535,65535,4294967295,'\0','\0'),(9277,'Ycraboayo',255,65535,65535,4294967295,'\0','\0'),(9278,'Oussethre',255,65535,65535,4294967295,'\0','\0'),(9279,'Icraad',255,65535,65535,4294967295,'\0','\0'),(9280,'Uatesseyupo',255,65535,65535,4294967295,'\0','\0'),(9281,'Rieeiss',255,65535,65535,4294967295,'\0','\0'),(9282,'Ekauteeom',255,65535,65535,4294967295,'\0','\0'),(9283,'Tuvoiba',255,65535,65535,4294967295,'\0','\0'),(9284,'Eyenmuittoar',255,65535,65535,4294967295,'\0','\0'),(9285,'Vecloeypro',255,65535,65535,4294967295,'\0','\0'),(9286,'Eshinueade',255,65535,65535,4294967295,'\0','\0'),(9287,'Beoshaabomo',255,65535,65535,4294967295,'\0','\0'),(9288,'Odoisuo',255,65535,65535,4294967295,'\0','\0'),(9289,'Isryatpena',255,65535,65535,4294967295,'\0','\0'),(9290,'Etotelaogri',255,65535,65535,4294967295,'\0','\0'),(9291,'Myte',255,65535,65535,4294967295,'\0','\0'),(9292,'Alayootra',255,65535,65535,4294967295,'\0','\0'),(9293,'Eodionsu',255,65535,65535,4294967295,'\0','\0'),(9294,'Uldytra',255,65535,65535,4294967295,'\0','\0'),(9295,'Patuartea',255,65535,65535,4294967295,'\0','\0'),(9296,'Ivgli',255,65535,65535,4294967295,'\0','\0'),(9297,'Eyoncadiey',255,65535,65535,4294967295,'\0','\0'),(9298,'Inneit',255,65535,65535,4294967295,'\0','\0'),(9299,'Eayidade',255,65535,65535,4294967295,'\0','\0'),(9300,'Neba',255,65535,65535,4294967295,'\0','\0'),(9301,'Eroalpaense',255,65535,65535,4294967295,'\0','\0'),(9302,'Yieye',255,65535,65535,4294967295,'\0','\0'),(9303,'Iglazo',255,65535,65535,4294967295,'\0','\0'),(9304,'Eericei',255,65535,65535,4294967295,'\0','\0'),(9305,'Eyisibaei',255,65535,65535,4294967295,'\0','\0'),(9306,'Deataltna',255,65535,65535,4294967295,'\0','\0'),(9307,'Uaaleta',255,65535,65535,4294967295,'\0','\0'),(9308,'Atarin',255,65535,65535,4294967295,'\0','\0'),(9309,'Rulesean',255,65535,65535,4294967295,'\0','\0'),(9310,'Ampileydgli',255,65535,65535,4294967295,'\0','\0'),(9311,'Tiatreci',255,65535,65535,4294967295,'\0','\0'),(9312,'Naruneui',255,65535,65535,4294967295,'\0','\0'),(9313,'Issmauromit',255,65535,65535,4294967295,'\0','\0'),(9314,'Urflenotee',255,65535,65535,4294967295,'\0','\0'),(9315,'Abfri',255,65535,65535,4294967295,'\0','\0'),(9316,'Opleaviney',255,65535,65535,4294967295,'\0','\0'),(9317,'Secytei',255,65535,65535,4294967295,'\0','\0'),(9318,'Toip',255,65535,65535,4294967295,'\0','\0'),(9319,'Ycceos',255,65535,65535,4294967295,'\0','\0'),(9320,'Emaronea',255,65535,65535,4294967295,'\0','\0'),(9321,'Yaecaknereni',255,65535,65535,4294967295,'\0','\0'),(9322,'Kiiah',255,65535,65535,4294967295,'\0','\0'),(9323,'Dieniasiu',255,65535,65535,4294967295,'\0','\0'),(9324,'Esosuiole',255,65535,65535,4294967295,'\0','\0'),(9325,'Poralierco',255,65535,65535,4294967295,'\0','\0'),(9326,'Ermueomis',255,65535,65535,4294967295,'\0','\0'),(9327,'Neaseabetit',255,65535,65535,4294967295,'\0','\0'),(9328,'Cayeyde',255,65535,65535,4294967295,'\0','\0'),(9329,'Gyon',255,65535,65535,4294967295,'\0','\0'),(9330,'Niroo',255,65535,65535,4294967295,'\0','\0'),(9331,'Eliwhuiteit',255,65535,65535,4294967295,'\0','\0'),(9332,'Gevaefe',255,65535,65535,4294967295,'\0','\0'),(9333,'Oterne',255,65535,65535,4294967295,'\0','\0'),(9334,'Onyanecala',255,65535,65535,4294967295,'\0','\0'),(9335,'Kraogsu',255,65535,65535,4294967295,'\0','\0'),(9336,'Osacoemkele',255,65535,65535,4294967295,'\0','\0'),(9337,'Onegenar',255,65535,65535,4294967295,'\0','\0'),(9338,'Ehtyipe',255,65535,65535,4294967295,'\0','\0'),(9339,'Irealey',255,65535,65535,4294967295,'\0','\0'),(9340,'Daalpero',255,65535,65535,4294967295,'\0','\0'),(9341,'Abgroirona',255,65535,65535,4294967295,'\0','\0'),(9342,'Alyialheed',255,65535,65535,4294967295,'\0','\0'),(9343,'Itstaacoamo',255,65535,65535,4294967295,'\0','\0'),(9344,'Eoiem',255,65535,65535,4294967295,'\0','\0'),(9345,'Iciumti',255,65535,65535,4294967295,'\0','\0'),(9346,'Taiidmeaco',255,65535,65535,4294967295,'\0','\0'),(9347,'Aneckism',255,65535,65535,4294967295,'\0','\0'),(9348,'Ceedon',255,65535,65535,4294967295,'\0','\0'),(9349,'Ogabuc',255,65535,65535,4294967295,'\0','\0'),(9350,'Inyioortuo',255,65535,65535,4294967295,'\0','\0'),(9351,'Dasanaaurt',255,65535,65535,4294967295,'\0','\0'),(9352,'Iadau',255,65535,65535,4294967295,'\0','\0'),(9353,'Aiogear',255,65535,65535,4294967295,'\0','\0'),(9354,'Yiaflaynt',255,65535,65535,4294967295,'\0','\0'),(9355,'Obuazovoun',255,65535,65535,4294967295,'\0','\0'),(9356,'Urnagossolyo',255,65535,65535,4294967295,'\0','\0'),(9357,'Plimouponsme',255,65535,65535,4294967295,'\0','\0'),(9358,'Enassatyap',255,65535,65535,4294967295,'\0','\0'),(9359,'Uboshupe',255,65535,65535,4294967295,'\0','\0'),(9360,'Ouconure',255,65535,65535,4294967295,'\0','\0'),(9361,'Leaec',255,65535,65535,4294967295,'\0','\0'),(9362,'Ewniv',255,65535,65535,4294967295,'\0','\0'),(9363,'Ogethzaiziq',255,65535,65535,4294967295,'\0','\0'),(9364,'Tiuthece',255,65535,65535,4294967295,'\0','\0'),(9365,'Oicgefepene',255,65535,65535,4294967295,'\0','\0'),(9366,'Ecscegigauma',255,65535,65535,4294967295,'\0','\0'),(9367,'Octeigbiina',255,65535,65535,4294967295,'\0','\0'),(9368,'Poehslatyne',255,65535,65535,4294967295,'\0','\0'),(9369,'Ecsaieabsi',255,65535,65535,4294967295,'\0','\0'),(9370,'Broneov',255,65535,65535,4294967295,'\0','\0'),(9371,'Omcieoc',255,65535,65535,4294967295,'\0','\0'),(9372,'Atoera',255,65535,65535,4294967295,'\0','\0'),(9373,'Isetidioras',255,65535,65535,4294967295,'\0','\0'),(9374,'Maaextera',255,65535,65535,4294967295,'\0','\0'),(9375,'Rokocunk',255,65535,65535,4294967295,'\0','\0'),(9376,'Michierteaga',255,65535,65535,4294967295,'\0','\0'),(9377,'Amaryler',255,65535,65535,4294967295,'\0','\0'),(9378,'Tice',255,65535,65535,4294967295,'\0','\0'),(9379,'Preor',255,65535,65535,4294967295,'\0','\0'),(9380,'Icnefleo',255,65535,65535,4294967295,'\0','\0'),(9381,'Whoagoyaoscy',255,65535,65535,4294967295,'\0','\0'),(9382,'Umsionitzeoh',255,65535,65535,4294967295,'\0','\0'),(9383,'Esphiericy',255,65535,65535,4294967295,'\0','\0'),(9384,'Enymbe',255,65535,65535,4294967295,'\0','\0'),(9385,'Isie',255,65535,65535,4294967295,'\0','\0'),(9386,'Aesenkcayl',255,65535,65535,4294967295,'\0','\0'),(9387,'Rele',255,65535,65535,4294967295,'\0','\0'),(9388,'Engesraoghin',255,65535,65535,4294967295,'\0','\0'),(9389,'Noakceerbe',255,65535,65535,4294967295,'\0','\0'),(9390,'Racu',255,65535,65535,4294967295,'\0','\0'),(9391,'Olalnegmeat',255,65535,65535,4294967295,'\0','\0'),(9392,'Ciropui',255,65535,65535,4294967295,'\0','\0'),(9393,'Eodalunnaan',255,65535,65535,4294967295,'\0','\0'),(9394,'Ecropavaeme',255,65535,65535,4294967295,'\0','\0'),(9395,'Aotetut',255,65535,65535,4294967295,'\0','\0'),(9396,'Otsu',255,65535,65535,4294967295,'\0','\0'),(9397,'Ayfe',255,65535,65535,4294967295,'\0','\0'),(9398,'Ynuboi',255,65535,65535,4294967295,'\0','\0'),(9399,'Acokypeam',255,65535,65535,4294967295,'\0','\0'),(9400,'Omstesuoem',255,65535,65535,4294967295,'\0','\0'),(9401,'Amkeov',255,65535,65535,4294967295,'\0','\0'),(9402,'Iselidei',255,65535,65535,4294967295,'\0','\0'),(9403,'Unroismbybie',255,65535,65535,4294967295,'\0','\0'),(9404,'Tococ',255,65535,65535,4294967295,'\0','\0'),(9405,'Beoisyoel',255,65535,65535,4294967295,'\0','\0'),(9406,'Estiby',255,65535,65535,4294967295,'\0','\0'),(9407,'Spoleiemad',255,65535,65535,4294967295,'\0','\0'),(9408,'Ezeani',255,65535,65535,4294967295,'\0','\0'),(9409,'Leuade',255,65535,65535,4294967295,'\0','\0'),(9410,'Noolneamol',255,65535,65535,4294967295,'\0','\0'),(9411,'Ibneo',255,65535,65535,4294967295,'\0','\0'),(9412,'Iere',255,65535,65535,4294967295,'\0','\0'),(9413,'Ikeuntareno',255,65535,65535,4294967295,'\0','\0'),(9414,'Alizylahtge',255,65535,65535,4294967295,'\0','\0'),(9415,'Ierer',255,65535,65535,4294967295,'\0','\0'),(9416,'Ieyecepee',255,65535,65535,4294967295,'\0','\0'),(9417,'Aerudotite',255,65535,65535,4294967295,'\0','\0'),(9418,'Alehugay',255,65535,65535,4294967295,'\0','\0'),(9419,'Onoabstan',255,65535,65535,4294967295,'\0','\0'),(9420,'Ilinidety',255,65535,65535,4294967295,'\0','\0'),(9421,'Coraauldeyct',255,65535,65535,4294967295,'\0','\0'),(9422,'Ereaeshurd',255,65535,65535,4294967295,'\0','\0'),(9423,'Cicieyi',255,65535,65535,4294967295,'\0','\0'),(9424,'Ambaoy',255,65535,65535,4294967295,'\0','\0'),(9425,'Eyaosuna',255,65535,65535,4294967295,'\0','\0'),(9426,'Astacuamip',255,65535,65535,4294967295,'\0','\0'),(9427,'Iielonten',255,65535,65535,4294967295,'\0','\0'),(9428,'Rieye',255,65535,65535,4294967295,'\0','\0'),(9429,'Spapeloeleve',255,65535,65535,4294967295,'\0','\0'),(9430,'Oriowadtri',255,65535,65535,4294967295,'\0','\0'),(9431,'Anspa',255,65535,65535,4294967295,'\0','\0'),(9432,'Uisosoiy',255,65535,65535,4294967295,'\0','\0'),(9433,'Scaatioliiq',255,65535,65535,4294967295,'\0','\0'),(9434,'Episcro',255,65535,65535,4294967295,'\0','\0'),(9435,'Ymulimnodeac',255,65535,65535,4294967295,'\0','\0'),(9436,'Takadwei',255,65535,65535,4294967295,'\0','\0'),(9437,'Giniusne',255,65535,65535,4294967295,'\0','\0'),(9438,'Chana',255,65535,65535,4294967295,'\0','\0'),(9439,'Neaule',255,65535,65535,4294967295,'\0','\0'),(9440,'Eryaehereon',255,65535,65535,4294967295,'\0','\0'),(9441,'Enacei',255,65535,65535,4294967295,'\0','\0'),(9442,'Eriliedicil',255,65535,65535,4294967295,'\0','\0'),(9443,'Oeakica',255,65535,65535,4294967295,'\0','\0'),(9444,'Eutofazce',255,65535,65535,4294967295,'\0','\0'),(9445,'Eonreevqu',255,65535,65535,4294967295,'\0','\0'),(9446,'Aedfeule',255,65535,65535,4294967295,'\0','\0'),(9447,'Esaionux',255,65535,65535,4294967295,'\0','\0'),(9448,'Cearwhuseoc',255,65535,65535,4294967295,'\0','\0'),(9449,'Asteriko',255,65535,65535,4294967295,'\0','\0'),(9450,'Oineo',255,65535,65535,4294967295,'\0','\0'),(9451,'Teriwiend',255,65535,65535,4294967295,'\0','\0'),(9452,'Eneroncutgla',255,65535,65535,4294967295,'\0','\0'),(9453,'Treswosi',255,65535,65535,4294967295,'\0','\0'),(9454,'Aspe',255,65535,65535,4294967295,'\0','\0'),(9455,'Urayea',255,65535,65535,4294967295,'\0','\0'),(9456,'Ostaycoidi',255,65535,65535,4294967295,'\0','\0'),(9457,'Miwiust',255,65535,65535,4294967295,'\0','\0'),(9458,'Ismeref',255,65535,65535,4294967295,'\0','\0'),(9459,'Reneidam',255,65535,65535,4294967295,'\0','\0'),(9460,'Iblomaedawa',255,65535,65535,4294967295,'\0','\0'),(9461,'Omerbathae',255,65535,65535,4294967295,'\0','\0'),(9462,'Onifaki',255,65535,65535,4294967295,'\0','\0'),(9463,'Umborenexe',255,65535,65535,4294967295,'\0','\0'),(9464,'Dayaiz',255,65535,65535,4294967295,'\0','\0'),(9465,'Aevick',255,65535,65535,4294967295,'\0','\0'),(9466,'Ecaexcara',255,65535,65535,4294967295,'\0','\0'),(9467,'Ahothesre',255,65535,65535,4294967295,'\0','\0'),(9468,'Eckylat',255,65535,65535,4294967295,'\0','\0'),(9469,'Leec',255,65535,65535,4294967295,'\0','\0'),(9470,'Oinigesclo',255,65535,65535,4294967295,'\0','\0'),(9471,'Gicro',255,65535,65535,4294967295,'\0','\0'),(9472,'Ayulug',255,65535,65535,4294967295,'\0','\0'),(9473,'Cuimtirean',255,65535,65535,4294967295,'\0','\0'),(9474,'Eglovinti',255,65535,65535,4294967295,'\0','\0'),(9475,'Veyi',255,65535,65535,4294967295,'\0','\0'),(9476,'Etoenti',255,65535,65535,4294967295,'\0','\0'),(9477,'Reiaau',255,65535,65535,4294967295,'\0','\0'),(9478,'Doehusuep',255,65535,65535,4294967295,'\0','\0'),(9479,'Oiaisoet',255,65535,65535,4294967295,'\0','\0'),(9480,'Abuecostet',255,65535,65535,4294967295,'\0','\0'),(9481,'Inaacene',255,65535,65535,4294967295,'\0','\0'),(9482,'Omurangoyne',255,65535,65535,4294967295,'\0','\0'),(9483,'Atebdeogokic',255,65535,65535,4294967295,'\0','\0'),(9484,'Topsyeyaentu',255,65535,65535,4294967295,'\0','\0'),(9485,'Boyeoogeon',255,65535,65535,4294967295,'\0','\0'),(9486,'Aronuoi',255,65535,65535,4294967295,'\0','\0'),(9487,'Rechiroarc',255,65535,65535,4294967295,'\0','\0'),(9488,'Styeaom',255,65535,65535,4294967295,'\0','\0'),(9489,'Yagene',255,65535,65535,4294967295,'\0','\0'),(9490,'Estetopo',255,65535,65535,4294967295,'\0','\0'),(9491,'Yitacquum',255,65535,65535,4294967295,'\0','\0'),(9492,'Imyocmine',255,65535,65535,4294967295,'\0','\0'),(9493,'Adog',255,65535,65535,4294967295,'\0','\0'),(9494,'Amnoeyo',255,65535,65535,4294967295,'\0','\0'),(9495,'Ioolme',255,65535,65535,4294967295,'\0','\0'),(9496,'Ajeyecou',255,65535,65535,4294967295,'\0','\0'),(9497,'Zioerteahcho',255,65535,65535,4294967295,'\0','\0'),(9498,'Riulakerene',255,65535,65535,4294967295,'\0','\0'),(9499,'Eylo',255,65535,65535,4294967295,'\0','\0'),(9500,'Eohoitif',255,65535,65535,4294967295,'\0','\0'),(9501,'Bastoeresoak',255,65535,65535,4294967295,'\0','\0'),(9502,'Hinahati',255,65535,65535,4294967295,'\0','\0'),(9503,'Inayes',255,65535,65535,4294967295,'\0','\0'),(9504,'Eesserti',255,65535,65535,4294967295,'\0','\0'),(9505,'Ahesteau',255,65535,65535,4294967295,'\0','\0'),(9506,'Bamoageyefe',255,65535,65535,4294967295,'\0','\0'),(9507,'Esiiuba',255,65535,65535,4294967295,'\0','\0'),(9508,'Lacahois',255,65535,65535,4294967295,'\0','\0'),(9509,'Male',255,65535,65535,4294967295,'\0','\0'),(9510,'Iiag',255,65535,65535,4294967295,'\0','\0'),(9511,'Atcocane',255,65535,65535,4294967295,'\0','\0'),(9512,'Leivo',255,65535,65535,4294967295,'\0','\0'),(9513,'Preuamaric',255,65535,65535,4294967295,'\0','\0'),(9514,'Antiltzeiti',255,65535,65535,4294967295,'\0','\0'),(9515,'Useetend',255,65535,65535,4294967295,'\0','\0'),(9516,'Woengte',255,65535,65535,4294967295,'\0','\0'),(9517,'Neate',255,65535,65535,4294967295,'\0','\0'),(9518,'Cacha',255,65535,65535,4294967295,'\0','\0'),(9519,'Ywiceavge',255,65535,65535,4294967295,'\0','\0'),(9520,'Iecow',255,65535,65535,4294967295,'\0','\0'),(9521,'Waediyrmiki',255,65535,65535,4294967295,'\0','\0'),(9522,'Liauec',255,65535,65535,4294967295,'\0','\0'),(9523,'Esicteoo',255,65535,65535,4294967295,'\0','\0'),(9524,'Ertitefii',255,65535,65535,4294967295,'\0','\0'),(9525,'Eyquargewoco',255,65535,65535,4294967295,'\0','\0'),(9526,'Diletanidre',255,65535,65535,4294967295,'\0','\0'),(9527,'Erisainaeld',255,65535,65535,4294967295,'\0','\0'),(9528,'Raefoa',255,65535,65535,4294967295,'\0','\0'),(9529,'Eniskeatun',255,65535,65535,4294967295,'\0','\0'),(9530,'Zaohoboase',255,65535,65535,4294967295,'\0','\0'),(9531,'Intluyedo',255,65535,65535,4294967295,'\0','\0'),(9532,'Demie',255,65535,65535,4294967295,'\0','\0'),(9533,'Aroaen',255,65535,65535,4294967295,'\0','\0'),(9534,'Atyiss',255,65535,65535,4294967295,'\0','\0'),(9535,'Avyeierveos',255,65535,65535,4294967295,'\0','\0'),(9536,'Eubcui',255,65535,65535,4294967295,'\0','\0'),(9537,'Yaydloti',255,65535,65535,4294967295,'\0','\0'),(9538,'Aonaw',255,65535,65535,4294967295,'\0','\0'),(9539,'Lueen',255,65535,65535,4294967295,'\0','\0'),(9540,'Ekun',255,65535,65535,4294967295,'\0','\0'),(9541,'Apraomnee',255,65535,65535,4294967295,'\0','\0'),(9542,'Ulaalenre',255,65535,65535,4294967295,'\0','\0'),(9543,'Teugeey',255,65535,65535,4294967295,'\0','\0'),(9544,'Idatayeog',255,65535,65535,4294967295,'\0','\0'),(9545,'Mydigytwoi',255,65535,65535,4294967295,'\0','\0'),(9546,'Elinmiesmao',255,65535,65535,4294967295,'\0','\0'),(9547,'Lidiorali',255,65535,65535,4294967295,'\0','\0'),(9548,'Ueloa',255,65535,65535,4294967295,'\0','\0'),(9549,'Ampay',255,65535,65535,4294967295,'\0','\0'),(9550,'Ojlicreino',255,65535,65535,4294967295,'\0','\0'),(9551,'Coeanuial',255,65535,65535,4294967295,'\0','\0'),(9552,'Etleon',255,65535,65535,4294967295,'\0','\0'),(9553,'Ehedealai',255,65535,65535,4294967295,'\0','\0'),(9554,'Ephistroscha',255,65535,65535,4294967295,'\0','\0'),(9555,'Mieqiang',255,65535,65535,4294967295,'\0','\0'),(9556,'Ietgoizpeyo',255,65535,65535,4294967295,'\0','\0'),(9557,'Dicho',255,65535,65535,4294967295,'\0','\0'),(9558,'Oleor',255,65535,65535,4294967295,'\0','\0'),(9559,'Tepiaont',255,65535,65535,4294967295,'\0','\0'),(9560,'Awcreal',255,65535,65535,4294967295,'\0','\0'),(9561,'Chielai',255,65535,65535,4294967295,'\0','\0'),(9562,'Verdylios',255,65535,65535,4294967295,'\0','\0'),(9563,'Insoeis',255,65535,65535,4294967295,'\0','\0'),(9564,'Ercanoa',255,65535,65535,4294967295,'\0','\0'),(9565,'Etidudmeis',255,65535,65535,4294967295,'\0','\0'),(9566,'Adomoquge',255,65535,65535,4294967295,'\0','\0'),(9567,'Ueiosi',255,65535,65535,4294967295,'\0','\0'),(9568,'Lanetiawob',255,65535,65535,4294967295,'\0','\0'),(9569,'Inmuimove',255,65535,65535,4294967295,'\0','\0'),(9570,'Enssaoynil',255,65535,65535,4294967295,'\0','\0'),(9571,'Yoaetauas',255,65535,65535,4294967295,'\0','\0'),(9572,'Coelduo',255,65535,65535,4294967295,'\0','\0'),(9573,'Gyedaen',255,65535,65535,4294967295,'\0','\0'),(9574,'Cyera',255,65535,65535,4294967295,'\0','\0'),(9575,'Ayad',255,65535,65535,4294967295,'\0','\0'),(9576,'Lioryei',255,65535,65535,4294967295,'\0','\0'),(9577,'Alini',255,65535,65535,4294967295,'\0','\0'),(9578,'Taeemta',255,65535,65535,4294967295,'\0','\0'),(9579,'Rilyuuyac',255,65535,65535,4294967295,'\0','\0'),(9580,'Oleoendo',255,65535,65535,4294967295,'\0','\0'),(9581,'Eatid',255,65535,65535,4294967295,'\0','\0'),(9582,'Ighbatrayea',255,65535,65535,4294967295,'\0','\0'),(9583,'Iamioni',255,65535,65535,4294967295,'\0','\0'),(9584,'Youcoif',255,65535,65535,4294967295,'\0','\0'),(9585,'Reumiimby',255,65535,65535,4294967295,'\0','\0'),(9586,'Oturi',255,65535,65535,4294967295,'\0','\0'),(9587,'Edao',255,65535,65535,4294967295,'\0','\0'),(9588,'Iginesnoarly',255,65535,65535,4294967295,'\0','\0'),(9589,'Sphoethby',255,65535,65535,4294967295,'\0','\0'),(9590,'Blyaoeft',255,65535,65535,4294967295,'\0','\0'),(9591,'Iirsane',255,65535,65535,4294967295,'\0','\0'),(9592,'Ugaeyplaast',255,65535,65535,4294967295,'\0','\0'),(9593,'Ecosiwkis',255,65535,65535,4294967295,'\0','\0'),(9594,'Xacyul',255,65535,65535,4294967295,'\0','\0'),(9595,'Mattio',255,65535,65535,4294967295,'\0','\0'),(9596,'Ketuelni',255,65535,65535,4294967295,'\0','\0'),(9597,'Ingtepe',255,65535,65535,4294967295,'\0','\0'),(9598,'Orciliesell',255,65535,65535,4294967295,'\0','\0'),(9599,'Eeteay',255,65535,65535,4294967295,'\0','\0'),(9600,'Miime',255,65535,65535,4294967295,'\0','\0'),(9601,'Gluyoiymiac',255,65535,65535,4294967295,'\0','\0'),(9602,'Ebriawa',255,65535,65535,4294967295,'\0','\0'),(9603,'Astemlieyys',255,65535,65535,4294967295,'\0','\0'),(9604,'Aeilieclu',255,65535,65535,4294967295,'\0','\0'),(9605,'Leaimiproo',255,65535,65535,4294967295,'\0','\0'),(9606,'Isuconi',255,65535,65535,4294967295,'\0','\0'),(9607,'Einentesowed',255,65535,65535,4294967295,'\0','\0'),(9608,'Echub',255,65535,65535,4294967295,'\0','\0'),(9609,'Andrioeral',255,65535,65535,4294967295,'\0','\0'),(9610,'Igeachoorshe',255,65535,65535,4294967295,'\0','\0'),(9611,'Ameos',255,65535,65535,4294967295,'\0','\0'),(9612,'Omste',255,65535,65535,4294967295,'\0','\0'),(9613,'Ogashat',255,65535,65535,4294967295,'\0','\0'),(9614,'Tineoctipe',255,65535,65535,4294967295,'\0','\0'),(9615,'Erboieti',255,65535,65535,4294967295,'\0','\0'),(9616,'Iuonroraor',255,65535,65535,4294967295,'\0','\0'),(9617,'Hualayeyti',255,65535,65535,4294967295,'\0','\0'),(9618,'Egewimny',255,65535,65535,4294967295,'\0','\0'),(9619,'Eraoqdiama',255,65535,65535,4294967295,'\0','\0'),(9620,'Ayeloraco',255,65535,65535,4294967295,'\0','\0'),(9621,'Iosisii',255,65535,65535,4294967295,'\0','\0'),(9622,'Onlasuni',255,65535,65535,4294967295,'\0','\0'),(9623,'Arulonria',255,65535,65535,4294967295,'\0','\0'),(9624,'Yecoapec',255,65535,65535,4294967295,'\0','\0'),(9625,'Eraussab',255,65535,65535,4294967295,'\0','\0'),(9626,'Dateangaledi',255,65535,65535,4294967295,'\0','\0'),(9627,'Entoalutocde',255,65535,65535,4294967295,'\0','\0'),(9628,'Peomairkfrai',255,65535,65535,4294967295,'\0','\0'),(9629,'Saneikma',255,65535,65535,4294967295,'\0','\0'),(9630,'Liil',255,65535,65535,4294967295,'\0','\0'),(9631,'Oaypo',255,65535,65535,4294967295,'\0','\0'),(9632,'Ineotcaqute',255,65535,65535,4294967295,'\0','\0'),(9633,'Edesco',255,65535,65535,4294967295,'\0','\0'),(9634,'Othe',255,65535,65535,4294967295,'\0','\0'),(9635,'Anyrizee',255,65535,65535,4294967295,'\0','\0'),(9636,'Peebfu',255,65535,65535,4294967295,'\0','\0'),(9637,'Laya',255,65535,65535,4294967295,'\0','\0'),(9638,'Eneveon',255,65535,65535,4294967295,'\0','\0'),(9639,'Uitung',255,65535,65535,4294967295,'\0','\0'),(9640,'Oiveopoe',255,65535,65535,4294967295,'\0','\0'),(9641,'Woeata',255,65535,65535,4294967295,'\0','\0'),(9642,'Atisertas',255,65535,65535,4294967295,'\0','\0'),(9643,'Oatryni',255,65535,65535,4294967295,'\0','\0'),(9644,'Eola',255,65535,65535,4294967295,'\0','\0'),(9645,'Avleafah',255,65535,65535,4294967295,'\0','\0'),(9646,'Uokiul',255,65535,65535,4294967295,'\0','\0'),(9647,'Osuodepoe',255,65535,65535,4294967295,'\0','\0'),(9648,'Fytaibsiea',255,65535,65535,4294967295,'\0','\0'),(9649,'Uafumayni',255,65535,65535,4294967295,'\0','\0'),(9650,'Empie',255,65535,65535,4294967295,'\0','\0'),(9651,'Intateropsa',255,65535,65535,4294967295,'\0','\0'),(9652,'Enyoco',255,65535,65535,4294967295,'\0','\0'),(9653,'Noiibraalo',255,65535,65535,4294967295,'\0','\0'),(9654,'Yaeu',255,65535,65535,4294967295,'\0','\0'),(9655,'Ogluis',255,65535,65535,4294967295,'\0','\0'),(9656,'Uigh',255,65535,65535,4294967295,'\0','\0'),(9657,'Mageinglooy',255,65535,65535,4294967295,'\0','\0'),(9658,'Ater',255,65535,65535,4294967295,'\0','\0'),(9659,'Icsairimi',255,65535,65535,4294967295,'\0','\0'),(9660,'Keinesheirze',255,65535,65535,4294967295,'\0','\0'),(9661,'Ustreboesut',255,65535,65535,4294967295,'\0','\0'),(9662,'Neboyautnite',255,65535,65535,4294967295,'\0','\0'),(9663,'Elnoalaoyni',255,65535,65535,4294967295,'\0','\0'),(9664,'Arsifrein',255,65535,65535,4294967295,'\0','\0'),(9665,'Ripopooss',255,65535,65535,4294967295,'\0','\0'),(9666,'Ycea',255,65535,65535,4294967295,'\0','\0'),(9667,'Ucalstrilye',255,65535,65535,4294967295,'\0','\0'),(9668,'Euib',255,65535,65535,4294967295,'\0','\0'),(9669,'Ocse',255,65535,65535,4294967295,'\0','\0'),(9670,'Istreomunat',255,65535,65535,4294967295,'\0','\0'),(9671,'Leyletochne',255,65535,65535,4294967295,'\0','\0'),(9672,'Icflaiqy',255,65535,65535,4294967295,'\0','\0'),(9673,'Yoaug',255,65535,65535,4294967295,'\0','\0'),(9674,'Coahtier',255,65535,65535,4294967295,'\0','\0'),(9675,'Oituapara',255,65535,65535,4294967295,'\0','\0'),(9676,'Entspaidid',255,65535,65535,4294967295,'\0','\0'),(9677,'Riagyaoick',255,65535,65535,4294967295,'\0','\0'),(9678,'Ethpreoru',255,65535,65535,4294967295,'\0','\0'),(9679,'Ayilyker',255,65535,65535,4294967295,'\0','\0'),(9680,'Oayiperei',255,65535,65535,4294967295,'\0','\0'),(9681,'Idura',255,65535,65535,4294967295,'\0','\0'),(9682,'Ebuf',255,65535,65535,4294967295,'\0','\0'),(9683,'Esusleerdi',255,65535,65535,4294967295,'\0','\0'),(9684,'Ikem',255,65535,65535,4294967295,'\0','\0'),(9685,'Tenicodi',255,65535,65535,4294967295,'\0','\0'),(9686,'Coyliroat',255,65535,65535,4294967295,'\0','\0'),(9687,'Erkeoay',255,65535,65535,4294967295,'\0','\0'),(9688,'Iylireob',255,65535,65535,4294967295,'\0','\0'),(9689,'Achostritra',255,65535,65535,4294967295,'\0','\0'),(9690,'Etidoteper',255,65535,65535,4294967295,'\0','\0'),(9691,'Noameasa',255,65535,65535,4294967295,'\0','\0'),(9692,'Waryedazneod',255,65535,65535,4294967295,'\0','\0'),(9693,'Aion',255,65535,65535,4294967295,'\0','\0'),(9694,'Arwitiso',255,65535,65535,4294967295,'\0','\0'),(9695,'Iseopialin',255,65535,65535,4294967295,'\0','\0'),(9696,'Autoatple',255,65535,65535,4294967295,'\0','\0'),(9697,'Irewi',255,65535,65535,4294967295,'\0','\0'),(9698,'Eneaerast',255,65535,65535,4294967295,'\0','\0'),(9699,'Aaceuant',255,65535,65535,4294967295,'\0','\0'),(9700,'Izueychenma',255,65535,65535,4294967295,'\0','\0'),(9701,'Sityeseao',255,65535,65535,4294967295,'\0','\0'),(9702,'Esecyelo',255,65535,65535,4294967295,'\0','\0'),(9703,'Enkwotoen',255,65535,65535,4294967295,'\0','\0'),(9704,'Unanutsueh',255,65535,65535,4294967295,'\0','\0'),(9705,'Omire',255,65535,65535,4294967295,'\0','\0'),(9706,'Teichyisoct',255,65535,65535,4294967295,'\0','\0'),(9707,'Puneloisi',255,65535,65535,4294967295,'\0','\0'),(9708,'Reke',255,65535,65535,4294967295,'\0','\0'),(9709,'Iteona',255,65535,65535,4294967295,'\0','\0'),(9710,'Yorpoesbrege',255,65535,65535,4294967295,'\0','\0'),(9711,'Isly',255,65535,65535,4294967295,'\0','\0'),(9712,'Uinluedpe',255,65535,65535,4294967295,'\0','\0'),(9713,'Ubenkplein',255,65535,65535,4294967295,'\0','\0'),(9714,'Icraeyngulta',255,65535,65535,4294967295,'\0','\0'),(9715,'Idathiivestu',255,65535,65535,4294967295,'\0','\0'),(9716,'Yipielape',255,65535,65535,4294967295,'\0','\0'),(9717,'Bemiecei',255,65535,65535,4294967295,'\0','\0'),(9718,'Evogiyp',255,65535,65535,4294967295,'\0','\0'),(9719,'Enulabreyaca',255,65535,65535,4294967295,'\0','\0'),(9720,'Aizboelow',255,65535,65535,4294967295,'\0','\0'),(9721,'Eraoawe',255,65535,65535,4294967295,'\0','\0'),(9722,'Agapu',255,65535,65535,4294967295,'\0','\0'),(9723,'Ybtinoudug',255,65535,65535,4294967295,'\0','\0'),(9724,'Iineo',255,65535,65535,4294967295,'\0','\0'),(9725,'Onurien',255,65535,65535,4294967295,'\0','\0'),(9726,'Stianesni',255,65535,65535,4294967295,'\0','\0'),(9727,'Esneem',255,65535,65535,4294967295,'\0','\0'),(9728,'Opoesho',255,65535,65535,4294967295,'\0','\0'),(9729,'Icstrohiwaa',255,65535,65535,4294967295,'\0','\0'),(9730,'Anetoya',255,65535,65535,4294967295,'\0','\0'),(9731,'Etuchveheom',255,65535,65535,4294967295,'\0','\0'),(9732,'Rofroiulela',255,65535,65535,4294967295,'\0','\0'),(9733,'Ataawa',255,65535,65535,4294967295,'\0','\0'),(9734,'Meopowaingke',255,65535,65535,4294967295,'\0','\0'),(9735,'Nacuiseropa',255,65535,65535,4294967295,'\0','\0'),(9736,'Stieuab',255,65535,65535,4294967295,'\0','\0'),(9737,'Iyde',255,65535,65535,4294967295,'\0','\0'),(9738,'Ossifieake',255,65535,65535,4294967295,'\0','\0'),(9739,'Aeashce',255,65535,65535,4294967295,'\0','\0'),(9740,'Aywinio',255,65535,65535,4294967295,'\0','\0'),(9741,'Tepayad',255,65535,65535,4294967295,'\0','\0'),(9742,'Iyhechosni',255,65535,65535,4294967295,'\0','\0'),(9743,'Teaolodiff',255,65535,65535,4294967295,'\0','\0'),(9744,'Sinolu',255,65535,65535,4294967295,'\0','\0'),(9745,'Ioyu',255,65535,65535,4294967295,'\0','\0'),(9746,'Atotyt',255,65535,65535,4294967295,'\0','\0'),(9747,'Icyesenermi',255,65535,65535,4294967295,'\0','\0'),(9748,'Enypeneat',255,65535,65535,4294967295,'\0','\0'),(9749,'Athegedloe',255,65535,65535,4294967295,'\0','\0'),(9750,'Seech',255,65535,65535,4294967295,'\0','\0'),(9751,'Listuble',255,65535,65535,4294967295,'\0','\0'),(9752,'Sioy',255,65535,65535,4294967295,'\0','\0'),(9753,'Aarsqieapi',255,65535,65535,4294967295,'\0','\0'),(9754,'Oeoneh',255,65535,65535,4294967295,'\0','\0'),(9755,'Buaroetiton',255,65535,65535,4294967295,'\0','\0'),(9756,'Liyckda',255,65535,65535,4294967295,'\0','\0'),(9757,'Ateickoofu',255,65535,65535,4294967295,'\0','\0'),(9758,'Drinainer',255,65535,65535,4294967295,'\0','\0'),(9759,'Myepaura',255,65535,65535,4294967295,'\0','\0'),(9760,'Ontaire',255,65535,65535,4294967295,'\0','\0'),(9761,'Aporsoidti',255,65535,65535,4294967295,'\0','\0'),(9762,'Ioico',255,65535,65535,4294967295,'\0','\0'),(9763,'Essatart',255,65535,65535,4294967295,'\0','\0'),(9764,'Eyey',255,65535,65535,4294967295,'\0','\0'),(9765,'Icastieldon',255,65535,65535,4294967295,'\0','\0'),(9766,'Teaioel',255,65535,65535,4294967295,'\0','\0'),(9767,'Increagreo',255,65535,65535,4294967295,'\0','\0'),(9768,'Maeriegh',255,65535,65535,4294967295,'\0','\0'),(9769,'Oliokeig',255,65535,65535,4294967295,'\0','\0'),(9770,'Aptugeohu',255,65535,65535,4294967295,'\0','\0'),(9771,'Aptoledi',255,65535,65535,4294967295,'\0','\0'),(9772,'Acesdeavre',255,65535,65535,4294967295,'\0','\0'),(9773,'Aonugeickche',255,65535,65535,4294967295,'\0','\0'),(9774,'Faema',255,65535,65535,4294967295,'\0','\0'),(9775,'Isspuiy',255,65535,65535,4294967295,'\0','\0'),(9776,'Reomtraeno',255,65535,65535,4294967295,'\0','\0'),(9777,'Ugnelona',255,65535,65535,4294967295,'\0','\0'),(9778,'Ienacanec',255,65535,65535,4294967295,'\0','\0'),(9779,'Istrotynuot',255,65535,65535,4294967295,'\0','\0'),(9780,'Liesputeay',255,65535,65535,4294967295,'\0','\0'),(9781,'Asceemeunton',255,65535,65535,4294967295,'\0','\0'),(9782,'Eretlaasti',255,65535,65535,4294967295,'\0','\0'),(9783,'Tiaof',255,65535,65535,4294967295,'\0','\0'),(9784,'Joivrebatuli',255,65535,65535,4294967295,'\0','\0'),(9785,'Netooba',255,65535,65535,4294967295,'\0','\0'),(9786,'Ywonoeanne',255,65535,65535,4294967295,'\0','\0'),(9787,'Rosleraren',255,65535,65535,4294967295,'\0','\0'),(9788,'Utneubleonra',255,65535,65535,4294967295,'\0','\0'),(9789,'Ahamio',255,65535,65535,4294967295,'\0','\0'),(9790,'Yoanmeci',255,65535,65535,4294967295,'\0','\0'),(9791,'Eneyacma',255,65535,65535,4294967295,'\0','\0'),(9792,'Etarinoyae',255,65535,65535,4294967295,'\0','\0'),(9793,'Ceratylylie',255,65535,65535,4294967295,'\0','\0'),(9794,'Iitara',255,65535,65535,4294967295,'\0','\0'),(9795,'Aosylgroroni',255,65535,65535,4294967295,'\0','\0'),(9796,'Uroixosteip',255,65535,65535,4294967295,'\0','\0'),(9797,'Tinu',255,65535,65535,4294967295,'\0','\0'),(9798,'Uditoi',255,65535,65535,4294967295,'\0','\0'),(9799,'Ynboshainil',255,65535,65535,4294967295,'\0','\0'),(9800,'Aidty',255,65535,65535,4294967295,'\0','\0'),(9801,'Alindisa',255,65535,65535,4294967295,'\0','\0'),(9802,'Tyumanti',255,65535,65535,4294967295,'\0','\0'),(9803,'Neoredirota',255,65535,65535,4294967295,'\0','\0'),(9804,'Eapleori',255,65535,65535,4294967295,'\0','\0'),(9805,'Eruboiglu',255,65535,65535,4294967295,'\0','\0'),(9806,'Raoxtietre',255,65535,65535,4294967295,'\0','\0'),(9807,'Icibechea',255,65535,65535,4294967295,'\0','\0'),(9808,'Ehroy',255,65535,65535,4294967295,'\0','\0'),(9809,'Ehisuochusi',255,65535,65535,4294967295,'\0','\0'),(9810,'Poipigu',255,65535,65535,4294967295,'\0','\0'),(9811,'Adaree',255,65535,65535,4294967295,'\0','\0'),(9812,'Uala',255,65535,65535,4294967295,'\0','\0'),(9813,'Euifroat',255,65535,65535,4294967295,'\0','\0'),(9814,'Onerscaafo',255,65535,65535,4294967295,'\0','\0'),(9815,'Esibewe',255,65535,65535,4294967295,'\0','\0'),(9816,'Boecyaga',255,65535,65535,4294967295,'\0','\0'),(9817,'Alneaeso',255,65535,65535,4294967295,'\0','\0'),(9818,'Anussleeme',255,65535,65535,4294967295,'\0','\0'),(9819,'Odosifyboa',255,65535,65535,4294967295,'\0','\0'),(9820,'Acugubaelid',255,65535,65535,4294967295,'\0','\0'),(9821,'Eoneabrea',255,65535,65535,4294967295,'\0','\0'),(9822,'Igeroner',255,65535,65535,4294967295,'\0','\0'),(9823,'Edoeiaes',255,65535,65535,4294967295,'\0','\0'),(9824,'Keriyo',255,65535,65535,4294967295,'\0','\0'),(9825,'Atreatgi',255,65535,65535,4294967295,'\0','\0'),(9826,'Myno',255,65535,65535,4294967295,'\0','\0'),(9827,'Hochuimut',255,65535,65535,4294967295,'\0','\0'),(9828,'Ilaotifoeht',255,65535,65535,4294967295,'\0','\0'),(9829,'Usinadowooz',255,65535,65535,4294967295,'\0','\0'),(9830,'Onabu',255,65535,65535,4294967295,'\0','\0'),(9831,'Emibaur',255,65535,65535,4294967295,'\0','\0'),(9832,'Aeoeck',255,65535,65535,4294967295,'\0','\0'),(9833,'Ialnalicheo',255,65535,65535,4294967295,'\0','\0'),(9834,'Amonieni',255,65535,65535,4294967295,'\0','\0'),(9835,'Yvael',255,65535,65535,4294967295,'\0','\0'),(9836,'Chureodi',255,65535,65535,4294967295,'\0','\0'),(9837,'Bioraynioi',255,65535,65535,4294967295,'\0','\0'),(9838,'Ianoedor',255,65535,65535,4294967295,'\0','\0'),(9839,'Naiacemi',255,65535,65535,4294967295,'\0','\0'),(9840,'Ihengprelo',255,65535,65535,4294967295,'\0','\0'),(9841,'Leealat',255,65535,65535,4294967295,'\0','\0'),(9842,'Sana',255,65535,65535,4294967295,'\0','\0'),(9843,'Moelybae',255,65535,65535,4294967295,'\0','\0'),(9844,'Icedecdeer',255,65535,65535,4294967295,'\0','\0'),(9845,'Ixorodeyene',255,65535,65535,4294967295,'\0','\0'),(9846,'Ofisate',255,65535,65535,4294967295,'\0','\0'),(9847,'Esonganoou',255,65535,65535,4294967295,'\0','\0'),(9848,'Elakocuzaip',255,65535,65535,4294967295,'\0','\0'),(9849,'Ictyerowro',255,65535,65535,4294967295,'\0','\0'),(9850,'Beabili',255,65535,65535,4294967295,'\0','\0'),(9851,'Ilvele',255,65535,65535,4294967295,'\0','\0'),(9852,'Diyainraor',255,65535,65535,4294967295,'\0','\0'),(9853,'Leayella',255,65535,65535,4294967295,'\0','\0'),(9854,'Seamanagile',255,65535,65535,4294967295,'\0','\0'),(9855,'Amcaadyg',255,65535,65535,4294967295,'\0','\0'),(9856,'Inteucsceu',255,65535,65535,4294967295,'\0','\0'),(9857,'Naungisyanu',255,65535,65535,4294967295,'\0','\0'),(9858,'Unteatieti',255,65535,65535,4294967295,'\0','\0'),(9859,'Setyle',255,65535,65535,4294967295,'\0','\0'),(9860,'Mochoitab',255,65535,65535,4294967295,'\0','\0'),(9861,'Veat',255,65535,65535,4294967295,'\0','\0'),(9862,'Aniumstai',255,65535,65535,4294967295,'\0','\0'),(9863,'Erapmuechte',255,65535,65535,4294967295,'\0','\0'),(9864,'Niey',255,65535,65535,4294967295,'\0','\0'),(9865,'Oonadal',255,65535,65535,4294967295,'\0','\0'),(9866,'Onantisley',255,65535,65535,4294967295,'\0','\0'),(9867,'Izbuatere',255,65535,65535,4294967295,'\0','\0'),(9868,'Yrackalti',255,65535,65535,4294967295,'\0','\0'),(9869,'Pesy',255,65535,65535,4294967295,'\0','\0'),(9870,'Iian',255,65535,65535,4294967295,'\0','\0'),(9871,'Rifiieckut',255,65535,65535,4294967295,'\0','\0'),(9872,'Teti',255,65535,65535,4294967295,'\0','\0'),(9873,'Uiga',255,65535,65535,4294967295,'\0','\0'),(9874,'Ugugtescef',255,65535,65535,4294967295,'\0','\0'),(9875,'Hacaeshuecma',255,65535,65535,4294967295,'\0','\0'),(9876,'Liinlotoes',255,65535,65535,4294967295,'\0','\0'),(9877,'Aretiesca',255,65535,65535,4294967295,'\0','\0'),(9878,'Etaogogucsy',255,65535,65535,4294967295,'\0','\0'),(9879,'Obya',255,65535,65535,4294967295,'\0','\0'),(9880,'Ileejetus',255,65535,65535,4294967295,'\0','\0'),(9881,'Ivali',255,65535,65535,4294967295,'\0','\0'),(9882,'Amaanrayrre',255,65535,65535,4294967295,'\0','\0'),(9883,'Izerdiess',255,65535,65535,4294967295,'\0','\0'),(9884,'Wigeahraso',255,65535,65535,4294967295,'\0','\0'),(9885,'Anomwineu',255,65535,65535,4294967295,'\0','\0'),(9886,'Esilactroce',255,65535,65535,4294967295,'\0','\0'),(9887,'Ohiscialeiss',255,65535,65535,4294967295,'\0','\0'),(9888,'Aoniesacep',255,65535,65535,4294967295,'\0','\0'),(9889,'Ayeviapneil',255,65535,65535,4294967295,'\0','\0'),(9890,'Acera',255,65535,65535,4294967295,'\0','\0'),(9891,'Newoyclicisi',255,65535,65535,4294967295,'\0','\0'),(9892,'Phoucke',255,65535,65535,4294967295,'\0','\0'),(9893,'Iplaonagraes',255,65535,65535,4294967295,'\0','\0'),(9894,'Oiyaryoi',255,65535,65535,4294967295,'\0','\0'),(9895,'Theisyadieok',255,65535,65535,4294967295,'\0','\0'),(9896,'Echo',255,65535,65535,4294967295,'\0','\0'),(9897,'Ogioxoerig',255,65535,65535,4294967295,'\0','\0'),(9898,'Goeiares',255,65535,65535,4294967295,'\0','\0'),(9899,'Neicvi',255,65535,65535,4294967295,'\0','\0'),(9900,'Aver',255,65535,65535,4294967295,'\0','\0'),(9901,'Ehmeoye',255,65535,65535,4294967295,'\0','\0'),(9902,'Deusaseck',255,65535,65535,4294967295,'\0','\0'),(9903,'Aosomain',255,65535,65535,4294967295,'\0','\0'),(9904,'Indi',255,65535,65535,4294967295,'\0','\0'),(9905,'Boaumissag',255,65535,65535,4294967295,'\0','\0'),(9906,'Ieran',255,65535,65535,4294967295,'\0','\0'),(9907,'Emnoal',255,65535,65535,4294967295,'\0','\0'),(9908,'Tiuatchy',255,65535,65535,4294967295,'\0','\0'),(9909,'Irpamung',255,65535,65535,4294967295,'\0','\0'),(9910,'Neboneani',255,65535,65535,4294967295,'\0','\0'),(9911,'Niaanabo',255,65535,65535,4294967295,'\0','\0'),(9912,'Yseremar',255,65535,65535,4294967295,'\0','\0'),(9913,'Onalsamimyni',255,65535,65535,4294967295,'\0','\0'),(9914,'Tilephoe',255,65535,65535,4294967295,'\0','\0'),(9915,'Myaiimo',255,65535,65535,4294967295,'\0','\0'),(9916,'Eafori',255,65535,65535,4294967295,'\0','\0'),(9917,'Brooaniiv',255,65535,65535,4294967295,'\0','\0'),(9918,'Ynsagihitaup',255,65535,65535,4294967295,'\0','\0'),(9919,'Yoingenareso',255,65535,65535,4294967295,'\0','\0'),(9920,'Napcaoan',255,65535,65535,4294967295,'\0','\0'),(9921,'Eitetynt',255,65535,65535,4294967295,'\0','\0'),(9922,'Assap',255,65535,65535,4294967295,'\0','\0'),(9923,'Aleilemdoe',255,65535,65535,4294967295,'\0','\0'),(9924,'Aoliesti',255,65535,65535,4294967295,'\0','\0'),(9925,'Aiguhete',255,65535,65535,4294967295,'\0','\0'),(9926,'Inyaslachy',255,65535,65535,4294967295,'\0','\0'),(9927,'Ernosu',255,65535,65535,4294967295,'\0','\0'),(9928,'Noetsata',255,65535,65535,4294967295,'\0','\0'),(9929,'Eisufubresi',255,65535,65535,4294967295,'\0','\0'),(9930,'Abreameedy',255,65535,65535,4294967295,'\0','\0'),(9931,'Coayumantioh',255,65535,65535,4294967295,'\0','\0'),(9932,'Kialatpo',255,65535,65535,4294967295,'\0','\0'),(9933,'Estnyineahun',255,65535,65535,4294967295,'\0','\0'),(9934,'Ogopocutho',255,65535,65535,4294967295,'\0','\0'),(9935,'Anleile',255,65535,65535,4294967295,'\0','\0'),(9936,'Siedaogu',255,65535,65535,4294967295,'\0','\0'),(9937,'Ovifdarytie',255,65535,65535,4294967295,'\0','\0'),(9938,'Doylirayurwa',255,65535,65535,4294967295,'\0','\0'),(9939,'Ypayleceth',255,65535,65535,4294967295,'\0','\0'),(9940,'Assisyomiue',255,65535,65535,4294967295,'\0','\0'),(9941,'Epoya',255,65535,65535,4294967295,'\0','\0'),(9942,'Tielengsi',255,65535,65535,4294967295,'\0','\0'),(9943,'Avomoeit',255,65535,65535,4294967295,'\0','\0'),(9944,'Ayteiey',255,65535,65535,4294967295,'\0','\0'),(9945,'Ibiaonte',255,65535,65535,4294967295,'\0','\0'),(9946,'Upiduyasne',255,65535,65535,4294967295,'\0','\0'),(9947,'Rapues',255,65535,65535,4294967295,'\0','\0'),(9948,'Amniattici',255,65535,65535,4294967295,'\0','\0'),(9949,'Erypleow',255,65535,65535,4294967295,'\0','\0'),(9950,'Iewnoemes',255,65535,65535,4294967295,'\0','\0'),(9951,'Isaduntome',255,65535,65535,4294967295,'\0','\0'),(9952,'Tenii',255,65535,65535,4294967295,'\0','\0'),(9953,'Antiateomis',255,65535,65535,4294967295,'\0','\0'),(9954,'Oatiinoa',255,65535,65535,4294967295,'\0','\0'),(9955,'Ogatha',255,65535,65535,4294967295,'\0','\0'),(9956,'Eaneine',255,65535,65535,4294967295,'\0','\0'),(9957,'Atialiod',255,65535,65535,4294967295,'\0','\0'),(9958,'Yaeseaye',255,65535,65535,4294967295,'\0','\0'),(9959,'Meeye',255,65535,65535,4294967295,'\0','\0'),(9960,'Caeromfabien',255,65535,65535,4294967295,'\0','\0'),(9961,'Acessaswero',255,65535,65535,4294967295,'\0','\0'),(9962,'Allenitgeey',255,65535,65535,4294967295,'\0','\0'),(9963,'Exlitomi',255,65535,65535,4294967295,'\0','\0'),(9964,'Triisitnea',255,65535,65535,4294967295,'\0','\0'),(9965,'Omastneis',255,65535,65535,4294967295,'\0','\0'),(9966,'Ibeto',255,65535,65535,4294967295,'\0','\0'),(9967,'Owond',255,65535,65535,4294967295,'\0','\0'),(9968,'Isceluaic',255,65535,65535,4294967295,'\0','\0'),(9969,'Oyveda',255,65535,65535,4294967295,'\0','\0'),(9970,'Hiestaleonor',255,65535,65535,4294967295,'\0','\0'),(9971,'Molenoal',255,65535,65535,4294967295,'\0','\0'),(9972,'Veaa',255,65535,65535,4294967295,'\0','\0'),(9973,'Odosowreyad',255,65535,65535,4294967295,'\0','\0'),(9974,'Ereeullyin',255,65535,65535,4294967295,'\0','\0'),(9975,'Ikdyity',255,65535,65535,4294967295,'\0','\0'),(9976,'Rabriosax',255,65535,65535,4294967295,'\0','\0'),(9977,'Eroiap',255,65535,65535,4294967295,'\0','\0'),(9978,'Oassluti',255,65535,65535,4294967295,'\0','\0'),(9979,'Asapuling',255,65535,65535,4294967295,'\0','\0'),(9980,'Estroiagre',255,65535,65535,4294967295,'\0','\0'),(9981,'Roiwi',255,65535,65535,4294967295,'\0','\0'),(9982,'Buatolem',255,65535,65535,4294967295,'\0','\0'),(9983,'Ulhemeyees',255,65535,65535,4294967295,'\0','\0'),(9984,'Itiemi',255,65535,65535,4294967295,'\0','\0'),(9985,'Erchayper',255,65535,65535,4294967295,'\0','\0'),(9986,'Estga',255,65535,65535,4294967295,'\0','\0'),(9987,'Griaila',255,65535,65535,4294967295,'\0','\0'),(9988,'Zepeeyoeri',255,65535,65535,4294967295,'\0','\0'),(9989,'Hanaeiim',255,65535,65535,4294967295,'\0','\0'),(9990,'Arpatado',255,65535,65535,4294967295,'\0','\0'),(9991,'Aelinplucy',255,65535,65535,4294967295,'\0','\0'),(9992,'Ooertyge',255,65535,65535,4294967295,'\0','\0'),(9993,'Ayiestnei',255,65535,65535,4294967295,'\0','\0'),(9994,'Acyniilpa',255,65535,65535,4294967295,'\0','\0'),(9995,'Estosumeaz',255,65535,65535,4294967295,'\0','\0'),(9996,'Orda',255,65535,65535,4294967295,'\0','\0'),(9997,'Erufgaiza',255,65535,65535,4294967295,'\0','\0'),(9998,'Eofyhoea',255,65535,65535,4294967295,'\0','\0'),(9999,'Trarecyeko',255,65535,65535,4294967295,'\0','\0'),(10000,'Ciei',255,65535,65535,4294967295,'\0','\0');
+
+/*Table structure for table `ai_playerbot_random_bots` */
+
+DROP TABLE IF EXISTS `ai_playerbot_random_bots`;
+
+CREATE TABLE `ai_playerbot_random_bots` (
+  `id` bigint(20) NOT NULL AUTO_INCREMENT,
+  `owner` bigint(20) NOT NULL,
+  `bot` bigint(20) NOT NULL,
+  `time` bigint(20) NOT NULL,
+  `validIn` bigint(20) DEFAULT NULL,
+  `event` varchar(45) DEFAULT NULL,
+  `value` bigint(20) DEFAULT NULL,
+  `data` varchar(255) DEFAULT NULL,
+  PRIMARY KEY (`id`),
+  KEY `owner` (`owner`),
+  KEY `bot` (`bot`),
+  KEY `event` (`event`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+/*Data for the table `ai_playerbot_random_bots` */
+
+/*Table structure for table `arena_team` */
+
+DROP TABLE IF EXISTS `arena_team`;
+
+CREATE TABLE `arena_team` (
+  `arenaTeamId` int(10) unsigned NOT NULL DEFAULT '0',
+  `name` varchar(24) NOT NULL,
+  `captainGuid` int(10) unsigned NOT NULL DEFAULT '0',
+  `type` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `rating` smallint(5) unsigned NOT NULL DEFAULT '0',
+  `seasonGames` smallint(5) unsigned NOT NULL DEFAULT '0',
+  `seasonWins` smallint(5) unsigned NOT NULL DEFAULT '0',
+  `weekGames` smallint(5) unsigned NOT NULL DEFAULT '0',
+  `weekWins` smallint(5) unsigned NOT NULL DEFAULT '0',
+  `rank` int(10) unsigned NOT NULL DEFAULT '0',
+  `backgroundColor` int(10) unsigned NOT NULL DEFAULT '0',
+  `emblemStyle` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `emblemColor` int(10) unsigned NOT NULL DEFAULT '0',
+  `borderStyle` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `borderColor` int(10) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`arenaTeamId`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+/*Data for the table `arena_team` */
+
+/*Table structure for table `arena_team_member` */
+
+DROP TABLE IF EXISTS `arena_team_member`;
+
+CREATE TABLE `arena_team_member` (
+  `arenaTeamId` int(10) unsigned NOT NULL DEFAULT '0',
+  `guid` int(10) unsigned NOT NULL DEFAULT '0',
+  `weekGames` smallint(5) unsigned NOT NULL DEFAULT '0',
+  `weekWins` smallint(5) unsigned NOT NULL DEFAULT '0',
+  `seasonGames` smallint(5) unsigned NOT NULL DEFAULT '0',
+  `seasonWins` smallint(5) unsigned NOT NULL DEFAULT '0',
+  `personalRating` smallint(5) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`arenaTeamId`,`guid`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+/*Data for the table `arena_team_member` */
+
+/*Table structure for table `auctionhouse` */
+
+DROP TABLE IF EXISTS `auctionhouse`;
+
+CREATE TABLE `auctionhouse` (
+  `id` int(10) unsigned NOT NULL DEFAULT '0',
+  `houseid` tinyint(3) unsigned NOT NULL DEFAULT '7',
+  `itemguid` int(10) unsigned NOT NULL DEFAULT '0',
+  `itemowner` int(10) unsigned NOT NULL DEFAULT '0',
+  `buyoutprice` int(10) unsigned NOT NULL DEFAULT '0',
+  `time` int(10) unsigned NOT NULL DEFAULT '0',
+  `buyguid` int(10) unsigned NOT NULL DEFAULT '0',
+  `lastbid` int(10) unsigned NOT NULL DEFAULT '0',
+  `startbid` int(10) unsigned NOT NULL DEFAULT '0',
+  `deposit` int(10) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`id`),
+  UNIQUE KEY `item_guid` (`itemguid`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+/*Data for the table `auctionhouse` */
+
+/*Table structure for table `banned_addons` */
+
+DROP TABLE IF EXISTS `banned_addons`;
+
+CREATE TABLE `banned_addons` (
+  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
+  `Name` varchar(255) NOT NULL,
+  `Version` varchar(255) NOT NULL DEFAULT '',
+  `Timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
+  PRIMARY KEY (`Id`),
+  UNIQUE KEY `idx_name_ver` (`Name`,`Version`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+/*Data for the table `banned_addons` */
+
+/*Table structure for table `battleground_deserters` */
+
+DROP TABLE IF EXISTS `battleground_deserters`;
+
+CREATE TABLE `battleground_deserters` (
+  `guid` int(10) unsigned NOT NULL COMMENT 'characters.guid',
+  `type` tinyint(3) unsigned NOT NULL COMMENT 'type of the desertion',
+  `datetime` datetime NOT NULL COMMENT 'datetime of the desertion'
+) ENGINE=InnoDB DEFAULT CHARSET=latin1;
+
+/*Data for the table `battleground_deserters` */
+
+/*Table structure for table `bugreport` */
+
+DROP TABLE IF EXISTS `bugreport`;
+
+CREATE TABLE `bugreport` (
+  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'Identifier',
+  `type` longtext NOT NULL,
+  `content` longtext NOT NULL,
+  PRIMARY KEY (`id`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Debug System';
+
+/*Data for the table `bugreport` */
+
+/*Table structure for table `calendar_events` */
+
+DROP TABLE IF EXISTS `calendar_events`;
+
+CREATE TABLE `calendar_events` (
+  `id` bigint(20) unsigned NOT NULL DEFAULT '0',
+  `creator` int(10) unsigned NOT NULL DEFAULT '0',
+  `title` varchar(255) NOT NULL DEFAULT '',
+  `description` varchar(255) NOT NULL DEFAULT '',
+  `type` tinyint(1) unsigned NOT NULL DEFAULT '4',
+  `dungeon` int(10) NOT NULL DEFAULT '-1',
+  `eventtime` int(10) unsigned NOT NULL DEFAULT '0',
+  `flags` int(10) unsigned NOT NULL DEFAULT '0',
+  `time2` int(10) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`id`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+/*Data for the table `calendar_events` */
+
+/*Table structure for table `calendar_invites` */
+
+DROP TABLE IF EXISTS `calendar_invites`;
+
+CREATE TABLE `calendar_invites` (
+  `id` bigint(20) unsigned NOT NULL DEFAULT '0',
+  `event` bigint(20) unsigned NOT NULL DEFAULT '0',
+  `invitee` int(10) unsigned NOT NULL DEFAULT '0',
+  `sender` int(10) unsigned NOT NULL DEFAULT '0',
+  `status` tinyint(1) unsigned NOT NULL DEFAULT '0',
+  `statustime` int(10) unsigned NOT NULL DEFAULT '0',
+  `rank` tinyint(1) unsigned NOT NULL DEFAULT '0',
+  `text` varchar(255) NOT NULL DEFAULT '',
+  PRIMARY KEY (`id`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+/*Data for the table `calendar_invites` */
+
+/*Table structure for table `channels` */
+
+DROP TABLE IF EXISTS `channels`;
+
+CREATE TABLE `channels` (
+  `name` varchar(128) NOT NULL,
+  `team` int(10) unsigned NOT NULL,
+  `announce` tinyint(3) unsigned NOT NULL DEFAULT '1',
+  `ownership` tinyint(3) unsigned NOT NULL DEFAULT '1',
+  `password` varchar(32) DEFAULT NULL,
+  `bannedList` text,
+  `lastUsed` int(10) unsigned NOT NULL,
+  PRIMARY KEY (`name`,`team`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Channel System';
+
+/*Data for the table `channels` */
+
+/*Table structure for table `character_account_data` */
+
+DROP TABLE IF EXISTS `character_account_data`;
+
+CREATE TABLE `character_account_data` (
+  `guid` int(10) unsigned NOT NULL DEFAULT '0',
+  `type` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `time` int(10) unsigned NOT NULL DEFAULT '0',
+  `data` blob NOT NULL,
+  PRIMARY KEY (`guid`,`type`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+/*Data for the table `character_account_data` */
+
+/*Table structure for table `character_achievement` */
+
+DROP TABLE IF EXISTS `character_achievement`;
+
+CREATE TABLE `character_achievement` (
+  `guid` int(10) unsigned NOT NULL,
+  `achievement` smallint(5) unsigned NOT NULL,
+  `date` int(10) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`guid`,`achievement`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+/*Data for the table `character_achievement` */
+
+/*Table structure for table `character_achievement_progress` */
+
+DROP TABLE IF EXISTS `character_achievement_progress`;
+
+CREATE TABLE `character_achievement_progress` (
+  `guid` int(10) unsigned NOT NULL,
+  `criteria` smallint(5) unsigned NOT NULL,
+  `counter` int(10) unsigned NOT NULL,
+  `date` int(10) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`guid`,`criteria`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+/*Data for the table `character_achievement_progress` */
+
+/*Table structure for table `character_action` */
+
+DROP TABLE IF EXISTS `character_action`;
+
+CREATE TABLE `character_action` (
+  `guid` int(10) unsigned NOT NULL DEFAULT '0',
+  `spec` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `button` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `action` int(10) unsigned NOT NULL DEFAULT '0',
+  `type` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`guid`,`spec`,`button`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+/*Data for the table `character_action` */
+
+/*Table structure for table `character_arena_stats` */
+
+DROP TABLE IF EXISTS `character_arena_stats`;
+
+CREATE TABLE `character_arena_stats` (
+  `guid` int(10) NOT NULL,
+  `slot` tinyint(3) NOT NULL,
+  `matchMakerRating` smallint(5) NOT NULL,
+  PRIMARY KEY (`guid`,`slot`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+/*Data for the table `character_arena_stats` */
+
+/*Table structure for table `character_aura` */
+
+DROP TABLE IF EXISTS `character_aura`;
+
+CREATE TABLE `character_aura` (
+  `guid` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Global Unique Identifier',
+  `casterGuid` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT 'Full Global Unique Identifier',
+  `itemGuid` bigint(20) unsigned NOT NULL DEFAULT '0',
+  `spell` mediumint(8) unsigned NOT NULL DEFAULT '0',
+  `effectMask` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `recalculateMask` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `stackCount` tinyint(3) unsigned NOT NULL DEFAULT '1',
+  `amount0` int(11) NOT NULL DEFAULT '0',
+  `amount1` int(11) NOT NULL DEFAULT '0',
+  `amount2` int(11) NOT NULL DEFAULT '0',
+  `base_amount0` int(11) NOT NULL DEFAULT '0',
+  `base_amount1` int(11) NOT NULL DEFAULT '0',
+  `base_amount2` int(11) NOT NULL DEFAULT '0',
+  `maxDuration` int(11) NOT NULL DEFAULT '0',
+  `remainTime` int(11) NOT NULL DEFAULT '0',
+  `remainCharges` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`guid`,`casterGuid`,`itemGuid`,`spell`,`effectMask`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Player System';
+
+/*Data for the table `character_aura` */
+
+/*Table structure for table `character_banned` */
+
+DROP TABLE IF EXISTS `character_banned`;
+
+CREATE TABLE `character_banned` (
+  `guid` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Global Unique Identifier',
+  `bandate` int(10) unsigned NOT NULL DEFAULT '0',
+  `unbandate` int(10) unsigned NOT NULL DEFAULT '0',
+  `bannedby` varchar(50) NOT NULL,
+  `banreason` varchar(255) NOT NULL,
+  `active` tinyint(3) unsigned NOT NULL DEFAULT '1',
+  PRIMARY KEY (`guid`,`bandate`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Ban List';
+
+/*Data for the table `character_banned` */
+
+/*Table structure for table `character_battleground_data` */
+
+DROP TABLE IF EXISTS `character_battleground_data`;
+
+CREATE TABLE `character_battleground_data` (
+  `guid` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Global Unique Identifier',
+  `instanceId` int(10) unsigned NOT NULL COMMENT 'Instance Identifier',
+  `team` smallint(5) unsigned NOT NULL,
+  `joinX` float NOT NULL DEFAULT '0',
+  `joinY` float NOT NULL DEFAULT '0',
+  `joinZ` float NOT NULL DEFAULT '0',
+  `joinO` float NOT NULL DEFAULT '0',
+  `joinMapId` smallint(5) unsigned NOT NULL DEFAULT '0' COMMENT 'Map Identifier',
+  `taxiStart` int(10) unsigned NOT NULL DEFAULT '0',
+  `taxiEnd` int(10) unsigned NOT NULL DEFAULT '0',
+  `mountSpell` mediumint(8) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`guid`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Player System';
+
+/*Data for the table `character_battleground_data` */
+
+/*Table structure for table `character_battleground_random` */
+
+DROP TABLE IF EXISTS `character_battleground_random`;
+
+CREATE TABLE `character_battleground_random` (
+  `guid` int(10) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`guid`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+/*Data for the table `character_battleground_random` */
+
+/*Table structure for table `character_declinedname` */
+
+DROP TABLE IF EXISTS `character_declinedname`;
+
+CREATE TABLE `character_declinedname` (
+  `guid` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Global Unique Identifier',
+  `genitive` varchar(15) NOT NULL DEFAULT '',
+  `dative` varchar(15) NOT NULL DEFAULT '',
+  `accusative` varchar(15) NOT NULL DEFAULT '',
+  `instrumental` varchar(15) NOT NULL DEFAULT '',
+  `prepositional` varchar(15) NOT NULL DEFAULT '',
+  PRIMARY KEY (`guid`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+/*Data for the table `character_declinedname` */
+
+/*Table structure for table `character_equipmentsets` */
+
+DROP TABLE IF EXISTS `character_equipmentsets`;
+
+CREATE TABLE `character_equipmentsets` (
+  `guid` int(10) NOT NULL DEFAULT '0',
+  `setguid` bigint(20) NOT NULL AUTO_INCREMENT,
+  `setindex` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `name` varchar(31) NOT NULL,
+  `iconname` varchar(100) NOT NULL,
+  `ignore_mask` int(11) unsigned NOT NULL DEFAULT '0',
+  `item0` int(11) unsigned NOT NULL DEFAULT '0',
+  `item1` int(11) unsigned NOT NULL DEFAULT '0',
+  `item2` int(11) unsigned NOT NULL DEFAULT '0',
+  `item3` int(11) unsigned NOT NULL DEFAULT '0',
+  `item4` int(11) unsigned NOT NULL DEFAULT '0',
+  `item5` int(11) unsigned NOT NULL DEFAULT '0',
+  `item6` int(11) unsigned NOT NULL DEFAULT '0',
+  `item7` int(11) unsigned NOT NULL DEFAULT '0',
+  `item8` int(11) unsigned NOT NULL DEFAULT '0',
+  `item9` int(11) unsigned NOT NULL DEFAULT '0',
+  `item10` int(11) unsigned NOT NULL DEFAULT '0',
+  `item11` int(11) unsigned NOT NULL DEFAULT '0',
+  `item12` int(11) unsigned NOT NULL DEFAULT '0',
+  `item13` int(11) unsigned NOT NULL DEFAULT '0',
+  `item14` int(11) unsigned NOT NULL DEFAULT '0',
+  `item15` int(11) unsigned NOT NULL DEFAULT '0',
+  `item16` int(11) unsigned NOT NULL DEFAULT '0',
+  `item17` int(11) unsigned NOT NULL DEFAULT '0',
+  `item18` int(11) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`setguid`),
+  UNIQUE KEY `idx_set` (`guid`,`setguid`,`setindex`),
+  KEY `Idx_setindex` (`setindex`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+/*Data for the table `character_equipmentsets` */
+
+/*Table structure for table `character_gifts` */
+
+DROP TABLE IF EXISTS `character_gifts`;
+
+CREATE TABLE `character_gifts` (
+  `guid` int(10) unsigned NOT NULL DEFAULT '0',
+  `item_guid` int(10) unsigned NOT NULL DEFAULT '0',
+  `entry` int(10) unsigned NOT NULL DEFAULT '0',
+  `flags` int(10) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`item_guid`),
+  KEY `idx_guid` (`guid`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+/*Data for the table `character_gifts` */
+
+/*Table structure for table `character_glyphs` */
+
+DROP TABLE IF EXISTS `character_glyphs`;
+
+CREATE TABLE `character_glyphs` (
+  `guid` int(10) unsigned NOT NULL,
+  `talentGroup` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `glyph1` smallint(5) unsigned DEFAULT '0',
+  `glyph2` smallint(5) unsigned DEFAULT '0',
+  `glyph3` smallint(5) unsigned DEFAULT '0',
+  `glyph4` smallint(5) unsigned DEFAULT '0',
+  `glyph5` smallint(5) unsigned DEFAULT '0',
+  `glyph6` smallint(5) unsigned DEFAULT '0',
+  PRIMARY KEY (`guid`,`talentGroup`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+/*Data for the table `character_glyphs` */
+
+/*Table structure for table `character_homebind` */
+
+DROP TABLE IF EXISTS `character_homebind`;
+
+CREATE TABLE `character_homebind` (
+  `guid` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Global Unique Identifier',
+  `mapId` smallint(5) unsigned NOT NULL DEFAULT '0' COMMENT 'Map Identifier',
+  `zoneId` smallint(5) unsigned NOT NULL DEFAULT '0' COMMENT 'Zone Identifier',
+  `posX` float NOT NULL DEFAULT '0',
+  `posY` float NOT NULL DEFAULT '0',
+  `posZ` float NOT NULL DEFAULT '0',
+  PRIMARY KEY (`guid`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Player System';
+
+/*Data for the table `character_homebind` */
+
+/*Table structure for table `character_instance` */
+
+DROP TABLE IF EXISTS `character_instance`;
+
+CREATE TABLE `character_instance` (
+  `guid` int(10) unsigned NOT NULL DEFAULT '0',
+  `instance` int(10) unsigned NOT NULL DEFAULT '0',
+  `permanent` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`guid`,`instance`),
+  KEY `instance` (`instance`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+/*Data for the table `character_instance` */
+
+/*Table structure for table `character_inventory` */
+
+DROP TABLE IF EXISTS `character_inventory`;
+
+CREATE TABLE `character_inventory` (
+  `guid` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Global Unique Identifier',
+  `bag` int(10) unsigned NOT NULL DEFAULT '0',
+  `slot` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `item` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Item Global Unique Identifier',
+  PRIMARY KEY (`item`),
+  UNIQUE KEY `guid` (`guid`,`bag`,`slot`),
+  KEY `idx_guid` (`guid`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Player System';
+
+/*Data for the table `character_inventory` */
+
+/*Table structure for table `character_pet` */
+
+DROP TABLE IF EXISTS `character_pet`;
+
+CREATE TABLE `character_pet` (
+  `id` int(10) unsigned NOT NULL DEFAULT '0',
+  `entry` int(10) unsigned NOT NULL DEFAULT '0',
+  `owner` int(10) unsigned NOT NULL DEFAULT '0',
+  `modelid` int(10) unsigned DEFAULT '0',
+  `CreatedBySpell` mediumint(8) unsigned NOT NULL DEFAULT '0',
+  `PetType` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `level` smallint(5) unsigned NOT NULL DEFAULT '1',
+  `exp` int(10) unsigned NOT NULL DEFAULT '0',
+  `Reactstate` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `name` varchar(21) NOT NULL DEFAULT 'Pet',
+  `renamed` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `slot` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `curhealth` int(10) unsigned NOT NULL DEFAULT '1',
+  `curmana` int(10) unsigned NOT NULL DEFAULT '0',
+  `curhappiness` int(10) unsigned NOT NULL DEFAULT '0',
+  `savetime` int(10) unsigned NOT NULL DEFAULT '0',
+  `abdata` text,
+  PRIMARY KEY (`id`),
+  KEY `owner` (`owner`),
+  KEY `idx_slot` (`slot`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Pet System';
+
+/*Data for the table `character_pet` */
+
+/*Table structure for table `character_pet_declinedname` */
+
+DROP TABLE IF EXISTS `character_pet_declinedname`;
+
+CREATE TABLE `character_pet_declinedname` (
+  `id` int(10) unsigned NOT NULL DEFAULT '0',
+  `owner` int(10) unsigned NOT NULL DEFAULT '0',
+  `genitive` varchar(12) NOT NULL DEFAULT '',
+  `dative` varchar(12) NOT NULL DEFAULT '',
+  `accusative` varchar(12) NOT NULL DEFAULT '',
+  `instrumental` varchar(12) NOT NULL DEFAULT '',
+  `prepositional` varchar(12) NOT NULL DEFAULT '',
+  PRIMARY KEY (`id`),
+  KEY `owner_key` (`owner`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+/*Data for the table `character_pet_declinedname` */
+
+/*Table structure for table `character_queststatus` */
+
+DROP TABLE IF EXISTS `character_queststatus`;
+
+CREATE TABLE `character_queststatus` (
+  `guid` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Global Unique Identifier',
+  `quest` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Quest Identifier',
+  `status` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `explored` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `timer` int(10) unsigned NOT NULL DEFAULT '0',
+  `mobcount1` smallint(5) unsigned NOT NULL DEFAULT '0',
+  `mobcount2` smallint(5) unsigned NOT NULL DEFAULT '0',
+  `mobcount3` smallint(5) unsigned NOT NULL DEFAULT '0',
+  `mobcount4` smallint(5) unsigned NOT NULL DEFAULT '0',
+  `itemcount1` smallint(5) unsigned NOT NULL DEFAULT '0',
+  `itemcount2` smallint(5) unsigned NOT NULL DEFAULT '0',
+  `itemcount3` smallint(5) unsigned NOT NULL DEFAULT '0',
+  `itemcount4` smallint(5) unsigned NOT NULL DEFAULT '0',
+  `playercount` smallint(5) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`guid`,`quest`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Player System';
+
+/*Data for the table `character_queststatus` */
+
+/*Table structure for table `character_queststatus_daily` */
+
+DROP TABLE IF EXISTS `character_queststatus_daily`;
+
+CREATE TABLE `character_queststatus_daily` (
+  `guid` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Global Unique Identifier',
+  `quest` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Quest Identifier',
+  `time` int(10) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`guid`,`quest`),
+  KEY `idx_guid` (`guid`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Player System';
+
+/*Data for the table `character_queststatus_daily` */
+
+/*Table structure for table `character_queststatus_monthly` */
+
+DROP TABLE IF EXISTS `character_queststatus_monthly`;
+
+CREATE TABLE `character_queststatus_monthly` (
+  `guid` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Global Unique Identifier',
+  `quest` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Quest Identifier',
+  PRIMARY KEY (`guid`,`quest`),
+  KEY `idx_guid` (`guid`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Player System';
+
+/*Data for the table `character_queststatus_monthly` */
+
+/*Table structure for table `character_queststatus_rewarded` */
+
+DROP TABLE IF EXISTS `character_queststatus_rewarded`;
+
+CREATE TABLE `character_queststatus_rewarded` (
+  `guid` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Global Unique Identifier',
+  `quest` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Quest Identifier',
+  `active` tinyint(10) unsigned NOT NULL DEFAULT '1',
+  PRIMARY KEY (`guid`,`quest`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Player System';
+
+/*Data for the table `character_queststatus_rewarded` */
+
+/*Table structure for table `character_queststatus_seasonal` */
+
+DROP TABLE IF EXISTS `character_queststatus_seasonal`;
+
+CREATE TABLE `character_queststatus_seasonal` (
+  `guid` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Global Unique Identifier',
+  `quest` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Quest Identifier',
+  `event` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Event Identifier',
+  PRIMARY KEY (`guid`,`quest`),
+  KEY `idx_guid` (`guid`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Player System';
+
+/*Data for the table `character_queststatus_seasonal` */
+
+/*Table structure for table `character_queststatus_weekly` */
+
+DROP TABLE IF EXISTS `character_queststatus_weekly`;
+
+CREATE TABLE `character_queststatus_weekly` (
+  `guid` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Global Unique Identifier',
+  `quest` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Quest Identifier',
+  PRIMARY KEY (`guid`,`quest`),
+  KEY `idx_guid` (`guid`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Player System';
+
+/*Data for the table `character_queststatus_weekly` */
+
+/*Table structure for table `character_reputation` */
+
+DROP TABLE IF EXISTS `character_reputation`;
+
+CREATE TABLE `character_reputation` (
+  `guid` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Global Unique Identifier',
+  `faction` smallint(5) unsigned NOT NULL DEFAULT '0',
+  `standing` int(11) NOT NULL DEFAULT '0',
+  `flags` smallint(5) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`guid`,`faction`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Player System';
+
+/*Data for the table `character_reputation` */
+
+/*Table structure for table `character_skills` */
+
+DROP TABLE IF EXISTS `character_skills`;
+
+CREATE TABLE `character_skills` (
+  `guid` int(10) unsigned NOT NULL COMMENT 'Global Unique Identifier',
+  `skill` smallint(5) unsigned NOT NULL,
+  `value` smallint(5) unsigned NOT NULL,
+  `max` smallint(5) unsigned NOT NULL,
+  PRIMARY KEY (`guid`,`skill`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Player System';
+
+/*Data for the table `character_skills` */
+
+/*Table structure for table `character_social` */
+
+DROP TABLE IF EXISTS `character_social`;
+
+CREATE TABLE `character_social` (
+  `guid` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Character Global Unique Identifier',
+  `friend` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Friend Global Unique Identifier',
+  `flags` tinyint(3) unsigned NOT NULL DEFAULT '0' COMMENT 'Friend Flags',
+  `note` varchar(48) NOT NULL DEFAULT '' COMMENT 'Friend Note',
+  PRIMARY KEY (`guid`,`friend`,`flags`),
+  KEY `friend` (`friend`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Player System';
+
+/*Data for the table `character_social` */
+
+/*Table structure for table `character_spell` */
+
+DROP TABLE IF EXISTS `character_spell`;
+
+CREATE TABLE `character_spell` (
+  `guid` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Global Unique Identifier',
+  `spell` mediumint(8) unsigned NOT NULL DEFAULT '0' COMMENT 'Spell Identifier',
+  `active` tinyint(3) unsigned NOT NULL DEFAULT '1',
+  `disabled` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`guid`,`spell`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Player System';
+
+/*Data for the table `character_spell` */
+
+/*Table structure for table `character_spell_cooldown` */
+
+DROP TABLE IF EXISTS `character_spell_cooldown`;
+
+CREATE TABLE `character_spell_cooldown` (
+  `guid` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Global Unique Identifier, Low part',
+  `spell` mediumint(8) unsigned NOT NULL DEFAULT '0' COMMENT 'Spell Identifier',
+  `item` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Item Identifier',
+  `time` int(10) unsigned NOT NULL DEFAULT '0',
+  `categoryId` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Spell category Id',
+  `categoryEnd` int(10) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`guid`,`spell`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+/*Data for the table `character_spell_cooldown` */
+
+/*Table structure for table `character_stats` */
+
+DROP TABLE IF EXISTS `character_stats`;
+
+CREATE TABLE `character_stats` (
+  `guid` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Global Unique Identifier, Low part',
+  `maxhealth` int(10) unsigned NOT NULL DEFAULT '0',
+  `maxpower1` int(10) unsigned NOT NULL DEFAULT '0',
+  `maxpower2` int(10) unsigned NOT NULL DEFAULT '0',
+  `maxpower3` int(10) unsigned NOT NULL DEFAULT '0',
+  `maxpower4` int(10) unsigned NOT NULL DEFAULT '0',
+  `maxpower5` int(10) unsigned NOT NULL DEFAULT '0',
+  `maxpower6` int(10) unsigned NOT NULL DEFAULT '0',
+  `maxpower7` int(10) unsigned NOT NULL DEFAULT '0',
+  `strength` int(10) unsigned NOT NULL DEFAULT '0',
+  `agility` int(10) unsigned NOT NULL DEFAULT '0',
+  `stamina` int(10) unsigned NOT NULL DEFAULT '0',
+  `intellect` int(10) unsigned NOT NULL DEFAULT '0',
+  `spirit` int(10) unsigned NOT NULL DEFAULT '0',
+  `armor` int(10) unsigned NOT NULL DEFAULT '0',
+  `resHoly` int(10) unsigned NOT NULL DEFAULT '0',
+  `resFire` int(10) unsigned NOT NULL DEFAULT '0',
+  `resNature` int(10) unsigned NOT NULL DEFAULT '0',
+  `resFrost` int(10) unsigned NOT NULL DEFAULT '0',
+  `resShadow` int(10) unsigned NOT NULL DEFAULT '0',
+  `resArcane` int(10) unsigned NOT NULL DEFAULT '0',
+  `blockPct` float unsigned NOT NULL DEFAULT '0',
+  `dodgePct` float unsigned NOT NULL DEFAULT '0',
+  `parryPct` float unsigned NOT NULL DEFAULT '0',
+  `critPct` float unsigned NOT NULL DEFAULT '0',
+  `rangedCritPct` float unsigned NOT NULL DEFAULT '0',
+  `spellCritPct` float unsigned NOT NULL DEFAULT '0',
+  `attackPower` int(10) unsigned NOT NULL DEFAULT '0',
+  `rangedAttackPower` int(10) unsigned NOT NULL DEFAULT '0',
+  `spellPower` int(10) unsigned NOT NULL DEFAULT '0',
+  `resilience` int(10) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`guid`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+/*Data for the table `character_stats` */
+
+/*Table structure for table `character_talent` */
+
+DROP TABLE IF EXISTS `character_talent`;
+
+CREATE TABLE `character_talent` (
+  `guid` int(10) unsigned NOT NULL,
+  `spell` mediumint(8) unsigned NOT NULL,
+  `talentGroup` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`guid`,`spell`,`talentGroup`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+/*Data for the table `character_talent` */
+
+/*Table structure for table `characters` */
+
+DROP TABLE IF EXISTS `characters`;
+
+CREATE TABLE `characters` (
+  `guid` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Global Unique Identifier',
+  `account` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Account Identifier',
+  `name` varchar(12) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
+  `race` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `class` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `gender` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `level` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `xp` int(10) unsigned NOT NULL DEFAULT '0',
+  `money` int(10) unsigned NOT NULL DEFAULT '0',
+  `playerBytes` int(10) unsigned NOT NULL DEFAULT '0',
+  `playerBytes2` int(10) unsigned NOT NULL DEFAULT '0',
+  `playerFlags` int(10) unsigned NOT NULL DEFAULT '0',
+  `position_x` float NOT NULL DEFAULT '0',
+  `position_y` float NOT NULL DEFAULT '0',
+  `position_z` float NOT NULL DEFAULT '0',
+  `map` smallint(5) unsigned NOT NULL DEFAULT '0' COMMENT 'Map Identifier',
+  `instance_id` int(10) unsigned NOT NULL DEFAULT '0',
+  `instance_mode_mask` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `orientation` float NOT NULL DEFAULT '0',
+  `taximask` text NOT NULL,
+  `online` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `cinematic` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `totaltime` int(10) unsigned NOT NULL DEFAULT '0',
+  `leveltime` int(10) unsigned NOT NULL DEFAULT '0',
+  `logout_time` int(10) unsigned NOT NULL DEFAULT '0',
+  `is_logout_resting` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `rest_bonus` float NOT NULL DEFAULT '0',
+  `resettalents_cost` int(10) unsigned NOT NULL DEFAULT '0',
+  `resettalents_time` int(10) unsigned NOT NULL DEFAULT '0',
+  `trans_x` float NOT NULL DEFAULT '0',
+  `trans_y` float NOT NULL DEFAULT '0',
+  `trans_z` float NOT NULL DEFAULT '0',
+  `trans_o` float NOT NULL DEFAULT '0',
+  `transguid` mediumint(8) unsigned NOT NULL DEFAULT '0',
+  `extra_flags` smallint(5) unsigned NOT NULL DEFAULT '0',
+  `stable_slots` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `at_login` smallint(5) unsigned NOT NULL DEFAULT '0',
+  `zone` smallint(5) unsigned NOT NULL DEFAULT '0',
+  `death_expire_time` int(10) unsigned NOT NULL DEFAULT '0',
+  `taxi_path` text,
+  `arenaPoints` int(10) unsigned NOT NULL DEFAULT '0',
+  `totalHonorPoints` int(10) unsigned NOT NULL DEFAULT '0',
+  `todayHonorPoints` int(10) unsigned NOT NULL DEFAULT '0',
+  `yesterdayHonorPoints` int(10) unsigned NOT NULL DEFAULT '0',
+  `totalKills` int(10) unsigned NOT NULL DEFAULT '0',
+  `todayKills` smallint(5) unsigned NOT NULL DEFAULT '0',
+  `yesterdayKills` smallint(5) unsigned NOT NULL DEFAULT '0',
+  `chosenTitle` int(10) unsigned NOT NULL DEFAULT '0',
+  `knownCurrencies` bigint(20) unsigned NOT NULL DEFAULT '0',
+  `watchedFaction` int(10) unsigned NOT NULL DEFAULT '0',
+  `drunk` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `health` int(10) unsigned NOT NULL DEFAULT '0',
+  `power1` int(10) unsigned NOT NULL DEFAULT '0',
+  `power2` int(10) unsigned NOT NULL DEFAULT '0',
+  `power3` int(10) unsigned NOT NULL DEFAULT '0',
+  `power4` int(10) unsigned NOT NULL DEFAULT '0',
+  `power5` int(10) unsigned NOT NULL DEFAULT '0',
+  `power6` int(10) unsigned NOT NULL DEFAULT '0',
+  `power7` int(10) unsigned NOT NULL DEFAULT '0',
+  `latency` mediumint(8) unsigned NOT NULL DEFAULT '0',
+  `talentGroupsCount` tinyint(3) unsigned NOT NULL DEFAULT '1',
+  `activeTalentGroup` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `exploredZones` longtext,
+  `equipmentCache` longtext,
+  `ammoId` int(10) unsigned NOT NULL DEFAULT '0',
+  `knownTitles` longtext,
+  `actionBars` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `grantableLevels` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `deleteInfos_Account` int(10) unsigned DEFAULT NULL,
+  `deleteInfos_Name` varchar(12) DEFAULT NULL,
+  `deleteDate` int(10) unsigned DEFAULT NULL,
+  PRIMARY KEY (`guid`),
+  KEY `idx_account` (`account`),
+  KEY `idx_online` (`online`),
+  KEY `idx_name` (`name`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Player System';
+
+/*Data for the table `characters` */
+
+/*Table structure for table `characters_npcbot` */
+
+DROP TABLE IF EXISTS `characters_npcbot`;
+
+CREATE TABLE `characters_npcbot` (
+  `entry` int(10) unsigned NOT NULL COMMENT 'creature_template.entry',
+  `owner` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'characters.guid (lowguid)',
+  `roles` tinyint(3) unsigned NOT NULL COMMENT 'bitmask: tank(1),dps(2),heal(4),ranged(8)',
+  `faction` int(10) unsigned NOT NULL DEFAULT '14',
+  `equipMhEx` int(10) unsigned NOT NULL DEFAULT '0',
+  `equipOhEx` int(10) unsigned NOT NULL DEFAULT '0',
+  `equipRhEx` int(10) unsigned NOT NULL DEFAULT '0',
+  `equipHead` int(10) unsigned NOT NULL DEFAULT '0',
+  `equipShoulders` int(10) unsigned NOT NULL DEFAULT '0',
+  `equipChest` int(10) unsigned NOT NULL DEFAULT '0',
+  `equipWaist` int(10) unsigned NOT NULL DEFAULT '0',
+  `equipLegs` int(10) unsigned NOT NULL DEFAULT '0',
+  `equipFeet` int(10) unsigned NOT NULL DEFAULT '0',
+  `equipWrist` int(10) unsigned NOT NULL DEFAULT '0',
+  `equipHands` int(10) unsigned NOT NULL DEFAULT '0',
+  `equipBack` int(10) unsigned NOT NULL DEFAULT '0',
+  `equipBody` int(10) unsigned NOT NULL DEFAULT '0',
+  `equipFinger1` int(10) unsigned NOT NULL DEFAULT '0',
+  `equipFinger2` int(10) unsigned NOT NULL DEFAULT '0',
+  `equipTrinket1` int(10) unsigned NOT NULL DEFAULT '0',
+  `equipTrinket2` int(10) unsigned NOT NULL DEFAULT '0',
+  `equipNeck` int(10) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`entry`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+/*Data for the table `characters_npcbot` */
+
+/*Table structure for table `corpse` */
+
+DROP TABLE IF EXISTS `corpse`;
+
+CREATE TABLE `corpse` (
+  `guid` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Character Global Unique Identifier',
+  `posX` float NOT NULL DEFAULT '0',
+  `posY` float NOT NULL DEFAULT '0',
+  `posZ` float NOT NULL DEFAULT '0',
+  `orientation` float NOT NULL DEFAULT '0',
+  `mapId` smallint(5) unsigned NOT NULL DEFAULT '0' COMMENT 'Map Identifier',
+  `phaseMask` int(10) unsigned NOT NULL DEFAULT '1',
+  `displayId` int(10) unsigned NOT NULL DEFAULT '0',
+  `itemCache` text NOT NULL,
+  `bytes1` int(10) unsigned NOT NULL DEFAULT '0',
+  `bytes2` int(10) unsigned NOT NULL DEFAULT '0',
+  `guildId` int(10) unsigned NOT NULL DEFAULT '0',
+  `flags` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `dynFlags` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `time` int(10) unsigned NOT NULL DEFAULT '0',
+  `corpseType` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `instanceId` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Instance Identifier',
+  PRIMARY KEY (`guid`),
+  KEY `idx_type` (`corpseType`),
+  KEY `idx_instance` (`instanceId`),
+  KEY `idx_time` (`time`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Death System';
+
+/*Data for the table `corpse` */
+
+/*Table structure for table `creature_respawn` */
+
+DROP TABLE IF EXISTS `creature_respawn`;
+
+CREATE TABLE `creature_respawn` (
+  `guid` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Global Unique Identifier',
+  `respawnTime` int(10) unsigned NOT NULL DEFAULT '0',
+  `mapId` smallint(10) unsigned NOT NULL DEFAULT '0',
+  `instanceId` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Instance Identifier',
+  PRIMARY KEY (`guid`,`instanceId`),
+  KEY `idx_instance` (`instanceId`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Grid Loading System';
+
+/*Data for the table `creature_respawn` */
+
+/*Table structure for table `game_event_condition_save` */
+
+DROP TABLE IF EXISTS `game_event_condition_save`;
+
+CREATE TABLE `game_event_condition_save` (
+  `eventEntry` tinyint(3) unsigned NOT NULL,
+  `condition_id` int(10) unsigned NOT NULL DEFAULT '0',
+  `done` float DEFAULT '0',
+  PRIMARY KEY (`eventEntry`,`condition_id`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+/*Data for the table `game_event_condition_save` */
+
+/*Table structure for table `game_event_save` */
+
+DROP TABLE IF EXISTS `game_event_save`;
+
+CREATE TABLE `game_event_save` (
+  `eventEntry` tinyint(3) unsigned NOT NULL,
+  `state` tinyint(3) unsigned NOT NULL DEFAULT '1',
+  `next_start` int(10) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`eventEntry`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+/*Data for the table `game_event_save` */
+
+/*Table structure for table `gameobject_respawn` */
+
+DROP TABLE IF EXISTS `gameobject_respawn`;
+
+CREATE TABLE `gameobject_respawn` (
+  `guid` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Global Unique Identifier',
+  `respawnTime` int(10) unsigned NOT NULL DEFAULT '0',
+  `mapId` smallint(10) unsigned NOT NULL DEFAULT '0',
+  `instanceId` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Instance Identifier',
+  PRIMARY KEY (`guid`,`instanceId`),
+  KEY `idx_instance` (`instanceId`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Grid Loading System';
+
+/*Data for the table `gameobject_respawn` */
+
+/*Table structure for table `gm_subsurvey` */
+
+DROP TABLE IF EXISTS `gm_subsurvey`;
+
+CREATE TABLE `gm_subsurvey` (
+  `surveyId` int(10) unsigned NOT NULL AUTO_INCREMENT,
+  `questionId` int(10) unsigned NOT NULL DEFAULT '0',
+  `answer` int(10) unsigned NOT NULL DEFAULT '0',
+  `answerComment` text NOT NULL,
+  PRIMARY KEY (`surveyId`,`questionId`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Player System';
+
+/*Data for the table `gm_subsurvey` */
+
+/*Table structure for table `gm_survey` */
+
+DROP TABLE IF EXISTS `gm_survey`;
+
+CREATE TABLE `gm_survey` (
+  `surveyId` int(10) unsigned NOT NULL AUTO_INCREMENT,
+  `guid` int(10) unsigned NOT NULL DEFAULT '0',
+  `mainSurvey` int(10) unsigned NOT NULL DEFAULT '0',
+  `comment` longtext NOT NULL,
+  `createTime` int(10) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`surveyId`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Player System';
+
+/*Data for the table `gm_survey` */
+
+/*Table structure for table `gm_ticket` */
+
+DROP TABLE IF EXISTS `gm_ticket`;
+
+CREATE TABLE `gm_ticket` (
+  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
+  `type` tinyint(3) unsigned NOT NULL DEFAULT '0' COMMENT '0 open, 1 closed, 2 character deleted',
+  `playerGuid` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Global Unique Identifier of ticket creator',
+  `name` varchar(12) NOT NULL COMMENT 'Name of ticket creator',
+  `description` text NOT NULL,
+  `createTime` int(10) unsigned NOT NULL DEFAULT '0',
+  `mapId` smallint(5) unsigned NOT NULL DEFAULT '0',
+  `posX` float NOT NULL DEFAULT '0',
+  `posY` float NOT NULL DEFAULT '0',
+  `posZ` float NOT NULL DEFAULT '0',
+  `lastModifiedTime` int(10) unsigned NOT NULL DEFAULT '0',
+  `closedBy` int(10) NOT NULL DEFAULT '0',
+  `assignedTo` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'GUID of admin to whom ticket is assigned',
+  `comment` text NOT NULL,
+  `response` text NOT NULL,
+  `completed` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `escalated` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `viewed` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `needMoreHelp` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `resolvedBy` int(10) NOT NULL DEFAULT '0' COMMENT 'GUID of GM who resolved the ticket',
+  PRIMARY KEY (`id`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Player System';
+
+/*Data for the table `gm_ticket` */
+
+/*Table structure for table `group_instance` */
+
+DROP TABLE IF EXISTS `group_instance`;
+
+CREATE TABLE `group_instance` (
+  `guid` int(10) unsigned NOT NULL DEFAULT '0',
+  `instance` int(10) unsigned NOT NULL DEFAULT '0',
+  `permanent` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`guid`,`instance`),
+  KEY `instance` (`instance`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+/*Data for the table `group_instance` */
+
+/*Table structure for table `group_member` */
+
+DROP TABLE IF EXISTS `group_member`;
+
+CREATE TABLE `group_member` (
+  `guid` int(10) unsigned NOT NULL,
+  `memberGuid` int(10) unsigned NOT NULL,
+  `memberFlags` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `subgroup` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `roles` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`memberGuid`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Groups';
+
+/*Data for the table `group_member` */
+
+/*Table structure for table `groups` */
+
+DROP TABLE IF EXISTS `groups`;
+
+CREATE TABLE `groups` (
+  `guid` int(10) unsigned NOT NULL,
+  `leaderGuid` int(10) unsigned NOT NULL,
+  `lootMethod` tinyint(3) unsigned NOT NULL,
+  `looterGuid` int(10) unsigned NOT NULL,
+  `lootThreshold` tinyint(3) unsigned NOT NULL,
+  `icon1` bigint(20) unsigned NOT NULL,
+  `icon2` bigint(20) unsigned NOT NULL,
+  `icon3` bigint(20) unsigned NOT NULL,
+  `icon4` bigint(20) unsigned NOT NULL,
+  `icon5` bigint(20) unsigned NOT NULL,
+  `icon6` bigint(20) unsigned NOT NULL,
+  `icon7` bigint(20) unsigned NOT NULL,
+  `icon8` bigint(20) unsigned NOT NULL,
+  `groupType` tinyint(3) unsigned NOT NULL,
+  `difficulty` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `raidDifficulty` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `masterLooterGuid` int(10) unsigned NOT NULL,
+  PRIMARY KEY (`guid`),
+  KEY `leaderGuid` (`leaderGuid`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Groups';
+
+/*Data for the table `groups` */
+
+/*Table structure for table `guild` */
+
+DROP TABLE IF EXISTS `guild`;
+
+CREATE TABLE `guild` (
+  `guildid` int(10) unsigned NOT NULL DEFAULT '0',
+  `name` varchar(24) NOT NULL DEFAULT '',
+  `leaderguid` int(10) unsigned NOT NULL DEFAULT '0',
+  `EmblemStyle` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `EmblemColor` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `BorderStyle` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `BorderColor` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `BackgroundColor` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `info` varchar(500) NOT NULL DEFAULT '',
+  `motd` varchar(128) NOT NULL DEFAULT '',
+  `createdate` int(10) unsigned NOT NULL DEFAULT '0',
+  `BankMoney` bigint(20) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`guildid`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Guild System';
+
+/*Data for the table `guild` */
+
+/*Table structure for table `guild_bank_eventlog` */
+
+DROP TABLE IF EXISTS `guild_bank_eventlog`;
+
+CREATE TABLE `guild_bank_eventlog` (
+  `guildid` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Guild Identificator',
+  `LogGuid` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Log record identificator - auxiliary column',
+  `TabId` tinyint(3) unsigned NOT NULL DEFAULT '0' COMMENT 'Guild bank TabId',
+  `EventType` tinyint(3) unsigned NOT NULL DEFAULT '0' COMMENT 'Event type',
+  `PlayerGuid` int(10) unsigned NOT NULL DEFAULT '0',
+  `ItemOrMoney` int(10) unsigned NOT NULL DEFAULT '0',
+  `ItemStackCount` smallint(5) unsigned NOT NULL DEFAULT '0',
+  `DestTabId` tinyint(3) unsigned NOT NULL DEFAULT '0' COMMENT 'Destination Tab Id',
+  `TimeStamp` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Event UNIX time',
+  PRIMARY KEY (`guildid`,`LogGuid`,`TabId`),
+  KEY `guildid_key` (`guildid`),
+  KEY `Idx_PlayerGuid` (`PlayerGuid`),
+  KEY `Idx_LogGuid` (`LogGuid`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+/*Data for the table `guild_bank_eventlog` */
+
+/*Table structure for table `guild_bank_item` */
+
+DROP TABLE IF EXISTS `guild_bank_item`;
+
+CREATE TABLE `guild_bank_item` (
+  `guildid` int(10) unsigned NOT NULL DEFAULT '0',
+  `TabId` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `SlotId` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `item_guid` int(10) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`guildid`,`TabId`,`SlotId`),
+  KEY `guildid_key` (`guildid`),
+  KEY `Idx_item_guid` (`item_guid`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+/*Data for the table `guild_bank_item` */
+
+/*Table structure for table `guild_bank_right` */
+
+DROP TABLE IF EXISTS `guild_bank_right`;
+
+CREATE TABLE `guild_bank_right` (
+  `guildid` int(10) unsigned NOT NULL DEFAULT '0',
+  `TabId` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `rid` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `gbright` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `SlotPerDay` int(10) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`guildid`,`TabId`,`rid`),
+  KEY `guildid_key` (`guildid`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+/*Data for the table `guild_bank_right` */
+
+/*Table structure for table `guild_bank_tab` */
+
+DROP TABLE IF EXISTS `guild_bank_tab`;
+
+CREATE TABLE `guild_bank_tab` (
+  `guildid` int(10) unsigned NOT NULL DEFAULT '0',
+  `TabId` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `TabName` varchar(16) NOT NULL DEFAULT '',
+  `TabIcon` varchar(100) NOT NULL DEFAULT '',
+  `TabText` varchar(500) DEFAULT NULL,
+  PRIMARY KEY (`guildid`,`TabId`),
+  KEY `guildid_key` (`guildid`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+/*Data for the table `guild_bank_tab` */
+
+/*Table structure for table `guild_eventlog` */
+
+DROP TABLE IF EXISTS `guild_eventlog`;
+
+CREATE TABLE `guild_eventlog` (
+  `guildid` int(10) unsigned NOT NULL COMMENT 'Guild Identificator',
+  `LogGuid` int(10) unsigned NOT NULL COMMENT 'Log record identificator - auxiliary column',
+  `EventType` tinyint(3) unsigned NOT NULL COMMENT 'Event type',
+  `PlayerGuid1` int(10) unsigned NOT NULL COMMENT 'Player 1',
+  `PlayerGuid2` int(10) unsigned NOT NULL COMMENT 'Player 2',
+  `NewRank` tinyint(3) unsigned NOT NULL COMMENT 'New rank(in case promotion/demotion)',
+  `TimeStamp` int(10) unsigned NOT NULL COMMENT 'Event UNIX time',
+  PRIMARY KEY (`guildid`,`LogGuid`),
+  KEY `Idx_PlayerGuid1` (`PlayerGuid1`),
+  KEY `Idx_PlayerGuid2` (`PlayerGuid2`),
+  KEY `Idx_LogGuid` (`LogGuid`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Guild Eventlog';
+
+/*Data for the table `guild_eventlog` */
+
+/*Table structure for table `guild_member` */
+
+DROP TABLE IF EXISTS `guild_member`;
+
+CREATE TABLE `guild_member` (
+  `guildid` int(10) unsigned NOT NULL COMMENT 'Guild Identificator',
+  `guid` int(10) unsigned NOT NULL,
+  `rank` tinyint(3) unsigned NOT NULL,
+  `pnote` varchar(31) NOT NULL DEFAULT '',
+  `offnote` varchar(31) NOT NULL DEFAULT '',
+  UNIQUE KEY `guid_key` (`guid`),
+  KEY `guildid_key` (`guildid`),
+  KEY `guildid_rank_key` (`guildid`,`rank`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Guild System';
+
+/*Data for the table `guild_member` */
+
+/*Table structure for table `guild_member_withdraw` */
+
+DROP TABLE IF EXISTS `guild_member_withdraw`;
+
+CREATE TABLE `guild_member_withdraw` (
+  `guid` int(10) unsigned NOT NULL,
+  `tab0` int(10) unsigned NOT NULL DEFAULT '0',
+  `tab1` int(10) unsigned NOT NULL DEFAULT '0',
+  `tab2` int(10) unsigned NOT NULL DEFAULT '0',
+  `tab3` int(10) unsigned NOT NULL DEFAULT '0',
+  `tab4` int(10) unsigned NOT NULL DEFAULT '0',
+  `tab5` int(10) unsigned NOT NULL DEFAULT '0',
+  `money` int(10) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`guid`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Guild Member Daily Withdraws';
+
+/*Data for the table `guild_member_withdraw` */
+
+/*Table structure for table `guild_rank` */
+
+DROP TABLE IF EXISTS `guild_rank`;
+
+CREATE TABLE `guild_rank` (
+  `guildid` int(10) unsigned NOT NULL DEFAULT '0',
+  `rid` tinyint(3) unsigned NOT NULL,
+  `rname` varchar(20) NOT NULL DEFAULT '',
+  `rights` mediumint(8) unsigned NOT NULL DEFAULT '0',
+  `BankMoneyPerDay` int(10) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`guildid`,`rid`),
+  KEY `Idx_rid` (`rid`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Guild System';
+
+/*Data for the table `guild_rank` */
+
+/*Table structure for table `instance` */
+
+DROP TABLE IF EXISTS `instance`;
+
+CREATE TABLE `instance` (
+  `id` int(10) unsigned NOT NULL DEFAULT '0',
+  `map` smallint(5) unsigned NOT NULL DEFAULT '0',
+  `resettime` int(10) unsigned NOT NULL DEFAULT '0',
+  `difficulty` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `completedEncounters` int(10) unsigned NOT NULL DEFAULT '0',
+  `data` tinytext NOT NULL,
+  PRIMARY KEY (`id`),
+  KEY `map` (`map`),
+  KEY `resettime` (`resettime`),
+  KEY `difficulty` (`difficulty`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+/*Data for the table `instance` */
+
+/*Table structure for table `instance_reset` */
+
+DROP TABLE IF EXISTS `instance_reset`;
+
+CREATE TABLE `instance_reset` (
+  `mapid` smallint(5) unsigned NOT NULL DEFAULT '0',
+  `difficulty` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `resettime` int(10) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`mapid`,`difficulty`),
+  KEY `difficulty` (`difficulty`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+/*Data for the table `instance_reset` */
+
+/*Table structure for table `item_instance` */
+
+DROP TABLE IF EXISTS `item_instance`;
+
+CREATE TABLE `item_instance` (
+  `guid` int(10) unsigned NOT NULL DEFAULT '0',
+  `itemEntry` mediumint(8) unsigned NOT NULL DEFAULT '0',
+  `owner_guid` int(10) unsigned NOT NULL DEFAULT '0',
+  `creatorGuid` int(10) unsigned NOT NULL DEFAULT '0',
+  `giftCreatorGuid` int(10) unsigned NOT NULL DEFAULT '0',
+  `count` int(10) unsigned NOT NULL DEFAULT '1',
+  `duration` int(10) NOT NULL DEFAULT '0',
+  `charges` tinytext,
+  `flags` mediumint(8) unsigned NOT NULL DEFAULT '0',
+  `enchantments` text NOT NULL,
+  `randomPropertyId` smallint(5) NOT NULL DEFAULT '0',
+  `durability` smallint(5) unsigned NOT NULL DEFAULT '0',
+  `playedTime` int(10) unsigned NOT NULL DEFAULT '0',
+  `text` text,
+  PRIMARY KEY (`guid`),
+  KEY `idx_owner_guid` (`owner_guid`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Item System';
+
+/*Data for the table `item_instance` */
+
+/*Table structure for table `item_loot_items` */
+
+DROP TABLE IF EXISTS `item_loot_items`;
+
+CREATE TABLE `item_loot_items` (
+  `container_id` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'guid of container (item_instance.guid)',
+  `item_id` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'loot item entry (item_instance.itemEntry)',
+  `item_count` int(10) NOT NULL DEFAULT '0' COMMENT 'stack size',
+  `follow_rules` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'follow loot rules',
+  `ffa` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'free-for-all',
+  `blocked` tinyint(1) NOT NULL DEFAULT '0',
+  `counted` tinyint(1) NOT NULL DEFAULT '0',
+  `under_threshold` tinyint(1) NOT NULL DEFAULT '0',
+  `needs_quest` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'quest drop',
+  `rnd_prop` int(10) NOT NULL DEFAULT '0' COMMENT 'random enchantment added when originally rolled',
+  `rnd_suffix` int(10) NOT NULL DEFAULT '0' COMMENT 'random suffix added when originally rolled'
+) ENGINE=InnoDB DEFAULT CHARSET=latin1;
+
+/*Data for the table `item_loot_items` */
+
+/*Table structure for table `item_loot_money` */
+
+DROP TABLE IF EXISTS `item_loot_money`;
+
+CREATE TABLE `item_loot_money` (
+  `container_id` int(10) NOT NULL DEFAULT '0' COMMENT 'guid of container (item_instance.guid)',
+  `money` int(10) NOT NULL DEFAULT '0' COMMENT 'money loot (in copper)'
+) ENGINE=InnoDB DEFAULT CHARSET=latin1;
+
+/*Data for the table `item_loot_money` */
+
+/*Table structure for table `item_refund_instance` */
+
+DROP TABLE IF EXISTS `item_refund_instance`;
+
+CREATE TABLE `item_refund_instance` (
+  `item_guid` int(10) unsigned NOT NULL COMMENT 'Item GUID',
+  `player_guid` int(10) unsigned NOT NULL COMMENT 'Player GUID',
+  `paidMoney` int(10) unsigned NOT NULL DEFAULT '0',
+  `paidExtendedCost` smallint(5) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`item_guid`,`player_guid`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Item Refund System';
+
+/*Data for the table `item_refund_instance` */
+
+/*Table structure for table `item_soulbound_trade_data` */
+
+DROP TABLE IF EXISTS `item_soulbound_trade_data`;
+
+CREATE TABLE `item_soulbound_trade_data` (
+  `itemGuid` int(10) unsigned NOT NULL COMMENT 'Item GUID',
+  `allowedPlayers` text NOT NULL COMMENT 'Space separated GUID list of players who can receive this item in trade',
+  PRIMARY KEY (`itemGuid`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Item Refund System';
+
+/*Data for the table `item_soulbound_trade_data` */
+
+/*Table structure for table `lag_reports` */
+
+DROP TABLE IF EXISTS `lag_reports`;
+
+CREATE TABLE `lag_reports` (
+  `reportId` int(10) unsigned NOT NULL AUTO_INCREMENT,
+  `guid` int(10) unsigned NOT NULL DEFAULT '0',
+  `lagType` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `mapId` smallint(5) unsigned NOT NULL DEFAULT '0',
+  `posX` float NOT NULL DEFAULT '0',
+  `posY` float NOT NULL DEFAULT '0',
+  `posZ` float NOT NULL DEFAULT '0',
+  `latency` int(10) unsigned NOT NULL DEFAULT '0',
+  `createTime` int(10) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`reportId`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Player System';
+
+/*Data for the table `lag_reports` */
+
+/*Table structure for table `lfg_data` */
+
+DROP TABLE IF EXISTS `lfg_data`;
+
+CREATE TABLE `lfg_data` (
+  `guid` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Global Unique Identifier',
+  `dungeon` int(10) unsigned NOT NULL DEFAULT '0',
+  `state` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`guid`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='LFG Data';
+
+/*Data for the table `lfg_data` */
+
+/*Table structure for table `mail` */
+
+DROP TABLE IF EXISTS `mail`;
+
+CREATE TABLE `mail` (
+  `id` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Identifier',
+  `messageType` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `stationery` tinyint(3) NOT NULL DEFAULT '41',
+  `mailTemplateId` smallint(5) unsigned NOT NULL DEFAULT '0',
+  `sender` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Character Global Unique Identifier',
+  `receiver` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Character Global Unique Identifier',
+  `subject` longtext,
+  `body` longtext,
+  `has_items` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `expire_time` int(10) unsigned NOT NULL DEFAULT '0',
+  `deliver_time` int(10) unsigned NOT NULL DEFAULT '0',
+  `money` int(10) unsigned NOT NULL DEFAULT '0',
+  `cod` int(10) unsigned NOT NULL DEFAULT '0',
+  `checked` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`id`),
+  KEY `idx_receiver` (`receiver`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Mail System';
+
+/*Data for the table `mail` */
+
+/*Table structure for table `mail_items` */
+
+DROP TABLE IF EXISTS `mail_items`;
+
+CREATE TABLE `mail_items` (
+  `mail_id` int(10) unsigned NOT NULL DEFAULT '0',
+  `item_guid` int(10) unsigned NOT NULL DEFAULT '0',
+  `receiver` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Character Global Unique Identifier',
+  PRIMARY KEY (`item_guid`),
+  KEY `idx_receiver` (`receiver`),
+  KEY `idx_mail_id` (`mail_id`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
+
+/*Data for the table `mail_items` */
+
+/*Table structure for table `pet_aura` */
+
+DROP TABLE IF EXISTS `pet_aura`;
+
+CREATE TABLE `pet_aura` (
+  `guid` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Global Unique Identifier',
+  `casterGuid` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT 'Full Global Unique Identifier',
+  `spell` mediumint(8) unsigned NOT NULL DEFAULT '0',
+  `effectMask` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `recalculateMask` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  `stackCount` tinyint(3) unsigned NOT NULL DEFAULT '1',
+  `amount0` mediumint(8) NOT NULL,
+  `amount1` mediumint(8) NOT NULL,
+  `amount2` mediumint(8) NOT NULL,
+  `base_amount0` mediumint(8) NOT NULL,
+  `base_amount1` mediumint(8) NOT NULL,
+  `base_amount2` mediumint(8) NOT NULL,
+  `maxDuration` int(11) NOT NULL DEFAULT '0',
+  `remainTime` int(11) NOT NULL DEFAULT '0',
+  `remainCharges` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`guid`,`casterGuid`,`spell`,`effectMask`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Pet System';
+
+/*Data for the table `pet_aura` */
+
+/*Table structure for table `pet_spell` */
+
+DROP TABLE IF EXISTS `pet_spell`;
+
+CREATE TABLE `pet_spell` (
+  `guid` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Global Unique Identifier',
+  `spell` mediumint(8) unsigned NOT NULL DEFAULT '0' COMMENT 'Spell Identifier',
+  `active` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`guid`,`spell`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Pet System';
+
+/*Data for the table `pet_spell` */
+
+/*Table structure for table `pet_spell_cooldown` */
+
+DROP TABLE IF EXISTS `pet_spell_cooldown`;
+
+CREATE TABLE `pet_spell_cooldown` (
+  `guid` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Global Unique Identifier, Low part',
+  `spell` mediumint(8) unsigned NOT NULL DEFAULT '0' COMMENT 'Spell Identifier',
+  `time` int(10) unsigned NOT NULL DEFAULT '0',
+  `categoryId` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Spell category Id',
+  `categoryEnd` int(10) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`guid`,`spell`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+/*Data for the table `pet_spell_cooldown` */
+
+/*Table structure for table `petition` */
+
+DROP TABLE IF EXISTS `petition`;
+
+CREATE TABLE `petition` (
+  `ownerguid` int(10) unsigned NOT NULL,
+  `petitionguid` int(10) unsigned DEFAULT '0',
+  `name` varchar(24) NOT NULL,
+  `type` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`ownerguid`,`type`),
+  UNIQUE KEY `index_ownerguid_petitionguid` (`ownerguid`,`petitionguid`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Guild System';
+
+/*Data for the table `petition` */
+
+/*Table structure for table `petition_sign` */
+
+DROP TABLE IF EXISTS `petition_sign`;
+
+CREATE TABLE `petition_sign` (
+  `ownerguid` int(10) unsigned NOT NULL,
+  `petitionguid` int(10) unsigned NOT NULL DEFAULT '0',
+  `playerguid` int(10) unsigned NOT NULL DEFAULT '0',
+  `player_account` int(10) unsigned NOT NULL DEFAULT '0',
+  `type` tinyint(3) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`petitionguid`,`playerguid`),
+  KEY `Idx_playerguid` (`playerguid`),
+  KEY `Idx_ownerguid` (`ownerguid`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Guild System';
+
+/*Data for the table `petition_sign` */
+
+/*Table structure for table `pool_quest_save` */
+
+DROP TABLE IF EXISTS `pool_quest_save`;
+
+CREATE TABLE `pool_quest_save` (
+  `pool_id` int(10) unsigned NOT NULL DEFAULT '0',
+  `quest_id` int(10) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`pool_id`,`quest_id`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+/*Data for the table `pool_quest_save` */
+
+/*Table structure for table `pvpstats_battlegrounds` */
+
+DROP TABLE IF EXISTS `pvpstats_battlegrounds`;
+
+CREATE TABLE `pvpstats_battlegrounds` (
+  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
+  `winner_faction` tinyint(4) NOT NULL,
+  `bracket_id` tinyint(3) unsigned NOT NULL,
+  `type` tinyint(3) unsigned NOT NULL,
+  `date` datetime NOT NULL,
+  PRIMARY KEY (`id`)
+) ENGINE=InnoDB DEFAULT CHARSET=latin1;
+
+/*Data for the table `pvpstats_battlegrounds` */
+
+/*Table structure for table `pvpstats_players` */
+
+DROP TABLE IF EXISTS `pvpstats_players`;
+
+CREATE TABLE `pvpstats_players` (
+  `battleground_id` bigint(20) unsigned NOT NULL,
+  `character_guid` int(10) unsigned NOT NULL,
+  `winner` bit(1) NOT NULL,
+  `score_killing_blows` mediumint(8) unsigned NOT NULL,
+  `score_deaths` mediumint(8) unsigned NOT NULL,
+  `score_honorable_kills` mediumint(8) unsigned NOT NULL,
+  `score_bonus_honor` mediumint(8) unsigned NOT NULL,
+  `score_damage_done` mediumint(8) unsigned NOT NULL,
+  `score_healing_done` mediumint(8) unsigned NOT NULL,
+  `attr_1` mediumint(8) unsigned NOT NULL DEFAULT '0',
+  `attr_2` mediumint(8) unsigned NOT NULL DEFAULT '0',
+  `attr_3` mediumint(8) unsigned NOT NULL DEFAULT '0',
+  `attr_4` mediumint(8) unsigned NOT NULL DEFAULT '0',
+  `attr_5` mediumint(8) unsigned NOT NULL DEFAULT '0',
+  PRIMARY KEY (`battleground_id`,`character_guid`)
+) ENGINE=InnoDB DEFAULT CHARSET=latin1;
+
+/*Data for the table `pvpstats_players` */
+
+/*Table structure for table `quest_tracker` */
+
+DROP TABLE IF EXISTS `quest_tracker`;
+
+CREATE TABLE `quest_tracker` (
+  `id` mediumint(8) unsigned NOT NULL DEFAULT '0',
+  `character_guid` int(10) unsigned NOT NULL DEFAULT '0',
+  `quest_accept_time` datetime NOT NULL,
+  `quest_complete_time` datetime DEFAULT NULL,
+  `quest_abandon_time` datetime DEFAULT NULL,
+  `completed_by_gm` tinyint(1) NOT NULL DEFAULT '0',
+  `core_hash` varchar(120) NOT NULL DEFAULT '0',
+  `core_revision` varchar(120) NOT NULL DEFAULT '0'
+) ENGINE=InnoDB DEFAULT CHARSET=latin1;
+
+/*Data for the table `quest_tracker` */
+
+/*Table structure for table `reserved_name` */
+
+DROP TABLE IF EXISTS `reserved_name`;
+
+CREATE TABLE `reserved_name` (
+  `name` varchar(12) NOT NULL DEFAULT '',
+  PRIMARY KEY (`name`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Player Reserved Names';
+
+/*Data for the table `reserved_name` */
+
+/*Table structure for table `updates` */
+
+DROP TABLE IF EXISTS `updates`;
+
+CREATE TABLE `updates` (
+  `name` varchar(200) NOT NULL COMMENT 'filename with extension of the update.',
+  `hash` char(40) DEFAULT '' COMMENT 'sha1 hash of the sql file.',
+  `state` enum('RELEASED','ARCHIVED') NOT NULL DEFAULT 'RELEASED' COMMENT 'defines if an update is released or archived.',
+  `timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'timestamp when the query was applied.',
+  `speed` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'time the query takes to apply in ms.',
+  PRIMARY KEY (`name`)
+) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='List of all applied updates in this database.';
+
+/*Data for the table `updates` */
+
+insert  into `updates`(`name`,`hash`,`state`,`timestamp`,`speed`) values ('2015_03_20_00_characters.sql','B761760804EA73BD297F296C5C1919687DF7191C','ARCHIVED','2015-03-21 16:44:15',0),('2015_03_20_01_characters.sql','894F08B70449A5481FFAF394EE5571D7FC4D8A3A','ARCHIVED','2015-03-21 16:44:15',0),('2015_03_20_02_characters.sql','97D7BE0CAADC79F3F11B9FD296B8C6CD40FE593B','ARCHIVED','2015-03-21 16:44:51',0),('2015_06_26_00_characters_335.sql','C2CC6E50AFA1ACCBEBF77CC519AAEB09F3BBAEBC','ARCHIVED','2015-07-13 18:49:22',0),('2015_09_28_00_characters_335.sql','F8682A431D50E54BDC4AC0E7DBED21AE8AAB6AD4','ARCHIVED','2015-09-28 16:00:00',0),('2015_08_26_00_characters_335.sql','C7D6A3A00FECA3EBFF1E71744CA40D3076582374','ARCHIVED','2015-08-26 16:00:00',0),('2015_10_06_00_characters.sql','16842FDD7E8547F2260D3312F53EFF8761EFAB35','ARCHIVED','2015-10-06 11:06:38',0),('2015_10_07_00_characters.sql','E15AB463CEBE321001D7BFDEA4B662FF618728FD','ARCHIVED','2015-10-07 18:32:00',0),('2015_10_12_00_characters.sql','D6F9927BDED72AD0A81D6EC2C6500CBC34A39FA2','ARCHIVED','2015-10-12 10:35:47',0),('2015_10_28_00_characters.sql','622A9CA8FCE690429EBE23BA071A37C7A007BF8B','ARCHIVED','2015-10-19 09:32:22',0),('2015_10_29_00_characters_335.sql','4555A7F35C107E54C13D74D20F141039ED42943E','RELEASED','2015-10-29 12:05:43',0),('2015_11_03_00_characters.sql','CC045717B8FDD9733351E52A5302560CD08AAD57','RELEASED','2015-10-12 10:23:33',0);
+
+/*Table structure for table `updates_include` */
+
+DROP TABLE IF EXISTS `updates_include`;
+
+CREATE TABLE `updates_include` (
+  `path` varchar(200) NOT NULL COMMENT 'directory to include. $ means relative to the source directory.',
+  `state` enum('RELEASED','ARCHIVED') NOT NULL DEFAULT 'RELEASED' COMMENT 'defines if the directory contains released or archived updates.',
+  PRIMARY KEY (`path`)
+) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='List of directories where we want to include sql updates.';
+
+/*Data for the table `updates_include` */
+
+insert  into `updates_include`(`path`,`state`) values ('$/sql/updates/characters','RELEASED'),('$/sql/custom/characters','RELEASED'),('$/sql/old/3.3.5a/characters','ARCHIVED');
+
+/*Table structure for table `warden_action` */
+
+DROP TABLE IF EXISTS `warden_action`;
+
+CREATE TABLE `warden_action` (
+  `wardenId` smallint(5) unsigned NOT NULL,
+  `action` tinyint(3) unsigned DEFAULT NULL,
+  PRIMARY KEY (`wardenId`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8;
+
+/*Data for the table `warden_action` */
+
+/*Table structure for table `worldstates` */
+
+DROP TABLE IF EXISTS `worldstates`;
+
+CREATE TABLE `worldstates` (
+  `entry` int(10) unsigned NOT NULL DEFAULT '0',
+  `value` int(10) unsigned NOT NULL DEFAULT '0',
+  `comment` tinytext,
+  PRIMARY KEY (`entry`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Variable Saves';
+
+/*Data for the table `worldstates` */
+
+insert  into `worldstates`(`entry`,`value`,`comment`) values (20001,0,'NextArenaPointDistributionTime'),(20002,0,'NextWeeklyQuestResetTime'),(20003,0,'NextBGRandomDailyResetTime'),(20004,0,'cleaning_flags');
+
+/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
+/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
+/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 619ab33..3ff78ec 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -13,6 +13,7 @@ add_subdirectory(common)
 
 if(SERVERS)
   add_subdirectory(server)
+  add_subdirectory(plugins)
 endif(SERVERS)
 
 if(TOOLS)
diff --git a/src/common/Configuration/Config.h b/src/common/Configuration/Config.h
index ada910d..6188fbc 100644
--- a/src/common/Configuration/Config.h
+++ b/src/common/Configuration/Config.h
@@ -26,6 +26,8 @@
 
 class ConfigMgr
 {
+// playerbot mod
+public:
     ConfigMgr() { }
     ~ConfigMgr() { }
 
diff --git a/src/plugins/CMakeLists.txt b/src/plugins/CMakeLists.txt
new file mode 100644
index 0000000..62f51c1
--- /dev/null
+++ b/src/plugins/CMakeLists.txt
@@ -0,0 +1,191 @@
+# Copyright (C) 2008-2014 TrinityCore <http://www.trinitycore.org/>
+#
+# This file is free software; as a special exception the author gives
+# unlimited permission to copy and/or distribute it, with or without
+# modifications, as long as this notice is preserved.
+#
+# This program is distributed in the hope that it will be useful, but
+# WITHOUT ANY WARRANTY, to the extent permitted by law; without even the
+# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+
+file(GLOB_RECURSE sources_Playerbot playerbot/*.cpp playerbot/*.h)
+file(GLOB_RECURSE sources_Ahbot ahbot/*.cpp ahbot/*.h)
+
+# Create plugins-libary
+
+if (USE_COREPCH)
+  set(plugins_STAT_PCH_HDR pch/pch.h)
+  set(plugins_STAT_PCH_SRC pch/pch.cpp)
+endif ()
+
+set(plugins_STAT_SRCS
+  ${sources_Playerbot}
+  ${sources_Ahbot}
+)
+
+include_directories(
+  ${CMAKE_BINARY_DIR}
+  ${CMAKE_SOURCE_DIR}/dep/recastnavigation/Detour
+  ${CMAKE_SOURCE_DIR}/dep/recastnavigation/Detour/Include
+  ${CMAKE_SOURCE_DIR}/dep/recastnavigation/Recast
+  ${CMAKE_SOURCE_DIR}/dep/recastnavigation/Recast/Include
+  ${CMAKE_SOURCE_DIR}/dep/cppformat
+  ${CMAKE_SOURCE_DIR}/dep/g3dlite/include
+  ${CMAKE_SOURCE_DIR}/dep/SFMT
+  ${CMAKE_SOURCE_DIR}/dep/zlib
+  ${CMAKE_SOURCE_DIR}/src/common
+  ${CMAKE_SOURCE_DIR}/src/common/Collision
+  ${CMAKE_SOURCE_DIR}/src/common/Collision/Management
+  ${CMAKE_SOURCE_DIR}/src/common/Collision/Maps
+  ${CMAKE_SOURCE_DIR}/src/common/Collision/Models
+  ${CMAKE_SOURCE_DIR}/src/common/Configuration
+  ${CMAKE_SOURCE_DIR}/src/common/Cryptography
+  ${CMAKE_SOURCE_DIR}/src/common/Cryptography/Authentication
+  ${CMAKE_SOURCE_DIR}/src/common/Debugging
+  ${CMAKE_SOURCE_DIR}/src/common/Logging
+  ${CMAKE_SOURCE_DIR}/src/common/Threading
+  ${CMAKE_SOURCE_DIR}/src/common/Utilities
+  ${CMAKE_SOURCE_DIR}/src/server/collision
+  ${CMAKE_SOURCE_DIR}/src/server/collision/Management
+  ${CMAKE_SOURCE_DIR}/src/server/collision/Models
+  ${CMAKE_SOURCE_DIR}/src/server/collision/Maps
+  ${CMAKE_SOURCE_DIR}/src/server/shared
+  ${CMAKE_SOURCE_DIR}/src/server/shared/Configuration
+  ${CMAKE_SOURCE_DIR}/src/server/shared/Cryptography
+  ${CMAKE_SOURCE_DIR}/src/server/shared/Cryptography/Authentication
+  ${CMAKE_SOURCE_DIR}/src/server/database
+  ${CMAKE_SOURCE_DIR}/src/server/database/Database
+  ${CMAKE_SOURCE_DIR}/src/server/shared
+  ${CMAKE_SOURCE_DIR}/src/server/shared/DataStores
+  ${CMAKE_SOURCE_DIR}/src/server/shared/Debugging
+  ${CMAKE_SOURCE_DIR}/src/server/shared/Dynamic/LinkedReference
+  ${CMAKE_SOURCE_DIR}/src/server/shared/Dynamic
+  ${CMAKE_SOURCE_DIR}/src/server/shared/Logging
+  ${CMAKE_SOURCE_DIR}/src/server/shared/Networking
+  ${CMAKE_SOURCE_DIR}/src/server/shared/Packets
+  ${CMAKE_SOURCE_DIR}/src/server/shared/Threading
+  ${CMAKE_SOURCE_DIR}/src/server/shared/Utilities
+  ${CMAKE_CURRENT_SOURCE_DIR}
+  ${CMAKE_SOURCE_DIR}/src/server/game
+  ${CMAKE_SOURCE_DIR}/src/server/game/Accounts
+  ${CMAKE_SOURCE_DIR}/src/server/game/Achievements
+  ${CMAKE_SOURCE_DIR}/src/server/game/Addons
+  ${CMAKE_SOURCE_DIR}/src/server/game/AI
+  ${CMAKE_SOURCE_DIR}/src/server/game/AI/CoreAI
+  ${CMAKE_SOURCE_DIR}/src/server/game/AI/ScriptedAI
+  ${CMAKE_SOURCE_DIR}/src/server/game/AI/SmartScripts
+  ${CMAKE_SOURCE_DIR}/src/server/game/AuctionHouse
+  ${CMAKE_SOURCE_DIR}/src/server/game/AuctionHouseBot
+  ${CMAKE_SOURCE_DIR}/src/server/game/Battlefield
+  ${CMAKE_SOURCE_DIR}/src/server/game/Battlefield/Zones
+  ${CMAKE_SOURCE_DIR}/src/server/game/Battlegrounds
+  ${CMAKE_SOURCE_DIR}/src/server/game/Battlegrounds/Zones
+  ${CMAKE_SOURCE_DIR}/src/server/game/Calendar
+  ${CMAKE_SOURCE_DIR}/src/server/game/Chat
+  ${CMAKE_SOURCE_DIR}/src/server/game/Chat/Channels
+  ${CMAKE_SOURCE_DIR}/src/server/game/Combat
+  ${CMAKE_SOURCE_DIR}/src/server/game/Conditions
+  ${CMAKE_SOURCE_DIR}/src/server/game/DataStores
+  ${CMAKE_SOURCE_DIR}/src/server/game/DungeonFinding
+  ${CMAKE_SOURCE_DIR}/src/server/game/Entities
+  ${CMAKE_SOURCE_DIR}/src/server/game/Entities/Creature
+  ${CMAKE_SOURCE_DIR}/src/server/game/Entities/Corpse
+  ${CMAKE_SOURCE_DIR}/src/server/game/Entities/DynamicObject
+  ${CMAKE_SOURCE_DIR}/src/server/game/Entities/GameObject
+  ${CMAKE_SOURCE_DIR}/src/server/game/Entities/pluginsObject
+  ${CMAKE_SOURCE_DIR}/src/server/game/Entities/Item
+  ${CMAKE_SOURCE_DIR}/src/server/game/Entities/Item/Container
+  ${CMAKE_SOURCE_DIR}/src/server/game/Entities/Object
+  ${CMAKE_SOURCE_DIR}/src/server/game/Entities/Object/Updates
+  ${CMAKE_SOURCE_DIR}/src/server/game/Entities/Pet
+  ${CMAKE_SOURCE_DIR}/src/server/game/Entities/Player
+  ${CMAKE_SOURCE_DIR}/src/server/game/Entities/Totem
+  ${CMAKE_SOURCE_DIR}/src/server/game/Entities/Unit
+  ${CMAKE_SOURCE_DIR}/src/server/game/Entities/Vehicle
+  ${CMAKE_SOURCE_DIR}/src/server/game/Entities/Transport
+  ${CMAKE_SOURCE_DIR}/src/server/game/Events
+  ${CMAKE_SOURCE_DIR}/src/server/game/Globals
+  ${CMAKE_SOURCE_DIR}/src/server/game/Grids/Cells
+  ${CMAKE_SOURCE_DIR}/src/server/game/Grids/Notifiers
+  ${CMAKE_SOURCE_DIR}/src/server/game/Grids
+  ${CMAKE_SOURCE_DIR}/src/server/game/Groups
+  ${CMAKE_SOURCE_DIR}/src/server/game/Guilds
+  ${CMAKE_SOURCE_DIR}/src/server/game/Handlers
+  ${CMAKE_SOURCE_DIR}/src/server/game/Instances
+  ${CMAKE_SOURCE_DIR}/src/server/game/Loot
+  ${CMAKE_SOURCE_DIR}/src/server/game/Mails
+  ${CMAKE_SOURCE_DIR}/src/server/game/Maps
+  ${CMAKE_SOURCE_DIR}/src/server/game/Miscellaneous
+  ${CMAKE_SOURCE_DIR}/src/server/game/Movement
+  ${CMAKE_SOURCE_DIR}/src/server/game/Movement/Spline
+  ${CMAKE_SOURCE_DIR}/src/server/game/Movement/MovementGenerators
+  ${CMAKE_SOURCE_DIR}/src/server/game/Movement/Waypoints
+  ${CMAKE_SOURCE_DIR}/src/server/game/OutdoorPvP
+  ${CMAKE_SOURCE_DIR}/src/server/game/Pools
+  ${CMAKE_SOURCE_DIR}/src/server/game/PrecompiledHeaders
+  ${CMAKE_SOURCE_DIR}/src/server/game/Quests
+  ${CMAKE_SOURCE_DIR}/src/server/game/Reputation
+  ${CMAKE_SOURCE_DIR}/src/server/game/Scripting
+  ${CMAKE_SOURCE_DIR}/src/server/game/Server/Protocol
+  ${CMAKE_SOURCE_DIR}/src/server/game/Server
+  ${CMAKE_SOURCE_DIR}/src/server/game/Skills
+  ${CMAKE_SOURCE_DIR}/src/server/game/Spells
+  ${CMAKE_SOURCE_DIR}/src/server/game/Spells/Auras
+  ${CMAKE_SOURCE_DIR}/src/server/game/Texts
+  ${CMAKE_SOURCE_DIR}/src/server/game/Tools
+  ${CMAKE_SOURCE_DIR}/src/server/game/Tickets
+  ${CMAKE_SOURCE_DIR}/src/server/game/Warden
+  ${CMAKE_SOURCE_DIR}/src/server/game/Warden/Modules
+  ${CMAKE_SOURCE_DIR}/src/server/game/Weather
+  ${CMAKE_SOURCE_DIR}/src/server/game/World
+  ${CMAKE_SOURCE_DIR}/src/server/scripts/PrecompiledHeaders
+  ${MYSQL_INCLUDE_DIR}
+  ${OPENSSL_INCLUDE_DIR}
+)
+
+add_library(plugins STATIC
+  ${plugins_STAT_SRCS}
+  ${plugins_STAT_PCH_SRC}
+)
+
+add_dependencies(plugins revision_data.h)
+
+if( WIN32 )
+  if ( MSVC )
+	add_custom_command(TARGET plugins
+      POST_BUILD
+ 	  COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/playerbot/aiplayerbot.conf.dist.in ${CMAKE_BINARY_DIR}/bin/$(ConfigurationName)/
+    )
+	add_custom_command(TARGET plugins
+      POST_BUILD
+ 	  COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/ahbot/ahbot.conf.dist.in ${CMAKE_BINARY_DIR}/bin/$(ConfigurationName)/
+    )
+  elseif ( MINGW )
+
+	 add_custom_command(TARGET plugins
+      POST_BUILD
+      COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}playerbot/aiplayerbot.conf.dist.in ${CMAKE_BINARY_DIR}/bin/
+    )
+	add_custom_command(TARGET plugins
+      POST_BUILD
+      COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}ahbot/ahbot.conf.dist.in ${CMAKE_BINARY_DIR}/bin/
+    )
+  endif()
+endif()
+
+if( UNIX )
+  install(TARGETS plugins DESTINATION bin)
+  install(FILES playerbot/aiplayerbot.conf.dist.in DESTINATION ${CONF_DIR})
+  install(FILES ahbot/ahbot.conf.dist.in DESTINATION ${CONF_DIR})
+elseif( WIN32 )
+  install(TARGETS plugins DESTINATION "${CMAKE_INSTALL_PREFIX}")
+  install(FILES playerbot/aiplayerbot.conf.dist.in DESTINATION "${CMAKE_INSTALL_PREFIX}")
+  install(FILES ahbot/ahbot.conf.dist.in DESTINATION "${CMAKE_INSTALL_PREFIX}")
+endif()
+
+
+
+# Generate precompiled header
+if (USE_COREPCH)
+  add_cxx_pch(plugins ${plugins_STAT_PCH_HDR} ${plugins_STAT_PCH_SRC})
+endif ()
diff --git a/src/plugins/ahbot/AhBot.cpp b/src/plugins/ahbot/AhBot.cpp
new file mode 100644
index 0000000..9742c6d
--- /dev/null
+++ b/src/plugins/ahbot/AhBot.cpp
@@ -0,0 +1,984 @@
+#include "../pchdef.h"
+#include "Category.h"
+#include "ItemBag.h"
+#include "AhBot.h"
+#include "../World/World.h"
+#include "../Chat.h"
+#include "AhBotConfig.h"
+#include "../AuctionHouse/AuctionHouseMgr.h"
+#include "../WorldSession.h"
+#include "../../game/Entities/Player/Player.h"
+#include "../playerbot/PlayerbotAIConfig.h"
+#include "../playerbot/playerbot.h"
+
+using namespace ahbot;
+
+bool Player::MinimalLoadFromDB( QueryResult result, uint32 guid )
+{
+    if (!result)
+    {
+        //                                        0     1           2           3           4    5          6          7
+        result = CharacterDatabase.PQuery("SELECT name, position_x, position_y, position_z, map, totaltime, leveltime, at_login FROM characters WHERE guid = '%u'",guid);
+        if (!result)
+            return false;
+    }
+
+    Field *fields = result->Fetch();
+
+    m_name = fields[0].GetString();
+
+    Relocate(fields[1].GetFloat(),fields[2].GetFloat(),fields[3].GetFloat());
+    SetLocationMapId(fields[4].GetUInt32());
+
+    m_Played_time[PLAYED_TIME_TOTAL] = fields[5].GetUInt32();
+    m_Played_time[PLAYED_TIME_LEVEL] = fields[6].GetUInt32();
+
+    m_atLoginFlags = fields[7].GetUInt32();
+
+    for (int i = 0; i < PLAYER_SLOTS_COUNT; ++i)
+        m_items[i] = NULL;
+
+    if (HasFlag(PLAYER_FLAGS, PLAYER_FLAGS_GHOST))
+        m_deathState = DEAD;
+
+    return true;
+}
+
+bool AhBot::HandleAhBotCommand(ChatHandler* handler, char const* args)
+{
+    auctionbot.HandleCommand(args);
+    return true;
+}
+
+uint32 AhBot::auctionIds[MAX_AUCTIONS] = {1,6,7};
+uint32 AhBot::auctioneers[MAX_AUCTIONS] = {79707,4656,23442};
+map<uint32, uint32> AhBot::factions;
+
+void AhBot::Init()
+{
+    sLog->outMessage("ahbot", LOG_LEVEL_INFO, "Initializing AhBot by ike3");
+
+    if (!sAhBotConfig.Initialize())
+        return;
+
+    factions[1] = 1;
+    factions[2] = 1;
+    factions[3] = 1;
+    factions[4] = 2;
+    factions[5] = 2;
+    factions[6] = 2;
+    factions[7] = 3;
+
+    availableItems.Init();
+
+    sLog->outMessage("ahbot", LOG_LEVEL_INFO, "AhBot configuration loaded");
+}
+
+AhBot::~AhBot()
+{
+}
+
+ObjectGuid AhBot::GetAHBplayerGUID()
+{
+    return ObjectGuid(sAhBotConfig.guid);
+}
+
+void AhBotThread(AhBot* ahbot)
+{
+    ahbot->ForceUpdate();
+}
+
+void AhBot::Update()
+{
+    time_t now = time(0);
+
+    if (now < nextAICheckTime)
+        return;
+
+    if (updating)
+        return;
+
+    nextAICheckTime = time(0) + sAhBotConfig.updateInterval;
+
+    thread ahBotThread(AhBotThread, this);
+    ahBotThread.detach();
+}
+
+void AhBot::ForceUpdate()
+{
+    if (!sAhBotConfig.enabled)
+        return;
+
+    if (updating)
+        return;
+
+    sLog->outMessage("ahbot", LOG_LEVEL_INFO, "AhBot is now checking auctions");
+    updating = true;
+
+    if (!allBidders.size())
+        LoadRandomBots();
+
+    if (!allBidders.size())
+    {
+        sLog->outMessage("ahbot", LOG_LEVEL_ERROR, "Ahbot is disabled but there is no bidders available");
+        return;
+    }
+
+    CheckCategoryMultipliers();
+
+    int answered = 0, added = 0;
+    for (int i = 0; i < MAX_AUCTIONS; i++)
+    {
+        InAuctionItemsBag inAuctionItems(auctionIds[i]);
+        inAuctionItems.Init(true);
+
+        for (int j = 0; j < CategoryList::instance.size(); j++)
+        {
+            Category* category = CategoryList::instance[j];
+            answered += Answer(i, category, &inAuctionItems);
+            added += AddAuctions(i, category, &inAuctionItems);
+        }
+    }
+
+    CleanupHistory();
+
+    sLog->outMessage("ahbot", LOG_LEVEL_INFO, "AhBot auction check finished. %d auctions answered, %d new auctions added. Next check in %d seconds",
+            answered, added, sAhBotConfig.updateInterval);
+    updating = false;
+}
+
+struct SortByPricePredicate
+{
+    bool operator()(AuctionEntry* const & a, AuctionEntry* const & b) const
+    {
+        if (a->startbid == b->startbid)
+            return a->buyout < b->buyout;
+
+        return a->startbid < b->startbid;
+    }
+};
+
+vector<AuctionEntry*> AhBot::LoadAuctions(AuctionHouseObject* auctionHouse,
+        Category*& category, int& auction)
+{
+    vector<AuctionEntry*> entries;
+    for (AuctionHouseObject::AuctionEntryMap::iterator itr = auctionHouse->GetAuctionsBegin();
+            itr != auctionHouse->GetAuctionsEnd(); ++itr)
+    {
+        AuctionEntry *entry = itr->second;
+        if (IsBotAuction(entry->owner) || IsBotAuction(entry->bidder))
+            continue;
+
+        Item *item = sAuctionMgr->GetAItem(entry->itemGUIDLow);
+        if (!item)
+            continue;
+
+        if (!category->Contains(item->GetTemplate()))
+            continue;
+
+        uint32 price = category->GetPricingStrategy()->GetBuyPrice(item->GetTemplate(), auctionIds[auction]);
+        if (!price || !item->GetCount())
+        {
+            sLog->outMessage("ahbot", LOG_LEVEL_DEBUG, "%s (x%d) in auction %d: price cannot be determined",
+                    item->GetTemplate()->Name1.c_str(), item->GetCount(), auctionIds[auction]);
+            continue;
+        }
+
+        entries.push_back(entry);
+    }
+    sort(entries.begin(), entries.end(), SortByPricePredicate());
+    return entries;
+}
+
+void AhBot::FindMinPrice(AuctionHouseObject* auctionHouse, AuctionEntry*& entry, Item*& item, uint32* minBid,
+        uint32* minBuyout)
+{
+    *minBid = 0;
+    *minBuyout = 0;
+    for (AuctionHouseObject::AuctionEntryMap::iterator itr = auctionHouse->GetAuctionsBegin();
+            itr != auctionHouse->GetAuctionsEnd(); ++itr)
+    {
+        AuctionEntry *other = itr->second;
+        if (other->owner == entry->owner)
+            continue;
+
+        Item *otherItem = sAuctionMgr->GetAItem(other->itemGUIDLow);
+        if (!otherItem || !otherItem->GetCount() || otherItem->GetTemplate()->ItemId != item->GetTemplate()->ItemId)
+            continue;
+
+        uint32 startbid = other->startbid / otherItem->GetCount() * item->GetCount();
+        uint32 bid = other->bid / otherItem->GetCount() * item->GetCount();
+        uint32 buyout = other->buyout / otherItem->GetCount() * item->GetCount();
+
+        if (!bid && startbid && (!*minBid || *minBid > startbid))
+            *minBid = startbid;
+
+        if (bid && (*minBid || *minBid > bid))
+            *minBid = bid;
+
+        if (buyout && (!*minBuyout || *minBuyout > buyout))
+            *minBuyout = buyout;
+    }
+}
+
+int AhBot::Answer(int auction, Category* category, ItemBag* inAuctionItems)
+{
+    const AuctionHouseEntry* ahEntry = sAuctionHouseStore.LookupEntry(auctionIds[auction]);
+    if (!ahEntry)
+        return 0;
+
+    int answered = 0;
+    AuctionHouseObject* auctionHouse = sAuctionMgr->GetAuctionsMap(auction);
+    int64 availableMoney = GetAvailableMoney(auctionIds[auction]);
+
+    vector<AuctionEntry*> entries = LoadAuctions(auctionHouse, category, auction);
+    for (vector<AuctionEntry*>::iterator itr = entries.begin(); itr != entries.end(); ++itr)
+    {
+        AuctionEntry *entry = *itr;
+
+        Item *item = sAuctionMgr->GetAItem(entry->itemGUIDLow);
+        if (!item || !item->GetCount())
+            continue;
+
+        const ItemTemplate* proto = item->GetTemplate();
+        vector<uint32> items = availableItems.Get(category);
+        if (find(items.begin(), items.end(), proto->ItemId) == items.end())
+        {
+            sLog->outMessage("ahbot", LOG_LEVEL_DEBUG, "%s (x%d) in auction %d: unavailable item",
+                    item->GetTemplate()->Name1.c_str(), item->GetCount(), auctionIds[auction]);
+            continue;
+        }
+
+        uint32 answerCount = GetAnswerCount(proto->ItemId, auctionIds[auction], sAhBotConfig.itemBuyMaxInterval);
+        uint32 maxAnswerCount = category->GetMaxAllowedItemAuctionCount(proto);
+        if (maxAnswerCount && answerCount > maxAnswerCount)
+        {
+            sLog->outMessage("ahbot", LOG_LEVEL_DEBUG, "%s (x%d) in auction %d: answer count %d > %d (max)",
+                    item->GetTemplate()->Name1.c_str(), item->GetCount(), auctionIds[auction], answerCount, maxAnswerCount);
+            continue;
+        }
+
+        if (proto->RequiredLevel > sAhBotConfig.maxRequiredLevel || proto->ItemLevel > sAhBotConfig.maxItemLevel)
+        {
+            sLog->outMessage("ahbot", LOG_LEVEL_DEBUG, "%s (x%d) in auction %d: above max required or item level",
+                    item->GetTemplate()->Name1.c_str(), item->GetCount(), auctionIds[auction]);
+            continue;
+        }
+
+        uint32 price = category->GetPricingStrategy()->GetBuyPrice(proto, auctionIds[auction]);
+        if (!price)
+        {
+            sLog->outMessage("ahbot", LOG_LEVEL_DEBUG, "%s (x%d) in auction %d: cannot determine price",
+                    item->GetTemplate()->Name1.c_str(), item->GetCount(), auctionIds[auction]);
+            continue;
+        }
+
+        uint32 bidPrice = item->GetCount() * price;
+        uint32 buyoutPrice = item->GetCount() * urand(price, 4 * price / 3);
+
+        uint32 curPrice = entry->bid;
+        if (!curPrice) curPrice = entry->startbid;
+        if (!curPrice) curPrice = entry->buyout;
+
+        if (curPrice > buyoutPrice)
+        {
+            sLog->outMessage("ahbot", LOG_LEVEL_DEBUG, "%s (x%d) in auction %d: price %d > %d (buyout price)",
+                    proto->Name1.c_str(), item->GetCount(), auctionIds[auction], curPrice, buyoutPrice);
+            continue;
+        }
+
+        if (availableMoney < curPrice)
+        {
+            sLog->outMessage("ahbot", LOG_LEVEL_DEBUG, "%s (x%d) in auction %d: price %d > %d (available money)",
+                    proto->Name1.c_str(), item->GetCount(), auctionIds[auction], curPrice, availableMoney);
+            continue;
+        }
+
+        uint32 minBid = 0, minBuyout = 0;
+        FindMinPrice(auctionHouse, entry, item, &minBid, &minBuyout);
+
+        if (minBid && entry->bid && minBid < entry->bid)
+        {
+            sLog->outMessage("ahbot", LOG_LEVEL_DEBUG, "%s (x%d) in auction %d: %d (bid) > %d (minBid)",
+                    proto->Name1.c_str(), item->GetCount(), auctionIds[auction], entry->bid, minBid);
+            continue;
+        }
+
+        if (minBid && entry->startbid && minBid < entry->startbid)
+        {
+            sLog->outMessage("ahbot", LOG_LEVEL_DEBUG, "%s (x%d) in auction %d: %d (startbid) > %d (minBid)",
+                    proto->Name1.c_str(), item->GetCount(), auctionIds[auction], entry->startbid, minBid);
+            continue;
+        }
+
+        double priceLevel = (double)curPrice / (double)buyoutPrice;
+        uint32 buytime = GetBuyTime(entry->Id, proto->ItemId, auctionIds[auction], category, priceLevel);
+        if (time(0) < buytime)
+        {
+            sLog->outMessage("ahbot", LOG_LEVEL_DEBUG, "%s (x%d) in auction %d: will buy/bid in %d seconds",
+                    proto->Name1.c_str(), item->GetCount(), auctionIds[auction], buytime - time(0));
+            continue;
+        }
+
+        uint32 bidder = GetRandomBidder(auctionIds[auction]);
+        if (!bidder)
+        {
+            sLog->outMessage("ahbot", LOG_LEVEL_ERROR, "No bidders for auction %d", auctionIds[auction]);
+            break;
+        }
+
+        entry->bidder = bidder;
+        entry->bid = curPrice + urand(1, 1 + bidPrice / 10);
+        availableMoney -= curPrice;
+
+        updateMarketPrice(item->GetTemplate()->ItemId, entry->buyout / item->GetCount(), auctionIds[auction]);
+
+        if ((entry->buyout && (entry->bid >= entry->buyout || 100 * (entry->buyout - entry->bid) / price < 25)) &&
+                !(minBuyout && entry->buyout && minBuyout < entry->buyout))
+        {
+            sLog->outMessage("ahbot", LOG_LEVEL_DEBUG, "AhBot %d won %s (x%d) in auction %d for %d",
+                    bidder, item->GetTemplate()->Name1.c_str(), item->GetCount(), auctionIds[auction], entry->buyout);
+
+            entry->bid = entry->buyout;
+        }
+        else
+        {
+            sLog->outMessage("ahbot", LOG_LEVEL_DEBUG, "AhBot %d placed bid %d for %s (x%d) in auction %d",
+                    bidder, entry->bid, item->GetTemplate()->Name1.c_str(), item->GetCount(), auctionIds[auction]);
+
+            CharacterDatabase.PExecute("UPDATE auctionhouse SET buyguid = '%u',lastbid = '%u' WHERE id = '%u'",
+                entry->bidder, entry->bid, entry->Id);
+            AddToHistory(entry, AHBOT_WON_BID);
+        }
+
+        CharacterDatabase.PExecute("DELETE FROM ahbot_history WHERE item = '%u' AND won = 4 AND auction_house = '%u' ",
+                proto->ItemId, factions[auctionIds[auction]]);
+
+        answered++;
+    }
+
+    return answered;
+}
+
+uint32 AhBot::GetTime(string category, uint32 id, uint32 auctionHouse, uint32 type)
+{
+    QueryResult results = CharacterDatabase.PQuery("SELECT MAX(buytime) FROM ahbot_history WHERE item = '%u' AND won = '%u' AND auction_house = '%u' AND category = '%s'",
+        id, type, factions[auctionHouse], category.c_str());
+
+    if (!results)
+        return 0;
+
+    Field* fields = results->Fetch();
+    uint32 result = fields[0].GetUInt32();
+
+    return result;
+}
+
+void AhBot::SetTime(string category, uint32 id, uint32 auctionHouse, uint32 type, uint32 value)
+{
+    CharacterDatabase.PExecute("DELETE FROM ahbot_history WHERE item = '%u' AND won = '%u' AND auction_house = '%u' AND category = '%s'",
+        id, type, factions[auctionHouse], category.c_str());
+
+    CharacterDatabase.PExecute("INSERT INTO ahbot_history (buytime, item, bid, buyout, category, won, auction_house) "
+        "VALUES ('%u', '%u', '%u', '%u', '%s', '%u', '%u')",
+        value, id, 0, 0,
+        category.c_str(), type, factions[auctionHouse]);
+}
+
+uint32 AhBot::GetBuyTime(uint32 entry, uint32 itemId, uint32 auctionHouse, Category*& category, double priceLevel)
+{
+    uint32 entryTime = GetTime("entry", entry, auctionHouse, AHBOT_WON_DELAY);
+    if (entryTime > time(0))
+        return entryTime;
+
+    uint32 result = entryTime;
+
+    string categoryName = category->GetName();
+    uint32 categoryTime = GetTime(categoryName, 0, auctionHouse, AHBOT_WON_DELAY);
+    uint32 itemTime = GetTime("item", itemId, auctionHouse, AHBOT_WON_DELAY);
+
+    if (categoryTime < time(0)) categoryTime = time(0);
+    if (itemTime < time(0)) itemTime = time(0);
+
+    double rarity = category->GetPricingStrategy()->GetRarityPriceMultiplier(itemId);
+    categoryTime += urand(sAhBotConfig.itemBuyMinInterval, sAhBotConfig.itemBuyMaxInterval) * priceLevel;
+    itemTime += urand(sAhBotConfig.itemBuyMinInterval, sAhBotConfig.itemBuyMaxInterval) * priceLevel / rarity;
+    entryTime = max(categoryTime, itemTime);
+
+    SetTime(categoryName, 0, auctionHouse, AHBOT_WON_DELAY, categoryTime);
+    SetTime("item", itemId, auctionHouse, AHBOT_WON_DELAY, itemTime);
+    SetTime("entry", entry, auctionHouse, AHBOT_WON_DELAY, entryTime);
+
+    return result ? result : entryTime;
+}
+
+uint32 AhBot::GetSellTime(uint32 itemId, uint32 auctionHouse, Category*& category)
+{
+    uint32 itemSellTime = GetTime("item", itemId, auctionHouse, AHBOT_SELL_DELAY);
+    uint32 itemBuyTime = GetTime("item", itemId, auctionHouse, AHBOT_WON_DELAY);
+    uint32 itemTime = max(itemSellTime, itemBuyTime);
+
+    if (itemTime > time(0))
+        return itemTime;
+
+    uint32 result = itemTime;
+
+    string categoryName = category->GetName();
+    uint32 categorySellTime = GetTime(categoryName, 0, auctionHouse, AHBOT_SELL_DELAY);
+    uint32 categoryBuyTime = GetTime(categoryName, 0, auctionHouse, AHBOT_WON_DELAY);
+    uint32 categoryTime = max(categorySellTime, categoryBuyTime);
+
+    if (categoryTime < time(0)) categoryTime = time(0);
+    if (itemTime < time(0)) itemTime = time(0);
+
+    double rarity = category->GetPricingStrategy()->GetRarityPriceMultiplier(itemId);
+    categoryTime += urand(sAhBotConfig.itemSellMinInterval, sAhBotConfig.itemSellMaxInterval);
+    itemTime += urand(sAhBotConfig.itemSellMinInterval, sAhBotConfig.itemSellMaxInterval) * rarity;
+    itemTime = max(itemTime, categoryTime);
+
+    SetTime(categoryName, 0, auctionHouse, AHBOT_SELL_DELAY, categoryTime);
+    SetTime("item", itemId, auctionHouse, AHBOT_SELL_DELAY, itemTime);
+
+    return result ? result : itemTime;
+}
+
+int AhBot::AddAuctions(int auction, Category* category, ItemBag* inAuctionItems)
+{
+    vector<uint32>& inAuction = inAuctionItems->Get(category);
+
+    int32 maxAllowedAuctionCount = categoryMaxAuctionCount[category->GetName()];
+    if (inAuctionItems->GetCount(category) >= maxAllowedAuctionCount)
+        return 0;
+
+    int added = 0;
+    vector<uint32> available = availableItems.Get(category);
+    for (int32 i = 0; i <= maxAllowedAuctionCount && available.size() > 0 && inAuctionItems->GetCount(category) < maxAllowedAuctionCount; ++i)
+    {
+        uint32 index = urand(0, available.size() - 1);
+        uint32 itemId = available[index];
+
+        ItemTemplate const* proto = sObjectMgr->GetItemTemplate(itemId);
+        if (!proto)
+            continue;
+
+        int32 maxAllowedItems = category->GetMaxAllowedItemAuctionCount(proto);
+        if (maxAllowedItems && inAuctionItems->GetCount(category, proto->ItemId) >= maxAllowedItems)
+            continue;
+
+        uint32 sellTime = GetSellTime(proto->ItemId, auctionIds[auction], category);
+        if (time(0) < sellTime)
+        {
+            sLog->outMessage("ahbot", LOG_LEVEL_DEBUG, "%s in auction %d: will add in %d seconds",
+                    proto->Name1.c_str(), auctionIds[auction], sellTime - time(0));
+            continue;
+        }
+        else if (time(0) - sellTime > sAhBotConfig.maxSellInterval)
+        {
+            sLog->outMessage("ahbot", LOG_LEVEL_DEBUG, "%s in auction %d: too old (%d secs)",
+                    proto->Name1.c_str(), auctionIds[auction], time(0) - sellTime);
+            continue;
+        }
+
+        inAuctionItems->Add(proto);
+        added += AddAuction(auction, category, proto);
+    }
+
+    return added;
+}
+
+int AhBot::AddAuction(int auction, Category* category, ItemTemplate const* proto)
+{
+    uint32 owner = GetRandomBidder(auctionIds[auction]);
+    if (!owner)
+    {
+        sLog->outMessage("ahbot", LOG_LEVEL_ERROR, "No bidders for auction %d", auctionIds[auction]);
+        return 0;
+    }
+
+
+    Player* player = sObjectMgr->GetPlayerByLowGUID(owner);
+    if (!player)
+        return 0;
+
+    uint32 price = category->GetPricingStrategy()->GetSellPrice(proto, auctionIds[auction]);
+
+    sLog->outMessage("ahbot", LOG_LEVEL_DEBUG, "AddAuction: market price adjust");
+    updateMarketPrice(proto->ItemId, price, auctionIds[auction]);
+
+    price = category->GetPricingStrategy()->GetBuyPrice(proto, auctionIds[auction]);
+
+    uint32 stackCount = category->GetStackCount(proto);
+    if (!price || !stackCount)
+        return 0;
+
+    if (urand(0, 100) <= sAhBotConfig.underPriceProbability * 100)
+        price = price * 100 / urand(100, 200);
+
+    uint32 bidPrice = stackCount * price;
+    uint32 buyoutPrice = stackCount * urand(price, 4 * price / 3);
+
+    Item* item = Item::CreateItem(proto->ItemId, stackCount);
+    if (!item)
+        return 0;
+
+    uint32 randomPropertyId = Item::GenerateItemRandomPropertyId(proto->ItemId);
+    if (randomPropertyId)
+        item->SetItemRandomProperties(randomPropertyId);
+
+    AuctionHouseEntry const* ahEntry = sAuctionHouseStore.LookupEntry(auctionIds[auction]);
+    if(!ahEntry)
+        return 0;
+
+    AuctionHouseObject* auctionHouse = sAuctionMgr->GetAuctionsMap(auctionIds[auction]);
+
+    AuctionEntry* auctionEntry = new AuctionEntry;
+    auctionEntry->Id = sObjectMgr->GenerateAuctionID();
+    auctionEntry->itemGUIDLow = item->GetGUID().GetCounter();
+    auctionEntry->itemEntry = item->GetEntry();
+    auctionEntry->owner = owner;
+    auctionEntry->startbid = bidPrice;
+    auctionEntry->buyout = buyoutPrice;
+    // TODO: remove?
+    // auctionEntry->auctioneer = auctioneers[auction];
+    auctionEntry->bidder = 0;
+    auctionEntry->bid = 0;
+    auctionEntry->deposit = 0;
+    auctionEntry->expire_time = (time_t) (urand(8, 24) * 60 * 60 + time(NULL));
+    auctionEntry->auctionHouseEntry = ahEntry;
+
+    SQLTransaction trans = CharacterDatabase.BeginTransaction();
+
+    item->SaveToDB(trans);
+    sAuctionMgr->AddAItem(item);
+    auctionHouse->AddAuction(auctionEntry);
+    auctionEntry->SaveToDB(trans);
+
+    auctionHouse->AddAuction(auctionEntry);
+
+    CharacterDatabase.CommitTransaction(trans);
+
+    sLog->outMessage("ahbot", LOG_LEVEL_DEBUG, "AhBot %d added %d of %s to auction %d for %d..%d", owner, stackCount, proto->Name1.c_str(), auctionIds[auction], bidPrice, buyoutPrice);
+    return 1;
+}
+
+void AhBot::HandleCommand(string command)
+{
+    if (!sAhBotConfig.enabled)
+        return;
+
+    if (command == "expire")
+    {
+        for (int i = 0; i < MAX_AUCTIONS; i++)
+            Expire(i);
+
+        return;
+    }
+
+    if (command == "stats")
+    {
+        for (int i = 0; i < MAX_AUCTIONS; i++)
+            PrintStats(i);
+
+        return;
+    }
+
+    if (command == "update")
+    {
+        thread ahBotThread(AhBotThread, this);
+        ahBotThread.detach();
+        return;
+    }
+
+    uint32 itemId = atoi(command.c_str());
+    if (!itemId)
+    {
+        sLog->outMessage("ahbot", LOG_LEVEL_INFO, "ahbot stats - show short summary");
+        sLog->outMessage("ahbot", LOG_LEVEL_INFO, "ahbot expire - expire all auctions");
+        sLog->outMessage("ahbot", LOG_LEVEL_INFO, "ahbot update - update all auctions");
+        sLog->outMessage("ahbot", LOG_LEVEL_INFO, "ahbot <itemId> - show item price");
+        return;
+    }
+
+    ItemTemplate const* proto = sObjectMgr->GetItemTemplate(itemId);
+    if (!proto)
+        return;
+
+    for (int i=0; i<CategoryList::instance.size(); i++)
+    {
+        Category* category = CategoryList::instance[i];
+        if (category->Contains(proto))
+        {
+            vector<uint32> items = availableItems.Get(category);
+            if (find(items.begin(), items.end(), proto->ItemId) == items.end())
+                continue;
+
+            ostringstream out;
+            out << proto->Name1 << " (" << category->GetDisplayName() << "), "
+                    << category->GetMaxAllowedAuctionCount() << "x" << category->GetMaxAllowedItemAuctionCount(proto)
+                    << "x" << category->GetStackCount(proto) << " max"
+                    << "\n";
+            for (int auction = 0; auction < MAX_AUCTIONS; auction++)
+            {
+                const AuctionHouseEntry* ahEntry = sAuctionHouseStore.LookupEntry(auctionIds[auction]);
+                out << "--- auction house " << auctionIds[auction] << "(faction: " << factions[auctionIds[auction]] << ", money: "
+                    << GetAvailableMoney(auctionIds[auction])
+                    << ") ---\n";
+
+                out << "sell: " << category->GetPricingStrategy()->GetSellPrice(proto, auctionIds[auction])
+                    << " ("  << category->GetPricingStrategy()->ExplainSellPrice(proto, auctionIds[auction]) << ")"
+                    << "\n";
+
+                out << "buy: " << category->GetPricingStrategy()->GetBuyPrice(proto, auctionIds[auction])
+                    << " ("  << category->GetPricingStrategy()->ExplainBuyPrice(proto, auctionIds[auction]) << ")"
+                    << "\n";
+            }
+            sLog->outMessage("ahbot", LOG_LEVEL_INFO, out.str().c_str());
+            break;
+        }
+    }
+}
+
+void AhBot::Expire(int auction)
+{
+    if (!sAhBotConfig.enabled)
+        return;
+
+    AuctionHouseEntry const* ahEntry = sAuctionHouseStore.LookupEntry(auctionIds[auction]);
+    if(!ahEntry)
+        return;
+
+    AuctionHouseObject* auctionHouse = sAuctionMgr->GetAuctionsMap(auctionIds[auction]);
+
+    AuctionHouseObject::AuctionEntryMap::iterator itr = auctionHouse->GetAuctionsBegin();
+
+    int count = 0;
+    while (itr != auctionHouse->GetAuctionsEnd())
+    {
+        if (IsBotAuction(itr->second->owner))
+        {
+            itr->second->expire_time = sWorld->GetGameTime();
+            count++;
+        }
+
+        ++itr;
+    }
+
+    CharacterDatabase.PExecute("DELETE FROM ahbot_category");
+    sLog->outMessage("ahbot", LOG_LEVEL_INFO, "%d auctions marked as expired in auction %d", count, auctionIds[auction]);
+}
+
+void AhBot::PrintStats(int auction)
+{
+    if (!sAhBotConfig.enabled)
+        return;
+
+    AuctionHouseEntry const* ahEntry = sAuctionHouseStore.LookupEntry(auctionIds[auction]);
+    if(!ahEntry)
+        return;
+
+    AuctionHouseObject* auctionHouse = sAuctionMgr->GetAuctionsMap(auction);
+    sLog->outMessage("ahbot", LOG_LEVEL_INFO, "%d auctions available on auction house %d", auctionHouse->Getcount(), auctionIds[auction]);
+}
+
+void AhBot::AddToHistory(AuctionEntry* entry, uint32 won)
+{
+    if (!sAhBotConfig.enabled || !entry)
+        return;
+
+    if (!IsBotAuction(entry->owner) && !IsBotAuction(entry->bidder))
+        return;
+
+    ItemTemplate const* proto = sObjectMgr->GetItemTemplate(entry->itemEntry);
+    if (!proto)
+        return;
+
+    string category = "";
+    for (int i = 0; i < CategoryList::instance.size(); i++)
+    {
+        if (CategoryList::instance[i]->Contains(proto))
+        {
+            category = CategoryList::instance[i]->GetName();
+            break;
+        }
+    }
+
+    if (!won)
+    {
+        won = AHBOT_WON_PLAYER;
+        if (IsBotAuction(entry->bidder))
+            won = AHBOT_WON_SELF;
+    }
+
+    sLog->outMessage("ahbot", LOG_LEVEL_DEBUG, "AddToHistory: market price adjust");
+    int count = entry->itemCount ? entry->itemCount : 1;
+    updateMarketPrice(proto->ItemId, entry->buyout / count, entry->auctionHouseEntry->houseId);
+
+    uint32 now = time(0);
+    CharacterDatabase.PExecute("INSERT INTO ahbot_history (buytime, item, bid, buyout, category, won, auction_house) "
+        "VALUES ('%u', '%u', '%u', '%u', '%s', '%u', '%u')",
+        now, entry->itemEntry, entry->bid ? entry->bid : entry->startbid, entry->buyout,
+        category.c_str(), won, factions[entry->auctionHouseEntry->houseId]);
+}
+
+uint32 AhBot::GetAnswerCount(uint32 itemId, uint32 auctionHouse, uint32 withinTime)
+{
+    uint32 count = 0;
+
+    QueryResult results = CharacterDatabase.PQuery("SELECT COUNT(*) FROM ahbot_history WHERE "
+        "item = '%u' AND won in (2, 3) AND auction_house = '%u' AND buytime > '%u'",
+        itemId, factions[auctionHouse], time(0) - withinTime);
+    if (results)
+    {
+        do
+        {
+            Field* fields = results->Fetch();
+            count = fields[0].GetUInt32();
+        } while (results->NextRow());
+    }
+
+    return count;
+}
+
+void AhBot::CleanupHistory()
+{
+    uint32 when = time(0) - 3600 * 24 * sAhBotConfig.historyDays;
+    CharacterDatabase.PExecute("DELETE FROM ahbot_history WHERE buytime < '%u'", when);
+}
+
+uint32 AhBot::GetAvailableMoney(uint32 auctionHouse)
+{
+    int64 result = sAhBotConfig.alwaysAvailableMoney;
+
+    map<uint32, uint32> data;
+    data[AHBOT_WON_PLAYER] = 0;
+    data[AHBOT_WON_SELF] = 0;
+
+    const AuctionHouseEntry* ahEntry = sAuctionHouseStore.LookupEntry(auctionHouse);
+    QueryResult results = CharacterDatabase.PQuery(
+        "SELECT won, SUM(bid) FROM ahbot_history WHERE auction_house = '%u' GROUP BY won HAVING won > 0 ORDER BY won",
+        factions[auctionHouse]);
+    if (results)
+    {
+        do
+        {
+            Field* fields = results->Fetch();
+            data[fields[0].GetUInt32()] = fields[1].GetUInt32();
+
+        } while (results->NextRow());
+    }
+
+    results = CharacterDatabase.PQuery(
+        "SELECT max(buytime) FROM ahbot_history WHERE auction_house = '%u' AND won = '2'",
+        factions[auctionHouse]);
+    if (results)
+    {
+        Field* fields = results->Fetch();
+        uint32 lastBuyTime = fields[0].GetUInt32();
+        uint32 now = time(0);
+        if (lastBuyTime && now > lastBuyTime)
+        result += (now - lastBuyTime) / 3600 / 24 * sAhBotConfig.alwaysAvailableMoney;
+    }
+
+    AuctionHouseObject* auctionHouseObject = sAuctionMgr->GetAuctionsMap(auctionHouse);
+    for (AuctionHouseObject::AuctionEntryMap::iterator itr = auctionHouseObject->GetAuctionsBegin(); itr != auctionHouseObject->GetAuctionsEnd(); ++itr)
+    {
+        AuctionEntry *entry = itr->second;
+        if (!IsBotAuction(entry->bidder))
+            continue;
+
+        result -= entry->bid;
+    }
+
+    result += (data[AHBOT_WON_PLAYER] - data[AHBOT_WON_SELF]);
+    return result < 0 ? 0 : (uint32)result;
+}
+
+void AhBot::CheckCategoryMultipliers()
+{
+    QueryResult results = CharacterDatabase.PQuery("SELECT category, multiplier, max_auction_count, expire_time FROM ahbot_category");
+    if (results)
+    {
+        do
+        {
+            Field* fields = results->Fetch();
+            categoryMultipliers[fields[0].GetString()] = fields[1].GetFloat();
+            categoryMaxAuctionCount[fields[0].GetString()] = fields[2].GetInt32();
+            categoryMultiplierExpireTimes[fields[0].GetString()] = fields[3].GetUInt64();
+
+        } while (results->NextRow());
+    }
+
+    CharacterDatabase.PExecute("DELETE FROM ahbot_category");
+
+    for (int i = 0; i < CategoryList::instance.size(); i++)
+    {
+        string name = CategoryList::instance[i]->GetName();
+        if (categoryMultiplierExpireTimes[name] <= time(0) || categoryMultipliers[name] <= 0)
+        {
+            categoryMultipliers[name] = (double)urand(20, 100) / 20.0;
+            uint32 maxAllowedAuctionCount = CategoryList::instance[i]->GetMaxAllowedAuctionCount();
+            categoryMaxAuctionCount[name] = urand(maxAllowedAuctionCount / 2, maxAllowedAuctionCount);
+            categoryMultiplierExpireTimes[name] = time(0) + urand(4, 7) * 3600 * 24;
+        }
+
+        CharacterDatabase.PExecute("INSERT INTO ahbot_category (category, multiplier, max_auction_count, expire_time) "
+                "VALUES ('%s', '%f', '%u', '%u')",
+                name.c_str(), categoryMultipliers[name], categoryMaxAuctionCount[name], categoryMultiplierExpireTimes[name]);
+    }
+}
+
+
+void AhBot::updateMarketPrice(uint32 itemId, double price, uint32 auctionHouse)
+{
+    double marketPrice = 0;
+
+    QueryResult results = CharacterDatabase.PQuery("SELECT price FROM ahbot_price WHERE item = '%u' AND auction_house = '%u'", itemId, auctionHouse);
+    if (results)
+    {
+        marketPrice = results->Fetch()[0].GetFloat();
+    }
+
+    if (marketPrice > 0)
+        marketPrice = (marketPrice + price) / 2;
+    else
+        marketPrice = price;
+
+    CharacterDatabase.PExecute("DELETE FROM ahbot_price WHERE item = '%u' AND auction_house = '%u'", itemId, auctionHouse);
+    CharacterDatabase.PExecute("INSERT INTO ahbot_price (item, price, auction_house) VALUES ('%u', '%lf', '%u')", itemId, marketPrice, auctionHouse);
+}
+
+bool AhBot::IsBotAuction(uint32 bidder)
+{
+    return allBidders.find(bidder) != allBidders.end();
+}
+
+uint32 AhBot::GetRandomBidder(uint32 auctionHouse)
+{
+    vector<uint32> guids = bidders[factions[auctionHouse]];
+    if (guids.empty())
+        return 0;
+
+    vector<uint32> online;
+    for (vector<uint32>::iterator i = guids.begin(); i != guids.end(); ++i)
+    {
+        uint32 guid = *i;
+        Player* player = sObjectMgr->GetPlayerByLowGUID(guid);
+        if (!player)
+            continue;
+
+        online.push_back(guid);
+    }
+
+    if (online.empty())
+        return 0;
+
+    int index = urand(0, online.size() - 1);
+    return online[index];
+}
+
+void AhBot::LoadRandomBots()
+{
+    for (list<uint32>::iterator i = sPlayerbotAIConfig.randomBotAccounts.begin(); i != sPlayerbotAIConfig.randomBotAccounts.end(); i++)
+    {
+        uint32 accountId = *i;
+        if (!sAccountMgr->GetCharactersCount(accountId))
+            continue;
+
+        QueryResult result = CharacterDatabase.PQuery("SELECT guid, race FROM characters WHERE account = '%u'", accountId);
+        if (!result)
+            continue;
+
+        do
+        {
+            Field* fields = result->Fetch();
+            uint32 guid = fields[0].GetUInt32();
+            uint8 race = fields[1].GetUInt8();
+            uint32 auctionHouse = PlayerbotAI::IsOpposing(race, RACE_HUMAN) ? 2 : 1;
+            bidders[auctionHouse].push_back(guid);
+            bidders[3].push_back(guid);
+            allBidders.insert(guid);
+        } while (result->NextRow());
+    }
+
+    if (allBidders.empty() && sAhBotConfig.guid)
+    {
+        uint32 guid = sAhBotConfig.guid;
+        allBidders.insert(guid);
+        for (int i = 1; i <= 3; i++)
+        {
+            bidders[i].push_back(guid);
+        }
+    }
+
+    sLog->outMessage("ahbot", LOG_LEVEL_DEBUG, "{A=%d,H=%d,N=%d} bidders loaded", bidders[1].size(), bidders[2].size(), bidders[3].size());
+}
+
+int32 AhBot::GetSellPrice(ItemTemplate const* proto)
+{
+    if (!sAhBotConfig.enabled)
+        return 0;
+
+    int32 maxPrice = 0;
+    for (int i=0; i<CategoryList::instance.size(); i++)
+    {
+        Category* category = CategoryList::instance[i];
+        if (!category->Contains(proto))
+            continue;
+
+        for (int auction = 0; auction < MAX_AUCTIONS; auction++)
+        {
+            int32 price = (int32)category->GetPricingStrategy()->GetSellPrice(proto, auctionIds[auction]);
+            if (!price)
+                price = (int32)category->GetPricingStrategy()->GetBuyPrice(proto, auctionIds[auction]);
+
+            if (price > maxPrice)
+                maxPrice = price;
+        }
+    }
+
+    return maxPrice;
+}
+
+int32 AhBot::GetBuyPrice(ItemTemplate const* proto)
+{
+    if (!sAhBotConfig.enabled)
+        return 0;
+
+    int32 maxPrice = 0;
+    for (int i=0; i<CategoryList::instance.size(); i++)
+    {
+        Category* category = CategoryList::instance[i];
+        if (!category->Contains(proto))
+            continue;
+
+        for (int auction = 0; auction < MAX_AUCTIONS; auction++)
+        {
+            int32 price = (int32)category->GetPricingStrategy()->GetBuyPrice(proto, auctionIds[auction]);
+            if (!price)
+                continue;
+
+            if (price > maxPrice)
+                maxPrice = price;
+        }
+    }
+
+    return maxPrice;
+}
+
+double AhBot::GetRarityPriceMultiplier(const ItemTemplate* proto)
+{
+    if (!sAhBotConfig.enabled)
+        return 1.0;
+
+    for (int i=0; i<CategoryList::instance.size(); i++)
+    {
+        Category* category = CategoryList::instance[i];
+        if (!category->Contains(proto))
+            continue;
+
+        return category->GetPricingStrategy()->GetRarityPriceMultiplier(proto->ItemId);
+    }
+
+    return 1.0;
+
+}
diff --git a/src/plugins/ahbot/AhBot.h b/src/plugins/ahbot/AhBot.h
new file mode 100644
index 0000000..4b704fb
--- /dev/null
+++ b/src/plugins/ahbot/AhBot.h
@@ -0,0 +1,93 @@
+#pragma once
+
+#include "Category.h"
+#include "ItemBag.h"
+#include "../playerbot/PlayerbotAIBase.h"
+#include "../AuctionHouse/AuctionHouseMgr.h"
+#include "../WorldSession.h"
+#include "../pchdef.h"
+
+#define MAX_AUCTIONS 3
+#define AHBOT_WON_EXPIRE 0
+#define AHBOT_WON_PLAYER 1
+#define AHBOT_WON_SELF 2
+#define AHBOT_WON_BID 3
+#define AHBOT_WON_DELAY 4
+#define AHBOT_SELL_DELAY 5
+
+namespace ahbot
+{
+    using namespace std;
+
+    class AhBot
+    {
+    public:
+        AhBot() : nextAICheckTime(0), updating(false) {}
+        virtual ~AhBot();
+        static AhBot& instance()
+        {
+            static AhBot instance;
+            return instance;
+        }
+
+    public:
+        static bool HandleAhBotCommand(ChatHandler* handler, char const* args);
+        ObjectGuid GetAHBplayerGUID();
+        void Init();
+        void Update();
+        void ForceUpdate();
+        void HandleCommand(string command);
+        void Won(AuctionEntry* entry) { AddToHistory(entry); }
+        void Expired(AuctionEntry* entry) {}
+
+        double GetCategoryMultiplier(string category)
+        {
+            return categoryMultipliers[category];
+        }
+
+        int32 GetSellPrice(const ItemTemplate* proto);
+        int32 GetBuyPrice(const ItemTemplate* proto);
+        double GetRarityPriceMultiplier(const ItemTemplate* proto);
+
+    private:
+        int Answer(int auction, Category* category, ItemBag* inAuctionItems);
+        int AddAuctions(int auction, Category* category, ItemBag* inAuctionItems);
+        int AddAuction(int auction, Category* category, const ItemTemplate* proto);
+        void Expire(int auction);
+        void PrintStats(int auction);
+        void AddToHistory(AuctionEntry* entry, uint32 won = 0);
+        void CleanupHistory();
+        uint32 GetAvailableMoney(uint32 auctionHouse);
+        void CheckCategoryMultipliers();
+        void updateMarketPrice(uint32 itemId, double price, uint32 auctionHouse);
+        bool IsBotAuction(uint32 bidder);
+        uint32 GetRandomBidder(uint32 auctionHouse);
+        void LoadRandomBots();
+        uint32 GetAnswerCount(uint32 itemId, uint32 auctionHouse, uint32 withinTime);
+        vector<AuctionEntry*> LoadAuctions(AuctionHouseObject* auctionHouse, Category*& category,
+                int& auction);
+        void FindMinPrice(AuctionHouseObject* auctionHouse, AuctionEntry*& entry, Item*& item, uint32* minBid,
+                uint32* minBuyout);
+        uint32 GetBuyTime(uint32 entry, uint32 itemId, uint32 auctionHouse, Category*& category, double priceLevel);
+        uint32 GetTime(string category, uint32 id, uint32 auctionHouse, uint32 type);
+        void SetTime(string category, uint32 id, uint32 auctionHouse, uint32 type, uint32 value);
+        uint32 GetSellTime(uint32 itemId, uint32 auctionHouse, Category*& category);
+
+    public:
+        static uint32 auctionIds[MAX_AUCTIONS];
+        static uint32 auctioneers[MAX_AUCTIONS];
+        static map<uint32, uint32> factions;
+
+    private:
+        AvailableItemsBag availableItems;
+        time_t nextAICheckTime;
+        map<string, double> categoryMultipliers;
+        map<string, uint32> categoryMaxAuctionCount;
+        map<string, uint64> categoryMultiplierExpireTimes;
+        map<uint32, vector<uint32> > bidders;
+        set<uint32> allBidders;
+        bool updating;
+    };
+};
+
+#define auctionbot ahbot::AhBot::instance()
diff --git a/src/plugins/ahbot/AhBotConfig.cpp b/src/plugins/ahbot/AhBotConfig.cpp
new file mode 100644
index 0000000..02d5f65
--- /dev/null
+++ b/src/plugins/ahbot/AhBotConfig.cpp
@@ -0,0 +1,58 @@
+#include "../pchdef.h"
+#include "AhBotConfig.h"
+std::vector<std::string> split(const std::string &s, char delim);
+
+using namespace std;
+
+AhBotConfig::AhBotConfig()
+{
+}
+
+template <class T>
+void LoadSet(string value, T &res)
+{
+    vector<string> ids = split(value, ',');
+    for (vector<string>::iterator i = ids.begin(); i != ids.end(); i++)
+    {
+        uint32 id = atoi((*i).c_str());
+        if (!id)
+            continue;
+
+        res.insert(id);
+    }
+}
+
+bool AhBotConfig::Initialize()
+{
+    string error;
+    if (!config.LoadInitial("ahbot.conf", error))
+    {
+        sLog->outMessage("ahbot", LOG_LEVEL_INFO, "AhBot is Disabled. Unable to open configuration file ahbot.conf");
+        return false;
+    }
+
+    enabled = config.GetBoolDefault("AhBot.Enabled", true);
+
+    if (!enabled)
+        sLog->outMessage("ahbot", LOG_LEVEL_INFO, "AhBot is Disabled in ahbot.conf");
+
+    guid = (uint64)config.GetIntDefault("AhBot.GUID", 0);
+    updateInterval = config.GetIntDefault("AhBot.UpdateIntervalInSeconds", 300);
+    historyDays = config.GetIntDefault("AhBot.History.Days", 30);
+    itemBuyMinInterval = config.GetIntDefault("AhBot.ItemBuyMinInterval", 600);
+    itemBuyMaxInterval = config.GetIntDefault("AhBot.ItemBuyMaxInterval", 7200);
+    itemSellMinInterval = config.GetIntDefault("AhBot.ItemSellMinInterval", 600);
+    itemSellMaxInterval = config.GetIntDefault("AhBot.ItemSellMaxInterval", 7200);
+    maxSellInterval = config.GetIntDefault("AhBot.MaxSellInterval", 3600 * 8);
+    alwaysAvailableMoney = config.GetIntDefault("AhBot.AlwaysAvailableMoney", 200000);
+    priceMultiplier = config.GetFloatDefault("AhBot.PriceMultiplier", 1.0f);
+    defaultMinPrice = config.GetIntDefault("AhBot.DefaultMinPrice", 20);
+    maxItemLevel = config.GetIntDefault("AhBot.MaxItemLevel", 199);
+    maxRequiredLevel = config.GetIntDefault("AhBot.MaxRequiredLevel", 80);
+    priceQualityMultiplier = config.GetFloatDefault("AhBot.PriceQualityMultiplier", 1.0f);
+    underPriceProbability = config.GetFloatDefault("AhBot.UnderPriceProbability", 0.05f);
+    LoadSet<set<uint32> >(config.GetStringDefault("AhBot.IgnoreItemIds", "49283,52200,8494,6345,6891,2460,37164,34835"), ignoreItemIds);
+
+
+    return enabled;
+}
diff --git a/src/plugins/ahbot/AhBotConfig.h b/src/plugins/ahbot/AhBotConfig.h
new file mode 100644
index 0000000..1826109
--- /dev/null
+++ b/src/plugins/ahbot/AhBotConfig.h
@@ -0,0 +1,93 @@
+#pragma once
+
+#include "../../common/Configuration/Config.h"
+
+using namespace std;
+
+class AhBotConfig
+{
+public:
+    AhBotConfig();
+    static AhBotConfig& instance()
+    {
+        static AhBotConfig instance;
+        return instance;
+    }
+
+public:
+    bool Initialize();
+
+    bool enabled;
+    uint64 guid;
+    uint32 updateInterval;
+    uint32 historyDays, maxSellInterval;
+    uint32 itemBuyMinInterval, itemBuyMaxInterval;
+    uint32 itemSellMinInterval, itemSellMaxInterval;
+    uint32 alwaysAvailableMoney;
+    float priceMultiplier, priceQualityMultiplier;
+    uint32 defaultMinPrice;
+    uint32 maxItemLevel, maxRequiredLevel;
+    float underPriceProbability;
+    std::set<uint32> ignoreItemIds;
+
+    float GetSellPriceMultiplier(string category)
+    {
+        return GetCategoryParameter(sellPriceMultipliers, "PriceMultiplier.Sell", category, 1.0f);
+    }
+
+    float GetBuyPriceMultiplier(string category)
+    {
+        return GetCategoryParameter(buyPriceMultipliers, "PriceMultiplier.Buy", category, 1.0f);
+    }
+
+    float GetItemPriceMultiplier(string name)
+    {
+        return GetCategoryParameter(itemPriceMultipliers, "PriceMultiplier.Item", name, 1.0f);
+    }
+
+    int32 GetMaxAllowedAuctionCount(string category)
+    {
+        return (int32)GetCategoryParameter(maxAuctionCount, "MaxAuctionCount", category, 5);
+    }
+
+    std::string GetStringDefault(const char* name, const char* def)
+    {
+        return config.GetStringDefault(name, def);
+    }
+
+    bool GetBoolDefault(const char* name, const bool def = false)
+    {
+        return config.GetBoolDefault(name, def);
+    }
+
+    int32 GetIntDefault(const char* name, const int32 def)
+    {
+        return config.GetIntDefault(name, def);
+    }
+
+    float GetFloatDefault(const char* name, const float def)
+    {
+        return config.GetFloatDefault(name, def);
+    }
+
+private:
+    float GetCategoryParameter(map<string, float>& cache, string type, string category, float defaultValue)
+    {
+        if (cache.find(category) == cache.end())
+        {
+            ostringstream out; out << "AhBot."<< type << "." << category;
+            cache[category] = config.GetFloatDefault(out.str().c_str(), defaultValue);
+        }
+
+        return cache[category];
+    }
+
+private:
+    ConfigMgr config;
+    map<string, float> sellPriceMultipliers;
+    map<string, float> buyPriceMultipliers;
+    map<string, float> itemPriceMultipliers;
+    map<string, float> maxAuctionCount;
+};
+
+#define sAhBotConfig AhBotConfig::instance()
diff --git a/src/plugins/ahbot/Category.cpp b/src/plugins/ahbot/Category.cpp
new file mode 100644
index 0000000..1dd0ac5
--- /dev/null
+++ b/src/plugins/ahbot/Category.cpp
@@ -0,0 +1,76 @@
+#include "../pchdef.h"
+#include "Category.h"
+#include "ItemBag.h"
+#include "AhBotConfig.h"
+#include "PricingStrategy.h"
+
+using namespace ahbot;
+
+uint32 Category::GetStackCount(ItemTemplate const* proto)
+{
+    if (proto->Quality > ITEM_QUALITY_UNCOMMON)
+        return 1;
+
+    return urand(1, proto->GetMaxStackSize());
+}
+
+uint32 Category::GetMaxAllowedItemAuctionCount(ItemTemplate const* proto)
+{
+    return 0;
+}
+
+uint32 Category::GetMaxAllowedAuctionCount()
+{
+    return sAhBotConfig.GetMaxAllowedAuctionCount(GetName());
+}
+
+PricingStrategy* Category::GetPricingStrategy()
+{
+    if (pricingStrategy)
+        return pricingStrategy;
+
+    ostringstream out; out << "AhBot.PricingStrategy." << GetName();
+    string name = sAhBotConfig.GetStringDefault(out.str().c_str(), "default");
+    return pricingStrategy = PricingStrategyFactory::Create(name, this);
+}
+
+QualityCategoryWrapper::QualityCategoryWrapper(Category* category, uint32 quality) : Category(), quality(quality), category(category)
+{
+    ostringstream out; out << category->GetName() << ".";
+    switch (quality)
+    {
+    case ITEM_QUALITY_POOR:
+        out << "gray";
+        break;
+    case ITEM_QUALITY_NORMAL:
+        out << "white";
+        break;
+    case ITEM_QUALITY_UNCOMMON:
+        out << "green";
+        break;
+    case ITEM_QUALITY_RARE:
+        out << "blue";
+        break;
+    default:
+        out << "epic";
+        break;
+    }
+
+    combinedName = out.str();
+}
+
+bool QualityCategoryWrapper::Contains(ItemTemplate const* proto)
+{
+    return proto->Quality == quality && category->Contains(proto);
+}
+
+uint32 QualityCategoryWrapper::GetMaxAllowedAuctionCount()
+{
+    uint32 count = sAhBotConfig.GetMaxAllowedAuctionCount(combinedName);
+    return count > 0 ? count : category->GetMaxAllowedAuctionCount();
+}
+
+uint32 QualityCategoryWrapper::GetMaxAllowedItemAuctionCount(ItemTemplate const* proto)
+{
+    return category->GetMaxAllowedItemAuctionCount(proto);
+}
diff --git a/src/plugins/ahbot/Category.h b/src/plugins/ahbot/Category.h
new file mode 100644
index 0000000..ed528dd
--- /dev/null
+++ b/src/plugins/ahbot/Category.h
@@ -0,0 +1,354 @@
+#pragma once
+#include "PricingStrategy.h"
+#include "../Entities/Item/ItemPrototype.h"
+
+using namespace std;
+
+namespace ahbot
+{
+    class Category
+    {
+    public:
+        Category() : pricingStrategy(NULL) {}
+        virtual ~Category() { if (pricingStrategy) delete pricingStrategy; }
+
+    public:
+        virtual bool Contains(ItemTemplate const* proto) { return false; }
+        virtual string GetName() { return "default"; }
+        virtual string GetDisplayName() { return GetName(); }
+
+        virtual uint32 GetMaxAllowedAuctionCount();
+        virtual uint32 GetMaxAllowedItemAuctionCount(ItemTemplate const* proto);
+        virtual uint32 GetStackCount(ItemTemplate const* proto);
+
+        virtual PricingStrategy* GetPricingStrategy();
+
+    private:
+        PricingStrategy *pricingStrategy;
+    };
+
+    class Consumable : public Category
+    {
+    public:
+        Consumable() : Category() {}
+
+    public:
+        virtual bool Contains(ItemTemplate const* proto)
+        {
+            return proto->Class == ITEM_CLASS_CONSUMABLE;
+        }
+
+        virtual string GetName() { return "consumable"; }
+
+        virtual uint32 GetMaxAllowedItemAuctionCount(ItemTemplate const* proto)
+        {
+            return 10;
+        }
+
+        virtual uint32 GetStackCount(ItemTemplate const* proto)
+        {
+            if (proto->Quality > ITEM_QUALITY_UNCOMMON)
+                return 1;
+
+            uint32 maxStackSize = proto->GetMaxStackSize();
+            if (maxStackSize == 1)
+                return 1;
+
+            if (maxStackSize <= 10)
+                return urand(1, 10);
+
+            return urand(1, 4) * maxStackSize / 5;
+        }
+    };
+
+    class Quest : public Category
+    {
+    public:
+        Quest() : Category() {}
+
+    public:
+        virtual bool Contains(ItemTemplate const* proto)
+        {
+            return proto->Class == ITEM_CLASS_QUEST;
+        }
+        virtual string GetName() { return "quest"; }
+
+        virtual uint32 GetMaxAllowedItemAuctionCount(ItemTemplate const* proto)
+        {
+            return 5;
+        }
+
+        virtual uint32 GetStackCount(ItemTemplate const* proto)
+        {
+            if (proto->Quality > ITEM_QUALITY_UNCOMMON)
+                return 1;
+
+            uint32 maxStackSize = proto->GetMaxStackSize();
+            if (proto->Quality == ITEM_QUALITY_UNCOMMON && maxStackSize > 10)
+                maxStackSize = urand(1, 10);
+
+            if (maxStackSize > 20)
+                maxStackSize = urand(1, 20);
+
+            return maxStackSize;
+        }
+    };
+
+    class Trade : public Category
+    {
+    public:
+        Trade() : Category() {}
+
+    public:
+        virtual bool Contains(ItemTemplate const* proto)
+        {
+            return proto->Class == ITEM_CLASS_TRADE_GOODS;
+        }
+        virtual string GetName() { return "trade"; }
+
+        virtual uint32 GetMaxAllowedItemAuctionCount(ItemTemplate const* proto)
+        {
+            return 5;
+        }
+
+        virtual uint32 GetStackCount(ItemTemplate const* proto)
+        {
+            uint32 maxStack = proto->GetMaxStackSize();
+            if (maxStack < 2)
+                return maxStack;
+
+            switch (proto->Quality)
+            {
+            case ITEM_QUALITY_NORMAL:
+                return maxStack;
+            case ITEM_QUALITY_UNCOMMON:
+                return urand(1, maxStack);
+            }
+
+            return 1;
+        }
+    };
+
+    class Enchant : public Category
+    {
+    public:
+        Enchant() : Category() {}
+
+    public:
+        virtual bool Contains(ItemTemplate const* proto)
+        {
+            return proto->Class == ITEM_CLASS_PERMANENT && proto->ItemLevel > 1;
+        }
+        virtual string GetName() { return "enchant"; }
+
+        virtual uint32 GetMaxAllowedItemAuctionCount(ItemTemplate const* proto)
+        {
+            return 5;
+        }
+
+        virtual uint32 GetStackCount(ItemTemplate const* proto)
+        {
+            return 1;
+        }
+    };
+
+    class Reagent : public Category
+    {
+    public:
+        Reagent() : Category() {}
+
+    public:
+        virtual bool Contains(ItemTemplate const* proto)
+        {
+            return proto->Class == ITEM_CLASS_REAGENT && proto->ItemLevel > 1;
+        }
+        virtual string GetName() { return "reagent"; }
+    };
+
+    class Recipe : public Category
+    {
+    public:
+        Recipe() : Category() {}
+
+    public:
+        virtual bool Contains(ItemTemplate const* proto)
+        {
+            return proto->Class == ITEM_CLASS_RECIPE && proto->ItemLevel > 1;
+        }
+        virtual string GetName() { return "recipe"; }
+        virtual uint32 GetMaxAllowedItemAuctionCount(ItemTemplate const* proto)
+        {
+            return 1;
+        }
+
+        virtual uint32 GetStackCount(ItemTemplate const* proto)
+        {
+            return 1;
+        }
+    };
+
+    class Equip : public Category
+    {
+    public:
+        Equip() : Category() {}
+
+    public:
+        virtual bool Contains(ItemTemplate const* proto)
+        {
+            return (proto->Class == ITEM_CLASS_WEAPON ||
+                proto->Class == ITEM_CLASS_ARMOR) && proto->ItemLevel > 1;
+        }
+        virtual string GetName() { return "equip"; }
+        virtual uint32 GetMaxAllowedItemAuctionCount(ItemTemplate const* proto)
+        {
+            return 1;
+        }
+
+        virtual uint32 GetStackCount(ItemTemplate const* proto)
+        {
+            return 1;
+        }
+    };
+
+    class Other : public Category
+    {
+    public:
+        Other() : Category() {}
+
+    public:
+        virtual bool Contains(ItemTemplate const* proto)
+        {
+            return proto->Quality > ITEM_QUALITY_POOR && (
+                proto->Class == ITEM_CLASS_MISC ||
+                proto->Class == ITEM_CLASS_GENERIC ||
+                proto->Class == ITEM_CLASS_MONEY) && proto->ItemLevel > 1 && proto->SubClass != ITEM_SUBCLASS_JUNK_MOUNT;
+        }
+        virtual string GetName() { return "other"; }
+
+        virtual uint32 GetMaxAllowedItemAuctionCount(ItemTemplate const* proto)
+        {
+            return 1;
+        }
+
+        virtual uint32 GetStackCount(ItemTemplate const* proto)
+        {
+            return 1;
+        }
+    };
+
+    class Quiver : public Category
+    {
+    public:
+        Quiver() : Category() {}
+
+    public:
+        virtual bool Contains(ItemTemplate const* proto)
+        {
+            return proto->Class == ITEM_CLASS_QUIVER && proto->ItemLevel > 1;
+        }
+
+        virtual string GetName() { return "quiver"; }
+
+        virtual uint32 GetMaxAllowedItemAuctionCount(ItemTemplate const* proto)
+        {
+            return 1;
+        }
+
+        virtual uint32 GetStackCount(ItemTemplate const* proto)
+        {
+            return 1;
+        }
+    };
+
+    class Projectile : public Category
+    {
+    public:
+        Projectile() : Category() {}
+
+    public:
+        virtual bool Contains(ItemTemplate const* proto)
+        {
+            return proto->Class == ITEM_CLASS_PROJECTILE;
+        }
+
+        virtual string GetName() { return "projectile"; }
+
+        virtual uint32 GetMaxAllowedItemAuctionCount(ItemTemplate const* proto)
+        {
+            return 5;
+        }
+
+        virtual uint32 GetStackCount(ItemTemplate const* proto)
+        {
+            return proto->GetMaxStackSize();
+        }
+    };
+
+    class Container : public Category
+    {
+    public:
+        Container() : Category() {}
+
+    public:
+        virtual bool Contains(ItemTemplate const* proto)
+        {
+            return proto->Class == ITEM_CLASS_CONTAINER && proto->ItemLevel > 1;
+        }
+
+        virtual string GetName() { return "container"; }
+
+        virtual uint32 GetMaxAllowedItemAuctionCount(ItemTemplate const* proto)
+        {
+            return 1;
+        }
+
+        virtual uint32 GetStackCount(ItemTemplate const* proto)
+        {
+            return 1;
+        }
+    };
+
+    class Glyph : public Category
+    {
+    public:
+        Glyph() : Category() {}
+
+    public:
+        virtual bool Contains(ItemTemplate const* proto)
+        {
+            return proto->Class == ITEM_CLASS_GLYPH;
+        }
+
+        virtual string GetName() { return "glyph"; }
+
+        virtual uint32 GetMaxAllowedItemAuctionCount(ItemTemplate const* proto)
+        {
+            return 1;
+        }
+
+        virtual uint32 GetStackCount(ItemTemplate const* proto)
+        {
+            return 1;
+        }
+    };
+
+    class QualityCategoryWrapper : public Category
+    {
+    public:
+        QualityCategoryWrapper(Category* category, uint32 quality);
+
+    public:
+        virtual bool Contains(ItemTemplate const* proto);
+        virtual uint32 GetMaxAllowedAuctionCount();
+        virtual string GetName() { return category->GetName(); }
+        virtual string GetDisplayName() { return combinedName; }
+        virtual uint32 GetMaxAllowedItemAuctionCount(ItemTemplate const* proto);
+        virtual uint32 GetStackCount(ItemTemplate const* proto) { return category->GetStackCount(proto); }
+        virtual PricingStrategy* GetPricingStrategy() { return category->GetPricingStrategy(); }
+
+    private:
+        uint32 quality;
+        Category* category;
+        string combinedName;
+    };
+};
diff --git a/src/plugins/ahbot/ConsumableCategory.cpp b/src/plugins/ahbot/ConsumableCategory.cpp
new file mode 100644
index 0000000..2cd06c5
--- /dev/null
+++ b/src/plugins/ahbot/ConsumableCategory.cpp
@@ -0,0 +1,5 @@
+#include "../pchdef.h"
+#include "ConsumableCategory.h"
+#include "ItemBag.h"
+
+using namespace ahbot;
diff --git a/src/plugins/ahbot/ConsumableCategory.h b/src/plugins/ahbot/ConsumableCategory.h
new file mode 100644
index 0000000..6f3051b
--- /dev/null
+++ b/src/plugins/ahbot/ConsumableCategory.h
@@ -0,0 +1,86 @@
+#pragma once
+#include "Category.h"
+
+using namespace std;
+
+namespace ahbot
+{
+    class Alchemy : public Consumable
+    {
+    public:
+        Alchemy() : Consumable() {}
+
+    public:
+        virtual bool Contains(ItemTemplate const* proto)
+        {
+            return Consumable::Contains(proto) &&
+                    (proto->SubClass == ITEM_SUBCLASS_POTION ||
+                    proto->SubClass == ITEM_SUBCLASS_ELIXIR ||
+                    proto->SubClass == ITEM_SUBCLASS_FLASK);
+        }
+
+        virtual string GetName() { return "Alchemy"; }
+    };
+
+    class Scroll : public Consumable
+    {
+    public:
+        Scroll() : Consumable() {}
+
+    public:
+        virtual bool Contains(ItemTemplate const* proto)
+        {
+            return Consumable::Contains(proto) &&
+                    (proto->SubClass == ITEM_SUBCLASS_SCROLL ||
+                    proto->SubClass == ITEM_SUBCLASS_ITEM_ENHANCEMENT);
+        }
+
+        virtual string GetName() { return "Scroll"; }
+    };
+
+    class Food : public Consumable
+    {
+    public:
+        Food() : Consumable() {}
+
+    public:
+        virtual bool Contains(ItemTemplate const* proto)
+        {
+            return Consumable::Contains(proto) &&
+                    proto->SubClass == ITEM_SUBCLASS_FOOD;
+        }
+
+        virtual string GetName() { return "Food"; }
+    };
+
+    class Bandage : public Consumable
+    {
+    public:
+        Bandage() : Consumable() {}
+
+    public:
+        virtual bool Contains(ItemTemplate const* proto)
+        {
+            return Consumable::Contains(proto) &&
+                    proto->SubClass == ITEM_SUBCLASS_BANDAGE;
+        }
+
+        virtual string GetName() { return "Bandage"; }
+    };
+
+    class OtherConsumable : public Consumable
+    {
+    public:
+        OtherConsumable() : Consumable() {}
+
+    public:
+        virtual bool Contains(ItemTemplate const* proto)
+        {
+            return Consumable::Contains(proto) &&
+                    (proto->SubClass == ITEM_SUBCLASS_CONSUMABLE ||
+                    proto->SubClass == ITEM_SUBCLASS_CONSUMABLE_OTHER) && (proto->RequiredSkill || proto->Flags & ITEM_FLAG_UNK6);
+        }
+
+        virtual string GetName() { return "OtherConsumable"; }
+    };
+};
diff --git a/src/plugins/ahbot/ItemBag.cpp b/src/plugins/ahbot/ItemBag.cpp
new file mode 100644
index 0000000..8bf4107
--- /dev/null
+++ b/src/plugins/ahbot/ItemBag.cpp
@@ -0,0 +1,184 @@
+#include "../pchdef.h"
+#include "Category.h"
+#include "ItemBag.h"
+#include "ConsumableCategory.h"
+#include "TradeCategory.h"
+#include "AhBotConfig.h"
+#include "../DataStores/DBCStructure.h"
+#include "../../common/Logging/Log.h"
+#include "../../server/database/Database/QueryResult.h"
+#include "../../server/database/Database/DatabaseEnv.h"
+#include "../../shared/DataStores/DBCStore.h"
+#include "../AuctionHouse/AuctionHouseMgr.h"
+
+using namespace ahbot;
+char * strstri (const char* str1, const char* str2);
+
+CategoryList CategoryList::instance;
+
+CategoryList::CategoryList()
+{
+    Add(new Equip());
+    Add(new ahbot::Quest());
+    Add(new Quiver());
+    Add(new Projectile());
+
+    Add(new Recipe());
+    Add(new Container());
+
+    Add(new Reagent());
+    Add(new Enchant());
+    Add(new Alchemy());
+    Add(new Scroll());
+    Add(new Food());
+    Add(new Bandage());
+
+    Add(new Cloth());
+    Add(new Leather());
+    Add(new Herb());
+    Add(new Metal());
+    Add(new Disenchants());
+    Add(new Meat());
+    Add(new Engineering());
+    Add(new SimpleGems());
+    Add(new SocketGems());
+    Add(new Elemental());
+
+    Add(new Glyph());
+
+    Add(new OtherConsumable());
+    Add(new OtherTrade());
+    Add(new Other());
+}
+
+void CategoryList::Add(Category* category)
+{
+    for (uint32 quality = ITEM_QUALITY_NORMAL; quality <= ITEM_QUALITY_EPIC; ++quality)
+        categories.push_back(new QualityCategoryWrapper(category, quality));
+}
+
+CategoryList::~CategoryList()
+{
+    for (vector<Category*>::const_iterator i = categories.begin(); i != categories.end(); ++i)
+        delete *i;
+}
+
+ItemBag::ItemBag()
+{
+    for (int i = 0; i < CategoryList::instance.size(); i++)
+    {
+        content[CategoryList::instance[i]] = vector<uint32>();
+    }
+}
+
+void ItemBag::Init(bool silent)
+{
+    if (silent)
+    {
+        Load();
+        return;
+    }
+
+    sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Loading/Scanning %s...", GetName().c_str());
+
+    Load();
+
+    for (int i = 0; i < CategoryList::instance.size(); i++)
+    {
+        Category* category = CategoryList::instance[i];
+        Shuffle(content[category]);
+        sLog->outMessage("playerbot", LOG_LEVEL_INFO, "loaded %d %s items", content[category].size(), category->GetDisplayName().c_str());
+    }
+}
+
+int32 ItemBag::GetCount(Category* category, uint32 item)
+{
+    uint32 count = 0;
+
+    vector<uint32>& items = content[category];
+    for (vector<uint32>::iterator i = items.begin(); i != items.end(); ++i)
+    {
+        if (*i == item)
+            count++;
+    }
+
+    return count;
+}
+
+bool ItemBag::Add(ItemTemplate const* proto)
+{
+    if (!proto ||
+        proto->Bonding == BIND_WHEN_PICKED_UP ||
+        proto->Bonding == BIND_QUEST_ITEM)
+        return false;
+
+    if (proto->RequiredLevel > sAhBotConfig.maxRequiredLevel || proto->ItemLevel > sAhBotConfig.maxItemLevel)
+        return false;
+
+    if (proto->Duration & 0x80000000)
+        return false;
+
+    if (sAhBotConfig.ignoreItemIds.find(proto->ItemId) != sAhBotConfig.ignoreItemIds.end())
+        return false;
+
+    if (strstri(proto->Name1.c_str(), "qa") || strstri(proto->Name1.c_str(), "test") || strstri(proto->Name1.c_str(), "deprecated"))
+        return false;
+
+    for (int i = 0; i < CategoryList::instance.size(); i++)
+    {
+        if (CategoryList::instance[i]->Contains(proto))
+        {
+            content[CategoryList::instance[i]].push_back(proto->ItemId);
+            return true;
+        }
+    }
+
+    return false;
+}
+
+void AvailableItemsBag::Load()
+{
+    set<uint32> vendorItems;
+
+      QueryResult results = WorldDatabase.PQuery("SELECT item FROM npc_vendor where maxcount = 0");
+      if (results != NULL)
+      {
+          do
+          {
+              Field* fields = results->Fetch();
+              vendorItems.insert(fields[0].GetUInt32());
+          } while (results->NextRow());
+      }
+
+      ItemTemplateContainer const* itemTemplateContainer = sObjectMgr->GetItemTemplateStore();
+      for (ItemTemplateContainer::const_iterator i = itemTemplateContainer->begin(); i != itemTemplateContainer->end(); ++i)
+      {
+          ItemTemplate const& itemTemplate = i->second;
+          uint32 itemId = i->first;
+
+          if (vendorItems.find(itemTemplate.ItemId) != vendorItems.end())
+              continue;
+
+        Add(sObjectMgr->GetItemTemplate(itemId));
+    }
+
+}
+
+void InAuctionItemsBag::Load()
+{
+    AuctionHouseObject* auctionHouse = sAuctionMgr->GetAuctionsMap(auctionId);
+    for (AuctionHouseObject::AuctionEntryMap::iterator itr = auctionHouse->GetAuctionsBegin(); itr != auctionHouse->GetAuctionsEnd(); ++itr)
+    {
+        ItemTemplate const* proto = sObjectMgr->GetItemTemplate(itr->second->itemEntry);
+        if (!proto)
+            continue;
+
+        Add(proto);
+    }
+}
+
+string InAuctionItemsBag::GetName()
+{
+    ostringstream out; out << "auction house " << auctionId;
+    return out.str();
+}
diff --git a/src/plugins/ahbot/ItemBag.h b/src/plugins/ahbot/ItemBag.h
new file mode 100644
index 0000000..4d11fd4
--- /dev/null
+++ b/src/plugins/ahbot/ItemBag.h
@@ -0,0 +1,82 @@
+#pragma once
+#include "Category.h"
+
+namespace ahbot
+{
+    using namespace std;
+
+    class CategoryList
+    {
+    public:
+        CategoryList();
+        virtual ~CategoryList();
+
+        Category* operator[](int index) { return categories[index]; }
+        int32 size() { return categories.size(); }
+        static CategoryList instance;
+
+    private:
+        void Add(Category* category);
+
+    private:
+        vector<Category*> categories;
+    };
+
+    template<class T>
+    void Shuffle(vector<T>& items) 
+    {
+        uint32 count = items.size();
+        for (uint32 i = 0; i < count * 5; i++)
+        {
+            int i1 = urand(0, count - 1);
+            int i2 = urand(0, count - 1);
+
+            T item = items[i1];
+            items[i1] = items[i2];
+            items[i2] = item;
+        }
+    }
+
+    class ItemBag 
+    {
+    public:
+        ItemBag();
+
+    public:
+        void Init(bool silent = false);
+        vector<uint32>& Get(Category* category) { return content[category]; }
+        int32 GetCount(Category* category) { return content[category].size(); }
+        int32 GetCount(Category* category, uint32 item);
+        bool Add(ItemTemplate const* proto);
+
+    protected:
+        virtual void Load() = 0;
+        virtual string GetName() = 0;
+
+    protected:
+        map<Category*,vector<uint32> > content;
+    };
+
+    class AvailableItemsBag : public ItemBag
+    {
+    public:
+        AvailableItemsBag() {}
+
+    protected:
+        virtual void Load();
+        virtual string GetName() { return "available"; }
+    };
+
+    class InAuctionItemsBag : public ItemBag
+    {
+    public:
+        InAuctionItemsBag(uint32 auctionId) : auctionId(auctionId) {}
+
+    protected:
+        virtual void Load();
+        virtual string GetName();
+
+    private:
+        uint32 auctionId;
+    };
+};
diff --git a/src/plugins/ahbot/PricingStrategy.cpp b/src/plugins/ahbot/PricingStrategy.cpp
new file mode 100644
index 0000000..e51c00e
--- /dev/null
+++ b/src/plugins/ahbot/PricingStrategy.cpp
@@ -0,0 +1,220 @@
+#include "PricingStrategy.h"
+#include "Category.h"
+#include "ItemBag.h"
+#include "AhBotConfig.h"
+#include "../../server/database/Database/DatabaseEnv.h"
+#include "AhBot.h"
+
+using namespace ahbot;
+
+uint32 PricingStrategy::GetSellPrice(ItemTemplate const* proto, uint32 auctionHouse)
+{
+    uint32 now = time(0);
+    double price = sAhBotConfig.GetItemPriceMultiplier(proto->Name1) *
+        auctionbot.GetCategoryMultiplier(category->GetName()) *
+        GetRarityPriceMultiplier(proto->ItemId) *
+        GetCategoryPriceMultiplier(now, auctionHouse) *
+        GetItemPriceMultiplier(proto, now, auctionHouse) *
+        sAhBotConfig.GetSellPriceMultiplier(category->GetName()) *
+        GetDefaultSellPrice(proto);
+    return (uint32)price;
+}
+
+double PricingStrategy::GetMarketPrice(uint32 itemId, uint32 auctionHouse)
+{
+    double marketPrice = 0;
+
+    QueryResult results = CharacterDatabase.PQuery("SELECT price FROM ahbot_price WHERE item = '%u' AND auction_house = '%u'", itemId, auctionHouse);
+    if (results)
+    {
+        marketPrice = results->Fetch()[0].GetFloat();
+    }
+
+    return marketPrice;
+}
+
+uint32 PricingStrategy::GetBuyPrice(ItemTemplate const* proto, uint32 auctionHouse)
+{
+    double marketPrice = GetMarketPrice(proto->ItemId, auctionHouse);
+
+    if (marketPrice > 0)
+        return marketPrice;
+
+    uint32 untilTime = time(0) - 3600 * 12;
+    double price = sAhBotConfig.GetItemPriceMultiplier(proto->Name1) *
+        auctionbot.GetCategoryMultiplier(category->GetName()) *
+        GetRarityPriceMultiplier(proto->ItemId) *
+        GetCategoryPriceMultiplier(untilTime, auctionHouse) *
+        GetItemPriceMultiplier(proto, untilTime, auctionHouse) *
+        sAhBotConfig.GetBuyPriceMultiplier(category->GetName()) *
+        GetDefaultBuyPrice(proto);
+    return (uint32)price;
+}
+
+string PricingStrategy::ExplainSellPrice(ItemTemplate const* proto, uint32 auctionHouse)
+{
+    ostringstream out;
+
+    uint32 untilTime = time(0);
+    out << sAhBotConfig.GetItemPriceMultiplier(proto->Name1) << " (item const) * " <<
+        auctionbot.GetCategoryMultiplier(category->GetName()) << " (random) * " <<
+        GetRarityPriceMultiplier(proto->ItemId) << " (rariry) * " <<
+        GetCategoryPriceMultiplier(untilTime, auctionHouse) << " (category) * " <<
+        GetItemPriceMultiplier(proto, untilTime, auctionHouse) << " (item) * " <<
+        sAhBotConfig.GetSellPriceMultiplier(category->GetName()) << " (sell) * " <<
+        GetDefaultSellPrice(proto) << " (price)";
+    return out.str();
+}
+
+string PricingStrategy::ExplainBuyPrice(ItemTemplate const* proto, uint32 auctionHouse)
+{
+    ostringstream out;
+
+    double marketPrice = GetMarketPrice(proto->ItemId, auctionHouse);
+    if (marketPrice > 0)
+    {
+        out << marketPrice << " (market)";
+        return out.str();
+    }
+
+    uint32 untilTime = time(0) - 3600 * 12;
+    out << sAhBotConfig.GetItemPriceMultiplier(proto->Name1) << " (item const) * " <<
+        auctionbot.GetCategoryMultiplier(category->GetName()) << " (random) * " <<
+        GetRarityPriceMultiplier(proto->ItemId) << " (rarity) * " <<
+        GetCategoryPriceMultiplier(untilTime, auctionHouse) << " (category) * " <<
+        GetItemPriceMultiplier(proto, untilTime, auctionHouse) << " (item) * " <<
+        sAhBotConfig.GetBuyPriceMultiplier(category->GetName()) << " (buy) * " <<
+        GetDefaultBuyPrice(proto) << " (price)";
+    return out.str();
+}
+
+double PricingStrategy::GetRarityPriceMultiplier(uint32 itemId)
+{
+    double result = 1.0;
+
+    QueryResult results = WorldDatabase.PQuery(
+        "select max(Chance) from ( "
+        "select Chance from gameobject_loot_template where item = '%u' "
+        "union select Chance from spell_loot_template where item = '%u' "
+        "union select Chance from disenchant_loot_template where item = '%u' "
+        "union select Chance from fishing_loot_template where item = '%u' "
+        "union select Chance from item_loot_template where item = '%u' "
+        "union select Chance from milling_loot_template where item = '%u' "
+        "union select Chance from pickpocketing_loot_template where item = '%u' "
+        "union select Chance from prospecting_loot_template where item = '%u' "
+        "union select Chance from reference_loot_template where item = '%u' "
+        "union select Chance from skinning_loot_template where item = '%u' "
+        "union select Chance from creature_loot_template where item = '%u' "
+        "union select 0 "
+        ") a",
+        itemId,itemId,itemId,itemId,itemId,itemId,itemId,itemId,itemId,itemId,itemId);
+
+    if (results)
+    {
+        Field* fields = results->Fetch();
+        float chance = fields[0].GetFloat();
+
+        if (chance > 0 && chance <= 90.0)
+            result = sqrt((100.0 - chance) / 10.0);
+    }
+
+    return result >= 1.0 ? result : 1.0;
+}
+
+
+double PricingStrategy::GetCategoryPriceMultiplier(uint32 untilTime, uint32 auctionHouse)
+{
+    double result = 1.0;
+
+    QueryResult results = CharacterDatabase.PQuery(
+        "SELECT count(*) FROM (SELECT round(buytime/3600/24/5) as days FROM ahbot_history WHERE category = '%s' AND won = '1' AND buytime <= '%u' AND auction_house = '%u' group by days) q",
+        category->GetName().c_str(), untilTime, AhBot::factions[auctionHouse]);
+    if (results)
+    {
+        Field* fields = results->Fetch();
+        uint32 count = fields[0].GetUInt32();
+
+        if (count)
+            result += count;
+    }
+
+    return result;
+}
+
+double PricingStrategy::GetMultiplier(double count, double firstBuyTime, double lastBuyTime)
+{
+    double k1 = (double)count / (double)((time(0) - firstBuyTime) / 3600 / 24 + 1);
+    double k2 = (double)count / (double)((time(0) - lastBuyTime) / 3600 / 24 + 1);
+    return max(1.0, k1 + k2) * sAhBotConfig.priceMultiplier;
+}
+
+double PricingStrategy::GetItemPriceMultiplier(ItemTemplate const* proto, uint32 untilTime, uint32 auctionHouse)
+{
+    double result = 1.0;
+
+    QueryResult results = CharacterDatabase.PQuery(
+        "SELECT count(*) FROM (SELECT round(buytime/3600/24/5) as days FROM ahbot_history WHERE won = '1' AND item = '%u' AND buytime <= '%u' AND auction_house = '%u' group by days) q",
+        proto->ItemId, untilTime, AhBot::factions[auctionHouse]);
+    if (results)
+    {
+        Field* fields = results->Fetch();
+        uint32 count = fields[0].GetUInt32();
+
+        if (count)
+            result += count;
+    }
+
+    return result;
+}
+
+uint32 PricingStrategy::ApplyQualityMultiplier(ItemTemplate const* proto, uint32 price)
+{
+    if (proto->Quality == ITEM_QUALITY_POOR)
+        return price;
+
+    return (uint32)(price * sqrt((double)proto->Quality) * sAhBotConfig.priceQualityMultiplier);
+}
+
+uint32 PricingStrategy::GetDefaultBuyPrice(ItemTemplate const* proto)
+{
+    uint32 price = 0;
+
+    if (proto->SellPrice)
+        price = proto->SellPrice;
+    if (proto->BuyPrice)
+        price = max(price, (uint32)(proto->BuyPrice / 4));
+
+    uint32 level = max(proto->ItemLevel, proto->RequiredLevel);
+    if (proto->Class == ITEM_CLASS_QUEST)
+    {
+        double result = 1.0;
+
+        QueryResult results = WorldDatabase.PQuery(
+            "select max(QuestLevel), max(MinLevel) from quest_template where RequiredItemId1 = %u or RequiredItemId2 = %u or RequiredItemId3 = %u or RequiredItemId4 = %u or RequiredItemId5 = %u or RequiredItemId6 = %u",
+            proto->ItemId, proto->ItemId, proto->ItemId, proto->ItemId, proto->ItemId, proto->ItemId);
+        if (results)
+        {
+            Field* fields = results->Fetch();
+            level = max(fields[0].GetUInt32(), fields[1].GetUInt32());
+        }
+    }
+    price = max(price, sAhBotConfig.defaultMinPrice * level * level / 10);
+    price = max(price, (uint32)100);
+
+    return ApplyQualityMultiplier(proto, price) * sAhBotConfig.priceMultiplier;
+}
+
+uint32 PricingStrategy::GetDefaultSellPrice(ItemTemplate const* proto)
+{
+    return GetDefaultBuyPrice(proto);
+}
+
+
+uint32 BuyOnlyRarePricingStrategy::GetBuyPrice(ItemTemplate const* proto, uint32 auctionHouse)
+{
+    if (proto->Quality < ITEM_QUALITY_RARE)
+        return 0;
+
+    return PricingStrategy::GetBuyPrice(proto, auctionHouse);
+}
+
diff --git a/src/plugins/ahbot/PricingStrategy.h b/src/plugins/ahbot/PricingStrategy.h
new file mode 100644
index 0000000..ac94724
--- /dev/null
+++ b/src/plugins/ahbot/PricingStrategy.h
@@ -0,0 +1,55 @@
+#pragma once
+#include "../../game/Entities/Item/ItemPrototype.h"
+
+using namespace std;
+
+namespace ahbot
+{
+    class Category;
+
+    class PricingStrategy
+    {
+    public:
+        PricingStrategy(Category* category) : category(category) {}
+
+    public:
+        virtual uint32 GetSellPrice(ItemTemplate const* proto, uint32 auctionHouse);
+        virtual uint32 GetBuyPrice(ItemTemplate const* proto, uint32 auctionHouse);
+        string ExplainSellPrice(ItemTemplate const* proto, uint32 auctionHouse);
+        string ExplainBuyPrice(ItemTemplate const* proto, uint32 auctionHouse);
+        virtual double GetRarityPriceMultiplier(uint32 itemId);
+
+    protected:
+        virtual uint32 GetDefaultBuyPrice(ItemTemplate const* proto);
+        virtual uint32 GetDefaultSellPrice(ItemTemplate const* proto);
+        virtual uint32 ApplyQualityMultiplier(ItemTemplate const* proto, uint32 price);
+        virtual double GetCategoryPriceMultiplier(uint32 untilTime, uint32 auctionHouse);
+        virtual double GetItemPriceMultiplier(ItemTemplate const* proto, uint32 untilTime, uint32 auctionHouse);
+        double GetMultiplier(double count, double firstBuyTime, double lastBuyTime);
+        double GetMarketPrice(uint32 itemId, uint32 auctionHouse);
+
+    protected:
+        Category* category;
+    };
+
+    class BuyOnlyRarePricingStrategy : public PricingStrategy
+    {
+    public:
+        BuyOnlyRarePricingStrategy(Category* category) : PricingStrategy(category) {}
+
+    public:
+        virtual uint32 GetBuyPrice(ItemTemplate const* proto, uint32 auctionHouse);
+    };
+
+    class PricingStrategyFactory
+    {
+    public:
+        static PricingStrategy* Create(string name, Category* category)
+        {
+            if (name == "buyOnlyRare")
+                return new BuyOnlyRarePricingStrategy(category);
+
+            return new PricingStrategy(category);
+        }
+    };
+};
diff --git a/src/plugins/ahbot/TradeCategory.cpp b/src/plugins/ahbot/TradeCategory.cpp
new file mode 100644
index 0000000..082ee56
--- /dev/null
+++ b/src/plugins/ahbot/TradeCategory.cpp
@@ -0,0 +1,4 @@
+#include "TradeCategory.h"
+#include "ItemBag.h"
+
+using namespace ahbot;
diff --git a/src/plugins/ahbot/TradeCategory.h b/src/plugins/ahbot/TradeCategory.h
new file mode 100644
index 0000000..1d987ba
--- /dev/null
+++ b/src/plugins/ahbot/TradeCategory.h
@@ -0,0 +1,183 @@
+#pragma once
+#include "Category.h"
+
+using namespace std;
+
+namespace ahbot
+{
+    class Cloth : public Trade
+    {
+    public:
+        Cloth() : Trade() {}
+
+    public:
+        virtual bool Contains(ItemTemplate const* proto)
+        {
+            return Trade::Contains(proto) &&
+                    proto->SubClass == ITEM_SUBCLASS_CLOTH;
+        }
+
+        virtual string GetName() { return "Cloth"; }
+    };
+
+    class Leather : public Trade
+    {
+    public:
+        Leather() : Trade() {}
+
+    public:
+        virtual bool Contains(ItemTemplate const* proto)
+        {
+            return Trade::Contains(proto) &&
+                    proto->SubClass == ITEM_SUBCLASS_LEATHER;
+        }
+
+        virtual string GetName() { return "Leather"; }
+    };
+
+    class Elemental : public Trade
+    {
+    public:
+        Elemental() : Trade() {}
+
+    public:
+        virtual bool Contains(ItemTemplate const* proto)
+        {
+            return Trade::Contains(proto) &&
+                proto->SubClass == ITEM_SUBCLASS_ELEMENTAL;
+        }
+
+        virtual string GetName() { return "Elemental"; }
+    };
+
+    class Herb : public Trade
+    {
+    public:
+        Herb() : Trade() {}
+
+    public:
+        virtual bool Contains(ItemTemplate const* proto)
+        {
+            return Trade::Contains(proto) &&
+                    proto->SubClass == ITEM_SUBCLASS_HERB;
+        }
+
+        virtual string GetName() { return "Herb"; }
+    };
+
+    class Meat : public Trade
+    {
+    public:
+        Meat() : Trade() {}
+
+    public:
+        virtual bool Contains(ItemTemplate const* proto)
+        {
+            return Trade::Contains(proto) &&
+                    proto->SubClass == ITEM_SUBCLASS_MEAT;
+        }
+
+        virtual string GetName() { return "Meat"; }
+    };
+
+    class Metal : public Trade
+    {
+    public:
+        Metal() : Trade() {}
+
+    public:
+        virtual bool Contains(ItemTemplate const* proto)
+        {
+            return Trade::Contains(proto) &&
+                    proto->SubClass == ITEM_SUBCLASS_METAL_STONE;
+        }
+
+        virtual string GetName() { return "Metal"; }
+    };
+
+    class Disenchants : public Trade
+    {
+    public:
+        Disenchants() : Trade() {}
+
+    public:
+        virtual bool Contains(ItemTemplate const* proto)
+        {
+            return Trade::Contains(proto) &&
+                    proto->SubClass == ITEM_SUBCLASS_ENCHANTING;
+        }
+
+        virtual string GetName() { return "Disenchants"; }
+    };
+
+    class SimpleGems : public Trade
+    {
+    public:
+        SimpleGems() : Trade() {}
+
+    public:
+        virtual bool Contains(ItemTemplate const* proto)
+        {
+            return proto->Class == ITEM_CLASS_GEM && proto->SubClass == ITEM_SUBCLASS_GEM_SIMPLE;
+        }
+
+        virtual string GetName() { return "SimpleGems"; }
+    };
+
+    class SocketGems : public Trade
+    {
+    public:
+        SocketGems() : Trade() {}
+
+    public:
+        virtual bool Contains(ItemTemplate const* proto)
+        {
+            return proto->Class == ITEM_CLASS_GEM && proto->SubClass != ITEM_SUBCLASS_GEM_SIMPLE;
+        }
+
+        virtual string GetName() { return "SocketGems"; }
+    };
+
+    class Engineering : public Trade
+    {
+    public:
+        Engineering() : Trade() {}
+
+    public:
+        virtual bool Contains(ItemTemplate const* proto)
+        {
+            return Trade::Contains(proto) &&
+                    (proto->SubClass == ITEM_SUBCLASS_PARTS ||
+                    proto->SubClass == ITEM_SUBCLASS_DEVICES ||
+                    proto->SubClass == ITEM_SUBCLASS_MATERIAL ||
+                    proto->SubClass == ITEM_SUBCLASS_EXPLOSIVES);
+        }
+
+        virtual string GetName() { return "Engineering"; }
+    };
+
+    class OtherTrade : public Trade
+    {
+    public:
+        OtherTrade() : Trade() {}
+
+    public:
+        virtual bool Contains(ItemTemplate const* proto)
+        {
+            return Trade::Contains(proto) &&
+                    proto->SubClass != ITEM_SUBCLASS_PARTS &&
+                    proto->SubClass != ITEM_SUBCLASS_DEVICES &&
+                    proto->SubClass != ITEM_SUBCLASS_MATERIAL &&
+                    proto->SubClass != ITEM_SUBCLASS_EXPLOSIVES &&
+                    proto->SubClass != ITEM_SUBCLASS_ENCHANTING &&
+                    proto->SubClass != ITEM_SUBCLASS_JEWELCRAFTING &&
+                    proto->SubClass != ITEM_SUBCLASS_METAL_STONE &&
+                    proto->SubClass != ITEM_SUBCLASS_MEAT &&
+                    proto->SubClass != ITEM_SUBCLASS_HERB &&
+                    proto->SubClass != ITEM_SUBCLASS_LEATHER &&
+                    proto->SubClass != ITEM_SUBCLASS_CLOTH;
+        }
+
+        virtual string GetName() { return "OtherTrade"; }
+    };
+};
diff --git a/src/plugins/ahbot/ahbot.conf.dist.in b/src/plugins/ahbot/ahbot.conf.dist.in
new file mode 100644
index 0000000..f50ffc2
--- /dev/null
+++ b/src/plugins/ahbot/ahbot.conf.dist.in
@@ -0,0 +1,209 @@
+################################################
+# MANGOS Auction House Bot Configuration file  #
+################################################
+
+[AhbotConf]
+ConfVersion=2010102201
+
+###################################################################################################################
+# AUCTION HOUSE BOT SETTINGS
+#
+###################################################################################################################
+
+# Disable original AuctionHouseBot
+AuctionHouseBot.Seller.Enabled = 0
+AuctionHouseBot.Buyer.Enabled = 0
+
+# Replace with the new AhBot
+AhBot.Enabled = 1
+
+# Should be used only if random bots are disabled
+# AhBot.GUID = 0
+
+# 199 for 80, 80 for 70, 70 for 60, ..., 25 for 20
+AhBot.MaxItemLevel = 199
+# Same as level cap
+AhBot.MaxRequiredLevel = 80
+
+# Ignore items by ID
+AhBot.IgnoreItemIds = 49283,52200,8494,6345,6891,2460
+
+AhBot.PriceMultiplier = 1.0
+AhBot.DefaultMinPrice = 20
+AhBot.PriceQualityMultiplier = 1.0
+AhBot.AlwaysAvailableMoney = 2000000
+
+# Buy/sell delays
+AhBot.ItemBuyMinInterval = 7200
+AhBot.ItemBuyMaxInterval = 28800
+AhBot.ItemSellMinInterval = 7200
+AhBot.ItemSellMaxInterval = 28800
+
+#
+# Items
+#
+
+AhBot.MaxAuctionCount.equip.green = 0
+AhBot.MaxAuctionCount.equip.blue = 40
+AhBot.MaxAuctionCount.equip.epic = 20
+AhBot.PriceMultiplier.Sell.equip = 1.0
+AhBot.PriceMultiplier.Buy.equip = 1.0
+AhBot.PricingStrategy.equip = buyOnlyRare
+
+AhBot.MaxAuctionCount.reagent.white = 6
+AhBot.MaxAuctionCount.reagent.green = 2
+AhBot.PriceMultiplier.Sell.reagent = 1.0
+AhBot.PriceMultiplier.Buy.reagent = 1.0
+AhBot.PricingStrategy.reagent = buyOnlyRare
+
+AhBot.MaxAuctionCount.other.white = 20
+AhBot.MaxAuctionCount.other.green = 10
+AhBot.MaxAuctionCount.other.blue = 6
+AhBot.PriceMultiplier.Sell.other = 1.0
+AhBot.PriceMultiplier.Buy.other = 1.0
+AhBot.PricingStrategy.other = buyOnlyRare
+
+#
+# Container
+#
+
+AhBot.MaxAuctionCount.quiver.white = 2
+AhBot.PriceMultiplier.Sell.quiver = 1.0
+AhBot.PriceMultiplier.Buy.quiver = 1.0
+AhBot.PricingStrategy.quiver = buyOnlyRare
+
+AhBot.MaxAuctionCount.container.white = 6
+AhBot.MaxAuctionCount.container.green = 2
+AhBot.MaxAuctionCount.container.blue = 2
+AhBot.PriceMultiplier.Sell.container = 1.0
+AhBot.PriceMultiplier.Buy.container = 1.0
+
+#
+# Glyph
+#
+
+AhBot.MaxAuctionCount.glyph.white = 50
+AhBot.MaxAuctionCount.glyph.green = 20
+AhBot.MaxAuctionCount.glyph.blue = 10
+AhBot.PriceMultiplier.Sell.glyph = 1.0
+AhBot.PriceMultiplier.Buy.glyph = 1.0
+
+#
+# Quest
+#
+
+AhBot.MaxAuctionCount.quest.white = 14
+AhBot.MaxAuctionCount.quest.green = 2
+AhBot.MaxAuctionCount.quest.blue = 2
+AhBot.PriceMultiplier.Sell.quest = 1.0
+AhBot.PriceMultiplier.Buy.quest = 1.0
+
+#
+# Consumables
+#
+
+AhBot.MaxAuctionCount.alchemy.white = 50
+AhBot.MaxAuctionCount.alchemy.green = 20
+AhBot.MaxAuctionCount.alchemy.blue = 10
+AhBot.PriceMultiplier.Sell.alchemy = 1.0
+AhBot.PriceMultiplier.Buy.alchemy = 1.0
+
+AhBot.MaxAuctionCount.scroll.white = 40
+AhBot.MaxAuctionCount.scroll.green = 6
+AhBot.MaxAuctionCount.scroll.blue = 4
+AhBot.PriceMultiplier.Sell.scroll = 1.0
+AhBot.PriceMultiplier.Buy.scroll = 1.0
+
+AhBot.MaxAuctionCount.Food.white = 40
+AhBot.PriceMultiplier.Sell.Food = 1.0
+AhBot.PriceMultiplier.Buy.Food = 1.0
+
+AhBot.MaxAuctionCount.bandage.white = 10
+AhBot.PriceMultiplier.Sell.bandage = 1.0
+AhBot.PriceMultiplier.Buy.bandage = 1.0
+
+AhBot.MaxAuctionCount.OtherConsumable.white = 20
+AhBot.MaxAuctionCount.OtherConsumable.green = 10
+AhBot.MaxAuctionCount.OtherConsumable.blue = 5
+AhBot.PriceMultiplier.Sell.OtherConsumable = 1.0
+AhBot.PriceMultiplier.Buy.OtherConsumable = 1.0
+
+#
+# Recipe
+#
+
+AhBot.MaxAuctionCount.recipe.white = 8
+AhBot.MaxAuctionCount.recipe.green = 4
+AhBot.MaxAuctionCount.recipe.blue = 2
+AhBot.MaxAuctionCount.recipe.epic = 2
+AhBot.PriceMultiplier.Sell.recipe = 1.0
+AhBot.PriceMultiplier.Buy.recipe = 1.0
+
+#
+# Trade
+#
+
+AhBot.MaxAuctionCount.Elemental.white = 30
+AhBot.MaxAuctionCount.Elemental.green = 20
+AhBot.MaxAuctionCount.Elemental.blue = 6
+AhBot.PriceMultiplier.Sell.Elemental = 1.0
+AhBot.PriceMultiplier.Buy.Elemental = 1.0
+
+AhBot.MaxAuctionCount.Cloth.white = 50
+AhBot.MaxAuctionCount.Cloth.green = 14
+AhBot.MaxAuctionCount.Cloth.blue = 6
+AhBot.PriceMultiplier.Sell.Cloth = 1.0
+AhBot.PriceMultiplier.Buy.Cloth = 1.0
+
+AhBot.MaxAuctionCount.Leather.white = 50
+AhBot.MaxAuctionCount.Leather.green = 14
+AhBot.MaxAuctionCount.Leather.blue = 6
+AhBot.PriceMultiplier.Sell.Leather = 1.0
+AhBot.PriceMultiplier.Buy.Leather = 1.0
+
+AhBot.MaxAuctionCount.Herb.white = 50
+AhBot.MaxAuctionCount.Herb.green = 14
+AhBot.PriceMultiplier.Sell.Herb = 1.0
+AhBot.PriceMultiplier.Buy.Herb = 1.0
+
+AhBot.MaxAuctionCount.Meat.white = 50
+AhBot.PriceMultiplier.Sell.Meat = 1.0
+AhBot.PriceMultiplier.Buy.Meat = 1.0
+
+AhBot.MaxAuctionCount.Metal.white = 50
+AhBot.MaxAuctionCount.Metal.green = 14
+AhBot.MaxAuctionCount.Metal.blue = 6
+AhBot.PriceMultiplier.Sell.Metal = 1.0
+AhBot.PriceMultiplier.Buy.Metal = 1.0
+
+AhBot.MaxAuctionCount.Engineering.white = 20
+AhBot.MaxAuctionCount.Engineering.green = 10
+AhBot.MaxAuctionCount.Engineering.blue = 4
+AhBot.PriceMultiplier.Sell.Engineering = 1.0
+AhBot.PriceMultiplier.Buy.Engineering = 1.0
+
+AhBot.MaxAuctionCount.Disenchants.white = 40
+AhBot.MaxAuctionCount.Disenchants.green = 20
+AhBot.MaxAuctionCount.Disenchants.blue = 20
+AhBot.PriceMultiplier.Sell.Disenchants = 1.0
+AhBot.PriceMultiplier.Buy.Disenchants = 1.0
+
+AhBot.MaxAuctionCount.SimpleGems.green = 30
+AhBot.MaxAuctionCount.SimpleGems.blue = 20
+AhBot.MaxAuctionCount.SimpleGems.epic = 4
+AhBot.PriceMultiplier.Sell.SimpleGems = 1.0
+AhBot.PriceMultiplier.Buy.SimpleGems = 1.0
+
+AhBot.MaxAuctionCount.SocketGems.green = 50
+AhBot.MaxAuctionCount.SocketGems.blue = 20
+AhBot.MaxAuctionCount.SocketGems.epic = 4
+AhBot.PriceMultiplier.Sell.SocketGems = 1.0
+AhBot.PriceMultiplier.Buy.SocketGems = 1.0
+
+AhBot.MaxAuctionCount.OtherTrade.white = 10
+AhBot.PriceMultiplier.Sell.OtherTrade = 1.0
+AhBot.PriceMultiplier.Buy.OtherTrade = 1.0
+
+AhBot.PriceMultiplier.Sell.projectile = 1.0
+AhBot.PriceMultiplier.Buy.projectile = 1.0
+AhBot.PricingStrategy.projectile = buyOnlyRare
diff --git a/src/plugins/pch/pch.cpp b/src/plugins/pch/pch.cpp
new file mode 100644
index 0000000..1d9f38c
--- /dev/null
+++ b/src/plugins/pch/pch.cpp
@@ -0,0 +1 @@
+#include "pch.h"
diff --git a/src/plugins/pch/pch.h b/src/plugins/pch/pch.h
new file mode 100644
index 0000000..c7c6ca5
--- /dev/null
+++ b/src/plugins/pch/pch.h
@@ -0,0 +1,10 @@
+//add here most rarely modified headers to speed up debug build compilation
+
+#include "Common.h"
+#include "MapManager.h"
+#include "Log.h"
+#include "ObjectAccessor.h"
+#include "ObjectDefines.h"
+#include "Opcodes.h"
+#include "SharedDefines.h"
+#include "ObjectMgr.h"
diff --git a/src/plugins/pchdef.h b/src/plugins/pchdef.h
new file mode 100644
index 0000000..f58aae9
--- /dev/null
+++ b/src/plugins/pchdef.h
@@ -0,0 +1,4 @@
+#ifndef PCHDEF_H_
+#define PCHDEF_H_
+
+#endif /* PCHDEF_H_ */
diff --git a/src/plugins/playerbot/AiFactory.cpp b/src/plugins/playerbot/AiFactory.cpp
new file mode 100644
index 0000000..859d166
--- /dev/null
+++ b/src/plugins/playerbot/AiFactory.cpp
@@ -0,0 +1,229 @@
+#include "../pchdef.h"
+#include "playerbot.h"
+#include "AiFactory.h"
+#include "strategy/Engine.h"
+
+#include "strategy/priest/PriestAiObjectContext.h"
+#include "strategy/mage/MageAiObjectContext.h"
+#include "strategy/warlock/WarlockAiObjectContext.h"
+#include "strategy/warrior/WarriorAiObjectContext.h"
+#include "strategy/shaman/ShamanAiObjectContext.h"
+#include "strategy/paladin/PaladinAiObjectContext.h"
+#include "strategy/druid/DruidAiObjectContext.h"
+#include "strategy/hunter/HunterAiObjectContext.h"
+#include "strategy/rogue/RogueAiObjectContext.h"
+#include "../Entities/Player/Player.h"
+#include "PlayerbotAIConfig.h"
+#include "RandomPlayerbotMgr.h"
+
+
+AiObjectContext* AiFactory::createAiObjectContext(Player* player, PlayerbotAI* ai)
+{
+    switch (player->getClass())
+    {
+    case CLASS_PRIEST:
+        return new PriestAiObjectContext(ai);
+        break;
+    case CLASS_MAGE:
+        return new MageAiObjectContext(ai);
+        break;
+    case CLASS_WARLOCK:
+        return new WarlockAiObjectContext(ai);
+        break;
+    case CLASS_WARRIOR:
+        return new WarriorAiObjectContext(ai);
+        break;
+    case CLASS_SHAMAN:
+        return new ShamanAiObjectContext(ai);
+        break;
+    case CLASS_PALADIN:
+        return new PaladinAiObjectContext(ai);
+        break;
+    case CLASS_DRUID:
+        return new DruidAiObjectContext(ai);
+        break;
+    case CLASS_HUNTER:
+        return new HunterAiObjectContext(ai);
+        break;
+    case CLASS_ROGUE:
+        return new RogueAiObjectContext(ai);
+        break;
+    }
+    return new AiObjectContext(ai);
+}
+
+int AiFactory::GetPlayerSpecTab(Player* player)
+{
+    int c0 = 0, c1 = 0, c2 = 0;
+    PlayerTalentMap& talentMap = player->GetTalentMap(0);
+    for (PlayerTalentMap::iterator i = talentMap.begin(); i != talentMap.end(); ++i)
+    {
+        uint32 spellId = i->first;
+        TalentSpellPos const* talentPos = GetTalentSpellPos(spellId);
+        if(!talentPos)
+            continue;
+
+        TalentEntry const* talentInfo = sTalentStore.LookupEntry(talentPos->talent_id);
+        if (!talentInfo)
+            continue;
+
+        uint32 const* talentTabIds = GetTalentTabPages(player->getClass());
+        if (talentInfo->TalentTab == talentTabIds[0]) c0++;
+        if (talentInfo->TalentTab == talentTabIds[1]) c1++;
+        if (talentInfo->TalentTab == talentTabIds[2]) c2++;
+    }
+
+    if (c0 >= c1 && c0 >= c2)
+        return 0;
+
+    if (c1 >= c0 && c1 >= c2)
+        return 1;
+
+    return 2;
+}
+
+void AiFactory::AddDefaultCombatStrategies(Player* player, PlayerbotAI* const facade, Engine* engine)
+{
+    int tab = GetPlayerSpecTab(player);
+
+    engine->addStrategies("attack weak", "racials", "chat", "default", "aoe", "potions", "cast time", "conserve mana", "duel", "pvp", NULL);
+
+    switch (player->getClass())
+    {
+        case CLASS_PRIEST:
+            if (tab == 2)
+            {
+                engine->addStrategies("dps", "threat", NULL);
+                if (player->getLevel() > 19)
+                    engine->addStrategy("dps debuff");
+            }
+            else
+                engine->addStrategy("heal");
+
+            engine->addStrategy("flee");
+            break;
+        case CLASS_MAGE:
+            if (tab == 0)
+                engine->addStrategies("arcane", "threat", NULL);
+            else if (tab == 1)
+                engine->addStrategies("fire", "fire aoe", "threat", NULL);
+            else
+                engine->addStrategies("frost", "frost aoe", "threat", NULL);
+
+            engine->addStrategy("flee");
+            break;
+        case CLASS_WARRIOR:
+            if (tab == 2)
+                engine->addStrategies("tank", "tank aoe", NULL);
+            else
+                engine->addStrategies("dps", "threat", NULL);
+            break;
+        case CLASS_SHAMAN:
+            if (tab == 0)
+                engine->addStrategies("caster", "caster aoe", "bmana", "threat", "flee", NULL);
+            else if (tab == 2)
+                engine->addStrategies("heal", "bmana", "flee", NULL);
+            else
+                engine->addStrategies("dps", "melee aoe", "bdps", "threat", NULL);
+            break;
+        case CLASS_PALADIN:
+            if (tab == 1)
+                engine->addStrategies("tank", "tank aoe", "barmor", NULL);
+            else
+                engine->addStrategies("dps", "bdps", "threat", NULL);
+            break;
+        case CLASS_DRUID:
+            if (tab == 0)
+            {
+                engine->addStrategies("caster", "caster aoe", "threat", "flee", NULL);
+                if (player->getLevel() > 19)
+                    engine->addStrategy("caster debuff");
+            }
+            else if (tab == 2)
+                engine->addStrategies("heal", "flee", NULL);
+            else
+                engine->addStrategies("bear", "tank aoe", "threat", "flee", NULL);
+            break;
+        case CLASS_HUNTER:
+            engine->addStrategies("dps", "bdps", "threat", NULL);
+            if (player->getLevel() > 19)
+                engine->addStrategy("dps debuff");
+            break;
+        case CLASS_ROGUE:
+            engine->addStrategies("dps", "threat", NULL);
+            break;
+        case CLASS_WARLOCK:
+            if (tab == 1)
+                engine->addStrategies("tank", "threat", NULL);
+            else
+                engine->addStrategies("dps", "threat", NULL);
+
+            if (player->getLevel() > 19)
+                engine->addStrategy("dps debuff");
+
+            engine->addStrategy("flee");
+            break;
+    }
+
+    if (sRandomPlayerbotMgr.IsRandomBot(player) && !player->GetGroup())
+    {
+        engine->ChangeStrategy(sPlayerbotAIConfig.randomBotCombatStrategies);
+        if (player->getClass() == CLASS_DRUID && player->getLevel() < 20)
+            engine->addStrategies("bear", NULL);
+    }
+}
+
+Engine* AiFactory::createCombatEngine(Player* player, PlayerbotAI* const facade, AiObjectContext* AiObjectContext) {
+	Engine* engine = new Engine(facade, AiObjectContext);
+    AddDefaultCombatStrategies(player, facade, engine);
+    return engine;
+}
+
+void AiFactory::AddDefaultNonCombatStrategies(Player* player, PlayerbotAI* const facade, Engine* nonCombatEngine)
+{
+    int tab = GetPlayerSpecTab(player);
+
+    switch (player->getClass()){
+        case CLASS_PALADIN:
+        case CLASS_HUNTER:
+        case CLASS_SHAMAN:
+            nonCombatEngine->addStrategy("bmana");
+            break;
+        case CLASS_MAGE:
+            if (tab == 1)
+                nonCombatEngine->addStrategy("bdps");
+            else
+                nonCombatEngine->addStrategy("bmana");
+            break;
+    }
+    nonCombatEngine->addStrategies("nc", "attack weak", "food", "stay", "chat",
+            "default", "quest", "loot", "gather", "duel", "emote", "lfg", NULL);
+
+    if (sRandomPlayerbotMgr.IsRandomBot(player) && !player->GetGroup())
+    {
+        nonCombatEngine->ChangeStrategy(sPlayerbotAIConfig.randomBotNonCombatStrategies);
+    }
+
+}
+
+Engine* AiFactory::createNonCombatEngine(Player* player, PlayerbotAI* const facade, AiObjectContext* AiObjectContext) {
+	Engine* nonCombatEngine = new Engine(facade, AiObjectContext);
+
+    AddDefaultNonCombatStrategies(player, facade, nonCombatEngine);
+	return nonCombatEngine;
+}
+
+void AiFactory::AddDefaultDeadStrategies(Player* player, PlayerbotAI* const facade, Engine* deadEngine)
+{
+    deadEngine->addStrategies("dead", "stay", "chat", "default", "follow", NULL);
+    if (sRandomPlayerbotMgr.IsRandomBot(player) && !player->GetGroup())
+    {
+        deadEngine->removeStrategy("follow");
+    }
+}
+
+Engine* AiFactory::createDeadEngine(Player* player, PlayerbotAI* const facade, AiObjectContext* AiObjectContext) {
+    Engine* deadEngine = new Engine(facade, AiObjectContext);
+    AddDefaultDeadStrategies(player, facade, deadEngine);
+    return deadEngine;
+}
diff --git a/src/plugins/playerbot/AiFactory.h b/src/plugins/playerbot/AiFactory.h
new file mode 100644
index 0000000..a101092
--- /dev/null
+++ b/src/plugins/playerbot/AiFactory.h
@@ -0,0 +1,20 @@
+#pragma once
+
+class Player;
+
+using namespace ai;
+
+class AiFactory
+{
+public:
+    static AiObjectContext* createAiObjectContext(Player* player, PlayerbotAI* ai);
+	static Engine* createCombatEngine(Player* player, PlayerbotAI* const facade, AiObjectContext* AiObjectContext);
+	static Engine* createNonCombatEngine(Player* player, PlayerbotAI* const facade, AiObjectContext* AiObjectContext);
+    static Engine* createDeadEngine(Player* player, PlayerbotAI* const facade, AiObjectContext* AiObjectContext);
+    static void AddDefaultNonCombatStrategies(Player* player, PlayerbotAI* const facade, Engine* nonCombatEngine);
+    static void AddDefaultDeadStrategies(Player* player, PlayerbotAI* const facade, Engine* deadEngine);
+    static void AddDefaultCombatStrategies(Player* player, PlayerbotAI* const facade, Engine* engine);
+
+public:
+    static int GetPlayerSpecTab(Player* player);
+};
diff --git a/src/plugins/playerbot/ChatFilter.cpp b/src/plugins/playerbot/ChatFilter.cpp
new file mode 100644
index 0000000..8d9656c
--- /dev/null
+++ b/src/plugins/playerbot/ChatFilter.cpp
@@ -0,0 +1,257 @@
+#include "../pchdef.h"
+#include "playerbot.h"
+#include "ChatFilter.h"
+#include "strategy/values/RtiTargetValue.h"
+
+using namespace ai;
+using namespace std;
+
+string ChatFilter::Filter(string message)
+{
+    if (message.find("@") == string::npos)
+        return message;
+
+    return message.substr(message.find(" ") + 1);
+}
+
+class StrategyChatFilter : public ChatFilter
+{
+public:
+    StrategyChatFilter(PlayerbotAI* ai) : ChatFilter(ai) {}
+
+    virtual string Filter(string message)
+    {
+        Player* bot = ai->GetBot();
+
+        bool tank = message.find("@tank") == 0;
+        if (tank && !ai->IsTank(bot))
+            return "";
+
+        bool dps = message.find("@dps") == 0;
+        if (dps && ai->IsTank(bot))
+            return "";
+
+        bool heal = message.find("@heal") == 0;
+        if (heal && !ai->IsHeal(bot))
+            return "";
+
+        if (tank || dps)
+            return ChatFilter::Filter(message);
+
+        return message;
+    }
+};
+
+class LevelChatFilter : public ChatFilter
+{
+public:
+    LevelChatFilter(PlayerbotAI* ai) : ChatFilter(ai) {}
+
+    virtual string Filter(string message)
+    {
+        Player* bot = ai->GetBot();
+
+        if (message[0] != '@')
+            return message;
+
+        if (message.find("-") != string::npos)
+        {
+            int fromLevel = atoi(message.substr(message.find("@") + 1, message.find("-")).c_str());
+            int toLevel = atoi(message.substr(message.find("-") + 1, message.find(" ")).c_str());
+
+            if (bot->getLevel() >= fromLevel && bot->getLevel() <= toLevel)
+                return ChatFilter::Filter(message);
+
+            return message;
+        }
+
+		int level = atoi(message.substr(message.find("@") + 1, message.find(" ")).c_str());
+        if (bot->getLevel() == level)
+            return ChatFilter::Filter(message);
+
+        return message;
+    }
+};
+
+class CombatTypeChatFilter : public ChatFilter
+{
+public:
+    CombatTypeChatFilter(PlayerbotAI* ai) : ChatFilter(ai) {}
+
+    virtual string Filter(string message)
+    {
+        Player* bot = ai->GetBot();
+
+        bool melee = message.find("@melee") == 0;
+        bool ranged = message.find("@ranged") == 0;
+
+        if (!melee && !ranged)
+            return message;
+
+        switch (bot->getClass())
+        {
+            case CLASS_WARRIOR:
+            case CLASS_PALADIN:
+            case CLASS_ROGUE:
+            case CLASS_DEATH_KNIGHT:
+                if (ranged)
+                    return "";
+                break;
+
+            case CLASS_HUNTER:
+            case CLASS_PRIEST:
+            case CLASS_MAGE:
+            case CLASS_WARLOCK:
+                if (melee)
+                    return "";
+                break;
+
+            case CLASS_DRUID:
+                if (ranged && ai->IsTank(bot))
+                    return "";
+                if (melee && !ai->IsTank(bot))
+                    return "";
+                break;
+
+            case CLASS_SHAMAN:
+                if (melee && ai->IsHeal(bot))
+                    return "";
+                if (ranged && !ai->IsHeal(bot))
+                    return "";
+                break;
+        }
+
+        return ChatFilter::Filter(message);
+    }
+};
+
+class RtiChatFilter : public ChatFilter
+{
+public:
+    RtiChatFilter(PlayerbotAI* ai) : ChatFilter(ai)
+    {
+        rtis.push_back("@star");
+        rtis.push_back("@circle");
+        rtis.push_back("@diamond");
+        rtis.push_back("@triangle");
+        rtis.push_back("@moon");
+        rtis.push_back("@square");
+        rtis.push_back("@cross");
+        rtis.push_back("@skull");
+    }
+
+    virtual string Filter(string message)
+    {
+        Player* bot = ai->GetBot();
+        Group *group = bot->GetGroup();
+        if(!group)
+            return message;
+
+        bool found = false;
+        for (list<string>::iterator i = rtis.begin(); i != rtis.end(); i++)
+        {
+            string rti = *i;
+
+            bool isRti = message.find(rti) == 0;
+            if (!isRti)
+                continue;
+
+            ObjectGuid rtiTarget = group->GetTargetIcon(RtiTargetValue::GetRtiIndex(rti.substr(1)));
+            if (bot->GetGUID() == rtiTarget)
+                return ChatFilter::Filter(message);
+
+            Unit* target = *ai->GetAiObjectContext()->GetValue<Unit*>("current target");
+            if (!target)
+                return "";
+
+            if (target->GetGUID() != rtiTarget)
+                return "";
+
+            if (found |= isRti)
+                break;
+        }
+
+        if (found)
+            return ChatFilter::Filter(message);
+
+        return message;
+    }
+
+private:
+    list<string> rtis;
+};
+
+class ClassChatFilter : public ChatFilter
+{
+public:
+    ClassChatFilter(PlayerbotAI* ai) : ChatFilter(ai)
+    {
+        classNames["@death_knight"] = CLASS_DEATH_KNIGHT;
+        classNames["@druid"] = CLASS_DRUID;
+        classNames["@hunter"] = CLASS_HUNTER;
+        classNames["@mage"] = CLASS_MAGE;
+        classNames["@paladin"] = CLASS_PALADIN;
+        classNames["@priest"] = CLASS_PRIEST;
+        classNames["@rogue"] = CLASS_ROGUE;
+        classNames["@shaman"] = CLASS_SHAMAN;
+        classNames["@warlock"] = CLASS_WARLOCK;
+        classNames["@warrior"] = CLASS_WARRIOR;
+    }
+
+    virtual string Filter(string message)
+    {
+        Player* bot = ai->GetBot();
+
+        bool found = false;
+        for (map<string, uint8>::iterator i = classNames.begin(); i != classNames.end(); i++)
+        {
+            bool isClass = message.find(i->first) == 0;
+            if (isClass && bot->getClass() != i->second)
+                return "";
+
+            if (found |= isClass)
+                break;
+        }
+
+        if (found)
+            return ChatFilter::Filter(message);
+
+        return message;
+    }
+
+private:
+    map<string, uint8> classNames;
+};
+
+
+
+CompositeChatFilter::CompositeChatFilter(PlayerbotAI* ai) : ChatFilter(ai)
+{
+    filters.push_back(new StrategyChatFilter(ai));
+    filters.push_back(new ClassChatFilter(ai));
+    filters.push_back(new RtiChatFilter(ai));
+    filters.push_back(new CombatTypeChatFilter(ai));
+    filters.push_back(new LevelChatFilter(ai));
+}
+
+CompositeChatFilter::~CompositeChatFilter()
+{
+    for (list<ChatFilter*>::iterator i = filters.begin(); i != filters.end(); i++)
+        delete (*i);
+}
+
+string CompositeChatFilter::Filter(string message)
+{
+    for (int j = 0; j < filters.size(); ++j)
+    {
+        for (list<ChatFilter*>::iterator i = filters.begin(); i != filters.end(); i++)
+        {
+            message = (*i)->Filter(message);
+            if (message.empty())
+                break;
+        }
+    }
+
+    return message;
+}
+
diff --git a/src/plugins/playerbot/ChatFilter.h b/src/plugins/playerbot/ChatFilter.h
new file mode 100644
index 0000000..16dde4d
--- /dev/null
+++ b/src/plugins/playerbot/ChatFilter.h
@@ -0,0 +1,24 @@
+#pragma once
+
+using namespace std;
+
+namespace ai
+{
+    class ChatFilter : public PlayerbotAIAware
+    {
+    public:
+        ChatFilter(PlayerbotAI* ai) : PlayerbotAIAware(ai) {}
+        virtual string Filter(string message);
+    };
+
+    class CompositeChatFilter : public ChatFilter
+    {
+    public:
+        CompositeChatFilter(PlayerbotAI* ai);
+        virtual ~CompositeChatFilter();
+        string Filter(string message);
+
+    private:
+        list<ChatFilter*> filters;
+    };
+};
diff --git a/src/plugins/playerbot/ChatHelper.cpp b/src/plugins/playerbot/ChatHelper.cpp
new file mode 100644
index 0000000..a84a55c
--- /dev/null
+++ b/src/plugins/playerbot/ChatHelper.cpp
@@ -0,0 +1,450 @@
+#include "../pchdef.h"
+#include "playerbot.h"
+#include "ChatHelper.h"
+
+using namespace ai;
+using namespace std;
+
+map<string, uint32> ChatHelper::consumableSubClasses;
+map<string, uint32> ChatHelper::tradeSubClasses;
+map<string, uint32> ChatHelper::itemQualities;
+map<string, uint32> ChatHelper::slots;
+map<string, ChatMsg> ChatHelper::chats;
+map<uint8, string> ChatHelper::classes;
+map<uint8, string> ChatHelper::races;
+map<uint8, map<uint8, string> > ChatHelper::specs;
+
+template<class T>
+static bool substrContainsInMap(string searchTerm, map<string, T> searchIn)
+{
+    for (typename map<string, T>::iterator i = searchIn.begin(); i != searchIn.end(); ++i)
+    {
+		string term = i->first;
+		if (term.size() > 1 && searchTerm.find(term) != string::npos)
+            return true;
+    }
+
+    return false;
+}
+
+ChatHelper::ChatHelper(PlayerbotAI* ai) : PlayerbotAIAware(ai)
+{
+    itemQualities["poor"] = ITEM_QUALITY_POOR;
+    itemQualities["gray"] = ITEM_QUALITY_POOR;
+    itemQualities["normal"] = ITEM_QUALITY_NORMAL;
+    itemQualities["white"] = ITEM_QUALITY_NORMAL;
+    itemQualities["uncommon"] = ITEM_QUALITY_UNCOMMON;
+    itemQualities["green"] = ITEM_QUALITY_UNCOMMON;
+    itemQualities["rare"] = ITEM_QUALITY_RARE;
+    itemQualities["blue"] = ITEM_QUALITY_RARE;
+    itemQualities["epic"] = ITEM_QUALITY_EPIC;
+    itemQualities["violet"] = ITEM_QUALITY_EPIC;
+
+    consumableSubClasses["potion"] = ITEM_SUBCLASS_POTION;
+    consumableSubClasses["elixir"] = ITEM_SUBCLASS_ELIXIR;
+    consumableSubClasses["flask"] = ITEM_SUBCLASS_FLASK;
+    consumableSubClasses["scroll"] = ITEM_SUBCLASS_SCROLL;
+    consumableSubClasses["food"] = ITEM_SUBCLASS_FOOD;
+    consumableSubClasses["bandage"] = ITEM_SUBCLASS_BANDAGE;
+    consumableSubClasses["enchant"] = ITEM_SUBCLASS_CONSUMABLE_OTHER;
+
+    tradeSubClasses["cloth"] = ITEM_SUBCLASS_CLOTH;
+    tradeSubClasses["leather"] = ITEM_SUBCLASS_LEATHER;
+    tradeSubClasses["metal"] = ITEM_SUBCLASS_METAL_STONE;
+    tradeSubClasses["stone"] = ITEM_SUBCLASS_METAL_STONE;
+    tradeSubClasses["ore"] = ITEM_SUBCLASS_METAL_STONE;
+    tradeSubClasses["meat"] = ITEM_SUBCLASS_MEAT;
+    tradeSubClasses["herb"] = ITEM_SUBCLASS_HERB;
+    tradeSubClasses["elemental"] = ITEM_SUBCLASS_ELEMENTAL;
+    tradeSubClasses["disenchants"] = ITEM_SUBCLASS_ENCHANTING;
+    tradeSubClasses["enchanting"] = ITEM_SUBCLASS_ENCHANTING;
+    tradeSubClasses["gems"] = ITEM_SUBCLASS_JEWELCRAFTING;
+    tradeSubClasses["jewels"] = ITEM_SUBCLASS_JEWELCRAFTING;
+    tradeSubClasses["jewelcrafting"] = ITEM_SUBCLASS_JEWELCRAFTING;
+
+    slots["head"] = EQUIPMENT_SLOT_HEAD;
+    slots["neck"] = EQUIPMENT_SLOT_NECK;
+    slots["shoulder"] = EQUIPMENT_SLOT_SHOULDERS;
+    slots["shirt"] = EQUIPMENT_SLOT_BODY;
+    slots["chest"] = EQUIPMENT_SLOT_CHEST;
+    slots["waist"] = EQUIPMENT_SLOT_WAIST;
+    slots["legs"] = EQUIPMENT_SLOT_LEGS;
+    slots["feet"] = EQUIPMENT_SLOT_FEET;
+    slots["wrist"] = EQUIPMENT_SLOT_WRISTS;
+    slots["hands"] = EQUIPMENT_SLOT_HANDS;
+    slots["finger 1"] = EQUIPMENT_SLOT_FINGER1;
+    slots["finger 2"] = EQUIPMENT_SLOT_FINGER2;
+    slots["trinket 1"] = EQUIPMENT_SLOT_TRINKET1;
+    slots["trinket 2"] = EQUIPMENT_SLOT_TRINKET2;
+    slots["back"] = EQUIPMENT_SLOT_BACK;
+    slots["main hand"] = EQUIPMENT_SLOT_MAINHAND;
+    slots["off hand"] = EQUIPMENT_SLOT_OFFHAND;
+    slots["ranged"] = EQUIPMENT_SLOT_RANGED;
+    slots["tabard"] = EQUIPMENT_SLOT_TABARD;
+
+    chats["party"] = CHAT_MSG_PARTY;
+    chats["p"] = CHAT_MSG_PARTY;
+    chats["guild"] = CHAT_MSG_GUILD;
+    chats["g"] = CHAT_MSG_GUILD;
+    chats["raid"] = CHAT_MSG_RAID;
+    chats["r"] = CHAT_MSG_RAID;
+    chats["whisper"] = CHAT_MSG_WHISPER;
+    chats["w"] = CHAT_MSG_WHISPER;
+
+    classes[CLASS_DRUID] = "druid";
+    specs[CLASS_DRUID][0] = "balance";
+    specs[CLASS_DRUID][1] = "feral combat";
+    specs[CLASS_DRUID][2] = "restoration";
+
+    classes[CLASS_HUNTER] = "hunter";
+    specs[CLASS_HUNTER][0] = "beast mastery";
+    specs[CLASS_HUNTER][1] = "marksmanship";
+    specs[CLASS_HUNTER][2] = "survival";
+
+    classes[CLASS_MAGE] = "mage";
+    specs[CLASS_MAGE][0] = "arcane";
+    specs[CLASS_MAGE][1] = "fire";
+    specs[CLASS_MAGE][2] = "frost";
+
+    classes[CLASS_PALADIN] = "paladin";
+    specs[CLASS_PALADIN][0] = "holy";
+    specs[CLASS_PALADIN][1] = "protection";
+    specs[CLASS_PALADIN][2] = "retribution";
+
+    classes[CLASS_PRIEST] = "priest";
+    specs[CLASS_PRIEST][0] = "discipline";
+    specs[CLASS_PRIEST][1] = "holy";
+    specs[CLASS_PRIEST][2] = "shadow";
+
+    classes[CLASS_ROGUE] = "rogue";
+    specs[CLASS_ROGUE][0] = "assasination";
+    specs[CLASS_ROGUE][1] = "combat";
+    specs[CLASS_ROGUE][2] = "subtlety";
+
+    classes[CLASS_SHAMAN] = "shaman";
+    specs[CLASS_SHAMAN][0] = "elemental";
+    specs[CLASS_SHAMAN][1] = "enhancement";
+    specs[CLASS_SHAMAN][2] = "restoration";
+
+    classes[CLASS_WARLOCK] = "warlock";
+    specs[CLASS_WARLOCK][0] = "affliction";
+    specs[CLASS_WARLOCK][1] = "demonology";
+    specs[CLASS_WARLOCK][2] = "destruction";
+
+    classes[CLASS_WARRIOR] = "warrior";
+    specs[CLASS_WARRIOR][0] = "arms";
+    specs[CLASS_WARRIOR][1] = "fury";
+    specs[CLASS_WARRIOR][2] = "protection";
+
+    races[RACE_BLOODELF] = "Blood Elf";
+    races[RACE_DRAENEI] = "Draenei";
+    races[RACE_DWARF] = "Dwarf";
+    races[RACE_GNOME] = "Gnome";
+    races[RACE_HUMAN] = "Human";
+    races[RACE_NIGHTELF] = "Night Elf";
+    races[RACE_ORC] = "Orc";
+    races[RACE_TAUREN] = "Tauren";
+    races[RACE_TROLL] = "Troll";
+    races[RACE_UNDEAD_PLAYER] = "Undead";
+}
+
+string ChatHelper::formatMoney(uint32 copper)
+{
+    ostringstream out;
+	if (!copper)
+	{
+		out << "0|TInterface\\AddOns\\AtlasLoot\\Images\\bronze:0|t";
+		return out.str();
+	}
+
+    uint32 gold = uint32(copper / 10000);
+    copper -= (gold * 10000);
+    uint32 silver = uint32(copper / 100);
+    copper -= (silver * 100);
+    out << " ";
+    if (gold > 0)
+        out << gold <<  "|TInterface\\AddOns\\AtlasLoot\\Images\\gold:0|t ";
+    if (silver > 0 && gold < 50)
+        out << silver <<  "|TInterface\\AddOns\\AtlasLoot\\Images\\silver:0|t ";
+	if (copper > 0 && gold < 10)
+		out << copper <<  "|TInterface\\AddOns\\AtlasLoot\\Images\\bronze:0|t";
+
+    return out.str();
+}
+
+uint32 ChatHelper::parseMoney(string& text)
+{
+    // if user specified money in ##g##s##c format
+    string acum = "";
+    uint32 copper = 0;
+    for (uint8 i = 0; i < text.length(); i++)
+    {
+        if (text[i] == 'g')
+        {
+            copper += (atol(acum.c_str()) * 100 * 100);
+            acum = "";
+        }
+        else if (text[i] == 'c')
+        {
+            copper += atol(acum.c_str());
+            acum = "";
+        }
+        else if (text[i] == 's')
+        {
+            copper += (atol(acum.c_str()) * 100);
+            acum = "";
+        }
+        else if (text[i] == ' ')
+            break;
+        else if (text[i] >= 48 && text[i] <= 57)
+            acum += text[i];
+        else
+        {
+            copper = 0;
+            break;
+        }
+    }
+    return copper;
+}
+
+ItemIds ChatHelper::parseItems(string& text)
+{
+    ItemIds itemIds;
+
+    uint8 pos = 0;
+    while (true)
+    {
+        int i = text.find("Hitem:", pos);
+        if (i == -1)
+            break;
+        pos = i + 6;
+        int endPos = text.find(':', pos);
+        if (endPos == -1)
+            break;
+        string idC = text.substr(pos, endPos - pos);
+        uint32 id = atol(idC.c_str());
+        pos = endPos;
+        if (id)
+            itemIds.insert(id);
+    }
+
+    return itemIds;
+}
+
+string ChatHelper::formatQuest(Quest const* quest)
+{
+    ostringstream out;
+    out << "|cFFFFFF00|Hquest:" << quest->GetQuestId() << ':' << quest->GetQuestLevel() << "|h[" << quest->GetTitle() << "]|h|r";
+    return out.str();
+}
+
+string ChatHelper::formatGameobject(GameObject* go)
+{
+    ostringstream out;
+    out << "|cFFFFFF00|Hfound:" << go->GetGUID() << ":" << go->GetEntry() << ":" <<  "|h[" << go->GetGOInfo()->name << "]|h|r";
+    return out.str();
+}
+
+string ChatHelper::formatSpell(SpellInfo const *sInfo)
+{
+    ostringstream out;
+    out << "|cffffffff|Hspell:" << sInfo->Id << "|h[" << sInfo->SpellName[LOCALE_enUS] << "]|h|r";
+    return out.str();
+}
+
+string ChatHelper::formatItem(ItemTemplate const * proto, int count)
+{
+    char color[32];
+    sprintf(color, "%x", ItemQualityColors[proto->Quality]);
+
+    ostringstream out;
+    out << "|c" << color << "|Hitem:" << proto->ItemId
+        << ":0:0:0:0:0:0:0" << "|h[" << proto->Name1
+        << "]|h|r";
+
+    if (count > 1)
+        out << "x" << count;
+
+    return out.str();
+}
+
+ChatMsg ChatHelper::parseChat(string& text)
+{
+    if (chats.find(text) != chats.end())
+        return chats[text];
+
+    return CHAT_MSG_SYSTEM;
+}
+
+string ChatHelper::formatChat(ChatMsg chat)
+{
+    switch (chat)
+    {
+    case CHAT_MSG_GUILD:
+        return "guild";
+    case CHAT_MSG_PARTY:
+        return "party";
+    case CHAT_MSG_WHISPER:
+        return "whisper";
+    case CHAT_MSG_RAID:
+        return "raid";
+    }
+
+    return "unknown";
+}
+
+
+uint32 ChatHelper::parseSpell(string& text)
+{
+    PlayerbotChatHandler handler(ai->GetBot());
+    return handler.extractSpellId(text);
+}
+
+list<ObjectGuid> ChatHelper::parseGameobjects(string& text)
+{
+    list<ObjectGuid> gos;
+    //    Link format
+    //    |cFFFFFF00|Hfound:" << guid << ':'  << entry << ':'  <<  "|h[" << gInfo->name << "]|h|r";
+    //    |cFFFFFF00|Hfound:9582:1731|h[Copper Vein]|h|r
+
+    uint8 pos = 0;
+    while (true)
+    {
+        // extract GO guid
+        int i = text.find("Hfound:", pos);     // base H = 11
+        if (i == -1)     // break if error
+            break;
+
+        pos = i + 7;     //start of window in text 11 + 7 = 18
+        int endPos = text.find(':', pos);     // end of window in text 22
+        if (endPos == -1)     //break if error
+            break;
+        istringstream stream(text.substr(pos, endPos - pos));
+        uint64 guid; stream >> guid;
+
+        // extract GO entry
+        pos = endPos + 1;
+        endPos = text.find(':', pos);     // end of window in text
+        if (endPos == -1)     //break if error
+            break;
+
+        std::string entryC = text.substr(pos, endPos - pos);     // get string within window i.e entry
+        uint32 entry = atol(entryC.c_str());     // convert ascii to float
+
+        ObjectGuid lootCurrent = ObjectGuid(guid);
+
+        if (guid)
+            gos.push_back(lootCurrent);
+    }
+
+    return gos;
+}
+
+string ChatHelper::formatQuestObjective(string name, int available, int required)
+{
+    ostringstream out;
+    out << "|cFFFFFFFF" << name << (available >= required ? "|c0000FF00: " : "|c00FF0000: ")
+        << available << "/" << required << "|r";
+
+    return out.str();
+}
+
+
+uint32 ChatHelper::parseItemQuality(string text)
+{
+    if (itemQualities.find(text) == itemQualities.end())
+        return MAX_ITEM_QUALITY;
+
+    return itemQualities[text];
+}
+
+bool ChatHelper::parseItemClass(string text, uint32 *itemClass, uint32 *itemSubClass)
+{
+    if (text == "questitem")
+    {
+        *itemClass = ITEM_CLASS_QUEST;
+        *itemSubClass = ITEM_SUBCLASS_QUEST;
+        return true;
+    }
+
+    if (consumableSubClasses.find(text) != consumableSubClasses.end())
+    {
+        *itemClass = ITEM_CLASS_CONSUMABLE;
+        *itemSubClass = consumableSubClasses[text];
+        return true;
+    }
+
+    if (tradeSubClasses.find(text) != tradeSubClasses.end())
+    {
+        *itemClass = ITEM_CLASS_TRADE_GOODS;
+        *itemSubClass = tradeSubClasses[text];
+        return true;
+    }
+
+    return false;
+}
+
+uint32 ChatHelper::parseSlot(string text)
+{
+    if (slots.find(text) != slots.end())
+        return slots[text];
+
+    return EQUIPMENT_SLOT_END;
+}
+
+bool ChatHelper::parseable(string text)
+{
+    return text.find("|H") != string::npos ||
+            text == "questitem" ||
+            substrContainsInMap<uint32>(text, consumableSubClasses) ||
+            substrContainsInMap<uint32>(text, tradeSubClasses) ||
+            substrContainsInMap<uint32>(text, itemQualities) ||
+            substrContainsInMap<uint32>(text, slots) ||
+            substrContainsInMap<ChatMsg>(text, chats) ||
+            parseMoney(text) > 0;
+}
+
+string ChatHelper::formatClass(Player* player, int spec)
+{
+    uint8 cls = player->getClass();
+
+    ostringstream out;
+    out << specs[cls][spec] << " (";
+
+    int c0 = 0, c1 = 0, c2 = 0;
+    PlayerTalentMap& talentMap = player->GetTalentMap(0);
+    for (PlayerTalentMap::iterator i = talentMap.begin(); i != talentMap.end(); ++i)
+    {
+        uint32 spellId = i->first;
+        TalentSpellPos const* talentPos = GetTalentSpellPos(spellId);
+        if(!talentPos)
+            continue;
+
+        TalentEntry const* talentInfo = sTalentStore.LookupEntry(talentPos->talent_id);
+
+        if (!talentInfo)
+            continue;
+
+        uint32 const* talentTabIds = GetTalentTabPages(player->getClass());
+        if (talentInfo->TalentTab == talentTabIds[0]) c0++;
+        if (talentInfo->TalentTab == talentTabIds[1]) c1++;
+        if (talentInfo->TalentTab == talentTabIds[2]) c2++;
+    }
+
+    out << (c0 ? "|h|cff00ff00" : "") << c0 << "|h|cffffffff/";
+    out << (c1 ? "|h|cff00ff00" : "") << c1 << "|h|cffffffff/";
+    out << (c2 ? "|h|cff00ff00" : "") << c2 << "|h|cffffffff";
+
+    out <<  ") " << classes[cls];
+    return out.str();
+}
+
+string ChatHelper::formatClass(uint8 cls)
+{
+    return classes[cls];
+}
+
+string ChatHelper::formatRace(uint8 race)
+{
+    return races[race];
+}
diff --git a/src/plugins/playerbot/ChatHelper.h b/src/plugins/playerbot/ChatHelper.h
new file mode 100644
index 0000000..3d493d1
--- /dev/null
+++ b/src/plugins/playerbot/ChatHelper.h
@@ -0,0 +1,52 @@
+#pragma once
+
+using namespace std;
+
+typedef set<uint32> ItemIds;
+typedef set<uint32> SpellIds;
+
+#include "../pchdef.h"
+
+namespace ai
+{
+    class ChatHelper : public PlayerbotAIAware
+    {
+    public:
+        ChatHelper(PlayerbotAI* ai);
+
+    public:
+        static string formatMoney(uint32 copper);
+        static uint32 parseMoney(string& text);
+        static ItemIds parseItems(string& text);
+        uint32 parseSpell(string& text);
+        static string formatQuest(Quest const* quest);
+        static string formatItem(ItemTemplate const * proto, int count = 0);
+        static string formatSpell(SpellInfo const *sInfo);
+        static string formatGameobject(GameObject* go);
+        static string formatQuestObjective(string name, int available, int required);
+        static list<ObjectGuid> parseGameobjects(string& text);
+
+        static ChatMsg parseChat(string& text);
+        static string formatChat(ChatMsg chat);
+
+        static string formatClass(Player* player, int spec);
+        static string formatClass(uint8 cls);
+        static string formatRace(uint8 race);
+
+        static uint32 parseItemQuality(string text);
+        static bool parseItemClass(string text, uint32 *itemClass, uint32 *itemSubClass);
+        static uint32 parseSlot(string text);
+
+        static bool parseable(string text);
+
+    private:
+        static map<string, uint32> consumableSubClasses;
+        static map<string, uint32> tradeSubClasses;
+        static map<string, uint32> itemQualities;
+        static map<string, uint32> slots;
+        static map<string, ChatMsg> chats;
+        static map<uint8, string> classes;
+        static map<uint8, string> races;
+        static map<uint8, map<uint8, string> > specs;
+    };
+};
diff --git a/src/plugins/playerbot/FleeManager.cpp b/src/plugins/playerbot/FleeManager.cpp
new file mode 100644
index 0000000..f7d9591
--- /dev/null
+++ b/src/plugins/playerbot/FleeManager.cpp
@@ -0,0 +1,174 @@
+#include "../pchdef.h"
+#include "playerbot.h"
+#include "FleeManager.h"
+#include "PlayerbotAIConfig.h"
+#include "../Groups/Group.h"
+#include "strategy/values/LastMovementValue.h"
+
+using namespace ai;
+using namespace std;
+
+void FleeManager::calculateDistanceToPlayers(FleePoint *point)
+{
+	Group* group = bot->GetGroup();
+	if (!group)
+		return;
+
+	for (GroupReference *gref = group->GetFirstMember(); gref; gref = gref->next())
+    {
+		Player* player = gref->GetSource();
+		if(player == bot)
+			continue;
+
+		float d = player->GetDistance(point->x, point->y, point->z);
+		point->toAllPlayers.probe(d);
+		switch (player->getClass()) {
+			case CLASS_HUNTER:
+			case CLASS_MAGE:
+			case CLASS_PRIEST:
+			case CLASS_WARLOCK:
+				point->toRangedPlayers.probe(d);
+				break;
+			case CLASS_PALADIN:
+			case CLASS_ROGUE:
+			case CLASS_WARRIOR:
+				point->toMeleePlayers.probe(d);
+				break;
+		}
+	}
+}
+
+void FleeManager::calculateDistanceToCreatures(FleePoint *point)
+{
+	RangePair &distance = point->toCreatures;
+
+	list<ObjectGuid> units = *bot->GetPlayerbotAI()->GetAiObjectContext()->GetValue<list<ObjectGuid> >("possible targets");
+	for (list<ObjectGuid>::iterator i = units.begin(); i != units.end(); ++i)
+    {
+		Unit* unit = bot->GetPlayerbotAI()->GetUnit(*i);
+		if (!unit)
+		    continue;
+
+		float d = unit->GetDistance(point->x, point->y, point->z);
+		if (d <= sPlayerbotAIConfig.tooCloseDistance)
+		    continue;
+
+		distance.probe(d);
+	}
+}
+
+void FleeManager::calculatePossibleDestinations(list<FleePoint*> &points)
+{
+	float botPosX = bot->GetPositionX();
+	float botPosY = bot->GetPositionY();
+	float botPosZ = bot->GetPositionZ();
+
+	for (float distance = maxAllowedDistance; distance > sPlayerbotAIConfig.tooCloseDistance + 5.0f; distance -= 5.0f)
+	{
+        for (float angle = followAngle; angle < followAngle + 2 * M_PI; angle += M_PI / 4)
+        {
+            float x = botPosX + cos(angle) * distance;
+            float y = botPosY + sin(angle) * distance;
+
+            if (!bot->IsWithinLOS(x, y, botPosZ))
+                continue;
+
+            FleePoint *point = new FleePoint(x, y, botPosZ);
+            calculateDistanceToPlayers(point);
+            calculateDistanceToCreatures(point);
+            points.push_back(point);
+        }
+	}
+}
+
+void FleeManager::cleanup(list<FleePoint*> &points)
+{
+	for (list<FleePoint*>::iterator i = points.begin(); i != points.end(); i++)
+    {
+		FleePoint* point = *i;
+		delete point;
+	}
+	points.clear();
+}
+
+bool FleePoint::isReasonable()
+{
+	return toAllPlayers.max <= sPlayerbotAIConfig.sightDistance && toCreatures.min >= sPlayerbotAIConfig.tooCloseDistance;
+}
+
+bool FleePoint::isBetterByCreatures(FleePoint* other)
+{
+    return toCreatures.min > 0 && other->toCreatures.min > 0 &&
+            (toCreatures.min - other->toCreatures.min) >= 0;
+}
+
+bool FleePoint::isBetterByAll(FleePoint* other)
+{
+    bool isFartherFromCreatures = isBetterByCreatures(other);
+    bool isNearerToRangedPlayers = toRangedPlayers.max > 0 && other->toRangedPlayers.max > 0 &&
+            (toRangedPlayers.max - other->toRangedPlayers.max) <= 0;
+    bool isFartherFromMeleePlayers = toMeleePlayers.min > 0 && other->toMeleePlayers.min > 0 &&
+            (toMeleePlayers.min - other->toMeleePlayers.min) >= 0;
+
+    return isFartherFromCreatures && (isNearerToRangedPlayers || isFartherFromMeleePlayers);
+}
+
+FleePoint* FleeManager::selectOptimalDestination(list<FleePoint*> &points)
+{
+	FleePoint* byCreatures = NULL;
+	for (list<FleePoint*>::iterator i = points.begin(); i != points.end(); i++)
+    {
+		FleePoint* point = *i;
+		if (point->isReasonable() && (!byCreatures || point->isBetterByCreatures(byCreatures)))
+			byCreatures = point;
+	}
+
+	FleePoint* byAll = NULL;
+	for (list<FleePoint*>::iterator i = points.begin(); i != points.end(); i++)
+    {
+		FleePoint* point = *i;
+		if (point->isReasonable() && (!byAll || point->isBetterByAll(byAll)))
+		    byAll = point;
+	}
+
+	if (byAll && byCreatures)
+	{
+	    if (byAll->isBetterByCreatures(byCreatures))
+	        return byAll;
+	}
+
+	return byCreatures;
+}
+
+bool FleeManager::CalculateDestination(float* rx, float* ry, float* rz)
+{
+    LastMovement& lastMovement = *bot->GetPlayerbotAI()->GetAiObjectContext()->GetValue<LastMovement&>("last movement");
+    if ((lastMovement.lastMoveToX || lastMovement.lastMoveToY) && !lastMovement.lastFollow)
+    {
+        FleePoint last(lastMovement.lastMoveToX, lastMovement.lastMoveToY, lastMovement.lastMoveToZ);
+        if (last.isReasonable())
+        {
+            *rx = lastMovement.lastMoveToX;
+            *ry = lastMovement.lastMoveToY;
+            *rz = lastMovement.lastMoveToZ;
+            return true;
+        }
+    }
+
+	list<FleePoint*> points;
+	calculatePossibleDestinations(points);
+
+    FleePoint* point = selectOptimalDestination(points);
+    if (!point)
+    {
+        cleanup(points);
+        return false;
+    }
+
+	*rx = point->x;
+	*ry = point->y;
+	*rz = bot->GetPositionZ();
+
+    cleanup(points);
+	return true;
+}
diff --git a/src/plugins/playerbot/FleeManager.h b/src/plugins/playerbot/FleeManager.h
new file mode 100644
index 0000000..5b49c66
--- /dev/null
+++ b/src/plugins/playerbot/FleeManager.h
@@ -0,0 +1,82 @@
+#pragma once
+
+using namespace std;
+
+class Player;
+
+namespace ai
+{
+    class Engine;
+
+	class RangePair {
+	public:
+		RangePair() {
+			min = -1.0f;
+			max = -1.0f;
+		}
+
+	public:
+		float min;
+		float max;
+
+	public:
+		void probe(float d) {
+			if (min < 0 || min > d)
+				min = d;
+
+			if (max < 0 || max < d)
+				max = d;
+		}
+	};
+
+	class FleePoint {
+	public:
+		FleePoint(float x, float y, float z) {
+			this->x = x;
+			this->y = y;
+			this->z = z;
+		}
+
+    public:
+        bool isReasonable();
+        bool isBetterByCreatures(FleePoint* other);
+        bool isBetterByAll(FleePoint* other);
+
+	public:
+		float x;
+		float y;
+		float z;
+
+		RangePair toCreatures;
+		RangePair toAllPlayers;
+		RangePair toMeleePlayers;
+		RangePair toRangedPlayers;
+	};
+
+	class FleeManager
+	{
+	public:
+		FleeManager(Player* bot, float maxAllowedDistance, float followAngle) {
+			this->bot = bot;
+			this->maxAllowedDistance = maxAllowedDistance;
+			this->followAngle = followAngle;
+		}
+
+	public:
+		bool CalculateDestination(float* rx, float* ry, float* rz);
+
+	private:
+		void calculatePossibleDestinations(list<FleePoint*> &points);
+		void calculateDistanceToPlayers(FleePoint *point);
+		void calculateDistanceToCreatures(FleePoint *point);
+		void cleanup(list<FleePoint*> &points);
+		FleePoint* selectOptimalDestination(list<FleePoint*> &points);
+		bool isBetterThan(FleePoint* point, FleePoint* other);
+
+	private:
+		Player* bot;
+		float maxAllowedDistance;
+		float followAngle;
+	};
+
+};
diff --git a/src/plugins/playerbot/GuildTaskMgr.cpp b/src/plugins/playerbot/GuildTaskMgr.cpp
new file mode 100644
index 0000000..9a8b00a
--- /dev/null
+++ b/src/plugins/playerbot/GuildTaskMgr.cpp
@@ -0,0 +1,726 @@
+#include "../pchdef.h"
+#include "playerbot.h"
+#include "PlayerbotAIConfig.h"
+#include "GuildTaskMgr.h"
+
+#include "../../plugins/ahbot/AhBot.h"
+#include "../../server/game/Guilds/GuildMgr.h"
+#include "../../server/database/Database/DatabaseEnv.h"
+#include "../../server/game/Mails/Mail.h"
+#include "PlayerbotAI.h"
+
+#include "../../plugins/ahbot/AhBotConfig.h"
+#include "RandomItemMgr.h"
+
+char * strstri (const char* str1, const char* str2);
+
+enum GuildTaskType
+{
+    GUILD_TASK_TYPE_NONE = 0,
+    GUILD_TASK_TYPE_ITEM = 1,
+    GUILD_TASK_TYPE_KILL = 2
+};
+
+GuildTaskMgr::GuildTaskMgr()
+{
+}
+
+GuildTaskMgr::~GuildTaskMgr()
+{
+}
+
+void GuildTaskMgr::Update(Player* player, Player* guildMaster)
+{
+    if (!sPlayerbotAIConfig.guildTaskEnabled)
+        return;
+
+    uint32 guildId = guildMaster->GetGuildId();
+    if (!guildId || !guildMaster->GetPlayerbotAI() || !guildMaster->GetGuild())
+        return;
+
+    if (!player->IsFriendlyTo(guildMaster))
+        return;
+
+    DenyReason reason = PLAYERBOT_DENY_NONE;
+    PlayerbotSecurityLevel secLevel = guildMaster->GetPlayerbotAI()->GetSecurity()->LevelFor(player, &reason);
+    if (secLevel == PLAYERBOT_SECURITY_DENY_ALL || (secLevel == PLAYERBOT_SECURITY_TALK && reason != PLAYERBOT_DENY_FAR))
+    {
+        sLog->outMessage("gtask", LOG_LEVEL_DEBUG, "%s / %s: skipping guild task update - not enough security level, reason = %u",
+                guildMaster->GetGuild()->GetName().c_str(), player->GetName().c_str(), reason);
+        return;
+    }
+
+    uint32 owner = (uint32)player->GetGUID().GetRawValue();
+
+    uint32 activeTask = GetTaskValue(owner, guildId, "activeTask");
+    if (!activeTask)
+    {
+        SetTaskValue(owner, guildId, "killTask", 0, 0);
+        SetTaskValue(owner, guildId, "itemTask", 0, 0);
+        SetTaskValue(owner, guildId, "itemCount", 0, 0);
+        SetTaskValue(owner, guildId, "killTask", 0, 0);
+        SetTaskValue(owner, guildId, "killCount", 0, 0);
+        SetTaskValue(owner, guildId, "payment", 0, 0);
+        SetTaskValue(owner, guildId, "thanks", 1, 2 * sPlayerbotAIConfig.maxGuildTaskChangeTime);
+        SetTaskValue(owner, guildId, "reward", 1, 2 * sPlayerbotAIConfig.maxGuildTaskChangeTime);
+
+        uint32 task = CreateTask(owner, guildId);
+
+        if (task == GUILD_TASK_TYPE_NONE)
+        {
+            sLog->outMessage("gtask", LOG_LEVEL_ERROR, "%s / %s: error creating guild task",
+                    guildMaster->GetGuild()->GetName().c_str(), player->GetName().c_str());
+        }
+
+        uint32 time = urand(sPlayerbotAIConfig.minGuildTaskChangeTime, sPlayerbotAIConfig.maxGuildTaskChangeTime);
+        SetTaskValue(owner, guildId, "activeTask", task, time);
+        SetTaskValue(owner, guildId, "advertisement", 1,
+                urand(sPlayerbotAIConfig.minGuildTaskAdvertisementTime, sPlayerbotAIConfig.maxGuildTaskAdvertisementTime));
+
+        sLog->outMessage("gtask", LOG_LEVEL_DEBUG, "%s / %s: guild task %u is set for %u secs",
+                guildMaster->GetGuild()->GetName().c_str(), player->GetName().c_str(),
+                task, time);
+        return;
+    }
+
+    uint32 advertisement = GetTaskValue(owner, guildId, "advertisement");
+    if (!advertisement)
+    {
+        sLog->outMessage("gtask", LOG_LEVEL_DEBUG, "%s / %s: sending advertisement",
+                guildMaster->GetGuild()->GetName().c_str(), player->GetName().c_str());
+        if (SendAdvertisement(owner, guildId))
+        {
+            SetTaskValue(owner, guildId, "advertisement", 1,
+                    urand(sPlayerbotAIConfig.minGuildTaskAdvertisementTime, sPlayerbotAIConfig.maxGuildTaskAdvertisementTime));
+        }
+        else
+        {
+            sLog->outMessage("gtask", LOG_LEVEL_ERROR, "%s / %s: error sending advertisement",
+                    guildMaster->GetGuild()->GetName().c_str(), player->GetName().c_str());
+        }
+    }
+
+    uint32 thanks = GetTaskValue(owner, guildId, "thanks");
+    if (!thanks)
+    {
+        sLog->outMessage("gtask", LOG_LEVEL_DEBUG, "%s / %s: sending thanks",
+                guildMaster->GetGuild()->GetName().c_str(), player->GetName().c_str());
+        if (SendThanks(owner, guildId))
+        {
+            SetTaskValue(owner, guildId, "thanks", 1, 2 * sPlayerbotAIConfig.maxGuildTaskChangeTime);
+            SetTaskValue(owner, guildId, "payment", 0, 0);
+        }
+        else
+        {
+            sLog->outMessage("gtask", LOG_LEVEL_ERROR, "%s / %s: error sending thanks",
+                    guildMaster->GetGuild()->GetName().c_str(), player->GetName().c_str());
+        }
+    }
+
+    uint32 reward = GetTaskValue(owner, guildId, "reward");
+    if (!reward)
+    {
+        sLog->outMessage("gtask", LOG_LEVEL_DEBUG, "%s / %s: sending reward",
+                guildMaster->GetGuild()->GetName().c_str(), player->GetName().c_str());
+        if (Reward(owner, guildId))
+        {
+            SetTaskValue(owner, guildId, "reward", 1, 2 * sPlayerbotAIConfig.maxGuildTaskChangeTime);
+            SetTaskValue(owner, guildId, "payment", 0, 0);
+        }
+        else
+        {
+            sLog->outMessage("gtask", LOG_LEVEL_ERROR, "%s / %s: error sending reward",
+                    guildMaster->GetGuild()->GetName().c_str(), player->GetName().c_str());
+        }
+    }
+}
+
+uint32 GuildTaskMgr::CreateTask(uint32 owner, uint32 guildId)
+{
+    switch (urand(0, 1))
+    {
+    case 0:
+        CreateItemTask(owner, guildId);
+        return GUILD_TASK_TYPE_ITEM;
+    default:
+        CreateKillTask(owner, guildId);
+        return GUILD_TASK_TYPE_KILL;
+    }
+}
+
+bool GuildTaskMgr::CreateItemTask(uint32 owner, uint32 guildId)
+{
+    Player* player = sObjectMgr->GetPlayerByLowGUID(owner);
+    if (!player)
+        return false;
+
+    uint32 itemId = sRandomItemMgr.GetRandomItem(RANDOM_ITEM_GUILD_TASK);
+    if (!itemId)
+    {
+        sLog->outMessage("gtask", LOG_LEVEL_ERROR, "%s / %s: no items avaible for item task",
+                sGuildMgr->GetGuildById(guildId)->GetName().c_str(), player->GetName().c_str());
+        return false;
+    }
+
+    uint32 count = GetMaxItemTaskCount(itemId);
+
+    sLog->outMessage("gtask", LOG_LEVEL_DEBUG, "%s / %s: item task %u (x%d)",
+            sGuildMgr->GetGuildById(guildId)->GetName().c_str(), player->GetName().c_str(),
+            itemId, count);
+
+    SetTaskValue(owner, guildId, "itemCount", count, sPlayerbotAIConfig.maxGuildTaskChangeTime);
+    SetTaskValue(owner, guildId, "itemTask", itemId, sPlayerbotAIConfig.maxGuildTaskChangeTime);
+    return true;
+}
+
+bool GuildTaskMgr::CreateKillTask(uint32 owner, uint32 guildId)
+{
+    Player* player = sObjectMgr->GetPlayerByLowGUID(owner);
+    if (!player)
+        return false;
+
+    vector<uint32> ids;
+    CreatureTemplateContainer const* creatureTemplateContainer = sObjectMgr->GetCreatureTemplates();
+    for (CreatureTemplateContainer::const_iterator i = creatureTemplateContainer->begin(); i != creatureTemplateContainer->end(); ++i)
+    {
+        CreatureTemplate const& co = i->second;
+        if (co.rank != CREATURE_ELITE_RARE)
+            continue;
+
+        if (co.minlevel > player->getLevel() || co.maxlevel < player->getLevel() - 5)
+            continue;
+
+        ids.push_back(i->first);
+    }
+
+    if (ids.empty())
+    {
+        sLog->outMessage("gtask", LOG_LEVEL_ERROR, "%s / %s: no rare creatures available for kill task",
+                sGuildMgr->GetGuildById(guildId)->GetName().c_str(), player->GetName().c_str());
+        return false;
+    }
+
+    uint32 index = urand(0, ids.size() - 1);
+    uint32 creatureId = ids[index];
+
+    sLog->outMessage("gtask", LOG_LEVEL_DEBUG, "%s / %s: kill task %u",
+            sGuildMgr->GetGuildById(guildId)->GetName().c_str(), player->GetName().c_str(),
+            creatureId);
+
+    SetTaskValue(owner, guildId, "killTask", creatureId, sPlayerbotAIConfig.maxGuildTaskChangeTime);
+    return true;
+}
+
+bool GuildTaskMgr::SendAdvertisement(uint32 owner, uint32 guildId)
+{
+    Guild *guild = sGuildMgr->GetGuildById(guildId);
+    if (!guild)
+        return false;
+
+    Player* player = sObjectMgr->GetPlayerByLowGUID(owner);
+    if (!player)
+        return false;
+
+    Player* leader = sObjectMgr->GetPlayerByLowGUID(guild->GetLeaderGUID());
+    if (!leader)
+        return false;
+
+    uint32 validIn;
+    uint32 itemTask = GetTaskValue(owner, guildId, "itemTask", &validIn);
+    if (itemTask)
+        return SendItemAdvertisement(itemTask, owner, guildId, validIn);
+
+    uint32 killTask = GetTaskValue(owner, guildId, "killTask", &validIn);
+    if (killTask)
+        return SendKillAdvertisement(killTask, owner, guildId, validIn);
+
+    return false;
+}
+
+string formatTime(uint32 secs)
+{
+    ostringstream out;
+    if (secs < 3600)
+    {
+        out << secs / 60 << " min";
+    }
+    else if (secs < 7200)
+    {
+        out << "1 hr " << (secs - 3600) / 60 << " min";
+    }
+    else if (secs < 3600 * 24)
+    {
+        out << secs / 3600 << " hr";
+    } else
+    {
+        out << secs / 3600 / 24 << " days";
+    }
+
+    return out.str();
+}
+
+bool GuildTaskMgr::SendItemAdvertisement(uint32 itemId, uint32 owner, uint32 guildId, uint32 validIn)
+{
+    Guild *guild = sGuildMgr->GetGuildById(guildId);
+    Player* player = sObjectMgr->GetPlayerByLowGUID(owner);
+    Player* leader = sObjectMgr->GetPlayerByLowGUID(guild->GetLeaderGUID());
+
+    ItemTemplate const* proto = sObjectMgr->GetItemTemplate(itemId);
+    if (!proto)
+        return false;
+
+    SQLTransaction trans = CharacterDatabase.BeginTransaction();
+    ostringstream body;
+    body << "Hello, " << player->GetName() << ",\n";
+    body << "\n";
+    body << "We are in a great need of " << proto->Name1 << ". If you could sell us ";
+    uint32 count = GetTaskValue(owner, guildId, "itemCount");
+    if (count > 1)
+        body << "at least " << count << " of them ";
+    else
+        body << "some ";
+    body << "we'd really appreciate that and pay a high price.\n";
+    body << "The task will expire in " << formatTime(validIn) << "\n";
+    body << "\n";
+    body << "Best Regards,\n";
+    body << guild->GetName() << "\n";
+    body << leader->GetName() << "\n";
+
+    ostringstream subject;
+    subject << "Guild Task: " << proto->Name1;
+    MailDraft(subject.str(), body.str()).SendMailTo(trans, MailReceiver(player), MailSender(leader));
+    CharacterDatabase.CommitTransaction(trans);
+
+    return true;
+}
+
+
+bool GuildTaskMgr::SendKillAdvertisement(uint32 creatureId, uint32 owner, uint32 guildId, uint32 validIn)
+{
+    Guild *guild = sGuildMgr->GetGuildById(guildId);
+    Player* player = sObjectMgr->GetPlayerByLowGUID(owner);
+    Player* leader = sObjectMgr->GetPlayerByLowGUID(guild->GetLeaderGUID());
+
+    CreatureTemplate const* proto = sObjectMgr->GetCreatureTemplate(creatureId);
+    if (!proto)
+        return false;
+
+    SQLTransaction trans = CharacterDatabase.BeginTransaction();
+    ostringstream body;
+    body << "Hello, " << player->GetName() << ",\n";
+    body << "\n";
+    body << "As you probably know " << proto->Name << " is wanted dead for the crimes it did against our guild. If you should kill it ";
+    body << "we'd really appreciate that.\n";
+    body << "The task will expire in " << formatTime(validIn) << "\n";
+    body << "\n";
+    body << "Best Regards,\n";
+    body << guild->GetName() << "\n";
+    body << leader->GetName() << "\n";
+
+    ostringstream subject;
+    subject << "Guild Task: " << proto->Name;
+    MailDraft(subject.str(), body.str()).SendMailTo(trans, MailReceiver(player), MailSender(leader));
+    CharacterDatabase.CommitTransaction(trans);
+
+    return true;
+}
+
+bool GuildTaskMgr::SendThanks(uint32 owner, uint32 guildId)
+{
+    Guild *guild = sGuildMgr->GetGuildById(guildId);
+    if (!guild)
+        return false;
+
+    Player* player = sObjectMgr->GetPlayerByLowGUID(owner);
+    if (!player)
+        return false;
+
+    Player* leader = sObjectMgr->GetPlayerByLowGUID(guild->GetLeaderGUID());
+    if (!leader)
+        return false;
+
+    uint32 itemTask = GetTaskValue(owner, guildId, "itemTask");
+    if (itemTask)
+    {
+        ItemTemplate const* proto = sObjectMgr->GetItemTemplate(itemTask);
+        if (!proto)
+            return false;
+
+        SQLTransaction trans = CharacterDatabase.BeginTransaction();
+        ostringstream body;
+        body << "Hello, " << player->GetName() << ",\n";
+        body << "\n";
+        body << "One of our guild members wishes to thank you for the " << proto->Name1 << "! If we have another ";
+        uint32 count = GetTaskValue(owner, guildId, "itemCount");
+        body << count << " of them that would help us tremendously.\n";
+        body << "\n";
+        body << "Thanks again,\n";
+        body << guild->GetName() << "\n";
+        body << leader->GetName() << "\n";
+
+        MailDraft("Thank You", body.str()).
+                AddMoney(GetTaskValue(owner, guildId, "payment")).
+                SendMailTo(trans, MailReceiver(player), MailSender(leader));
+
+        CharacterDatabase.CommitTransaction(trans);
+
+        return true;
+    }
+
+    return false;
+}
+
+uint32 GuildTaskMgr::GetMaxItemTaskCount(uint32 itemId)
+{
+    ItemTemplate const* proto = sObjectMgr->GetItemTemplate(itemId);
+    if (!proto)
+        return 0;
+
+    if (proto->Quality < ITEM_QUALITY_RARE && proto->Stackable && proto->GetMaxStackSize() > 1)
+        return proto->GetMaxStackSize();
+
+    return 1;
+}
+
+bool GuildTaskMgr::IsGuildTaskItem(uint32 itemId, uint32 guildId)
+{
+    uint32 value = 0;
+
+    QueryResult results = CharacterDatabase.PQuery(
+            "select `value`, `time`, validIn from ai_playerbot_guild_tasks where `value` = '%u' and guildid = '%u' and `type` = 'itemTask'",
+            itemId, guildId);
+
+    if (results)
+    {
+        Field* fields = results->Fetch();
+        value = fields[0].GetUInt32();
+        uint32 lastChangeTime = fields[1].GetUInt32();
+        uint32 validIn = fields[2].GetUInt32();
+        if ((time(0) - lastChangeTime) >= validIn)
+            value = 0;
+    }
+
+    return value;
+}
+
+map<uint32,uint32> GuildTaskMgr::GetTaskValues(uint32 owner, string type, uint32 *validIn /* = NULL */)
+{
+    map<uint32,uint32> result;
+
+    QueryResult results = CharacterDatabase.PQuery(
+            "select `value`, `time`, validIn, guildid from ai_playerbot_guild_tasks where owner = '%u' and `type` = '%s'",
+            owner, type.c_str());
+
+    if (!results)
+        return result;
+
+    do
+    {
+        Field* fields = results->Fetch();
+        uint32 value = fields[0].GetUInt32();
+        uint32 lastChangeTime = fields[1].GetUInt32();
+        uint32 secs = fields[2].GetUInt32();
+        uint32 guildId = fields[3].GetUInt32();
+        if ((time(0) - lastChangeTime) >= secs)
+            value = 0;
+
+        result[guildId] = value;
+
+    } while (results->NextRow());
+
+    return result;
+}
+
+uint32 GuildTaskMgr::GetTaskValue(uint32 owner, uint32 guildId, string type, uint32 *validIn /* = NULL */)
+{
+    uint32 value = 0;
+
+    QueryResult results = CharacterDatabase.PQuery(
+            "select `value`, `time`, validIn from ai_playerbot_guild_tasks where owner = '%u' and guildid = '%u' and `type` = '%s'",
+            owner, guildId, type.c_str());
+
+    if (results)
+    {
+        Field* fields = results->Fetch();
+        value = fields[0].GetUInt32();
+        uint32 lastChangeTime = fields[1].GetUInt32();
+        uint32 secs = fields[2].GetUInt32();
+        if ((time(0) - lastChangeTime) >= secs)
+            value = 0;
+
+        if (validIn) *validIn = secs;
+    }
+
+    return value;
+}
+
+uint32 GuildTaskMgr::SetTaskValue(uint32 owner, uint32 guildId, string type, uint32 value, uint32 validIn)
+{
+    CharacterDatabase.PExecute("delete from ai_playerbot_guild_tasks where owner = '%u' and guildid = '%u' and `type` = '%s'",
+            owner, guildId, type.c_str());
+    if (value)
+    {
+        CharacterDatabase.PExecute(
+                "insert into ai_playerbot_guild_tasks (owner, guildid, `time`, validIn, `type`, `value`) values ('%u', '%u', '%u', '%u', '%s', '%u')",
+                owner, guildId, (uint32)time(0), validIn, type.c_str(), value);
+    }
+
+    return value;
+}
+
+bool GuildTaskMgr::HandleConsoleCommand(ChatHandler* handler, char const* args)
+{
+    if (!sPlayerbotAIConfig.guildTaskEnabled)
+    {
+        sLog->outMessage("gtask", LOG_LEVEL_ERROR, "Guild task system is currently disabled!");
+        return false;
+    }
+
+    if (!args || !*args)
+    {
+        sLog->outMessage("gtask", LOG_LEVEL_ERROR, "Usage: gtask stats/reset");
+        return false;
+    }
+
+    string cmd = args;
+
+    if (cmd == "reset")
+    {
+        CharacterDatabase.PExecute("delete from ai_playerbot_guild_tasks");
+        sLog->outMessage("gtask", LOG_LEVEL_INFO, "Guild tasks were reset for all players");
+        return true;
+    }
+
+    if (cmd == "stats")
+    {
+        sLog->outMessage("gtask", LOG_LEVEL_INFO, "Usage: gtask stats <player name>");
+        return true;
+    }
+
+    if (cmd.find("stats ") != string::npos)
+    {
+        string charName = cmd.substr(cmd.find("stats ") + 6);
+        ObjectGuid guid = sObjectMgr->GetPlayerGUIDByName(charName);
+        if (!guid)
+        {
+            sLog->outMessage("gtask", LOG_LEVEL_ERROR, "Player %s not found", charName.c_str());
+            return false;
+        }
+
+        uint32 owner = (uint32)guid.GetRawValue();
+
+        QueryResult result = CharacterDatabase.PQuery(
+                "select `value`, `time`, validIn, guildid, `type` from ai_playerbot_guild_tasks where owner = '%u' order by guildid, `type`",
+                owner);
+
+        if (result)
+        {
+            do
+            {
+                Field* fields = result->Fetch();
+                uint32 value = fields[0].GetUInt32();
+                uint32 lastChangeTime = fields[1].GetUInt32();
+                uint32 validIn = fields[2].GetUInt32();
+                if ((time(0) - lastChangeTime) >= validIn)
+                    value = 0;
+                uint32 guildId = fields[3].GetUInt32();
+                string type = fields[4].GetString();
+
+                Guild *guild = sGuildMgr->GetGuildById(guildId);
+                if (!guild)
+                    continue;
+
+                sLog->outMessage("gtask", LOG_LEVEL_INFO, "Player '%s' Guild '%s' %s=%u (%u secs)",
+                        charName.c_str(), guild->GetName().c_str(),
+                        type.c_str(), value, validIn);
+
+            } while (result->NextRow());
+
+            Field* fields = result->Fetch();
+        }
+
+        return true;
+    }
+
+    if (cmd == "reward")
+    {
+        sLog->outMessage("gtask", LOG_LEVEL_INFO, "Usage: gtask reward <player name>");
+        return true;
+    }
+
+    if (cmd.find("reward ") != string::npos)
+    {
+        string charName = cmd.substr(cmd.find("reward ") + 7);
+        ObjectGuid guid = sObjectMgr->GetPlayerGUIDByName(charName);
+        if (!guid)
+        {
+            sLog->outMessage("gtask", LOG_LEVEL_ERROR, "Player %s not found", charName.c_str());
+            return false;
+        }
+
+        uint32 owner = (uint32)guid.GetRawValue();
+        QueryResult result = CharacterDatabase.PQuery(
+                "select distinct guildid from ai_playerbot_guild_tasks where owner = '%u'",
+                owner);
+
+        if (result)
+        {
+            do
+            {
+                Field* fields = result->Fetch();
+                uint32 guildId = fields[0].GetUInt32();
+                Guild *guild = sGuildMgr->GetGuildById(guildId);
+                if (!guild)
+                    continue;
+
+                sGuildTaskMgr.Reward(owner, guildId);
+            } while (result->NextRow());
+
+            Field* fields = result->Fetch();
+            return true;
+        }
+    }
+
+    return false;
+}
+
+void GuildTaskMgr::CheckItemTask(uint32 itemId, uint32 obtained, Player* ownerPlayer, Player* bot, bool byMail)
+{
+    uint32 guildId = bot->GetGuildId();
+    if (!guildId)
+        return;
+
+    uint32 owner = (uint32)ownerPlayer->GetGUID().GetRawValue();
+
+    sLog->outMessage("gtask", LOG_LEVEL_DEBUG, "%s / %s: checking guild task",
+            bot->GetGuild()->GetName().c_str(), ownerPlayer->GetName().c_str());
+
+    uint32 itemTask = GetTaskValue(owner, guildId, "itemTask");
+    if (itemTask != itemId)
+    {
+        sLog->outMessage("gtask", LOG_LEVEL_DEBUG, "%s / %s: item %u is not guild task item (%u)",
+                bot->GetGuild()->GetName().c_str(), ownerPlayer->GetName().c_str(),
+                itemId, itemTask);
+        return;
+    }
+
+    if (byMail)
+    {
+        ItemTemplate const* proto = sObjectMgr->GetItemTemplate(itemId);
+        if (!proto)
+            return;
+
+        uint32 money = GetTaskValue(owner, guildId, "payment");
+        SetTaskValue(owner, guildId, "payment", money + auctionbot.GetBuyPrice(proto) * obtained,
+                sPlayerbotAIConfig.maxGuildTaskRewardTime);
+    }
+
+    uint32 count = GetTaskValue(owner, guildId, "itemCount");
+    if (obtained >= count)
+    {
+        sLog->outMessage("gtask", LOG_LEVEL_DEBUG, "%s / %s: guild task complete",
+                bot->GetGuild()->GetName().c_str(), ownerPlayer->GetName().c_str());
+        SetTaskValue(owner, guildId, "reward", 1,
+                urand(sPlayerbotAIConfig.minGuildTaskRewardTime, sPlayerbotAIConfig.maxGuildTaskRewardTime));
+        ChatHandler(ownerPlayer->GetSession()).PSendSysMessage("You have completed a guild task");
+    }
+    else
+    {
+        sLog->outMessage("gtask", LOG_LEVEL_DEBUG, "%s / %s: guild task progress",
+                bot->GetGuild()->GetName().c_str(), ownerPlayer->GetName().c_str());
+        SetTaskValue(owner, guildId, "itemCount", count - obtained, sPlayerbotAIConfig.maxGuildTaskChangeTime);
+        SetTaskValue(owner, guildId, "thanks", 1,
+                urand(sPlayerbotAIConfig.minGuildTaskRewardTime, sPlayerbotAIConfig.maxGuildTaskRewardTime));
+    }
+}
+
+bool GuildTaskMgr::Reward(uint32 owner, uint32 guildId)
+{
+    Guild *guild = sGuildMgr->GetGuildById(guildId);
+    if (!guild)
+        return false;
+
+    Player* player = sObjectMgr->GetPlayerByLowGUID(owner);
+    if (!player)
+        return false;
+
+    Player* leader = sObjectMgr->GetPlayerByLowGUID(guild->GetLeaderGUID());
+    if (!leader)
+        return false;
+
+    uint32 itemTask = GetTaskValue(owner, guildId, "itemTask");
+    uint32 killTask = GetTaskValue(owner, guildId, "killTask");
+    if (!itemTask && !killTask)
+        return false;
+
+    ostringstream body;
+    body << "Hello, " << player->GetName() << ",\n";
+    body << "\n";
+
+    if (itemTask)
+    {
+        ItemTemplate const* proto = sObjectMgr->GetItemTemplate(itemTask);
+        if (!proto)
+            return false;
+
+        body << "We wish to thank you for the " << proto->Name1 << " you provided so kindly. We really appreciate this and may this small gift bring you our thanks!\n";
+        body << "\n";
+        body << "Many thanks,\n";
+        body << guild->GetName() << "\n";
+        body << leader->GetName() << "\n";
+    }
+    else if (killTask)
+    {
+        CreatureTemplate const* proto = sObjectMgr->GetCreatureTemplate(killTask);
+        if (!proto)
+            return false;
+
+        body << "We wish to thank you for the " << proto->Name << " you've killed recently. We really appreciate this and may this small gift bring you our thanks!\n";
+        body << "\n";
+        body << "Many thanks,\n";
+        body << guild->GetName() << "\n";
+        body << leader->GetName() << "\n";
+    }
+
+    SQLTransaction trans = CharacterDatabase.BeginTransaction();
+    MailDraft draft("Thank You", body.str());
+
+    uint32 itemId = sRandomItemMgr.GetRandomItem(RANDOM_ITEM_GUILD_TASK_REWARD);
+    if (itemId)
+    {
+        Item* item = Item::CreateItem(itemId, 1, leader);
+        item->SaveToDB(trans);
+        draft.AddItem(item);
+    }
+
+    draft.AddMoney(GetTaskValue(owner, guildId, "payment")).SendMailTo(trans, MailReceiver(player), MailSender(leader));
+    CharacterDatabase.CommitTransaction(trans);
+
+    SetTaskValue(owner, guildId, "activeTask", 0, 0);
+    return true;
+}
+
+void GuildTaskMgr::CheckKillTask(Player* player, Unit* victim)
+{
+    uint32 owner = player->GetGUID().GetCounter();
+    Creature* creature = victim->ToCreature();
+    if (!creature)
+        return;
+
+    map<uint32,uint32> tasks = GetTaskValues(owner, "killTask");
+    for (map<uint32,uint32>::iterator i = tasks.begin(); i != tasks.end(); ++i)
+    {
+        uint32 guildId = i->first;
+        uint32 value = i->second;
+        Guild* guild = sGuildMgr->GetGuildById(guildId);
+
+        if (value != creature->GetCreatureTemplate()->Entry)
+            continue;
+
+        sLog->outMessage("gtask", LOG_LEVEL_DEBUG, "%s / %s: guild task complete",
+                guild->GetName().c_str(), player->GetName().c_str());
+        SetTaskValue(owner, guildId, "reward", 1,
+                urand(sPlayerbotAIConfig.minGuildTaskRewardTime, sPlayerbotAIConfig.maxGuildTaskRewardTime));
+        ChatHandler(player->GetSession()).PSendSysMessage("You have completed a guild task");
+    }
+}
diff --git a/src/plugins/playerbot/GuildTaskMgr.h b/src/plugins/playerbot/GuildTaskMgr.h
new file mode 100644
index 0000000..ba74df7
--- /dev/null
+++ b/src/plugins/playerbot/GuildTaskMgr.h
@@ -0,0 +1,45 @@
+#ifndef _GuildTaskMgr_H
+#define _GuildTaskMgr_H
+
+#include "Common.h"
+#include "PlayerbotAIBase.h"
+
+using namespace std;
+
+class GuildTaskMgr
+{
+    public:
+        GuildTaskMgr();
+        virtual ~GuildTaskMgr();
+        static GuildTaskMgr& instance()
+        {
+            static GuildTaskMgr instance;
+            return instance;
+        }
+
+        void Update(Player* owner, Player* guildMaster);
+
+	public:
+        static bool HandleConsoleCommand(ChatHandler* handler, char const* args);
+        bool IsGuildTaskItem(uint32 itemId, uint32 guildId);
+        void CheckItemTask(uint32 itemId, uint32 obtained, Player* owner, Player* bot, bool byMail = false);
+        void CheckKillTask(Player* owner, Unit* victim);
+
+    private:
+        map<uint32,uint32> GetTaskValues(uint32 owner, string type, uint32 *validIn = NULL);
+        uint32 GetTaskValue(uint32 owner, uint32 guildId, string type, uint32 *validIn = NULL);
+        uint32 SetTaskValue(uint32 owner, uint32 guildId, string type, uint32 value, uint32 validIn);
+        uint32 CreateTask(uint32 owner, uint32 guildId);
+        bool SendAdvertisement(uint32 owner, uint32 guildId);
+        bool SendItemAdvertisement(uint32 itemId, uint32 owner, uint32 guildId, uint32 validIn);
+        bool SendKillAdvertisement(uint32 creatureId, uint32 owner, uint32 guildId, uint32 validIn);
+        bool SendThanks(uint32 owner, uint32 guildId);
+        bool Reward(uint32 owner, uint32 guildId);
+        bool CreateItemTask(uint32 owner, uint32 guildId);
+        bool CreateKillTask(uint32 owner, uint32 guildId);
+        uint32 GetMaxItemTaskCount(uint32 itemId);
+};
+
+#define sGuildTaskMgr GuildTaskMgr::instance()
+
+#endif
diff --git a/src/plugins/playerbot/Helpers.cpp b/src/plugins/playerbot/Helpers.cpp
new file mode 100644
index 0000000..1d0b408
--- /dev/null
+++ b/src/plugins/playerbot/Helpers.cpp
@@ -0,0 +1,90 @@
+#include "../pchdef.h"
+#include "playerbot.h"
+#include <algorithm>
+#include <functional>
+#include <cctype>
+#include <locale>
+
+vector<string>& split(const string &s, char delim, vector<string> &elems)
+{
+    stringstream ss(s);
+    string item;
+    while(getline(ss, item, delim))
+    {
+        elems.push_back(item);
+    }
+    return elems;
+}
+
+
+vector<string> split(const string &s, char delim)
+{
+    vector<string> elems;
+    return split(s, delim, elems);
+}
+
+char *strstri(const char *haystack, const char *needle)
+{
+    if ( !*needle )
+    {
+        return (char*)haystack;
+    }
+    for ( ; *haystack; ++haystack )
+    {
+        if ( tolower(*haystack) == tolower(*needle) )
+        {
+            const char *h = haystack, *n = needle;
+            for ( ; *h && *n; ++h, ++n )
+            {
+                if ( tolower(*h) != tolower(*n) )
+                {
+                    break;
+                }
+            }
+            if ( !*n )
+            {
+                return (char*)haystack;
+            }
+        }
+    }
+    return 0;
+}
+
+
+
+uint64 extractGuid(WorldPacket& packet)
+{
+    uint8 mask;
+    packet >> mask;
+    uint64 guid = 0;
+    uint8 bit = 0;
+    uint8 testMask = 1;
+    while (true)
+    {
+        if (mask & testMask)
+        {
+            uint8 word;
+            packet >> word;
+            guid += (word << bit);
+        }
+        if (bit == 7)
+            break;
+        ++bit;
+        testMask <<= 1;
+    }
+    return guid;
+}
+
+std::string &ltrim(std::string &s) {
+        s.erase(s.begin(), std::find_if(s.begin(), s.end(), std::not1(std::ptr_fun<int, int>(std::isspace))));
+        return s;
+}
+
+std::string &rtrim(std::string &s) {
+        s.erase(std::find_if(s.rbegin(), s.rend(), std::not1(std::ptr_fun<int, int>(std::isspace))).base(), s.end());
+        return s;
+}
+
+std::string &trim(std::string &s) {
+        return ltrim(rtrim(s));
+}
diff --git a/src/plugins/playerbot/LazyCalculatedValue.h b/src/plugins/playerbot/LazyCalculatedValue.h
new file mode 100644
index 0000000..f7d3d31
--- /dev/null
+++ b/src/plugins/playerbot/LazyCalculatedValue.h
@@ -0,0 +1,42 @@
+#pragma once
+
+using namespace std;
+
+namespace ai 
+{
+    template <class TValue, class TOwner>
+    class LazyCalculatedValue
+    {
+    public:
+        typedef TValue (TOwner::*Calculator)();
+
+    public:
+        LazyCalculatedValue(TOwner* owner, Calculator calculator) 
+        {
+            this->calculator = calculator;
+            this->owner = owner;
+            Reset();
+        }
+
+    public:
+        TValue GetValue()
+        {
+            if (!calculated)
+            {
+                value = (owner->*calculator)();
+                calculated = true;
+            }
+            return value;
+        }
+        void Reset() 
+        {
+            calculated = false;
+        }
+
+    protected:
+        Calculator calculator;
+        TOwner* owner;
+        bool calculated;
+        TValue value;
+    };
+};
\ No newline at end of file
diff --git a/src/plugins/playerbot/LootObjectStack.cpp b/src/plugins/playerbot/LootObjectStack.cpp
new file mode 100644
index 0000000..faf459c
--- /dev/null
+++ b/src/plugins/playerbot/LootObjectStack.cpp
@@ -0,0 +1,234 @@
+#include "../pchdef.h"
+#include "LootObjectStack.h"
+#include "playerbot.h"
+
+using namespace ai;
+using namespace std;
+
+#define MAX_LOOT_OBJECT_COUNT 10
+
+LootTarget::LootTarget(ObjectGuid guid) : guid(guid), asOfTime(time(0))
+{
+}
+
+LootTarget::LootTarget(LootTarget const& other)
+{
+    guid = other.guid;
+    asOfTime = other.asOfTime;
+}
+
+LootTarget& LootTarget::operator=(LootTarget const& other)
+{
+    if((void*)this == (void*)&other)
+        return *this;
+
+    guid = other.guid;
+    asOfTime = other.asOfTime;
+
+    return *this;
+}
+
+bool LootTarget::operator< (const LootTarget& other) const
+{
+    return guid < other.guid;
+}
+
+void LootTargetList::shrink(time_t fromTime)
+{
+    for (set<LootTarget>::iterator i = begin(); i != end(); )
+    {
+        if (i->asOfTime <= fromTime)
+            erase(i++);
+		else
+			++i;
+    }
+}
+
+LootObject::LootObject(Player* bot, ObjectGuid guid)
+	: guid(), skillId(SKILL_NONE), reqSkillValue(0), reqItem(NULL)
+{
+    Refresh(bot, guid);
+}
+
+void LootObject::Refresh(Player* bot, ObjectGuid guid)
+{
+    skillId = SKILL_NONE;
+    reqSkillValue = 0;
+    reqItem = NULL;
+    this->guid = ObjectGuid();
+
+    PlayerbotAI* ai = bot->GetPlayerbotAI();
+    Creature *creature = ai->GetCreature(guid);
+    if (creature && creature->getDeathState() == CORPSE)
+    {
+        if (creature->HasFlag(UNIT_DYNAMIC_FLAGS, UNIT_DYNFLAG_LOOTABLE))
+            this->guid = guid;
+
+        if (creature->HasFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_SKINNABLE))
+        {
+            skillId = creature->GetCreatureTemplate()->GetRequiredLootSkill();
+            uint32 targetLevel = creature->getLevel();
+            reqSkillValue = targetLevel < 10 ? 0 : targetLevel < 20 ? (targetLevel - 10) * 10 : targetLevel * 5;
+            if (bot->HasSkill(skillId) && bot->GetSkillValue(skillId) >= reqSkillValue)
+                this->guid = guid;
+        }
+
+        return;
+    }
+
+    GameObject* go = ai->GetGameObject(guid);
+    if (go && go->isSpawned())
+    {
+        uint32 lockId = go->GetGOInfo()->GetLockId();
+        LockEntry const *lockInfo = sLockStore.LookupEntry(lockId);
+        if (!lockInfo)
+            return;
+
+        this->guid = guid;
+        for (int i = 0; i < 8; ++i)
+        {
+            switch (lockInfo->Type[i])
+            {
+            case LOCK_KEY_ITEM:
+                if (lockInfo->Index[i] > 0)
+                {
+                    reqItem = lockInfo->Index[i];
+                }
+                break;
+            case LOCK_KEY_SKILL:
+                if (SkillByLockType(LockType(lockInfo->Index[i])) > 0)
+                {
+                    skillId = SkillByLockType(LockType(lockInfo->Index[i]));
+                    reqSkillValue = lockInfo->Skill[i];
+                }
+                break;
+            default:
+                break;
+            }
+        }
+    }
+}
+
+WorldObject* LootObject::GetWorldObject(Player* bot)
+{
+    Refresh(bot, guid);
+
+    PlayerbotAI* ai = bot->GetPlayerbotAI();
+
+    Creature *creature = ai->GetCreature(guid);
+    if (creature && creature->getDeathState() == CORPSE)
+        return creature;
+
+    GameObject* go = ai->GetGameObject(guid);
+    if (go && go->isSpawned())
+        return go;
+
+    return NULL;
+}
+
+LootObject::LootObject(const LootObject& other)
+{
+    guid = other.guid;
+    skillId = other.skillId;
+    reqSkillValue = other.reqSkillValue;
+    reqItem = other.reqItem;
+}
+
+bool LootObject::IsLootPossible(Player* bot)
+{
+    if (IsEmpty() || !GetWorldObject(bot))
+        return false;
+
+    PlayerbotAI* ai = bot->GetPlayerbotAI();
+
+    if (reqItem && !bot->HasItemCount(reqItem, 1))
+        return false;
+
+    if (skillId == SKILL_NONE)
+        return true;
+
+    if (skillId == SKILL_FISHING)
+        return false;
+
+    if (!bot->HasSkill(skillId))
+        return false;
+
+    if (!reqSkillValue)
+        return true;
+
+    uint32 skillValue = uint32(bot->GetPureSkillValue(skillId));
+    if (reqSkillValue > skillValue)
+        return false;
+
+    if (skillId == SKILL_MINING && !bot->HasItemTotemCategory(TC_MINING_PICK))
+        return false;
+
+    if (skillId == SKILL_SKINNING && !bot->HasItemTotemCategory(TC_SKINNING_KNIFE))
+        return false;
+
+    return true;
+}
+
+bool LootObjectStack::Add(ObjectGuid guid)
+{
+    if (!availableLoot.insert(guid).second)
+        return false;
+
+    if (availableLoot.size() < MAX_LOOT_OBJECT_COUNT)
+        return true;
+
+    vector<LootObject> ordered = OrderByDistance();
+    for (size_t i = MAX_LOOT_OBJECT_COUNT; i < ordered.size(); i++)
+        Remove(ordered[i].guid);
+
+    return true;
+}
+
+void LootObjectStack::Remove(ObjectGuid guid)
+{
+    LootTargetList::iterator i = availableLoot.find(guid);
+    if (i != availableLoot.end())
+        availableLoot.erase(i);
+}
+
+void LootObjectStack::Clear()
+{
+    availableLoot.clear();
+}
+
+bool LootObjectStack::CanLoot(float maxDistance)
+{
+    vector<LootObject> ordered = OrderByDistance(maxDistance);
+    return !ordered.empty();
+}
+
+LootObject LootObjectStack::GetLoot(float maxDistance)
+{
+    vector<LootObject> ordered = OrderByDistance(maxDistance);
+    return ordered.empty() ? LootObject() : *ordered.begin();
+}
+
+vector<LootObject> LootObjectStack::OrderByDistance(float maxDistance)
+{
+    availableLoot.shrink(time(0) - 30);
+
+    map<float, LootObject> sortedMap;
+    LootTargetList safeCopy(availableLoot);
+    for (LootTargetList::iterator i = safeCopy.begin(); i != safeCopy.end(); i++)
+    {
+        ObjectGuid guid = i->guid;
+        LootObject lootObject(bot, guid);
+        if (!lootObject.IsLootPossible(bot))
+            continue;
+
+        float distance = bot->GetDistance(lootObject.GetWorldObject(bot));
+        if (!maxDistance || distance <= maxDistance)
+            sortedMap[distance] = lootObject;
+    }
+
+    vector<LootObject> result;
+    for (map<float, LootObject>::iterator i = sortedMap.begin(); i != sortedMap.end(); i++)
+        result.push_back(i->second);
+    return result;
+}
+
diff --git a/src/plugins/playerbot/LootObjectStack.h b/src/plugins/playerbot/LootObjectStack.h
new file mode 100644
index 0000000..a35bdd2
--- /dev/null
+++ b/src/plugins/playerbot/LootObjectStack.h
@@ -0,0 +1,76 @@
+#pragma once
+
+using namespace std;
+
+namespace ai
+{
+    enum LootStrategy
+    {
+        LOOTSTRATEGY_QUEST = 1,
+        LOOTSTRATEGY_SKILL = 2,
+        LOOTSTRATEGY_GRAY = 3,
+        LOOTSTRATEGY_NORMAL = 4,
+        LOOTSTRATEGY_ALL = 5
+    };
+
+    class LootObject
+    {
+    public:
+        LootObject() {}
+        LootObject(Player* bot, ObjectGuid guid);
+        LootObject(const LootObject& other);
+
+    public:
+        bool IsEmpty() { return !guid; }
+        bool IsLootPossible(Player* bot);
+        void Refresh(Player* bot, ObjectGuid guid);
+        WorldObject* GetWorldObject(Player* bot);
+        ObjectGuid guid;
+
+        uint32 skillId;
+        uint32 reqSkillValue;
+        uint32 reqItem;
+    };
+
+    class LootTarget
+    {
+    public:
+        LootTarget(ObjectGuid guid);
+        LootTarget(LootTarget const& other);
+
+    public:
+        LootTarget& operator=(LootTarget const& other);
+        bool operator< (const LootTarget& other) const;
+
+    public:
+        ObjectGuid guid;
+        time_t asOfTime;
+    };
+
+    class LootTargetList : public set<LootTarget>
+    {
+    public:
+        void shrink(time_t fromTime);
+    };
+
+    class LootObjectStack
+    {
+    public:
+        LootObjectStack(Player* bot) : bot(bot) {}
+
+    public:
+        bool Add(ObjectGuid guid);
+        void Remove(ObjectGuid guid);
+        void Clear();
+        bool CanLoot(float maxDistance);
+        LootObject GetLoot(float maxDistance = 0);
+
+    private:
+        vector<LootObject> OrderByDistance(float maxDistance = 0);
+
+    private:
+        Player* bot;
+        LootTargetList availableLoot;
+    };
+
+};
diff --git a/src/plugins/playerbot/PlayerbotAI.cpp b/src/plugins/playerbot/PlayerbotAI.cpp
new file mode 100644
index 0000000..80d56bb
--- /dev/null
+++ b/src/plugins/playerbot/PlayerbotAI.cpp
@@ -0,0 +1,1410 @@
+#include "../pchdef.h"
+#include "PlayerbotMgr.h"
+#include "playerbot.h"
+
+#include "AiFactory.h"
+
+#include "../Grids/Notifiers/GridNotifiers.h"
+#include "../Grids/Notifiers/GridNotifiersImpl.h"
+#include "../Grids/Cells/CellImpl.h"
+#include "strategy/values/LastMovementValue.h"
+#include "strategy/actions/LogLevelAction.h"
+#include "strategy/values/LastSpellCastValue.h"
+#include "LootObjectStack.h"
+#include "PlayerbotAIConfig.h"
+#include "PlayerbotAI.h"
+#include "PlayerbotFactory.h"
+#include "PlayerbotSecurity.h"
+#include "../Groups/Group.h"
+#include "../Entities/Pet/Pet.h"
+#include "../Spells/Auras/SpellAuraEffects.h"
+
+using namespace ai;
+using namespace std;
+
+vector<string>& split(const string &s, char delim, vector<string> &elems);
+vector<string> split(const string &s, char delim);
+uint64 extractGuid(WorldPacket& packet);
+std::string &trim(std::string &s);
+
+uint32 PlayerbotChatHandler::extractQuestId(string str)
+{
+    char* source = (char*)str.c_str();
+    char* cId = extractKeyFromLink(source,"Hquest");
+    return cId ? atol(cId) : 0;
+}
+
+void PacketHandlingHelper::AddHandler(uint16 opcode, string handler)
+{
+    handlers[opcode] = handler;
+}
+
+void PacketHandlingHelper::Handle(ExternalEventHelper &helper)
+{
+    while (!queue.empty())
+    {
+        helper.HandlePacket(handlers, queue.top());
+        queue.pop();
+    }
+}
+
+void PacketHandlingHelper::AddPacket(const WorldPacket& packet)
+{
+	if (handlers.find(packet.GetOpcode()) != handlers.end())
+        queue.push(WorldPacket(packet));
+}
+
+
+PlayerbotAI::PlayerbotAI() : PlayerbotAIBase(), bot(NULL), aiObjectContext(NULL),
+    currentEngine(NULL), chatHelper(this), chatFilter(this), accountId(0), security(NULL), master(NULL)
+{
+    for (int i = 0 ; i < BOT_STATE_MAX; i++)
+        engines[i] = NULL;
+}
+
+PlayerbotAI::PlayerbotAI(Player* bot) :
+    PlayerbotAIBase(), chatHelper(this), chatFilter(this), security(bot), master(NULL)
+{
+	this->bot = bot;
+
+	accountId = sObjectMgr->GetPlayerAccountIdByGUID(bot->GetGUID());
+
+    aiObjectContext = AiFactory::createAiObjectContext(bot, this);
+
+    engines[BOT_STATE_COMBAT] = AiFactory::createCombatEngine(bot, this, aiObjectContext);
+    engines[BOT_STATE_NON_COMBAT] = AiFactory::createNonCombatEngine(bot, this, aiObjectContext);
+    engines[BOT_STATE_DEAD] = AiFactory::createDeadEngine(bot, this, aiObjectContext);
+    currentEngine = engines[BOT_STATE_NON_COMBAT];
+    currentState = BOT_STATE_NON_COMBAT;
+
+    masterIncomingPacketHandlers.AddHandler(CMSG_GAMEOBJ_REPORT_USE, "use game object");
+    masterIncomingPacketHandlers.AddHandler(CMSG_AREATRIGGER, "area trigger");
+    masterIncomingPacketHandlers.AddHandler(CMSG_GAMEOBJ_USE, "use game object");
+    masterIncomingPacketHandlers.AddHandler(CMSG_LOOT_ROLL, "loot roll");
+    masterIncomingPacketHandlers.AddHandler(CMSG_GOSSIP_HELLO, "gossip hello");
+    masterIncomingPacketHandlers.AddHandler(CMSG_QUESTGIVER_HELLO, "gossip hello");
+    masterIncomingPacketHandlers.AddHandler(CMSG_QUESTGIVER_COMPLETE_QUEST, "complete quest");
+    masterIncomingPacketHandlers.AddHandler(CMSG_QUESTGIVER_ACCEPT_QUEST, "accept quest");
+    masterIncomingPacketHandlers.AddHandler(CMSG_ACTIVATETAXI, "activate taxi");
+    masterIncomingPacketHandlers.AddHandler(CMSG_ACTIVATETAXIEXPRESS, "activate taxi");
+    masterIncomingPacketHandlers.AddHandler(CMSG_MOVE_SPLINE_DONE, "taxi done");
+    masterIncomingPacketHandlers.AddHandler(CMSG_GROUP_UNINVITE_GUID, "uninvite");
+    masterIncomingPacketHandlers.AddHandler(CMSG_PUSHQUESTTOPARTY, "quest share");
+    masterIncomingPacketHandlers.AddHandler(CMSG_GUILD_INVITE, "guild invite");
+    masterIncomingPacketHandlers.AddHandler(CMSG_LFG_TELEPORT, "lfg teleport");
+
+    botOutgoingPacketHandlers.AddHandler(SMSG_GROUP_INVITE, "group invite");
+    botOutgoingPacketHandlers.AddHandler(BUY_ERR_NOT_ENOUGHT_MONEY, "not enough money");
+    botOutgoingPacketHandlers.AddHandler(BUY_ERR_REPUTATION_REQUIRE, "not enough reputation");
+    botOutgoingPacketHandlers.AddHandler(SMSG_GROUP_SET_LEADER, "group set leader");
+    botOutgoingPacketHandlers.AddHandler(SMSG_FORCE_RUN_SPEED_CHANGE, "check mount state");
+    botOutgoingPacketHandlers.AddHandler(SMSG_RESURRECT_REQUEST, "resurrect request");
+    botOutgoingPacketHandlers.AddHandler(SMSG_INVENTORY_CHANGE_FAILURE, "cannot equip");
+    botOutgoingPacketHandlers.AddHandler(SMSG_TRADE_STATUS, "trade status");
+    botOutgoingPacketHandlers.AddHandler(SMSG_LOOT_RESPONSE, "loot response");
+    botOutgoingPacketHandlers.AddHandler(SMSG_QUESTUPDATE_ADD_KILL, "quest objective completed");
+    botOutgoingPacketHandlers.AddHandler(SMSG_ITEM_PUSH_RESULT, "item push result");
+    botOutgoingPacketHandlers.AddHandler(SMSG_PARTY_COMMAND_RESULT, "party command");
+    botOutgoingPacketHandlers.AddHandler(SMSG_CAST_FAILED, "cast failed");
+    botOutgoingPacketHandlers.AddHandler(SMSG_DUEL_REQUESTED, "duel requested");
+    botOutgoingPacketHandlers.AddHandler(SMSG_LFG_ROLE_CHOSEN, "lfg role check");
+    botOutgoingPacketHandlers.AddHandler(SMSG_LFG_PROPOSAL_UPDATE, "lfg proposal");
+
+    masterOutgoingPacketHandlers.AddHandler(SMSG_PARTY_COMMAND_RESULT, "party command");
+    masterOutgoingPacketHandlers.AddHandler(MSG_RAID_READY_CHECK, "ready check");
+    masterOutgoingPacketHandlers.AddHandler(MSG_RAID_READY_CHECK_FINISHED, "ready check finished");
+}
+
+PlayerbotAI::~PlayerbotAI()
+{
+    for (int i = 0 ; i < BOT_STATE_MAX; i++)
+    {
+        if (engines[i])
+            delete engines[i];
+    }
+
+    if (aiObjectContext)
+        delete aiObjectContext;
+}
+
+void PlayerbotAI::UpdateAI(uint32 elapsed)
+{
+    if (bot->IsBeingTeleported())
+        return;
+
+    if (nextAICheckDelay > sPlayerbotAIConfig.globalCoolDown &&
+            bot->IsNonMeleeSpellCast(true, true, false) &&
+            *GetAiObjectContext()->GetValue<bool>("invalid target", "current target"))
+    {
+        Spell* spell = bot->GetCurrentSpell(CURRENT_GENERIC_SPELL);
+        if (spell && !spell->GetSpellInfo()->IsPositive())
+        {
+            InterruptSpell();
+            SetNextCheckDelay(sPlayerbotAIConfig.globalCoolDown);
+        }
+    }
+
+    if (nextAICheckDelay > sPlayerbotAIConfig.maxWaitForMove && bot->IsInCombat() && !bot->GetCurrentSpell(CURRENT_CHANNELED_SPELL))
+    {
+        nextAICheckDelay = sPlayerbotAIConfig.maxWaitForMove;
+    }
+
+    PlayerbotAIBase::UpdateAI(elapsed);
+}
+
+void PlayerbotAI::UpdateAIInternal(uint32 elapsed)
+{
+    ExternalEventHelper helper(aiObjectContext);
+    while (!chatCommands.empty())
+    {
+        ChatCommandHolder holder = chatCommands.top();
+        string command = holder.GetCommand();
+        Player* owner = holder.GetOwner();
+        if (!helper.ParseChatCommand(command, owner) && holder.GetType() == CHAT_MSG_WHISPER)
+        {
+            ostringstream out; out << "Unknown command " << command;
+            TellMaster(out);
+            helper.ParseChatCommand("help");
+        }
+        chatCommands.pop();
+    }
+
+    botOutgoingPacketHandlers.Handle(helper);
+    masterIncomingPacketHandlers.Handle(helper);
+    masterOutgoingPacketHandlers.Handle(helper);
+
+	DoNextAction();
+}
+
+void PlayerbotAI::HandleTeleportAck()
+{
+	bot->GetMotionMaster()->Clear(true);
+	if (bot->IsBeingTeleportedNear())
+	{
+		WorldPacket p = WorldPacket(MSG_MOVE_TELEPORT_ACK, 8 + 4 + 4);
+		p.appendPackGUID(bot->GetGUID());
+		p << (uint32) 0; // supposed to be flags? not used currently
+		p << (uint32) time(0); // time - not currently used
+		bot->GetSession()->HandleMoveTeleportAck(p);
+	}
+	else if (bot->IsBeingTeleportedFar())
+	{
+		bot->GetSession()->HandleMoveWorldportAckOpcode();
+		SetNextCheckDelay(1000);
+	}
+}
+
+void PlayerbotAI::Reset()
+{
+    if (bot->IsFlying())
+        return;
+
+    currentEngine = engines[BOT_STATE_NON_COMBAT];
+    nextAICheckDelay = 0;
+
+    aiObjectContext->GetValue<Unit*>("old target")->Set(NULL);
+    aiObjectContext->GetValue<Unit*>("current target")->Set(NULL);
+    aiObjectContext->GetValue<LootObject>("loot target")->Set(LootObject());
+    aiObjectContext->GetValue<uint32>("lfg proposal")->Set(0);
+
+    LastSpellCast & lastSpell = aiObjectContext->GetValue<LastSpellCast& >("last spell cast")->Get();
+    lastSpell.Reset();
+
+    LastMovement & lastMovement = aiObjectContext->GetValue<LastMovement& >("last movement")->Get();
+    lastMovement.Set(NULL);
+
+    bot->GetMotionMaster()->Clear();
+    bot->m_taxi.ClearTaxiDestinations();
+    InterruptSpell();
+
+    for (int i = 0 ; i < BOT_STATE_MAX; i++)
+    {
+        engines[i]->Init();
+    }
+}
+
+void PlayerbotAI::HandleCommand(uint32 type, const string& text, Player& fromPlayer)
+{
+    if (!GetSecurity()->CheckLevelFor(PLAYERBOT_SECURITY_INVITE, type != CHAT_MSG_WHISPER, &fromPlayer))
+        return;
+
+    if (type == CHAT_MSG_ADDON)
+        return;
+
+    string filtered = text;
+    if (!sPlayerbotAIConfig.commandPrefix.empty())
+    {
+        if (filtered.find(sPlayerbotAIConfig.commandPrefix) != 0)
+            return;
+
+        filtered = filtered.substr(sPlayerbotAIConfig.commandPrefix.size());
+    }
+
+    filtered = chatFilter.Filter(trim((string&)filtered));
+    if (filtered.empty())
+        return;
+
+    if (filtered.find("who") != 0 && !GetSecurity()->CheckLevelFor(PLAYERBOT_SECURITY_ALLOW_ALL, type != CHAT_MSG_WHISPER, &fromPlayer))
+        return;
+
+    if (type == CHAT_MSG_RAID_WARNING && filtered.find(bot->GetName()) != string::npos && filtered.find("award") == string::npos)
+    {
+        ChatCommandHolder cmd("warning", &fromPlayer, type);
+        chatCommands.push(cmd);
+        return;
+    }
+
+    if (filtered.size() > 2 && filtered.substr(0, 2) == "d " || filtered.size() > 3 && filtered.substr(0, 3) == "do ")
+    {
+        std::string action = filtered.substr(filtered.find(" ") + 1);
+        DoSpecificAction(action);
+    }
+    else if (filtered == "reset")
+    {
+        Reset();
+    }
+    else
+    {
+        ChatCommandHolder cmd(filtered, &fromPlayer, type);
+        chatCommands.push(cmd);
+    }
+}
+
+void PlayerbotAI::HandleBotOutgoingPacket(const WorldPacket& packet)
+{
+    switch (packet.GetOpcode())
+    {
+    case SMSG_MOVE_SET_CAN_FLY:
+        {
+            WorldPacket p(packet);
+            uint64 guid;
+            p.readPackGUID(guid);
+            if (guid != bot->GetGUID())
+                return;
+
+            bot->m_movementInfo.SetMovementFlags((MovementFlags)(MOVEMENTFLAG_FLYING|MOVEMENTFLAG_CAN_FLY));
+            return;
+        }
+    case SMSG_MOVE_UNSET_CAN_FLY:
+        {
+            WorldPacket p(packet);
+            uint64 guid;
+            p.readPackGUID(guid);
+            if (guid != bot->GetGUID())
+                return;
+            bot->m_movementInfo.RemoveMovementFlag(MOVEMENTFLAG_FLYING);
+            return;
+        }
+    case SMSG_CAST_FAILED:
+        {
+            WorldPacket p(packet);
+            p.rpos(0);
+            uint8 castCount, result;
+            uint32 spellId;
+            p >> castCount >> spellId >> result;
+            if (result != SPELL_CAST_OK)
+            {
+                SpellInterrupted(spellId);
+                botOutgoingPacketHandlers.AddPacket(packet);
+            }
+            return;
+        }
+    case SMSG_SPELL_FAILURE:
+        {
+            WorldPacket p(packet);
+            p.rpos(0);
+            uint64 casterGuid;
+            p.readPackGUID(casterGuid);
+            if (casterGuid != bot->GetGUID())
+                return;
+
+            uint8 castCount;
+            uint32 spellId;
+            p >> castCount;
+            p >> spellId;
+            SpellInterrupted(spellId);
+            return;
+        }
+    case SMSG_SPELL_DELAYED:
+        {
+            WorldPacket p(packet);
+            p.rpos(0);
+            uint64 casterGuid;
+            p.readPackGUID(casterGuid);
+
+            if (casterGuid != bot->GetGUID())
+                return;
+
+            uint32 delaytime;
+            p >> delaytime;
+            if (delaytime <= 1000)
+                IncreaseNextCheckDelay(delaytime);
+            return;
+        }
+    default:
+        botOutgoingPacketHandlers.AddPacket(packet);
+    }
+}
+
+void PlayerbotAI::SpellInterrupted(uint32 spellid)
+{
+    LastSpellCast& lastSpell = aiObjectContext->GetValue<LastSpellCast&>("last spell cast")->Get();
+    if (lastSpell.id != spellid)
+        return;
+
+    lastSpell.Reset();
+
+    time_t now = time(0);
+    if (now <= lastSpell.time)
+        return;
+
+    uint32 castTimeSpent = 1000 * (now - lastSpell.time);
+
+    int32 globalCooldown = CalculateGlobalCooldown(lastSpell.id);
+    if (castTimeSpent < globalCooldown)
+        SetNextCheckDelay(globalCooldown - castTimeSpent);
+    else
+        SetNextCheckDelay(0);
+
+    lastSpell.id = 0;
+}
+
+int32 PlayerbotAI::CalculateGlobalCooldown(uint32 spellid)
+{
+    if (!spellid)
+        return 0;
+
+    if (bot->GetSpellHistory()->HasCooldown(spellid))
+        return sPlayerbotAIConfig.globalCoolDown;
+
+    return sPlayerbotAIConfig.reactDelay;
+}
+
+void PlayerbotAI::HandleMasterIncomingPacket(const WorldPacket& packet)
+{
+    masterIncomingPacketHandlers.AddPacket(packet);
+}
+
+void PlayerbotAI::HandleMasterOutgoingPacket(const WorldPacket& packet)
+{
+    masterOutgoingPacketHandlers.AddPacket(packet);
+}
+
+void PlayerbotAI::ChangeEngine(BotState type)
+{
+    Engine* engine = engines[type];
+
+    if (currentEngine != engine)
+    {
+        currentEngine = engine;
+        currentState = type;
+        ReInitCurrentEngine();
+
+        switch (type)
+        {
+        case BOT_STATE_COMBAT:
+            sLog->outMessage("playerbot", LOG_LEVEL_DEBUG, "=== %s COMBAT ===", bot->GetName().c_str());
+            break;
+        case BOT_STATE_NON_COMBAT:
+            sLog->outMessage("playerbot", LOG_LEVEL_DEBUG, "=== %s NON-COMBAT ===", bot->GetName().c_str());
+            break;
+        case BOT_STATE_DEAD:
+            sLog->outMessage("playerbot", LOG_LEVEL_DEBUG, "=== %s DEAD ===", bot->GetName().c_str());
+            break;
+        }
+    }
+}
+
+void PlayerbotAI::DoNextAction()
+{
+    if (bot->IsBeingTeleported() || (GetMaster() && GetMaster()->IsBeingTeleported()))
+        return;
+
+    currentEngine->DoNextAction(NULL);
+
+    if (bot->HasAuraType(SPELL_AURA_MOD_INCREASE_MOUNTED_FLIGHT_SPEED))
+    {
+        bot->m_movementInfo.SetMovementFlags((MovementFlags)(MOVEMENTFLAG_FLYING|MOVEMENTFLAG_CAN_FLY));
+
+        // TODO
+        //WorldPacket packet(CMSG_MOVE_SET_FLY);
+        //packet.appendPackGUID(bot->GetGUID());
+        //packet << bot->m_movementInfo;
+        bot->SetMover(bot);
+        //bot->GetSession()->HandleMovementOpcodes(packet);
+    }
+
+    Player* master = GetMaster();
+    if (bot->IsMounted() && bot->IsFlying())
+    {
+        bot->m_movementInfo.SetMovementFlags((MovementFlags)(MOVEMENTFLAG_FLYING|MOVEMENTFLAG_CAN_FLY));
+
+        bot->SetSpeed(MOVE_FLIGHT, 1.0f, true);
+        bot->SetSpeed(MOVE_RUN, 1.0f, true);
+
+        if (master)
+        {
+            bot->SetSpeed(MOVE_FLIGHT, master->GetSpeedRate(MOVE_FLIGHT), true);
+            bot->SetSpeed(MOVE_RUN, master->GetSpeedRate(MOVE_FLIGHT), true);
+        }
+
+    }
+
+    if (currentEngine != engines[BOT_STATE_DEAD] && !bot->IsAlive())
+        ChangeEngine(BOT_STATE_DEAD);
+
+    if (currentEngine == engines[BOT_STATE_DEAD] && bot->IsAlive())
+        ChangeEngine(BOT_STATE_NON_COMBAT);
+
+    Group *group = bot->GetGroup();
+    if (!master && group)
+    {
+        for (GroupReference *gref = group->GetFirstMember(); gref; gref = gref->next())
+        {
+            Player* member = gref->GetSource();
+            PlayerbotAI* ai = bot->GetPlayerbotAI();
+            if (member && member->IsInWorld() && !member->GetPlayerbotAI() && (!master || master->GetPlayerbotAI()))
+            {
+                ai->SetMaster(member);
+                ai->ResetStrategies();
+                ai->TellMaster("Hello");
+                break;
+            }
+        }
+    }
+}
+
+void PlayerbotAI::ReInitCurrentEngine()
+{
+    InterruptSpell();
+    currentEngine->Init();
+}
+
+void PlayerbotAI::ChangeStrategy(string names, BotState type)
+{
+    Engine* e = engines[type];
+    if (!e)
+        return;
+
+    e->ChangeStrategy(names);
+}
+
+void PlayerbotAI::DoSpecificAction(string name)
+{
+    for (int i = 0 ; i < BOT_STATE_MAX; i++)
+    {
+        ostringstream out;
+        ActionResult res = engines[i]->ExecuteAction(name);
+        switch (res)
+        {
+        case ACTION_RESULT_UNKNOWN:
+            continue;
+        case ACTION_RESULT_OK:
+            out << name << ": done";
+            TellMaster(out);
+            return;
+        case ACTION_RESULT_IMPOSSIBLE:
+            out << name << ": impossible";
+            TellMaster(out);
+            return;
+        case ACTION_RESULT_USELESS:
+            out << name << ": useless";
+            TellMaster(out);
+            return;
+        case ACTION_RESULT_FAILED:
+            out << name << ": failed";
+            TellMaster(out);
+            return;
+        }
+    }
+    ostringstream out;
+    out << name << ": unknown action";
+    TellMaster(out);
+}
+
+bool PlayerbotAI::ContainsStrategy(StrategyType type)
+{
+    for (int i = 0 ; i < BOT_STATE_MAX; i++)
+    {
+        if (engines[i]->ContainsStrategy(type))
+            return true;
+    }
+    return false;
+}
+
+bool PlayerbotAI::HasStrategy(string name, BotState type)
+{
+    return engines[type]->HasStrategy(name);
+}
+
+void PlayerbotAI::ResetStrategies()
+{
+    for (int i = 0 ; i < BOT_STATE_MAX; i++)
+        engines[i]->removeAllStrategies();
+
+    AiFactory::AddDefaultCombatStrategies(bot, this, engines[BOT_STATE_COMBAT]);
+    AiFactory::AddDefaultNonCombatStrategies(bot, this, engines[BOT_STATE_NON_COMBAT]);
+    AiFactory::AddDefaultDeadStrategies(bot, this, engines[BOT_STATE_DEAD]);
+}
+
+bool PlayerbotAI::IsRanged(Player* player)
+{
+    PlayerbotAI* botAi = player->GetPlayerbotAI();
+    if (botAi)
+        return botAi->ContainsStrategy(STRATEGY_TYPE_RANGED);
+
+    switch (player->getClass())
+    {
+    case CLASS_DEATH_KNIGHT:
+    case CLASS_PALADIN:
+    case CLASS_WARRIOR:
+    case CLASS_ROGUE:
+        return false;
+    case CLASS_DRUID:
+        return !HasAnyAuraOf(player, "cat form", "bear form", "dire bear form", NULL);
+    }
+    return true;
+}
+
+bool PlayerbotAI::IsTank(Player* player)
+{
+    PlayerbotAI* botAi = player->GetPlayerbotAI();
+    if (botAi)
+        return botAi->ContainsStrategy(STRATEGY_TYPE_TANK);
+
+    switch (player->getClass())
+    {
+    case CLASS_DEATH_KNIGHT:
+    case CLASS_PALADIN:
+    case CLASS_WARRIOR:
+        return true;
+    case CLASS_DRUID:
+        return HasAnyAuraOf(player, "bear form", "dire bear form", NULL);
+    }
+    return false;
+}
+
+bool PlayerbotAI::IsHeal(Player* player)
+{
+    PlayerbotAI* botAi = player->GetPlayerbotAI();
+    if (botAi)
+        return botAi->ContainsStrategy(STRATEGY_TYPE_HEAL);
+
+    switch (player->getClass())
+    {
+    case CLASS_PRIEST:
+        return true;
+    case CLASS_DRUID:
+        return HasAnyAuraOf(player, "tree of life form", NULL);
+    }
+    return false;
+}
+
+
+
+namespace MaNGOS
+{
+
+    class UnitByGuidInRangeCheck
+    {
+    public:
+        UnitByGuidInRangeCheck(WorldObject const* obj, ObjectGuid guid, float range) : i_obj(obj), i_range(range), i_guid(guid) {}
+        WorldObject const& GetFocusObject() const { return *i_obj; }
+        bool operator()(Unit* u)
+        {
+            return u->GetGUID() == i_guid && i_obj->IsWithinDistInMap(u, i_range);
+        }
+    private:
+        WorldObject const* i_obj;
+        float i_range;
+        ObjectGuid i_guid;
+    };
+
+    class GameObjectByGuidInRangeCheck
+    {
+    public:
+        GameObjectByGuidInRangeCheck(WorldObject const* obj, ObjectGuid guid, float range) : i_obj(obj), i_range(range), i_guid(guid) {}
+        WorldObject const& GetFocusObject() const { return *i_obj; }
+        bool operator()(GameObject* u)
+        {
+            if (u && i_obj->IsWithinDistInMap(u, i_range) && u->isSpawned() && u->GetGOInfo() && u->GetGUID() == i_guid)
+                return true;
+
+            return false;
+        }
+    private:
+        WorldObject const* i_obj;
+        float i_range;
+        ObjectGuid i_guid;
+    };
+
+};
+
+
+Unit* PlayerbotAI::GetUnit(ObjectGuid guid)
+{
+    if (!guid)
+        return NULL;
+
+    Map* map = bot->GetMap();
+    if (!map)
+        return NULL;
+
+    return ObjectAccessor::GetUnit(*bot, guid);
+}
+
+
+Creature* PlayerbotAI::GetCreature(ObjectGuid guid)
+{
+    if (!guid)
+        return NULL;
+
+    Map* map = bot->GetMap();
+    if (!map)
+        return NULL;
+
+    return map->GetCreature(guid);
+}
+
+GameObject* PlayerbotAI::GetGameObject(ObjectGuid guid)
+{
+    if (!guid)
+        return NULL;
+
+    Map* map = bot->GetMap();
+    if (!map)
+        return NULL;
+
+    return map->GetGameObject(guid);
+}
+
+bool PlayerbotAI::TellMasterNoFacing(string text, PlayerbotSecurityLevel securityLevel)
+{
+    Player* master = GetMaster();
+    if (!master)
+        return false;
+
+    if (!GetSecurity()->CheckLevelFor(securityLevel, true, master))
+        return false;
+
+    if (sPlayerbotAIConfig.whisperDistance && !bot->GetGroup() && sRandomPlayerbotMgr.IsRandomBot(bot) &&
+            master->GetSession()->GetSecurity() < SEC_GAMEMASTER &&
+            (bot->GetMapId() != master->GetMapId() || bot->GetDistance(master) > sPlayerbotAIConfig.whisperDistance))
+        return false;
+
+    bot->Whisper(text, LANG_UNIVERSAL, master);
+    return true;
+}
+
+bool PlayerbotAI::TellMaster(string text, PlayerbotSecurityLevel securityLevel)
+{
+    if (!TellMasterNoFacing(text, securityLevel))
+        return false;
+
+    if (!bot->isMoving() && !bot->IsInCombat() && bot->GetMapId() == master->GetMapId())
+    {
+        if (!bot->isInFront(master, M_PI / 2))
+            bot->SetFacingTo(bot->GetAngle(master));
+
+        bot->HandleEmoteCommand(EMOTE_ONESHOT_TALK);
+    }
+
+    return true;
+}
+
+bool IsRealAura(Player* bot, Aura const* aura, Unit* unit)
+{
+    if (!aura)
+        return false;
+
+    if (!unit->IsHostileTo(bot))
+        return true;
+
+    uint32 stacks = aura->GetStackAmount();
+    if (stacks >= aura->GetSpellInfo()->StackAmount)
+        return true;
+
+    if (aura->GetCaster() == bot || aura->GetSpellInfo()->IsPositive() || aura->IsArea())
+        return true;
+
+    return false;
+}
+
+bool PlayerbotAI::HasAura(string name, Unit* unit)
+{
+    if (!unit)
+        return false;
+
+    uint32 spellId = aiObjectContext->GetValue<uint32>("spell id", name)->Get();
+    if (spellId)
+        return HasAura(spellId, unit);
+
+    wstring wnamepart;
+    if (!Utf8toWStr(name, wnamepart))
+        return 0;
+
+    wstrToLower(wnamepart);
+
+    Unit::AuraApplicationMap& map = unit->GetAppliedAuras();
+    for (Unit::AuraApplicationMap::iterator i = map.begin(); i != map.end(); ++i)
+    {
+        Aura const* aura  = i->second->GetBase();
+        if (!aura)
+            continue;
+
+        const string auraName = aura->GetSpellInfo()->SpellName[0];
+        if (auraName.empty() || auraName.length() != wnamepart.length() || !Utf8FitTo(auraName, wnamepart))
+            continue;
+
+        if (IsRealAura(bot, aura, unit))
+            return true;
+    }
+
+    return false;
+}
+
+bool PlayerbotAI::HasAura(uint32 spellId, const Unit* unit)
+{
+    if (!spellId || !unit)
+        return false;
+
+    for (uint32 effect = EFFECT_0; effect <= EFFECT_2; effect++)
+    {
+        Aura* aura = ((Unit*)unit)->GetAura(spellId);
+
+        if (IsRealAura(bot, aura, (Unit*)unit))
+            return true;
+    }
+
+    return false;
+}
+
+bool PlayerbotAI::HasAnyAuraOf(Unit* player, ...)
+{
+    if (!player)
+        return false;
+
+    va_list vl;
+    va_start(vl, player);
+
+    const char* cur;
+    do {
+        cur = va_arg(vl, const char*);
+        if (cur && HasAura(cur, player)) {
+            va_end(vl);
+            return true;
+        }
+    }
+    while (cur);
+
+    va_end(vl);
+    return false;
+}
+
+bool PlayerbotAI::CanCastSpell(string name, Unit* target)
+{
+    return CanCastSpell(aiObjectContext->GetValue<uint32>("spell id", name)->Get(), target);
+}
+
+bool PlayerbotAI::CanCastSpell(uint32 spellid, Unit* target, bool checkHasSpell)
+{
+    if (!spellid)
+        return false;
+
+    if (!target)
+        target = bot;
+
+    if (checkHasSpell && !bot->HasSpell(spellid))
+        return false;
+
+    if (bot->GetSpellHistory()->HasCooldown(spellid))
+        return false;
+
+    SpellInfo const *spellInfo = sSpellMgr->GetSpellInfo(spellid );
+    if (!spellInfo)
+        return false;
+
+    bool positiveSpell = spellInfo->IsPositive();
+    if (positiveSpell && bot->IsHostileTo(target))
+        return false;
+
+    if (!positiveSpell && bot->IsFriendlyTo(target))
+        return false;
+
+    if (target->IsImmunedToSpell(spellInfo))
+        return false;
+
+    if (bot != target && bot->GetDistance(target) > sPlayerbotAIConfig.sightDistance)
+        return false;
+
+    Unit* oldSel = bot->GetSelectedUnit();
+    bot->SetSelection(target->GetGUID());
+    Spell *spell = new Spell(bot, spellInfo, TRIGGERED_NONE);
+
+    spell->m_targets.SetUnitTarget(target);
+    spell->m_CastItem = aiObjectContext->GetValue<Item*>("item for spell", spellid)->Get();
+    spell->m_targets.SetItemTarget(spell->m_CastItem);
+    SpellCastResult result = spell->CheckCast(false);
+    delete spell;
+	if (oldSel)
+		bot->SetSelection(oldSel->GetGUID());
+
+    switch (result)
+    {
+    case SPELL_FAILED_NOT_INFRONT:
+    case SPELL_FAILED_NOT_STANDING:
+    case SPELL_FAILED_UNIT_NOT_INFRONT:
+    case SPELL_FAILED_SUCCESS:
+    case SPELL_FAILED_MOVING:
+    case SPELL_FAILED_TRY_AGAIN:
+    case SPELL_FAILED_NOT_IDLE:
+    case SPELL_FAILED_CANT_DO_THAT_RIGHT_NOW:
+    case SPELL_FAILED_SUMMON_PENDING:
+    case SPELL_FAILED_BAD_IMPLICIT_TARGETS:
+    case SPELL_FAILED_BAD_TARGETS:
+    case SPELL_CAST_OK:
+    case SPELL_FAILED_ITEM_NOT_FOUND:
+        return true;
+    default:
+        return false;
+    }
+}
+
+
+bool PlayerbotAI::CastSpell(string name, Unit* target)
+{
+    bool result = CastSpell(aiObjectContext->GetValue<uint32>("spell id", name)->Get(), target);
+    if (result)
+    {
+        aiObjectContext->GetValue<time_t>("last spell cast time", name)->Set(time(0));
+    }
+
+    return result;
+}
+
+bool PlayerbotAI::CastSpell(uint32 spellId, Unit* target)
+{
+    if (!spellId)
+        return false;
+
+    if (!target)
+        target = bot;
+
+    Pet* pet = bot->GetPet();
+    const SpellInfo* const pSpellInfo = sSpellMgr->GetSpellInfo(spellId);
+    if (pet && pet->HasSpell(spellId))
+    {
+        pet->GetCharmInfo()->SetSpellAutocast(pSpellInfo, true);
+        pet->GetCharmInfo()->ToggleCreatureAutocast(pSpellInfo, true);
+        TellMaster("My pet will auto-cast this spell");
+        return true;
+    }
+
+    aiObjectContext->GetValue<LastSpellCast&>("last spell cast")->Get().Set(spellId, target->GetGUID(), time(0));
+    aiObjectContext->GetValue<LastMovement&>("last movement")->Get().Set(NULL);
+
+    MotionMaster &mm = *bot->GetMotionMaster();
+
+    if (bot->IsFlying())
+        return false;
+
+    bot->ClearUnitState( UNIT_STATE_ALL_STATE_SUPPORTED );
+
+    Unit* oldSel = bot->GetSelectedUnit();
+    bot->SetSelection(target->GetGUID());
+
+    Spell *spell = new Spell(bot, pSpellInfo, TRIGGERED_NONE);
+    if (bot->isMoving() && spell->GetCastTime())
+    {
+        delete spell;
+        return false;
+    }
+
+    SpellCastTargets targets;
+    WorldObject* faceTo = target;
+
+    if (pSpellInfo->Targets & TARGET_FLAG_SOURCE_LOCATION ||
+            pSpellInfo->Targets & TARGET_FLAG_DEST_LOCATION)
+    {
+        targets.SetDst(target->GetPosition());
+    }
+    else
+    {
+        targets.SetUnitTarget(target);
+    }
+
+    if (pSpellInfo->Targets & TARGET_FLAG_ITEM)
+    {
+        spell->m_CastItem = aiObjectContext->GetValue<Item*>("item for spell", spellId)->Get();
+        targets.SetItemTarget(spell->m_CastItem);
+    }
+
+    if (pSpellInfo->Effects[0].Effect == SPELL_EFFECT_OPEN_LOCK ||
+        pSpellInfo->Effects[0].Effect == SPELL_EFFECT_SKINNING)
+    {
+        LootObject loot = *aiObjectContext->GetValue<LootObject>("loot target");
+        if (!loot.IsLootPossible(bot))
+        {
+            delete spell;
+            return false;
+        }
+
+        GameObject* go = GetGameObject(loot.guid);
+        if (go && go->isSpawned())
+        {
+            WorldPacket* const packetgouse = new WorldPacket(CMSG_GAMEOBJ_REPORT_USE, 8);
+            *packetgouse << loot.guid;
+            bot->GetSession()->QueuePacket(packetgouse);
+            targets.SetGOTarget(go);
+            faceTo = go;
+        }
+        else
+        {
+            Unit* creature = GetUnit(loot.guid);
+            if (creature)
+            {
+                targets.SetUnitTarget(creature);
+                faceTo = creature;
+            }
+        }
+    }
+
+
+    if (!bot->isInFront(faceTo, M_PI / 2))
+    {
+        bot->SetFacingTo(bot->GetAngle(faceTo));
+        delete spell;
+        SetNextCheckDelay(sPlayerbotAIConfig.globalCoolDown);
+        return false;
+    }
+
+	spell->prepare(&targets);
+	WaitForSpellCast(spell);
+
+    if (oldSel)
+        bot->SetSelection(oldSel->GetGUID());
+
+    LastSpellCast& lastSpell = aiObjectContext->GetValue<LastSpellCast&>("last spell cast")->Get();
+    return lastSpell.id == spellId;
+}
+
+void PlayerbotAI::WaitForSpellCast(Spell *spell)
+{
+    const SpellInfo* const pSpellInfo = spell->GetSpellInfo();
+
+    float castTime = spell->GetCastTime() + sPlayerbotAIConfig.reactDelay;
+    if (pSpellInfo->IsChanneled())
+    {
+        int32 duration = pSpellInfo->GetDuration();
+        if (duration > 0)
+            castTime += duration;
+    }
+
+    castTime = ceil(castTime);
+
+    uint32 globalCooldown = CalculateGlobalCooldown(pSpellInfo->Id);
+    if (castTime < globalCooldown)
+        castTime = globalCooldown;
+
+    SetNextCheckDelay(castTime);
+}
+
+void PlayerbotAI::InterruptSpell()
+{
+    if (bot->GetCurrentSpell(CURRENT_CHANNELED_SPELL))
+        return;
+
+    LastSpellCast& lastSpell = aiObjectContext->GetValue<LastSpellCast&>("last spell cast")->Get();
+
+    for (int type = CURRENT_MELEE_SPELL; type < CURRENT_CHANNELED_SPELL; type++)
+    {
+        Spell* spell = bot->GetCurrentSpell((CurrentSpellTypes)type);
+        if (!spell)
+            continue;
+
+        bot->InterruptSpell((CurrentSpellTypes)type);
+
+        WorldPacket data(SMSG_SPELL_FAILURE, 8 + 1 + 4 + 1);
+        data.appendPackGUID(bot->GetGUID());
+        data << uint8(1);
+        data << uint32(spell->m_spellInfo->Id);
+        data << uint8(0);
+        bot->SendMessageToSet(&data, true);
+
+        data.Initialize(SMSG_SPELL_FAILED_OTHER, 8 + 1 + 4 + 1);
+        data.appendPackGUID(bot->GetGUID());
+        data << uint8(1);
+        data << uint32(spell->m_spellInfo->Id);
+        data << uint8(0);
+        bot->SendMessageToSet(&data, true);
+
+        SpellInterrupted(spell->m_spellInfo->Id);
+    }
+
+    SpellInterrupted(lastSpell.id);
+}
+
+
+void PlayerbotAI::RemoveAura(string name)
+{
+    uint32 spellid = aiObjectContext->GetValue<uint32>("spell id", name)->Get();
+    if (spellid && HasAura(spellid, bot))
+        bot->RemoveAurasDueToSpell(spellid);
+}
+
+bool PlayerbotAI::IsInterruptableSpellCasting(Unit* target, string spell)
+{
+    uint32 spellid = aiObjectContext->GetValue<uint32>("spell id", spell)->Get();
+    if (!spellid || !target->IsNonMeleeSpellCast(true))
+        return false;
+
+    SpellInfo const *spellInfo = sSpellMgr->GetSpellInfo(spellid );
+    if (!spellInfo)
+        return false;
+
+    if (target->IsImmunedToSpell(spellInfo))
+        return false;
+
+    for (uint32 i = EFFECT_0; i <= EFFECT_2; i++)
+    {
+        if ((spellInfo->InterruptFlags & SPELL_INTERRUPT_FLAG_INTERRUPT) && spellInfo->PreventionType == SPELL_PREVENTION_TYPE_SILENCE)
+            return true;
+
+        if ((spellInfo->Effects[i].Effect == SPELL_EFFECT_REMOVE_AURA || spellInfo->Effects[i].Effect == SPELL_EFFECT_INTERRUPT_CAST) &&
+                !target->IsImmunedToSpellEffect(spellInfo, i))
+            return true;
+    }
+
+    return false;
+}
+
+bool PlayerbotAI::HasAuraToDispel(Unit* target, uint32 dispelType)
+{
+    for (uint32 type = SPELL_AURA_NONE; type < TOTAL_AURAS; ++type)
+    {
+        Unit::AuraEffectList const& auras = target->GetAuraEffectsByType((AuraType)type);
+        for (Unit::AuraEffectList::const_iterator itr = auras.begin(); itr != auras.end(); ++itr)
+        {
+            const AuraEffect *const aura = *itr;
+			const SpellInfo* entry = aura->GetSpellInfo();
+            uint32 spellId = entry->Id;
+
+            bool isPositiveSpell = entry->IsPositive();
+            if (isPositiveSpell && bot->IsFriendlyTo(target))
+                continue;
+
+            if (!isPositiveSpell && bot->IsHostileTo(target))
+                continue;
+
+            if (canDispel(entry, dispelType))
+                return true;
+        }
+    }
+    return false;
+}
+
+
+#ifndef WIN32
+inline int strcmpi(const char* s1, const char* s2)
+{
+    for (; *s1 && *s2 && (toupper(*s1) == toupper(*s2)); ++s1, ++s2);
+    return *s1 - *s2;
+}
+#endif
+
+bool PlayerbotAI::canDispel(const SpellInfo* entry, uint32 dispelType)
+{
+    if (entry->Dispel != dispelType)
+        return false;
+
+    return !entry->SpellName[0] ||
+        (strcmpi((const char*)entry->SpellName[0], "demon skin") &&
+        strcmpi((const char*)entry->SpellName[0], "mage armor") &&
+        strcmpi((const char*)entry->SpellName[0], "frost armor") &&
+        strcmpi((const char*)entry->SpellName[0], "wavering will") &&
+        strcmpi((const char*)entry->SpellName[0], "chilled") &&
+        strcmpi((const char*)entry->SpellName[0], "ice armor"));
+}
+
+bool IsAlliance(uint8 race)
+{
+    return race == RACE_HUMAN || race == RACE_DWARF || race == RACE_NIGHTELF ||
+            race == RACE_GNOME || race == RACE_DRAENEI;
+}
+
+bool PlayerbotAI::IsOpposing(Player* player)
+{
+    return IsOpposing(player->getRace(), bot->getRace());
+}
+
+bool PlayerbotAI::IsOpposing(uint8 race1, uint8 race2)
+{
+    return (IsAlliance(race1) && !IsAlliance(race2)) || (!IsAlliance(race1) && IsAlliance(race2));
+}
+
+void PlayerbotAI::RemoveShapeshift()
+{
+    RemoveAura("bear form");
+    RemoveAura("dire bear form");
+    RemoveAura("moonkin form");
+    RemoveAura("travel form");
+    RemoveAura("cat form");
+    RemoveAura("flight form");
+    RemoveAura("swift flight form");
+    RemoveAura("aquatic form");
+    RemoveAura("ghost wolf");
+    RemoveAura("tree of life");
+}
+
+uint32 PlayerbotAI::GetEquipGearScore(Player* player, bool withBags, bool withBank)
+{
+    std::vector<uint32> gearScore(EQUIPMENT_SLOT_END);
+    uint32 twoHandScore = 0;
+
+    for (uint8 i = EQUIPMENT_SLOT_START; i < EQUIPMENT_SLOT_END; ++i)
+    {
+        if (Item* item = player->GetItemByPos(INVENTORY_SLOT_BAG_0, i))
+            _fillGearScoreData(player, item, &gearScore, twoHandScore);
+    }
+
+    if (withBags)
+    {
+        // check inventory
+        for (int i = INVENTORY_SLOT_ITEM_START; i < INVENTORY_SLOT_ITEM_END; ++i)
+        {
+            if (Item* item = player->GetItemByPos(INVENTORY_SLOT_BAG_0, i))
+                _fillGearScoreData(player, item, &gearScore, twoHandScore);
+        }
+
+        // check bags
+        for (int i = INVENTORY_SLOT_BAG_START; i < INVENTORY_SLOT_BAG_END; ++i)
+        {
+            if (Bag* pBag = (Bag*)player->GetItemByPos(INVENTORY_SLOT_BAG_0, i))
+            {
+                for (uint32 j = 0; j < pBag->GetBagSize(); ++j)
+                {
+                    if (Item* item2 = pBag->GetItemByPos(j))
+                        _fillGearScoreData(player, item2, &gearScore, twoHandScore);
+                }
+            }
+        }
+    }
+
+    if (withBank)
+    {
+        for (uint8 i = BANK_SLOT_ITEM_START; i < BANK_SLOT_ITEM_END; ++i)
+        {
+            if (Item* item = player->GetItemByPos(INVENTORY_SLOT_BAG_0, i))
+                _fillGearScoreData(player, item, &gearScore, twoHandScore);
+        }
+
+        for (uint8 i = BANK_SLOT_BAG_START; i < BANK_SLOT_BAG_END; ++i)
+        {
+            if (Item* item = player->GetItemByPos(INVENTORY_SLOT_BAG_0, i))
+            {
+                if (item->IsBag())
+                {
+                    Bag* bag = (Bag*)item;
+                    for (uint8 j = 0; j < bag->GetBagSize(); ++j)
+                    {
+                        if (Item* item2 = bag->GetItemByPos(j))
+                            _fillGearScoreData(player, item2, &gearScore, twoHandScore);
+                    }
+                }
+            }
+        }
+    }
+
+    uint8 count = EQUIPMENT_SLOT_END - 2;   // ignore body and tabard slots
+    uint32 sum = 0;
+
+    // check if 2h hand is higher level than main hand + off hand
+    if (gearScore[EQUIPMENT_SLOT_MAINHAND] + gearScore[EQUIPMENT_SLOT_OFFHAND] < twoHandScore * 2)
+    {
+        gearScore[EQUIPMENT_SLOT_OFFHAND] = 0;  // off hand is ignored in calculations if 2h weapon has higher score
+        --count;
+        gearScore[EQUIPMENT_SLOT_MAINHAND] = twoHandScore;
+    }
+
+    for (uint8 i = EQUIPMENT_SLOT_START; i < EQUIPMENT_SLOT_END; ++i)
+    {
+       sum += gearScore[i];
+    }
+
+    if (count)
+    {
+        uint32 res = uint32(sum / count);
+        return res;
+    }
+    else
+        return 0;
+}
+
+void PlayerbotAI::_fillGearScoreData(Player *player, Item* item, std::vector<uint32>* gearScore, uint32& twoHandScore)
+{
+    if (!item)
+        return;
+
+    if (player->CanUseItem(item->GetTemplate()) != EQUIP_ERR_OK)
+        return;
+
+    uint8 type   = item->GetTemplate()->InventoryType;
+    uint32 level = item->GetTemplate()->ItemLevel;
+
+    switch (type)
+    {
+        case INVTYPE_2HWEAPON:
+            twoHandScore = std::max(twoHandScore, level);
+            break;
+        case INVTYPE_WEAPON:
+        case INVTYPE_WEAPONMAINHAND:
+            (*gearScore)[SLOT_MAIN_HAND] = std::max((*gearScore)[SLOT_MAIN_HAND], level);
+            break;
+        case INVTYPE_SHIELD:
+        case INVTYPE_WEAPONOFFHAND:
+            (*gearScore)[EQUIPMENT_SLOT_OFFHAND] = std::max((*gearScore)[EQUIPMENT_SLOT_OFFHAND], level);
+            break;
+        case INVTYPE_THROWN:
+        case INVTYPE_RANGEDRIGHT:
+        case INVTYPE_RANGED:
+        case INVTYPE_QUIVER:
+        case INVTYPE_RELIC:
+            (*gearScore)[EQUIPMENT_SLOT_RANGED] = std::max((*gearScore)[EQUIPMENT_SLOT_RANGED], level);
+            break;
+        case INVTYPE_HEAD:
+            (*gearScore)[EQUIPMENT_SLOT_HEAD] = std::max((*gearScore)[EQUIPMENT_SLOT_HEAD], level);
+            break;
+        case INVTYPE_NECK:
+            (*gearScore)[EQUIPMENT_SLOT_NECK] = std::max((*gearScore)[EQUIPMENT_SLOT_NECK], level);
+            break;
+        case INVTYPE_SHOULDERS:
+            (*gearScore)[EQUIPMENT_SLOT_SHOULDERS] = std::max((*gearScore)[EQUIPMENT_SLOT_SHOULDERS], level);
+            break;
+        case INVTYPE_BODY:
+            (*gearScore)[EQUIPMENT_SLOT_BODY] = std::max((*gearScore)[EQUIPMENT_SLOT_BODY], level);
+            break;
+        case INVTYPE_CHEST:
+            (*gearScore)[EQUIPMENT_SLOT_CHEST] = std::max((*gearScore)[EQUIPMENT_SLOT_CHEST], level);
+            break;
+        case INVTYPE_WAIST:
+            (*gearScore)[EQUIPMENT_SLOT_WAIST] = std::max((*gearScore)[EQUIPMENT_SLOT_WAIST], level);
+            break;
+        case INVTYPE_LEGS:
+            (*gearScore)[EQUIPMENT_SLOT_LEGS] = std::max((*gearScore)[EQUIPMENT_SLOT_LEGS], level);
+            break;
+        case INVTYPE_FEET:
+            (*gearScore)[EQUIPMENT_SLOT_FEET] = std::max((*gearScore)[EQUIPMENT_SLOT_FEET], level);
+            break;
+        case INVTYPE_WRISTS:
+            (*gearScore)[EQUIPMENT_SLOT_WRISTS] = std::max((*gearScore)[EQUIPMENT_SLOT_WRISTS], level);
+            break;
+        case INVTYPE_HANDS:
+            (*gearScore)[EQUIPMENT_SLOT_HEAD] = std::max((*gearScore)[EQUIPMENT_SLOT_HEAD], level);
+            break;
+        // equipped gear score check uses both rings and trinkets for calculation, assume that for bags/banks it is the same
+        // with keeping second highest score at second slot
+        case INVTYPE_FINGER:
+        {
+            if ((*gearScore)[EQUIPMENT_SLOT_FINGER1] < level)
+            {
+                (*gearScore)[EQUIPMENT_SLOT_FINGER2] = (*gearScore)[EQUIPMENT_SLOT_FINGER1];
+                (*gearScore)[EQUIPMENT_SLOT_FINGER1] = level;
+            }
+            else if ((*gearScore)[EQUIPMENT_SLOT_FINGER2] < level)
+                (*gearScore)[EQUIPMENT_SLOT_FINGER2] = level;
+            break;
+        }
+        case INVTYPE_TRINKET:
+        {
+            if ((*gearScore)[EQUIPMENT_SLOT_TRINKET1] < level)
+            {
+                (*gearScore)[EQUIPMENT_SLOT_TRINKET2] = (*gearScore)[EQUIPMENT_SLOT_TRINKET1];
+                (*gearScore)[EQUIPMENT_SLOT_TRINKET1] = level;
+            }
+            else if ((*gearScore)[EQUIPMENT_SLOT_TRINKET2] < level)
+                (*gearScore)[EQUIPMENT_SLOT_TRINKET2] = level;
+            break;
+        }
+        case INVTYPE_CLOAK:
+            (*gearScore)[EQUIPMENT_SLOT_BACK] = std::max((*gearScore)[EQUIPMENT_SLOT_BACK], level);
+            break;
+        default:
+            break;
+    }
+}
+
+string PlayerbotAI::HandleRemoteCommand(string command)
+{
+    if (command == "state")
+    {
+        switch (currentState)
+        {
+        case BOT_STATE_COMBAT:
+            return "combat";
+        case BOT_STATE_DEAD:
+            return "dead";
+        case BOT_STATE_NON_COMBAT:
+            return "non-combat";
+        default:
+            return "unknown";
+        }
+    }
+    else if (command == "position")
+    {
+        ostringstream out; out << bot->GetPositionX() << " " << bot->GetPositionY() << " " << bot->GetPositionZ() << " " << bot->GetMapId() << " " << bot->GetOrientation();
+        return out.str();
+    }
+    else if (command == "tpos")
+    {
+        Unit* target = *GetAiObjectContext()->GetValue<Unit*>("current target");
+        if (!target) {
+            return "";
+        }
+
+        ostringstream out; out << target->GetPositionX() << " " << target->GetPositionY() << " " << target->GetPositionZ() << " " << target->GetMapId() << " " << target->GetOrientation();
+        return out.str();
+    }
+    else if (command == "movement")
+    {
+        LastMovement& data = *GetAiObjectContext()->GetValue<LastMovement&>("last movement");
+        ostringstream out; out << data.lastMoveToX << " " << data.lastMoveToY << " " << data.lastMoveToZ << " " << bot->GetMapId() << " " << data.lastMoveToOri;
+        return out.str();
+    }
+    else if (command == "target")
+    {
+        Unit* target = *GetAiObjectContext()->GetValue<Unit*>("current target");
+        if (!target) {
+            return "";
+        }
+
+        return target->GetName();
+    }
+    else if (command == "hp")
+    {
+        int pct = (int)((static_cast<float> (bot->GetHealth()) / bot->GetMaxHealth()) * 100);
+        ostringstream out; out << pct << "%";
+
+        Unit* target = *GetAiObjectContext()->GetValue<Unit*>("current target");
+        if (!target) {
+            return out.str();
+        }
+
+        pct = (int)((static_cast<float> (target->GetHealth()) / target->GetMaxHealth()) * 100);
+        out << " / " << pct << "%";
+        return out.str();
+    }
+    else if (command == "strategy")
+    {
+        return currentEngine->ListStrategies();
+    }
+    else if (command == "action")
+    {
+        return currentEngine->GetLastAction();
+    }
+    else if (command == "values")
+    {
+        return GetAiObjectContext()->FormatValues();
+    }
+    ostringstream out; out << "invalid command: " << command;
+    return out.str();
+}
diff --git a/src/plugins/playerbot/PlayerbotAI.h b/src/plugins/playerbot/PlayerbotAI.h
new file mode 100644
index 0000000..06cd309
--- /dev/null
+++ b/src/plugins/playerbot/PlayerbotAI.h
@@ -0,0 +1,186 @@
+#pragma once
+
+#include "../pchdef.h"
+#include "PlayerbotMgr.h"
+#include "PlayerbotAIBase.h"
+#include "strategy/AiObjectContext.h"
+#include "strategy/Engine.h"
+#include "strategy/ExternalEventHelper.h"
+#include "ChatFilter.h"
+#include "PlayerbotSecurity.h"
+#include <stack>
+
+class Player;
+class PlayerbotMgr;
+class ChatHandler;
+
+using namespace std;
+using namespace ai;
+
+bool IsAlliance(uint8 race);
+
+class PlayerbotChatHandler: protected ChatHandler
+{
+public:
+    explicit PlayerbotChatHandler(Player* pMasterPlayer) : ChatHandler(pMasterPlayer->GetSession()) {}
+    void sysmessage(string str) { SendSysMessage(str.c_str()); }
+    uint32 extractQuestId(string str);
+    uint32 extractSpellId(string str)
+    {
+        char* source = (char*)str.c_str();
+        return extractSpellIdFromLink(source);
+    }
+};
+
+namespace ai
+{
+	class MinValueCalculator {
+	public:
+		MinValueCalculator(float def = 0.0f) {
+			param = NULL;
+			minValue = def;
+		}
+
+	public:
+		void probe(float value, void* p) {
+			if (!param || minValue >= value) {
+				minValue = value;
+				param = p;
+			}
+		}
+
+	public:
+		void* param;
+		float minValue;
+	};
+};
+
+enum BotState
+{
+    BOT_STATE_COMBAT = 0,
+    BOT_STATE_NON_COMBAT = 1,
+    BOT_STATE_DEAD = 2
+};
+
+#define BOT_STATE_MAX 3
+
+class PacketHandlingHelper
+{
+public:
+    void AddHandler(uint16 opcode, string handler);
+    void Handle(ExternalEventHelper &helper);
+    void AddPacket(const WorldPacket& packet);
+
+private:
+    map<uint16, string> handlers;
+    stack<WorldPacket> queue;
+};
+
+class ChatCommandHolder
+{
+public:
+    ChatCommandHolder(string command, Player* owner = NULL, uint32 type = CHAT_MSG_WHISPER) : command(command), owner(owner), type(type) {}
+    ChatCommandHolder(ChatCommandHolder const& other)
+    {
+        this->command = other.command;
+        this->owner = other.owner;
+        this->type = other.type;
+    }
+
+public:
+    string GetCommand() { return command; }
+    Player* GetOwner() { return owner; }
+    uint32 GetType() { return type; }
+
+private:
+    string command;
+    Player* owner;
+    uint32 type;
+};
+
+class PlayerbotAI : public PlayerbotAIBase
+{
+public:
+	PlayerbotAI();
+	PlayerbotAI(Player* bot);
+	virtual ~PlayerbotAI();
+
+public:
+	virtual void UpdateAI(uint32 elapsed);
+	virtual void UpdateAIInternal(uint32 elapsed);
+	string HandleRemoteCommand(string command);
+    void HandleCommand(uint32 type, const string& text, Player& fromPlayer);
+	void HandleBotOutgoingPacket(const WorldPacket& packet);
+    void HandleMasterIncomingPacket(const WorldPacket& packet);
+    void HandleMasterOutgoingPacket(const WorldPacket& packet);
+	void HandleTeleportAck();
+    void ChangeEngine(BotState type);
+    void DoNextAction();
+    void DoSpecificAction(string name);
+    void ChangeStrategy(string name, BotState type);
+    bool ContainsStrategy(StrategyType type);
+    bool HasStrategy(string name, BotState type);
+    void ResetStrategies();
+    void ReInitCurrentEngine();
+    void Reset();
+    bool IsTank(Player* player);
+    bool IsHeal(Player* player);
+    bool IsRanged(Player* player);
+    Creature* GetCreature(ObjectGuid guid);
+    Unit* GetUnit(ObjectGuid guid);
+    GameObject* GetGameObject(ObjectGuid guid);
+    bool TellMaster(ostringstream &stream, PlayerbotSecurityLevel securityLevel = PLAYERBOT_SECURITY_ALLOW_ALL) { return TellMaster(stream.str(), securityLevel); }
+    bool TellMaster(string text, PlayerbotSecurityLevel securityLevel = PLAYERBOT_SECURITY_ALLOW_ALL);
+    bool TellMasterNoFacing(string text, PlayerbotSecurityLevel securityLevel = PLAYERBOT_SECURITY_ALLOW_ALL);
+    void SpellInterrupted(uint32 spellid);
+    int32 CalculateGlobalCooldown(uint32 spellid);
+    void InterruptSpell();
+    void RemoveAura(string name);
+    void RemoveShapeshift();
+    void WaitForSpellCast(Spell *spell);
+
+    virtual bool CanCastSpell(string name, Unit* target);
+    virtual bool CastSpell(string name, Unit* target);
+    virtual bool HasAura(string spellName, Unit* player);
+    virtual bool HasAnyAuraOf(Unit* player, ...);
+
+    virtual bool IsInterruptableSpellCasting(Unit* player, string spell);
+    virtual bool HasAuraToDispel(Unit* player, uint32 dispelType);
+    bool CanCastSpell(uint32 spellid, Unit* target, bool checkHasSpell = true);
+
+    bool HasAura(uint32 spellId, const Unit* player);
+    bool CastSpell(uint32 spellId, Unit* target);
+    bool canDispel(const SpellInfo* entry, uint32 dispelType);
+
+    uint32 GetEquipGearScore(Player* player, bool withBags, bool withBank);
+
+private:
+    void _fillGearScoreData(Player *player, Item* item, std::vector<uint32>* gearScore, uint32& twoHandScore);
+
+public:
+	Player* GetBot() { return bot; }
+    Player* GetMaster() { return master; }
+    void SetMaster(Player* master) { this->master = master; }
+    AiObjectContext* GetAiObjectContext() { return aiObjectContext; }
+    ChatHelper* GetChatHelper() { return &chatHelper; }
+    bool IsOpposing(Player* player);
+    static bool IsOpposing(uint8 race1, uint8 race2);
+    PlayerbotSecurity* GetSecurity() { return &security; }
+
+protected:
+	Player* bot;
+	Player* master;
+	uint32 accountId;
+    AiObjectContext* aiObjectContext;
+    Engine* currentEngine;
+    Engine* engines[BOT_STATE_MAX];
+    BotState currentState;
+    ChatHelper chatHelper;
+    stack<ChatCommandHolder> chatCommands;
+    PacketHandlingHelper botOutgoingPacketHandlers;
+    PacketHandlingHelper masterIncomingPacketHandlers;
+    PacketHandlingHelper masterOutgoingPacketHandlers;
+    CompositeChatFilter chatFilter;
+    PlayerbotSecurity security;
+};
+
diff --git a/src/plugins/playerbot/PlayerbotAIAware.h b/src/plugins/playerbot/PlayerbotAIAware.h
new file mode 100644
index 0000000..740628a
--- /dev/null
+++ b/src/plugins/playerbot/PlayerbotAIAware.h
@@ -0,0 +1,13 @@
+#pragma once
+
+namespace ai
+{
+    class PlayerbotAIAware 
+    {
+    public:
+        PlayerbotAIAware(PlayerbotAI* const ai) : ai(ai) { }
+
+    protected:
+        PlayerbotAI* ai;
+    };
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/PlayerbotAIBase.cpp b/src/plugins/playerbot/PlayerbotAIBase.cpp
new file mode 100644
index 0000000..4acb310
--- /dev/null
+++ b/src/plugins/playerbot/PlayerbotAIBase.cpp
@@ -0,0 +1,51 @@
+#include "../pchdef.h"
+#include "playerbot.h"
+#include "PlayerbotAIConfig.h"
+
+using namespace ai;
+using namespace std;
+
+PlayerbotAIBase::PlayerbotAIBase() : nextAICheckDelay(0)
+{
+}
+
+void PlayerbotAIBase::UpdateAI(uint32 elapsed)
+{
+    if (nextAICheckDelay > elapsed)
+        nextAICheckDelay -= elapsed;
+    else
+        nextAICheckDelay = 0;
+
+    if (!CanUpdateAI())
+        return;
+
+    UpdateAIInternal(elapsed);
+    YieldThread();
+}
+
+void PlayerbotAIBase::SetNextCheckDelay(const uint32 delay)
+{
+    nextAICheckDelay = delay;
+
+    if (nextAICheckDelay > sPlayerbotAIConfig.globalCoolDown)
+        sLog->outMessage("playerbot", LOG_LEVEL_TRACE, "set next check delay: %d", nextAICheckDelay);
+}
+
+void PlayerbotAIBase::IncreaseNextCheckDelay(uint32 delay)
+{
+    nextAICheckDelay += delay;
+
+    if (nextAICheckDelay > sPlayerbotAIConfig.globalCoolDown)
+        sLog->outMessage("playerbot", LOG_LEVEL_TRACE, "increase next check delay: %d", nextAICheckDelay);
+}
+
+bool PlayerbotAIBase::CanUpdateAI()
+{
+    return nextAICheckDelay < 100;
+}
+
+void PlayerbotAIBase::YieldThread()
+{
+    if (nextAICheckDelay < sPlayerbotAIConfig.reactDelay)
+        nextAICheckDelay = sPlayerbotAIConfig.reactDelay;
+}
diff --git a/src/plugins/playerbot/PlayerbotAIBase.h b/src/plugins/playerbot/PlayerbotAIBase.h
new file mode 100644
index 0000000..8e72bf0
--- /dev/null
+++ b/src/plugins/playerbot/PlayerbotAIBase.h
@@ -0,0 +1,24 @@
+#pragma once
+
+class Player;
+class PlayerbotMgr;
+class ChatHandler;
+
+using namespace std;
+
+class PlayerbotAIBase
+{
+public:
+	PlayerbotAIBase();
+
+public:
+	bool CanUpdateAI();
+	void SetNextCheckDelay(const uint32 delay);
+    void IncreaseNextCheckDelay(uint32 delay);
+	void YieldThread();
+    virtual void UpdateAI(uint32 elapsed);
+    virtual void UpdateAIInternal(uint32 elapsed) = 0;
+
+protected:
+	uint32 nextAICheckDelay;
+};
diff --git a/src/plugins/playerbot/PlayerbotAIConfig.cpp b/src/plugins/playerbot/PlayerbotAIConfig.cpp
new file mode 100644
index 0000000..b830d72
--- /dev/null
+++ b/src/plugins/playerbot/PlayerbotAIConfig.cpp
@@ -0,0 +1,229 @@
+#include "../pchdef.h"
+#include "PlayerbotAIConfig.h"
+#include "playerbot.h"
+#include "RandomPlayerbotFactory.h"
+#include "../../game/Accounts/AccountMgr.h"
+
+using namespace std;
+
+PlayerbotAIConfig::PlayerbotAIConfig()
+{
+}
+
+template <class T>
+void LoadList(string value, T &list)
+{
+    vector<string> ids = split(value, ',');
+    for (vector<string>::iterator i = ids.begin(); i != ids.end(); i++)
+    {
+        uint32 id = atoi((*i).c_str());
+        if (!id)
+            continue;
+
+        list.push_back(id);
+    }
+}
+
+bool PlayerbotAIConfig::Initialize()
+{
+    sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Initializing AI Playerbot by ike3, based on the original Playerbot by blueboy");
+
+    string error;
+    if (!config.LoadInitial("aiplayerbot.conf", error))
+    {
+        sLog->outMessage("playerbot", LOG_LEVEL_INFO, "AI Playerbot is Disabled. Unable to open configuration file aiplayerbot.conf");
+        return false;
+    }
+
+    enabled = config.GetBoolDefault("AiPlayerbot.Enabled", true);
+    if (!enabled)
+    {
+        sLog->outMessage("playerbot", LOG_LEVEL_INFO, "AI Playerbot is Disabled in aiplayerbot.conf");
+        return false;
+    }
+
+    globalCoolDown = (uint32) config.GetIntDefault("AiPlayerbot.GlobalCooldown", 500);
+    maxWaitForMove = config.GetIntDefault("AiPlayerbot.MaxWaitForMove", 3000);
+    reactDelay = (uint32) config.GetIntDefault("AiPlayerbot.ReactDelay", 100);
+
+    sightDistance = config.GetFloatDefault("AiPlayerbot.SightDistance", 50.0f);
+    spellDistance = config.GetFloatDefault("AiPlayerbot.SpellDistance", 30.0f);
+    reactDistance = config.GetFloatDefault("AiPlayerbot.ReactDistance", 150.0f);
+    grindDistance = config.GetFloatDefault("AiPlayerbot.GrindDistance", 100.0f);
+    lootDistance = config.GetFloatDefault("AiPlayerbot.LootDistance", 20.0f);
+    fleeDistance = config.GetFloatDefault("AiPlayerbot.FleeDistance", 20.0f);
+    tooCloseDistance = config.GetFloatDefault("AiPlayerbot.TooCloseDistance", 5.0f);
+    meleeDistance = config.GetFloatDefault("AiPlayerbot.MeleeDistance", 0.5f);
+    followDistance = config.GetFloatDefault("AiPlayerbot.FollowDistance", 1.5f);
+    whisperDistance = config.GetFloatDefault("AiPlayerbot.WhisperDistance", 6000.0f);
+    contactDistance = config.GetFloatDefault("AiPlayerbot.ContactDistance", 0.5f);
+
+    criticalHealth = config.GetIntDefault("AiPlayerbot.CriticalHealth", 20);
+    lowHealth = config.GetIntDefault("AiPlayerbot.LowHealth", 50);
+    mediumHealth = config.GetIntDefault("AiPlayerbot.MediumHealth", 70);
+    almostFullHealth = config.GetIntDefault("AiPlayerbot.AlmostFullHealth", 85);
+    lowMana = config.GetIntDefault("AiPlayerbot.LowMana", 15);
+    mediumMana = config.GetIntDefault("AiPlayerbot.MediumMana", 40);
+
+    randomGearLoweringChance = config.GetFloatDefault("AiPlayerbot.RandomGearLoweringChance", 0.15);
+    randomBotMaxLevelChance = config.GetFloatDefault("AiPlayerbot.RandomBotMaxLevelChance", 0.4);
+
+    iterationsPerTick = config.GetIntDefault("AiPlayerbot.IterationsPerTick", 4);
+
+    allowGuildBots = config.GetBoolDefault("AiPlayerbot.AllowGuildBots", true);
+
+    randomBotMapsAsString = config.GetStringDefault("AiPlayerbot.RandomBotMaps", "0,1,530,571");
+    LoadList<vector<uint32> >(randomBotMapsAsString, randomBotMaps);
+    LoadList<list<uint32> >(config.GetStringDefault("AiPlayerbot.RandomBotQuestItems", "6948,5175,5176,5177,5178"), randomBotQuestItems);
+    LoadList<list<uint32> >(config.GetStringDefault("AiPlayerbot.RandomBotSpellIds", "54197"), randomBotSpellIds);
+
+    randomBotAutologin = config.GetBoolDefault("AiPlayerbot.RandomBotAutologin", true);
+    minRandomBots = config.GetIntDefault("AiPlayerbot.MinRandomBots", 50);
+    maxRandomBots = config.GetIntDefault("AiPlayerbot.MaxRandomBots", 200);
+    randomBotUpdateInterval = config.GetIntDefault("AiPlayerbot.RandomBotUpdateInterval", 60);
+    randomBotCountChangeMinInterval = config.GetIntDefault("AiPlayerbot.RandomBotCountChangeMinInterval", 24 * 3600);
+    randomBotCountChangeMaxInterval = config.GetIntDefault("AiPlayerbot.RandomBotCountChangeMaxInterval", 3 * 24 * 3600);
+    minRandomBotInWorldTime = config.GetIntDefault("AiPlayerbot.MinRandomBotInWorldTime", 24 * 3600);
+    maxRandomBotInWorldTime = config.GetIntDefault("AiPlayerbot.MaxRandomBotInWorldTime", 14 * 24 * 3600);
+    minRandomBotRandomizeTime = config.GetIntDefault("AiPlayerbot.MinRandomBotRandomizeTime", 2 * 3600);
+    maxRandomBotRandomizeTime = config.GetIntDefault("AiPlayerbot.MaxRandomRandomizeTime", 14 * 24 * 3600);
+    minRandomBotReviveTime = config.GetIntDefault("AiPlayerbot.MinRandomBotReviveTime", 60);
+    maxRandomBotReviveTime = config.GetIntDefault("AiPlayerbot.MaxRandomReviveTime", 300);
+    randomBotTeleportDistance = config.GetIntDefault("AiPlayerbot.RandomBotTeleportDistance", 1000);
+    minRandomBotsPerInterval = config.GetIntDefault("AiPlayerbot.MinRandomBotsPerInterval", 50);
+    maxRandomBotsPerInterval = config.GetIntDefault("AiPlayerbot.MaxRandomBotsPerInterval", 100);
+    minRandomBotsPriceChangeInterval = config.GetIntDefault("AiPlayerbot.MinRandomBotsPriceChangeInterval", 2 * 3600);
+    maxRandomBotsPriceChangeInterval = config.GetIntDefault("AiPlayerbot.MaxRandomBotsPriceChangeInterval", 48 * 3600);
+    randomBotJoinLfg = config.GetBoolDefault("AiPlayerbot.RandomBotJoinLfg", true);
+    logInGroupOnly = config.GetBoolDefault("AiPlayerbot.LogInGroupOnly", true);
+    logValuesPerTick = config.GetBoolDefault("AiPlayerbot.LogValuesPerTick", false);
+    fleeingEnabled = config.GetBoolDefault("AiPlayerbot.FleeingEnabled", true);
+    randomBotMinLevel = config.GetIntDefault("AiPlayerbot.RandomBotMinLevel", 1);
+    randomBotMaxLevel = config.GetIntDefault("AiPlayerbot.RandomBotMaxLevel", 255);
+    randomBotLoginAtStartup = config.GetBoolDefault("AiPlayerbot.RandomBotLoginAtStartup", true);
+    randomBotTeleLevel = config.GetIntDefault("AiPlayerbot.RandomBotTeleLevel", 3);
+
+    randomChangeMultiplier = config.GetFloatDefault("AiPlayerbot.RandomChangeMultiplier", 1.0);
+
+    randomBotCombatStrategies = config.GetStringDefault("AiPlayerbot.RandomBotCombatStrategies", "+dps,+attack weak");
+    randomBotNonCombatStrategies = config.GetStringDefault("AiPlayerbot.RandomBotNonCombatStrategies", "+grind,+move random,+loot");
+
+    commandPrefix = config.GetStringDefault("AiPlayerbot.CommandPrefix", "");
+
+    commandServerPort = config.GetIntDefault("AiPlayerbot.CommandServerPort", 0);
+
+    for (uint32 cls = 0; cls < MAX_CLASSES; ++cls)
+    {
+        for (uint32 spec = 0; spec < 3; ++spec)
+        {
+            ostringstream os; os << "AiPlayerbot.RandomClassSpecProbability." << cls << "." << spec;
+            specProbability[cls][spec] = config.GetIntDefault(os.str().c_str(), 33);
+        }
+    }
+
+    randomBotAccountPrefix = config.GetStringDefault("AiPlayerbot.RandomBotAccountPrefix", "rndbot");
+    randomBotAccountCount = config.GetIntDefault("AiPlayerbot.RandomBotAccountCount", 50);
+    deleteRandomBotAccounts = config.GetBoolDefault("AiPlayerbot.DeleteRandomBotAccounts", false);
+    randomBotGuildCount = config.GetIntDefault("AiPlayerbot.RandomBotGuildCount", 50);
+    deleteRandomBotGuilds = config.GetBoolDefault("AiPlayerbot.DeleteRandomBotGuilds", false);
+
+    guildTaskEnabled = config.GetBoolDefault("AiPlayerbot.EnableGuildTasks", true);
+    minGuildTaskChangeTime = config.GetIntDefault("AiPlayerbot.MinGuildTaskChangeTime", 2 * 24 * 3600);
+    maxGuildTaskChangeTime = config.GetIntDefault("AiPlayerbot.MaxGuildTaskChangeTime", 5 * 24 * 3600);
+    minGuildTaskAdvertisementTime = config.GetIntDefault("AiPlayerbot.MinGuildTaskAdvertisementTime", 8 * 3600);
+    maxGuildTaskAdvertisementTime = config.GetIntDefault("AiPlayerbot.MaxGuildTaskAdvertisementTime", 4 * 24 * 3600);
+    minGuildTaskRewardTime = config.GetIntDefault("AiPlayerbot.MinGuildTaskRewardTime", 60);
+    maxGuildTaskRewardTime = config.GetIntDefault("AiPlayerbot.MaxGuildTaskRewardTime", 600);
+
+    RandomPlayerbotFactory::CreateRandomBots();
+    sLog->outMessage("playerbot", LOG_LEVEL_INFO, "AI Playerbot configuration loaded");
+
+    return true;
+}
+
+
+bool PlayerbotAIConfig::IsInRandomAccountList(uint32 id)
+{
+    return find(randomBotAccounts.begin(), randomBotAccounts.end(), id) != randomBotAccounts.end();
+}
+
+bool PlayerbotAIConfig::IsInRandomQuestItemList(uint32 id)
+{
+    return find(randomBotQuestItems.begin(), randomBotQuestItems.end(), id) != randomBotQuestItems.end();
+}
+
+string PlayerbotAIConfig::GetValue(string name)
+{
+    ostringstream out;
+
+    if (name == "GlobalCooldown")
+        out << globalCoolDown;
+    else if (name == "ReactDelay")
+        out << reactDelay;
+
+    else if (name == "SightDistance")
+        out << sightDistance;
+    else if (name == "SpellDistance")
+        out << spellDistance;
+    else if (name == "ReactDistance")
+        out << reactDistance;
+    else if (name == "GrindDistance")
+        out << grindDistance;
+    else if (name == "LootDistance")
+        out << lootDistance;
+    else if (name == "FleeDistance")
+        out << fleeDistance;
+
+    else if (name == "CriticalHealth")
+        out << criticalHealth;
+    else if (name == "LowHealth")
+        out << lowHealth;
+    else if (name == "MediumHealth")
+        out << mediumHealth;
+    else if (name == "AlmostFullHealth")
+        out << almostFullHealth;
+    else if (name == "LowMana")
+        out << lowMana;
+
+    else if (name == "IterationsPerTick")
+        out << iterationsPerTick;
+
+    return out.str();
+}
+
+void PlayerbotAIConfig::SetValue(string name, string value)
+{
+    istringstream out(value, istringstream::in);
+
+    if (name == "GlobalCooldown")
+        out >> globalCoolDown;
+    else if (name == "ReactDelay")
+        out >> reactDelay;
+
+    else if (name == "SightDistance")
+        out >> sightDistance;
+    else if (name == "SpellDistance")
+        out >> spellDistance;
+    else if (name == "ReactDistance")
+        out >> reactDistance;
+    else if (name == "GrindDistance")
+        out >> grindDistance;
+    else if (name == "LootDistance")
+        out >> lootDistance;
+    else if (name == "FleeDistance")
+        out >> fleeDistance;
+
+    else if (name == "CriticalHealth")
+        out >> criticalHealth;
+    else if (name == "LowHealth")
+        out >> lowHealth;
+    else if (name == "MediumHealth")
+        out >> mediumHealth;
+    else if (name == "AlmostFullHealth")
+        out >> almostFullHealth;
+    else if (name == "LowMana")
+        out >> lowMana;
+
+    else if (name == "IterationsPerTick")
+        out >> iterationsPerTick;
+}
diff --git a/src/plugins/playerbot/PlayerbotAIConfig.h b/src/plugins/playerbot/PlayerbotAIConfig.h
new file mode 100644
index 0000000..1bbb57d
--- /dev/null
+++ b/src/plugins/playerbot/PlayerbotAIConfig.h
@@ -0,0 +1,82 @@
+#pragma once
+
+#include "../../common/Configuration/Config.h"
+
+class Player;
+class PlayerbotMgr;
+class ChatHandler;
+
+class PlayerbotAIConfig
+{
+public:
+    PlayerbotAIConfig();
+    static PlayerbotAIConfig& instance()
+    {
+        static PlayerbotAIConfig instance;
+        return instance;
+    }
+
+public:
+    bool Initialize();
+    bool IsInRandomAccountList(uint32 id);
+    bool IsInRandomQuestItemList(uint32 id);
+
+    bool enabled;
+    bool allowGuildBots;
+    uint32 globalCoolDown, reactDelay, maxWaitForMove;
+    float sightDistance, spellDistance, reactDistance, grindDistance, lootDistance,
+        fleeDistance, tooCloseDistance, meleeDistance, followDistance, whisperDistance, contactDistance;
+    uint32 criticalHealth, lowHealth, mediumHealth, almostFullHealth;
+    uint32 lowMana, mediumMana;
+
+    bool randomBotAutologin;
+    std::string randomBotMapsAsString;
+    std::vector<uint32> randomBotMaps;
+    std::list<uint32> randomBotQuestItems;
+    std::list<uint32> randomBotAccounts;
+    std::list<uint32> randomBotSpellIds;
+    uint32 randomBotTeleportDistance;
+    float randomGearLoweringChance;
+    float randomBotMaxLevelChance;
+    uint32 minRandomBots, maxRandomBots;
+    uint32 randomBotUpdateInterval, randomBotCountChangeMinInterval, randomBotCountChangeMaxInterval;
+    uint32 minRandomBotInWorldTime, maxRandomBotInWorldTime;
+    uint32 minRandomBotRandomizeTime, maxRandomBotRandomizeTime;
+    uint32 minRandomBotReviveTime, maxRandomBotReviveTime;
+    uint32 minRandomBotPvpTime, maxRandomBotPvpTime;
+    uint32 minRandomBotsPerInterval, maxRandomBotsPerInterval;
+    uint32 minRandomBotsPriceChangeInterval, maxRandomBotsPriceChangeInterval;
+    bool randomBotJoinLfg;
+    bool randomBotLoginAtStartup;
+    uint32 randomBotTeleLevel;
+    bool logInGroupOnly, logValuesPerTick;
+    bool fleeingEnabled;
+    std::string randomBotCombatStrategies, randomBotNonCombatStrategies;
+    uint32 randomBotMinLevel, randomBotMaxLevel;
+    float randomChangeMultiplier;
+    uint32 specProbability[MAX_CLASSES][3];
+    std::string commandPrefix;
+    std::string randomBotAccountPrefix;
+    uint32 randomBotAccountCount;
+    bool deleteRandomBotAccounts;
+    uint32 randomBotGuildCount;
+    bool deleteRandomBotGuilds;
+    std::list<uint32> randomBotGuilds;
+
+    bool guildTaskEnabled;
+    uint32 minGuildTaskChangeTime, maxGuildTaskChangeTime;
+    uint32 minGuildTaskAdvertisementTime, maxGuildTaskAdvertisementTime;
+    uint32 minGuildTaskRewardTime, maxGuildTaskRewardTime;
+
+    uint32 iterationsPerTick;
+
+    int commandServerPort;
+
+    std::string GetValue(std::string name);
+    void SetValue(std::string name, std::string value);
+
+private:
+    ConfigMgr config;
+};
+
+#define sPlayerbotAIConfig PlayerbotAIConfig::instance()
diff --git a/src/plugins/playerbot/PlayerbotCommandServer.cpp b/src/plugins/playerbot/PlayerbotCommandServer.cpp
new file mode 100644
index 0000000..07aceb2
--- /dev/null
+++ b/src/plugins/playerbot/PlayerbotCommandServer.cpp
@@ -0,0 +1,94 @@
+#include "../pchdef.h"
+#include "playerbot.h"
+#include "PlayerbotAIConfig.h"
+#include "PlayerbotFactory.h"
+#include "PlayerbotCommandServer.h"
+#include <cstdlib>
+#include <iostream>
+#include <boost/bind.hpp>
+#include <boost/smart_ptr.hpp>
+#include <boost/asio.hpp>
+#include <boost/thread/thread.hpp>
+
+
+using namespace std;
+using boost::asio::ip::tcp;
+typedef boost::shared_ptr<tcp::socket> socket_ptr;
+
+bool ReadLine(socket_ptr sock, string* buffer, string* line)
+{
+    // Do the real reading from fd until buffer has '\n'.
+    string::iterator pos;
+    while ((pos = find(buffer->begin(), buffer->end(), '\n')) == buffer->end())
+    {
+        char buf[1025];
+        boost::system::error_code error;
+        size_t n = sock->read_some(boost::asio::buffer(buf), error);
+        if (n == -1 || error == boost::asio::error::eof)
+            return false;
+        else if (error)
+            throw boost::system::system_error(error); // Some other error.
+
+        buf[n] = 0;
+        *buffer += buf;
+    }
+
+    *line = string(buffer->begin(), pos);
+    *buffer = string(pos + 1, buffer->end());
+    return true;
+}
+
+void session(socket_ptr sock)
+{
+    try
+    {
+        string buffer, request;
+        while (ReadLine(sock, &buffer, &request)) {
+            string response = sRandomPlayerbotMgr.HandleRemoteCommand(request) + "\n";
+            boost::asio::write(*sock, boost::asio::buffer(response.c_str(), response.size()));
+            request = "";
+        }
+    }
+    catch (std::exception& e)
+    {
+        sLog->outMessage("playerbot", LOG_LEVEL_ERROR, e.what());
+    }
+}
+
+void server(boost::asio::io_service& io_service, short port)
+{
+    tcp::acceptor a(io_service, tcp::endpoint(tcp::v4(), port));
+    for (;;)
+    {
+        socket_ptr sock(new tcp::socket(io_service));
+        a.accept(*sock);
+        boost::thread t(boost::bind(session, sock));
+    }
+}
+
+void Run()
+{
+    if (!sPlayerbotAIConfig.commandServerPort) {
+        return;
+    }
+
+    ostringstream s; s << "Starting Playerbot Command Server on port " << sPlayerbotAIConfig.commandServerPort;
+    sLog->outMessage("playerbot", LOG_LEVEL_INFO, s.str().c_str());
+
+    try
+    {
+        boost::asio::io_service io_service;
+        server(io_service, sPlayerbotAIConfig.commandServerPort);
+    }
+    catch (std::exception& e)
+    {
+        sLog->outMessage("playerbot", LOG_LEVEL_ERROR, e.what());
+    }
+}
+
+
+void PlayerbotCommandServer::Start()
+{
+    thread serverThread(Run);
+    serverThread.detach();
+}
diff --git a/src/plugins/playerbot/PlayerbotCommandServer.h b/src/plugins/playerbot/PlayerbotCommandServer.h
new file mode 100644
index 0000000..0ea66c7
--- /dev/null
+++ b/src/plugins/playerbot/PlayerbotCommandServer.h
@@ -0,0 +1,26 @@
+#ifndef _PlayerbotCommandServer_H
+#define _PlayerbotCommandServer_H
+
+#include "Common.h"
+#include "PlayerbotAIBase.h"
+#include "PlayerbotMgr.h"
+
+using namespace std;
+
+class PlayerbotCommandServer
+{
+public:
+    PlayerbotCommandServer() {}
+    virtual ~PlayerbotCommandServer() {}
+    static PlayerbotCommandServer& instance()
+    {
+        static PlayerbotCommandServer instance;
+        return instance;
+    }
+
+    void Start();
+};
+
+#define sPlayerbotCommandServer PlayerbotCommandServer::instance()
+
+#endif
diff --git a/src/plugins/playerbot/PlayerbotFactory.cpp b/src/plugins/playerbot/PlayerbotFactory.cpp
new file mode 100644
index 0000000..8d1b2b3
--- /dev/null
+++ b/src/plugins/playerbot/PlayerbotFactory.cpp
@@ -0,0 +1,1738 @@
+#include "../pchdef.h"
+#include "playerbot.h"
+#include "PlayerbotFactory.h"
+#include "../../server/game/Guilds/GuildMgr.h"
+#include "../ItemPrototype.h"
+#include "PlayerbotAIConfig.h"
+#include "../../shared/DataStores/DBCStore.h"
+#include "../Miscellaneous/SharedDefines.h"
+#include "../ahbot/AhBot.h"
+#include "../Entities/Pet/Pet.h"
+#include "RandomPlayerbotFactory.h"
+
+using namespace ai;
+using namespace std;
+
+uint32 PlayerbotFactory::tradeSkills[] =
+{
+    SKILL_ALCHEMY,
+    SKILL_ENCHANTING,
+    SKILL_SKINNING,
+    SKILL_JEWELCRAFTING,
+    SKILL_INSCRIPTION,
+    SKILL_TAILORING,
+    SKILL_LEATHERWORKING,
+    SKILL_ENGINEERING,
+    SKILL_HERBALISM,
+    SKILL_MINING,
+    SKILL_BLACKSMITHING,
+    SKILL_COOKING,
+    SKILL_FIRST_AID,
+    SKILL_FISHING
+};
+
+void PlayerbotFactory::Randomize()
+{
+    Randomize(true);
+}
+
+void PlayerbotFactory::Refresh()
+{
+    Prepare();
+    InitEquipment(true);
+    InitAmmo();
+    InitFood();
+    InitPotions();
+
+    uint32 money = urand(level * 1000, level * 5 * 1000);
+    if (bot->GetMoney() < money)
+        bot->SetMoney(money);
+    bot->SaveToDB();
+}
+
+void PlayerbotFactory::CleanRandomize()
+{
+    Randomize(false);
+}
+
+void PlayerbotFactory::Prepare()
+{
+    if (!itemQuality)
+    {
+        if (level <= 10)
+            itemQuality = urand(ITEM_QUALITY_NORMAL, ITEM_QUALITY_UNCOMMON);
+        else if (level <= 20)
+            itemQuality = urand(ITEM_QUALITY_UNCOMMON, ITEM_QUALITY_RARE);
+        else if (level <= 40)
+            itemQuality = urand(ITEM_QUALITY_UNCOMMON, ITEM_QUALITY_EPIC);
+        else if (level < 60)
+            itemQuality = urand(ITEM_QUALITY_UNCOMMON, ITEM_QUALITY_EPIC);
+        else
+            itemQuality = urand(ITEM_QUALITY_RARE, ITEM_QUALITY_EPIC);
+    }
+
+    if (bot->isDead())
+        bot->ResurrectPlayer(1.0f, false);
+
+    bot->CombatStop(true);
+    bot->SetLevel(level);
+    bot->SetFlag(PLAYER_FLAGS, PLAYER_FLAGS_HIDE_HELM);
+    bot->SetFlag(PLAYER_FLAGS, PLAYER_FLAGS_HIDE_CLOAK);
+}
+
+void PlayerbotFactory::Randomize(bool incremental)
+{
+    sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Preparing to randomize...");
+    Prepare();
+
+    sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Resetting player...");
+    bot->ResetTalents(true);
+    ClearSpells();
+    ClearInventory();
+    bot->SaveToDB();
+/* Disabled. Causes crash
+    sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Initializing quests...");
+    InitQuests();
+*/
+    // quest rewards boost bot level, so reduce back
+    bot->SetLevel(level);
+    ClearInventory();
+    bot->SetUInt32Value(PLAYER_XP, 0);
+    CancelAuras();
+    bot->SaveToDB();
+
+    sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Initializing spells (step 1)...");
+    InitAvailableSpells();
+
+    sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Initializing skills (step 1)...");
+    InitSkills();
+    InitTradeSkills();
+
+    sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Initializing talents...");
+    InitTalents();
+
+    sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Initializing spells (step 2)...");
+    InitAvailableSpells();
+    InitSpecialSpells();
+
+    sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Initializing mounts...");
+    InitMounts();
+
+    sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Initializing skills (step 2)...");
+    UpdateTradeSkills();
+    bot->SaveToDB();
+
+    sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Initializing equipmemt...");
+    InitEquipment(incremental);
+
+    sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Initializing bags...");
+    InitBags();
+
+    sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Initializing ammo...");
+    InitAmmo();
+
+    sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Initializing food...");
+    InitFood();
+
+    sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Initializing potions...");
+    InitPotions();
+
+    sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Initializing second equipment set...");
+    InitSecondEquipmentSet();
+
+    sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Initializing inventory...");
+    InitInventory();
+
+    sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Initializing glyphs...");
+    InitGlyphs();
+
+    sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Initializing guilds...");
+    InitGuild();
+
+    sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Initializing pet...");
+    InitPet();
+
+    sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Saving to DB...");
+    bot->SetMoney(urand(level * 1000, level * 5 * 1000));
+    bot->SaveToDB();
+}
+
+void PlayerbotFactory::InitPet()
+{
+    Pet* pet = bot->GetPet();
+    if (!pet)
+    {
+        if (bot->getClass() != CLASS_HUNTER)
+            return;
+
+        Map* map = bot->GetMap();
+        if (!map)
+            return;
+
+		vector<uint32> ids;
+	    CreatureTemplateContainer const* creatureTemplateContainer = sObjectMgr->GetCreatureTemplates();
+	    for (CreatureTemplateContainer::const_iterator i = creatureTemplateContainer->begin(); i != creatureTemplateContainer->end(); ++i)
+	    {
+	        CreatureTemplate const& co = i->second;
+            if (!co.IsTameable(false))
+                continue;
+
+            if (co.minlevel > bot->getLevel())
+                continue;
+
+			PetLevelInfo const* petInfo = sObjectMgr->GetPetLevelInfo(co.Entry, bot->getLevel());
+            if (!petInfo)
+                continue;
+
+			ids.push_back(i->first);
+		}
+
+        if (ids.empty())
+        {
+            sLog->outMessage("playerbot", LOG_LEVEL_ERROR, "No pets available for bot %s (%d level)", bot->GetName().c_str(), bot->getLevel());
+            return;
+        }
+
+		for (int i = 0; i < 100; i++)
+		{
+			int index = urand(0, ids.size() - 1);
+			CreatureTemplate const* co = sObjectMgr->GetCreatureTemplate(ids[index]);
+
+            PetLevelInfo const* petInfo = sObjectMgr->GetPetLevelInfo(co->Entry, bot->getLevel());
+            if (!petInfo)
+                continue;
+
+            uint32 guid = map->GenerateLowGuid<HighGuid::Pet>();
+            pet = new Pet(bot, HUNTER_PET);
+            if (!pet->Create(guid, map, 0, ids[index], 0))
+            {
+                delete pet;
+                pet = NULL;
+                continue;
+            }
+
+            pet->SetPosition(bot->GetPositionX(), bot->GetPositionY(), bot->GetPositionZ(), bot->GetOrientation());
+            pet->setFaction(bot->getFaction());
+            pet->SetLevel(bot->getLevel());
+            bot->SetPetGUID(pet->GetGUID());
+            bot->GetMap()->AddToMap(pet->ToCreature());
+            bot->SetMinion(pet, true);
+            pet->InitTalentForLevel();
+            bot->PetSpellInitialize();
+            bot->InitTamedPet(pet, bot->getLevel(), 0);
+
+            sLog->outMessage("playerbot", LOG_LEVEL_DEBUG,  "Bot %s: assign pet %d (%d level)", bot->GetName().c_str(), co->Entry, bot->getLevel());
+            pet->SavePetToDB(PET_SAVE_AS_CURRENT);
+            break;
+        }
+    }
+
+    if (!pet)
+    {
+        sLog->outMessage("playerbot", LOG_LEVEL_ERROR, "Cannot create pet for bot %s", bot->GetName().c_str());
+        return;
+    }
+
+    for (PetSpellMap::const_iterator itr = pet->m_spells.begin(); itr != pet->m_spells.end(); ++itr)
+    {
+        if(itr->second.state == PETSPELL_REMOVED)
+            continue;
+
+        uint32 spellId = itr->first;
+        const SpellInfo* spellInfo = sSpellMgr->GetSpellInfo(spellId);
+        if (spellInfo->IsPassive())
+            continue;
+
+        pet->ToggleAutocast(spellInfo, true);
+    }
+}
+
+void PlayerbotFactory::ClearSpells()
+{
+    list<uint32> spells;
+    for(PlayerSpellMap::iterator itr = bot->GetSpellMap().begin(); itr != bot->GetSpellMap().end(); ++itr)
+    {
+        uint32 spellId = itr->first;
+        const SpellInfo* spellInfo = sSpellMgr->GetSpellInfo(spellId);
+        if(itr->second->state == PLAYERSPELL_REMOVED || itr->second->disabled || spellInfo->IsPassive())
+            continue;
+
+        spells.push_back(spellId);
+    }
+
+    for (list<uint32>::iterator i = spells.begin(); i != spells.end(); ++i)
+    {
+        bot->RemoveSpell(*i, false, false);
+    }
+}
+
+void PlayerbotFactory::InitSpells()
+{
+    for (int i = 0; i < 15; i++)
+        InitAvailableSpells();
+}
+
+void PlayerbotFactory::InitTalents()
+{
+    uint32 point = urand(0, 100);
+    uint8 cls = bot->getClass();
+    uint32 p1 = sPlayerbotAIConfig.specProbability[cls][0];
+    uint32 p2 = p1 + sPlayerbotAIConfig.specProbability[cls][1];
+
+    uint32 specNo = (point < p1 ? 0 : (point < p2 ? 1 : 2));
+    InitTalents(specNo);
+
+    if (bot->GetFreeTalentPoints())
+        InitTalents(2 - specNo);
+}
+
+
+class DestroyItemsVisitor : public IterateItemsVisitor
+{
+public:
+    DestroyItemsVisitor(Player* bot) : IterateItemsVisitor(), bot(bot) {}
+
+    virtual bool Visit(Item* item)
+    {
+        uint32 id = item->GetTemplate()->ItemId;
+        if (CanKeep(id))
+        {
+            keep.insert(id);
+            return true;
+        }
+
+        bot->DestroyItem(item->GetBagSlot(), item->GetSlot(), true);
+        return true;
+    }
+
+private:
+    bool CanKeep(uint32 id)
+    {
+        if (keep.find(id) != keep.end())
+            return false;
+
+        if (sPlayerbotAIConfig.IsInRandomQuestItemList(id))
+            return true;
+
+
+        ItemTemplate const* proto = sObjectMgr->GetItemTemplate(id);
+        if (proto->Class == ITEM_CLASS_MISC && (proto->SubClass == ITEM_SUBCLASS_JUNK_REAGENT || proto->SubClass == ITEM_SUBCLASS_JUNK))
+            return true;
+
+        return false;
+    }
+
+private:
+    Player* bot;
+    set<uint32> keep;
+
+};
+
+bool PlayerbotFactory::CanEquipArmor(ItemTemplate const* proto)
+{
+    if (bot->HasSkill(SKILL_SHIELD) && proto->SubClass == ITEM_SUBCLASS_ARMOR_SHIELD)
+        return true;
+
+    if (bot->HasSkill(SKILL_PLATE_MAIL))
+    {
+        if (proto->SubClass != ITEM_SUBCLASS_ARMOR_PLATE)
+            return false;
+    }
+    else if (bot->HasSkill(SKILL_MAIL))
+    {
+        if (proto->SubClass != ITEM_SUBCLASS_ARMOR_MAIL)
+            return false;
+    }
+    else if (bot->HasSkill(SKILL_LEATHER))
+    {
+        if (proto->SubClass != ITEM_SUBCLASS_ARMOR_LEATHER)
+            return false;
+    }
+
+    if (proto->Quality <= ITEM_QUALITY_NORMAL)
+        return true;
+
+    uint8 sp = 0, ap = 0, tank = 0;
+    for (int j = 0; j < MAX_ITEM_PROTO_STATS; ++j)
+    {
+        // for ItemStatValue != 0
+        if(!proto->ItemStat[j].ItemStatValue)
+            continue;
+
+        AddItemStats(proto->ItemStat[j].ItemStatType, sp, ap, tank);
+    }
+
+    return CheckItemStats(sp, ap, tank);
+}
+
+bool PlayerbotFactory::CheckItemStats(uint8 sp, uint8 ap, uint8 tank)
+{
+    switch (bot->getClass())
+    {
+    case CLASS_PRIEST:
+    case CLASS_MAGE:
+    case CLASS_WARLOCK:
+        if (!sp || ap > sp || tank > sp)
+            return false;
+        break;
+    case CLASS_PALADIN:
+    case CLASS_WARRIOR:
+        if ((!ap && !tank) || sp > ap || sp > tank)
+            return false;
+        break;
+    case CLASS_HUNTER:
+    case CLASS_ROGUE:
+        if (!ap || sp > ap || sp > tank)
+            return false;
+        break;
+    }
+
+    return sp || ap || tank;
+}
+
+void PlayerbotFactory::AddItemStats(uint32 mod, uint8 &sp, uint8 &ap, uint8 &tank)
+{
+    switch (mod)
+    {
+    case ITEM_MOD_HIT_RATING:
+    case ITEM_MOD_CRIT_RATING:
+    case ITEM_MOD_HASTE_RATING:
+    case ITEM_MOD_HEALTH:
+    case ITEM_MOD_STAMINA:
+    case ITEM_MOD_HEALTH_REGEN:
+    case ITEM_MOD_MANA:
+    case ITEM_MOD_INTELLECT:
+    case ITEM_MOD_SPIRIT:
+    case ITEM_MOD_MANA_REGENERATION:
+    case ITEM_MOD_SPELL_POWER:
+    case ITEM_MOD_SPELL_PENETRATION:
+    case ITEM_MOD_HIT_SPELL_RATING:
+    case ITEM_MOD_CRIT_SPELL_RATING:
+    case ITEM_MOD_HASTE_SPELL_RATING:
+        sp++;
+        break;
+    }
+
+    switch (mod)
+    {
+    case ITEM_MOD_HIT_RATING:
+    case ITEM_MOD_CRIT_RATING:
+    case ITEM_MOD_HASTE_RATING:
+    case ITEM_MOD_AGILITY:
+    case ITEM_MOD_STRENGTH:
+    case ITEM_MOD_HEALTH:
+    case ITEM_MOD_STAMINA:
+    case ITEM_MOD_HEALTH_REGEN:
+    case ITEM_MOD_DEFENSE_SKILL_RATING:
+    case ITEM_MOD_DODGE_RATING:
+    case ITEM_MOD_PARRY_RATING:
+    case ITEM_MOD_BLOCK_RATING:
+    case ITEM_MOD_HIT_TAKEN_MELEE_RATING:
+    case ITEM_MOD_HIT_TAKEN_RANGED_RATING:
+    case ITEM_MOD_HIT_TAKEN_SPELL_RATING:
+    case ITEM_MOD_CRIT_TAKEN_MELEE_RATING:
+    case ITEM_MOD_CRIT_TAKEN_RANGED_RATING:
+    case ITEM_MOD_CRIT_TAKEN_SPELL_RATING:
+    case ITEM_MOD_HIT_TAKEN_RATING:
+    case ITEM_MOD_CRIT_TAKEN_RATING:
+    case ITEM_MOD_RESILIENCE_RATING:
+    case ITEM_MOD_BLOCK_VALUE:
+        tank++;
+        break;
+    }
+
+    switch (mod)
+    {
+    case ITEM_MOD_HEALTH:
+    case ITEM_MOD_STAMINA:
+    case ITEM_MOD_HEALTH_REGEN:
+    case ITEM_MOD_AGILITY:
+    case ITEM_MOD_STRENGTH:
+    case ITEM_MOD_HIT_MELEE_RATING:
+    case ITEM_MOD_HIT_RANGED_RATING:
+    case ITEM_MOD_CRIT_MELEE_RATING:
+    case ITEM_MOD_CRIT_RANGED_RATING:
+    case ITEM_MOD_HASTE_MELEE_RATING:
+    case ITEM_MOD_HASTE_RANGED_RATING:
+    case ITEM_MOD_HIT_RATING:
+    case ITEM_MOD_CRIT_RATING:
+    case ITEM_MOD_HASTE_RATING:
+    case ITEM_MOD_EXPERTISE_RATING:
+    case ITEM_MOD_ATTACK_POWER:
+    case ITEM_MOD_RANGED_ATTACK_POWER:
+    case ITEM_MOD_ARMOR_PENETRATION_RATING:
+        ap++;
+        break;
+    }
+}
+
+bool PlayerbotFactory::CanEquipWeapon(ItemTemplate const* proto)
+{
+    switch (bot->getClass())
+    {
+    case CLASS_PRIEST:
+        if (proto->SubClass != ITEM_SUBCLASS_WEAPON_STAFF &&
+                proto->SubClass != ITEM_SUBCLASS_WEAPON_WAND &&
+                proto->SubClass != ITEM_SUBCLASS_WEAPON_MACE)
+            return false;
+        break;
+    case CLASS_MAGE:
+    case CLASS_WARLOCK:
+        if (proto->SubClass != ITEM_SUBCLASS_WEAPON_STAFF &&
+                proto->SubClass != ITEM_SUBCLASS_WEAPON_WAND &&
+                proto->SubClass != ITEM_SUBCLASS_WEAPON_SWORD)
+            return false;
+        break;
+    case CLASS_WARRIOR:
+        if (proto->SubClass != ITEM_SUBCLASS_WEAPON_MACE2 &&
+                proto->SubClass != ITEM_SUBCLASS_WEAPON_SWORD2 &&
+                proto->SubClass != ITEM_SUBCLASS_WEAPON_MACE &&
+                proto->SubClass != ITEM_SUBCLASS_WEAPON_SWORD &&
+                proto->SubClass != ITEM_SUBCLASS_WEAPON_GUN &&
+                proto->SubClass != ITEM_SUBCLASS_WEAPON_CROSSBOW &&
+                proto->SubClass != ITEM_SUBCLASS_WEAPON_BOW &&
+                proto->SubClass != ITEM_SUBCLASS_WEAPON_THROWN)
+            return false;
+        break;
+    case CLASS_PALADIN:
+        if (proto->SubClass != ITEM_SUBCLASS_WEAPON_MACE2 &&
+                proto->SubClass != ITEM_SUBCLASS_WEAPON_SWORD2 &&
+                proto->SubClass != ITEM_SUBCLASS_WEAPON_MACE &&
+                proto->SubClass != ITEM_SUBCLASS_WEAPON_SWORD)
+            return false;
+        break;
+    case CLASS_SHAMAN:
+        if (proto->SubClass != ITEM_SUBCLASS_WEAPON_MACE &&
+                proto->SubClass != ITEM_SUBCLASS_WEAPON_MACE2 &&
+                proto->SubClass != ITEM_SUBCLASS_WEAPON_STAFF)
+            return false;
+        break;
+    case CLASS_DRUID:
+        if (proto->SubClass != ITEM_SUBCLASS_WEAPON_MACE &&
+                proto->SubClass != ITEM_SUBCLASS_WEAPON_MACE2 &&
+                proto->SubClass != ITEM_SUBCLASS_WEAPON_DAGGER &&
+                proto->SubClass != ITEM_SUBCLASS_WEAPON_STAFF)
+            return false;
+        break;
+    case CLASS_HUNTER:
+        if (proto->SubClass != ITEM_SUBCLASS_WEAPON_AXE2 &&
+                proto->SubClass != ITEM_SUBCLASS_WEAPON_SWORD2 &&
+                proto->SubClass != ITEM_SUBCLASS_WEAPON_GUN &&
+                proto->SubClass != ITEM_SUBCLASS_WEAPON_CROSSBOW &&
+                proto->SubClass != ITEM_SUBCLASS_WEAPON_BOW)
+            return false;
+        break;
+    case CLASS_ROGUE:
+        if (proto->SubClass != ITEM_SUBCLASS_WEAPON_DAGGER &&
+                proto->SubClass != ITEM_SUBCLASS_WEAPON_SWORD &&
+                proto->SubClass != ITEM_SUBCLASS_WEAPON_MACE &&
+                proto->SubClass != ITEM_SUBCLASS_WEAPON_GUN &&
+                proto->SubClass != ITEM_SUBCLASS_WEAPON_CROSSBOW &&
+                proto->SubClass != ITEM_SUBCLASS_WEAPON_BOW &&
+                proto->SubClass != ITEM_SUBCLASS_WEAPON_THROWN)
+            return false;
+        break;
+    }
+
+    return true;
+}
+
+bool PlayerbotFactory::CanEquipItem(ItemTemplate const* proto, uint32 desiredQuality)
+{
+    if (proto->Duration & 0x80000000)
+        return false;
+
+    if (proto->Quality != desiredQuality)
+        return false;
+
+    if (proto->Bonding == BIND_QUEST_ITEM || proto->Bonding == BIND_WHEN_USE)
+        return false;
+
+    if (proto->Class == ITEM_CLASS_CONTAINER)
+        return true;
+
+    uint32 requiredLevel = proto->RequiredLevel;
+    if (!requiredLevel)
+        return false;
+
+    uint32 level = bot->getLevel();
+    uint32 delta = 2;
+    if (level < 15)
+        delta = urand(7, 15);
+    else if (proto->Class == ITEM_CLASS_WEAPON || proto->SubClass == ITEM_SUBCLASS_ARMOR_SHIELD)
+        delta = urand(2, 3);
+    else if (!(level % 10) || (level % 10) == 9)
+        delta = 2;
+    else if (level < 40)
+        delta = urand(5, 10);
+    else if (level < 60)
+        delta = urand(3, 7);
+    else if (level < 70)
+        delta = urand(2, 5);
+    else if (level < 80)
+        delta = urand(2, 4);
+
+    if (desiredQuality > ITEM_QUALITY_NORMAL &&
+            (requiredLevel > level || requiredLevel < level - delta))
+        return false;
+
+    for (uint32 gap = 60; gap <= 80; gap += 10)
+    {
+        if (level > gap && requiredLevel <= gap)
+            return false;
+    }
+
+    return true;
+}
+
+void PlayerbotFactory::InitEquipment(bool incremental)
+{
+    DestroyItemsVisitor visitor(bot);
+    IterateItems(&visitor, ITERATE_ALL_ITEMS);
+
+    map<uint8, vector<uint32> > items;
+    for(uint8 slot = 0; slot < EQUIPMENT_SLOT_END; ++slot)
+    {
+        if (slot == EQUIPMENT_SLOT_TABARD || slot == EQUIPMENT_SLOT_BODY)
+            continue;
+
+        uint32 desiredQuality = itemQuality;
+        if (urand(0, 100) < 100 * sPlayerbotAIConfig.randomGearLoweringChance && desiredQuality > ITEM_QUALITY_NORMAL) {
+            desiredQuality--;
+        }
+
+        do
+        {
+            ItemTemplateContainer const* itemTemplates = sObjectMgr->GetItemTemplateStore();
+            for (ItemTemplateContainer::const_iterator i = itemTemplates->begin(); i != itemTemplates->end(); ++i)
+            {
+                uint32 itemId = i->first;
+                ItemTemplate const* proto = &i->second;
+                if (!proto)
+                    continue;
+
+                if (proto->Class != ITEM_CLASS_WEAPON &&
+                    proto->Class != ITEM_CLASS_ARMOR &&
+                    proto->Class != ITEM_CLASS_CONTAINER &&
+                    proto->Class != ITEM_CLASS_PROJECTILE)
+                    continue;
+
+                if (!CanEquipItem(proto, desiredQuality))
+                    continue;
+
+                if (proto->Class == ITEM_CLASS_ARMOR && (
+                    slot == EQUIPMENT_SLOT_HEAD ||
+                    slot == EQUIPMENT_SLOT_SHOULDERS ||
+                    slot == EQUIPMENT_SLOT_CHEST ||
+                    slot == EQUIPMENT_SLOT_WAIST ||
+                    slot == EQUIPMENT_SLOT_LEGS ||
+                    slot == EQUIPMENT_SLOT_FEET ||
+                    slot == EQUIPMENT_SLOT_WRISTS ||
+                    slot == EQUIPMENT_SLOT_HANDS) && !CanEquipArmor(proto))
+                        continue;
+
+                if (proto->Class == ITEM_CLASS_WEAPON && !CanEquipWeapon(proto))
+                    continue;
+
+                if (slot == EQUIPMENT_SLOT_OFFHAND && bot->getClass() == CLASS_ROGUE && proto->Class != ITEM_CLASS_WEAPON)
+                    continue;
+
+                uint16 dest = 0;
+                if (CanEquipUnseenItem(slot, dest, itemId))
+                    items[slot].push_back(itemId);
+            }
+        } while (items[slot].empty() && desiredQuality-- > ITEM_QUALITY_NORMAL);
+    }
+
+    for(uint8 slot = 0; slot < EQUIPMENT_SLOT_END; ++slot)
+    {
+        if (slot == EQUIPMENT_SLOT_TABARD || slot == EQUIPMENT_SLOT_BODY)
+            continue;
+
+        vector<uint32>& ids = items[slot];
+        if (ids.empty())
+        {
+            sLog->outMessage("playerbot", LOG_LEVEL_DEBUG,  "%s: no items to equip for slot %d", bot->GetName().c_str(), slot);
+            continue;
+        }
+
+        for (int attempts = 0; attempts < 15; attempts++)
+        {
+            uint32 index = urand(0, ids.size() - 1);
+            uint32 newItemId = ids[index];
+            Item* oldItem = bot->GetItemByPos(INVENTORY_SLOT_BAG_0, slot);
+
+            if (incremental && !IsDesiredReplacement(oldItem)) {
+                continue;
+            }
+
+            uint16 dest;
+            if (!CanEquipUnseenItem(slot, dest, newItemId))
+                continue;
+
+            if (oldItem)
+            {
+                bot->RemoveItem(INVENTORY_SLOT_BAG_0, slot, true);
+                oldItem->DestroyForPlayer(bot, false);
+            }
+
+            Item* newItem = bot->EquipNewItem(dest, newItemId, true);
+            if (newItem)
+            {
+                newItem->AddToWorld();
+                newItem->AddToUpdateQueueOf(bot);
+                bot->AutoUnequipOffhandIfNeed();
+                EnchantItem(newItem);
+                break;
+            }
+        }
+    }
+}
+
+bool PlayerbotFactory::IsDesiredReplacement(Item* item)
+{
+    if (!item)
+        return true;
+
+    ItemTemplate const* proto = item->GetTemplate();
+    int delta = 1 + (80 - bot->getLevel()) / 10;
+    return (int)bot->getLevel() - (int)proto->RequiredLevel > delta;
+}
+
+void PlayerbotFactory::InitSecondEquipmentSet()
+{
+    if (bot->getClass() == CLASS_MAGE || bot->getClass() == CLASS_WARLOCK || bot->getClass() == CLASS_PRIEST)
+        return;
+
+    map<uint32, vector<uint32> > items;
+
+    uint32 desiredQuality = itemQuality;
+    while (urand(0, 100) < 100 * sPlayerbotAIConfig.randomGearLoweringChance && desiredQuality > ITEM_QUALITY_NORMAL) {
+        desiredQuality--;
+    }
+
+    do
+    {
+        ItemTemplateContainer const* itemTemplates = sObjectMgr->GetItemTemplateStore();
+        for (ItemTemplateContainer::const_iterator i = itemTemplates->begin(); i != itemTemplates->end(); ++i)
+        {
+            uint32 itemId = i->first;
+            ItemTemplate const* proto = &i->second;
+            if (!proto)
+                continue;
+
+            if (!CanEquipItem(proto, desiredQuality))
+                continue;
+
+            if (proto->Class == ITEM_CLASS_WEAPON)
+            {
+                if (!CanEquipWeapon(proto))
+                    continue;
+
+                Item* existingItem = bot->GetItemByPos(INVENTORY_SLOT_BAG_0, EQUIPMENT_SLOT_MAINHAND);
+                if (existingItem)
+                {
+                    switch (existingItem->GetTemplate()->SubClass)
+                    {
+                    case ITEM_SUBCLASS_WEAPON_AXE:
+                    case ITEM_SUBCLASS_WEAPON_DAGGER:
+                    case ITEM_SUBCLASS_WEAPON_FIST:
+                    case ITEM_SUBCLASS_WEAPON_MACE:
+                    case ITEM_SUBCLASS_WEAPON_SWORD:
+                        if (proto->SubClass == ITEM_SUBCLASS_WEAPON_AXE || proto->SubClass == ITEM_SUBCLASS_WEAPON_DAGGER ||
+                            proto->SubClass == ITEM_SUBCLASS_WEAPON_FIST || proto->SubClass == ITEM_SUBCLASS_WEAPON_MACE ||
+                            proto->SubClass == ITEM_SUBCLASS_WEAPON_SWORD)
+                            continue;
+                        break;
+                    default:
+                        if (proto->SubClass != ITEM_SUBCLASS_WEAPON_AXE && proto->SubClass != ITEM_SUBCLASS_WEAPON_DAGGER &&
+                            proto->SubClass != ITEM_SUBCLASS_WEAPON_FIST && proto->SubClass != ITEM_SUBCLASS_WEAPON_MACE &&
+                            proto->SubClass != ITEM_SUBCLASS_WEAPON_SWORD)
+                            continue;
+                        break;
+                    }
+                }
+            }
+            else if (proto->Class == ITEM_CLASS_ARMOR && proto->SubClass == ITEM_SUBCLASS_ARMOR_SHIELD)
+            {
+                if (!CanEquipArmor(proto))
+                    continue;
+
+                Item* existingItem = bot->GetItemByPos(INVENTORY_SLOT_BAG_0, EQUIPMENT_SLOT_OFFHAND);
+                if (existingItem && existingItem->GetTemplate()->SubClass == ITEM_SUBCLASS_ARMOR_SHIELD)
+                    continue;
+            }
+            else
+                continue;
+
+            items[proto->Class].push_back(itemId);
+        }
+    } while (items[ITEM_CLASS_ARMOR].empty() && items[ITEM_CLASS_WEAPON].empty() && desiredQuality-- > ITEM_QUALITY_NORMAL);
+
+    for (map<uint32, vector<uint32> >::iterator i = items.begin(); i != items.end(); ++i)
+    {
+        vector<uint32>& ids = i->second;
+        if (ids.empty())
+        {
+            sLog->outMessage("playerbot", LOG_LEVEL_DEBUG,  "%s: no items to make second equipment set for slot %d", bot->GetName().c_str(), i->first);
+            continue;
+        }
+
+        for (int attempts = 0; attempts < 15; attempts++)
+        {
+            uint32 index = urand(0, ids.size() - 1);
+            uint32 newItemId = ids[index];
+
+            ItemPosCountVec sDest;
+            Item* newItem = StoreItem(newItemId, 1);
+            if (newItem)
+            {
+                EnchantItem(newItem);
+                newItem->AddToWorld();
+                newItem->AddToUpdateQueueOf(bot);
+                break;
+            }
+        }
+    }
+}
+
+void PlayerbotFactory::InitBags()
+{
+    vector<uint32> ids;
+
+    ItemTemplateContainer const* itemTemplates = sObjectMgr->GetItemTemplateStore();
+    for (ItemTemplateContainer::const_iterator i = itemTemplates->begin(); i != itemTemplates->end(); ++i)
+    {
+        uint32 itemId = i->first;
+        ItemTemplate const* proto = &i->second;
+        if (!proto || proto->Class != ITEM_CLASS_CONTAINER)
+            continue;
+
+        if (!CanEquipItem(proto, ITEM_QUALITY_NORMAL))
+            continue;
+
+        ids.push_back(itemId);
+    }
+
+    if (ids.empty())
+    {
+        sLog->outMessage("playerbot", LOG_LEVEL_ERROR, "%s: no bags found", bot->GetName().c_str());
+        return;
+    }
+
+    for (uint8 slot = INVENTORY_SLOT_BAG_START; slot < INVENTORY_SLOT_BAG_END; ++slot)
+    {
+        for (int attempts = 0; attempts < 15; attempts++)
+        {
+            uint32 index = urand(0, ids.size() - 1);
+            uint32 newItemId = ids[index];
+
+            uint16 dest;
+            if (!CanEquipUnseenItem(slot, dest, newItemId))
+                continue;
+
+            Item* newItem = bot->EquipNewItem(dest, newItemId, true);
+            if (newItem)
+            {
+                newItem->AddToWorld();
+                newItem->AddToUpdateQueueOf(bot);
+                break;
+            }
+        }
+    }
+}
+
+void PlayerbotFactory::EnchantItem(Item* item)
+{
+    if (urand(0, 100) < 100 * sPlayerbotAIConfig.randomGearLoweringChance)
+        return;
+
+    if (bot->getLevel() < urand(40, 50))
+        return;
+
+    ItemTemplate const* proto = item->GetTemplate();
+    int32 itemLevel = proto->ItemLevel;
+
+    vector<uint32> ids;
+    for (int id = 0; id < sSpellStore.GetNumRows(); ++id)
+    {
+        SpellInfo const *entry = sSpellMgr->GetSpellInfo(id);
+        if (!entry)
+            continue;
+
+        int32 requiredLevel = (int32)entry->BaseLevel;
+        if (requiredLevel && (requiredLevel > itemLevel || requiredLevel < itemLevel - 35))
+            continue;
+
+        if (entry->MaxLevel && level > entry->MaxLevel)
+            continue;
+
+        uint32 spellLevel = entry->SpellLevel;
+        if (spellLevel && (spellLevel > level || spellLevel < level - 10))
+            continue;
+
+        for (int j = 0; j < 3; ++j)
+        {
+            if (entry->Effects[j].Effect != SPELL_EFFECT_ENCHANT_ITEM)
+                continue;
+
+            uint32 enchant_id = entry->Effects[j].MiscValue;
+            if (!enchant_id)
+                continue;
+
+            SpellItemEnchantmentEntry const* enchant = sSpellItemEnchantmentStore.LookupEntry(enchant_id);
+            if (!enchant || enchant->slot != PERM_ENCHANTMENT_SLOT)
+                continue;
+
+            if (enchant->requiredLevel && enchant->requiredLevel > level)
+                continue;
+
+            uint8 sp = 0, ap = 0, tank = 0;
+            for (int i = 0; i < 3; ++i)
+            {
+                if (enchant->type[i] != ITEM_ENCHANTMENT_TYPE_STAT)
+                    continue;
+
+                AddItemStats(enchant->spellid[i], sp, ap, tank);
+            }
+
+            if (!CheckItemStats(sp, ap, tank))
+                continue;
+
+            if (enchant->EnchantmentCondition && !bot->EnchantmentFitsRequirements(enchant->EnchantmentCondition, -1))
+                continue;
+
+            if (!item->IsFitToSpellRequirements(entry))
+                continue;
+
+            ids.push_back(enchant_id);
+        }
+    }
+
+    if (ids.empty())
+    {
+        sLog->outMessage("playerbot", LOG_LEVEL_DEBUG,  "%s: no enchantments found for item %d", bot->GetName().c_str(), item->GetTemplate()->ItemId);
+        return;
+    }
+
+    int index = urand(0, ids.size() - 1);
+    uint32 id = ids[index];
+
+    SpellItemEnchantmentEntry const* enchant = sSpellItemEnchantmentStore.LookupEntry(id);
+    if (!enchant)
+        return;
+
+    bot->ApplyEnchantment(item, PERM_ENCHANTMENT_SLOT, false);
+    item->SetEnchantment(PERM_ENCHANTMENT_SLOT, id, 0, 0);
+    bot->ApplyEnchantment(item, PERM_ENCHANTMENT_SLOT, true);
+}
+
+bool PlayerbotFactory::CanEquipUnseenItem(uint8 slot, uint16 &dest, uint32 item)
+{
+    dest = 0;
+    Item *pItem = Item::CreateItem(item, 1, bot);
+    if (pItem)
+    {
+        InventoryResult result = bot->CanEquipItem(slot, dest, pItem, true, false);
+        pItem->RemoveFromUpdateQueueOf(bot);
+        delete pItem;
+        return result == EQUIP_ERR_OK;
+    }
+
+    return false;
+}
+
+void PlayerbotFactory::InitTradeSkills()
+{
+    for (int i = 0; i < sizeof(tradeSkills) / sizeof(uint32); ++i)
+    {
+        bot->SetSkill(tradeSkills[i], 0, 0, 0);
+    }
+
+    vector<uint32> firstSkills;
+    vector<uint32> secondSkills;
+    switch (bot->getClass())
+    {
+    case CLASS_WARRIOR:
+    case CLASS_PALADIN:
+        firstSkills.push_back(SKILL_MINING);
+        secondSkills.push_back(SKILL_BLACKSMITHING);
+        secondSkills.push_back(SKILL_ENGINEERING);
+        break;
+    case CLASS_SHAMAN:
+    case CLASS_DRUID:
+    case CLASS_HUNTER:
+    case CLASS_ROGUE:
+        firstSkills.push_back(SKILL_SKINNING);
+        secondSkills.push_back(SKILL_LEATHERWORKING);
+        break;
+    default:
+        firstSkills.push_back(SKILL_TAILORING);
+        secondSkills.push_back(SKILL_ENCHANTING);
+    }
+
+    SetRandomSkill(SKILL_FIRST_AID);
+    SetRandomSkill(SKILL_FISHING);
+    SetRandomSkill(SKILL_COOKING);
+
+    switch (urand(0, 3))
+    {
+    case 0:
+        SetRandomSkill(SKILL_HERBALISM);
+        SetRandomSkill(SKILL_ALCHEMY);
+        break;
+    case 1:
+        SetRandomSkill(SKILL_HERBALISM);
+        SetRandomSkill(SKILL_INSCRIPTION);
+        break;
+    case 2:
+        SetRandomSkill(SKILL_MINING);
+        SetRandomSkill(SKILL_JEWELCRAFTING);
+        break;
+    case 3:
+        SetRandomSkill(firstSkills[urand(0, firstSkills.size() - 1)]);
+        SetRandomSkill(secondSkills[urand(0, secondSkills.size() - 1)]);
+        break;
+    }
+}
+
+void PlayerbotFactory::UpdateTradeSkills()
+{
+    for (int i = 0; i < sizeof(tradeSkills) / sizeof(uint32); ++i)
+    {
+        if (bot->GetSkillValue(tradeSkills[i]) == 1)
+            bot->SetSkill(tradeSkills[i], 0, 0, 0);
+    }
+}
+
+void PlayerbotFactory::InitSkills()
+{
+    uint32 maxValue = level * 5;
+    SetRandomSkill(SKILL_DEFENSE);
+    SetRandomSkill(SKILL_SWORDS);
+    SetRandomSkill(SKILL_AXES);
+    SetRandomSkill(SKILL_BOWS);
+    SetRandomSkill(SKILL_GUNS);
+    SetRandomSkill(SKILL_MACES);
+    SetRandomSkill(SKILL_2H_SWORDS);
+    SetRandomSkill(SKILL_STAVES);
+    SetRandomSkill(SKILL_2H_MACES);
+    SetRandomSkill(SKILL_2H_AXES);
+    SetRandomSkill(SKILL_DAGGERS);
+    SetRandomSkill(SKILL_THROWN);
+    SetRandomSkill(SKILL_CROSSBOWS);
+    SetRandomSkill(SKILL_WANDS);
+    SetRandomSkill(SKILL_POLEARMS);
+    SetRandomSkill(SKILL_FIST_WEAPONS);
+
+    if (bot->getLevel() >= 70)
+        bot->SetSkill(SKILL_RIDING, 0, 300, 300);
+    else if (bot->getLevel() >= 60)
+        bot->SetSkill(SKILL_RIDING, 0, 225, 225);
+    else if (bot->getLevel() >= 40)
+        bot->SetSkill(SKILL_RIDING, 0, 150, 150);
+    else if (bot->getLevel() >= 20)
+        bot->SetSkill(SKILL_RIDING, 0, 75, 75);
+    else
+        bot->SetSkill(SKILL_RIDING, 0, 0, 0);
+
+    uint32 skillLevel = bot->getLevel() < 40 ? 0 : 1;
+    switch (bot->getClass())
+    {
+    case CLASS_DEATH_KNIGHT:
+    case CLASS_WARRIOR:
+    case CLASS_PALADIN:
+        bot->SetSkill(SKILL_PLATE_MAIL, 0, skillLevel, skillLevel);
+        break;
+    case CLASS_SHAMAN:
+    case CLASS_HUNTER:
+        bot->SetSkill(SKILL_MAIL, 0, skillLevel, skillLevel);
+    }
+}
+
+void PlayerbotFactory::SetRandomSkill(uint16 id)
+{
+    uint32 maxValue = level * 5;
+    uint32 curValue = urand(maxValue - level, maxValue);
+    bot->SetSkill(id, 0, curValue, maxValue);
+
+}
+
+void PlayerbotFactory::InitAvailableSpells()
+{
+    bot->LearnDefaultSkills();
+
+    CreatureTemplateContainer const* creatureTemplateContainer = sObjectMgr->GetCreatureTemplates();
+    for (CreatureTemplateContainer::const_iterator i = creatureTemplateContainer->begin(); i != creatureTemplateContainer->end(); ++i)
+    {
+        CreatureTemplate const& co = i->second;
+        if (co.trainer_type != TRAINER_TYPE_TRADESKILLS && co.trainer_type != TRAINER_TYPE_CLASS)
+            continue;
+
+        if (co.trainer_type == TRAINER_TYPE_CLASS && co.trainer_class != bot->getClass())
+            continue;
+
+		uint32 trainerId = co.Entry;
+
+		TrainerSpellData const* trainer_spells = sObjectMgr->GetNpcTrainerSpells(trainerId);
+        if (!trainer_spells)
+            trainer_spells = sObjectMgr->GetNpcTrainerSpells(trainerId);
+
+        if (!trainer_spells)
+            continue;
+
+        for (TrainerSpellMap::const_iterator itr =  trainer_spells->spellList.begin(); itr !=  trainer_spells->spellList.end(); ++itr)
+        {
+            TrainerSpell const* tSpell = &itr->second;
+
+            if (!tSpell)
+                continue;
+
+            if (!tSpell->learnedSpell[0] && !bot->IsSpellFitByClassAndRace(tSpell->learnedSpell[0]))
+                continue;
+
+            TrainerSpellState state = bot->GetTrainerSpellState(tSpell);
+            if (state != TRAINER_SPELL_GREEN)
+                continue;
+
+            if (tSpell->learnedSpell)
+                bot->LearnSpell(tSpell->learnedSpell[0], false);
+            else
+                ai->CastSpell(tSpell->spell, bot);
+        }
+    }
+}
+
+void PlayerbotFactory::InitSpecialSpells()
+{
+    for (list<uint32>::iterator i = sPlayerbotAIConfig.randomBotSpellIds.begin(); i != sPlayerbotAIConfig.randomBotSpellIds.end(); ++i)
+    {
+        uint32 spellId = *i;
+        bot->LearnSpell(spellId, false);
+    }
+}
+
+void PlayerbotFactory::InitTalents(uint32 specNo)
+{
+    uint32 classMask = bot->getClassMask();
+
+    map<uint32, vector<TalentEntry const*> > spells;
+    for (uint32 i = 0; i < sTalentStore.GetNumRows(); ++i)
+    {
+        TalentEntry const *talentInfo = sTalentStore.LookupEntry(i);
+        if(!talentInfo)
+            continue;
+
+        TalentTabEntry const *talentTabInfo = sTalentTabStore.LookupEntry( talentInfo->TalentTab );
+        if(!talentTabInfo || talentTabInfo->tabpage != specNo)
+            continue;
+
+        if( (classMask & talentTabInfo->ClassMask) == 0 )
+            continue;
+
+        spells[talentInfo->Row].push_back(talentInfo);
+    }
+
+    uint32 freePoints = bot->GetFreeTalentPoints();
+    for (map<uint32, vector<TalentEntry const*> >::iterator i = spells.begin(); i != spells.end(); ++i)
+    {
+        vector<TalentEntry const*> &spells = i->second;
+        if (spells.empty())
+        {
+            sLog->outMessage("playerbot", LOG_LEVEL_ERROR, "%s: No spells for talent row %d", bot->GetName().c_str(), i->first);
+            continue;
+        }
+
+        int attemptCount = 0;
+        while (!spells.empty() && (int)freePoints - (int)bot->GetFreeTalentPoints() < 5 && attemptCount++ < 3 && bot->GetFreeTalentPoints())
+        {
+            int index = urand(0, spells.size() - 1);
+            TalentEntry const *talentInfo = spells[index];
+            int maxRank = 0;
+            for (int rank = 0; rank < min((uint32)MAX_TALENT_RANK, bot->GetFreeTalentPoints()); ++rank)
+            {
+                uint32 spellId = talentInfo->RankID[rank];
+                if (!spellId)
+                    continue;
+
+                maxRank = rank;
+            }
+
+            bot->LearnTalent(talentInfo->TalentID, maxRank);
+			spells.erase(spells.begin() + index);
+        }
+
+        freePoints = bot->GetFreeTalentPoints();
+    }
+
+    for (uint32 i = 0; i < MAX_TALENT_SPECS; ++i)
+    {
+        for (PlayerTalentMap::iterator itr = bot->GetTalentMap(i).begin(); itr != bot->GetTalentMap(i).end(); ++itr)
+        {
+            if (itr->second->state != PLAYERSPELL_REMOVED)
+                itr->second->state = PLAYERSPELL_CHANGED;
+        }
+    }
+}
+
+ObjectGuid PlayerbotFactory::GetRandomBot()
+{
+    vector<ObjectGuid> guids;
+    for (list<uint32>::iterator i = sPlayerbotAIConfig.randomBotAccounts.begin(); i != sPlayerbotAIConfig.randomBotAccounts.end(); i++)
+    {
+        uint32 accountId = *i;
+        if (!sAccountMgr->GetCharactersCount(accountId))
+            continue;
+
+        QueryResult result = CharacterDatabase.PQuery("SELECT guid FROM characters WHERE account = '%u'", accountId);
+        if (!result)
+            continue;
+
+        do
+        {
+            Field* fields = result->Fetch();
+            ObjectGuid guid = ObjectGuid(HighGuid::Player, fields[0].GetUInt32());
+            if (!sObjectMgr->GetPlayerByLowGUID(guid))
+                guids.push_back(guid);
+        } while (result->NextRow());
+    }
+
+    if (guids.empty())
+        return ObjectGuid();
+
+    int index = urand(0, guids.size() - 1);
+    return guids[index];
+}
+
+void AddPrevQuests(uint32 questId, list<uint32>& questIds)
+{
+    Quest const *quest = sObjectMgr->GetQuestTemplate(questId);
+    for (Quest::PrevQuests::const_iterator iter = quest->prevQuests.begin(); iter != quest->prevQuests.end(); ++iter)
+    {
+        uint32 prevId = abs(*iter);
+        AddPrevQuests(prevId, questIds);
+        questIds.push_back(prevId);
+    }
+}
+
+void PlayerbotFactory::InitQuests()
+{
+    ObjectMgr::QuestMap const& questTemplates = sObjectMgr->GetQuestTemplates();
+    list<uint32> questIds;
+    for (ObjectMgr::QuestMap::const_iterator i = questTemplates.begin(); i != questTemplates.end(); ++i)
+    {
+        uint32 questId = i->first;
+        Quest const *quest = i->second;
+
+        if (!quest->GetRequiredClasses() ||
+                quest->GetMinLevel() > bot->getLevel() ||
+                quest->IsDailyOrWeekly() || quest->IsRepeatable() || quest->IsMonthly())
+            continue;
+
+        AddPrevQuests(questId, questIds);
+        questIds.push_back(questId);
+    }
+
+    for (list<uint32>::iterator i = questIds.begin(); i != questIds.end(); ++i)
+    {
+        uint32 questId = *i;
+        Quest const *quest = sObjectMgr->GetQuestTemplate(questId);
+
+        if (!bot->SatisfyQuestClass(quest, false) ||
+                !bot->SatisfyQuestRace(quest, false))
+            continue;
+
+        bot->RemoveActiveQuest(questId, false);
+        bot->RemoveRewardedQuest(questId, false);
+
+        bot->SetQuestStatus(questId, QUEST_STATUS_COMPLETE);
+        bot->RewardQuest(quest, 0, bot, false);
+        ClearInventory();
+    }
+}
+
+void PlayerbotFactory::ClearInventory()
+{
+    DestroyItemsVisitor visitor(bot);
+    IterateItems(&visitor);
+}
+
+void PlayerbotFactory::InitAmmo()
+{
+    if (bot->getClass() != CLASS_HUNTER && bot->getClass() != CLASS_ROGUE && bot->getClass() != CLASS_WARRIOR)
+        return;
+
+    Item* const pItem = bot->GetItemByPos(INVENTORY_SLOT_BAG_0, EQUIPMENT_SLOT_RANGED);
+    if (!pItem)
+        return;
+
+    uint32 subClass = 0;
+    switch (pItem->GetTemplate()->SubClass)
+    {
+    case ITEM_SUBCLASS_WEAPON_GUN:
+        subClass = ITEM_SUBCLASS_BULLET;
+        break;
+    case ITEM_SUBCLASS_WEAPON_BOW:
+    case ITEM_SUBCLASS_WEAPON_CROSSBOW:
+        subClass = ITEM_SUBCLASS_ARROW;
+        break;
+    }
+
+    if (!subClass)
+        return;
+
+    QueryResult results = WorldDatabase.PQuery("select max(entry), max(RequiredLevel) from item_template where class = '%u' and subclass = '%u' and RequiredLevel <= '%u'",
+            ITEM_CLASS_PROJECTILE, subClass, bot->getLevel());
+
+    Field* fields = results->Fetch();
+    if (fields)
+    {
+        uint32 entry = fields[0].GetUInt32();
+        for (int i = 0; i < 5; i++)
+        {
+            bot->StoreNewItemInBestSlots(entry, 1000);
+        }
+        bot->SetAmmo(entry);
+    }
+}
+
+void PlayerbotFactory::InitMounts()
+{
+    map<uint32, map<int32, vector<uint32> > > allSpells;
+
+    for (uint32 spellId = 0; spellId < sSpellStore.GetNumRows(); ++spellId)
+    {
+        SpellInfo const *spellInfo = sSpellMgr->GetSpellInfo(spellId);
+        if (!spellInfo || spellInfo->Effects[0].ApplyAuraName != SPELL_AURA_MOUNTED)
+            continue;
+
+        if (spellInfo->GetDuration() != -1)
+            continue;
+
+        int32 effect = max(spellInfo->Effects[1].BasePoints, spellInfo->Effects[2].BasePoints);
+        if (effect < 50)
+            continue;
+
+        uint32 index = (spellInfo->Effects[1].ApplyAuraName == SPELL_AURA_MOD_MOUNTED_FLIGHT_SPEED_ALWAYS ||
+                spellInfo->Effects[2].ApplyAuraName == SPELL_AURA_MOD_MOUNTED_FLIGHT_SPEED_ALWAYS) ? 1 : 0;
+        allSpells[index][effect].push_back(spellId);
+    }
+
+    for (uint32 type = 0; type < 2; ++type)
+    {
+        map<int32, vector<uint32> >& spells = allSpells[type];
+        for (map<int32, vector<uint32> >::iterator i = spells.begin(); i != spells.end(); ++i)
+        {
+            int32 effect = i->first;
+            vector<uint32>& ids = i->second;
+            uint32 index = urand(0, ids.size() - 1);
+            if (index >= ids.size())
+                continue;
+
+            bot->LearnSpell(ids[index], false);
+        }
+    }
+}
+
+void PlayerbotFactory::InitPotions()
+{
+    map<uint32, vector<uint32> > items;
+    ItemTemplateContainer const* itemTemplateContainer = sObjectMgr->GetItemTemplateStore();
+    for (ItemTemplateContainer::const_iterator i = itemTemplateContainer->begin(); i != itemTemplateContainer->end(); ++i)
+    {
+        ItemTemplate const& itemTemplate = i->second;
+        uint32 itemId = i->first;
+        ItemTemplate const* proto = sObjectMgr->GetItemTemplate(itemId);
+        if (!proto)
+            continue;
+
+        if (proto->Class != ITEM_CLASS_CONSUMABLE ||
+            proto->SubClass != ITEM_SUBCLASS_POTION ||
+            proto->Spells[0].SpellCategory != 4 ||
+            proto->Bonding != NO_BIND)
+            continue;
+
+        if (proto->RequiredLevel > bot->getLevel() || proto->RequiredLevel < bot->getLevel() - 10)
+            continue;
+
+        if (proto->RequiredSkill && !bot->HasSkill(proto->RequiredSkill))
+            continue;
+
+        if (proto->Area || proto->Map || proto->RequiredCityRank || proto->RequiredHonorRank)
+            continue;
+
+        for (int j = 0; j < MAX_ITEM_PROTO_SPELLS; j++)
+        {
+            const SpellInfo* const spellInfo = sSpellMgr->GetSpellInfo(proto->Spells[j].SpellId);
+            if (!spellInfo)
+                continue;
+
+            for (int i = 0 ; i < 3; i++)
+            {
+                if (spellInfo->Effects[i].Effect == SPELL_EFFECT_HEAL || spellInfo->Effects[i].Effect == SPELL_EFFECT_ENERGIZE)
+                {
+                    items[spellInfo->Effects[i].Effect].push_back(itemId);
+                    break;
+                }
+            }
+        }
+    }
+
+    uint32 effects[] = { SPELL_EFFECT_HEAL, SPELL_EFFECT_ENERGIZE };
+    for (int i = 0; i < sizeof(effects) / sizeof(uint32); ++i)
+    {
+        uint32 effect = effects[i];
+        vector<uint32>& ids = items[effect];
+        uint32 index = urand(0, ids.size() - 1);
+        if (index >= ids.size())
+            continue;
+
+        uint32 itemId = ids[index];
+        ItemTemplate const* proto = sObjectMgr->GetItemTemplate(itemId);
+        bot->StoreNewItemInBestSlots(itemId, urand(1, proto->GetMaxStackSize()));
+   }
+}
+
+void PlayerbotFactory::InitFood()
+{
+    map<uint32, vector<uint32> > items;
+    ItemTemplateContainer const* itemTemplateContainer = sObjectMgr->GetItemTemplateStore();
+    for (ItemTemplateContainer::const_iterator i = itemTemplateContainer->begin(); i != itemTemplateContainer->end(); ++i)
+    {
+        ItemTemplate const& itemTemplate = i->second;
+        uint32 itemId = i->first;
+        ItemTemplate const* proto = sObjectMgr->GetItemTemplate(itemId);
+        if (!proto)
+            continue;
+
+        if (proto->Class != ITEM_CLASS_CONSUMABLE ||
+            proto->SubClass != ITEM_SUBCLASS_FOOD ||
+            (proto->Spells[0].SpellCategory != 11 && proto->Spells[0].SpellCategory != 59) ||
+            proto->Bonding != NO_BIND)
+            continue;
+
+        if (proto->RequiredLevel > bot->getLevel() || proto->RequiredLevel < bot->getLevel() - 10)
+            continue;
+
+        if (proto->RequiredSkill && !bot->HasSkill(proto->RequiredSkill))
+            continue;
+
+        if (proto->Area || proto->Map || proto->RequiredCityRank || proto->RequiredHonorRank)
+            continue;
+
+        items[proto->Spells[0].SpellCategory].push_back(itemId);
+    }
+
+    uint32 categories[] = { 11, 59 };
+    for (int i = 0; i < sizeof(categories) / sizeof(uint32); ++i)
+    {
+        uint32 category = categories[i];
+        vector<uint32>& ids = items[category];
+        uint32 index = urand(0, ids.size() - 1);
+        if (index >= ids.size())
+            continue;
+
+        uint32 itemId = ids[index];
+        ItemTemplate const* proto = sObjectMgr->GetItemTemplate(itemId);
+        bot->StoreNewItemInBestSlots(itemId, urand(1, proto->GetMaxStackSize()));
+   }
+}
+
+
+void PlayerbotFactory::CancelAuras()
+{
+    bot->RemoveAllAuras();
+}
+
+void PlayerbotFactory::InitInventory()
+{
+    InitInventoryTrade();
+    InitInventoryEquip();
+    InitInventorySkill();
+}
+
+void PlayerbotFactory::InitInventorySkill()
+{
+    if (bot->HasSkill(SKILL_MINING)) {
+        StoreItem(2901, 1); // Mining Pick
+    }
+    if (bot->HasSkill(SKILL_JEWELCRAFTING)) {
+        StoreItem(20815, 1); // Jeweler's Kit
+        StoreItem(20824, 1); // Simple Grinder
+    }
+    if (bot->HasSkill(SKILL_BLACKSMITHING) || bot->HasSkill(SKILL_ENGINEERING)) {
+        StoreItem(5956, 1); // Blacksmith Hammer
+    }
+    if (bot->HasSkill(SKILL_ENGINEERING)) {
+        StoreItem(6219, 1); // Arclight Spanner
+    }
+    if (bot->HasSkill(SKILL_ENCHANTING)) {
+        StoreItem(44452, 1); // Runed Titanium Rod
+    }
+    if (bot->HasSkill(SKILL_INSCRIPTION)) {
+        StoreItem(39505, 1); // Virtuoso Inking Set
+    }
+    if (bot->HasSkill(SKILL_SKINNING)) {
+        StoreItem(7005, 1); // Skinning Knife
+    }
+}
+
+Item* PlayerbotFactory::StoreItem(uint32 itemId, uint32 count)
+{
+    ItemTemplate const* proto = sObjectMgr->GetItemTemplate(itemId);
+    ItemPosCountVec sDest;
+    InventoryResult msg = bot->CanStoreNewItem(INVENTORY_SLOT_BAG_0, NULL_SLOT, sDest, itemId, count);
+    if (msg != EQUIP_ERR_OK)
+        return NULL;
+
+    return bot->StoreNewItem(sDest, itemId, true, Item::GenerateItemRandomPropertyId(itemId));
+}
+
+void PlayerbotFactory::InitInventoryTrade()
+{
+    vector<uint32> ids;
+    ItemTemplateContainer const* itemTemplateContainer = sObjectMgr->GetItemTemplateStore();
+    for (ItemTemplateContainer::const_iterator i = itemTemplateContainer->begin(); i != itemTemplateContainer->end(); ++i)
+    {
+        ItemTemplate const& itemTemplate = i->second;
+        uint32 itemId = i->first;
+        ItemTemplate const* proto = sObjectMgr->GetItemTemplate(itemId);
+        if (!proto)
+            continue;
+
+        if (proto->Class != ITEM_CLASS_TRADE_GOODS || proto->Bonding != NO_BIND)
+            continue;
+
+        if (proto->ItemLevel < bot->getLevel())
+            continue;
+
+        if (proto->RequiredLevel > bot->getLevel() || proto->RequiredLevel < bot->getLevel() - 10)
+            continue;
+
+        if (proto->RequiredSkill && !bot->HasSkill(proto->RequiredSkill))
+            continue;
+
+        ids.push_back(itemId);
+    }
+
+    if (ids.empty())
+    {
+        sLog->outMessage("playerbot", LOG_LEVEL_ERROR, "No trade items available for bot %s (%d level)", bot->GetName().c_str(), bot->getLevel());
+        return;
+    }
+
+    uint32 index = urand(0, ids.size() - 1);
+    if (index >= ids.size())
+        return;
+
+    uint32 itemId = ids[index];
+    ItemTemplate const* proto = sObjectMgr->GetItemTemplate(itemId);
+    if (!proto)
+        return;
+
+    uint32 count = 1, stacks = 1;
+    switch (proto->Quality)
+    {
+    case ITEM_QUALITY_NORMAL:
+        count = proto->GetMaxStackSize();
+        stacks = urand(1, 7) / auctionbot.GetRarityPriceMultiplier(proto);
+        break;
+    case ITEM_QUALITY_UNCOMMON:
+        stacks = 1;
+        count = urand(1, proto->GetMaxStackSize());
+        break;
+    case ITEM_QUALITY_RARE:
+        stacks = 1;
+        count = urand(1, min(uint32(3), proto->GetMaxStackSize()));
+        break;
+    }
+
+    for (uint32 i = 0; i < stacks; i++)
+        StoreItem(itemId, count);
+}
+
+void PlayerbotFactory::InitInventoryEquip()
+{
+    vector<uint32> ids;
+
+    uint32 desiredQuality = itemQuality;
+    if (urand(0, 100) < 100 * sPlayerbotAIConfig.randomGearLoweringChance && desiredQuality > ITEM_QUALITY_NORMAL) {
+        desiredQuality--;
+    }
+
+    ItemTemplateContainer const* itemTemplateContainer = sObjectMgr->GetItemTemplateStore();
+    for (ItemTemplateContainer::const_iterator i = itemTemplateContainer->begin(); i != itemTemplateContainer->end(); ++i)
+    {
+        ItemTemplate const& itemTemplate = i->second;
+        uint32 itemId = i->first;
+        ItemTemplate const* proto = sObjectMgr->GetItemTemplate(itemId);
+        if (!proto)
+            continue;
+
+        if (proto->Class != ITEM_CLASS_ARMOR && proto->Class != ITEM_CLASS_WEAPON || (proto->Bonding == BIND_WHEN_PICKED_UP ||
+                proto->Bonding == BIND_WHEN_USE))
+            continue;
+
+        if (proto->Class == ITEM_CLASS_ARMOR && !CanEquipArmor(proto))
+            continue;
+
+        if (proto->Class == ITEM_CLASS_WEAPON && !CanEquipWeapon(proto))
+            continue;
+
+        if (!CanEquipItem(proto, desiredQuality))
+            continue;
+
+        ids.push_back(itemId);
+    }
+
+    int maxCount = urand(0, 3);
+    int count = 0;
+    for (int attempts = 0; attempts < 15; attempts++)
+    {
+        uint32 index = urand(0, ids.size() - 1);
+        if (index >= ids.size())
+            continue;
+
+        uint32 itemId = ids[index];
+        if (StoreItem(itemId, 1) && count++ >= maxCount)
+            break;
+   }
+}
+
+void PlayerbotFactory::InitGlyphs()
+{
+    bot->InitGlyphsForLevel();
+
+    for (uint32 slotIndex = 0; slotIndex < MAX_GLYPH_SLOT_INDEX; ++slotIndex)
+    {
+        bot->SetGlyph(slotIndex, 0);
+    }
+
+    uint32 level = bot->getLevel();
+    uint32 maxSlot = 0;
+    if (level >= 15)
+        maxSlot = 2;
+    if (level >= 30)
+        maxSlot = 3;
+    if (level >= 50)
+        maxSlot = 4;
+    if (level >= 70)
+        maxSlot = 5;
+    if (level >= 80)
+        maxSlot = 6;
+
+    if (!maxSlot)
+        return;
+
+    list<uint32> glyphs;
+    ItemTemplateContainer const* itemTemplates = sObjectMgr->GetItemTemplateStore();
+    for (ItemTemplateContainer::const_iterator i = itemTemplates->begin(); i != itemTemplates->end(); ++i)
+    {
+        uint32 itemId = i->first;
+        ItemTemplate const* proto = &i->second;
+        if (!proto)
+            continue;
+
+        if (proto->Class != ITEM_CLASS_GLYPH)
+            continue;
+
+        if ((proto->AllowableClass & bot->getClassMask()) == 0 || (proto->AllowableRace & bot->getRaceMask()) == 0)
+            continue;
+
+        for (uint32 spell = 0; spell < MAX_ITEM_PROTO_SPELLS; spell++)
+        {
+            uint32 spellId = proto->Spells[spell].SpellId;
+            SpellInfo const *entry = sSpellMgr->GetSpellInfo(spellId);
+            if (!entry)
+                continue;
+
+            for (uint32 effect = 0; effect <= EFFECT_2; ++effect)
+            {
+                if (entry->Effects[effect].Effect != SPELL_EFFECT_APPLY_GLYPH)
+                    continue;
+
+                uint32 glyph = entry->Effects[effect].MiscValue;
+                glyphs.push_back(glyph);
+            }
+        }
+    }
+
+    if (glyphs.empty())
+    {
+        sLog->outMessage("playerbot", LOG_LEVEL_ERROR, "No glyphs found for bot %s", bot->GetName().c_str());
+        return;
+    }
+
+    set<uint32> chosen;
+    for (uint32 slotIndex = 0; slotIndex < maxSlot; ++slotIndex)
+    {
+        uint32 slot = bot->GetGlyphSlot(slotIndex);
+        GlyphSlotEntry const *gs = sGlyphSlotStore.LookupEntry(slot);
+        if (!gs)
+            continue;
+
+        vector<uint32> ids;
+        for (list<uint32>::iterator i = glyphs.begin(); i != glyphs.end(); ++i)
+        {
+            uint32 id = *i;
+            GlyphPropertiesEntry const *gp = sGlyphPropertiesStore.LookupEntry(id);
+            if (!gp || gp->TypeFlags != gs->TypeFlags)
+                continue;
+
+            ids.push_back(id);
+        }
+
+        int maxCount = urand(0, 3);
+        int count = 0;
+        bool found = false;
+        for (int attempts = 0; attempts < 15; ++attempts)
+        {
+            uint32 index = urand(0, ids.size() - 1);
+            if (index >= ids.size())
+                continue;
+
+            uint32 id = ids[index];
+            if (chosen.find(id) != chosen.end())
+                continue;
+
+            chosen.insert(id);
+
+            bot->SetGlyph(slotIndex, id);
+            found = true;
+            break;
+        }
+        if (!found)
+            sLog->outMessage("playerbot", LOG_LEVEL_ERROR, "No glyphs found for bot %s index %d slot %d", bot->GetName().c_str(), slotIndex, slot);
+    }
+}
+
+void PlayerbotFactory::InitGuild()
+{
+    if (bot->GetGuildId())
+        return;
+
+    if (sPlayerbotAIConfig.randomBotGuilds.empty())
+        RandomPlayerbotFactory::CreateRandomGuilds();
+
+    vector<uint32> guilds;
+    for(list<uint32>::iterator i = sPlayerbotAIConfig.randomBotGuilds.begin(); i != sPlayerbotAIConfig.randomBotGuilds.end(); ++i)
+        guilds.push_back(*i);
+
+    if (guilds.empty())
+    {
+        sLog->outMessage("playerbot", LOG_LEVEL_ERROR, "No random guilds available");
+        return;
+    }
+
+    int index = urand(0, guilds.size() - 1);
+    uint32 guildId = guilds[index];
+    Guild* guild = sGuildMgr->GetGuildById(guildId);
+    if (!guild)
+    {
+        sLog->outMessage("playerbot", LOG_LEVEL_ERROR, "Invalid guild %u", guildId);
+        return;
+    }
+
+    if (guild->GetMemberCount() < 10)
+        guild->AddMember(bot->GetGUID(), urand(GR_OFFICER, GR_INITIATE));
+}
diff --git a/src/plugins/playerbot/PlayerbotFactory.h b/src/plugins/playerbot/PlayerbotFactory.h
new file mode 100644
index 0000000..e9535f0
--- /dev/null
+++ b/src/plugins/playerbot/PlayerbotFactory.h
@@ -0,0 +1,68 @@
+#pragma once
+
+#include "strategy/actions/InventoryAction.h"
+
+class Player;
+class PlayerbotMgr;
+class ChatHandler;
+
+using namespace std;
+using ai::InventoryAction;
+
+class PlayerbotFactory : public InventoryAction
+{
+public:
+    PlayerbotFactory(Player* bot, uint32 level, uint32 itemQuality = 0) :
+        bot(bot), level(level), itemQuality(itemQuality), InventoryAction(bot->GetPlayerbotAI(), "factory") {}
+
+    static ObjectGuid GetRandomBot();
+    void CleanRandomize();
+    void Randomize();
+    void Refresh();
+
+private:
+    void Randomize(bool incremental);
+    void Prepare();
+    void InitSecondEquipmentSet();
+    void InitEquipment(bool incremental);
+    bool CanEquipItem(ItemTemplate const* proto, uint32 desiredQuality);
+    bool CanEquipUnseenItem(uint8 slot, uint16 &dest, uint32 item);
+    void InitSkills();
+    void InitTradeSkills();
+    void UpdateTradeSkills();
+    void SetRandomSkill(uint16 id);
+    void InitSpells();
+    void ClearSpells();
+    void InitAvailableSpells();
+    void InitSpecialSpells();
+    void InitTalents();
+    void InitTalents(uint32 specNo);
+    void InitQuests();
+    void InitPet();
+    void ClearInventory();
+    void InitAmmo();
+    void InitMounts();
+    void InitPotions();
+    void InitFood();
+    bool CanEquipArmor(ItemTemplate const* proto);
+    bool CanEquipWeapon(ItemTemplate const* proto);
+    void EnchantItem(Item* item);
+    void AddItemStats(uint32 mod, uint8 &sp, uint8 &ap, uint8 &tank);
+    bool CheckItemStats(uint8 sp, uint8 ap, uint8 tank);
+    void CancelAuras();
+    bool IsDesiredReplacement(Item* item);
+    void InitBags();
+    void InitInventory();
+    void InitInventoryTrade();
+    void InitInventoryEquip();
+    void InitInventorySkill();
+    Item* StoreItem(uint32 itemId, uint32 count);
+    void InitGlyphs();
+    void InitGuild();
+
+private:
+    Player* bot;
+    uint32 level;
+    uint32 itemQuality;
+    static uint32 tradeSkills[];
+};
diff --git a/src/plugins/playerbot/PlayerbotMgr.cpp b/src/plugins/playerbot/PlayerbotMgr.cpp
new file mode 100644
index 0000000..945764f
--- /dev/null
+++ b/src/plugins/playerbot/PlayerbotMgr.cpp
@@ -0,0 +1,472 @@
+#include "../pchdef.h"
+#include "playerbot.h"
+#include "PlayerbotAIConfig.h"
+#include "PlayerbotFactory.h"
+#include "RandomPlayerbotMgr.h"
+
+
+class LoginQueryHolder;
+class CharacterHandler;
+
+PlayerbotHolder::PlayerbotHolder() : PlayerbotAIBase()
+{
+    for (uint32 spellId = 0; spellId < sSpellStore.GetNumRows(); spellId++)
+        sSpellStore.LookupEntry(spellId);
+}
+
+PlayerbotHolder::~PlayerbotHolder()
+{
+    LogoutAllBots();
+}
+
+
+void PlayerbotHolder::UpdateAIInternal(uint32 elapsed)
+{
+}
+
+void PlayerbotHolder::UpdateSessions(uint32 elapsed)
+{
+    for (PlayerBotMap::const_iterator itr = GetPlayerBotsBegin(); itr != GetPlayerBotsEnd(); ++itr)
+    {
+        Player* const bot = itr->second;
+        if (bot->IsBeingTeleported())
+        {
+            bot->GetPlayerbotAI()->HandleTeleportAck();
+        }
+        else if (bot->IsInWorld())
+        {
+            bot->GetSession()->HandleBotPackets();
+        }
+    }
+}
+
+void PlayerbotHolder::LogoutAllBots()
+{
+    while (true)
+    {
+        PlayerBotMap::const_iterator itr = GetPlayerBotsBegin();
+        if (itr == GetPlayerBotsEnd()) break;
+        Player* bot= itr->second;
+        LogoutPlayerBot(bot->GetGUID());
+    }
+}
+
+void PlayerbotHolder::LogoutPlayerBot(uint64 guid)
+{
+    Player* bot = GetPlayerBot(guid);
+    if (bot)
+    {
+        bot->GetPlayerbotAI()->TellMaster("Goodbye!");
+        //bot->SaveToDB();
+
+        WorldSession * botWorldSessionPtr = bot->GetSession();
+        playerBots.erase(guid);    // deletes bot player ptr inside this WorldSession PlayerBotMap
+        botWorldSessionPtr->LogoutPlayer(true); // this will delete the bot Player object and PlayerbotAI object
+        delete botWorldSessionPtr;  // finally delete the bot's WorldSession
+    }
+}
+
+Player* PlayerbotHolder::GetPlayerBot(uint64 playerGuid) const
+{
+    PlayerBotMap::const_iterator it = playerBots.find(playerGuid);
+    return (it == playerBots.end()) ? 0 : it->second;
+}
+
+void PlayerbotHolder::OnBotLogin(Player * const bot)
+{
+	PlayerbotAI* ai = new PlayerbotAI(bot);
+	bot->SetPlayerbotAI(ai);
+	OnBotLoginInternal(bot);
+
+    playerBots[bot->GetGUID()] = bot;
+
+    Player* master = ai->GetMaster();
+    if (master)
+    {
+        ObjectGuid masterGuid = master->GetGUID();
+        if (master->GetGroup() &&
+            ! master->GetGroup()->IsLeader(masterGuid))
+            master->GetGroup()->ChangeLeader(masterGuid);
+    }
+
+    Group *group = bot->GetGroup();
+    if (group)
+    {
+        bool groupValid = false;
+        Group::MemberSlotList const& slots = group->GetMemberSlots();
+        for (Group::MemberSlotList::const_iterator i = slots.begin(); i != slots.end(); ++i)
+        {
+            ObjectGuid member = i->guid;
+            uint32 account = sObjectMgr->GetPlayerAccountIdByGUID(member);
+            if (!sPlayerbotAIConfig.IsInRandomAccountList(account))
+            {
+                groupValid = true;
+                break;
+            }
+        }
+
+        if (!groupValid)
+        {
+            WorldPacket p;
+            string member = bot->GetName();
+            p << uint32(PARTY_OP_LEAVE) << member << uint32(0);
+            bot->GetSession()->HandleGroupDisbandOpcode(p);
+        }
+    }
+
+    ai->ResetStrategies();
+    ai->TellMaster("Hello!");
+}
+
+string PlayerbotHolder::ProcessBotCommand(string cmd, ObjectGuid guid, bool admin, uint32 masterAccountId, uint32 masterGuildId)
+{
+    if (!sPlayerbotAIConfig.enabled || guid.IsEmpty())
+        return "bot system is disabled";
+
+    uint32 botAccount = sObjectMgr->GetPlayerAccountIdByGUID(guid);
+    bool isRandomBot = sRandomPlayerbotMgr.IsRandomBot(guid);
+    bool isRandomAccount = sPlayerbotAIConfig.IsInRandomAccountList(botAccount);
+    bool isMasterAccount = (masterAccountId == botAccount);
+
+    if (isRandomAccount && !isRandomBot && !admin)
+    {
+        Player* bot = sObjectMgr->GetPlayerByLowGUID(guid);
+        if (bot->GetGuildId() != masterGuildId)
+            return "not in your guild";
+    }
+
+    if (!isRandomAccount && !isMasterAccount && !admin)
+        return "not in your account";
+
+    if (cmd == "add" || cmd == "login")
+    {
+        if (sObjectMgr->GetPlayerByLowGUID(guid))
+            return "player already logged in";
+
+        AddPlayerBot(guid.GetRawValue(), masterAccountId);
+        return "ok";
+    }
+    else if (cmd == "remove" || cmd == "logout" || cmd == "rm")
+    {
+        if (!sObjectMgr->GetPlayerByLowGUID(guid))
+            return "player is offline";
+
+        if (!GetPlayerBot(guid.GetRawValue()))
+            return "not your bot";
+
+        LogoutPlayerBot(guid.GetRawValue());
+        return "ok";
+    }
+
+    if (admin)
+    {
+        Player* bot = GetPlayerBot(guid.GetRawValue());
+        if (!bot)
+            return "bot not found";
+
+        Player* master = bot->GetPlayerbotAI()->GetMaster();
+        if (master)
+        {
+            if (cmd == "init=white" || cmd == "init=common")
+            {
+                PlayerbotFactory factory(bot, master->getLevel(), ITEM_QUALITY_NORMAL);
+                factory.CleanRandomize();
+                return "ok";
+            }
+            else if (cmd == "init=green" || cmd == "init=uncommon")
+            {
+                PlayerbotFactory factory(bot, master->getLevel(), ITEM_QUALITY_UNCOMMON);
+                factory.CleanRandomize();
+                return "ok";
+            }
+            else if (cmd == "init=blue" || cmd == "init=rare")
+            {
+                PlayerbotFactory factory(bot, master->getLevel(), ITEM_QUALITY_RARE);
+                factory.CleanRandomize();
+                return "ok";
+            }
+            else if (cmd == "init=epic" || cmd == "init=purple")
+            {
+                PlayerbotFactory factory(bot, master->getLevel(), ITEM_QUALITY_EPIC);
+                factory.CleanRandomize();
+                return "ok";
+            }
+        }
+
+        if (cmd == "update")
+        {
+            PlayerbotFactory factory(bot, bot->getLevel());
+            factory.Refresh();
+            return "ok";
+        }
+        else if (cmd == "random")
+        {
+            sRandomPlayerbotMgr.Randomize(bot);
+            return "ok";
+        }
+    }
+
+    return "unknown command";
+}
+
+bool PlayerbotMgr::HandlePlayerbotMgrCommand(ChatHandler* handler, char const* args)
+{
+	if (!sPlayerbotAIConfig.enabled)
+	{
+		handler->PSendSysMessage("|cffff0000Playerbot system is currently disabled!");
+		handler->SetSentErrorMessage(true);
+        return false;
+	}
+
+    WorldSession *m_session = handler->GetSession();
+
+    if (!m_session)
+    {
+        handler->PSendSysMessage("You may only add bots from an active session");
+        handler->SetSentErrorMessage(true);
+        return false;
+    }
+
+    Player* player = m_session->GetPlayer();
+    PlayerbotMgr* mgr = player->GetPlayerbotMgr();
+    if (!mgr)
+    {
+        handler->PSendSysMessage("you cannot control bots yet");
+        handler->SetSentErrorMessage(true);
+        return false;
+    }
+
+    list<string> messages = mgr->HandlePlayerbotCommand(args, player);
+    if (messages.empty())
+        return true;
+
+    for (list<string>::iterator i = messages.begin(); i != messages.end(); ++i)
+    {
+        handler->PSendSysMessage(i->c_str());
+    }
+
+    handler->SetSentErrorMessage(true);
+    return false;
+}
+
+list<string> PlayerbotHolder::HandlePlayerbotCommand(char const* args, Player* master)
+{
+    list<string> messages;
+
+    if (!*args)
+    {
+        messages.push_back("usage: add/init/remove PLAYERNAME");
+        return messages;
+    }
+
+    char *cmd = strtok ((char*)args, " ");
+    char *charname = strtok (NULL, " ");
+    if (!cmd || !charname)
+    {
+        messages.push_back("usage: add/init/remove PLAYERNAME");
+        return messages;
+    }
+
+    std::string cmdStr = cmd;
+    std::string charnameStr = charname;
+
+    set<string> bots;
+    if (charnameStr == "*" && master)
+    {
+        Group* group = master->GetGroup();
+        if (!group)
+        {
+            messages.push_back("you must be in group");
+            return messages;
+        }
+
+        Group::MemberSlotList slots = group->GetMemberSlots();
+        for (Group::member_citerator i = slots.begin(); i != slots.end(); i++)
+        {
+			ObjectGuid member = i->guid;
+
+			if (member == master->GetGUID())
+				continue;
+
+			string bot;
+			if (sObjectMgr->GetPlayerNameByGUID(member, bot))
+			    bots.insert(bot);
+        }
+    }
+
+    if (charnameStr == "!" && master && master->GetSession()->GetSecurity() > SEC_GAMEMASTER)
+    {
+        for (PlayerBotMap::const_iterator i = GetPlayerBotsBegin(); i != GetPlayerBotsEnd(); ++i)
+        {
+            Player* bot = i->second;
+            if (bot && bot->IsInWorld())
+                bots.insert(bot->GetName());
+        }
+    }
+
+    vector<string> chars = split(charnameStr, ',');
+    for (vector<string>::iterator i = chars.begin(); i != chars.end(); i++)
+    {
+        string s = *i;
+
+        uint32 accountId = GetAccountId(s);
+        if (!accountId)
+        {
+            bots.insert(s);
+            continue;
+        }
+
+        QueryResult results = CharacterDatabase.PQuery(
+            "SELECT name FROM characters WHERE account = '%u'",
+            accountId);
+        if (results)
+        {
+            do
+            {
+                Field* fields = results->Fetch();
+                string charName = fields[0].GetString();
+                bots.insert(charName);
+            } while (results->NextRow());
+        }
+	}
+
+    for (set<string>::iterator i = bots.begin(); i != bots.end(); ++i)
+    {
+        string bot = *i;
+        ostringstream out;
+        out << cmdStr << ": " << bot << " - ";
+
+        ObjectGuid member = sObjectMgr->GetPlayerGUIDByName(bot);
+        if (!member)
+        {
+            out << "character not found";
+        }
+        else if (master && member != master->GetGUID())
+        {
+            out << ProcessBotCommand(cmdStr, member,
+                    master->GetSession()->GetSecurity() >= SEC_GAMEMASTER,
+                    master->GetSession()->GetAccountId(),
+                    master->GetGuildId());
+        }
+        else if (!master)
+        {
+            out << ProcessBotCommand(cmdStr, member, true, -1, -1);
+        }
+
+        messages.push_back(out.str());
+    }
+
+    return messages;
+}
+
+uint32 PlayerbotHolder::GetAccountId(string name)
+{
+    uint32 accountId = 0;
+
+    QueryResult results = LoginDatabase.PQuery("SELECT id FROM account WHERE username = '%s'", name.c_str());
+    if(results)
+    {
+        Field* fields = results->Fetch();
+        accountId = fields[0].GetUInt32();
+    }
+
+    return accountId;
+}
+
+
+
+PlayerbotMgr::PlayerbotMgr(Player* const master) : PlayerbotHolder(),  master(master)
+{
+}
+
+PlayerbotMgr::~PlayerbotMgr()
+{
+}
+
+void PlayerbotMgr::UpdateAIInternal(uint32 elapsed)
+{
+    SetNextCheckDelay(sPlayerbotAIConfig.reactDelay);
+}
+
+void PlayerbotMgr::HandleCommand(uint32 type, const string& text)
+{
+    Player *master = GetMaster();
+    if (!master)
+        return;
+
+    for (PlayerBotMap::const_iterator it = GetPlayerBotsBegin(); it != GetPlayerBotsEnd(); ++it)
+    {
+        Player* const bot = it->second;
+        bot->GetPlayerbotAI()->HandleCommand(type, text, *master);
+    }
+
+    for (PlayerBotMap::const_iterator it = sRandomPlayerbotMgr.GetPlayerBotsBegin(); it != sRandomPlayerbotMgr.GetPlayerBotsEnd(); ++it)
+    {
+        Player* const bot = it->second;
+        if (bot->GetPlayerbotAI()->GetMaster() == master)
+            bot->GetPlayerbotAI()->HandleCommand(type, text, *master);
+    }
+}
+
+void PlayerbotMgr::HandleMasterIncomingPacket(const WorldPacket& packet)
+{
+    for (PlayerBotMap::const_iterator it = GetPlayerBotsBegin(); it != GetPlayerBotsEnd(); ++it)
+    {
+        Player* const bot = it->second;
+        bot->GetPlayerbotAI()->HandleMasterIncomingPacket(packet);
+    }
+
+    for (PlayerBotMap::const_iterator it = sRandomPlayerbotMgr.GetPlayerBotsBegin(); it != sRandomPlayerbotMgr.GetPlayerBotsEnd(); ++it)
+    {
+        Player* const bot = it->second;
+        if (bot->GetPlayerbotAI()->GetMaster() == GetMaster())
+            bot->GetPlayerbotAI()->HandleMasterIncomingPacket(packet);
+    }
+
+    switch (packet.GetOpcode())
+    {
+        // if master is logging out, log out all bots
+        case CMSG_LOGOUT_REQUEST:
+        {
+            LogoutAllBots();
+            return;
+        }
+    }
+}
+void PlayerbotMgr::HandleMasterOutgoingPacket(const WorldPacket& packet)
+{
+    for (PlayerBotMap::const_iterator it = GetPlayerBotsBegin(); it != GetPlayerBotsEnd(); ++it)
+    {
+        Player* const bot = it->second;
+        bot->GetPlayerbotAI()->HandleMasterOutgoingPacket(packet);
+    }
+
+    for (PlayerBotMap::const_iterator it = sRandomPlayerbotMgr.GetPlayerBotsBegin(); it != sRandomPlayerbotMgr.GetPlayerBotsEnd(); ++it)
+    {
+        Player* const bot = it->second;
+        if (bot->GetPlayerbotAI()->GetMaster() == GetMaster())
+            bot->GetPlayerbotAI()->HandleMasterOutgoingPacket(packet);
+    }
+}
+
+void PlayerbotMgr::SaveToDB()
+{
+    for (PlayerBotMap::const_iterator it = GetPlayerBotsBegin(); it != GetPlayerBotsEnd(); ++it)
+    {
+        Player* const bot = it->second;
+        bot->SaveToDB();
+    }
+    for (PlayerBotMap::const_iterator it = sRandomPlayerbotMgr.GetPlayerBotsBegin(); it != sRandomPlayerbotMgr.GetPlayerBotsEnd(); ++it)
+    {
+        Player* const bot = it->second;
+        if (bot->GetPlayerbotAI()->GetMaster() == GetMaster())
+            bot->SaveToDB();
+    }
+}
+
+void PlayerbotMgr::OnBotLoginInternal(Player * const bot)
+{
+    bot->GetPlayerbotAI()->SetMaster(master);
+    bot->GetPlayerbotAI()->ResetStrategies();
+}
+
diff --git a/src/plugins/playerbot/PlayerbotMgr.h b/src/plugins/playerbot/PlayerbotMgr.h
new file mode 100644
index 0000000..d22074c
--- /dev/null
+++ b/src/plugins/playerbot/PlayerbotMgr.h
@@ -0,0 +1,69 @@
+#ifndef _PLAYERBOTMGR_H
+#define _PLAYERBOTMGR_H
+
+#include "Common.h"
+#include "PlayerbotAIBase.h"
+#include "../pchdef.h"
+
+class WorldPacket;
+class Player;
+class Unit;
+class Object;
+class Item;
+
+typedef map<uint64, Player*> PlayerBotMap;
+
+class PlayerbotHolder : public PlayerbotAIBase
+{
+public:
+    PlayerbotHolder();
+    virtual ~PlayerbotHolder();
+
+    void AddPlayerBot(uint64 guid, uint32 masterAccountId);
+    void LogoutPlayerBot(uint64 guid);
+    Player* GetPlayerBot (uint64 guid) const;
+    PlayerBotMap::const_iterator GetPlayerBotsBegin() const { return playerBots.begin(); }
+    PlayerBotMap::const_iterator GetPlayerBotsEnd()   const { return playerBots.end();   }
+
+    virtual void UpdateAIInternal(uint32 elapsed);
+    void UpdateSessions(uint32 elapsed);
+
+    void LogoutAllBots();
+    void OnBotLogin(Player * const bot);
+
+    list<string> HandlePlayerbotCommand(char const* args, Player* master = NULL);
+    string ProcessBotCommand(string cmd, ObjectGuid guid, bool admin, uint32 masterAccountId, uint32 masterGuildId);
+    uint32 GetAccountId(string name);
+
+protected:
+    virtual void OnBotLoginInternal(Player * const bot) = 0;
+
+protected:
+    PlayerBotMap playerBots;
+};
+
+class PlayerbotMgr : public PlayerbotHolder
+{
+public:
+    PlayerbotMgr(Player* const master);
+    virtual ~PlayerbotMgr();
+
+    static bool HandlePlayerbotMgrCommand(ChatHandler* handler, char const* args);
+    void HandleMasterIncomingPacket(const WorldPacket& packet);
+    void HandleMasterOutgoingPacket(const WorldPacket& packet);
+    void HandleCommand(uint32 type, const string& text);
+
+    virtual void UpdateAIInternal(uint32 elapsed);
+
+    Player* GetMaster() const { return master; };
+
+    void SaveToDB();
+
+protected:
+    virtual void OnBotLoginInternal(Player * const bot);
+
+private:
+    Player* const master;
+};
+
+#endif
diff --git a/src/plugins/playerbot/PlayerbotSecurity.cpp b/src/plugins/playerbot/PlayerbotSecurity.cpp
new file mode 100644
index 0000000..68c9967
--- /dev/null
+++ b/src/plugins/playerbot/PlayerbotSecurity.cpp
@@ -0,0 +1,187 @@
+#include "../pchdef.h"
+#include "PlayerbotMgr.h"
+#include "playerbot.h"
+#include "PlayerbotAIConfig.h"
+#include "PlayerbotAI.h"
+#include "ChatHelper.h"
+
+PlayerbotSecurity::PlayerbotSecurity(Player* const bot) : bot(bot)
+{
+    if (bot)
+        account = sObjectMgr->GetPlayerAccountIdByGUID(bot->GetGUID());
+}
+
+PlayerbotSecurityLevel PlayerbotSecurity::LevelFor(Player* from, DenyReason* reason, bool ignoreGroup)
+{
+    if (from->GetSession()->GetSecurity() >= SEC_GAMEMASTER)
+        return PLAYERBOT_SECURITY_ALLOW_ALL;
+
+    if (from->GetPlayerbotAI())
+    {
+        if (reason) *reason = PLAYERBOT_DENY_IS_BOT;
+        return PLAYERBOT_SECURITY_DENY_ALL;
+    }
+
+    if (bot->GetPlayerbotAI()->IsOpposing(from))
+    {
+        if (reason) *reason = PLAYERBOT_DENY_OPPOSING;
+        return PLAYERBOT_SECURITY_DENY_ALL;
+    }
+
+    if (sPlayerbotAIConfig.IsInRandomAccountList(account))
+    {
+        if (bot->GetPlayerbotAI()->IsOpposing(from))
+        {
+            if (reason) *reason = PLAYERBOT_DENY_OPPOSING;
+            return PLAYERBOT_SECURITY_DENY_ALL;
+        }
+
+        Group* group = from->GetGroup();
+        if (group)
+        {
+            for (GroupReference *gref = group->GetFirstMember(); gref; gref = gref->next())
+            {
+                Player* player = gref->GetSource();
+                if (player == bot && !ignoreGroup)
+                    return PLAYERBOT_SECURITY_ALLOW_ALL;
+            }
+        }
+
+        if ((int)bot->getLevel() - (int)from->getLevel() > 5)
+        {
+            if (reason) *reason = PLAYERBOT_DENY_LOW_LEVEL;
+            return PLAYERBOT_SECURITY_TALK;
+        }
+
+        if (bot->GetMapId() != from->GetMapId() || bot->GetDistance(from) > sPlayerbotAIConfig.whisperDistance)
+        {
+            if (!bot->GetGuildId() || bot->GetGuildId() != from->GetGuildId())
+            {
+                if (reason) *reason = PLAYERBOT_DENY_FAR;
+                return PLAYERBOT_SECURITY_TALK;
+            }
+        }
+
+        int botGS = (int)bot->GetPlayerbotAI()->GetEquipGearScore(bot, false, false);
+        int fromGS = (int)bot->GetPlayerbotAI()->GetEquipGearScore(from, false, false);
+        if (botGS && bot->getLevel() > 15 && (100 * (botGS - fromGS) / botGS) >= 20)
+        {
+            if (reason) *reason = PLAYERBOT_DENY_GEARSCORE;
+            return PLAYERBOT_SECURITY_TALK;
+        }
+
+        if (bot->isDead())
+        {
+            if (reason) *reason = PLAYERBOT_DENY_DEAD;
+            return PLAYERBOT_SECURITY_TALK;
+        }
+
+        group = bot->GetGroup();
+        if (!group)
+        {
+            if (reason) *reason = PLAYERBOT_DENY_INVITE;
+            return PLAYERBOT_SECURITY_INVITE;
+        }
+
+        for (GroupReference *gref = group->GetFirstMember(); gref; gref = gref->next())
+        {
+            Player* player = gref->GetSource();
+            if (player == from)
+                return PLAYERBOT_SECURITY_ALLOW_ALL;
+        }
+
+        if (group->IsFull())
+        {
+            if (reason) *reason = PLAYERBOT_DENY_FULL_GROUP;
+            return PLAYERBOT_SECURITY_TALK;
+        }
+
+        if (reason) *reason = PLAYERBOT_DENY_INVITE;
+        return PLAYERBOT_SECURITY_INVITE;
+    }
+
+    return PLAYERBOT_SECURITY_ALLOW_ALL;
+}
+
+bool PlayerbotSecurity::CheckLevelFor(PlayerbotSecurityLevel level, bool silent, Player* from, bool ignoreGroup)
+{
+    DenyReason reason = PLAYERBOT_DENY_NONE;
+    PlayerbotSecurityLevel realLevel = LevelFor(from, &reason, ignoreGroup);
+    if (realLevel >= level)
+        return true;
+
+    if (silent || from->GetPlayerbotAI())
+        return false;
+
+    Player* master = bot->GetPlayerbotAI()->GetMaster();
+    if (master && bot->GetPlayerbotAI() && bot->GetPlayerbotAI()->IsOpposing(master) && master->GetSession()->GetSecurity() < SEC_GAMEMASTER)
+        return false;
+
+    ostringstream out;
+    switch (realLevel)
+    {
+    case PLAYERBOT_SECURITY_DENY_ALL:
+        out << "I'm kind of busy now";
+        break;
+    case PLAYERBOT_SECURITY_TALK:
+        switch (reason)
+        {
+        case PLAYERBOT_DENY_NONE:
+            out << "I'll do it later";
+            break;
+        case PLAYERBOT_DENY_LOW_LEVEL:
+            out << "You are too low level: |cffff0000" << (uint32)from->getLevel() << "|cffffffff/|cff00ff00" << (uint32)bot->getLevel();
+            break;
+        case PLAYERBOT_DENY_GEARSCORE:
+            {
+                int botGS = (int)bot->GetPlayerbotAI()->GetEquipGearScore(bot, false, false);
+                int fromGS = (int)bot->GetPlayerbotAI()->GetEquipGearScore(from, false, false);
+                out << "Your gearscore is too low: |cffff0000" << fromGS << "|cffffffff/|cff00ff00" << botGS;
+            }
+            break;
+        case PLAYERBOT_DENY_NOT_YOURS:
+            out << "I have a master already";
+            break;
+        case PLAYERBOT_DENY_IS_BOT:
+            out << "You are a bot";
+            break;
+        case PLAYERBOT_DENY_OPPOSING:
+            out << "You are the enemy";
+            break;
+        case PLAYERBOT_DENY_DEAD:
+            out << "I'm dead. Will do it later";
+            break;
+        case PLAYERBOT_DENY_INVITE:
+            out << "Invite me to your group first";
+            break;
+        case PLAYERBOT_DENY_FAR:
+            {
+                out << "I am too far away";
+
+                uint32 area = bot->GetAreaId();
+                if (area)
+                {
+                    const AreaTableEntry* entry = sAreaTableStore.LookupEntry(area);
+                    if (entry)
+                    {
+                        out << " |cffffffff(|cffff0000" << entry->area_name[0] << "|cffffffff)";
+                    }
+                }
+            }
+            break;
+        case PLAYERBOT_DENY_FULL_GROUP:
+            out << "I am in a full group. Will do it later";
+            break;
+        default:
+            out << "I can't do that";
+            break;
+        }
+        break;
+    case PLAYERBOT_SECURITY_INVITE:
+        out << "Invite me to your group first";
+        break;
+    }
+
+	bot->Whisper(out.str(), LANG_UNIVERSAL, from);
+    return false;
+}
diff --git a/src/plugins/playerbot/PlayerbotSecurity.h b/src/plugins/playerbot/PlayerbotSecurity.h
new file mode 100644
index 0000000..5349555
--- /dev/null
+++ b/src/plugins/playerbot/PlayerbotSecurity.h
@@ -0,0 +1,42 @@
+#ifndef _PlayerbotSecurity_H
+#define _PlayerbotSecurity_H
+
+using namespace std;
+
+enum PlayerbotSecurityLevel
+{
+    PLAYERBOT_SECURITY_DENY_ALL = 0,
+    PLAYERBOT_SECURITY_TALK = 1,
+    PLAYERBOT_SECURITY_INVITE = 2,
+    PLAYERBOT_SECURITY_ALLOW_ALL = 3
+};
+
+enum DenyReason
+{
+    PLAYERBOT_DENY_NONE,
+    PLAYERBOT_DENY_LOW_LEVEL,
+    PLAYERBOT_DENY_GEARSCORE,
+    PLAYERBOT_DENY_NOT_YOURS,
+    PLAYERBOT_DENY_IS_BOT,
+    PLAYERBOT_DENY_OPPOSING,
+    PLAYERBOT_DENY_DEAD,
+    PLAYERBOT_DENY_FAR,
+    PLAYERBOT_DENY_INVITE,
+    PLAYERBOT_DENY_FULL_GROUP
+};
+
+class PlayerbotSecurity
+{
+    public:
+        PlayerbotSecurity(Player* const bot);
+
+	public:
+        PlayerbotSecurityLevel LevelFor(Player* from, DenyReason* reason = NULL, bool ignoreGroup = false);
+        bool CheckLevelFor(PlayerbotSecurityLevel level, bool silent, Player* from, bool ignoreGroup = false);
+
+    private:
+        Player* const bot;
+        uint32 account;
+};
+
+#endif
diff --git a/src/plugins/playerbot/RandomItemMgr.cpp b/src/plugins/playerbot/RandomItemMgr.cpp
new file mode 100644
index 0000000..4d4b404
--- /dev/null
+++ b/src/plugins/playerbot/RandomItemMgr.cpp
@@ -0,0 +1,154 @@
+#include "../pchdef.h"
+#include "playerbot.h"
+#include "PlayerbotAIConfig.h"
+#include "RandomItemMgr.h"
+
+#include "../../plugins/ahbot/AhBot.h"
+#include "../../server/database/Database/DatabaseEnv.h"
+#include "PlayerbotAI.h"
+
+#include "../../plugins/ahbot/AhBotConfig.h"
+
+char * strstri (const char* str1, const char* str2);
+
+class RandomItemGuildTaskPredicate : public RandomItemPredicate
+{
+public:
+    virtual bool Apply(ItemTemplate const* proto)
+    {
+        if (proto->Bonding == BIND_WHEN_PICKED_UP ||
+                proto->Bonding == BIND_QUEST_ITEM ||
+                proto->Bonding == BIND_WHEN_USE)
+            return false;
+
+        if (proto->Quality < ITEM_QUALITY_UNCOMMON)
+            return false;
+
+        if ((proto->Class == ITEM_CLASS_ARMOR || proto->Class == ITEM_CLASS_WEAPON) && proto->Quality >= ITEM_QUALITY_RARE)
+            return true;
+
+        if (proto->Class == ITEM_CLASS_TRADE_GOODS || proto->Class == ITEM_CLASS_CONSUMABLE)
+            return true;
+
+        return false;
+    }
+};
+
+class RandomItemGuildTaskRewardPredicate : public RandomItemPredicate
+{
+public:
+    virtual bool Apply(ItemTemplate const* proto)
+    {
+        if (proto->Bonding == BIND_WHEN_PICKED_UP ||
+                proto->Bonding == BIND_QUEST_ITEM ||
+                proto->Bonding == BIND_WHEN_USE)
+            return false;
+
+        if (proto->Quality < ITEM_QUALITY_RARE)
+            return false;
+
+        if (proto->Class == ITEM_CLASS_QUEST)
+            return false;
+
+        return true;
+    }
+};
+
+RandomItemMgr::RandomItemMgr()
+{
+    predicates[RANDOM_ITEM_GUILD_TASK] = new RandomItemGuildTaskPredicate();
+    predicates[RANDOM_ITEM_GUILD_TASK_REWARD] = new RandomItemGuildTaskRewardPredicate();
+}
+
+RandomItemMgr::~RandomItemMgr()
+{
+    for (map<RandomItemType, RandomItemPredicate*>::iterator i = predicates.begin(); i != predicates.end(); ++i)
+        delete i->second;
+
+    predicates.clear();
+}
+
+bool RandomItemMgr::HandleConsoleCommand(ChatHandler* handler, char const* args)
+{
+    if (!args || !*args)
+    {
+        sLog->outMessage("gtask", LOG_LEVEL_ERROR, "Usage: rnditem");
+        return false;
+    }
+
+    return false;
+}
+
+RandomItemList RandomItemMgr::Query(RandomItemType type, RandomItemPredicate* predicate)
+{
+    RandomItemList &list = cache[type];
+    if (list.empty())
+        list = cache[type] = Query(type);
+
+    RandomItemList result;
+    for (RandomItemList::iterator i = list.begin(); i != list.end(); ++i)
+    {
+        uint32 itemId = *i;
+        ItemTemplate const* proto = sObjectMgr->GetItemTemplate(itemId);
+        if (!proto)
+            continue;
+
+        if (predicate && !predicate->Apply(proto))
+            continue;
+
+        result.push_back(itemId);
+    }
+
+    return result;
+}
+
+RandomItemList RandomItemMgr::Query(RandomItemType type)
+{
+    RandomItemList items;
+
+    ItemTemplateContainer const* itemTemplates = sObjectMgr->GetItemTemplateStore();
+    for (ItemTemplateContainer::const_iterator i = itemTemplates->begin(); i != itemTemplates->end(); ++i)
+    {
+        uint32 itemId = i->first;
+        ItemTemplate const* proto = &i->second;
+        if (!proto)
+            continue;
+
+        if (proto->Duration & 0x80000000)
+            continue;
+
+        if (sAhBotConfig.ignoreItemIds.find(proto->ItemId) != sAhBotConfig.ignoreItemIds.end())
+            continue;
+
+        if (strstri(proto->Name1.c_str(), "qa") || strstri(proto->Name1.c_str(), "test") || strstri(proto->Name1.c_str(), "deprecated"))
+            continue;
+
+        if ((proto->RequiredLevel && proto->RequiredLevel > sAhBotConfig.maxRequiredLevel) || proto->ItemLevel > sAhBotConfig.maxItemLevel)
+            continue;
+
+        if (predicates[type] && !predicates[type]->Apply(proto))
+            continue;
+
+        if (!auctionbot.GetSellPrice(proto))
+            continue;
+
+        items.push_back(itemId);
+    }
+
+    if (items.empty())
+        sLog->outMessage("gtask", LOG_LEVEL_ERROR, "no items available for random item query %u", type);
+
+    return items;
+}
+
+uint32 RandomItemMgr::GetRandomItem(RandomItemType type, RandomItemPredicate* predicate)
+{
+    RandomItemList const& list = Query(type, predicate);
+    if (list.empty())
+        return 0;
+
+    uint32 index = urand(0, list.size() - 1);
+    uint32 itemId = list[index];
+
+    return itemId;
+}
diff --git a/src/plugins/playerbot/RandomItemMgr.h b/src/plugins/playerbot/RandomItemMgr.h
new file mode 100644
index 0000000..a0f8149
--- /dev/null
+++ b/src/plugins/playerbot/RandomItemMgr.h
@@ -0,0 +1,50 @@
+#ifndef _RandomItemMgr_H
+#define _RandomItemMgr_H
+
+#include "Common.h"
+#include "PlayerbotAIBase.h"
+
+using namespace std;
+
+enum RandomItemType
+{
+    RANDOM_ITEM_GUILD_TASK,
+    RANDOM_ITEM_GUILD_TASK_REWARD
+};
+
+class RandomItemPredicate
+{
+public:
+    virtual bool Apply(ItemTemplate const* proto) = 0;
+};
+
+typedef vector<uint32> RandomItemList;
+typedef map<RandomItemType, RandomItemList> RandomItemCache;
+
+class RandomItemMgr
+{
+    public:
+        RandomItemMgr();
+        virtual ~RandomItemMgr();
+        static RandomItemMgr& instance()
+        {
+            static RandomItemMgr instance;
+            return instance;
+        }
+
+	public:
+        static bool HandleConsoleCommand(ChatHandler* handler, char const* args);
+        RandomItemList Query(RandomItemType type, RandomItemPredicate* predicate);
+        uint32 GetRandomItem(RandomItemType type, RandomItemPredicate* predicate = NULL);
+
+    private:
+        RandomItemList Query(RandomItemType type);
+
+    private:
+        RandomItemCache cache;
+        map<RandomItemType, RandomItemPredicate*> predicates;
+};
+
+#define sRandomItemMgr RandomItemMgr::instance()
+
+#endif
diff --git a/src/plugins/playerbot/RandomPlayerbotFactory.cpp b/src/plugins/playerbot/RandomPlayerbotFactory.cpp
new file mode 100644
index 0000000..2b423df
--- /dev/null
+++ b/src/plugins/playerbot/RandomPlayerbotFactory.cpp
@@ -0,0 +1,384 @@
+#include "../pchdef.h"
+#include "playerbot.h"
+#include "PlayerbotAIConfig.h"
+#include "PlayerbotFactory.h"
+#include "../../server/database/Database/DatabaseEnv.h"
+#include "PlayerbotAI.h"
+#include "../../server/game/Entities/Player/Player.h"
+#include "../../server/game/Guilds/Guild.h"
+#include "../../server/game/Accounts/AccountMgr.h"
+#include "../../server/game/Guilds/GuildMgr.h"
+#include "RandomPlayerbotFactory.h"
+
+map<uint8, vector<uint8> > RandomPlayerbotFactory::availableRaces;
+
+RandomPlayerbotFactory::RandomPlayerbotFactory(uint32 accountId) : accountId(accountId)
+{
+    availableRaces[CLASS_WARRIOR].push_back(RACE_HUMAN);
+    availableRaces[CLASS_WARRIOR].push_back(RACE_NIGHTELF);
+    availableRaces[CLASS_WARRIOR].push_back(RACE_GNOME);
+    availableRaces[CLASS_WARRIOR].push_back(RACE_DWARF);
+    availableRaces[CLASS_WARRIOR].push_back(RACE_ORC);
+    availableRaces[CLASS_WARRIOR].push_back(RACE_UNDEAD_PLAYER);
+    availableRaces[CLASS_WARRIOR].push_back(RACE_TAUREN);
+    availableRaces[CLASS_WARRIOR].push_back(RACE_TROLL);
+    availableRaces[CLASS_WARRIOR].push_back(RACE_DRAENEI);
+
+    availableRaces[CLASS_PALADIN].push_back(RACE_HUMAN);
+    availableRaces[CLASS_PALADIN].push_back(RACE_DWARF);
+    availableRaces[CLASS_PALADIN].push_back(RACE_DRAENEI);
+    availableRaces[CLASS_PALADIN].push_back(RACE_BLOODELF);
+
+    availableRaces[CLASS_ROGUE].push_back(RACE_HUMAN);
+    availableRaces[CLASS_ROGUE].push_back(RACE_DWARF);
+    availableRaces[CLASS_ROGUE].push_back(RACE_NIGHTELF);
+    availableRaces[CLASS_ROGUE].push_back(RACE_GNOME);
+    availableRaces[CLASS_ROGUE].push_back(RACE_ORC);
+    availableRaces[CLASS_ROGUE].push_back(RACE_TROLL);
+    availableRaces[CLASS_ROGUE].push_back(RACE_BLOODELF);
+
+    availableRaces[CLASS_PRIEST].push_back(RACE_HUMAN);
+    availableRaces[CLASS_PRIEST].push_back(RACE_DWARF);
+    availableRaces[CLASS_PRIEST].push_back(RACE_NIGHTELF);
+    availableRaces[CLASS_PRIEST].push_back(RACE_DRAENEI);
+    availableRaces[CLASS_PRIEST].push_back(RACE_TROLL);
+    availableRaces[CLASS_PRIEST].push_back(RACE_UNDEAD_PLAYER);
+    availableRaces[CLASS_PRIEST].push_back(RACE_BLOODELF);
+
+    availableRaces[CLASS_MAGE].push_back(RACE_HUMAN);
+    availableRaces[CLASS_MAGE].push_back(RACE_GNOME);
+    availableRaces[CLASS_MAGE].push_back(RACE_DRAENEI);
+    availableRaces[CLASS_MAGE].push_back(RACE_UNDEAD_PLAYER);
+    availableRaces[CLASS_MAGE].push_back(RACE_TROLL);
+    availableRaces[CLASS_MAGE].push_back(RACE_BLOODELF);
+
+    availableRaces[CLASS_WARLOCK].push_back(RACE_HUMAN);
+    availableRaces[CLASS_WARLOCK].push_back(RACE_GNOME);
+    availableRaces[CLASS_WARLOCK].push_back(RACE_UNDEAD_PLAYER);
+    availableRaces[CLASS_WARLOCK].push_back(RACE_ORC);
+    availableRaces[CLASS_WARLOCK].push_back(RACE_BLOODELF);
+
+    availableRaces[CLASS_SHAMAN].push_back(RACE_DRAENEI);
+    availableRaces[CLASS_SHAMAN].push_back(RACE_ORC);
+    availableRaces[CLASS_SHAMAN].push_back(RACE_TAUREN);
+    availableRaces[CLASS_SHAMAN].push_back(RACE_TROLL);
+
+    availableRaces[CLASS_HUNTER].push_back(RACE_DWARF);
+    availableRaces[CLASS_HUNTER].push_back(RACE_NIGHTELF);
+    availableRaces[CLASS_HUNTER].push_back(RACE_DRAENEI);
+    availableRaces[CLASS_HUNTER].push_back(RACE_ORC);
+    availableRaces[CLASS_HUNTER].push_back(RACE_TAUREN);
+    availableRaces[CLASS_HUNTER].push_back(RACE_TROLL);
+    availableRaces[CLASS_HUNTER].push_back(RACE_BLOODELF);
+
+    availableRaces[CLASS_DRUID].push_back(RACE_NIGHTELF);
+    availableRaces[CLASS_DRUID].push_back(RACE_TAUREN);
+}
+
+typedef std::multimap<uint32, CharSectionsEntry const*> CharSectionsMap;
+extern CharSectionsMap sCharSectionMap;
+CharSectionsEntry const* GetRandomCharSection(uint8 race, CharSectionType genType, uint8 gender, uint8 color = 255)
+{
+    vector<CharSectionsEntry const*> charSections;
+    std::pair<CharSectionsMap::const_iterator, CharSectionsMap::const_iterator> eqr = sCharSectionMap.equal_range(uint32(genType) | uint32(gender << 8) | uint32(race << 16));
+    for (CharSectionsMap::const_iterator itr = eqr.first; itr != eqr.second; ++itr)
+    {
+        CharSectionsEntry const* charSection = itr->second;
+        if ((charSection->Flags & SECTION_FLAG_PLAYER) && !(charSection->Flags & SECTION_FLAG_DEATH_KNIGHT)
+                && (charSection->Color == color || color == 255))
+        {
+            charSections.push_back(itr->second);
+        }
+    }
+    if (charSections.empty())
+    {
+        sLog->outMessage("playerbot", LOG_LEVEL_DEBUG, "No match for race=%u gender=%u color=%u type=%u",
+                race, gender, color, genType);
+        return NULL;
+    }
+
+    uint32 charSectionIndex = urand(0, charSections.size() - 1);
+    return charSections[charSectionIndex];
+}
+
+bool RandomPlayerbotFactory::CreateRandomBot(uint8 cls)
+{
+    sLog->outMessage("playerbot", LOG_LEVEL_DEBUG, "Creating new random bot for class %d", cls);
+
+    uint8 gender = rand() % 2 ? GENDER_MALE : GENDER_FEMALE;
+
+    uint8 race = availableRaces[cls][urand(0, availableRaces[cls].size() - 1)];
+    string name = CreateRandomBotName();
+    if (name.empty())
+        return false;
+	std::string nameOrIp = "";
+    CharSectionsEntry const* skin = GetRandomCharSection(race, SECTION_TYPE_SKIN, gender);
+    CharSectionsEntry const* face = GetRandomCharSection(race, SECTION_TYPE_FACE, gender, skin->Color);
+    CharSectionsEntry const* hair = GetRandomCharSection(race, SECTION_TYPE_HAIR, gender);
+    CharSectionsEntry const* facialHair = GetRandomCharSection(race, SECTION_TYPE_FACIAL_HAIR, gender, hair->Color);
+    uint8 outfitId = 0;
+    std::string accountName;
+    AccountMgr::GetName(accountId, accountName);
+	WorldSession* session = new WorldSession(accountId, std::move(accountName), NULL, SEC_PLAYER, 2, 0, LOCALE_enUS, 0, false);
+    if (!session)
+    {
+        sLog->outMessage("playerbot", LOG_LEVEL_ERROR, "Couldn't create session for random bot account %s", accountId);
+        delete session;
+        return false;
+    }
+
+    Player *player = new Player(session);
+
+    CharacterCreateInfo cci;
+    cci.Name = name;
+    cci.Race = race;
+    cci.Class = cls;
+    cci.Gender = gender;
+    cci.Skin = skin->Color;
+    cci.Face = face->Type;
+    cci.HairStyle = hair->Type;
+    cci.HairColor = hair->Color;
+    cci.FacialHair = facialHair ? facialHair->Type : 0;
+    cci.OutfitId = outfitId;
+
+    if (!player->Create(sObjectMgr->GetGenerator<HighGuid::Player>().Generate(), &cci))
+    {
+        player->DeleteFromDB(player->GetGUID(), accountId, true, true);
+        delete session;
+        delete player;
+        sLog->outMessage("playerbot", LOG_LEVEL_ERROR, "Unable to create random bot for account %d - name: \"%s\"; race: %u; class: %u",
+                accountId, name.c_str(), race, cls);
+        return false;
+    }
+
+    player->setCinematic(2);
+    player->SetAtLoginFlag(AT_LOGIN_NONE);
+    player->SaveToDB(true);
+
+    sLog->outMessage("playerbot", LOG_LEVEL_DEBUG, "Random bot created for account %d - name: \"%s\"; race: %u; class: %u",
+            accountId, name.c_str(), race, cls);
+
+    return true;
+}
+
+string RandomPlayerbotFactory::CreateRandomBotName()
+{
+    QueryResult result = CharacterDatabase.Query("SELECT MAX(name_id) FROM ai_playerbot_names");
+    if (!result)
+    {
+        sLog->outMessage("playerbot", LOG_LEVEL_ERROR, "No more names left for random guilds");
+        return "";
+    }
+
+    Field *fields = result->Fetch();
+    uint32 maxId = fields[0].GetUInt32();
+
+    uint32 id = urand(0, maxId);
+    result = CharacterDatabase.PQuery("SELECT n.name FROM ai_playerbot_names n "
+            "LEFT OUTER JOIN characters e ON e.name = n.name "
+            "WHERE e.guid IS NULL AND n.name_id >= '%u' LIMIT 1", id);
+    if (!result)
+    {
+        sLog->outMessage("playerbot", LOG_LEVEL_ERROR, "No more names left for random bots");
+        return "";
+    }
+
+	fields = result->Fetch();
+    return fields[0].GetString();
+}
+
+
+void RandomPlayerbotFactory::CreateRandomBots()
+{
+    if (sPlayerbotAIConfig.deleteRandomBotAccounts)
+    {
+        sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Deleting random bot accounts...");
+        QueryResult results = LoginDatabase.PQuery("SELECT id FROM account where username like '%s%%'", sPlayerbotAIConfig.randomBotAccountPrefix.c_str());
+        if (results)
+        {
+            do
+            {
+                Field* fields = results->Fetch();
+                sAccountMgr->DeleteAccount(fields[0].GetUInt32());
+            } while (results->NextRow());
+        }
+
+        CharacterDatabase.Execute("DELETE FROM ai_playerbot_random_bots");
+        sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Random bot accounts deleted");
+    }
+
+    for (int accountNumber = 0; accountNumber < sPlayerbotAIConfig.randomBotAccountCount; ++accountNumber)
+    {
+        ostringstream out; out << sPlayerbotAIConfig.randomBotAccountPrefix << accountNumber;
+        string accountName = out.str();
+        QueryResult results = LoginDatabase.PQuery("SELECT id FROM account where username = '%s'", accountName.c_str());
+        if (results)
+        {
+            continue;
+        }
+
+        string password = "";
+        for (int i = 0; i < 10; i++)
+        {
+            password += (char)urand('!', 'z');
+        }
+        sAccountMgr->CreateAccount(accountName, password, "playerbot");
+
+        sLog->outMessage("playerbot", LOG_LEVEL_DEBUG, "Account %s created for random bots", accountName.c_str());
+    }
+
+    LoginDatabase.PExecute("UPDATE account SET expansion = '%u' where username like '%s%%'", 2, sPlayerbotAIConfig.randomBotAccountPrefix.c_str());
+
+    int totalRandomBotChars = 0;
+    for (int accountNumber = 0; accountNumber < sPlayerbotAIConfig.randomBotAccountCount; ++accountNumber)
+    {
+        ostringstream out; out << sPlayerbotAIConfig.randomBotAccountPrefix << accountNumber;
+        string accountName = out.str();
+
+        QueryResult results = LoginDatabase.PQuery("SELECT id FROM account where username = '%s'", accountName.c_str());
+        if (!results)
+            continue;
+
+        Field* fields = results->Fetch();
+        uint32 accountId = fields[0].GetUInt32();
+
+        sPlayerbotAIConfig.randomBotAccounts.push_back(accountId);
+
+        int count = sAccountMgr->GetCharactersCount(accountId);
+        if (count >= 10)
+        {
+            totalRandomBotChars += count;
+            continue;
+        }
+
+        RandomPlayerbotFactory factory(accountId);
+        for (uint8 cls = CLASS_WARRIOR; cls < MAX_CLASSES; ++cls)
+        {
+            if (cls != 10 && cls != CLASS_DEATH_KNIGHT)
+                factory.CreateRandomBot(cls);
+        }
+
+        totalRandomBotChars += sAccountMgr->GetCharactersCount(accountId);
+    }
+
+    sLog->outMessage("playerbot", LOG_LEVEL_INFO, "%d random bot accounts with %d characters available", sPlayerbotAIConfig.randomBotAccounts.size(), totalRandomBotChars);
+}
+
+
+void RandomPlayerbotFactory::CreateRandomGuilds()
+{
+    vector<uint32> randomBots;
+    QueryResult results = LoginDatabase.PQuery("SELECT id FROM account where username like '%s%%'", sPlayerbotAIConfig.randomBotAccountPrefix.c_str());
+    if (results)
+    {
+        do
+        {
+            Field* fields = results->Fetch();
+            uint32 accountId = fields[0].GetUInt32();
+
+            QueryResult results2 = CharacterDatabase.PQuery("SELECT guid FROM characters where account  = '%u'", accountId);
+            if (results2)
+            {
+                do
+                {
+                    Field* fields = results2->Fetch();
+                    uint32 guid = fields[0].GetUInt32();
+                    randomBots.push_back(guid);
+                } while (results2->NextRow());
+            }
+
+        } while (results->NextRow());
+    }
+
+    if (sPlayerbotAIConfig.deleteRandomBotGuilds)
+    {
+        sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Deleting random bot guilds...");
+        for (vector<uint32>::iterator i = randomBots.begin(); i != randomBots.end(); ++i)
+        {
+            ObjectGuid leader(HighGuid::Player, *i);
+            Guild* guild = sGuildMgr->GetGuildByLeader(leader);
+            if (guild) guild->Disband();
+        }
+        sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Random bot guilds deleted");
+    }
+
+    int guildNumber = 0;
+    vector<ObjectGuid> availableLeaders;
+    for (vector<uint32>::iterator i = randomBots.begin(); i != randomBots.end(); ++i)
+    {
+        ObjectGuid leader(HighGuid::Player, *i);
+        Guild* guild = sGuildMgr->GetGuildByLeader(leader);
+        if (guild)
+        {
+            ++guildNumber;
+            sPlayerbotAIConfig.randomBotGuilds.push_back(guild->GetId());
+        }
+        else
+        {
+            Player* player = sObjectMgr->GetPlayerByLowGUID(leader);
+            if (player)
+                availableLeaders.push_back(leader);
+        }
+    }
+
+    for (; guildNumber < sPlayerbotAIConfig.randomBotGuildCount; ++guildNumber)
+    {
+        string guildName = CreateRandomGuildName();
+        if (guildName.empty())
+            break;
+
+        if (availableLeaders.empty())
+        {
+            sLog->outMessage("playerbot", LOG_LEVEL_ERROR, "No leaders for random guilds available");
+            break;
+        }
+
+        int index = urand(0, availableLeaders.size() - 1);
+        ObjectGuid leader = availableLeaders[index];
+        Player* player = sObjectMgr->GetPlayerByLowGUID(leader);
+        if (!player)
+        {
+            sLog->outMessage("playerbot", LOG_LEVEL_ERROR, "Cannot find player for leader %u", leader);
+            break;
+        }
+
+        Guild* guild = new Guild();
+        if (!guild->Create(player, guildName))
+        {
+            sLog->outMessage("playerbot", LOG_LEVEL_ERROR, "Error creating guild %s", guildName.c_str());
+            break;
+        }
+
+        sGuildMgr->AddGuild(guild);
+        sPlayerbotAIConfig.randomBotGuilds.push_back(guild->GetId());
+    }
+
+    sLog->outMessage("playerbot", LOG_LEVEL_INFO, "%d random bot guilds available", guildNumber);
+}
+
+string RandomPlayerbotFactory::CreateRandomGuildName()
+{
+    QueryResult result = CharacterDatabase.Query("SELECT MAX(name_id) FROM ai_playerbot_guild_names");
+    if (!result)
+    {
+        sLog->outMessage("playerbot", LOG_LEVEL_ERROR, "No more names left for random guilds");
+        return "";
+    }
+
+    Field *fields = result->Fetch();
+    uint32 maxId = fields[0].GetUInt32();
+
+    uint32 id = urand(0, maxId);
+    result = CharacterDatabase.PQuery("SELECT n.name FROM ai_playerbot_guild_names n "
+            "LEFT OUTER JOIN guild e ON e.name = n.name "
+            "WHERE e.guildid IS NULL AND n.name_id >= '%u' LIMIT 1", id);
+    if (!result)
+    {
+        sLog->outMessage("playerbot", LOG_LEVEL_ERROR, "No more names left for random guilds");
+        return "";
+    }
+
+    fields = result->Fetch();
+    return fields[0].GetString();
+}
+
diff --git a/src/plugins/playerbot/RandomPlayerbotFactory.h b/src/plugins/playerbot/RandomPlayerbotFactory.h
new file mode 100644
index 0000000..76f4d08
--- /dev/null
+++ b/src/plugins/playerbot/RandomPlayerbotFactory.h
@@ -0,0 +1,35 @@
+#ifndef _RandomPlayerbotFactory_H
+#define _RandomPlayerbotFactory_H
+
+#include "Common.h"
+#include "PlayerbotAIBase.h"
+
+class WorldPacket;
+class Player;
+class Unit;
+class Object;
+class Item;
+
+using namespace std;
+
+class RandomPlayerbotFactory
+{
+    public:
+        RandomPlayerbotFactory(uint32 accountId);
+		virtual ~RandomPlayerbotFactory() {}
+
+	public:
+        bool CreateRandomBot(uint8 cls);
+        static void CreateRandomBots();
+        static void CreateRandomGuilds();
+
+	private:
+        string CreateRandomBotName();
+        static string CreateRandomGuildName();
+
+    private:
+        uint32 accountId;
+        static map<uint8, vector<uint8> > availableRaces;
+};
+
+#endif
diff --git a/src/plugins/playerbot/RandomPlayerbotMgr.cpp b/src/plugins/playerbot/RandomPlayerbotMgr.cpp
new file mode 100644
index 0000000..4638d11
--- /dev/null
+++ b/src/plugins/playerbot/RandomPlayerbotMgr.cpp
@@ -0,0 +1,912 @@
+#include "../pchdef.h"
+#include "playerbot.h"
+#include "PlayerbotAIConfig.h"
+#include "PlayerbotFactory.h"
+#include "../../server/database/Database/DatabaseEnv.h"
+#include "PlayerbotAI.h"
+#include "AiFactory.h"
+#include "../../game/Maps/MapManager.h"
+#include "PlayerbotCommandServer.h"
+#include "GuildTaskMgr.h"
+
+RandomPlayerbotMgr::RandomPlayerbotMgr() : PlayerbotHolder(), processTicks(0)
+{
+    sPlayerbotCommandServer.Start();
+}
+
+RandomPlayerbotMgr::~RandomPlayerbotMgr()
+{
+}
+
+void RandomPlayerbotMgr::UpdateAIInternal(uint32 elapsed)
+{
+    SetNextCheckDelay(sPlayerbotAIConfig.randomBotUpdateInterval * 1000);
+
+    if (!sPlayerbotAIConfig.randomBotAutologin || !sPlayerbotAIConfig.enabled)
+        return;
+
+    sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Processing random bots...");
+
+    int maxAllowedBotCount = GetEventValue(0, "bot_count");
+    if (!maxAllowedBotCount)
+    {
+        maxAllowedBotCount = urand(sPlayerbotAIConfig.minRandomBots, sPlayerbotAIConfig.maxRandomBots);
+        SetEventValue(0, "bot_count", maxAllowedBotCount,
+                urand(sPlayerbotAIConfig.randomBotCountChangeMinInterval, sPlayerbotAIConfig.randomBotCountChangeMaxInterval));
+    }
+
+    list<uint32> bots = GetBots();
+    int botCount = bots.size();
+    int allianceNewBots = 0, hordeNewBots = 0;
+    int randomBotsPerInterval = (int)urand(sPlayerbotAIConfig.minRandomBotsPerInterval, sPlayerbotAIConfig.maxRandomBotsPerInterval);
+    if (!processTicks)
+    {
+        if (sPlayerbotAIConfig.randomBotLoginAtStartup)
+            randomBotsPerInterval = bots.size();
+    }
+
+    while (botCount++ < maxAllowedBotCount)
+    {
+        bool alliance = botCount % 2;
+        uint32 bot = AddRandomBot(alliance);
+        if (bot)
+        {
+            if (alliance)
+                allianceNewBots++;
+            else
+                hordeNewBots++;
+
+            bots.push_back(bot);
+        }
+        else
+            break;
+    }
+
+    int botProcessed = 0;
+    for (list<uint32>::iterator i = bots.begin(); i != bots.end(); ++i)
+    {
+        uint32 bot = *i;
+        if (ProcessBot(bot))
+            botProcessed++;
+
+        if (botProcessed >= randomBotsPerInterval)
+            break;
+    }
+
+    sLog->outMessage("playerbot", LOG_LEVEL_INFO, "%d bots processed. %d alliance and %d horde bots added. %d bots online. Next check in %d seconds",
+            botProcessed, allianceNewBots, hordeNewBots, playerBots.size(), sPlayerbotAIConfig.randomBotUpdateInterval);
+
+    if (processTicks++ == 1)
+        PrintStats();
+}
+
+uint32 RandomPlayerbotMgr::AddRandomBot(bool alliance)
+{
+    vector<uint32> bots = GetFreeBots(alliance);
+    if (bots.size() == 0)
+        return 0;
+
+    int index = urand(0, bots.size() - 1);
+    uint32 bot = bots[index];
+    SetEventValue(bot, "add", 1, urand(sPlayerbotAIConfig.minRandomBotInWorldTime, sPlayerbotAIConfig.maxRandomBotInWorldTime));
+    uint32 randomTime = 30 + urand(sPlayerbotAIConfig.randomBotUpdateInterval, sPlayerbotAIConfig.randomBotUpdateInterval * 3);
+    ScheduleRandomize(bot, randomTime);
+    sLog->outMessage("playerbot", LOG_LEVEL_DEBUG, "Random bot %d added", bot);
+    return bot;
+}
+
+void RandomPlayerbotMgr::ScheduleRandomize(uint32 bot, uint32 time)
+{
+    SetEventValue(bot, "randomize", 1, time);
+    SetEventValue(bot, "logout", 1, time + 30 + urand(sPlayerbotAIConfig.randomBotUpdateInterval, sPlayerbotAIConfig.randomBotUpdateInterval * 3));
+}
+
+void RandomPlayerbotMgr::ScheduleTeleport(uint32 bot)
+{
+    SetEventValue(bot, "teleport", 1, 60 + urand(sPlayerbotAIConfig.randomBotUpdateInterval, sPlayerbotAIConfig.randomBotUpdateInterval * 3));
+}
+
+bool RandomPlayerbotMgr::ProcessBot(uint32 bot)
+{
+    uint32 isValid = GetEventValue(bot, "add");
+    if (!isValid)
+    {
+		Player* player = GetPlayerBot(bot);
+		if (!player || !player->GetGroup())
+		{
+			sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Bot %d expired", bot);
+			SetEventValue(bot, "add", 0, 0);
+		}
+        return true;
+    }
+
+    if (!GetPlayerBot(bot))
+    {
+        sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Bot %d logged in", bot);
+        AddPlayerBot(bot, 0);
+        if (!GetEventValue(bot, "online"))
+        {
+            SetEventValue(bot, "online", 1, sPlayerbotAIConfig.minRandomBotInWorldTime);
+        }
+        return true;
+    }
+
+    Player* player = GetPlayerBot(bot);
+    if (!player)
+        return false;
+
+    PlayerbotAI* ai = player->GetPlayerbotAI();
+    if (!ai)
+        return false;
+
+    if (player->GetGroup())
+    {
+        sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Skipping bot %d as it is in group", bot);
+        return false;
+    }
+
+    if (player->isDead())
+    {
+        if (!GetEventValue(bot, "dead"))
+        {
+            sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Setting dead flag for bot %d", bot);
+            uint32 randomTime = urand(sPlayerbotAIConfig.minRandomBotReviveTime, sPlayerbotAIConfig.maxRandomBotReviveTime);
+            SetEventValue(bot, "dead", 1, randomTime);
+            SetEventValue(bot, "revive", 1, randomTime - 60);
+            return false;
+        }
+
+        if (!GetEventValue(bot, "revive"))
+        {
+            sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Reviving dead bot %d", bot);
+            SetEventValue(bot, "dead", 0, 0);
+            SetEventValue(bot, "revive", 0, 0);
+            RandomTeleport(player, player->GetMapId(), player->GetPositionX(), player->GetPositionY(), player->GetPositionZ());
+            return true;
+        }
+
+        return false;
+    }
+
+    if (player->GetGuild() && player->GetGuild()->GetLeaderGUID() == player->GetGUID())
+    {
+        for (vector<Player*>::iterator i = players.begin(); i != players.end(); ++i)
+            sGuildTaskMgr.Update(*i, player);
+    }
+
+    uint32 randomize = GetEventValue(bot, "randomize");
+    if (!randomize)
+    {
+        sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Randomizing bot %d", bot);
+        Randomize(player);
+        uint32 randomTime = urand(sPlayerbotAIConfig.minRandomBotRandomizeTime, sPlayerbotAIConfig.maxRandomBotRandomizeTime);
+        ScheduleRandomize(bot, randomTime);
+        return true;
+    }
+
+    uint32 logout = GetEventValue(bot, "logout");
+    if (!logout)
+    {
+        sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Logging out bot %d", bot);
+        LogoutPlayerBot(bot);
+        SetEventValue(bot, "logout", 1, sPlayerbotAIConfig.maxRandomBotInWorldTime);
+        return true;
+    }
+
+    uint32 teleport = GetEventValue(bot, "teleport");
+    if (!teleport)
+    {
+        sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Random teleporting bot %d", bot);
+        RandomTeleportForLevel(ai->GetBot());
+        SetEventValue(bot, "teleport", 1, sPlayerbotAIConfig.maxRandomBotInWorldTime);
+        return true;
+    }
+
+    return false;
+}
+
+void RandomPlayerbotMgr::RandomTeleport(Player* bot, vector<WorldLocation> &locs)
+{
+    if (bot->IsBeingTeleported())
+        return;
+
+    if (locs.empty())
+    {
+        sLog->outMessage("playerbot", LOG_LEVEL_ERROR, "Cannot teleport bot %s - no locations available", bot->GetName().c_str());
+        return;
+    }
+
+    for (int attemtps = 0; attemtps < 10; ++attemtps)
+    {
+        int index = urand(0, locs.size() - 1);
+        WorldLocation loc = locs[index];
+        float x = loc.m_positionX + urand(0, sPlayerbotAIConfig.grindDistance) - sPlayerbotAIConfig.grindDistance / 2;
+        float y = loc.m_positionY + urand(0, sPlayerbotAIConfig.grindDistance) - sPlayerbotAIConfig.grindDistance / 2;
+        float z = loc.m_positionZ;
+
+        Map* map = sMapMgr->FindMap(loc.GetMapId(), 0);
+        if (!map)
+            continue;
+
+        if (!map->IsOutdoors(x, y, z) ||
+                map->IsInWater(x, y, z))
+            continue;
+
+        uint32 areaId = map->GetAreaId(x, y, z);
+        if (!areaId)
+            continue;
+
+        AreaTableEntry const* area = sAreaTableStore.LookupEntry(areaId);
+        if (!area)
+            continue;
+
+        float ground = map->GetHeight(x, y, z + 0.5f);
+        if (ground <= INVALID_HEIGHT)
+            continue;
+
+        z = 0.05f + ground;
+        sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Random teleporting bot %s to %s %f,%f,%f (1/%u locations)",
+                bot->GetName().c_str(), area->area_name[0], x, y, z, locs.size());
+
+        bot->GetMotionMaster()->Clear();
+        bot->TeleportTo(loc.GetMapId(), x, y, z, 0);
+        return;
+    }
+
+    sLog->outMessage("playerbot", LOG_LEVEL_ERROR, "Cannot teleport bot %s - no locations available", bot->GetName().c_str());
+}
+
+void RandomPlayerbotMgr::RandomTeleportForLevel(Player* bot)
+{
+    sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Preparing location to random teleporting bot %s for level %u", bot->GetName().c_str(), bot->getLevel());
+
+    if (locsPerLevelCache[bot->getLevel()].empty()) {
+        QueryResult results = WorldDatabase.PQuery("select map, position_x, position_y, position_z "
+            "from (select map, position_x, position_y, position_z, avg(t.maxlevel), avg(t.minlevel), "
+            "%u - (avg(t.maxlevel) + avg(t.minlevel)) / 2 delta "
+            "from creature c inner join creature_template t on c.id = t.entry group by t.entry) q "
+            "where delta >= 0 and delta <= %u and map in (%s) and not exists ( "
+            "select map, position_x, position_y, position_z from "
+            "("
+            "select map, c.position_x, c.position_y, c.position_z, avg(t.maxlevel), avg(t.minlevel), "
+            "%u - (avg(t.maxlevel) + avg(t.minlevel)) / 2 delta "
+            "from creature c "
+            "inner join creature_template t on c.id = t.entry group by t.entry "
+            ") q1 "
+            "where delta > %u and q1.map = q.map "
+            "and sqrt("
+            "(q1.position_x - q.position_x)*(q1.position_x - q.position_x) +"
+            "(q1.position_y - q.position_y)*(q1.position_y - q.position_y) +"
+            "(q1.position_z - q.position_z)*(q1.position_z - q.position_z)"
+            ") < %u)",
+            bot->getLevel(),
+            sPlayerbotAIConfig.randomBotTeleLevel,
+            sPlayerbotAIConfig.randomBotMapsAsString.c_str(),
+            bot->getLevel(),
+            sPlayerbotAIConfig.randomBotTeleLevel,
+            (uint32)sPlayerbotAIConfig.sightDistance
+            );
+        if (results)
+        {
+            do
+            {
+                Field* fields = results->Fetch();
+                uint16 mapId = fields[0].GetUInt16();
+                float x = fields[1].GetFloat();
+                float y = fields[2].GetFloat();
+                float z = fields[3].GetFloat();
+                WorldLocation loc(mapId, x, y, z, 0);
+                locsPerLevelCache[bot->getLevel()].push_back(loc);
+            } while (results->NextRow());
+        }
+    }
+
+    RandomTeleport(bot, locsPerLevelCache[bot->getLevel()]);
+}
+
+void RandomPlayerbotMgr::RandomTeleport(Player* bot, uint16 mapId, float teleX, float teleY, float teleZ)
+{
+    sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Preparing location to random teleporting bot %s", bot->GetName().c_str());
+
+    vector<WorldLocation> locs;
+    QueryResult results = WorldDatabase.PQuery("select position_x, position_y, position_z from creature where map = '%u' and abs(position_x - '%f') < '%u' and abs(position_y - '%f') < '%u'",
+            mapId, teleX, sPlayerbotAIConfig.randomBotTeleportDistance / 2, teleY, sPlayerbotAIConfig.randomBotTeleportDistance / 2);
+    if (results)
+    {
+        do
+        {
+            Field* fields = results->Fetch();
+            float x = fields[0].GetFloat();
+            float y = fields[1].GetFloat();
+            float z = fields[2].GetFloat();
+            WorldLocation loc(mapId, x, y, z, 0);
+            locs.push_back(loc);
+        } while (results->NextRow());
+    }
+
+    RandomTeleport(bot, locs);
+    Refresh(bot);
+}
+
+void RandomPlayerbotMgr::Randomize(Player* bot)
+{
+    if (bot->getLevel() == 1)
+        RandomizeFirst(bot);
+    else
+        IncreaseLevel(bot);
+}
+
+void RandomPlayerbotMgr::IncreaseLevel(Player* bot)
+{
+    uint32 maxLevel = sWorld->getIntConfig(CONFIG_MAX_PLAYER_LEVEL);
+    uint32 level = min((uint32)(bot->getLevel() + 1), maxLevel);
+    PlayerbotFactory factory(bot, level);
+    if (bot->GetGuildId())
+        factory.Refresh();
+    else
+        factory.Randomize();
+    RandomTeleportForLevel(bot);
+}
+
+void RandomPlayerbotMgr::RandomizeFirst(Player* bot)
+{
+    uint32 maxLevel = sPlayerbotAIConfig.randomBotMaxLevel;
+    if (maxLevel > sWorld->getIntConfig(CONFIG_MAX_PLAYER_LEVEL))
+        maxLevel = sWorld->getIntConfig(CONFIG_MAX_PLAYER_LEVEL);
+
+    for (int attempt = 0; attempt < 10; ++attempt)
+    {
+        int index = urand(0, sPlayerbotAIConfig.randomBotMaps.size() - 1);
+        uint16 mapId = sPlayerbotAIConfig.randomBotMaps[index];
+
+        vector<GameTele const*> locs;
+        GameTeleContainer const & teleMap = sObjectMgr->GetGameTeleMap();
+        for(GameTeleContainer::const_iterator itr = teleMap.begin(); itr != teleMap.end(); ++itr)
+        {
+            GameTele const* tele = &itr->second;
+            if (tele->mapId == mapId)
+                locs.push_back(tele);
+        }
+
+        index = urand(0, locs.size() - 1);
+        GameTele const* tele = locs[index];
+        uint32 level = GetZoneLevel(tele->mapId, tele->position_x, tele->position_y, tele->position_z);
+        if (level > maxLevel + 5)
+            continue;
+
+        level = min(level, maxLevel);
+        if (!level) level = 1;
+
+        if (urand(0, 100) < 100 * sPlayerbotAIConfig.randomBotMaxLevelChance)
+            level = maxLevel;
+
+        if (level < sPlayerbotAIConfig.randomBotMinLevel)
+            continue;
+
+        PlayerbotFactory factory(bot, level);
+        factory.CleanRandomize();
+        RandomTeleport(bot, tele->mapId, tele->position_x, tele->position_y, tele->position_z);
+        break;
+    }
+}
+
+uint32 RandomPlayerbotMgr::GetZoneLevel(uint16 mapId, float teleX, float teleY, float teleZ)
+{
+    uint32 maxLevel = sWorld->getIntConfig(CONFIG_MAX_PLAYER_LEVEL);
+
+	uint32 level;
+    QueryResult results = WorldDatabase.PQuery("select avg(t.minlevel) minlevel, avg(t.maxlevel) maxlevel from creature c "
+            "inner join creature_template t on c.id = t.entry "
+            "where map = '%u' and minlevel > 1 and abs(position_x - '%f') < '%u' and abs(position_y - '%f') < '%u'",
+            mapId, teleX, sPlayerbotAIConfig.randomBotTeleportDistance / 2, teleY, sPlayerbotAIConfig.randomBotTeleportDistance / 2);
+
+    if (results)
+    {
+        Field* fields = results->Fetch();
+        uint8 minLevel = fields[0].GetUInt8();
+        uint8 maxLevel = fields[1].GetUInt8();
+        level = urand(minLevel, maxLevel);
+        if (level > maxLevel)
+            level = maxLevel;
+    }
+    else
+    {
+        level = urand(1, maxLevel);
+    }
+
+    return level;
+}
+
+void RandomPlayerbotMgr::Refresh(Player* bot)
+{
+    sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Refreshing bot %s", bot->GetName().c_str());
+    if (bot->isDead())
+    {
+        bot->ResurrectPlayer(1.0f);
+        bot->SpawnCorpseBones();
+        bot->SaveToDB();
+        bot->GetPlayerbotAI()->ResetStrategies();
+    }
+
+    bot->GetPlayerbotAI()->Reset();
+
+    HostileReference *ref = bot->getHostileRefManager().getFirst();
+    while( ref )
+    {
+        ThreatManager *threatManager = ref->GetSource();
+        Unit *unit = threatManager->GetOwner();
+        float threat = ref->getThreat();
+
+        unit->RemoveAllAttackers();
+        unit->ClearInCombat();
+
+        ref = ref->next();
+    }
+
+    bot->RemoveAllAttackers();
+    bot->ClearInCombat();
+
+    bot->DurabilityRepairAll(false, 1.0f, false);
+    bot->SetFullHealth();
+    bot->SetPvP(true);
+
+    if (bot->GetMaxPower(POWER_MANA) > 0)
+        bot->SetPower(POWER_MANA, bot->GetMaxPower(POWER_MANA));
+
+    if (bot->GetMaxPower(POWER_ENERGY) > 0)
+        bot->SetPower(POWER_ENERGY, bot->GetMaxPower(POWER_ENERGY));
+}
+
+
+bool RandomPlayerbotMgr::IsRandomBot(Player* bot)
+{
+    return IsRandomBot(bot->GetGUID());
+}
+
+bool RandomPlayerbotMgr::IsRandomBot(uint32 bot)
+{
+    return GetEventValue(bot, "add");
+}
+
+list<uint32> RandomPlayerbotMgr::GetBots()
+{
+    list<uint32> bots;
+
+    QueryResult results = CharacterDatabase.Query(
+            "select bot from ai_playerbot_random_bots where owner = 0 and event = 'add'");
+
+    if (results)
+    {
+        do
+        {
+            Field* fields = results->Fetch();
+            uint32 bot = fields[0].GetUInt32();
+            bots.push_back(bot);
+        } while (results->NextRow());
+    }
+
+    return bots;
+}
+
+vector<uint32> RandomPlayerbotMgr::GetFreeBots(bool alliance)
+{
+    set<uint32> bots;
+
+    QueryResult results = CharacterDatabase.PQuery(
+            "select `bot` from ai_playerbot_random_bots where event = 'add'");
+
+    if (results)
+    {
+        do
+        {
+            Field* fields = results->Fetch();
+            uint32 bot = fields[0].GetUInt32();
+            bots.insert(bot);
+        } while (results->NextRow());
+    }
+
+    vector<uint32> guids;
+    for (list<uint32>::iterator i = sPlayerbotAIConfig.randomBotAccounts.begin(); i != sPlayerbotAIConfig.randomBotAccounts.end(); i++)
+    {
+        uint32 accountId = *i;
+        if (!sAccountMgr->GetCharactersCount(accountId))
+            continue;
+
+        QueryResult result = CharacterDatabase.PQuery("SELECT guid, race FROM characters WHERE account = '%u'", accountId);
+        if (!result)
+            continue;
+
+        do
+        {
+            Field* fields = result->Fetch();
+            uint32 guid = fields[0].GetUInt32();
+            uint8 race = fields[1].GetUInt8();
+            if (bots.find(guid) == bots.end() &&
+                    ((alliance && IsAlliance(race)) || ((!alliance && !IsAlliance(race))
+            )))
+                guids.push_back(guid);
+        } while (result->NextRow());
+    }
+
+
+    return guids;
+}
+
+uint32 RandomPlayerbotMgr::GetEventValue(uint32 bot, string event)
+{
+    uint32 value = 0;
+
+    QueryResult results = CharacterDatabase.PQuery(
+            "select `value`, `time`, validIn from ai_playerbot_random_bots where owner = 0 and bot = '%u' and event = '%s'",
+            bot, event.c_str());
+
+    if (results)
+    {
+        Field* fields = results->Fetch();
+        value = fields[0].GetUInt32();
+        uint32 lastChangeTime = fields[1].GetUInt32();
+        uint32 validIn = fields[2].GetUInt32();
+        if ((time(0) - lastChangeTime) >= validIn)
+            value = 0;
+    }
+
+    return value;
+}
+
+uint32 RandomPlayerbotMgr::SetEventValue(uint32 bot, string event, uint32 value, uint32 validIn)
+{
+    CharacterDatabase.PExecute("delete from ai_playerbot_random_bots where owner = 0 and bot = '%u' and event = '%s'",
+            bot, event.c_str());
+    if (value)
+    {
+        CharacterDatabase.PExecute(
+                "insert into ai_playerbot_random_bots (owner, bot, `time`, validIn, event, `value`) values ('%u', '%u', '%u', '%u', '%s', '%u')",
+                0, bot, (uint32)time(0), validIn, event.c_str(), value);
+    }
+
+    return value;
+}
+
+bool RandomPlayerbotMgr::HandlePlayerbotConsoleCommand(ChatHandler* handler, char const* args)
+{
+    if (!sPlayerbotAIConfig.enabled)
+    {
+        sLog->outMessage("playerbot", LOG_LEVEL_ERROR, "Playerbot system is currently disabled!");
+        return false;
+    }
+
+    if (!args || !*args)
+    {
+        sLog->outMessage("playerbot", LOG_LEVEL_ERROR, "Usage: rndbot stats/update/reset/init/refresh/add/remove");
+        return false;
+    }
+
+    string cmd = args;
+
+    if (cmd == "reset")
+    {
+        CharacterDatabase.PExecute("delete from ai_playerbot_random_bots");
+        sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Random bots were reset for all players");
+        return true;
+    }
+    else if (cmd == "stats")
+    {
+        sRandomPlayerbotMgr.PrintStats();
+        return true;
+    }
+    else if (cmd == "update")
+    {
+        sRandomPlayerbotMgr.UpdateAIInternal(0);
+        return true;
+    }
+    else if (cmd == "init" || cmd == "refresh" || cmd == "teleport")
+    {
+		sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Randomizing bots for %d accounts", sPlayerbotAIConfig.randomBotAccounts.size());
+        list<uint32> botIds;
+        for (list<uint32>::iterator i = sPlayerbotAIConfig.randomBotAccounts.begin(); i != sPlayerbotAIConfig.randomBotAccounts.end(); ++i)
+        {
+            uint32 account = *i;
+            if (QueryResult results = CharacterDatabase.PQuery("SELECT guid FROM characters where account = '%u'", account))
+            {
+                do
+                {
+                    Field* fields = results->Fetch();
+
+                    uint32 botId = fields[0].GetUInt32();
+                    ObjectGuid guid = ObjectGuid(HighGuid::Player, botId);
+                    Player* bot = sObjectMgr->GetPlayerByLowGUID(guid);
+                    if (!bot)
+                        continue;
+
+                    botIds.push_back(botId);
+                } while (results->NextRow());
+            }
+        }
+
+        int processed = 0;
+        for (list<uint32>::iterator i = botIds.begin(); i != botIds.end(); ++i)
+        {
+            ObjectGuid guid = ObjectGuid(HighGuid::Player, *i);
+            Player* bot = sObjectMgr->GetPlayerByLowGUID(guid);
+            if (!bot)
+                continue;
+
+            sLog->outMessage("playerbot", LOG_LEVEL_INFO, "[%u/%u] Processing command '%s' for bot '%s'",
+                    processed++, botIds.size(), cmd.c_str(), bot->GetName().c_str());
+
+            if (cmd == "init")
+            {
+                sRandomPlayerbotMgr.RandomizeFirst(bot);
+            }
+            else if (cmd == "teleport")
+            {
+                sRandomPlayerbotMgr.RandomTeleportForLevel(bot);
+            }
+            else
+            {
+                bot->SetLevel(bot->getLevel() - 1);
+                sRandomPlayerbotMgr.IncreaseLevel(bot);
+            }
+            uint32 randomTime = urand(sPlayerbotAIConfig.minRandomBotRandomizeTime, sPlayerbotAIConfig.maxRandomBotRandomizeTime);
+            CharacterDatabase.PExecute("update ai_playerbot_random_bots set validIn = '%u' where event = 'randomize' and bot = '%u'",
+                    randomTime, bot->GetGUID().GetCounter());
+            CharacterDatabase.PExecute("update ai_playerbot_random_bots set validIn = '%u' where event = 'logout' and bot = '%u'",
+                    sPlayerbotAIConfig.maxRandomBotInWorldTime, bot->GetGUID().GetCounter());
+        }
+        return true;
+    }
+    else
+    {
+        list<string> messages = sRandomPlayerbotMgr.HandlePlayerbotCommand(args, NULL);
+        for (list<string>::iterator i = messages.begin(); i != messages.end(); ++i)
+        {
+            sLog->outMessage("playerbot", LOG_LEVEL_INFO, i->c_str());
+        }
+        return true;
+    }
+
+    return false;
+}
+
+void RandomPlayerbotMgr::HandleCommand(uint32 type, const string& text, Player& fromPlayer)
+{
+    for (PlayerBotMap::const_iterator it = GetPlayerBotsBegin(); it != GetPlayerBotsEnd(); ++it)
+    {
+        Player* const bot = it->second;
+        bot->GetPlayerbotAI()->HandleCommand(type, text, fromPlayer);
+    }
+}
+
+void RandomPlayerbotMgr::OnPlayerLogout(Player* player)
+{
+    for (PlayerBotMap::const_iterator it = GetPlayerBotsBegin(); it != GetPlayerBotsEnd(); ++it)
+    {
+        Player* const bot = it->second;
+        PlayerbotAI* ai = bot->GetPlayerbotAI();
+        if (player == ai->GetMaster())
+        {
+            ai->SetMaster(NULL);
+            ai->ResetStrategies();
+        }
+    }
+
+    if (!player->GetPlayerbotAI())
+    {
+        vector<Player*>::iterator i = find(players.begin(), players.end(), player);
+        if (i != players.end())
+            players.erase(i);
+    }
+}
+
+void RandomPlayerbotMgr::OnPlayerLogin(Player* player)
+{
+    for (PlayerBotMap::const_iterator it = GetPlayerBotsBegin(); it != GetPlayerBotsEnd(); ++it)
+    {
+        Player* const bot = it->second;
+        if (player == bot || player->GetPlayerbotAI())
+            continue;
+
+        Group* group = bot->GetGroup();
+        if (!group)
+            continue;
+
+        for (GroupReference *gref = group->GetFirstMember(); gref; gref = gref->next())
+        {
+            Player* member = gref->GetSource();
+            PlayerbotAI* ai = bot->GetPlayerbotAI();
+            if (member == player && (!ai->GetMaster() || ai->GetMaster()->GetPlayerbotAI()))
+            {
+                ai->SetMaster(player);
+                ai->ResetStrategies();
+                ai->TellMaster("Hello");
+                break;
+            }
+        }
+    }
+
+    if (player->GetPlayerbotAI())
+        return;
+
+    players.push_back(player);
+}
+
+Player* RandomPlayerbotMgr::GetRandomPlayer()
+{
+    if (players.empty())
+        return NULL;
+
+    uint32 index = urand(0, players.size() - 1);
+    return players[index];
+}
+
+void RandomPlayerbotMgr::PrintStats()
+{
+    sLog->outMessage("playerbot", LOG_LEVEL_INFO, "%d Random Bots online", playerBots.size());
+
+    map<uint32, int> alliance, horde;
+    for (uint32 i = 0; i < 10; ++i)
+    {
+        alliance[i] = 0;
+        horde[i] = 0;
+    }
+
+    map<uint8, int> perRace, perClass;
+    for (uint8 race = RACE_HUMAN; race < MAX_RACES; ++race)
+    {
+        perRace[race] = 0;
+    }
+    for (uint8 cls = CLASS_WARRIOR; cls < MAX_CLASSES; ++cls)
+    {
+        perClass[cls] = 0;
+    }
+
+    int dps = 0, heal = 0, tank = 0;
+    for (PlayerBotMap::iterator i = playerBots.begin(); i != playerBots.end(); ++i)
+    {
+        Player* bot = i->second;
+        if (IsAlliance(bot->getRace()))
+            alliance[bot->getLevel() / 10]++;
+        else
+            horde[bot->getLevel() / 10]++;
+
+        perRace[bot->getRace()]++;
+        perClass[bot->getClass()]++;
+
+        int spec = AiFactory::GetPlayerSpecTab(bot);
+        switch (bot->getClass())
+        {
+        case CLASS_DRUID:
+            if (spec == 2)
+                heal++;
+            else
+                dps++;
+            break;
+        case CLASS_PALADIN:
+            if (spec == 1)
+                tank++;
+            else if (spec == 0)
+                heal++;
+            else
+                dps++;
+            break;
+        case CLASS_PRIEST:
+            if (spec != 2)
+                heal++;
+            else
+                dps++;
+            break;
+        case CLASS_SHAMAN:
+            if (spec == 2)
+                heal++;
+            else
+                dps++;
+            break;
+        case CLASS_WARRIOR:
+            if (spec == 2)
+                tank++;
+            else
+                dps++;
+            break;
+        default:
+            dps++;
+            break;
+        }
+    }
+
+    sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Per level:");
+    uint32 maxLevel = sWorld->getIntConfig(CONFIG_MAX_PLAYER_LEVEL);
+    for (uint32 i = 0; i < 10; ++i)
+    {
+        if (!alliance[i] && !horde[i])
+            continue;
+
+        uint32 from = i*10;
+        uint32 to = min(from + 9, maxLevel);
+        if (!from) from = 1;
+        sLog->outMessage("playerbot", LOG_LEVEL_INFO, "    %d..%d: %d alliance, %d horde", from, to, alliance[i], horde[i]);
+    }
+    sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Per race:");
+    for (uint8 race = RACE_HUMAN; race < MAX_RACES; ++race)
+    {
+        if (perRace[race])
+            sLog->outMessage("playerbot", LOG_LEVEL_INFO, "    %s: %d", ChatHelper::formatRace(race).c_str(), perRace[race]);
+    }
+    sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Per class:");
+    for (uint8 cls = CLASS_WARRIOR; cls < MAX_CLASSES; ++cls)
+    {
+        if (perClass[cls])
+            sLog->outMessage("playerbot", LOG_LEVEL_INFO, "    %s: %d", ChatHelper::formatClass(cls).c_str(), perClass[cls]);
+    }
+    sLog->outMessage("playerbot", LOG_LEVEL_INFO, "Per role:");
+    sLog->outMessage("playerbot", LOG_LEVEL_INFO, "    tank: %d", tank);
+    sLog->outMessage("playerbot", LOG_LEVEL_INFO, "    heal: %d", heal);
+    sLog->outMessage("playerbot", LOG_LEVEL_INFO, "    dps: %d", dps);
+}
+
+double RandomPlayerbotMgr::GetBuyMultiplier(Player* bot)
+{
+    uint32 id = bot->GetGUID();
+    uint32 value = GetEventValue(id, "buymultiplier");
+    if (!value)
+    {
+        value = urand(1, 120);
+        uint32 validIn = urand(sPlayerbotAIConfig.minRandomBotsPriceChangeInterval, sPlayerbotAIConfig.maxRandomBotsPriceChangeInterval);
+        SetEventValue(id, "buymultiplier", value, validIn);
+    }
+
+    return (double)value / 100.0;
+}
+
+double RandomPlayerbotMgr::GetSellMultiplier(Player* bot)
+{
+    uint32 id = bot->GetGUID();
+    uint32 value = GetEventValue(id, "sellmultiplier");
+    if (!value)
+    {
+        value = urand(80, 250);
+        uint32 validIn = urand(sPlayerbotAIConfig.minRandomBotsPriceChangeInterval, sPlayerbotAIConfig.maxRandomBotsPriceChangeInterval);
+        SetEventValue(id, "sellmultiplier", value, validIn);
+    }
+
+    return (double)value / 100.0;
+}
+
+uint32 RandomPlayerbotMgr::GetLootAmount(Player* bot)
+{
+    uint32 id = bot->GetGUID();
+    return GetEventValue(id, "lootamount");
+}
+
+void RandomPlayerbotMgr::SetLootAmount(Player* bot, uint32 value)
+{
+    uint32 id = bot->GetGUID();
+    SetEventValue(id, "lootamount", value, 24 * 3600);
+}
+
+uint32 RandomPlayerbotMgr::GetTradeDiscount(Player* bot)
+{
+    Group* group = bot->GetGroup();
+    return GetLootAmount(bot) / (group ? group->GetMembersCount() : 10);
+}
+
+string RandomPlayerbotMgr::HandleRemoteCommand(string request)
+{
+    string::iterator pos = find(request.begin(), request.end(), ',');
+    if (pos == request.end())
+    {
+        ostringstream out; out << "invalid request: " << request;
+        return out.str();
+    }
+
+    string command = string(request.begin(), pos);
+    uint64 guid = atoi(string(pos + 1, request.end()).c_str());
+    Player* bot = GetPlayerBot(guid);
+    if (!bot)
+        return "invalid guid";
+
+    PlayerbotAI *ai = bot->GetPlayerbotAI();
+    if (!ai)
+        return "invalid guid";
+
+    return ai->HandleRemoteCommand(command);
+}
diff --git a/src/plugins/playerbot/RandomPlayerbotMgr.h b/src/plugins/playerbot/RandomPlayerbotMgr.h
new file mode 100644
index 0000000..0d0ada4
--- /dev/null
+++ b/src/plugins/playerbot/RandomPlayerbotMgr.h
@@ -0,0 +1,74 @@
+#ifndef _RandomPlayerbotMgr_H
+#define _RandomPlayerbotMgr_H
+
+#include "Common.h"
+#include "PlayerbotAIBase.h"
+#include "PlayerbotMgr.h"
+
+class WorldPacket;
+class Player;
+class Unit;
+class Object;
+class Item;
+
+using namespace std;
+
+class RandomPlayerbotMgr : public PlayerbotHolder
+{
+    public:
+        RandomPlayerbotMgr();
+        virtual ~RandomPlayerbotMgr();
+        static RandomPlayerbotMgr& instance()
+        {
+            static RandomPlayerbotMgr instance;
+            return instance;
+        }
+
+        virtual void UpdateAIInternal(uint32 elapsed);
+
+	public:
+        static bool HandlePlayerbotConsoleCommand(ChatHandler* handler, char const* args);
+        bool IsRandomBot(Player* bot);
+        bool IsRandomBot(uint32 bot);
+        void Randomize(Player* bot);
+        void RandomizeFirst(Player* bot);
+        void IncreaseLevel(Player* bot);
+        void ScheduleTeleport(uint32 bot);
+        void HandleCommand(uint32 type, const string& text, Player& fromPlayer);
+        string HandleRemoteCommand(string request);
+        void OnPlayerLogout(Player* player);
+        void OnPlayerLogin(Player* player);
+        Player* GetRandomPlayer();
+        void PrintStats();
+        double GetBuyMultiplier(Player* bot);
+        double GetSellMultiplier(Player* bot);
+        uint32 GetLootAmount(Player* bot);
+        void SetLootAmount(Player* bot, uint32 value);
+        uint32 GetTradeDiscount(Player* bot);
+        void Refresh(Player* bot);
+        void RandomTeleportForLevel(Player* bot);
+
+	protected:
+	    virtual void OnBotLoginInternal(Player * const bot) {}
+
+    private:
+        uint32 GetEventValue(uint32 bot, string event);
+        uint32 SetEventValue(uint32 bot, string event, uint32 value, uint32 validIn);
+        list<uint32> GetBots();
+        vector<uint32> GetFreeBots(bool alliance);
+        uint32 AddRandomBot(bool alliance);
+        bool ProcessBot(uint32 bot);
+        void ScheduleRandomize(uint32 bot, uint32 time);
+        void RandomTeleport(Player* bot, uint16 mapId, float teleX, float teleY, float teleZ);
+        void RandomTeleport(Player* bot, vector<WorldLocation> &locs);
+        uint32 GetZoneLevel(uint16 mapId, float teleX, float teleY, float teleZ);
+
+    private:
+        vector<Player*> players;
+        int processTicks;
+        map<uint8, vector<WorldLocation> > locsPerLevelCache;
+};
+
+#define sRandomPlayerbotMgr RandomPlayerbotMgr::instance()
+
+#endif
diff --git a/src/plugins/playerbot/aiplayerbot.conf.dist.in b/src/plugins/playerbot/aiplayerbot.conf.dist.in
new file mode 100644
index 0000000..54a2ad6
--- /dev/null
+++ b/src/plugins/playerbot/aiplayerbot.conf.dist.in
@@ -0,0 +1,183 @@
+##########################################
+# MANGOS Ai Playerbot Configuration file #
+##########################################
+
+[AiPlayerbotConf]
+ConfVersion=2010102201
+
+# Enable or disable AI Playerbot
+AiPlayerbot.Enabled = 1
+
+# Warrior
+AiPlayerbot.RandomClassSpecProbability.1.0 = 20
+AiPlayerbot.RandomClassSpecProbability.1.1 = 30
+AiPlayerbot.RandomClassSpecProbability.1.2 = 50
+# Paladin
+AiPlayerbot.RandomClassSpecProbability.2.0 = 20
+AiPlayerbot.RandomClassSpecProbability.2.1 = 50
+AiPlayerbot.RandomClassSpecProbability.2.2 = 30
+# Hunter
+AiPlayerbot.RandomClassSpecProbability.3.0 = 25
+AiPlayerbot.RandomClassSpecProbability.3.1 = 50
+AiPlayerbot.RandomClassSpecProbability.3.2 = 25
+# Rogue
+AiPlayerbot.RandomClassSpecProbability.4.0 = 40
+AiPlayerbot.RandomClassSpecProbability.4.1 = 50
+AiPlayerbot.RandomClassSpecProbability.4.2 = 10
+# Priest
+AiPlayerbot.RandomClassSpecProbability.5.0 = 40
+AiPlayerbot.RandomClassSpecProbability.5.1 = 40
+AiPlayerbot.RandomClassSpecProbability.5.2 = 20
+# Shaman
+AiPlayerbot.RandomClassSpecProbability.7.0 = 10
+AiPlayerbot.RandomClassSpecProbability.7.1 = 45
+AiPlayerbot.RandomClassSpecProbability.7.2 = 45
+# Mage
+AiPlayerbot.RandomClassSpecProbability.8.0 = 20
+AiPlayerbot.RandomClassSpecProbability.8.1 = 10
+AiPlayerbot.RandomClassSpecProbability.8.2 = 70
+# Warlock
+AiPlayerbot.RandomClassSpecProbability.9.0 = 33
+AiPlayerbot.RandomClassSpecProbability.9.1 = 33
+AiPlayerbot.RandomClassSpecProbability.9.2 = 33
+# Druid
+AiPlayerbot.RandomClassSpecProbability.11.0 = 10
+AiPlayerbot.RandomClassSpecProbability.11.1 = 45
+AiPlayerbot.RandomClassSpecProbability.11.2 = 45
+
+#
+# All other parameters are optional but can be changed by uncommenting them here
+#
+
+# Prefix for bot chat commands (e.g. follow, stay)
+AiPlayerbot.CommandPrefix =
+
+# Max AI iterations per tick
+#AiPlayerbot.IterationsPerTick = 10
+
+# Allow/deny bots from your guild
+#AiPlayerbot.AllowGuildBots = 1
+
+# Delay between two short-time spells cast
+#AiPlayerbot.GlobalCooldown = 500
+
+# Max wait time when moving
+#AiPlayerbot.MaxWaitForMove = 5000
+
+# Delay between two bot actions
+#AiPlayerbot.ReactDelay = 100
+
+# Distances
+#AiPlayerbot.SightDistance = 75.0
+#AiPlayerbot.SpellDistance = 30.0
+#AiPlayerbot.ReactDistance = 150.0
+#AiPlayerbot.GrindDistance = 100.0
+#AiPlayerbot.LootDistance = 20.0
+#AiPlayerbot.FleeDistance = 20.0
+#AiPlayerbot.TooCloseDistance = 7.0
+#AiPlayerbot.MeleeDistance = 1.0
+#AiPlayerbot.FollowDistance = 1.5
+#AiPlayerbot.WhisperDistance = 6000.0
+#AiPlayerbot.ContactDistance = 0.5
+
+# Bot can flee for enemy
+#AiPlayerbot.FleeingEnabled = 1
+
+# Health/Mana levels
+#AiPlayerbot.CriticalHealth = 25
+#AiPlayerbot.LowHealth = 45
+#AiPlayerbot.MediumHealth = 65
+#AiPlayerbot.AlmostFullHealth = 85
+#AiPlayerbot.LowMana = 15
+#AiPlayerbot.MediumMana = 40
+
+# Enable random bot system
+#AiPlayerbot.RandomBotAutologin = 1
+
+# Random bot default strategies (applied after defaults)
+#AiPlayerbot.RandomBotCombatStrategies = +dps,+attack weak
+#AiPlayerbot.RandomBotNonCombatStrategies = +grind,+move random,+loot
+
+# Create random bot characters automatically
+#AiPlayerbot.RandomBotAutoCreate = 1
+
+# Random bot count
+#AiPlayerbot.MinRandomBots = 50
+#AiPlayerbot.MaxRandomBots = 200
+#AiPlayerbot.RandomBotMinLevel = 1
+#AiPlayerbot.RandomBotMaxLevel = 255 (ignored if more than MaxPlayerLevel mangosd.conf value)
+
+# Accounts to create for random bots
+#AiPlayerbot.RandomBotAccountPrefix = rndbot
+#AiPlayerbot.RandomBotAccountCount = 50
+
+# Delete all random bot accounts
+#AiPlayerbot.DeleteRandomBotAccounts = 0
+
+# Random bot guild count
+#AiPlayerbot.RandomBotGuildCount = 50
+
+# Guild Task system
+#AiPlayerbot.EnableGuildTasks = 1
+
+# How often tasks are changed
+#AiPlayerbot.MinGuildTaskChangeTime = 172800
+#AiPlayerbot.MaxGuildTaskChangeTime = 432000
+# Mail spam interval
+#AiPlayerbot.MinGuildTaskAdvertisementTime = 300
+#AiPlayerbot.MaxGuildTaskAdvertisementTime = 28800
+# Delay before reward is sent
+#AiPlayerbot.MinGuildTaskRewardTime = 300
+#AiPlayerbot.MaxGuildTaskRewardTime = 3600
+
+# Delete all random bot guilds
+#AiPlayerbot.DeleteRandomBotGuilds = 0
+
+# Maps to teleport random bots
+#AiPlayerbot.RandomBotMaps = 0,1,530,571
+
+# Change random bot has lower gear
+#AiPlayerbot.RandomGearLoweringChance = 0.15
+
+# Chance random bot has max level on first randomize
+#AiPlayerbot.RandomBotMaxLevelChance = 0.4
+
+# Quest items to leave (do not destroy)
+#AiPlayerbot.RandomBotQuestItems = 6948,5175,5176,5177,5178
+
+# Spells every random bot will learn on randomize (54197 - cold weather flying)
+#AiPlayerbot.RandomBotSpellIds = 54197
+
+# Enable LFG for random bots
+#AiPlayerbot.RandomBotJoinLfg = 1
+
+# Level diff between random bots and nearby creatures for random teleports
+AiPlayerbot.RandomBotTeleLevel = 3
+
+# Intervals
+#AiPlayerbot.RandomBotUpdateInterval = 60
+#AiPlayerbot.RandomBotCountChangeMinInterval = 86400
+#AiPlayerbot.RandomBotCountChangeMaxInterval = 259200
+#AiPlayerbot.MinRandomBotInWorldTime = 7200
+#AiPlayerbot.MaxRandomBotInWorldTime = 1209600
+#AiPlayerbot.MinRandomBotRandomizeTime = 7200
+#AiPlayerbot.MaxRandomRandomizeTime = 1209600
+#AiPlayerbot.MinRandomBotsPerInterval = 50
+#AiPlayerbot.MaxRandomBotsPerInterval = 100
+#AiPlayerbot.MinRandomBotsPriceChangeInterval = 7200
+#AiPlayerbot.MaxRandomBotsPriceChangeInterval = 172800
+
+# Log on all random bots on start
+#AiPlayerbot.RandomBotLoginAtStartup = 1
+
+# How far random bots are teleported after death
+#AiPlayerbot.RandomBotTeleportDistance = 1000
+
+# Debug switches
+#AiPlayerbot.SpellDump = 0
+#AiPlayerbot.LogInGroupOnly = 1
+#AiPlayerbot.LogValuesPerTick = 0
+#AiPlayerbot.RandomChangeMultiplier = 1
+
+# Command server port, 0 - disabled
+#AiPlayerbot.CommandServerPort = 8888
diff --git a/src/plugins/playerbot/playerbot.h b/src/plugins/playerbot/playerbot.h
new file mode 100644
index 0000000..3de8ebc
--- /dev/null
+++ b/src/plugins/playerbot/playerbot.h
@@ -0,0 +1,31 @@
+#pragma once
+
+std::vector<std::string> split(const std::string &s, char delim);
+#ifndef WIN32
+int strcmpi(std::string s1, std::string s2);
+#endif
+
+#include "../Spell.h"
+#include "../../shared/Packets/WorldPacket.h"
+#include "../Loot/LootMgr.h"
+#include "../Entities/Creature/GossipDef.h"
+#include "../Chat/Chat.h"
+#include "../../common/Common.h"
+#include "../World/World.h"
+#include "../Spells/SpellMgr.h"
+#include "../Globals/ObjectMgr.h"
+#include "../Entities/Unit/Unit.h"
+#include "../Miscellaneous/SharedDefines.h"
+#include "../Movement/MotionMaster.h"
+#include "../Spells/Auras/SpellAuras.h"
+#include "../Guilds/Guild.h"
+#include "../Groups/Group.h"
+#include "../../game/Accounts/AccountMgr.h"
+#include "../../game/Globals/ObjectMgr.h"
+
+#include "playerbotDefs.h"
+#include "PlayerbotAIAware.h"
+#include "PlayerbotMgr.h"
+#include "RandomPlayerbotMgr.h"
+#include "ChatHelper.h"
+#include "PlayerbotAI.h"
diff --git a/src/plugins/playerbot/playerbotDefs.h b/src/plugins/playerbot/playerbotDefs.h
new file mode 100644
index 0000000..3f59c93
--- /dev/null
+++ b/src/plugins/playerbot/playerbotDefs.h
@@ -0,0 +1,2 @@
+#pragma once
+
diff --git a/src/plugins/playerbot/strategy/Action.cpp b/src/plugins/playerbot/strategy/Action.cpp
new file mode 100644
index 0000000..75e3301
--- /dev/null
+++ b/src/plugins/playerbot/strategy/Action.cpp
@@ -0,0 +1,93 @@
+#include "../../pchdef.h"
+#include "../playerbot.h"
+#include "AiObjectContext.h"
+#include "Action.h"
+
+using namespace ai;
+
+int NextAction::size(NextAction** actions)
+{
+    if (!actions)
+        return 0;
+
+    int size;
+    for (size=0; size<10 && actions[size]; ) 
+        size++;
+    return size;
+}
+
+NextAction** NextAction::clone(NextAction** actions)
+{
+    if (!actions)
+        return NULL;
+
+    int size = NextAction::size(actions);
+
+    NextAction** res = new NextAction*[size + 1];
+    for (int i=0; i<size; i++)
+        res[i] = new NextAction(*actions[i]);
+    res[size] = NULL;
+    return res;
+}
+
+NextAction** NextAction::merge(NextAction** left, NextAction** right)
+{
+    int leftSize = NextAction::size(left);
+    int rightSize = NextAction::size(right);
+
+    NextAction** res = new NextAction*[leftSize + rightSize + 1];
+    for (int i=0; i<leftSize; i++)
+        res[i] = new NextAction(*left[i]);
+    for (int i=0; i<rightSize; i++)
+        res[leftSize + i] = new NextAction(*right[i]);
+    res[leftSize + rightSize] = NULL;
+
+    NextAction::destroy(left);
+    NextAction::destroy(right);
+
+    return res;
+}
+
+NextAction** NextAction::array(uint8 nil, ...)
+{
+    va_list vl;
+    va_start(vl, nil);
+    
+    int size = 0;
+    NextAction* cur = NULL;
+    do 
+    {
+        cur = va_arg(vl, NextAction*);
+        size++;
+    }
+    while (cur);
+
+    va_end(vl);
+
+    NextAction** res = new NextAction*[size];
+    va_start(vl, nil);
+    for (int i=0; i<size; i++)
+        res[i] = va_arg(vl, NextAction*);
+    va_end(vl);
+
+    return res;
+}
+
+void NextAction::destroy(NextAction** actions)
+{
+    if (!actions)
+        return;
+
+    for (int i=0; i<10 && actions[i]; i++)
+        delete actions[i];
+}
+
+Value<Unit*>* Action::GetTargetValue()
+{
+    return context->GetValue<Unit*>(GetTargetName());
+}
+
+Unit* Action::GetTarget()
+{
+    return GetTargetValue()->Get();
+}
diff --git a/src/plugins/playerbot/strategy/Action.h b/src/plugins/playerbot/strategy/Action.h
new file mode 100644
index 0000000..b8d2a1c
--- /dev/null
+++ b/src/plugins/playerbot/strategy/Action.h
@@ -0,0 +1,138 @@
+#pragma once
+#include "Event.h"
+#include "Value.h"
+#include "AiObject.h"
+
+namespace ai
+{
+    class NextAction
+    {
+    public:
+        NextAction(string name, float relevance = 0.0f)
+        {
+            this->name = name;
+            this->relevance = relevance;
+        }
+        NextAction(const NextAction& o)
+        {
+            this->name = o.name;
+            this->relevance = o.relevance;
+        }
+
+    public:
+        string getName() { return name; }
+        float getRelevance() {return relevance;}
+
+    public:
+        static int size(NextAction** actions);
+        static NextAction** clone(NextAction** actions);
+        static NextAction** merge(NextAction** what, NextAction** with);
+        static NextAction** array(uint8 nil,...);
+        static void destroy(NextAction** actions);
+
+    private:
+        float relevance;
+        std::string name;
+    };
+
+    //---------------------------------------------------------------------------------------------------------------------
+
+    class ActionBasket;
+
+    enum ActionThreatType
+    {
+        ACTION_THREAT_NONE = 0,
+        ACTION_THREAT_SINGLE= 1,
+        ACTION_THREAT_AOE = 2
+    };
+
+    class Action : public AiNamedObject
+	{
+	public:
+        Action(PlayerbotAI* ai, string name = "action") : verbose(false), AiNamedObject(ai, name) { }
+        virtual ~Action(void) {}
+
+    public:
+        virtual bool Execute(Event event) { return true; }
+        virtual bool isPossible() { return true; }
+        virtual bool isUseful() { return true; }
+        virtual NextAction** getPrerequisites() { return NULL; }
+        virtual NextAction** getAlternatives() { return NULL; }
+        virtual NextAction** getContinuers() { return NULL; }
+        virtual ActionThreatType getThreatType() { return ACTION_THREAT_NONE; }
+        void Update() {}
+        void Reset() {}
+        virtual Unit* GetTarget();
+        virtual Value<Unit*>* GetTargetValue();
+        virtual string GetTargetName() { return "self target"; }
+        void MakeVerbose() { verbose = true; }
+
+    protected:
+        bool verbose;
+	};
+
+    class ActionNode
+    {
+    public:
+        ActionNode(string name, NextAction** prerequisites = NULL, NextAction** alternatives = NULL, NextAction** continuers = NULL)
+        {
+            this->action = NULL;
+            this->name = name;
+            this->prerequisites = prerequisites;
+            this->alternatives = alternatives;
+            this->continuers = continuers;
+        }
+        virtual ~ActionNode()
+        {
+            NextAction::destroy(prerequisites);
+            NextAction::destroy(alternatives);
+            NextAction::destroy(continuers);
+        }
+
+    public:
+        Action* getAction() { return action; }
+        void setAction(Action* action) { this->action = action; }
+        string getName() { return name; }
+
+    public:
+        NextAction** getContinuers() { return NextAction::merge(NextAction::clone(continuers), action->getContinuers()); }
+        NextAction** getAlternatives() { return NextAction::merge(NextAction::clone(alternatives), action->getAlternatives()); }
+        NextAction** getPrerequisites() { return NextAction::merge(NextAction::clone(prerequisites), action->getPrerequisites()); }
+
+    private:
+        string name;
+        Action* action;
+        NextAction** continuers;
+        NextAction** alternatives;
+        NextAction** prerequisites;
+    };
+
+    //---------------------------------------------------------------------------------------------------------------------
+
+	class ActionBasket
+	{
+	public:
+        ActionBasket(ActionNode* action, float relevance, bool skipPrerequisites, Event event) :
+          action(action), relevance(relevance), skipPrerequisites(skipPrerequisites), event(event) {}
+        virtual ~ActionBasket(void) {}
+	public:
+		float getRelevance() {return relevance;}
+		ActionNode* getAction() {return action;}
+        Event getEvent() { return event; }
+        bool isSkipPrerequisites() { return skipPrerequisites; }
+        void AmendRelevance(float k) {relevance *= k; }
+        void setRelevance(float relevance) { this->relevance = relevance; }
+	private:
+		ActionNode* action;
+		float relevance;
+        bool skipPrerequisites;
+        Event event;
+	};
+
+    //---------------------------------------------------------------------------------------------------------------------
+
+
+}
+
+#define AI_VALUE(type, name) context->GetValue<type>(name)->Get()
+#define AI_VALUE2(type, name, param) context->GetValue<type>(name, param)->Get()
diff --git a/src/plugins/playerbot/strategy/ActionBasket.cpp b/src/plugins/playerbot/strategy/ActionBasket.cpp
new file mode 100644
index 0000000..ef8e4b9
--- /dev/null
+++ b/src/plugins/playerbot/strategy/ActionBasket.cpp
@@ -0,0 +1,4 @@
+#include "../../pchdef.h"
+#include "../playerbot.h"
+#include "ActionBasket.h"
+
diff --git a/src/plugins/playerbot/strategy/ActionBasket.h b/src/plugins/playerbot/strategy/ActionBasket.h
new file mode 100644
index 0000000..d85293b
--- /dev/null
+++ b/src/plugins/playerbot/strategy/ActionBasket.h
@@ -0,0 +1,5 @@
+#pragma once
+namespace ai
+{
+
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/AiObject.cpp b/src/plugins/playerbot/strategy/AiObject.cpp
new file mode 100644
index 0000000..3b807e2
--- /dev/null
+++ b/src/plugins/playerbot/strategy/AiObject.cpp
@@ -0,0 +1,16 @@
+#include "../../pchdef.h"
+#include "../playerbot.h"
+#include "AiObject.h"
+
+AiObject::AiObject(PlayerbotAI* ai) :
+    PlayerbotAIAware(ai),
+    bot(ai->GetBot()),
+    context(ai->GetAiObjectContext()),
+    chat(ai->GetChatHelper())
+{
+}
+
+Player* AiObject::GetMaster()
+{
+    return ai->GetMaster();
+}
diff --git a/src/plugins/playerbot/strategy/AiObject.h b/src/plugins/playerbot/strategy/AiObject.h
new file mode 100644
index 0000000..0b4f214
--- /dev/null
+++ b/src/plugins/playerbot/strategy/AiObject.h
@@ -0,0 +1,33 @@
+#pragma once
+
+class PlayerbotAI;
+
+namespace ai
+{
+    class AiObjectContext;
+    class ChatHelper;
+
+    class AiObject : public PlayerbotAIAware
+	{
+	public:
+        AiObject(PlayerbotAI* ai);
+
+    protected:
+        Player* bot;
+        Player* GetMaster();
+        AiObjectContext* context;
+        ChatHelper* chat;
+	};
+
+    class AiNamedObject : public AiObject
+    {
+    public:
+        AiNamedObject(PlayerbotAI* ai, string name) : AiObject(ai), name(name) {}
+
+    public:
+        virtual string getName() { return name; }
+
+    protected:
+        string name;
+    };
+}
diff --git a/src/plugins/playerbot/strategy/AiObjectContext.cpp b/src/plugins/playerbot/strategy/AiObjectContext.cpp
new file mode 100644
index 0000000..3c75542
--- /dev/null
+++ b/src/plugins/playerbot/strategy/AiObjectContext.cpp
@@ -0,0 +1,48 @@
+#include "../../pchdef.h"
+#include "../playerbot.h"
+#include "AiObjectContext.h"
+#include "NamedObjectContext.h"
+#include "StrategyContext.h"
+#include "triggers/TriggerContext.h"
+#include "actions/ActionContext.h"
+#include "triggers/ChatTriggerContext.h"
+#include "actions/ChatActionContext.h"
+#include "triggers/WorldPacketTriggerContext.h"
+#include "actions/WorldPacketActionContext.h"
+#include "values/ValueContext.h"
+
+using namespace ai;
+
+AiObjectContext::AiObjectContext(PlayerbotAI* ai) : PlayerbotAIAware(ai)
+{
+    strategyContexts.Add(new StrategyContext());
+    strategyContexts.Add(new MovementStrategyContext());
+    strategyContexts.Add(new AssistStrategyContext());
+    strategyContexts.Add(new QuestStrategyContext());
+
+    actionContexts.Add(new ActionContext());
+    actionContexts.Add(new ChatActionContext());
+    actionContexts.Add(new WorldPacketActionContext());
+
+    triggerContexts.Add(new TriggerContext());
+    triggerContexts.Add(new ChatTriggerContext());
+    triggerContexts.Add(new WorldPacketTriggerContext());
+
+    valueContexts.Add(new ValueContext());
+}
+
+void AiObjectContext::Update()
+{
+    strategyContexts.Update();
+    triggerContexts.Update();
+    actionContexts.Update();
+    valueContexts.Update();
+}
+
+void AiObjectContext::Reset()
+{
+    strategyContexts.Reset();
+    triggerContexts.Reset();
+    actionContexts.Reset();
+    valueContexts.Reset();
+}
diff --git a/src/plugins/playerbot/strategy/AiObjectContext.h b/src/plugins/playerbot/strategy/AiObjectContext.h
new file mode 100644
index 0000000..d3750be
--- /dev/null
+++ b/src/plugins/playerbot/strategy/AiObjectContext.h
@@ -0,0 +1,81 @@
+#pragma once
+
+#include "../PlayerbotAIAware.h"
+#include "Action.h"
+#include "Value.h"
+#include "NamedObjectContext.h"
+#include "Strategy.h"
+
+namespace ai
+{
+    class AiObjectContext : public PlayerbotAIAware
+    {
+    public:
+        AiObjectContext(PlayerbotAI* ai);
+        virtual ~AiObjectContext() {}
+
+    public:
+        virtual Strategy* GetStrategy(string name) { return strategyContexts.GetObject(name, ai); }
+        virtual set<string> GetSiblingStrategy(string name) { return strategyContexts.GetSiblings(name); }
+        virtual Trigger* GetTrigger(string name) { return triggerContexts.GetObject(name, ai); }
+        virtual Action* GetAction(string name) { return actionContexts.GetObject(name, ai); }
+        virtual UntypedValue* GetUntypedValue(string name) { return valueContexts.GetObject(name, ai); }
+
+        template<class T>
+        Value<T>* GetValue(string name)
+        {
+            return dynamic_cast<Value<T>*>(GetUntypedValue(name));
+        }
+
+        template<class T>
+        Value<T>* GetValue(string name, string param)
+        {
+            return GetValue<T>((string(name) + "::" + param));
+        }
+
+        template<class T>
+        Value<T>* GetValue(string name, uint32 param)
+        {
+        	ostringstream out; out << param;
+            return GetValue<T>(name, out.str());
+        }
+
+        set<string> GetSupportedStrategies()
+        {
+            return strategyContexts.supports();
+        }
+
+        string FormatValues()
+        {
+            ostringstream out;
+            set<string> names = valueContexts.GetCreated();
+            for (set<string>::iterator i = names.begin(); i != names.end(); ++i, out << "|")
+            {
+                UntypedValue* value = GetUntypedValue(*i);
+                if (!value)
+                    continue;
+
+                string text = value->Format();
+                if (text == "?")
+                    continue;
+
+                out << "{" << *i << "=" << text << "}";
+            }
+            return out.str();
+        }
+
+    public:
+        virtual void Update();
+        virtual void Reset();
+        virtual void AddShared(NamedObjectContext<UntypedValue>* sharedValues)
+        {
+            valueContexts.Add(sharedValues);
+        }
+
+    protected:
+        NamedObjectContextList<Strategy> strategyContexts;
+        NamedObjectContextList<Action> actionContexts;
+        NamedObjectContextList<Trigger> triggerContexts;
+        NamedObjectContextList<UntypedValue> valueContexts;
+    };
+}
diff --git a/src/plugins/playerbot/strategy/CustomStrategy.cpp b/src/plugins/playerbot/strategy/CustomStrategy.cpp
new file mode 100644
index 0000000..ddc5511
--- /dev/null
+++ b/src/plugins/playerbot/strategy/CustomStrategy.cpp
@@ -0,0 +1,86 @@
+#include "../../pchdef.h"
+#include "../playerbot.h"
+#include "CustomStrategy.h"
+#include <regex>
+
+using namespace ai;
+
+map<string, string> CustomStrategy::actionLinesCache;
+
+NextAction* toNextAction(string action)
+{
+    vector<string> tokens = split(action, '|');
+    if (tokens.size() == 2)
+        return new NextAction(tokens[0], atof(tokens[1].c_str()));
+    else if (tokens.size() == 1)
+        return new NextAction(tokens[0], ACTION_NORMAL);
+
+    sLog->outMessage("playerbot", LOG_LEVEL_ERROR, "Invalid action '%s'", action);
+    return NULL;
+}
+
+NextAction** toNextActionArray(string actions)
+{
+    vector<string> tokens = split(actions, ',');
+    NextAction** res = new NextAction*[tokens.size() + 1];
+    int index = 0;
+    for (vector<string>::iterator i = tokens.begin(); i != tokens.end(); ++i)
+    {
+        res[index++] = toNextAction(*i);
+    }
+	res[index++] = NULL;
+    return res;
+}
+
+TriggerNode* toTriggerNode(string actionLine)
+{
+    vector<string> tokens = split(actionLine, '>');
+    if (tokens.size() == 2)
+        return new TriggerNode(tokens[0], toNextActionArray(tokens[1]));
+
+    sLog->outMessage("playerbot", LOG_LEVEL_ERROR, "Invalid action line '%s'", actionLine);
+    return NULL;
+}
+
+void CustomStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    if (actionLines.empty())
+    {
+        if (actionLinesCache[qualifier].empty())
+        {
+            QueryResult results = CharacterDatabase.PQuery("SELECT action_line FROM ai_playerbot_custom_strategy WHERE name = '%s'", qualifier.c_str());
+            if (results)
+            {
+                do
+                {
+                    Field* fields = results->Fetch();
+                    string action = fields[0].GetCString();
+                    this->actionLines.push_back(action);
+                } while (results->NextRow());
+            }
+        }
+        else
+        {
+            vector<string> tokens = split(actionLinesCache[qualifier], '\n');
+            regex tpl("\\(NULL,\\s*'.+',\\s*'(.+)'\\)(,|;)");
+            for (vector<string>::iterator i = tokens.begin(); i != tokens.end(); ++i)
+            {
+                string line = *i;
+                for (sregex_iterator j = sregex_iterator(line.begin(), line.end(), tpl); j != sregex_iterator(); ++j)
+                {
+                    smatch match = *j;
+                    string actionLine = match[1].str();
+                    if (!actionLine.empty())
+                        this->actionLines.push_back(actionLine);
+                }
+            }
+        }
+    }
+
+    for (list<string>::iterator i = actionLines.begin(); i != actionLines.end(); ++i)
+        triggers.push_back(toTriggerNode(*i));
+}
+
+CustomStrategy::CustomStrategy(PlayerbotAI* ai) : Strategy(ai), Qualified()
+{
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/CustomStrategy.h b/src/plugins/playerbot/strategy/CustomStrategy.h
new file mode 100644
index 0000000..bd55286
--- /dev/null
+++ b/src/plugins/playerbot/strategy/CustomStrategy.h
@@ -0,0 +1,21 @@
+#pragma once
+#include "Strategy.h"
+
+namespace ai
+{
+    class CustomStrategy : public Strategy, public Qualified
+    {
+    public:
+        CustomStrategy(PlayerbotAI* ai);
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "custom::" + qualifier; }
+
+    private:
+        list<string> actionLines;
+
+    public:
+        static map<string, string> actionLinesCache;
+    };
+}
diff --git a/src/plugins/playerbot/strategy/Engine.cpp b/src/plugins/playerbot/strategy/Engine.cpp
new file mode 100644
index 0000000..ac83395
--- /dev/null
+++ b/src/plugins/playerbot/strategy/Engine.cpp
@@ -0,0 +1,543 @@
+#include "../../pchdef.h"
+#include "../playerbot.h"
+
+#include "Engine.h"
+#include "../PlayerbotAIConfig.h"
+
+using namespace ai;
+using namespace std;
+
+Engine::Engine(PlayerbotAI* ai, AiObjectContext *factory) : PlayerbotAIAware(ai), aiObjectContext(factory)
+{
+    lastRelevance = 0.0f;
+    testMode = false;
+}
+
+bool ActionExecutionListeners::Before(Action* action, Event event)
+{
+    bool result = true;
+    for (list<ActionExecutionListener*>::iterator i = listeners.begin(); i!=listeners.end(); i++)
+    {
+        result &= (*i)->Before(action, event);
+    }
+    return result;
+}
+
+void ActionExecutionListeners::After(Action* action, bool executed, Event event)
+{
+    for (list<ActionExecutionListener*>::iterator i = listeners.begin(); i!=listeners.end(); i++)
+    {
+        (*i)->After(action, executed, event);
+    }
+}
+
+bool ActionExecutionListeners::OverrideResult(Action* action, bool executed, Event event)
+{
+    bool result = executed;
+    for (list<ActionExecutionListener*>::iterator i = listeners.begin(); i!=listeners.end(); i++)
+    {
+        result = (*i)->OverrideResult(action, result, event);
+    }
+    return result;
+}
+
+bool ActionExecutionListeners::AllowExecution(Action* action, Event event)
+{
+    bool result = true;
+    for (list<ActionExecutionListener*>::iterator i = listeners.begin(); i!=listeners.end(); i++)
+    {
+        result &= (*i)->AllowExecution(action, event);
+    }
+    return result;
+}
+
+ActionExecutionListeners::~ActionExecutionListeners()
+{
+    for (list<ActionExecutionListener*>::iterator i = listeners.begin(); i!=listeners.end(); i++)
+    {
+        delete *i;
+    }
+    listeners.clear();
+}
+
+
+Engine::~Engine(void)
+{
+    Reset();
+
+    strategies.clear();
+}
+
+void Engine::Reset()
+{
+    ActionNode* action = NULL;
+    do
+    {
+        action = queue.Pop();
+        delete action;
+    } while (action);
+
+    for (list<TriggerNode*>::iterator i = triggers.begin(); i != triggers.end(); i++)
+    {
+        TriggerNode* trigger = *i;
+        delete trigger;
+    }
+    triggers.clear();
+
+    for (list<Multiplier*>::iterator i = multipliers.begin(); i != multipliers.end(); i++)
+    {
+        Multiplier* multiplier = *i;
+        delete multiplier;
+    }
+    multipliers.clear();
+}
+
+void Engine::Init()
+{
+    Reset();
+
+    for (map<string, Strategy*>::iterator i = strategies.begin(); i != strategies.end(); i++)
+    {
+        Strategy* strategy = i->second;
+        strategy->InitMultipliers(multipliers);
+        strategy->InitTriggers(triggers);
+        Event emptyEvent;
+        MultiplyAndPush(strategy->getDefaultActions(), 0.0f, false, emptyEvent);
+    }
+
+	if (testMode)
+	{
+        FILE* file = fopen("test.log", "w");
+        fprintf(file, "\n");
+        fclose(file);
+	}
+}
+
+
+bool Engine::DoNextAction(Unit* unit, int depth)
+{
+    LogAction("--- AI Tick ---");
+    if (sPlayerbotAIConfig.logValuesPerTick)
+        LogValues();
+
+    bool actionExecuted = false;
+    ActionBasket* basket = NULL;
+
+    time_t currentTime = time(0);
+    aiObjectContext->Update();
+    ProcessTriggers();
+
+    int iterations = 0;
+    int iterationsPerTick = queue.Size() * sPlayerbotAIConfig.iterationsPerTick;
+    do {
+        basket = queue.Peek();
+        if (basket) {
+            if (++iterations > iterationsPerTick)
+                break;
+
+            float relevance = basket->getRelevance(); // just for reference
+            bool skipPrerequisites = basket->isSkipPrerequisites();
+            Event event = basket->getEvent();
+            // NOTE: queue.Pop() deletes basket
+            ActionNode* actionNode = queue.Pop();
+            Action* action = InitializeAction(actionNode);
+
+            if (!action)
+            {
+                LogAction("A:%s - UNKNOWN", actionNode->getName().c_str());
+            }
+            else if (action->isUseful())
+            {
+                for (list<Multiplier*>::iterator i = multipliers.begin(); i!= multipliers.end(); i++)
+                {
+                    Multiplier* multiplier = *i;
+                    relevance *= multiplier->GetValue(action);
+                    if (!relevance)
+                    {
+                        LogAction("Multiplier %s made action %s useless", multiplier->getName().c_str(), action->getName().c_str());
+                        break;
+                    }
+                }
+
+                if (action->isPossible() && relevance)
+                {
+                    if ((!skipPrerequisites || lastRelevance-relevance > 0.04) &&
+                            MultiplyAndPush(actionNode->getPrerequisites(), relevance + 0.02, false, event))
+                    {
+                        PushAgain(actionNode, relevance + 0.01, event);
+                        continue;
+                    }
+
+                    actionExecuted = ListenAndExecute(action, event);
+
+                    if (actionExecuted)
+                    {
+                        LogAction("A:%s - OK", action->getName().c_str());
+                        MultiplyAndPush(actionNode->getContinuers(), 0, false, event);
+                        lastRelevance = relevance;
+                        delete actionNode;
+                        break;
+                    }
+                    else
+                    {
+                        MultiplyAndPush(actionNode->getAlternatives(), relevance + 0.03, false, event);
+                        LogAction("A:%s - FAILED", action->getName().c_str());
+                    }
+                }
+                else
+                {
+                    MultiplyAndPush(actionNode->getAlternatives(), relevance + 0.03, false, event);
+                    LogAction("A:%s - IMPOSSIBLE", action->getName().c_str());
+                }
+            }
+            else
+            {
+                lastRelevance = relevance;
+                LogAction("A:%s - USELESS", action->getName().c_str());
+            }
+            delete actionNode;
+        }
+    }
+    while (basket);
+
+    if (!basket)
+    {
+        lastRelevance = 0.0f;
+        PushDefaultActions();
+        if (queue.Peek() && depth < 2)
+            return DoNextAction(unit, depth + 1);
+    }
+
+    if (time(0) - currentTime > 1) {
+        LogAction("too long execution");
+    }
+
+    if (!actionExecuted)
+        LogAction("no actions executed");
+
+    return actionExecuted;
+}
+
+ActionNode* Engine::CreateActionNode(string name)
+{
+    for (map<string, Strategy*>::iterator i = strategies.begin(); i != strategies.end(); i++)
+    {
+        Strategy* strategy = i->second;
+        ActionNode* node = strategy->GetAction(name);
+        if (node)
+            return node;
+    }
+    return new ActionNode (name,
+        /*P*/ NULL,
+        /*A*/ NULL,
+        /*C*/ NULL);
+}
+
+bool Engine::MultiplyAndPush(NextAction** actions, float forceRelevance, bool skipPrerequisites, Event event)
+{
+    bool pushed = false;
+    if (actions)
+    {
+        for (int j=0; j<10; j++) // TODO: remove 10
+        {
+            NextAction* nextAction = actions[j];
+            if (nextAction)
+            {
+                ActionNode* action = CreateActionNode(nextAction->getName());
+                InitializeAction(action);
+
+                float k = nextAction->getRelevance();
+                if (forceRelevance > 0.0f)
+                {
+                    k = forceRelevance;
+                }
+
+                if (k > 0)
+                {
+                    LogAction("PUSH:%s - %f", action->getName().c_str(), k);
+                    queue.Push(new ActionBasket(action, k, skipPrerequisites, event));
+                    pushed = true;
+                }
+
+                delete nextAction;
+            }
+            else
+                break;
+        }
+        delete actions;
+    }
+    return pushed;
+}
+
+ActionResult Engine::ExecuteAction(string name)
+{
+	bool result = false;
+
+    ActionNode *actionNode = CreateActionNode(name);
+    if (!actionNode)
+        return ACTION_RESULT_UNKNOWN;
+
+    Action* action = InitializeAction(actionNode);
+    if (!action)
+        return ACTION_RESULT_UNKNOWN;
+
+    if (!action->isPossible())
+    {
+        delete actionNode;
+        return ACTION_RESULT_IMPOSSIBLE;
+    }
+
+    if (!action->isUseful())
+    {
+        delete actionNode;
+        return ACTION_RESULT_USELESS;
+    }
+
+    action->MakeVerbose();
+    Event emptyEvent;
+    result = ListenAndExecute(action, emptyEvent);
+    MultiplyAndPush(action->getContinuers(), 0.0f, false, emptyEvent);
+    delete actionNode;
+	return result ? ACTION_RESULT_OK : ACTION_RESULT_FAILED;
+}
+
+void Engine::addStrategy(string name)
+{
+    removeStrategy(name);
+
+    Strategy* strategy = aiObjectContext->GetStrategy(name);
+    if (strategy)
+    {
+        set<string> siblings = aiObjectContext->GetSiblingStrategy(name);
+        for (set<string>::iterator i = siblings.begin(); i != siblings.end(); i++)
+            removeStrategy(*i);
+
+        LogAction("S:+%s", strategy->getName().c_str());
+        strategies[strategy->getName()] = strategy;
+    }
+    Init();
+}
+
+void Engine::addStrategies(string first, ...)
+{
+	addStrategy(first);
+
+	va_list vl;
+	va_start(vl, first);
+
+	const char* cur;
+	do
+	{
+		cur = va_arg(vl, const char*);
+		if (cur)
+			addStrategy(cur);
+	}
+	while (cur);
+
+	va_end(vl);
+}
+
+bool Engine::removeStrategy(string name)
+{
+    map<string, Strategy*>::iterator i = strategies.find(name);
+    if (i == strategies.end())
+        return false;
+
+    LogAction("S:-%s", name.c_str());
+    strategies.erase(i);
+    Init();
+    return true;
+}
+
+void Engine::removeAllStrategies()
+{
+    strategies.clear();
+    Init();
+}
+
+void Engine::toggleStrategy(string name)
+{
+    if (!removeStrategy(name))
+        addStrategy(name);
+}
+
+bool Engine::HasStrategy(string name)
+{
+    return strategies.find(name) != strategies.end();
+}
+
+void Engine::ProcessTriggers()
+{
+    for (list<TriggerNode*>::iterator i = triggers.begin(); i != triggers.end(); i++)
+    {
+        TriggerNode* node = *i;
+        if (!node)
+            continue;
+
+        Trigger* trigger = node->getTrigger();
+        if (!trigger)
+        {
+            trigger = aiObjectContext->GetTrigger(node->getName());
+            node->setTrigger(trigger);
+        }
+
+        if (!trigger)
+            continue;
+
+        if (testMode || trigger->needCheck())
+        {
+            Event event = trigger->Check();
+            if (!event)
+                continue;
+
+            LogAction("T:%s", trigger->getName().c_str());
+            MultiplyAndPush(node->getHandlers(), 0.0f, false, event);
+        }
+    }
+    for (list<TriggerNode*>::iterator i = triggers.begin(); i != triggers.end(); i++)
+    {
+        Trigger* trigger = (*i)->getTrigger();
+        if (trigger) trigger->Reset();
+    }
+}
+
+void Engine::PushDefaultActions()
+{
+    for (map<string, Strategy*>::iterator i = strategies.begin(); i != strategies.end(); i++)
+    {
+        Strategy* strategy = i->second;
+        Event emptyEvent;
+        MultiplyAndPush(strategy->getDefaultActions(), 0.0f, false, emptyEvent);
+    }
+}
+
+string Engine::ListStrategies()
+{
+    string s = "Strategies: ";
+
+    if (strategies.empty())
+        return s;
+
+    for (map<string, Strategy*>::iterator i = strategies.begin(); i != strategies.end(); i++)
+    {
+        s.append(i->first);
+        s.append(", ");
+    }
+    return s.substr(0, s.length() - 2);
+}
+
+void Engine::PushAgain(ActionNode* actionNode, float relevance, Event event)
+{
+    NextAction** nextAction = new NextAction*[2];
+    nextAction[0] = new NextAction(actionNode->getName(), relevance);
+    nextAction[1] = NULL;
+    MultiplyAndPush(nextAction, relevance, true, event);
+    delete actionNode;
+}
+
+bool Engine::ContainsStrategy(StrategyType type)
+{
+	for (map<string, Strategy*>::iterator i = strategies.begin(); i != strategies.end(); i++)
+	{
+		Strategy* strategy = i->second;
+		if (strategy->GetType() & type)
+			return true;
+	}
+	return false;
+}
+
+Action* Engine::InitializeAction(ActionNode* actionNode)
+{
+    Action* action = actionNode->getAction();
+    if (!action)
+    {
+        action = aiObjectContext->GetAction(actionNode->getName());
+        actionNode->setAction(action);
+    }
+    return action;
+}
+
+bool Engine::ListenAndExecute(Action* action, Event event)
+{
+    bool actionExecuted = false;
+
+    if (actionExecutionListeners.Before(action, event))
+    {
+        actionExecuted = actionExecutionListeners.AllowExecution(action, event) ? action->Execute(event) : true;
+    }
+
+    actionExecuted = actionExecutionListeners.OverrideResult(action, actionExecuted, event);
+    actionExecutionListeners.After(action, actionExecuted, event);
+    return actionExecuted;
+}
+
+void Engine::LogAction(const char* format, ...)
+{
+    char buf[1024];
+
+    va_list ap;
+    va_start(ap, format);
+    vsprintf(buf, format, ap);
+    va_end(ap);
+    lastAction += "|";
+    lastAction += buf;
+    if (lastAction.size() > 512)
+    {
+        lastAction = lastAction.substr(512);
+        size_t pos = lastAction.find("|");
+        lastAction = (pos == string::npos ? "" : lastAction.substr(pos));
+    }
+
+    if (testMode)
+    {
+        FILE* file = fopen("test.log", "a");
+        fprintf(file, buf);
+        fprintf(file, "\n");
+        fclose(file);
+    }
+    else
+    {
+        Player* bot = ai->GetBot();
+        if (sPlayerbotAIConfig.logInGroupOnly && !bot->GetGroup())
+            return;
+
+        sLog->outMessage("playerbot", LOG_LEVEL_DEBUG, "%s %s", bot->GetName().c_str(), buf);
+    }
+}
+
+void Engine::ChangeStrategy(string names)
+{
+    vector<string> splitted = split(names, ',');
+    for (vector<string>::iterator i = splitted.begin(); i != splitted.end(); i++)
+    {
+        const char* name = i->c_str();
+        switch (name[0])
+        {
+        case '+':
+            addStrategy(name+1);
+            break;
+        case '-':
+            removeStrategy(name+1);
+            break;
+        case '~':
+            toggleStrategy(name+1);
+            break;
+        case '?':
+            ai->TellMaster(ListStrategies());
+            break;
+        }
+    }
+}
+
+void Engine::LogValues()
+{
+    if (testMode)
+        return;
+
+    Player* bot = ai->GetBot();
+    if (sPlayerbotAIConfig.logInGroupOnly && !bot->GetGroup())
+        return;
+
+    string text = ai->GetAiObjectContext()->FormatValues();
+    sLog->outMessage("playerbot", LOG_LEVEL_DEBUG, "Values for %s: %s", bot->GetName().c_str(), text.c_str());
+}
diff --git a/src/plugins/playerbot/strategy/Engine.h b/src/plugins/playerbot/strategy/Engine.h
new file mode 100644
index 0000000..a395a1b
--- /dev/null
+++ b/src/plugins/playerbot/strategy/Engine.h
@@ -0,0 +1,123 @@
+#pragma once
+
+#include "Action.h"
+#include "Queue.h"
+#include "Trigger.h"
+#include "Multiplier.h"
+#include "AiObjectContext.h"
+#include "Strategy.h"
+
+namespace ai
+{
+    class ActionExecutionListener
+    {
+    public:
+        virtual bool Before(Action* action, Event event) = 0;
+        virtual bool AllowExecution(Action* action, Event event) = 0;
+        virtual void After(Action* action, bool executed, Event event) = 0;
+        virtual bool OverrideResult(Action* action, bool executed, Event event) = 0;
+    };
+
+    // -----------------------------------------------------------------------------------------------------------------------
+
+    class ActionExecutionListeners : public ActionExecutionListener
+    {
+    public:
+        virtual ~ActionExecutionListeners();
+
+    // ActionExecutionListener
+    public:
+        virtual bool Before(Action* action, Event event);
+        virtual bool AllowExecution(Action* action, Event event);
+        virtual void After(Action* action, bool executed, Event event);
+        virtual bool OverrideResult(Action* action, bool executed, Event event);
+
+    public:
+        void Add(ActionExecutionListener* listener)
+        {
+            listeners.push_back(listener);
+        }
+        void Remove(ActionExecutionListener* listener)
+        {
+            listeners.remove(listener);
+        }
+
+    private:
+        std::list<ActionExecutionListener*> listeners;
+    };
+
+    // -----------------------------------------------------------------------------------------------------------------------
+
+    enum ActionResult
+    {
+        ACTION_RESULT_UNKNOWN,
+        ACTION_RESULT_OK,
+        ACTION_RESULT_IMPOSSIBLE,
+        ACTION_RESULT_USELESS,
+        ACTION_RESULT_FAILED
+    };
+
+    class Engine : public PlayerbotAIAware
+    {
+    public:
+        Engine(PlayerbotAI* ai, AiObjectContext *factory);
+
+	    void Init();
+        void addStrategy(string name);
+		void addStrategies(string first, ...);
+        bool removeStrategy(string name);
+        bool HasStrategy(string name);
+        void removeAllStrategies();
+        void toggleStrategy(string name);
+        std::string ListStrategies();
+		bool ContainsStrategy(StrategyType type);
+		void ChangeStrategy(string names);
+		string GetLastAction() { return lastAction; }
+
+    public:
+	    virtual bool DoNextAction(Unit*, int depth = 0);
+	    ActionResult ExecuteAction(string name);
+
+    public:
+        void AddActionExecutionListener(ActionExecutionListener* listener)
+        {
+            actionExecutionListeners.Add(listener);
+        }
+        void removeActionExecutionListener(ActionExecutionListener* listener)
+        {
+            actionExecutionListeners.Remove(listener);
+        }
+
+    public:
+	    virtual ~Engine(void);
+
+    private:
+        bool MultiplyAndPush(NextAction** actions, float forceRelevance, bool skipPrerequisites, Event event);
+        void Reset();
+        void ProcessTriggers();
+        void PushDefaultActions();
+        void PushAgain(ActionNode* actionNode, float relevance, Event event);
+        ActionNode* CreateActionNode(string name);
+        Action* InitializeAction(ActionNode* actionNode);
+        bool ListenAndExecute(Action* action, Event event);
+
+    private:
+        void LogAction(const char* format, ...);
+        void LogValues();
+
+    protected:
+	    Queue queue;
+	    std::list<TriggerNode*> triggers;
+        std::list<Multiplier*> multipliers;
+        AiObjectContext* aiObjectContext;
+        std::map<string, Strategy*> strategies;
+        float lastRelevance;
+        std::string lastAction;
+
+    public:
+		bool testMode;
+
+    private:
+        ActionExecutionListeners actionExecutionListeners;
+    };
+}
diff --git a/src/plugins/playerbot/strategy/Event.cpp b/src/plugins/playerbot/strategy/Event.cpp
new file mode 100644
index 0000000..1a0f28c
--- /dev/null
+++ b/src/plugins/playerbot/strategy/Event.cpp
@@ -0,0 +1,20 @@
+#include "../../pchdef.h"
+#include "../playerbot.h"
+#include "Event.h"
+
+
+using namespace ai;
+
+ObjectGuid Event::getObject()
+{
+    if (packet.empty())
+        return ObjectGuid();
+
+    WorldPacket p(packet);
+    p.rpos(0);
+    
+    ObjectGuid guid;
+    p >> guid;
+
+    return guid;
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/Event.h b/src/plugins/playerbot/strategy/Event.h
new file mode 100644
index 0000000..86ea279
--- /dev/null
+++ b/src/plugins/playerbot/strategy/Event.h
@@ -0,0 +1,36 @@
+#pragma once
+
+namespace ai
+{
+    class Event
+	{
+	public:
+        Event(Event const& other)
+        {
+            source = other.source;
+            param = other.param;
+            packet = other.packet;
+            owner = other.owner;
+        }
+        Event() {}
+        Event(string source) : source(source) {}
+        Event(string source, string param, Player* owner = NULL) : source(source), param(param), owner(owner) {}
+        Event(string source, WorldPacket &packet, Player* owner = NULL) : source(source), packet(packet), owner(owner) {}
+        virtual ~Event() {}
+
+	public:
+        string getSource() { return source; }
+        string getParam() { return param; }
+        WorldPacket& getPacket() { return packet; }
+        ObjectGuid getObject();
+        Player* getOwner() { return owner; }
+        bool operator! () const { return source.empty(); }
+
+    protected:
+        string source;
+        string param;
+        WorldPacket packet;
+        ObjectGuid object;
+        Player* owner;
+	};
+}
diff --git a/src/plugins/playerbot/strategy/ExternalEventHelper.h b/src/plugins/playerbot/strategy/ExternalEventHelper.h
new file mode 100644
index 0000000..a25154e
--- /dev/null
+++ b/src/plugins/playerbot/strategy/ExternalEventHelper.h
@@ -0,0 +1,69 @@
+#pragma once
+
+#include "Trigger.h"
+
+namespace ai
+{
+    class ExternalEventHelper {
+    public:
+        ExternalEventHelper(AiObjectContext* aiObjectContext) : aiObjectContext(aiObjectContext) {}
+
+        bool ParseChatCommand(string command, Player* owner = NULL)
+        {
+            if (HandleCommand(command, "", owner))
+                return true;
+
+            size_t i = string::npos;
+            while (true)
+            {
+                size_t found = command.rfind(" ", i);
+                if (found == string::npos || !found)
+                    break;
+
+                string name = command.substr(0, found);
+                string param = command.substr(found + 1);
+
+                i = found - 1;
+
+                if (HandleCommand(name, param, owner))
+                    return true;
+            }
+
+            if (!ChatHelper::parseable(command))
+                return false;
+
+            HandleCommand("q", command, owner);
+            HandleCommand("c", command, owner);
+            HandleCommand("t", command, owner);
+            return true;
+        }
+
+        void HandlePacket(map<uint16, string> &handlers, const WorldPacket &packet, Player* owner = NULL)
+        {
+            uint16 opcode = packet.GetOpcode();
+            string name = handlers[opcode];
+            if (name.empty())
+                return;
+
+            Trigger* trigger = aiObjectContext->GetTrigger(name);
+            if (!trigger)
+                return;
+
+            WorldPacket p(packet);
+            trigger->ExternalEvent(p, owner);
+        }
+
+        bool HandleCommand(string name, string param, Player* owner = NULL)
+        {
+            Trigger* trigger = aiObjectContext->GetTrigger(name);
+            if (!trigger)
+                return false;
+
+            trigger->ExternalEvent(param, owner);
+            return true;
+        }
+
+    private:
+        AiObjectContext* aiObjectContext;
+    };
+}
diff --git a/src/plugins/playerbot/strategy/ItemVisitors.h b/src/plugins/playerbot/strategy/ItemVisitors.h
new file mode 100644
index 0000000..09deb17
--- /dev/null
+++ b/src/plugins/playerbot/strategy/ItemVisitors.h
@@ -0,0 +1,258 @@
+#pragma once
+
+char * strstri (const char* str1, const char* str2);
+
+namespace ai
+{
+    class IterateItemsVisitor
+    {
+    public:
+        IterateItemsVisitor() {}
+
+        virtual bool Visit(Item* item) = 0;
+    };
+
+    class FindItemVisitor : public IterateItemsVisitor {
+    public:
+        FindItemVisitor() : IterateItemsVisitor(), result(NULL) {}
+
+        virtual bool Visit(Item* item)
+        {
+            if (!Accept(item->GetTemplate()))
+                return true;
+
+            result.push_back(item);
+            return true;
+        }
+
+        list<Item*>& GetResult() { return result; }
+
+    protected:
+        virtual bool Accept(const ItemTemplate* proto) = 0;
+
+    private:
+        list<Item*> result;
+    };
+
+    enum IterateItemsMask
+    {
+        ITERATE_ITEMS_IN_BAGS = 1,
+        ITERATE_ITEMS_IN_EQUIP = 2,
+        ITERATE_ALL_ITEMS = 255
+    };
+
+    class FindUsableItemVisitor : public FindItemVisitor {
+    public:
+        FindUsableItemVisitor(Player* bot) : FindItemVisitor()
+        {
+            this->bot = bot;
+        }
+
+        virtual bool Visit(Item* item)
+        {
+            if (bot->CanUseItem(item->GetTemplate()) == EQUIP_ERR_OK)
+                return FindItemVisitor::Visit(item);
+
+            return true;
+        }
+
+    private:
+        Player* bot;
+    };
+
+
+    class FindItemsByQualityVisitor : public IterateItemsVisitor
+    {
+    public:
+        FindItemsByQualityVisitor(uint32 quality, int count) : IterateItemsVisitor()
+        {
+            this->quality = quality;
+            this->count = count;
+        }
+
+        virtual bool Visit(Item* item)
+        {
+            if (item->GetTemplate()->Quality != quality)
+                return true;
+
+            if (result.size() >= (size_t)count)
+                return false;
+
+            result.push_back(item);
+            return true;
+        }
+
+        list<Item*>& GetResult()
+        {
+            return result;
+        }
+
+    private:
+        uint32 quality;
+        int count;
+        list<Item*> result;
+    };
+
+    class FindItemsToTradeByQualityVisitor : public FindItemsByQualityVisitor
+    {
+    public:
+        FindItemsToTradeByQualityVisitor(uint32 quality, int count) : FindItemsByQualityVisitor(quality, count) {}
+
+        virtual bool Visit(Item* item)
+        {
+            if (item->IsSoulBound())
+                return true;
+
+            return FindItemsByQualityVisitor::Visit(item);
+        }
+    };
+
+    class FindItemsToTradeByClassVisitor : public IterateItemsVisitor
+    {
+    public:
+        FindItemsToTradeByClassVisitor(uint32 itemClass, uint32 itemSubClass, int count)
+            : IterateItemsVisitor(), count(count), itemClass(itemClass), itemSubClass(itemSubClass) {}
+
+        virtual bool Visit(Item* item)
+        {
+            if (item->IsSoulBound())
+                return true;
+
+            if (item->GetTemplate()->Class != itemClass || item->GetTemplate()->SubClass != itemSubClass)
+                return true;
+
+            if (result.size() >= (size_t)count)
+                return false;
+
+            result.push_back(item);
+            return true;
+        }
+
+        list<Item*>& GetResult()
+        {
+            return result;
+        }
+
+    private:
+        uint32 itemClass;
+        uint32 itemSubClass;
+        int count;
+        list<Item*> result;
+    };
+
+    class QueryItemCountVisitor : public IterateItemsVisitor
+    {
+    public:
+        QueryItemCountVisitor(uint32 itemId)
+        {
+            count = 0;
+            this->itemId = itemId;
+        }
+
+        virtual bool Visit(Item* item)
+        {
+            if (item->GetTemplate()->ItemId == itemId)
+                count += item->GetCount();
+
+            return true;
+        }
+
+        int GetCount() { return count; }
+
+    protected:
+        int count;
+        uint32 itemId;
+    };
+
+
+    class QueryNamedItemCountVisitor : public QueryItemCountVisitor
+    {
+    public:
+        QueryNamedItemCountVisitor(string name) : QueryItemCountVisitor(0)
+        {
+            this->name = name;
+        }
+
+        virtual bool Visit(Item* item)
+        {
+            const ItemTemplate* proto = item->GetTemplate();
+            if (proto && !proto->Name1.empty() && strstri(proto->Name1.c_str(), name.c_str()))
+                count += item->GetCount();
+
+            return true;
+        }
+
+    private:
+        string name;
+    };
+
+    class FindUsableNamedItemVisitor : public FindUsableItemVisitor {
+    public:
+        FindUsableNamedItemVisitor(Player* bot, string name) : FindUsableItemVisitor(bot)
+        {
+            this->name = name;
+        }
+
+        virtual bool Accept(const ItemTemplate* proto)
+        {
+            return proto && !proto->Name1.empty() && strstri(proto->Name1.c_str(), name.c_str());
+        }
+
+    private:
+        string name;
+    };
+
+    class FindItemByIdVisitor : public FindItemVisitor {
+    public:
+        FindItemByIdVisitor(uint32 id) : FindItemVisitor()
+        {
+            this->id = id;
+        }
+
+        virtual bool Accept(const ItemTemplate* proto)
+        {
+            return proto->ItemId == id;
+        }
+
+    private:
+        uint32 id;
+    };
+
+    class ListItemsVisitor : public IterateItemsVisitor
+    {
+    public:
+        ListItemsVisitor() : IterateItemsVisitor() {}
+
+        map<uint32, int> items;
+
+        virtual bool Visit(Item* item)
+        {
+            uint32 id = item->GetTemplate()->ItemId;
+
+            if (items.find(id) == items.end())
+                items[id] = 0;
+
+            items[id] += item->GetCount();
+            return true;
+        }
+    };
+
+    class ItemCountByQuality : public IterateItemsVisitor
+    {
+    public:
+        ItemCountByQuality() : IterateItemsVisitor()
+        {
+            for (uint32 i = 0; i < MAX_ITEM_QUALITY; ++i)
+                count[i] = 0;
+        }
+
+        virtual bool Visit(Item* item)
+        {
+            count[item->GetTemplate()->Quality]++;
+            return true;
+        }
+
+    public:
+        map<uint32, int> count;
+    };
+}
diff --git a/src/plugins/playerbot/strategy/Multiplier.cpp b/src/plugins/playerbot/strategy/Multiplier.cpp
new file mode 100644
index 0000000..893d7f3
--- /dev/null
+++ b/src/plugins/playerbot/strategy/Multiplier.cpp
@@ -0,0 +1,5 @@
+#include "../../pchdef.h"
+#include "../playerbot.h"
+#include "Multiplier.h"
+
+using namespace ai;
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/Multiplier.h b/src/plugins/playerbot/strategy/Multiplier.h
new file mode 100644
index 0000000..e86fa05
--- /dev/null
+++ b/src/plugins/playerbot/strategy/Multiplier.h
@@ -0,0 +1,16 @@
+#pragma once
+#include "Action.h"
+
+namespace ai
+{
+    class Multiplier : public AiNamedObject
+    {
+    public:
+        Multiplier(PlayerbotAI* ai, string name) : AiNamedObject(ai, name) {}
+        virtual ~Multiplier() {}
+
+    public:
+        virtual float GetValue(Action* action) { return 1.0f; }
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/NamedObjectContext.h b/src/plugins/playerbot/strategy/NamedObjectContext.h
new file mode 100644
index 0000000..e79caf5
--- /dev/null
+++ b/src/plugins/playerbot/strategy/NamedObjectContext.h
@@ -0,0 +1,249 @@
+#pragma once
+
+namespace ai
+{
+    using namespace std;
+
+    class Qualified
+    {
+    public:
+        Qualified() {};
+
+    public:
+        virtual void Qualify(string qualifier) { this->qualifier = qualifier; }
+
+    protected:
+        string qualifier;
+    };
+
+    template <class T> class NamedObjectFactory
+    {
+    protected:
+        typedef T* (*ActionCreator) (PlayerbotAI* ai);
+        map<string, ActionCreator> creators;
+
+    public:
+        T* create(string name, PlayerbotAI* ai)
+        {
+            size_t found = name.find("::");
+            string qualifier;
+            if (found != string::npos)
+            {
+                qualifier = name.substr(found + 2);
+                name = name.substr(0, found);
+            }
+
+            if (creators.find(name) == creators.end())
+                return NULL;
+
+            ActionCreator creator = creators[name];
+            if (!creator)
+                return NULL;
+
+            T *object = (*creator)(ai);
+            Qualified *q = dynamic_cast<Qualified *>(object);
+            if (q)
+                q->Qualify(qualifier);
+
+            return object;
+        }
+
+        set<string> supports()
+        {
+            set<string> keys;
+            for (typename map<string, ActionCreator>::iterator it = creators.begin(); it != creators.end(); it++)
+                keys.insert(it->first);
+            return keys;
+        }
+    };
+
+
+    template <class T> class NamedObjectContext : public NamedObjectFactory<T>
+    {
+    public:
+        NamedObjectContext(bool shared = false, bool supportsSiblings = false) :
+            NamedObjectFactory<T>(), shared(shared), supportsSiblings(supportsSiblings) {}
+
+        T* create(string name, PlayerbotAI* ai)
+        {
+            if (created.find(name) == created.end())
+                return created[name] = NamedObjectFactory<T>::create(name, ai);
+
+            return created[name];
+        }
+
+        virtual ~NamedObjectContext()
+        {
+            Clear();
+        }
+
+        void Clear()
+        {
+            for (typename map<string, T*>::iterator i = created.begin(); i != created.end(); i++)
+            {
+                if (i->second)
+                    delete i->second;
+            }
+
+            created.clear();
+        }
+
+        void Update()
+        {
+            for (typename map<string, T*>::iterator i = created.begin(); i != created.end(); i++)
+            {
+                if (i->second)
+                    i->second->Update();
+            }
+        }
+
+        void Reset()
+        {
+            for (typename map<string, T*>::iterator i = created.begin(); i != created.end(); i++)
+            {
+                if (i->second)
+                    i->second->Reset();
+            }
+        }
+
+        bool IsShared() { return shared; }
+        bool IsSupportsSiblings() { return supportsSiblings; }
+
+        set<string> GetCreated()
+        {
+            set<string> keys;
+            for (typename map<string, T*>::iterator it = created.begin(); it != created.end(); it++)
+                keys.insert(it->first);
+            return keys;
+        }
+
+    protected:
+        map<string, T*> created;
+        bool shared;
+        bool supportsSiblings;
+    };
+
+    template <class T> class NamedObjectContextList
+    {
+    public:
+        virtual ~NamedObjectContextList()
+        {
+            for (typename list<NamedObjectContext<T>*>::iterator i = contexts.begin(); i != contexts.end(); i++)
+            {
+                NamedObjectContext<T>* context = *i;
+                if (!context->IsShared())
+                    delete context;
+            }
+        }
+
+        void Add(NamedObjectContext<T>* context)
+        {
+            contexts.push_back(context);
+        }
+
+        T* GetObject(string name, PlayerbotAI* ai)
+        {
+            for (typename list<NamedObjectContext<T>*>::iterator i = contexts.begin(); i != contexts.end(); i++)
+            {
+                T* object = (*i)->create(name, ai);
+                if (object) return object;
+            }
+            return NULL;
+        }
+
+        void Update()
+        {
+            for (typename list<NamedObjectContext<T>*>::iterator i = contexts.begin(); i != contexts.end(); i++)
+            {
+                if (!(*i)->IsShared())
+                    (*i)->Update();
+            }
+        }
+
+        void Reset()
+        {
+            for (typename list<NamedObjectContext<T>*>::iterator i = contexts.begin(); i != contexts.end(); i++)
+            {
+                (*i)->Reset();
+            }
+        }
+
+        set<string> GetSiblings(string name)
+        {
+            for (typename list<NamedObjectContext<T>*>::iterator i = contexts.begin(); i != contexts.end(); i++)
+            {
+                if (!(*i)->IsSupportsSiblings())
+                    continue;
+
+                set<string> supported = (*i)->supports();
+                set<string>::iterator found = supported.find(name);
+                if (found == supported.end())
+                    continue;
+
+                supported.erase(found);
+                return supported;
+            }
+
+            return set<string>();
+        }
+
+        set<string> supports()
+        {
+            set<string> result;
+
+            for (typename list<NamedObjectContext<T>*>::iterator i = contexts.begin(); i != contexts.end(); i++)
+            {
+                set<string> supported = (*i)->supports();
+
+                for (set<string>::iterator j = supported.begin(); j != supported.end(); j++)
+                    result.insert(*j);
+            }
+            return result;
+        }
+
+        set<string> GetCreated()
+        {
+            set<string> result;
+
+            for (typename list<NamedObjectContext<T>*>::iterator i = contexts.begin(); i != contexts.end(); i++)
+            {
+                set<string> createdKeys = (*i)->GetCreated();
+
+                for (set<string>::iterator j = createdKeys.begin(); j != createdKeys.end(); j++)
+                    result.insert(*j);
+            }
+            return result;
+        }
+
+    private:
+        list<NamedObjectContext<T>*> contexts;
+    };
+
+    template <class T> class NamedObjectFactoryList
+    {
+    public:
+        virtual ~NamedObjectFactoryList()
+        {
+            for (typename list<NamedObjectFactory<T>*>::iterator i = factories.begin(); i != factories.end(); i++)
+                delete *i;
+        }
+
+        void Add(NamedObjectFactory<T>* context)
+        {
+            factories.push_front(context);
+        }
+
+        T* GetObject(string name, PlayerbotAI* ai)
+        {
+            for (typename list<NamedObjectFactory<T>*>::iterator i = factories.begin(); i != factories.end(); i++)
+            {
+                T* object = (*i)->create(name, ai);
+                if (object) return object;
+            }
+            return NULL;
+        }
+
+    private:
+        list<NamedObjectFactory<T>*> factories;
+    };
+};
diff --git a/src/plugins/playerbot/strategy/PassiveMultiplier.cpp b/src/plugins/playerbot/strategy/PassiveMultiplier.cpp
new file mode 100644
index 0000000..f987438
--- /dev/null
+++ b/src/plugins/playerbot/strategy/PassiveMultiplier.cpp
@@ -0,0 +1,47 @@
+#include "../../pchdef.h"
+#include "../playerbot.h"
+#include "PassiveMultiplier.h"
+
+using namespace ai;
+
+list<string> PassiveMultiplier::allowedActions;
+list<string> PassiveMultiplier::allowedParts;
+
+PassiveMultiplier::PassiveMultiplier(PlayerbotAI* ai) : Multiplier(ai, "passive")
+{
+    if (allowedActions.empty())
+    {
+        allowedActions.push_back("co");
+        allowedActions.push_back("nc");
+        allowedActions.push_back("reset ai");
+        allowedActions.push_back("check mount state");
+    }
+
+    if (allowedParts.empty())
+    {
+        allowedParts.push_back("follow");
+        allowedParts.push_back("stay");
+        allowedParts.push_back("chat shortcut");
+    }
+}
+
+float PassiveMultiplier::GetValue(Action* action) {
+    if (!action)
+		return 1.0f;
+
+    string name = action->getName();
+
+    for (list<string>::iterator i = allowedActions.begin(); i != allowedActions.end(); i++)
+    {
+        if (name == *i)
+            return 1.0f;
+    }
+
+    for (list<string>::iterator i = allowedParts.begin(); i != allowedParts.end(); i++)
+    {
+        if (name.find(*i) != string::npos)
+            return 1.0f;
+    }
+
+    return 0;
+}
diff --git a/src/plugins/playerbot/strategy/PassiveMultiplier.h b/src/plugins/playerbot/strategy/PassiveMultiplier.h
new file mode 100644
index 0000000..37985a0
--- /dev/null
+++ b/src/plugins/playerbot/strategy/PassiveMultiplier.h
@@ -0,0 +1,20 @@
+#pragma once
+#include "Action.h"
+#include "Multiplier.h"
+
+namespace ai
+{
+    class PassiveMultiplier : public Multiplier
+    {
+    public:
+        PassiveMultiplier(PlayerbotAI* ai);
+
+    public:
+        virtual float GetValue(Action* action);
+
+    private:
+        static list<string> allowedActions;
+        static list<string> allowedParts;
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/Queue.cpp b/src/plugins/playerbot/strategy/Queue.cpp
new file mode 100644
index 0000000..8553b44
--- /dev/null
+++ b/src/plugins/playerbot/strategy/Queue.cpp
@@ -0,0 +1,81 @@
+#include "../../pchdef.h"
+#include "../playerbot.h"
+#include "Action.h"
+#include "Queue.h"
+
+using namespace ai;
+
+
+void Queue::Push(ActionBasket *action)
+{
+	if (action)
+    {
+        for (std::list<ActionBasket*>::iterator iter = actions.begin(); iter != actions.end(); iter++)
+        {
+            ActionBasket* basket = *iter;
+            if (action->getAction()->getName() == basket->getAction()->getName())
+            {
+				if (basket->getRelevance() < action->getRelevance())
+					basket->setRelevance(action->getRelevance());
+                delete action;
+                return;
+            }
+        }
+		actions.push_back(action);
+    }
+}
+
+void Queue::Push(ActionBasket **actions)
+{
+	if (actions)
+	{
+		for (int i=0; i<sizeof(actions)/sizeof(ActionBasket*); i++)
+		{
+			Push(actions[i]);
+		}
+	}
+}
+
+ActionNode* Queue::Pop()
+{
+	float max = -1;
+	ActionBasket* selection = NULL;
+	for (std::list<ActionBasket*>::iterator iter = actions.begin(); iter != actions.end(); iter++)
+	{
+		ActionBasket* basket = *iter;
+		if (basket->getRelevance() > max)
+		{
+			max = basket->getRelevance();
+			selection = basket;
+		}
+	}
+	if (selection != NULL)
+	{
+		ActionNode* action = selection->getAction();
+		actions.remove(selection);
+		delete selection;
+		return action;
+	}
+	return NULL;
+}
+
+ActionBasket* Queue::Peek()
+{
+    float max = -1;
+    ActionBasket* selection = NULL;
+    for (std::list<ActionBasket*>::iterator iter = actions.begin(); iter != actions.end(); iter++)
+    {
+        ActionBasket* basket = *iter;
+        if (basket->getRelevance() > max)
+        {
+            max = basket->getRelevance();
+            selection = basket;
+        }
+    }
+    return selection;
+}
+
+int Queue::Size()
+{
+	return actions.size();
+}
diff --git a/src/plugins/playerbot/strategy/Queue.h b/src/plugins/playerbot/strategy/Queue.h
new file mode 100644
index 0000000..b70a526
--- /dev/null
+++ b/src/plugins/playerbot/strategy/Queue.h
@@ -0,0 +1,21 @@
+#include "ActionBasket.h"
+
+#pragma once
+namespace ai
+{
+class Queue
+{
+public:
+    Queue(void) {}
+public:
+    ~Queue(void) {}
+public:
+	void Push(ActionBasket *action);
+	void Push(ActionBasket **actions);
+	ActionNode* Pop();
+    ActionBasket* Peek();
+	int Size();
+private:
+	std::list<ActionBasket*> actions;
+};
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/Strategy.cpp b/src/plugins/playerbot/strategy/Strategy.cpp
new file mode 100644
index 0000000..65ba60f
--- /dev/null
+++ b/src/plugins/playerbot/strategy/Strategy.cpp
@@ -0,0 +1,117 @@
+#include "../../pchdef.h"
+#include "../playerbot.h"
+#include "Strategy.h"
+#include "NamedObjectContext.h"
+
+using namespace ai;
+using namespace std;
+
+
+class ActionNodeFactoryInternal : public NamedObjectFactory<ActionNode>
+{
+public:
+    ActionNodeFactoryInternal()
+    {
+        creators["melee"] = &melee;
+        creators["healthstone"] = &healthstone;
+        creators["be near"] = &follow_master_random;
+        creators["attack anything"] = &attack_anything;
+        creators["move random"] = &move_random;
+        creators["move to loot"] = &move_to_loot;
+        creators["food"] = &food;
+        creators["drink"] = &drink;
+        creators["mana potion"] = &mana_potion;
+        creators["healing potion"] = &healing_potion;
+        creators["flee"] = &flee;
+    }
+
+private:
+    static ActionNode* melee(PlayerbotAI* ai)
+    {
+        return new ActionNode ("melee",
+            /*P*/ NULL,
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+    static ActionNode* healthstone(PlayerbotAI* ai)
+    {
+        return new ActionNode ("healthstone",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("healing potion"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* follow_master_random(PlayerbotAI* ai)
+    {
+        return new ActionNode ("be near",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("follow"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* attack_anything(PlayerbotAI* ai)
+    {
+        return new ActionNode ("attack anything",
+            /*P*/ NULL,
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+    static ActionNode* move_random(PlayerbotAI* ai)
+    {
+        return new ActionNode ("move random",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("stay line"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* move_to_loot(PlayerbotAI* ai)
+    {
+        return new ActionNode ("move to loot",
+            /*P*/ NULL,
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+    static ActionNode* food(PlayerbotAI* ai)
+    {
+        return new ActionNode ("food",
+            /*P*/ NULL,
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+    static ActionNode* drink(PlayerbotAI* ai)
+    {
+        return new ActionNode ("drink",
+            /*P*/ NULL,
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+    static ActionNode* mana_potion(PlayerbotAI* ai)
+    {
+        return new ActionNode ("mana potion",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("drink"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* healing_potion(PlayerbotAI* ai)
+    {
+        return new ActionNode ("healing potion",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("food"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* flee(PlayerbotAI* ai)
+    {
+        return new ActionNode ("flee",
+            /*P*/ NULL,
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+};
+
+Strategy::Strategy(PlayerbotAI* ai) : PlayerbotAIAware(ai)
+{
+    actionNodeFactories.Add(new ActionNodeFactoryInternal());
+}
+
+ActionNode* Strategy::GetAction(string name)
+{
+    return actionNodeFactories.GetObject(name, ai);
+}
+
diff --git a/src/plugins/playerbot/strategy/Strategy.h b/src/plugins/playerbot/strategy/Strategy.h
new file mode 100644
index 0000000..12e98eb
--- /dev/null
+++ b/src/plugins/playerbot/strategy/Strategy.h
@@ -0,0 +1,55 @@
+#pragma once
+#include "Action.h"
+#include "Multiplier.h"
+#include "Trigger.h"
+#include "NamedObjectContext.h"
+
+namespace ai
+{
+	enum StrategyType
+	{
+		STRATEGY_TYPE_GENERIC = 0,
+		STRATEGY_TYPE_COMBAT = 1,
+		STRATEGY_TYPE_NONCOMBAT = 2,
+		STRATEGY_TYPE_TANK = 4,
+		STRATEGY_TYPE_DPS = 8,
+		STRATEGY_TYPE_HEAL = 16,
+		STRATEGY_TYPE_RANGED = 32,
+		STRATEGY_TYPE_MELEE = 64
+	};
+
+	enum ActionPriority
+	{
+	    ACTION_IDLE = 0,
+	    ACTION_NORMAL = 10,
+	    ACTION_HIGH = 20,
+	    ACTION_MOVE = 30,
+	    ACTION_INTERRUPT = 40,
+	    ACTION_DISPEL = 50,
+	    ACTION_LIGHT_HEAL = 60,
+	    ACTION_MEDIUM_HEAL = 70,
+	    ACTION_CRITICAL_HEAL = 80,
+	    ACTION_EMERGENCY = 90
+	};
+
+    class Strategy : public PlayerbotAIAware
+    {
+    public:
+        Strategy(PlayerbotAI* ai);
+        virtual ~Strategy() {}
+
+    public:
+        virtual NextAction** getDefaultActions() { return NULL; }
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers) {}
+        virtual void InitMultipliers(std::list<Multiplier*> &multipliers) {}
+        virtual string getName() = 0;
+		virtual int GetType() { return STRATEGY_TYPE_GENERIC; }
+        virtual ActionNode* GetAction(string name);
+        void Update() {}
+        void Reset() {}
+
+    protected:
+        NamedObjectFactoryList<ActionNode> actionNodeFactories;
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/StrategyContext.h b/src/plugins/playerbot/strategy/StrategyContext.h
new file mode 100644
index 0000000..fe30489
--- /dev/null
+++ b/src/plugins/playerbot/strategy/StrategyContext.h
@@ -0,0 +1,149 @@
+#pragma once
+
+#include "CustomStrategy.h"
+#include "generic/NonCombatStrategy.h"
+#include "generic/RacialsStrategy.h"
+#include "generic/ChatCommandHandlerStrategy.h"
+#include "generic/WorldPacketHandlerStrategy.h"
+#include "generic/DeadStrategy.h"
+#include "generic/QuestStrategies.h"
+#include "generic/LootNonCombatStrategy.h"
+#include "generic/DuelStrategy.h"
+#include "generic/KiteStrategy.h"
+#include "generic/FleeStrategy.h"
+#include "generic/FollowMasterStrategy.h"
+#include "generic/RunawayStrategy.h"
+#include "generic/StayStrategy.h"
+#include "generic/UseFoodStrategy.h"
+#include "generic/ConserveManaStrategy.h"
+#include "generic/EmoteStrategy.h"
+#include "generic/AttackRtiStrategy.h"
+#include "generic/AttackWeakStrategy.h"
+#include "generic/TankAoeStrategy.h"
+#include "generic/TankAssistStrategy.h"
+#include "generic/DpsAoeStrategy.h"
+#include "generic/DpsAssistStrategy.h"
+#include "generic/PassiveStrategy.h"
+#include "generic/GrindingStrategy.h"
+#include "generic/UsePotionsStrategy.h"
+#include "generic/GuardStrategy.h"
+#include "generic/CastTimeStrategy.h"
+#include "generic/ThreatStrategy.h"
+#include "generic/TellTargetStrategy.h"
+#include "generic/AttackEnemyPlayersStrategy.h"
+#include "generic/MoveRandomStrategy.h"
+
+namespace ai
+{
+    class StrategyContext : public NamedObjectContext<Strategy>
+    {
+    public:
+        StrategyContext()
+        {
+            creators["racials"] = &StrategyContext::racials;
+            creators["loot"] = &StrategyContext::loot;
+            creators["gather"] = &StrategyContext::gather;
+            creators["emote"] = &StrategyContext::emote;
+            creators["passive"] = &StrategyContext::passive;
+            creators["conserve mana"] = &StrategyContext::conserve_mana;
+            creators["food"] = &StrategyContext::food;
+            creators["chat"] = &StrategyContext::chat;
+            creators["default"] = &StrategyContext::world_packet;
+            creators["ready check"] = &StrategyContext::ready_check;
+            creators["dead"] = &StrategyContext::dead;
+            creators["flee"] = &StrategyContext::flee;
+            creators["duel"] = &StrategyContext::duel;
+            creators["kite"] = &StrategyContext::kite;
+            creators["potions"] = &StrategyContext::potions;
+            creators["cast time"] = &StrategyContext::cast_time;
+            creators["threat"] = &StrategyContext::threat;
+            creators["tell target"] = &StrategyContext::tell_target;
+            creators["pvp"] = &StrategyContext::pvp;
+            creators["move random"] = &StrategyContext::move_random;
+            creators["lfg"] = &StrategyContext::lfg;
+            creators["custom"] = &StrategyContext::custom;
+        }
+
+    private:
+        static Strategy* tell_target(PlayerbotAI* ai) { return new TellTargetStrategy(ai); }
+        static Strategy* threat(PlayerbotAI* ai) { return new ThreatStrategy(ai); }
+        static Strategy* cast_time(PlayerbotAI* ai) { return new CastTimeStrategy(ai); }
+        static Strategy* potions(PlayerbotAI* ai) { return new UsePotionsStrategy(ai); }
+        static Strategy* kite(PlayerbotAI* ai) { return new KiteStrategy(ai); }
+        static Strategy* duel(PlayerbotAI* ai) { return new DuelStrategy(ai); }
+        static Strategy* flee(PlayerbotAI* ai) { return new FleeStrategy(ai); }
+        static Strategy* dead(PlayerbotAI* ai) { return new DeadStrategy(ai); }
+        static Strategy* racials(PlayerbotAI* ai) { return new RacialsStrategy(ai); }
+        static Strategy* loot(PlayerbotAI* ai) { return new LootNonCombatStrategy(ai); }
+        static Strategy* gather(PlayerbotAI* ai) { return new GatherStrategy(ai); }
+        static Strategy* emote(PlayerbotAI* ai) { return new EmoteStrategy(ai); }
+        static Strategy* passive(PlayerbotAI* ai) { return new PassiveStrategy(ai); }
+        static Strategy* conserve_mana(PlayerbotAI* ai) { return new ConserveManaStrategy(ai); }
+        static Strategy* food(PlayerbotAI* ai) { return new UseFoodStrategy(ai); }
+        static Strategy* chat(PlayerbotAI* ai) { return new ChatCommandHandlerStrategy(ai); }
+        static Strategy* world_packet(PlayerbotAI* ai) { return new WorldPacketHandlerStrategy(ai); }
+        static Strategy* ready_check(PlayerbotAI* ai) { return new ReadyCheckStrategy(ai); }
+        static Strategy* pvp(PlayerbotAI* ai) { return new AttackEnemyPlayersStrategy(ai); }
+        static Strategy* move_random(PlayerbotAI* ai) { return new MoveRandomStrategy(ai); }
+        static Strategy* lfg(PlayerbotAI* ai) { return new LfgStrategy(ai); }
+        static Strategy* custom(PlayerbotAI* ai) { return new CustomStrategy(ai); }
+    };
+
+    class MovementStrategyContext : public NamedObjectContext<Strategy>
+    {
+    public:
+        MovementStrategyContext() : NamedObjectContext<Strategy>(false, true)
+        {
+            creators["follow"] = &MovementStrategyContext::follow_master;
+            creators["stay"] = &MovementStrategyContext::stay;
+            creators["runaway"] = &MovementStrategyContext::runaway;
+            creators["flee from adds"] = &MovementStrategyContext::flee_from_adds;
+            creators["guard"] = &MovementStrategyContext::guard;
+        }
+
+    private:
+        static Strategy* guard(PlayerbotAI* ai) { return new GuardStrategy(ai); }
+        static Strategy* follow_master(PlayerbotAI* ai) { return new FollowMasterStrategy(ai); }
+        static Strategy* stay(PlayerbotAI* ai) { return new StayStrategy(ai); }
+        static Strategy* runaway(PlayerbotAI* ai) { return new RunawayStrategy(ai); }
+        static Strategy* flee_from_adds(PlayerbotAI* ai) { return new FleeFromAddsStrategy(ai); }
+    };
+
+    class AssistStrategyContext : public NamedObjectContext<Strategy>
+    {
+    public:
+        AssistStrategyContext() : NamedObjectContext<Strategy>(false, true)
+        {
+            creators["dps assist"] = &AssistStrategyContext::dps_assist;
+            creators["dps aoe"] = &AssistStrategyContext::dps_aoe;
+            creators["tank assist"] = &AssistStrategyContext::tank_assist;
+            creators["tank aoe"] = &AssistStrategyContext::tank_aoe;
+            creators["attack weak"] = &AssistStrategyContext::attack_weak;
+            creators["grind"] = &AssistStrategyContext::grind;
+            creators["attack rti"] = &AssistStrategyContext::attack_rti;
+        }
+
+    private:
+        static Strategy* dps_assist(PlayerbotAI* ai) { return new DpsAssistStrategy(ai); }
+        static Strategy* dps_aoe(PlayerbotAI* ai) { return new DpsAoeStrategy(ai); }
+        static Strategy* tank_assist(PlayerbotAI* ai) { return new TankAssistStrategy(ai); }
+        static Strategy* tank_aoe(PlayerbotAI* ai) { return new TankAoeStrategy(ai); }
+        static Strategy* attack_weak(PlayerbotAI* ai) { return new AttackWeakStrategy(ai); }
+        static Strategy* grind(PlayerbotAI* ai) { return new GrindingStrategy(ai); }
+        static Strategy* attack_rti(PlayerbotAI* ai) { return new AttackRtiStrategy(ai); }
+    };
+
+    class QuestStrategyContext : public NamedObjectContext<Strategy>
+    {
+    public:
+        QuestStrategyContext() : NamedObjectContext<Strategy>(false, true)
+        {
+            creators["quest"] = &QuestStrategyContext::quest;
+            creators["accept all quests"] = &QuestStrategyContext::accept_all_quests;
+        }
+
+    private:
+        static Strategy* quest(PlayerbotAI* ai) { return new DefaultQuestStrategy(ai); }
+        static Strategy* accept_all_quests(PlayerbotAI* ai) { return new AcceptAllQuestsStrategy(ai); }
+    };
+};
diff --git a/src/plugins/playerbot/strategy/Trigger.cpp b/src/plugins/playerbot/strategy/Trigger.cpp
new file mode 100644
index 0000000..7487f33
--- /dev/null
+++ b/src/plugins/playerbot/strategy/Trigger.cpp
@@ -0,0 +1,27 @@
+#include "../../pchdef.h"
+#include "../playerbot.h"
+#include "Trigger.h"
+#include "Action.h"
+
+using namespace ai;
+
+Event Trigger::Check()
+{
+	if (IsActive())
+	{
+		Event event(getName());
+		return event;
+	}
+	Event event;
+	return event;
+}
+
+Value<Unit*>* Trigger::GetTargetValue()
+{
+    return context->GetValue<Unit*>(GetTargetName());
+}
+
+Unit* Trigger::GetTarget()
+{
+    return GetTargetValue()->Get();
+}
diff --git a/src/plugins/playerbot/strategy/Trigger.h b/src/plugins/playerbot/strategy/Trigger.h
new file mode 100644
index 0000000..2ae7276
--- /dev/null
+++ b/src/plugins/playerbot/strategy/Trigger.h
@@ -0,0 +1,84 @@
+#pragma once
+#include "Action.h"
+#include "Event.h"
+#include "../PlayerbotAIAware.h"
+
+#define NEXT_TRIGGERS(name, relevance) \
+    virtual NextAction* getNextAction() { return new NextAction(name, relevance); }
+
+#define BEGIN_TRIGGER(clazz, super) \
+class clazz : public super \
+    { \
+    public: \
+        clazz(PlayerbotAI* ai) : super(ai) {} \
+    public: \
+        virtual bool IsActive();
+
+#define END_TRIGGER() \
+    };
+
+namespace ai
+{
+    class Trigger : public AiNamedObject
+	{
+	public:
+        Trigger(PlayerbotAI* ai, string name = "trigger", int checkInterval = 1) : AiNamedObject(ai, name) {
+			this->checkInterval = checkInterval;
+			ticksElapsed = 0;
+        }
+        virtual ~Trigger() {}
+
+	public:
+        virtual Event Check();
+        virtual void ExternalEvent(string param, Player* owner = NULL) {}
+        virtual void ExternalEvent(WorldPacket &packet, Player* owner = NULL) {}
+        virtual bool IsActive() { return false; }
+        virtual NextAction** getHandlers() { return NULL; }
+        void Update() {}
+        virtual void Reset() {}
+        virtual Unit* GetTarget();
+        virtual Value<Unit*>* GetTargetValue();
+        virtual string GetTargetName() { return "self target"; }
+
+		bool needCheck() {
+			if (++ticksElapsed >= checkInterval) {
+				ticksElapsed = 0;
+				return true;
+			}
+			return false;
+		}
+
+    protected:
+		int checkInterval;
+		int ticksElapsed;
+	};
+
+
+    class TriggerNode
+    {
+    public:
+        TriggerNode(string name, NextAction** handlers = NULL)
+        {
+            this->name = name;
+            this->handlers = handlers;
+            this->trigger = NULL;
+        }
+        virtual ~TriggerNode()
+        {
+            NextAction::destroy(handlers);
+        }
+
+    public:
+        Trigger* getTrigger() { return trigger; }
+        void setTrigger(Trigger* trigger) { this->trigger = trigger; }
+        string getName() { return name; }
+
+    public:
+        NextAction** getHandlers() { return NextAction::merge(NextAction::clone(handlers), trigger->getHandlers()); }
+
+    private:
+        Trigger* trigger;
+        NextAction** handlers;
+        std::string name;
+    };
+}
diff --git a/src/plugins/playerbot/strategy/Value.cpp b/src/plugins/playerbot/strategy/Value.cpp
new file mode 100644
index 0000000..8b87c26
--- /dev/null
+++ b/src/plugins/playerbot/strategy/Value.cpp
@@ -0,0 +1,5 @@
+#include "../../pchdef.h"
+#include "../playerbot.h"
+#include "Value.h"
+
+using namespace ai;
diff --git a/src/plugins/playerbot/strategy/Value.h b/src/plugins/playerbot/strategy/Value.h
new file mode 100644
index 0000000..930e3f4
--- /dev/null
+++ b/src/plugins/playerbot/strategy/Value.h
@@ -0,0 +1,177 @@
+#pragma once
+#include "Action.h"
+#include "Event.h"
+#include "../PlayerbotAIAware.h"
+#include "AiObject.h"
+
+namespace ai
+{
+    class UntypedValue : public AiNamedObject
+    {
+    public:
+        UntypedValue(PlayerbotAI* ai, string name) : AiNamedObject(ai, name) {}
+        virtual void Update() {}
+        virtual void Reset() {}
+        virtual string Format() { return "?"; }
+    };
+
+    template<class T>
+    class Value
+    {
+    public:
+        virtual T Get() = 0;
+        virtual void Set(T value) = 0;
+        operator T() { return Get(); }
+    };
+
+    template<class T>
+    class CalculatedValue : public UntypedValue, public Value<T>
+	{
+	public:
+        CalculatedValue(PlayerbotAI* ai, string name = "value", int checkInterval = 1) : UntypedValue(ai, name),
+            checkInterval(checkInterval), ticksElapsed(checkInterval)
+        { }
+        virtual ~CalculatedValue() {}
+
+	public:
+        virtual T Get()
+        {
+            if (ticksElapsed >= checkInterval) {
+                ticksElapsed = 0;
+                value = Calculate();
+            }
+            return value;
+        }
+        virtual void Set(T value) { this->value = value; }
+        virtual void Update()
+        {
+            if (ticksElapsed < checkInterval) {
+                ticksElapsed++;
+            }
+        }
+
+    protected:
+        virtual T Calculate() = 0;
+
+    protected:
+		int checkInterval;
+		int ticksElapsed;
+        T value;
+	};
+
+    class Uint8CalculatedValue : public CalculatedValue<uint8>
+    {
+    public:
+        Uint8CalculatedValue(PlayerbotAI* ai, string name = "value", int checkInterval = 1) :
+            CalculatedValue<uint8>(ai, name, checkInterval) {}
+
+        virtual string Format()
+        {
+            ostringstream out; out << (int)Calculate();
+            return out.str();
+        }
+    };
+
+    class Uint32CalculatedValue : public CalculatedValue<uint32>
+    {
+    public:
+        Uint32CalculatedValue(PlayerbotAI* ai, string name = "value", int checkInterval = 1) :
+            CalculatedValue<uint32>(ai, name, checkInterval) {}
+
+        virtual string Format()
+        {
+            ostringstream out; out << (int)Calculate();
+            return out.str();
+        }
+    };
+
+    class FloatCalculatedValue : public CalculatedValue<float>
+    {
+    public:
+        FloatCalculatedValue(PlayerbotAI* ai, string name = "value", int checkInterval = 1) :
+            CalculatedValue<float>(ai, name, checkInterval) {}
+
+        virtual string Format()
+        {
+            ostringstream out; out << Calculate();
+            return out.str();
+        }
+    };
+
+    class BoolCalculatedValue : public CalculatedValue<bool>
+    {
+    public:
+        BoolCalculatedValue(PlayerbotAI* ai, string name = "value", int checkInterval = 1) :
+            CalculatedValue<bool>(ai, name, checkInterval) {}
+
+        virtual string Format()
+        {
+            return Calculate() ? "true" : "false";
+        }
+    };
+
+    class UnitCalculatedValue : public CalculatedValue<Unit*>
+    {
+    public:
+        UnitCalculatedValue(PlayerbotAI* ai, string name = "value", int checkInterval = 1) :
+            CalculatedValue<Unit*>(ai, name, checkInterval) {}
+
+        virtual string Format()
+        {
+            Unit* unit = Calculate();
+            return unit ? unit->GetName() : "<none>";
+        }
+    };
+
+    class ObjectGuidListCalculatedValue : public CalculatedValue<list<ObjectGuid> >
+    {
+    public:
+        ObjectGuidListCalculatedValue(PlayerbotAI* ai, string name = "value", int checkInterval = 1) :
+            CalculatedValue<list<ObjectGuid> >(ai, name, checkInterval) {}
+
+        virtual string Format()
+        {
+            ostringstream out; out << "{";
+            list<ObjectGuid> guids = Calculate();
+            for (list<ObjectGuid>::iterator i = guids.begin(); i != guids.end(); ++i)
+            {
+                ObjectGuid guid = *i;
+                out << guid.GetRawValue() << ",";
+            }
+            out << "}";
+            return out.str();
+        }
+    };
+
+    template<class T>
+    class ManualSetValue : public UntypedValue, public Value<T>
+    {
+    public:
+        ManualSetValue(PlayerbotAI* ai, T defaultValue, string name = "value") :
+            UntypedValue(ai, name), value(defaultValue), defaultValue(defaultValue) {}
+        virtual ~ManualSetValue() {}
+
+    public:
+        virtual T Get() { return value; }
+        virtual void Set(T value) { this->value = value; }
+        virtual void Update() { }
+        virtual void Reset() { value = defaultValue; }
+
+    protected:
+        T value;
+        T defaultValue;
+    };
+
+    class UnitManualSetValue : public ManualSetValue<Unit*>
+    {
+    public:
+        UnitManualSetValue(PlayerbotAI* ai, Unit* defaultValue, string name = "value") :
+            ManualSetValue<Unit*>(ai, defaultValue, name) {}
+
+        virtual string Format()
+        {
+            Unit* unit = Get();
+            return unit ? unit->GetName() : "<none>";
+        }
+    };
+}
diff --git a/src/plugins/playerbot/strategy/actions/AcceptDuelAction.h b/src/plugins/playerbot/strategy/actions/AcceptDuelAction.h
new file mode 100644
index 0000000..461ea7e
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/AcceptDuelAction.h
@@ -0,0 +1,31 @@
+#pragma once
+
+#include "../Action.h"
+
+namespace ai
+{
+    class AcceptDuelAction : public Action
+    {
+    public:
+        AcceptDuelAction(PlayerbotAI* ai) : Action(ai, "accept duel")
+        {}
+
+        virtual bool Execute(Event event)
+        {
+            WorldPacket p(event.getPacket());
+
+            ObjectGuid flagGuid;
+            p >> flagGuid;
+            ObjectGuid playerGuid;
+            p >> playerGuid;
+
+            WorldPacket* const packet = new WorldPacket(CMSG_DUEL_ACCEPTED, 8);
+            *packet << flagGuid;
+            bot->GetSession()->QueuePacket(packet);
+
+            ai->ResetStrategies();
+            return true;
+        }
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/actions/AcceptInvitationAction.h b/src/plugins/playerbot/strategy/actions/AcceptInvitationAction.h
new file mode 100644
index 0000000..096fb84
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/AcceptInvitationAction.h
@@ -0,0 +1,47 @@
+#pragma once
+
+#include "../Action.h"
+#include "../../../Globals/ObjectMgr.h"
+
+namespace ai
+{
+    class AcceptInvitationAction : public Action {
+    public:
+        AcceptInvitationAction(PlayerbotAI* ai) : Action(ai, "accept invitation") {}
+
+        virtual bool Execute(Event event)
+        {
+            Player* master = GetMaster();
+
+            Group* grp = bot->GetGroupInvite();
+            if (!grp)
+                return false;
+
+            Player* inviter = sObjectMgr->GetPlayerByLowGUID(grp->GetLeaderGUID());
+            if (!inviter)
+                return false;
+
+			if (!ai->GetSecurity()->CheckLevelFor(PLAYERBOT_SECURITY_INVITE, false, inviter))
+            {
+                WorldPacket data(SMSG_GROUP_DECLINE, 10);
+                data << bot->GetName();
+                inviter->GetSession()->SendPacket(&data);
+                bot->UninviteFromGroup();
+                return false;
+            }
+
+            WorldPacket p;
+            uint32 roles_mask = 0;
+            p << roles_mask;
+            bot->GetSession()->HandleGroupAcceptOpcode(p);
+
+            if (sRandomPlayerbotMgr.IsRandomBot(bot))
+                bot->GetPlayerbotAI()->SetMaster(inviter);
+
+            ai->ResetStrategies();
+            ai->TellMaster("Hello");
+            return true;
+        }
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/actions/AcceptQuestAction.cpp b/src/plugins/playerbot/strategy/actions/AcceptQuestAction.cpp
new file mode 100644
index 0000000..af63f76
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/AcceptQuestAction.cpp
@@ -0,0 +1,102 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "AcceptQuestAction.h"
+
+using namespace ai;
+
+void AcceptAllQuestsAction::ProcessQuest(Quest const* quest, WorldObject* questGiver)
+{
+    AcceptQuest(quest, questGiver->GetGUID());
+}
+
+bool AcceptQuestAction::Execute(Event event)
+{
+    Player* master = GetMaster();
+
+    if (!master)
+        return false;
+
+    Player *bot = ai->GetBot();
+    uint64 guid;
+    uint32 quest;
+
+    string text = event.getParam();
+    PlayerbotChatHandler ch(master);
+    quest = ch.extractQuestId(text);
+    if (quest)
+    {
+        Unit* npc = master->GetSelectedUnit();
+        if (!npc)
+        {
+            ai->TellMaster("Please select quest giver NPC");
+            return false;
+        }
+    }
+    else if (!event.getPacket().empty())
+    {
+        WorldPacket& p = event.getPacket();
+        p.rpos(0);
+        p >> guid >> quest;
+    }
+    else if (text == "*")
+    {
+        return QuestAction::Execute(event);
+    }
+    else
+        return false;
+
+    Quest const* qInfo = sObjectMgr->GetQuestTemplate(quest);
+    if (!qInfo)
+        return false;
+
+    return AcceptQuest(qInfo, guid);
+}
+
+bool AcceptQuestShareAction::Execute(Event event)
+{
+    Player* master = GetMaster();
+    Player *bot = ai->GetBot();
+
+    WorldPacket& p = event.getPacket();
+    p.rpos(0);
+    uint32 quest;
+    p >> quest;
+    Quest const* qInfo = sObjectMgr->GetQuestTemplate(quest);
+
+    if (!qInfo || !bot->GetDivider())
+        return false;
+
+    quest = qInfo->GetQuestId();
+    if( !bot->CanTakeQuest( qInfo, false ) )
+    {
+        // can't take quest
+        bot->SetDivider( ObjectGuid() );
+        ai->TellMaster("I can't take this quest");
+
+        return false;
+    }
+
+    // send msg to quest giving player
+    master->SendPushToPartyResponse( bot, QUEST_PARTY_MSG_ACCEPT_QUEST );
+    bot->SetDivider( ObjectGuid() );
+
+    if( bot->CanAddQuest( qInfo, false ) )
+    {
+        bot->AddQuest( qInfo, master );
+
+        if( bot->CanCompleteQuest( quest ) )
+            bot->CompleteQuest( quest );
+
+        // Runsttren: did not add typeid switch from WorldSession::HandleQuestgiverAcceptQuestOpcode!
+        // I think it's not needed, cause typeid should be TYPEID_PLAYER - and this one is not handled
+        // there and there is no default case also.
+
+        if( qInfo->GetSrcSpell() > 0 )
+            bot->CastSpell( bot, qInfo->GetSrcSpell(), true );
+
+        ai->TellMaster("Quest accepted");
+        return true;
+    }
+
+    return false;
+}
diff --git a/src/plugins/playerbot/strategy/actions/AcceptQuestAction.h b/src/plugins/playerbot/strategy/actions/AcceptQuestAction.h
new file mode 100644
index 0000000..856c697
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/AcceptQuestAction.h
@@ -0,0 +1,27 @@
+#pragma once
+
+#include "../Action.h"
+#include "QuestAction.h"
+
+namespace ai
+{
+    class AcceptAllQuestsAction : public QuestAction {
+    public:
+        AcceptAllQuestsAction(PlayerbotAI* ai, string name = "accept all quests") : QuestAction(ai, name) {}
+
+    protected:
+        virtual void ProcessQuest(Quest const* quest, WorldObject* questGiver);
+    };
+
+    class AcceptQuestAction : public AcceptAllQuestsAction {
+    public:
+        AcceptQuestAction(PlayerbotAI* ai) : AcceptAllQuestsAction(ai, "accept quest") {}
+        virtual bool Execute(Event event);
+    };
+
+    class AcceptQuestShareAction : public Action {
+    public:
+        AcceptQuestShareAction(PlayerbotAI* ai) : Action(ai, "accept quest share") {}
+        virtual bool Execute(Event event);
+    };
+}
diff --git a/src/plugins/playerbot/strategy/actions/AcceptResurrectAction.h b/src/plugins/playerbot/strategy/actions/AcceptResurrectAction.h
new file mode 100644
index 0000000..77dd0dd
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/AcceptResurrectAction.h
@@ -0,0 +1,31 @@
+#pragma once
+
+#include "../Action.h"
+
+namespace ai
+{
+    class AcceptResurrectAction : public Action {
+    public:
+        AcceptResurrectAction(PlayerbotAI* ai) : Action(ai, "accept resurrect") {}
+
+        virtual bool Execute(Event event)
+        {
+            if (bot->IsAlive())
+                return false;
+
+            WorldPacket p(event.getPacket());
+            p.rpos(0);
+            ObjectGuid guid;
+            p >> guid;
+
+            WorldPacket* const packet = new WorldPacket(CMSG_RESURRECT_RESPONSE, 8+1);
+            *packet << guid;
+            *packet << uint8(1);                        // accept
+            bot->GetSession()->QueuePacket(packet);   // queue the packet to get around race condition
+
+            ai->ChangeEngine(BOT_STATE_NON_COMBAT);
+            return true;
+        }
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/actions/ActionContext.h b/src/plugins/playerbot/strategy/actions/ActionContext.h
new file mode 100644
index 0000000..126fd59
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/ActionContext.h
@@ -0,0 +1,113 @@
+#pragma once
+
+#include "GenericActions.h"
+#include "NonCombatActions.h"
+#include "EmoteAction.h"
+#include "AddLootAction.h"
+#include "LootAction.h"
+#include "AddLootAction.h"
+#include "StayActions.h"
+#include "FollowActions.h"
+#include "ChangeStrategyAction.h"
+#include "ChooseTargetActions.h"
+#include "SuggestWhatToDoAction.h"
+#include "PositionAction.h"
+#include "AttackAction.h"
+#include "CheckMailAction.h"
+#include "SayAction.h"
+
+namespace ai
+{
+    class ActionContext : public NamedObjectContext<Action>
+    {
+    public:
+        ActionContext()
+        {
+            creators["attack"] = &ActionContext::melee;
+            creators["melee"] = &ActionContext::melee;
+            creators["reach spell"] = &ActionContext::ReachSpell;
+            creators["reach melee"] = &ActionContext::ReachMelee;
+            creators["flee"] = &ActionContext::flee;
+            creators["gift of the naaru"] = &ActionContext::gift_of_the_naaru;
+            creators["shoot"] = &ActionContext::shoot;
+            creators["lifeblood"] = &ActionContext::lifeblood;
+            creators["arcane torrent"] = &ActionContext::arcane_torrent;
+            creators["end pull"] = &ActionContext::end_pull;
+            creators["healthstone"] = &ActionContext::healthstone;
+            creators["healing potion"] = &ActionContext::healing_potion;
+            creators["mana potion"] = &ActionContext::mana_potion;
+            creators["food"] = &ActionContext::food;
+            creators["drink"] = &ActionContext::drink;
+            creators["tank assist"] = &ActionContext::tank_assist;
+            creators["dps assist"] = &ActionContext::dps_assist;
+            creators["attack rti target"] = &ActionContext::attack_rti_target;
+            creators["loot"] = &ActionContext::loot;
+            creators["add loot"] = &ActionContext::add_loot;
+            creators["add gathering loot"] = &ActionContext::add_gathering_loot;
+            creators["add all loot"] = &ActionContext::add_all_loot;
+            creators["shoot"] = &ActionContext::shoot;
+            creators["follow"] = &ActionContext::follow;
+            creators["follow"] = &ActionContext::follow;
+            creators["runaway"] = &ActionContext::runaway;
+            creators["stay"] = &ActionContext::stay;
+            creators["attack anything"] = &ActionContext::attack_anything;
+            creators["attack least hp target"] = &ActionContext::attack_least_hp_target;
+            creators["attack enemy player"] = &ActionContext::enemy_player_target;
+            creators["emote"] = &ActionContext::emote;
+            creators["suggest what to do"] = &ActionContext::suggest_what_to_do;
+            creators["move random"] = &ActionContext::move_random;
+            creators["move to loot"] = &ActionContext::move_to_loot;
+            creators["open loot"] = &ActionContext::open_loot;
+            creators["guard"] = &ActionContext::guard;
+            creators["move out of enemy contact"] = &ActionContext::move_out_of_enemy_contact;
+            creators["set facing"] = &ActionContext::set_facing;
+            creators["attack duel opponent"] = &ActionContext::attack_duel_opponent;
+            creators["drop target"] = &ActionContext::drop_target;
+            creators["check mail"] = &ActionContext::check_mail;
+            creators["say"] = &ActionContext::say;
+        }
+
+    private:
+        static Action* check_mail(PlayerbotAI* ai) { return new CheckMailAction(ai); }
+        static Action* drop_target(PlayerbotAI* ai) { return new DropTargetAction(ai); }
+        static Action* attack_duel_opponent(PlayerbotAI* ai) { return new AttackDuelOpponentAction(ai); }
+        static Action* guard(PlayerbotAI* ai) { return new GuardAction(ai); }
+        static Action* open_loot(PlayerbotAI* ai) { return new OpenLootAction(ai); }
+        static Action* move_to_loot(PlayerbotAI* ai) { return new MoveToLootAction(ai); }
+        static Action* move_random(PlayerbotAI* ai) { return new MoveRandomAction(ai); }
+        static Action* shoot(PlayerbotAI* ai) { return new CastShootAction(ai); }
+        static Action* melee(PlayerbotAI* ai) { return new MeleeAction(ai); }
+        static Action* ReachSpell(PlayerbotAI* ai) { return new ReachSpellAction(ai); }
+        static Action* ReachMelee(PlayerbotAI* ai) { return new ReachMeleeAction(ai); }
+        static Action* flee(PlayerbotAI* ai) { return new FleeAction(ai); }
+        static Action* gift_of_the_naaru(PlayerbotAI* ai) { return new CastGiftOfTheNaaruAction(ai); }
+        static Action* lifeblood(PlayerbotAI* ai) { return new CastLifeBloodAction(ai); }
+        static Action* arcane_torrent(PlayerbotAI* ai) { return new CastArcaneTorrentAction(ai); }
+        static Action* end_pull(PlayerbotAI* ai) { return new ChangeCombatStrategyAction(ai, "-pull"); }
+
+        static Action* emote(PlayerbotAI* ai) { return new EmoteAction(ai); }
+        static Action* suggest_what_to_do(PlayerbotAI* ai) { return new SuggestWhatToDoAction(ai); }
+        static Action* attack_anything(PlayerbotAI* ai) { return new AttackAnythingAction(ai); }
+        static Action* attack_least_hp_target(PlayerbotAI* ai) { return new AttackLeastHpTargetAction(ai); }
+        static Action* enemy_player_target(PlayerbotAI* ai) { return new AttackEnemyPlayerAction(ai); }
+        static Action* stay(PlayerbotAI* ai) { return new StayAction(ai); }
+        static Action* runaway(PlayerbotAI* ai) { return new RunAwayAction(ai); }
+        static Action* follow(PlayerbotAI* ai) { return new FollowAction(ai); }
+        static Action* add_gathering_loot(PlayerbotAI* ai) { return new AddGatheringLootAction(ai); }
+        static Action* add_loot(PlayerbotAI* ai) { return new AddLootAction(ai); }
+        static Action* add_all_loot(PlayerbotAI* ai) { return new AddAllLootAction(ai); }
+        static Action* loot(PlayerbotAI* ai) { return new LootAction(ai); }
+        static Action* dps_assist(PlayerbotAI* ai) { return new DpsAssistAction(ai); }
+        static Action* attack_rti_target(PlayerbotAI* ai) { return new AttackRtiTargetAction(ai); }
+        static Action* tank_assist(PlayerbotAI* ai) { return new TankAssistAction(ai); }
+        static Action* drink(PlayerbotAI* ai) { return new DrinkAction(ai); }
+        static Action* food(PlayerbotAI* ai) { return new EatAction(ai); }
+        static Action* mana_potion(PlayerbotAI* ai) { return new UseManaPotion(ai); }
+        static Action* healing_potion(PlayerbotAI* ai) { return new UseHealingPotion(ai); }
+        static Action* healthstone(PlayerbotAI* ai) { return new UseItemAction(ai, "healthstone"); }
+        static Action* move_out_of_enemy_contact(PlayerbotAI* ai) { return new MoveOutOfEnemyContactAction(ai); }
+        static Action* set_facing(PlayerbotAI* ai) { return new SetFacingTargetAction(ai); }
+        static Action* say(PlayerbotAI* ai) { return new SayAction(ai); }
+    };
+
+};
diff --git a/src/plugins/playerbot/strategy/actions/AddLootAction.cpp b/src/plugins/playerbot/strategy/actions/AddLootAction.cpp
new file mode 100644
index 0000000..4d2c3ae
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/AddLootAction.cpp
@@ -0,0 +1,62 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "AddLootAction.h"
+
+#include "../../LootObjectStack.h"
+
+using namespace ai;
+
+bool AddLootAction::Execute(Event event)
+{
+    ObjectGuid guid = event.getObject();
+    if (!guid)
+        return false;
+
+    return AI_VALUE(LootObjectStack*, "available loot")->Add(guid);
+}
+
+bool AddAllLootAction::Execute(Event event)
+{
+    bool added = false;
+
+    list<ObjectGuid> gos = context->GetValue<list<ObjectGuid> >("nearest game objects")->Get();
+    for (list<ObjectGuid>::iterator i = gos.begin(); i != gos.end(); i++)
+        added |= AddLoot(*i);
+
+    list<ObjectGuid> corpses = context->GetValue<list<ObjectGuid> >("nearest corpses")->Get();
+    for (list<ObjectGuid>::iterator i = corpses.begin(); i != corpses.end(); i++)
+        added |= AddLoot(*i);
+
+    return added;
+}
+
+bool AddLootAction::isUseful()
+{
+    return AI_VALUE(uint8, "bag space") < 80;
+}
+
+bool AddAllLootAction::isUseful()
+{
+    return AI_VALUE(uint8, "bag space") < 80;
+}
+
+bool AddAllLootAction::AddLoot(ObjectGuid guid)
+{
+    return AI_VALUE(LootObjectStack*, "available loot")->Add(guid);
+}
+
+bool AddGatheringLootAction::AddLoot(ObjectGuid guid)
+{
+    LootObject loot(bot, guid);
+
+    if (loot.IsEmpty() || !loot.GetWorldObject(bot))
+        return false;
+
+    if (loot.skillId == SKILL_NONE)
+        return false;
+
+    if (!loot.IsLootPossible(bot))
+        return false;
+
+    return AddAllLootAction::AddLoot(guid);
+}
diff --git a/src/plugins/playerbot/strategy/actions/AddLootAction.h b/src/plugins/playerbot/strategy/actions/AddLootAction.h
new file mode 100644
index 0000000..402c50a
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/AddLootAction.h
@@ -0,0 +1,32 @@
+#pragma once
+
+#include "../Action.h"
+
+namespace ai
+{
+    class AddLootAction : public Action {
+    public:
+        AddLootAction(PlayerbotAI* ai) : Action(ai, "add loot") {}
+        virtual bool Execute(Event event);
+        virtual bool isUseful();
+    };
+
+    class AddAllLootAction : public Action {
+    public:
+        AddAllLootAction(PlayerbotAI* ai, string name = "add all loot") : Action(ai, name) {}
+        virtual bool Execute(Event event);
+        virtual bool isUseful();
+
+    protected:
+        virtual bool AddLoot(ObjectGuid guid);
+    };
+
+    class AddGatheringLootAction : public AddAllLootAction {
+    public:
+        AddGatheringLootAction(PlayerbotAI* ai) : AddAllLootAction(ai, "add gathering loot") {}
+
+    protected:
+        virtual bool AddLoot(ObjectGuid guid);
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/actions/AreaTriggerAction.cpp b/src/plugins/playerbot/strategy/actions/AreaTriggerAction.cpp
new file mode 100644
index 0000000..0d427c3
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/AreaTriggerAction.cpp
@@ -0,0 +1,73 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "AreaTriggerAction.h"
+#include "../../PlayerbotAIConfig.h"
+
+
+using namespace ai;
+
+bool ReachAreaTriggerAction::Execute(Event event)
+{
+    uint32 triggerId;
+    WorldPacket p(event.getPacket());
+    p.rpos(0);
+    p >> triggerId;
+
+    AreaTriggerEntry const* atEntry = sAreaTriggerStore.LookupEntry(triggerId);
+    if(!atEntry)
+        return false;
+
+    AreaTrigger const* at = sObjectMgr->GetAreaTrigger(triggerId);
+    if (!at)
+    {
+        WorldPacket p1(CMSG_AREATRIGGER);
+        p1 << triggerId;
+        p1.rpos(0);
+        bot->GetSession()->HandleAreaTriggerOpcode(p1);
+
+        return true;
+    }
+
+    if (bot->GetMapId() != atEntry->mapid || bot->GetDistance(atEntry->x, atEntry->y, atEntry->z) > sPlayerbotAIConfig.sightDistance)
+    {
+        ai->TellMaster("I won't follow: too far away");
+        return true;
+    }
+
+    MotionMaster &mm = *bot->GetMotionMaster();
+    mm.Clear();
+	mm.MovePoint(atEntry->mapid, atEntry->x, atEntry->y, atEntry->z);
+    float distance = bot->GetDistance(atEntry->x, atEntry->y, atEntry->z);
+    float delay = 1000.0f * distance / bot->GetSpeed(MOVE_RUN) + sPlayerbotAIConfig.reactDelay;
+    ai->TellMaster("Wait for me");
+    ai->SetNextCheckDelay(delay);
+    context->GetValue<LastMovement&>("last movement")->Get().lastAreaTrigger = triggerId;
+
+    return true;
+}
+
+
+
+bool AreaTriggerAction::Execute(Event event)
+{
+    LastMovement& movement = context->GetValue<LastMovement&>("last movement")->Get();
+
+    uint32 triggerId = movement.lastAreaTrigger;
+    movement.lastAreaTrigger = 0;
+
+    AreaTriggerEntry const* atEntry = sAreaTriggerStore.LookupEntry(triggerId);
+    if(!atEntry)
+        return false;
+
+    AreaTrigger const* at = sObjectMgr->GetAreaTrigger(triggerId);
+    if (!at)
+        return true;
+
+    WorldPacket p(CMSG_AREATRIGGER);
+    p << triggerId;
+    p.rpos(0);
+    bot->GetSession()->HandleAreaTriggerOpcode(p);
+
+    ai->TellMaster("Hello");
+    return true;
+}
diff --git a/src/plugins/playerbot/strategy/actions/AreaTriggerAction.h b/src/plugins/playerbot/strategy/actions/AreaTriggerAction.h
new file mode 100644
index 0000000..de2b63a
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/AreaTriggerAction.h
@@ -0,0 +1,23 @@
+#pragma once
+
+#include "../Action.h"
+#include "MovementActions.h"
+#include "../values/LastMovementValue.h"
+
+namespace ai
+{
+    class ReachAreaTriggerAction : public MovementAction {
+    public:
+        ReachAreaTriggerAction(PlayerbotAI* ai) : MovementAction(ai, "reach area trigger") {}
+
+        virtual bool Execute(Event event);
+    };
+
+    class AreaTriggerAction : public MovementAction {
+    public:
+        AreaTriggerAction(PlayerbotAI* ai) : MovementAction(ai, "area trigger") {}
+
+        virtual bool Execute(Event event);
+    };
+
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/actions/AttackAction.cpp b/src/plugins/playerbot/strategy/actions/AttackAction.cpp
new file mode 100644
index 0000000..ded8aab
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/AttackAction.cpp
@@ -0,0 +1,104 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "AttackAction.h"
+#include "../../../Movement/MovementGenerator.h"
+#include "../../../game/AI/CreatureAI.h"
+#include "../../../Entities/Pet/Pet.h"
+#include "../../LootObjectStack.h"
+
+using namespace ai;
+
+bool AttackAction::Execute(Event event)
+{
+    Unit* target = GetTarget();
+
+    if (!target)
+        return false;
+
+    return Attack(target);
+}
+
+bool AttackMyTargetAction::Execute(Event event)
+{
+    Player* master = GetMaster();
+    if (!master)
+        return false;
+
+    Unit* target = master->GetSelectedUnit();
+    if (!target)
+    {
+        if (verbose) ai->TellMaster("You have no target");
+        return false;
+    }
+
+    return Attack(target);
+}
+
+bool AttackAction::Attack(Unit* target)
+{
+    MotionMaster &mm = *bot->GetMotionMaster();
+    if (bot->IsFlying())
+    {
+        if (verbose) ai->TellMaster("I cannot attack in flight");
+        return false;
+    }
+
+    if (!target)
+    {
+        if (verbose) ai->TellMaster("I have no target");
+        return false;
+    }
+
+    ostringstream msg;
+    msg << target->GetName();
+    if (bot->IsFriendlyTo(target))
+    {
+        msg << " is friendly to me";
+        if (verbose) ai->TellMaster(msg.str());
+        return false;
+    }
+    if (!bot->IsWithinLOSInMap(target))
+    {
+        msg << " is not on my sight";
+        if (verbose) ai->TellMaster(msg.str());
+        return false;
+    }
+
+    if (bot->IsMounted())
+    {
+        WorldPacket emptyPacket;
+        bot->GetSession()->HandleCancelMountAuraOpcode(emptyPacket);
+    }
+
+    ObjectGuid guid = target->GetGUID();
+    bot->SetSelection(target->GetGUID());
+
+    Unit* oldTarget = context->GetValue<Unit*>("current target")->Get();
+    context->GetValue<Unit*>("old target")->Set(oldTarget);
+
+    context->GetValue<Unit*>("current target")->Set(target);
+    context->GetValue<LootObjectStack*>("available loot")->Get()->Add(guid);
+
+    Pet* pet = bot->GetPet();
+    if (pet)
+    {
+        pet->SetTarget(target->GetGUID());
+        pet->AI()->EnterCombat(target);
+		pet->GetCharmInfo()->SetIsCommandAttack(true);
+		pet->AI()->AttackStart(target);
+    }
+
+    bot->Attack(target, true);
+    ai->ChangeEngine(BOT_STATE_COMBAT);
+    return true;
+}
+
+bool AttackDuelOpponentAction::isUseful()
+{
+    return AI_VALUE(Unit*, "duel target");
+}
+
+bool AttackDuelOpponentAction::Execute(Event event)
+{
+    return Attack(AI_VALUE(Unit*, "duel target"));
+}
diff --git a/src/plugins/playerbot/strategy/actions/AttackAction.h b/src/plugins/playerbot/strategy/actions/AttackAction.h
new file mode 100644
index 0000000..ede665d
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/AttackAction.h
@@ -0,0 +1,38 @@
+#pragma once
+
+#include "../Action.h"
+#include "MovementActions.h"
+
+namespace ai
+{
+	class AttackAction : public MovementAction
+	{
+	public:
+		AttackAction(PlayerbotAI* ai, string name) : MovementAction(ai, name) {}
+
+    public:
+        virtual bool Execute(Event event);
+
+    protected:
+        bool Attack(Unit* target);
+    };
+
+    class AttackMyTargetAction : public AttackAction
+    {
+    public:
+        AttackMyTargetAction(PlayerbotAI* ai, string name = "attack my target") : AttackAction(ai, name) {}
+
+    public:
+        virtual bool Execute(Event event);
+    };
+
+    class AttackDuelOpponentAction : public AttackAction
+    {
+    public:
+        AttackDuelOpponentAction(PlayerbotAI* ai, string name = "attack duel opponent") : AttackAction(ai, name) {}
+
+    public:
+        virtual bool Execute(Event event);
+        virtual bool isUseful();
+    };
+}
diff --git a/src/plugins/playerbot/strategy/actions/BankAction.cpp b/src/plugins/playerbot/strategy/actions/BankAction.cpp
new file mode 100644
index 0000000..c7254be
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/BankAction.cpp
@@ -0,0 +1,168 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "BankAction.h"
+
+#include "../values/ItemCountValue.h"
+
+using namespace std;
+using namespace ai;
+
+bool BankAction::Execute(Event event)
+{
+    string text = event.getParam();
+
+    list<ObjectGuid> npcs = AI_VALUE(list<ObjectGuid>, "nearest npcs");
+    for (list<ObjectGuid>::iterator i = npcs.begin(); i != npcs.end(); i++)
+    {
+        Unit* npc = ai->GetUnit(*i);
+        if (!npc || !bot->GetNPCIfCanInteractWith(npc->GetGUID(), UNIT_NPC_FLAG_BANKER))
+            continue;
+
+        return Execute(text, npc);
+    }
+
+    ai->TellMaster("Cannot find banker nearby");
+    return false;
+}
+
+bool BankAction::Execute(string text, Unit* bank)
+{
+    if (text.empty() || text == "?")
+    {
+        ListItems();
+        return true;
+    }
+
+    bool result = false;
+    if (text[0] == '-')
+    {
+        ItemIds found = chat->parseItems(text);
+        for (ItemIds::iterator i = found.begin(); i != found.end(); i++)
+        {
+            uint32 itemId = *i;
+            result &= Withdraw(itemId);
+        }
+    }
+    else
+    {
+        list<Item*> found = parseItems(text);
+        if (found.empty())
+            return false;
+
+        for (list<Item*>::iterator i = found.begin(); i != found.end(); i++)
+        {
+            Item* item = *i;
+            if (!item)
+                continue;
+
+            result &= Deposit(item);
+        }
+    }
+
+    return result;
+}
+
+bool BankAction::Withdraw(const uint32 itemid)
+{
+    Item* pItem = FindItemInBank(itemid);
+    if (!pItem)
+        return false;
+
+    ItemPosCountVec dest;
+    InventoryResult msg = bot->CanStoreItem(NULL_BAG, NULL_SLOT, dest, pItem, false);
+    if (msg != EQUIP_ERR_OK)
+    {
+        bot->SendEquipError(msg, pItem, NULL);
+        return false;
+    }
+
+    bot->RemoveItem(pItem->GetBagSlot(), pItem->GetSlot(), true);
+    bot->StoreItem(dest, pItem, true);
+
+    std::ostringstream out;
+    out << "got " << chat->formatItem(pItem->GetTemplate(), pItem->GetCount()) << " from bank";
+    ai->TellMaster(out.str());
+    return true;
+}
+
+bool BankAction::Deposit(Item* pItem)
+{
+    std::ostringstream out;
+
+    ItemPosCountVec dest;
+    InventoryResult msg = bot->CanBankItem(NULL_BAG, NULL_SLOT, dest, pItem, false);
+    if (msg != EQUIP_ERR_OK)
+    {
+        bot->SendEquipError(msg, pItem, NULL);
+        return false;
+    }
+
+    bot->RemoveItem(pItem->GetBagSlot(), pItem->GetSlot(), true);
+    bot->BankItem(dest, pItem, true);
+
+    out << "put " << chat->formatItem(pItem->GetTemplate(), pItem->GetCount()) << " to bank";
+    ai->TellMaster(out.str());
+	return true;
+}
+
+void BankAction::ListItems()
+{
+    ai->TellMaster("=== Bank ===");
+
+    map<uint32, int> items;
+    for (uint8 bag = BANK_SLOT_BAG_START; bag < BANK_SLOT_BAG_END; ++bag)
+    {
+        const Bag* const pBag = static_cast<Bag *>(bot->GetItemByPos(INVENTORY_SLOT_BAG_0, bag));
+        if (pBag)
+        {
+            const ItemTemplate* const pBagProto = pBag->GetTemplate();
+            std::string bagName = pBagProto->Name1;
+
+            for (uint8 slot = 0; slot < pBag->GetBagSize(); ++slot)
+            {
+                Item* const item = bot->GetItemByPos(bag, slot);
+                if (item)
+                    items[item->GetTemplate()->ItemId] = item->GetCount();
+            }
+        }
+    }
+
+    TellItems(items);
+}
+
+Item* BankAction::FindItemInBank(uint32 ItemId)
+{
+    for (uint8 slot = BANK_SLOT_ITEM_START; slot < BANK_SLOT_ITEM_END; slot++)
+    {
+        Item* const pItem = bot->GetItemByPos(INVENTORY_SLOT_BAG_0, slot);
+        if (pItem)
+        {
+            const ItemTemplate* const pItemProto = pItem->GetTemplate();
+            if (!pItemProto)
+                continue;
+
+            if (pItemProto->ItemId == ItemId)   // have required item
+                return pItem;
+        }
+    }
+
+    for (uint8 bag = BANK_SLOT_BAG_START; bag < BANK_SLOT_BAG_END; ++bag)
+    {
+        const Bag* const pBag = (Bag *) bot->GetItemByPos(INVENTORY_SLOT_BAG_0, bag);
+        if (pBag)
+            for (uint8 slot = 0; slot < pBag->GetBagSize(); ++slot)
+            {
+                Item* const pItem = bot->GetItemByPos(bag, slot);
+                if (pItem)
+                {
+                    const ItemTemplate* const pItemProto = pItem->GetTemplate();
+                    if (!pItemProto)
+                        continue;
+
+                    if (pItemProto->ItemId == ItemId)
+                        return pItem;
+                }
+            }
+    }
+    return NULL;
+}
diff --git a/src/plugins/playerbot/strategy/actions/BankAction.h b/src/plugins/playerbot/strategy/actions/BankAction.h
new file mode 100644
index 0000000..6b22095
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/BankAction.h
@@ -0,0 +1,21 @@
+#pragma once
+
+#include "../Action.h"
+#include "InventoryAction.h"
+
+namespace ai
+{
+    class BankAction : public InventoryAction {
+    public:
+        BankAction(PlayerbotAI* ai) : InventoryAction(ai, "bank") {}
+        virtual bool Execute(Event event);
+
+    private:
+        bool Execute(string text, Unit* bank);
+        void ListItems();
+        bool Withdraw(const uint32 itemid);
+        bool Deposit(Item* pItem);
+        Item* FindItemInBank(uint32 ItemId);
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/actions/BuffAction.cpp b/src/plugins/playerbot/strategy/actions/BuffAction.cpp
new file mode 100644
index 0000000..0675f2e
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/BuffAction.cpp
@@ -0,0 +1,118 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "BuffAction.h"
+
+#include "../values/ItemCountValue.h"
+
+using namespace ai;
+
+class FindBuffVisitor : public IterateItemsVisitor {
+public:
+    FindBuffVisitor(Player* bot) : IterateItemsVisitor(), bot(bot)
+    {
+    }
+
+    virtual bool Visit(Item* item)
+    {
+        if (bot->CanUseItem(item->GetTemplate()) != EQUIP_ERR_OK)
+            return true;
+
+        const ItemTemplate* proto = item->GetTemplate();
+
+        if (proto->Class != ITEM_CLASS_CONSUMABLE)
+            return true;
+
+        if (proto->SubClass != ITEM_SUBCLASS_ELIXIR && 
+            proto->SubClass != ITEM_SUBCLASS_FLASK &&
+            proto->SubClass != ITEM_SUBCLASS_SCROLL && 
+            proto->SubClass != ITEM_SUBCLASS_FOOD &&
+            proto->SubClass != ITEM_SUBCLASS_CONSUMABLE_OTHER &&
+            proto->SubClass != ITEM_SUBCLASS_ITEM_ENHANCEMENT)
+            return true;
+
+        for (int i=0; i<MAX_ITEM_PROTO_SPELLS; i++)
+        {
+            uint32 spellId = proto->Spells[i].SpellId;
+            if (!spellId)
+                continue;
+
+            if (bot->HasAura(spellId))
+                return true;
+
+            Item* itemForSpell = *bot->GetPlayerbotAI()->GetAiObjectContext()->GetValue<Item*>("item for spell", spellId);
+            if (itemForSpell && itemForSpell->GetEnchantmentId(TEMP_ENCHANTMENT_SLOT))
+                return true;
+        
+            if (items.find(proto->SubClass) == items.end())
+                items[proto->SubClass] = list<Item*>();
+
+            items[proto->SubClass].push_back(item);
+            break;
+        }
+
+        return true;
+    }
+
+public:
+    map<uint32, list<Item*> > items;
+
+private:
+    Player* bot;
+};
+
+void BuffAction::TellHeader(uint32 subClass)
+{
+    switch (subClass)
+    {
+    case ITEM_SUBCLASS_ELIXIR:
+        ai->TellMaster("--- Elixir ---");
+        return;
+    case ITEM_SUBCLASS_FLASK:
+        ai->TellMaster("--- Flask ---");
+        return;
+    case ITEM_SUBCLASS_SCROLL:
+        ai->TellMaster("--- Scroll ---");
+        return;
+    case ITEM_SUBCLASS_FOOD:
+        ai->TellMaster("--- Food ---");
+        return;
+    case ITEM_SUBCLASS_GENERIC:
+        ai->TellMaster("--- Other ---");
+        return;
+    case ITEM_SUBCLASS_ITEM_ENHANCEMENT:
+        ai->TellMaster("--- Enchant ---");
+        return;
+    }
+}
+
+
+bool BuffAction::Execute(Event event)
+{
+    string text = event.getParam();
+
+    FindBuffVisitor visitor(bot);
+    IterateItems(&visitor);
+
+    uint32 oldSubClass = -1;
+    for (map<uint32, list<Item*> >::iterator i = visitor.items.begin(); i != visitor.items.end(); ++i)
+    {
+        list<Item*> items = i->second;
+
+        uint32 subClass = i->first;
+        if (oldSubClass != subClass)
+        {
+            if (!items.empty())
+                TellHeader(subClass);
+            oldSubClass = subClass;
+        }
+        for (list<Item*>::iterator j = items.begin(); j != items.end(); ++j)
+        {
+            Item* item = *j;
+            ostringstream out;
+            out << chat->formatItem(item->GetTemplate(), item->GetCount());
+            ai->TellMaster(out);
+        }
+    }
+    
+    return true;
+}
diff --git a/src/plugins/playerbot/strategy/actions/BuffAction.h b/src/plugins/playerbot/strategy/actions/BuffAction.h
new file mode 100644
index 0000000..da8b6a6
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/BuffAction.h
@@ -0,0 +1,17 @@
+#pragma once
+
+#include "../Action.h"
+#include "InventoryAction.h"
+
+namespace ai
+{
+    class BuffAction : public InventoryAction {
+    public:
+        BuffAction(PlayerbotAI* ai) : InventoryAction(ai, "buff") {}
+        virtual bool Execute(Event event);
+
+    private:
+        void TellHeader(uint32 subClass);
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/actions/BuyAction.cpp b/src/plugins/playerbot/strategy/actions/BuyAction.cpp
new file mode 100644
index 0000000..20d9cea
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/BuyAction.cpp
@@ -0,0 +1,53 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "BuyAction.h"
+#include "../ItemVisitors.h"
+#include "../values/ItemCountValue.h"
+
+using namespace ai;
+
+bool BuyAction::Execute(Event event)
+{
+    string link = event.getParam();
+
+    ItemIds itemIds = chat->parseItems(link);
+    if (itemIds.empty())
+        return false;
+
+    Player* master = GetMaster();
+
+    if (!master)
+        return false;
+
+    Unit* vendor = master->GetSelectedUnit();
+    if (!vendor)
+        return false;
+
+    Creature *pCreature = bot->GetNPCIfCanInteractWith(vendor->GetGUID(), UNIT_NPC_FLAG_VENDOR);
+    if (!pCreature)
+    {
+        ai->TellMaster("Cannot talk to vendor");
+        return false;
+    }
+
+    VendorItemData const* tItems = pCreature->GetVendorItems();
+    if (!tItems)
+    {
+        ai->TellMaster("This vendor has no items");
+        return false;
+    }
+
+    for (ItemIds::iterator i = itemIds.begin(); i != itemIds.end(); i++)
+    {
+        for (uint32 slot = 0; slot < tItems->GetItemCount(); slot++)
+        {
+            if (tItems->GetItem(slot)->item == *i)
+            {
+                bot->BuyItemFromVendorSlot(vendor->GetGUID(), slot, *i, 1, NULL_BAG, NULL_SLOT);
+                ai->TellMaster("Bought item");
+            }
+        }
+    }
+
+    return true;
+}
diff --git a/src/plugins/playerbot/strategy/actions/BuyAction.h b/src/plugins/playerbot/strategy/actions/BuyAction.h
new file mode 100644
index 0000000..2e0822c
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/BuyAction.h
@@ -0,0 +1,19 @@
+#pragma once
+
+#include "../Action.h"
+#include "InventoryAction.h"
+
+namespace ai
+{
+    class BuyAction : public InventoryAction {
+    public:
+        BuyAction(PlayerbotAI* ai) : InventoryAction(ai, "buy") {}
+        virtual bool Execute(Event event);
+
+    private:
+        bool TradeItem(FindItemVisitor *visitor, int8 slot);
+        bool TradeItem(const Item& item, int8 slot);
+
+    };
+
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/actions/CastCustomSpellAction.cpp b/src/plugins/playerbot/strategy/actions/CastCustomSpellAction.cpp
new file mode 100644
index 0000000..e59110e
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/CastCustomSpellAction.cpp
@@ -0,0 +1,48 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "CastCustomSpellAction.h"
+
+using namespace ai;
+
+bool CastCustomSpellAction::Execute(Event event)
+{
+    Unit* target = NULL;
+
+    Player* master = GetMaster();
+    if (master)
+        target = master->GetSelectedUnit();
+
+    if (!target)
+        target = bot;
+
+    string text = event.getParam();
+
+    uint32 spell = chat->parseSpell(text);
+
+    ostringstream msg;
+    if (!ai->CanCastSpell(spell, target))
+    {
+        msg << "Cannot cast " << text << " on " << target->GetName();
+        ai->TellMaster(msg.str());
+        return false;
+    }
+
+    bool result = false;
+    if (spell)
+        result = ai->CastSpell(spell, target);
+    else
+        ai->CastSpell(text, target);
+
+    if (result)
+    {
+        msg << "Casting " << text << " on " << target->GetName();
+        ai->TellMasterNoFacing(msg.str());
+    }
+    else
+    {
+        msg << "Cast " << text << " on " << target->GetName() << " is failed";
+        ai->TellMaster(msg.str());
+    }
+
+    return result;
+}
diff --git a/src/plugins/playerbot/strategy/actions/CastCustomSpellAction.h b/src/plugins/playerbot/strategy/actions/CastCustomSpellAction.h
new file mode 100644
index 0000000..976a9e4
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/CastCustomSpellAction.h
@@ -0,0 +1,14 @@
+#pragma once
+
+#include "../Action.h"
+#include "QuestAction.h"
+
+namespace ai
+{
+    class CastCustomSpellAction : public Action
+    {
+    public:
+        CastCustomSpellAction(PlayerbotAI* ai) : Action(ai, "cast custom spell") {}
+        virtual bool Execute(Event event);
+    };
+}
diff --git a/src/plugins/playerbot/strategy/actions/ChangeChatAction.cpp b/src/plugins/playerbot/strategy/actions/ChangeChatAction.cpp
new file mode 100644
index 0000000..32328db
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/ChangeChatAction.cpp
@@ -0,0 +1,26 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "ChangeChatAction.h"
+
+
+using namespace ai;
+
+
+bool ChangeChatAction::Execute(Event event)
+{
+    string text = event.getParam();
+    ChatMsg parsed = chat->parseChat(text);
+    if (parsed == CHAT_MSG_SYSTEM)
+    {
+        ostringstream out; out << "Current chat is " << chat->formatChat(*context->GetValue<ChatMsg>("chat"));
+        ai->TellMaster(out);
+    }
+    else
+    {
+        context->GetValue<ChatMsg>("chat")->Set(parsed);
+        ostringstream out; out << "Chat set to " << chat->formatChat(parsed);
+        ai->TellMaster(out);
+    }
+    
+    return true;
+}
diff --git a/src/plugins/playerbot/strategy/actions/ChangeChatAction.h b/src/plugins/playerbot/strategy/actions/ChangeChatAction.h
new file mode 100644
index 0000000..450a81a
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/ChangeChatAction.h
@@ -0,0 +1,14 @@
+#pragma once
+
+#include "../Action.h"
+
+namespace ai
+{
+    class ChangeChatAction : public Action {
+    public:
+        ChangeChatAction(PlayerbotAI* ai) : Action(ai, "chat") {}
+        virtual bool Execute(Event event);
+   
+    };
+
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/actions/ChangeStrategyAction.cpp b/src/plugins/playerbot/strategy/actions/ChangeStrategyAction.cpp
new file mode 100644
index 0000000..64538cc
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/ChangeStrategyAction.cpp
@@ -0,0 +1,38 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "ChangeStrategyAction.h"
+#include "../../PlayerbotAIConfig.h"
+
+using namespace ai;
+
+bool ChangeCombatStrategyAction::Execute(Event event)
+{
+    string text = event.getParam();
+    ai->ChangeStrategy(text.empty() ? getName() : text, BOT_STATE_COMBAT);
+    return true;
+}
+
+bool ChangeNonCombatStrategyAction::Execute(Event event)
+{
+    string text = event.getParam();
+
+    uint32 account = sObjectMgr->GetPlayerAccountIdByGUID(bot->GetGUID());
+    if (sPlayerbotAIConfig.IsInRandomAccountList(account) && ai->GetMaster() && ai->GetMaster()->GetSession()->GetSecurity() < SEC_GAMEMASTER)
+    {
+        if (text.find("loot") != string::npos || text.find("gather") != string::npos)
+        {
+            ai->TellMaster("You can change any strategy except loot and gather");
+            return false;
+        }
+    }
+
+    ai->ChangeStrategy(text, BOT_STATE_NON_COMBAT);
+    return true;
+}
+
+bool ChangeDeadStrategyAction::Execute(Event event)
+{
+    string text = event.getParam();
+    ai->ChangeStrategy(text, BOT_STATE_DEAD);
+    return true;
+}
diff --git a/src/plugins/playerbot/strategy/actions/ChangeStrategyAction.h b/src/plugins/playerbot/strategy/actions/ChangeStrategyAction.h
new file mode 100644
index 0000000..9c3f4c5
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/ChangeStrategyAction.h
@@ -0,0 +1,30 @@
+#pragma once
+
+#include "../Action.h"
+
+namespace ai
+{
+	class ChangeCombatStrategyAction : public Action {
+	public:
+		ChangeCombatStrategyAction(PlayerbotAI* ai, string name = "co") : Action(ai, name) {}
+
+    public:
+        virtual bool Execute(Event event);
+    };
+
+    class ChangeNonCombatStrategyAction : public Action {
+    public:
+        ChangeNonCombatStrategyAction(PlayerbotAI* ai) : Action(ai, "nc") {}
+
+    public:
+        virtual bool Execute(Event event);
+    };
+
+    class ChangeDeadStrategyAction : public Action {
+    public:
+        ChangeDeadStrategyAction(PlayerbotAI* ai) : Action(ai, "dead") {}
+
+    public:
+        virtual bool Execute(Event event);
+    };
+}
diff --git a/src/plugins/playerbot/strategy/actions/ChangeTalentsAction.cpp b/src/plugins/playerbot/strategy/actions/ChangeTalentsAction.cpp
new file mode 100644
index 0000000..3a7dc71
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/ChangeTalentsAction.cpp
@@ -0,0 +1,37 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "ChangeTalentsAction.h"
+
+using namespace ai;
+
+bool ChangeTalentsAction::Execute(Event event)
+{
+    
+
+    string text = event.getParam();
+    if (text == "1" || text == "primary")
+    {
+        bot->ActivateSpec(0);
+        ai->TellMaster("Primary talents activated");
+    }
+    else if (text == "2" || text == "secondary")
+    {
+        bot->ActivateSpec(1);
+        ai->TellMaster("Secondary talents activated");
+    }
+    else
+    {
+        ostringstream out; 
+        switch (bot->GetActiveSpec())
+        {
+        case 0: out << "Primary";
+            break;
+        default: out << "Secondary";
+            break;
+        }
+        out << " talents are active";
+        ai->TellMaster(out);
+    }
+
+    return true;
+}
diff --git a/src/plugins/playerbot/strategy/actions/ChangeTalentsAction.h b/src/plugins/playerbot/strategy/actions/ChangeTalentsAction.h
new file mode 100644
index 0000000..dd9941a
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/ChangeTalentsAction.h
@@ -0,0 +1,16 @@
+#pragma once
+
+#include "../Action.h"
+
+namespace ai
+{
+	class ChangeTalentsAction : public Action {
+	public:
+		ChangeTalentsAction(PlayerbotAI* ai) : Action(ai, "talents") {}
+
+    public:
+        virtual bool Execute(Event event);
+
+    };
+
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/actions/ChatActionContext.h b/src/plugins/playerbot/strategy/actions/ChatActionContext.h
new file mode 100644
index 0000000..6a0ab6b
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/ChatActionContext.h
@@ -0,0 +1,184 @@
+#pragma once
+
+#include "ListQuestsActions.h"
+#include "StatsAction.h"
+#include "LeaveGroupAction.h"
+#include "TellReputationAction.h"
+#include "LogLevelAction.h"
+#include "TellLosAction.h"
+#include "DropQuestAction.h"
+#include "QueryQuestAction.h"
+#include "QueryItemUsageAction.h"
+#include "LootStrategyAction.h"
+#include "AddLootAction.h"
+#include "ReleaseSpiritAction.h"
+#include "TeleportAction.h"
+#include "TaxiAction.h"
+#include "RepairAllAction.h"
+#include "UseItemAction.h"
+#include "TellItemCountAction.h"
+#include "RewardAction.h"
+#include "BuyAction.h"
+#include "SellAction.h"
+#include "UnequipAction.h"
+#include "EquipAction.h"
+#include "TradeAction.h"
+#include "ChangeTalentsAction.h"
+#include "ListSpellsAction.h"
+#include "ChangeStrategyAction.h"
+#include "TrainerAction.h"
+#include "ChangeChatAction.h"
+#include "SetHomeAction.h"
+#include "ResetAiAction.h"
+#include "DestroyItemAction.h"
+#include "BuffAction.h"
+#include "AttackAction.h"
+#include "HelpAction.h"
+#include "GuildBankAction.h"
+#include "ChatShortcutActions.h"
+#include "GossipHelloAction.h"
+#include "CastCustomSpellAction.h"
+#include "InviteToGroupAction.h"
+#include "TellCastFailedAction.h"
+#include "RtiAction.h"
+#include "ReviveFromCorpseAction.h"
+#include "BankAction.h"
+#include "PositionAction.h"
+#include "TellTargetAction.h"
+#include "UseMeetingStoneAction.h"
+#include "WhoAction.h"
+#include "SaveManaAction.h"
+#include "../values/Formations.h"
+
+namespace ai
+{
+    class ChatActionContext : public NamedObjectContext<Action>
+    {
+    public:
+        ChatActionContext()
+        {
+            creators["stats"] = &ChatActionContext::stats;
+            creators["quests"] = &ChatActionContext::quests;
+            creators["leave"] = &ChatActionContext::leave;
+            creators["reputation"] = &ChatActionContext::reputation;
+            creators["log"] = &ChatActionContext::log;
+            creators["los"] = &ChatActionContext::los;
+            creators["drop"] = &ChatActionContext::drop;
+            creators["query quest"] = &ChatActionContext::query_quest;
+            creators["query item usage"] = &ChatActionContext::query_item_usage;
+            creators["ll"] = &ChatActionContext::ll;
+            creators["add all loot"] = &ChatActionContext::add_all_loot;
+            creators["release"] = &ChatActionContext::release;
+            creators["teleport"] = &ChatActionContext::teleport;
+            creators["taxi"] = &ChatActionContext::taxi;
+            creators["repair"] = &ChatActionContext::repair;
+            creators["use"] = &ChatActionContext::use;
+            creators["item count"] = &ChatActionContext::item_count;
+            creators["equip"] = &ChatActionContext::equip;
+            creators["unequip"] = &ChatActionContext::unequip;
+            creators["sell"] = &ChatActionContext::sell;
+            creators["buy"] = &ChatActionContext::buy;
+            creators["reward"] = &ChatActionContext::reward;
+            creators["trade"] = &ChatActionContext::trade;
+            creators["talents"] = &ChatActionContext::talents;
+            creators["spells"] = &ChatActionContext::spells;
+            creators["co"] = &ChatActionContext::co;
+            creators["nc"] = &ChatActionContext::nc;
+            creators["dead"] = &ChatActionContext::dead;
+            creators["trainer"] = &ChatActionContext::trainer;
+            creators["attack my target"] = &ChatActionContext::attack_my_target;
+            creators["chat"] = &ChatActionContext::chat;
+            creators["home"] = &ChatActionContext::home;
+            creators["destroy"] = &ChatActionContext::destroy;
+            creators["reset ai"] = &ChatActionContext::reset_ai;
+            creators["buff"] = &ChatActionContext::buff;
+            creators["help"] = &ChatActionContext::help;
+            creators["gb"] = &ChatActionContext::gb;
+            creators["bank"] = &ChatActionContext::bank;
+            creators["follow chat shortcut"] = &ChatActionContext::follow_chat_shortcut;
+            creators["stay chat shortcut"] = &ChatActionContext::stay_chat_shortcut;
+            creators["flee chat shortcut"] = &ChatActionContext::flee_chat_shortcut;
+            creators["runaway chat shortcut"] = &ChatActionContext::runaway_chat_shortcut;
+            creators["grind chat shortcut"] = &ChatActionContext::grind_chat_shortcut;
+            creators["tank attack chat shortcut"] = &ChatActionContext::tank_attack_chat_shortcut;
+            creators["gossip hello"] = &ChatActionContext::gossip_hello;
+            creators["cast custom spell"] = &ChatActionContext::cast_custom_spell;
+            creators["invite"] = &ChatActionContext::invite;
+            creators["spell"] = &ChatActionContext::spell;
+            creators["rti"] = &ChatActionContext::rti;
+            creators["spirit healer"] = &ChatActionContext::spirit_healer;
+            creators["position"] = &ChatActionContext::position;
+            creators["tell target"] = &ChatActionContext::tell_target;
+            creators["summon"] = &ChatActionContext::summon;
+            creators["who"] = &ChatActionContext::who;
+            creators["save mana"] = &ChatActionContext::save_mana;
+            creators["max dps chat shortcut"] = &ChatActionContext::max_dps_chat_shortcut;
+            creators["tell attackers"] = &ChatActionContext::tell_attackers;
+            creators["formation"] = &ChatActionContext::formation;
+        }
+
+    private:
+        static Action* formation(PlayerbotAI* ai) { return new SetFormationAction(ai); }
+        static Action* tell_attackers(PlayerbotAI* ai) { return new TellAttackersAction(ai); }
+        static Action* max_dps_chat_shortcut(PlayerbotAI* ai) { return new MaxDpsChatShortcutAction(ai); }
+        static Action* save_mana(PlayerbotAI* ai) { return new SaveManaAction(ai); }
+        static Action* who(PlayerbotAI* ai) { return new WhoAction(ai); }
+        static Action* summon(PlayerbotAI* ai) { return new SummonAction(ai); }
+        static Action* tell_target(PlayerbotAI* ai) { return new TellTargetAction(ai); }
+        static Action* position(PlayerbotAI* ai) { return new PositionAction(ai); }
+        static Action* spirit_healer(PlayerbotAI* ai) { return new SpiritHealerAction(ai); }
+        static Action* rti(PlayerbotAI* ai) { return new RtiAction(ai); }
+        static Action* invite(PlayerbotAI* ai) { return new InviteToGroupAction(ai); }
+        static Action* spell(PlayerbotAI* ai) { return new TellSpellAction(ai); }
+        static Action* cast_custom_spell(PlayerbotAI* ai) { return new CastCustomSpellAction(ai); }
+        static Action* tank_attack_chat_shortcut(PlayerbotAI* ai) { return new TankAttackChatShortcutAction(ai); }
+        static Action* grind_chat_shortcut(PlayerbotAI* ai) { return new GrindChatShortcutAction(ai); }
+        static Action* flee_chat_shortcut(PlayerbotAI* ai) { return new FleeChatShortcutAction(ai); }
+        static Action* runaway_chat_shortcut(PlayerbotAI* ai) { return new GoawayChatShortcutAction(ai); }
+        static Action* stay_chat_shortcut(PlayerbotAI* ai) { return new StayChatShortcutAction(ai); }
+        static Action* follow_chat_shortcut(PlayerbotAI* ai) { return new FollowChatShortcutAction(ai); }
+        static Action* gb(PlayerbotAI* ai) { return new GuildBankAction(ai); }
+        static Action* bank(PlayerbotAI* ai) { return new BankAction(ai); }
+        static Action* help(PlayerbotAI* ai) { return new HelpAction(ai); }
+        static Action* buff(PlayerbotAI* ai) { return new BuffAction(ai); }
+        static Action* destroy(PlayerbotAI* ai) { return new DestroyItemAction(ai); }
+        static Action* home(PlayerbotAI* ai) { return new SetHomeAction(ai); }
+        static Action* chat(PlayerbotAI* ai) { return new ChangeChatAction(ai); }
+        static Action* attack_my_target(PlayerbotAI* ai) { return new AttackMyTargetAction(ai); }
+        static Action* trainer(PlayerbotAI* ai) { return new TrainerAction(ai); }
+        static Action* co(PlayerbotAI* ai) { return new ChangeCombatStrategyAction(ai); }
+        static Action* nc(PlayerbotAI* ai) { return new ChangeNonCombatStrategyAction(ai); }
+        static Action* dead(PlayerbotAI* ai) { return new ChangeDeadStrategyAction(ai); }
+        static Action* spells(PlayerbotAI* ai) { return new ListSpellsAction(ai); }
+        static Action* talents(PlayerbotAI* ai) { return new ChangeTalentsAction(ai); }
+
+        static Action* equip(PlayerbotAI* ai) { return new EquipAction(ai); }
+        static Action* unequip(PlayerbotAI* ai) { return new UnequipAction(ai); }
+        static Action* sell(PlayerbotAI* ai) { return new SellAction(ai); }
+        static Action* buy(PlayerbotAI* ai) { return new BuyAction(ai); }
+        static Action* reward(PlayerbotAI* ai) { return new RewardAction(ai); }
+        static Action* trade(PlayerbotAI* ai) { return new TradeAction(ai); }
+
+        static Action* item_count(PlayerbotAI* ai) { return new TellItemCountAction(ai); }
+        static Action* use(PlayerbotAI* ai) { return new UseItemAction(ai); }
+        static Action* repair(PlayerbotAI* ai) { return new RepairAllAction(ai); }
+        static Action* taxi(PlayerbotAI* ai) { return new TaxiAction(ai); }
+        static Action* teleport(PlayerbotAI* ai) { return new TeleportAction(ai); }
+        static Action* release(PlayerbotAI* ai) { return new ReleaseSpiritAction(ai); }
+        static Action* query_item_usage(PlayerbotAI* ai) { return new QueryItemUsageAction(ai); }
+        static Action* query_quest(PlayerbotAI* ai) { return new QueryQuestAction(ai); }
+        static Action* drop(PlayerbotAI* ai) { return new DropQuestAction(ai); }
+        static Action* stats(PlayerbotAI* ai) { return new StatsAction(ai); }
+        static Action* quests(PlayerbotAI* ai) { return new ListQuestsAction(ai); }
+        static Action* leave(PlayerbotAI* ai) { return new LeaveGroupAction(ai); }
+        static Action* reputation(PlayerbotAI* ai) { return new TellReputationAction(ai); }
+        static Action* log(PlayerbotAI* ai) { return new LogLevelAction(ai); }
+        static Action* los(PlayerbotAI* ai) { return new TellLosAction(ai); }
+        static Action* ll(PlayerbotAI* ai) { return new LootStrategyAction(ai); }
+        static Action* add_all_loot(PlayerbotAI* ai) { return new AddAllLootAction(ai); }
+        static Action* reset_ai(PlayerbotAI* ai) { return new ResetAiAction(ai); }
+        static Action* gossip_hello(PlayerbotAI* ai) { return new GossipHelloAction(ai); }
+    };
+
+
+};
diff --git a/src/plugins/playerbot/strategy/actions/ChatShortcutActions.cpp b/src/plugins/playerbot/strategy/actions/ChatShortcutActions.cpp
new file mode 100644
index 0000000..e0c3f12
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/ChatShortcutActions.cpp
@@ -0,0 +1,108 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "ChatShortcutActions.h"
+#include "../../PlayerbotAIConfig.h"
+
+using namespace ai;
+
+bool FollowChatShortcutAction::Execute(Event event)
+{
+    Player* master = GetMaster();
+    if (!master)
+        return false;
+
+    ai->Reset();
+    ai->ChangeStrategy("+follow,-passive", BOT_STATE_NON_COMBAT);
+    ai->ChangeStrategy("-follow,-passive", BOT_STATE_COMBAT);
+    if (bot->GetMapId() != master->GetMapId() || bot->GetDistance(master) > sPlayerbotAIConfig.sightDistance)
+    {
+        ai->TellMaster("I will not follow you - too far away");
+        return true;
+    }
+    ai->TellMaster("Following");
+    return true;
+}
+
+bool StayChatShortcutAction::Execute(Event event)
+{
+    Player* master = GetMaster();
+    if (!master)
+        return false;
+
+    ai->Reset();
+    ai->ChangeStrategy("+stay,-passive", BOT_STATE_NON_COMBAT);
+    ai->ChangeStrategy("-follow,-passive", BOT_STATE_COMBAT);
+    ai->TellMaster("Staying");
+    return true;
+}
+
+bool FleeChatShortcutAction::Execute(Event event)
+{
+    Player* master = GetMaster();
+    if (!master)
+        return false;
+
+    ai->Reset();
+    ai->ChangeStrategy("+follow,+passive", BOT_STATE_NON_COMBAT);
+    ai->ChangeStrategy("+follow,+passive", BOT_STATE_COMBAT);
+    if (bot->GetMapId() != master->GetMapId() || bot->GetDistance(master) > sPlayerbotAIConfig.sightDistance)
+    {
+        ai->TellMaster("I will not flee with you - too far away");
+        return true;
+    }
+    ai->TellMaster("Fleeing");
+    return true;
+}
+
+bool GoawayChatShortcutAction::Execute(Event event)
+{
+    Player* master = GetMaster();
+    if (!master)
+        return false;
+
+    ai->Reset();
+    ai->ChangeStrategy("+runaway", BOT_STATE_NON_COMBAT);
+    ai->ChangeStrategy("+runaway", BOT_STATE_COMBAT);
+    ai->TellMaster("Running away");
+    return true;
+}
+
+bool GrindChatShortcutAction::Execute(Event event)
+{
+    Player* master = GetMaster();
+    if (!master)
+        return false;
+
+    ai->Reset();
+    ai->ChangeStrategy("+grind,-passive", BOT_STATE_NON_COMBAT);
+    ai->TellMaster("Grinding");
+    return true;
+}
+
+bool TankAttackChatShortcutAction::Execute(Event event)
+{
+    Player* master = GetMaster();
+    if (!master)
+        return false;
+
+    if (!ai->IsTank(bot))
+        return false;
+
+    ai->Reset();
+    ai->ChangeStrategy("-passive", BOT_STATE_NON_COMBAT);
+    ai->ChangeStrategy("-passive", BOT_STATE_COMBAT);
+    ai->TellMaster("Attacking");
+    return true;
+}
+
+bool MaxDpsChatShortcutAction::Execute(Event event)
+{
+    Player* master = GetMaster();
+    if (!master)
+        return false;
+
+    ai->Reset();
+    ai->ChangeStrategy("-threat,-conserve mana,-cast time,+dps debuff", BOT_STATE_COMBAT);
+    ai->TellMaster("Max DPS");
+    return true;
+}
diff --git a/src/plugins/playerbot/strategy/actions/ChatShortcutActions.h b/src/plugins/playerbot/strategy/actions/ChatShortcutActions.h
new file mode 100644
index 0000000..de9a86a
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/ChatShortcutActions.h
@@ -0,0 +1,57 @@
+#pragma once
+
+#include "../Action.h"
+#include "InventoryAction.h"
+
+namespace ai
+{
+    class FollowChatShortcutAction : public Action
+    {
+    public:
+        FollowChatShortcutAction(PlayerbotAI* ai) : Action(ai, "follow chat shortcut") {}
+        virtual bool Execute(Event event);
+    };
+
+    class StayChatShortcutAction : public Action
+    {
+    public:
+        StayChatShortcutAction(PlayerbotAI* ai) : Action(ai, "stay chat shortcut") {}
+        virtual bool Execute(Event event);
+    };
+
+    class FleeChatShortcutAction : public Action
+    {
+    public:
+        FleeChatShortcutAction(PlayerbotAI* ai) : Action(ai, "flee chat shortcut") {}
+        virtual bool Execute(Event event);
+    };
+
+    class GoawayChatShortcutAction : public Action
+    {
+    public:
+        GoawayChatShortcutAction(PlayerbotAI* ai) : Action(ai, "runaway chat shortcut") {}
+        virtual bool Execute(Event event);
+    };
+
+    class GrindChatShortcutAction : public Action
+    {
+    public:
+        GrindChatShortcutAction(PlayerbotAI* ai) : Action(ai, "grind chat shortcut") {}
+        virtual bool Execute(Event event);
+    };
+
+    class TankAttackChatShortcutAction : public Action
+    {
+    public:
+        TankAttackChatShortcutAction(PlayerbotAI* ai) : Action(ai, "tank attack chat shortcut") {}
+        virtual bool Execute(Event event);
+    };
+
+    class MaxDpsChatShortcutAction : public Action
+    {
+    public:
+        MaxDpsChatShortcutAction(PlayerbotAI* ai) : Action(ai, "max dps chat shortcut") {}
+        virtual bool Execute(Event event);
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/actions/CheckMailAction.cpp b/src/plugins/playerbot/strategy/actions/CheckMailAction.cpp
new file mode 100644
index 0000000..c5aa48f
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/CheckMailAction.cpp
@@ -0,0 +1,66 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "CheckMailAction.h"
+
+#include "../../GuildTaskMgr.h"
+using namespace ai;
+
+bool CheckMailAction::Execute(Event event)
+{
+    if (!bot->IsMailsLoaded())
+    {
+        WorldPacket p;
+        bot->GetSession()->HandleQueryNextMailTime(p);
+    }
+
+    if (!bot->GetMailSize())
+        return false;
+
+    list<uint32> ids;
+    for (PlayerMails::iterator i = bot->GetMailBegin(); i != bot->GetMailEnd(); ++i)
+    {
+        Mail* mail = *i;
+
+        if (!mail || mail->state == MAIL_STATE_DELETED)
+            continue;
+
+        Player* owner = sObjectMgr->GetPlayerByLowGUID(mail->sender);
+        if (!owner)
+            continue;
+
+        ProcessMail(mail, owner);
+        ids.push_back(mail->messageID);
+        mail->state = MAIL_STATE_DELETED;
+    }
+
+    for (list<uint32>::iterator i = ids.begin(); i != ids.end(); ++i)
+    {
+        uint32 id = *i;
+        bot->SendMailResult(id, MAIL_DELETED, MAIL_OK);
+        SQLTransaction tran = CharacterDatabase.BeginTransaction();
+        CharacterDatabase.PExecute("DELETE FROM mail WHERE id = '%u'", id);
+        CharacterDatabase.PExecute("DELETE FROM mail_items WHERE mail_id = '%u'", id);
+        CharacterDatabase.CommitTransaction(tran);
+        bot->RemoveMail(id);
+    }
+
+    return true;
+}
+
+
+void CheckMailAction::ProcessMail(Mail* mail, Player* owner)
+{
+    if (!mail->HasItems())
+        return;
+
+    for (MailItemInfoVec::iterator i = mail->items.begin(); i != mail->items.end(); ++i)
+    {
+        Item *item = bot->GetMItem(i->item_guid);
+        if (!item)
+            continue;
+
+        sGuildTaskMgr.CheckItemTask(i->item_template, item->GetCount(), owner, bot, true);
+        bot->RemoveMItem(i->item_guid);
+        item->DestroyForPlayer(bot);
+    }
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/actions/CheckMailAction.h b/src/plugins/playerbot/strategy/actions/CheckMailAction.h
new file mode 100644
index 0000000..9da88a9
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/CheckMailAction.h
@@ -0,0 +1,17 @@
+#pragma once
+
+#include "../Action.h"
+#include "QuestAction.h"
+
+namespace ai
+{
+    class CheckMailAction : public Action
+    {
+    public:
+        CheckMailAction(PlayerbotAI* ai) : Action(ai, "check mail") {}
+        virtual bool Execute(Event event);
+
+    private:
+        void ProcessMail(Mail* mail, Player* owner);
+    };
+}
diff --git a/src/plugins/playerbot/strategy/actions/CheckMountStateAction.cpp b/src/plugins/playerbot/strategy/actions/CheckMountStateAction.cpp
new file mode 100644
index 0000000..3c94f97
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/CheckMountStateAction.cpp
@@ -0,0 +1,79 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "../../../Spells/Auras/SpellAuraEffects.h"
+#include "CheckMountStateAction.h"
+
+using namespace ai;
+
+uint64 extractGuid(WorldPacket& packet);
+
+bool CheckMountStateAction::Execute(Event event)
+{
+    Player* master = GetMaster();
+    if (!bot->GetGroup() || !master)
+        return false;
+
+    if (bot->IsFlying())
+        return false;
+
+    if (master->IsMounted() && !bot->IsMounted())
+    {
+        return Mount();
+    }
+    else if (!master->IsMounted() && bot->IsMounted())
+    {
+        WorldPacket emptyPacket;
+        bot->GetSession()->HandleCancelMountAuraOpcode(emptyPacket);
+        return true;
+    }
+    return false;
+}
+
+
+bool CheckMountStateAction::Mount()
+{
+    Player* master = GetMaster();
+    ai->RemoveShapeshift();
+
+    Unit::AuraEffectList const& auras = master->GetAuraEffectsByType(SPELL_AURA_MOUNTED);
+    const SpellInfo* masterSpell = auras.front()->GetSpellInfo();
+    int32 masterSpeed = max(masterSpell->Effects[1].BasePoints, masterSpell->Effects[2].BasePoints);
+
+    map<uint32, map<int32, vector<uint32> > > allSpells;
+    for(PlayerSpellMap::iterator itr = bot->GetSpellMap().begin(); itr != bot->GetSpellMap().end(); ++itr)
+    {
+        uint32 spellId = itr->first;
+        const SpellInfo* spellInfo = sSpellMgr->GetSpellInfo(spellId);
+
+        if (!spellInfo || spellInfo->Effects[0].ApplyAuraName != SPELL_AURA_MOUNTED)
+            continue;
+
+        if(itr->second->state == PLAYERSPELL_REMOVED || itr->second->disabled || spellInfo->IsPassive())
+            continue;
+
+        int32 effect = max(spellInfo->Effects[1].BasePoints, spellInfo->Effects[2].BasePoints);
+        if (effect < masterSpeed)
+            continue;
+
+        uint32 index = (spellInfo->Effects[1].ApplyAuraName == SPELL_AURA_MOD_INCREASE_MOUNTED_FLIGHT_SPEED ||
+                spellInfo->Effects[2].ApplyAuraName == SPELL_AURA_MOD_INCREASE_MOUNTED_FLIGHT_SPEED) ? 1 : 0;
+        allSpells[index][effect].push_back(spellId);
+    }
+
+    int masterMountType = (masterSpell->Effects[1].ApplyAuraName == SPELL_AURA_MOD_INCREASE_MOUNTED_FLIGHT_SPEED ||
+            masterSpell->Effects[2].ApplyAuraName == SPELL_AURA_MOD_INCREASE_MOUNTED_FLIGHT_SPEED) ? 1 : 0;
+
+    map<int32, vector<uint32> >& spells = allSpells[masterMountType];
+    for (map<int32,vector<uint32> >::iterator i = spells.begin(); i != spells.end(); ++i)
+    {
+		vector<uint32>& ids = i->second;
+        int index = urand(0, ids.size() - 1);
+        if (index >= ids.size())
+            continue;
+
+        ai->CastSpell(ids[index], bot);
+        return true;
+    }
+
+    return false;
+}
diff --git a/src/plugins/playerbot/strategy/actions/CheckMountStateAction.h b/src/plugins/playerbot/strategy/actions/CheckMountStateAction.h
new file mode 100644
index 0000000..c5b087e
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/CheckMountStateAction.h
@@ -0,0 +1,19 @@
+#pragma once
+
+#include "../Action.h"
+#include "MovementActions.h"
+#include "../values/LastMovementValue.h"
+
+namespace ai
+{
+    class CheckMountStateAction : public Action {
+    public:
+        CheckMountStateAction(PlayerbotAI* ai) : Action(ai, "check mount state") {}
+
+        virtual bool Execute(Event event);
+
+    private:
+        bool Mount();
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/actions/ChooseTargetActions.h b/src/plugins/playerbot/strategy/actions/ChooseTargetActions.h
new file mode 100644
index 0000000..d0b1a9a
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/ChooseTargetActions.h
@@ -0,0 +1,80 @@
+#pragma once
+
+#include "../Action.h"
+#include "AttackAction.h"
+#include "../../../DungeonFinding/LFGMgr.h"
+
+namespace ai
+{
+    class DpsAssistAction : public AttackAction
+    {
+    public:
+        DpsAssistAction(PlayerbotAI* ai) : AttackAction(ai, "dps assist") {}
+
+        virtual string GetTargetName() { return "dps target"; }
+    };
+
+    class TankAssistAction : public AttackAction
+    {
+    public:
+        TankAssistAction(PlayerbotAI* ai) : AttackAction(ai, "tank assist") {}
+        virtual string GetTargetName() { return "tank target"; }
+    };
+
+    class AttackAnythingAction : public AttackAction
+    {
+    public:
+        AttackAnythingAction(PlayerbotAI* ai) : AttackAction(ai, "attack anything") {}
+        virtual string GetTargetName() { return "grind target"; }
+        virtual bool Execute(Event event)
+        {
+            return AttackAction::Execute(event);
+        }
+        virtual bool isUseful() {
+            return GetTarget() &&
+                (AI_VALUE2(uint8, "health", "self target") > sPlayerbotAIConfig.mediumHealth &&
+                (!AI_VALUE2(uint8, "mana", "self target") || AI_VALUE2(uint8, "mana", "self target") > sPlayerbotAIConfig.mediumMana)) || AI_VALUE2(bool, "combat", "self target");
+        }
+        virtual bool isPossible()
+        {
+            return AttackAction::isPossible() && GetTarget();
+        }
+    };
+
+    class AttackLeastHpTargetAction : public AttackAction
+    {
+    public:
+        AttackLeastHpTargetAction(PlayerbotAI* ai) : AttackAction(ai, "attack least hp target") {}
+        virtual string GetTargetName() { return "least hp target"; }
+    };
+
+    class AttackEnemyPlayerAction : public AttackAction
+    {
+    public:
+        AttackEnemyPlayerAction(PlayerbotAI* ai) : AttackAction(ai, "attack enemy player") {}
+        virtual string GetTargetName() { return "enemy player target"; }
+    };
+
+    class AttackRtiTargetAction : public AttackAction
+    {
+    public:
+        AttackRtiTargetAction(PlayerbotAI* ai) : AttackAction(ai, "attack rti target") {}
+        virtual string GetTargetName() { return "rti target"; }
+    };
+
+    class DropTargetAction : public Action
+    {
+    public:
+        DropTargetAction(PlayerbotAI* ai) : Action(ai, "drop target") {}
+
+        virtual bool Execute(Event event)
+        {
+            context->GetValue<Unit*>("current target")->Set(NULL);
+            bot->SetSelection(ObjectGuid());
+            ai->ChangeEngine(BOT_STATE_NON_COMBAT);
+            ai->InterruptSpell();
+			return true;
+        }
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/actions/DestroyItemAction.cpp b/src/plugins/playerbot/strategy/actions/DestroyItemAction.cpp
new file mode 100644
index 0000000..9167182
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/DestroyItemAction.cpp
@@ -0,0 +1,34 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "DestroyItemAction.h"
+
+#include "../values/ItemCountValue.h"
+
+using namespace ai;
+
+bool DestroyItemAction::Execute(Event event)
+{
+    string text = event.getParam();
+    ItemIds ids = chat->parseItems(text);
+
+    for (ItemIds::iterator i =ids.begin(); i != ids.end(); i++)
+    {
+        FindItemByIdVisitor visitor(*i);
+        DestroyItem(&visitor);
+    }
+
+    return true;
+}
+
+void DestroyItemAction::DestroyItem(FindItemVisitor* visitor)
+{
+    IterateItems(visitor);
+    list<Item*> items = visitor->GetResult();
+	for (list<Item*>::iterator i = items.begin(); i != items.end(); ++i)
+    {
+		Item* item = *i;
+        bot->DestroyItem(item->GetBagSlot(),item->GetSlot(), true);
+        ostringstream out; out << chat->formatItem(item->GetTemplate()) << " destroyed";
+        ai->TellMaster(out);
+    }
+}
diff --git a/src/plugins/playerbot/strategy/actions/DestroyItemAction.h b/src/plugins/playerbot/strategy/actions/DestroyItemAction.h
new file mode 100644
index 0000000..ad1ab05
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/DestroyItemAction.h
@@ -0,0 +1,17 @@
+#pragma once
+
+#include "../Action.h"
+#include "InventoryAction.h"
+
+namespace ai
+{
+    class DestroyItemAction : public InventoryAction {
+    public:
+        DestroyItemAction(PlayerbotAI* ai) : InventoryAction(ai, "destroy") {}
+        virtual bool Execute(Event event);
+
+    private:
+        void DestroyItem(FindItemVisitor* visitor);
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/actions/DropQuestAction.cpp b/src/plugins/playerbot/strategy/actions/DropQuestAction.cpp
new file mode 100644
index 0000000..e94e779
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/DropQuestAction.cpp
@@ -0,0 +1,47 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "DropQuestAction.h"
+
+
+using namespace ai;
+
+bool DropQuestAction::Execute(Event event)
+{
+    string link = event.getParam();
+    if (!GetMaster())
+        return false;
+
+    PlayerbotChatHandler handler(GetMaster());
+    uint32 entry = handler.extractQuestId(link);
+    if (!entry)
+        return false;
+
+    Quest const* quest = sObjectMgr->GetQuestTemplate(entry);
+    if (!quest)
+        return false;
+
+    // remove all quest entries for 'entry' from quest log
+    for (uint8 slot = 0; slot < MAX_QUEST_LOG_SIZE; ++slot)
+    {
+        uint32 logQuest = bot->GetQuestSlotQuestId(slot);
+        if (logQuest == entry)
+        {
+            bot->SetQuestSlot(slot, 0);
+
+            // we ignore unequippable quest items in this case, its' still be equipped
+            bot->TakeQuestSourceItem(logQuest, false);
+
+            if (quest->HasFlag(QUEST_FLAGS_FLAGS_PVP))
+            {
+                bot->pvpInfo.IsHostile = bot->pvpInfo.IsInHostileArea || bot->HasPvPForcingQuest();
+                bot->UpdatePvPState();
+            }
+        }
+    }
+
+    bot->RemoveActiveQuest(entry, false);
+    bot->RemoveRewardedQuest(entry);
+
+    ai->TellMaster("Quest removed");
+    return true;
+}
diff --git a/src/plugins/playerbot/strategy/actions/DropQuestAction.h b/src/plugins/playerbot/strategy/actions/DropQuestAction.h
new file mode 100644
index 0000000..af5d4ca
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/DropQuestAction.h
@@ -0,0 +1,13 @@
+#pragma once
+
+#include "../Action.h"
+
+namespace ai
+{
+    class DropQuestAction : public Action {
+    public:
+        DropQuestAction(PlayerbotAI* ai) : Action(ai, "drop quest") {}
+        virtual bool Execute(Event event);
+    };
+
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/actions/EmoteAction.cpp b/src/plugins/playerbot/strategy/actions/EmoteAction.cpp
new file mode 100644
index 0000000..b609032
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/EmoteAction.cpp
@@ -0,0 +1,100 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "EmoteAction.h"
+
+using namespace ai;
+
+map<string, uint32> EmoteAction::emotes;
+
+bool EmoteAction::Execute(Event event)
+{
+    if (emotes.empty())
+        InitEmotes();
+
+    uint32 emote = 0;
+
+    string param = event.getParam();
+	if (param.empty() || emotes.find(param) == emotes.end())
+    {
+        int index = rand() % emotes.size();
+		for (map<string, uint32>::iterator i = emotes.begin(); i != emotes.end() && index; ++i, --index)
+			emote = i->second;
+    }
+    else
+    {
+        emote = emotes[param];
+    }
+
+	bot->CastStop();
+	ai->InterruptSpell();
+	bot->SetStandState(UNIT_STAND_STATE_STAND);
+
+    Player* master = GetMaster();
+	if (master)
+	{
+        Unit* masterSelection = master->GetSelectedUnit();
+        if (masterSelection)
+        {
+            Unit* oldSelection = bot->GetSelectedUnit();
+            bot->SetSelection(masterSelection->GetGUID());
+            bot->HandleEmoteCommand(emote);
+            if (oldSelection)
+                bot->SetSelection(oldSelection->GetGUID());
+            return true;
+        }
+	}
+
+    bot->HandleEmoteCommand(emote);
+    return true;
+}
+
+void EmoteAction::InitEmotes()
+{
+    emotes["cower"] = EMOTE_ONESHOT_COWER;
+    emotes["dance"] = EMOTE_ONESHOT_DANCE;
+    emotes["drown"] = EMOTE_ONESHOT_DROWN;
+    emotes["emerge"] = EMOTE_ONESHOT_EMERGE;
+    emotes["land"] = EMOTE_ONESHOT_LAND;
+    emotes["laugh_nosheathe"] = EMOTE_ONESHOT_LAUGH_NO_SHEATHE;
+    emotes["liftoff"] = EMOTE_ONESHOT_LIFTOFF;
+    emotes["loot"] = EMOTE_ONESHOT_LOOT;
+    emotes["no"] = EMOTE_ONESHOT_NO;
+    emotes["one_shot_stun"] = EMOTE_ONESHOT_STUN;
+    emotes["point_nosheathe"] = EMOTE_ONESHOT_POINT_NO_SHEATHE;
+    emotes["roar"] = EMOTE_STATE_ROAR;
+    emotes["salute"] = EMOTE_ONESHOT_SALUTE;
+    emotes["stomp"] = EMOTE_ONESHOT_STOMP;
+    emotes["train"] = EMOTE_ONESHOT_TRAIN;
+    emotes["yes"] = EMOTE_ONESHOT_YES;
+    emotes["applaud"] = EMOTE_ONESHOT_APPLAUD;
+    emotes["battleroar"] = EMOTE_ONESHOT_BATTLE_ROAR;
+    emotes["beg"] = EMOTE_ONESHOT_BEG;
+    emotes["bow"] = EMOTE_ONESHOT_BOW;
+    emotes["cheer"] = EMOTE_ONESHOT_CHEER;
+    emotes["chicken"] = EMOTE_ONESHOT_CHICKEN;
+    emotes["cry"] = EMOTE_ONESHOT_CRY;
+    emotes["dance"] = EMOTE_STATE_DANCE;
+    emotes["eat"] = EMOTE_ONESHOT_EAT;
+    emotes["exclamation"] = EMOTE_ONESHOT_EXCLAMATION;
+    emotes["flex"] = EMOTE_ONESHOT_FLEX;
+    emotes["kick"] = EMOTE_ONESHOT_KICK;
+    emotes["kiss"] = EMOTE_ONESHOT_KISS;
+    emotes["kneel"] = EMOTE_ONESHOT_KNEEL;
+    emotes["laugh"] = EMOTE_ONESHOT_LAUGH;
+    emotes["parryshield"] = EMOTE_ONESHOT_PARRY_SHIELD;
+    emotes["parryunarmed"] = EMOTE_ONESHOT_PARRY_UNARMED;
+    emotes["point"] = EMOTE_ONESHOT_POINT;
+    emotes["question"] = EMOTE_ONESHOT_QUESTION;
+    emotes["ready1h"] = EMOTE_ONESHOT_READY1H;
+    emotes["readybow"] = EMOTE_ONESHOT_READY_BOW;
+    emotes["readyunarmed"] = EMOTE_ONESHOT_READY_UNARMED;
+    emotes["roar"] = EMOTE_ONESHOT_ROAR;
+    emotes["rude"] = EMOTE_ONESHOT_RUDE;
+    emotes["shout"] = EMOTE_ONESHOT_SHOUT;
+    emotes["shy"] = EMOTE_ONESHOT_SHY;
+    emotes["sleep"] = EMOTE_STATE_SLEEP;
+    emotes["talk"] = EMOTE_ONESHOT_TALK;
+    emotes["wave"] = EMOTE_ONESHOT_WAVE;
+    emotes["woundcritical"] = EMOTE_ONESHOT_WOUND_CRITICAL;
+    emotes["wound"] = EMOTE_ONESHOT_WOUND;
+}
diff --git a/src/plugins/playerbot/strategy/actions/EmoteAction.h b/src/plugins/playerbot/strategy/actions/EmoteAction.h
new file mode 100644
index 0000000..8aa8fda
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/EmoteAction.h
@@ -0,0 +1,18 @@
+#pragma once
+
+#include "../Action.h"
+
+namespace ai
+{
+    class EmoteAction : public Action
+    {
+    public:
+        EmoteAction(PlayerbotAI* ai) : Action(ai, "emote") {}
+        virtual bool Execute(Event event);
+
+    private:
+        void InitEmotes();
+        static map<string, uint32> emotes;
+
+    };
+}
diff --git a/src/plugins/playerbot/strategy/actions/EquipAction.cpp b/src/plugins/playerbot/strategy/actions/EquipAction.cpp
new file mode 100644
index 0000000..1f8de55
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/EquipAction.cpp
@@ -0,0 +1,105 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "EquipAction.h"
+
+#include "../values/ItemCountValue.h"
+
+using namespace ai;
+
+bool EquipAction::Execute(Event event)
+{
+    string text = event.getParam();
+    if (text == "?")
+    {
+        TellEquipmentSets();
+        return true;
+    }
+
+    if (UseEquipmentSet(text))
+        return true;
+
+    ItemIds ids = chat->parseItems(text);
+
+    for (ItemIds::iterator i =ids.begin(); i != ids.end(); i++)
+    {
+        FindItemByIdVisitor visitor(*i);
+        EquipItem(&visitor);
+    }
+
+    return true;
+}
+
+bool EquipAction::UseEquipmentSet(string& name)
+{
+    EquipmentSets &sets = bot->GetEquipmentSets();
+    for (EquipmentSets::iterator i = sets.begin(); i != sets.end(); i++)
+    {
+        if (i->second.state == EQUIPMENT_SET_DELETED || i->second.Name != name)
+            continue;
+
+        UseEquipmentSet(i->second);
+
+        ostringstream out; out << name << " set equipped";
+        ai->TellMaster(out);
+        return true;
+    }
+    return false;
+}
+
+bool EquipAction::UseEquipmentSet(EquipmentSet& set)
+{
+    WorldPacket* p = new WorldPacket(CMSG_EQUIPMENT_SET_USE);
+    uint8 srcbag = 0;
+    for(uint8 slot = 0; slot < EQUIPMENT_SLOT_END; ++slot)
+    {
+        ObjectGuid guid;
+        uint32 itemId = set.Items[slot];
+        if (set.IgnoreMask & (1 << slot))
+            p->appendPackGUID((uint64(1)));
+        else
+            p->appendPackGUID(itemId);
+        *p << srcbag << slot;
+    }
+    bot->GetSession()->QueuePacket(p);
+    return true;
+}
+
+void EquipAction::TellEquipmentSets()
+{
+    ai->TellMaster("=== Equipment sets ===");
+    EquipmentSets &sets = bot->GetEquipmentSets();
+    for (EquipmentSets::iterator i = sets.begin(); i != sets.end(); i++)
+    {
+        if (i->second.state != EQUIPMENT_SET_DELETED)
+            ai->TellMaster(i->second.Name);
+    }
+}
+
+void EquipAction::EquipItem(FindItemVisitor* visitor)
+{
+    IterateItems(visitor);
+    list<Item*> items = visitor->GetResult();
+	if (!items.empty()) EquipItem(**items.begin());
+}
+
+
+void EquipAction::EquipItem(Item& item)
+{
+    uint8 bagIndex = item.GetBagSlot();
+    uint8 slot = item.GetSlot();
+    uint32 itemId = item.GetTemplate()->ItemId;
+
+    if (item.GetTemplate()->InventoryType == INVTYPE_AMMO)
+    {
+        bot->SetAmmo(itemId);
+    }
+    else
+    {
+        WorldPacket* const packet = new WorldPacket(CMSG_AUTOEQUIP_ITEM, 2);
+            *packet << bagIndex << slot;
+        bot->GetSession()->QueuePacket(packet);
+    }
+
+    ostringstream out; out << "equipping " << chat->formatItem(item.GetTemplate());
+    ai->TellMaster(out);
+}
diff --git a/src/plugins/playerbot/strategy/actions/EquipAction.h b/src/plugins/playerbot/strategy/actions/EquipAction.h
new file mode 100644
index 0000000..d23223c
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/EquipAction.h
@@ -0,0 +1,21 @@
+#pragma once
+
+#include "../Action.h"
+#include "InventoryAction.h"
+
+namespace ai
+{
+    class EquipAction : public InventoryAction {
+    public:
+        EquipAction(PlayerbotAI* ai) : InventoryAction(ai, "equip") {}
+        virtual bool Execute(Event event);
+
+    private:
+        void EquipItem(FindItemVisitor* visitor);
+        void EquipItem(Item& item);
+        void TellEquipmentSets();
+        bool UseEquipmentSet(string& name);
+        bool UseEquipmentSet(EquipmentSet& set);
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/actions/FollowActions.cpp b/src/plugins/playerbot/strategy/actions/FollowActions.cpp
new file mode 100644
index 0000000..dfa115f
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/FollowActions.cpp
@@ -0,0 +1,49 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "FollowActions.h"
+#include "../../PlayerbotAIConfig.h"
+#include "../values/Formations.h"
+
+using namespace ai;
+
+bool FollowAction::Execute(Event event)
+{
+    Formation* formation = AI_VALUE(Formation*, "formation");
+    string target = formation->GetTargetName();
+    if (!target.empty())
+    {
+        return Follow(AI_VALUE(Unit*, target));
+    }
+    else
+    {
+        WorldLocation loc = formation->GetLocation();
+        if (loc == Formation::NullLocation || loc.GetMapId() == -1)
+            return false;
+
+        return MoveTo(loc.GetMapId(), loc.m_positionX, loc.m_positionY, loc.m_positionZ);
+    }
+}
+
+bool FollowAction::isUseful()
+{
+    Formation* formation = AI_VALUE(Formation*, "formation");
+    float distance = 0;
+    string target = formation->GetTargetName();
+
+    if (!target.empty())
+    {
+        distance = AI_VALUE2(float, "distance", target);
+    }
+    else
+    {
+        WorldLocation loc = formation->GetLocation();
+        if (loc == Formation::NullLocation || bot->GetMapId() != loc.GetMapId())
+            return false;
+
+        distance = bot->GetDistance(loc);
+    }
+
+    return distance > formation->GetMaxDistance() &&
+            !AI_VALUE(bool, "can loot");
+}
+
diff --git a/src/plugins/playerbot/strategy/actions/FollowActions.h b/src/plugins/playerbot/strategy/actions/FollowActions.h
new file mode 100644
index 0000000..971ca99
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/FollowActions.h
@@ -0,0 +1,14 @@
+#pragma once
+
+#include "../Action.h"
+#include "MovementActions.h"
+
+namespace ai
+{
+	class FollowAction : public MovementAction {
+	public:
+		FollowAction(PlayerbotAI* ai) : MovementAction(ai, "follow") {}
+		virtual bool Execute(Event event);
+        virtual bool isUseful();
+	};
+}
diff --git a/src/plugins/playerbot/strategy/actions/GenericActions.cpp b/src/plugins/playerbot/strategy/actions/GenericActions.cpp
new file mode 100644
index 0000000..22285f0
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/GenericActions.cpp
@@ -0,0 +1,5 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "GenericActions.h"
+
+using namespace ai;
diff --git a/src/plugins/playerbot/strategy/actions/GenericActions.h b/src/plugins/playerbot/strategy/actions/GenericActions.h
new file mode 100644
index 0000000..b32a8e3
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/GenericActions.h
@@ -0,0 +1,19 @@
+#pragma once
+
+#include "../Action.h"
+#include "GenericSpellActions.h"
+#include "ReachTargetActions.h"
+#include "ChooseTargetActions.h"
+#include "MovementActions.h"
+
+namespace ai
+{
+    class MeleeAction : public AttackAction 
+    {
+    public:
+        MeleeAction(PlayerbotAI* ai) : AttackAction(ai, "melee") {}
+
+        virtual string GetTargetName() { return "current target"; }
+    };
+
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/actions/GenericSpellActions.cpp b/src/plugins/playerbot/strategy/actions/GenericSpellActions.cpp
new file mode 100644
index 0000000..0ffeccc
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/GenericSpellActions.cpp
@@ -0,0 +1,58 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "GenericActions.h"
+
+using namespace ai;
+
+bool CastSpellAction::Execute(Event event) 
+{
+	return ai->CastSpell(spell, GetTarget()); 
+}
+
+bool CastSpellAction::isPossible() 
+{
+    if (AI_VALUE2(float, "distance", GetTargetName()) > range)
+        return false;
+
+	return ai->CanCastSpell(spell, GetTarget());
+}
+
+bool CastSpellAction::isUseful() 
+{
+	return GetTarget() && AI_VALUE2(bool, "spell cast useful", spell);
+}
+
+bool CastAuraSpellAction::isUseful() 
+{
+	return CastSpellAction::isUseful() && !ai->HasAura(spell, GetTarget());
+}
+
+bool CastEnchantItemAction::isUseful()
+{
+    if (!CastSpellAction::isUseful())
+        return false;
+
+    uint32 spellId = AI_VALUE2(uint32, "spell id", spell);
+    return spellId && AI_VALUE2(Item*, "item for spell", spellId);
+}
+
+bool CastHealingSpellAction::isUseful() 
+{
+	return CastAuraSpellAction::isUseful() && AI_VALUE2(uint8, "health", GetTargetName()) < (100 - estAmount);
+}
+
+bool CastAoeHealSpellAction::isUseful()
+{
+	return CastSpellAction::isUseful() && AI_VALUE2(uint8, "aoe heal", "medium") > 0;
+}
+
+
+Value<Unit*>* CurePartyMemberAction::GetTargetValue()
+{
+    return context->GetValue<Unit*>("party member to dispel", dispelType);
+}
+
+Value<Unit*>* BuffOnPartyAction::GetTargetValue()
+{
+    return context->GetValue<Unit*>("party member without aura", spell);
+}
diff --git a/src/plugins/playerbot/strategy/actions/GenericSpellActions.h b/src/plugins/playerbot/strategy/actions/GenericSpellActions.h
new file mode 100644
index 0000000..e286a17
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/GenericSpellActions.h
@@ -0,0 +1,271 @@
+#pragma once
+
+#include "../Action.h"
+#include "../../PlayerbotAIConfig.h"
+
+#define BEGIN_SPELL_ACTION(clazz, name) \
+class clazz : public CastSpellAction \
+        { \
+        public: \
+        clazz(PlayerbotAI* ai) : CastSpellAction(ai, name) {} \
+
+
+#define END_SPELL_ACTION() \
+    };
+
+#define BEGIN_DEBUFF_ACTION(clazz, name) \
+class clazz : public CastDebuffSpellAction \
+        { \
+        public: \
+        clazz(PlayerbotAI* ai) : CastDebuffSpellAction(ai, name) {} \
+
+#define BEGIN_RANGED_SPELL_ACTION(clazz, name) \
+class clazz : public CastSpellAction \
+        { \
+        public: \
+        clazz(PlayerbotAI* ai) : CastSpellAction(ai, name) {} \
+
+#define BEGIN_MELEE_SPELL_ACTION(clazz, name) \
+class clazz : public CastMeleeSpellAction \
+        { \
+        public: \
+        clazz(PlayerbotAI* ai) : CastMeleeSpellAction(ai, name) {} \
+
+
+#define END_RANGED_SPELL_ACTION() \
+    };
+
+
+#define BEGIN_BUFF_ON_PARTY_ACTION(clazz, name) \
+class clazz : public BuffOnPartyAction \
+        { \
+        public: \
+        clazz(PlayerbotAI* ai) : BuffOnPartyAction(ai, name) {}
+
+namespace ai
+{
+    class CastSpellAction : public Action
+    {
+    public:
+        CastSpellAction(PlayerbotAI* ai, string spell) : Action(ai, spell),
+			range(sPlayerbotAIConfig.spellDistance)
+        {
+            this->spell = spell;
+        }
+
+		virtual string GetTargetName() { return "current target"; };
+        virtual bool Execute(Event event);
+        virtual bool isPossible();
+		virtual bool isUseful();
+        virtual ActionThreatType getThreatType() { return ACTION_THREAT_SINGLE; }
+
+		virtual NextAction** getPrerequisites()
+		{
+			if (range > sPlayerbotAIConfig.spellDistance)
+				return NULL;
+			else if (range > ATTACK_DISTANCE)
+				return NextAction::merge( NextAction::array(0, new NextAction("reach spell"), NULL), Action::getPrerequisites());
+			else
+				return NextAction::merge( NextAction::array(0, new NextAction("reach melee"), NULL), Action::getPrerequisites());
+		}
+
+    protected:
+        string spell;
+		float range;
+    };
+
+	//---------------------------------------------------------------------------------------------------------------------
+	class CastAuraSpellAction : public CastSpellAction
+	{
+	public:
+		CastAuraSpellAction(PlayerbotAI* ai, string spell) : CastSpellAction(ai, spell) {}
+
+		virtual bool isUseful();
+	};
+
+    //---------------------------------------------------------------------------------------------------------------------
+    class CastMeleeSpellAction : public CastSpellAction
+    {
+    public:
+        CastMeleeSpellAction(PlayerbotAI* ai, string spell) : CastSpellAction(ai, spell) {
+			range = ATTACK_DISTANCE;
+		}
+    };
+
+    //---------------------------------------------------------------------------------------------------------------------
+    class CastDebuffSpellAction : public CastAuraSpellAction
+    {
+    public:
+        CastDebuffSpellAction(PlayerbotAI* ai, string spell) : CastAuraSpellAction(ai, spell) {}
+    };
+
+    class CastDebuffSpellOnAttackerAction : public CastAuraSpellAction
+    {
+    public:
+        CastDebuffSpellOnAttackerAction(PlayerbotAI* ai, string spell) : CastAuraSpellAction(ai, spell) {}
+        Value<Unit*>* GetTargetValue()
+        {
+            return context->GetValue<Unit*>("attacker without aura", spell);
+        }
+        virtual string getName() { return spell + " on attacker"; }
+        virtual ActionThreatType getThreatType() { return ACTION_THREAT_AOE; }
+    };
+
+	class CastBuffSpellAction : public CastAuraSpellAction
+	{
+	public:
+		CastBuffSpellAction(PlayerbotAI* ai, string spell) : CastAuraSpellAction(ai, spell)
+		{
+			range = sPlayerbotAIConfig.spellDistance;
+		}
+
+        virtual string GetTargetName() { return "self target"; }
+	};
+
+	class CastEnchantItemAction : public CastSpellAction
+	{
+	public:
+	    CastEnchantItemAction(PlayerbotAI* ai, string spell) : CastSpellAction(ai, spell)
+		{
+			range = sPlayerbotAIConfig.spellDistance;
+		}
+
+        virtual bool isUseful();
+        virtual string GetTargetName() { return "self target"; }
+	};
+
+    //---------------------------------------------------------------------------------------------------------------------
+
+    class CastHealingSpellAction : public CastAuraSpellAction
+    {
+    public:
+        CastHealingSpellAction(PlayerbotAI* ai, string spell, uint8 estAmount = 15.0f) : CastAuraSpellAction(ai, spell)
+		{
+            this->estAmount = estAmount;
+			range = sPlayerbotAIConfig.spellDistance;
+        }
+		virtual string GetTargetName() { return "self target"; }
+        virtual bool isUseful();
+        virtual ActionThreatType getThreatType() { return ACTION_THREAT_AOE; }
+
+    protected:
+        uint8 estAmount;
+    };
+
+    class CastAoeHealSpellAction : public CastHealingSpellAction
+    {
+    public:
+    	CastAoeHealSpellAction(PlayerbotAI* ai, string spell, uint8 estAmount = 15.0f) : CastHealingSpellAction(ai, spell, estAmount) {}
+		virtual string GetTargetName() { return "party member to heal"; }
+        virtual bool isUseful();
+    };
+
+	class CastCureSpellAction : public CastSpellAction
+	{
+	public:
+		CastCureSpellAction(PlayerbotAI* ai, string spell) : CastSpellAction(ai, spell)
+		{
+			range = sPlayerbotAIConfig.spellDistance;
+		}
+
+		virtual string GetTargetName() { return "self target"; }
+	};
+
+	class PartyMemberActionNameSupport {
+	public:
+		PartyMemberActionNameSupport(string spell)
+		{
+			name = string(spell) + " on party";
+		}
+
+		virtual string getName() { return name; }
+
+	private:
+		string name;
+	};
+
+    class HealPartyMemberAction : public CastHealingSpellAction, public PartyMemberActionNameSupport
+    {
+    public:
+        HealPartyMemberAction(PlayerbotAI* ai, string spell, uint8 estAmount = 15.0f) :
+			CastHealingSpellAction(ai, spell, estAmount), PartyMemberActionNameSupport(spell) {}
+
+		virtual string GetTargetName() { return "party member to heal"; }
+		virtual string getName() { return PartyMemberActionNameSupport::getName(); }
+    };
+
+	class ResurrectPartyMemberAction : public CastSpellAction
+	{
+	public:
+		ResurrectPartyMemberAction(PlayerbotAI* ai, string spell) : CastSpellAction(ai, spell) {}
+
+		virtual string GetTargetName() { return "party member to resurrect"; }
+	};
+    //---------------------------------------------------------------------------------------------------------------------
+
+    class CurePartyMemberAction : public CastSpellAction, public PartyMemberActionNameSupport
+    {
+    public:
+        CurePartyMemberAction(PlayerbotAI* ai, string spell, uint32 dispelType) :
+			CastSpellAction(ai, spell), PartyMemberActionNameSupport(spell)
+        {
+            this->dispelType = dispelType;
+        }
+
+		virtual Value<Unit*>* GetTargetValue();
+		virtual string getName() { return PartyMemberActionNameSupport::getName(); }
+
+    protected:
+        uint32 dispelType;
+    };
+
+    //---------------------------------------------------------------------------------------------------------------------
+
+    class BuffOnPartyAction : public CastBuffSpellAction, public PartyMemberActionNameSupport
+    {
+    public:
+        BuffOnPartyAction(PlayerbotAI* ai, string spell) :
+			CastBuffSpellAction(ai, spell), PartyMemberActionNameSupport(spell) {}
+    public:
+		virtual Value<Unit*>* GetTargetValue();
+		virtual string getName() { return PartyMemberActionNameSupport::getName(); }
+    };
+
+    //---------------------------------------------------------------------------------------------------------------------
+
+    class CastShootAction : public CastSpellAction
+    {
+    public:
+        CastShootAction(PlayerbotAI* ai) : CastSpellAction(ai, "shoot") {}
+        virtual ActionThreatType getThreatType() { return ACTION_THREAT_NONE; }
+    };
+
+	class CastLifeBloodAction : public CastHealingSpellAction
+	{
+	public:
+		CastLifeBloodAction(PlayerbotAI* ai) : CastHealingSpellAction(ai, "lifeblood") {}
+	};
+
+	class CastGiftOfTheNaaruAction : public CastHealingSpellAction
+	{
+	public:
+		CastGiftOfTheNaaruAction(PlayerbotAI* ai) : CastHealingSpellAction(ai, "gift of the naaru") {}
+	};
+
+    class CastArcaneTorrentAction : public CastBuffSpellAction
+    {
+    public:
+        CastArcaneTorrentAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "arcane torrent") {}
+    };
+
+    class CastSpellOnEnemyHealerAction : public CastSpellAction
+    {
+    public:
+        CastSpellOnEnemyHealerAction(PlayerbotAI* ai, string spell) : CastSpellAction(ai, spell) {}
+        Value<Unit*>* GetTargetValue()
+        {
+            return context->GetValue<Unit*>("enemy healer target", spell);
+        }
+        virtual string getName() { return spell + " on enemy healer"; }
+    };
+}
diff --git a/src/plugins/playerbot/strategy/actions/GossipHelloAction.cpp b/src/plugins/playerbot/strategy/actions/GossipHelloAction.cpp
new file mode 100644
index 0000000..c5000cd
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/GossipHelloAction.cpp
@@ -0,0 +1,71 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "GossipHelloAction.h"
+
+
+using namespace ai;
+
+bool GossipHelloAction::Execute(Event event)
+{
+    ObjectGuid guid;
+
+    WorldPacket &p = event.getPacket();
+    if (p.empty())
+    {
+        Player* master = GetMaster();
+        if (master && master->GetSelectedUnit())
+            guid = master->GetSelectedUnit()->GetGUID();
+    }
+    else
+    {
+        p.rpos(0);
+        p >> guid;
+    }
+
+    if (!guid)
+        return false;
+
+    Creature *pCreature = bot->GetNPCIfCanInteractWith(guid, UNIT_NPC_FLAG_NONE);
+    if (!pCreature)
+    {
+        sLog->outMessage("playerbot", LOG_LEVEL_DEBUG, "[PlayerbotMgr]: HandleMasterIncomingPacket - Received  CMSG_GOSSIP_HELLO %d not found or you can't interact with him.", guid.GetRawValue());
+        return false;
+    }
+
+    GossipMenuItemsMapBounds pMenuItemBounds = sObjectMgr->GetGossipMenuItemsMapBounds(pCreature->GetCreatureTemplate()->GossipMenuId);
+    if (pMenuItemBounds.first == pMenuItemBounds.second)
+        return false;
+
+    WorldPacket p1;
+    p1 << guid;
+    bot->GetSession()->HandleGossipHelloOpcode(p1);
+    bot->SetFacingToObject(pCreature);
+
+    ostringstream out; out << "--- " << pCreature->GetName() << " ---";
+    ai->TellMasterNoFacing(out.str());
+
+    GossipMenu& menu = bot->PlayerTalkClass->GetGossipMenu();
+    int i = 0, loops = 0;
+    set<uint32> alreadyTalked;
+    while (i < menu.GetMenuItemCount() && loops++ < 100)
+    {
+        GossipMenuItem const* item = menu.GetItem(i);
+        ai->TellMasterNoFacing(item->Message);
+
+        if (item->OptionType < 1000 && item->OptionType != GOSSIP_OPTION_GOSSIP)
+        {
+            i++;
+            continue;
+        }
+
+        WorldPacket p1;
+        std::string code;
+        p1 << guid << menu.GetMenuId() << i << code;
+        bot->GetSession()->HandleGossipSelectOptionOpcode(p1);
+
+        i = 0;
+    }
+
+    bot->TalkedToCreature(pCreature->GetEntry(), pCreature->GetGUID());
+    return true;
+}
diff --git a/src/plugins/playerbot/strategy/actions/GossipHelloAction.h b/src/plugins/playerbot/strategy/actions/GossipHelloAction.h
new file mode 100644
index 0000000..603737c
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/GossipHelloAction.h
@@ -0,0 +1,13 @@
+#pragma once
+
+#include "../Action.h"
+
+namespace ai
+{
+    class GossipHelloAction : public Action {
+    public:
+        GossipHelloAction(PlayerbotAI* ai) : Action(ai, "gossip hello") {}
+        virtual bool Execute(Event event);
+    };
+
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/actions/GuildAcceptAction.cpp b/src/plugins/playerbot/strategy/actions/GuildAcceptAction.cpp
new file mode 100644
index 0000000..49d71cc
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/GuildAcceptAction.cpp
@@ -0,0 +1,42 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "GuildAcceptAction.h"
+
+using namespace std;
+using namespace ai;
+
+bool GuildAcceptAction::Execute(Event event)
+{
+    Player* master = GetMaster();
+    if (!master)
+        return false;
+
+    bool accept = true;
+    uint32 guildId = master->GetGuildId();
+    if (!guildId)
+    {
+        ai->TellMaster("You are not in a guild");
+        accept = false;
+    }
+    else if (bot->GetGuildId())
+    {
+        ai->TellMaster("Sorry, I am in a guild already");
+        accept = false;
+    }
+    else if (!ai->GetSecurity()->CheckLevelFor(PLAYERBOT_SECURITY_INVITE, false, master, true))
+    {
+        accept = false;
+    }
+
+    WorldPacket packet;
+    if (accept)
+    {
+        bot->SetGuildIdInvited(guildId);
+        bot->GetSession()->HandleGuildAcceptOpcode(packet);
+    }
+    else
+    {
+        bot->GetSession()->HandleGuildDeclineOpcode(packet);
+    }
+    return true;
+}
diff --git a/src/plugins/playerbot/strategy/actions/GuildAcceptAction.h b/src/plugins/playerbot/strategy/actions/GuildAcceptAction.h
new file mode 100644
index 0000000..ab8910c
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/GuildAcceptAction.h
@@ -0,0 +1,14 @@
+#pragma once
+
+#include "../Action.h"
+#include "InventoryAction.h"
+
+namespace ai
+{
+    class GuildAcceptAction : public Action {
+    public:
+        GuildAcceptAction(PlayerbotAI* ai) : Action(ai, "guild accept") {}
+        virtual bool Execute(Event event);
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/actions/GuildBankAction.cpp b/src/plugins/playerbot/strategy/actions/GuildBankAction.cpp
new file mode 100644
index 0000000..849b1b3
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/GuildBankAction.cpp
@@ -0,0 +1,61 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "GuildBankAction.h"
+
+#include "../values/ItemCountValue.h"
+#include "../../../Guilds/Guild.h"
+#include "../../../Guilds/GuildMgr.h"
+
+using namespace std;
+using namespace ai;
+
+bool GuildBankAction::Execute(Event event)
+{
+    string text = event.getParam();
+    if (text.empty())
+        return false;
+
+    list<ObjectGuid> gos = AI_VALUE(list<ObjectGuid>, "nearest game objects");
+    for (list<ObjectGuid>::iterator i = gos.begin(); i != gos.end(); i++)
+    {
+        GameObject* go = ai->GetGameObject(*i);
+        if (!go || !bot->GetGameObjectIfCanInteractWith(go->GetGUID(), GAMEOBJECT_TYPE_GUILD_BANK))
+            continue;
+
+        return Execute(text, go);
+    }
+
+    ai->TellMaster("Cannot find the guild bank nearby");
+    return false;
+}
+
+bool GuildBankAction::Execute(string text, GameObject* bank)
+{
+    bool result = true;
+
+    list<Item*> found = parseItems(text);
+    if (found.empty())
+        return false;
+
+    for (list<Item*>::iterator i = found.begin(); i != found.end(); i++)
+    {
+        Item* item = *i;
+        if (item)
+            result &= MoveFromCharToBank(item, bank);
+    }
+
+    return result;
+}
+
+bool GuildBankAction::MoveFromCharToBank(Item* item, GameObject* bank)
+{
+    uint32 playerSlot = item->GetSlot();
+    uint32 playerBag = item->GetBagSlot();
+
+    Guild* guild = sGuildMgr->GetGuildById(bot->GetGuildId());
+    guild->SwapItems(bot, 0, playerSlot, 0, INVENTORY_SLOT_BAG_0, 0);
+
+    ostringstream out; out << chat->formatItem(item->GetTemplate()) << " put to guild bank";
+    ai->TellMaster(out);
+    return true;
+}
diff --git a/src/plugins/playerbot/strategy/actions/GuildBankAction.h b/src/plugins/playerbot/strategy/actions/GuildBankAction.h
new file mode 100644
index 0000000..374fc0f
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/GuildBankAction.h
@@ -0,0 +1,18 @@
+#pragma once
+
+#include "../Action.h"
+#include "InventoryAction.h"
+
+namespace ai
+{
+    class GuildBankAction : public InventoryAction {
+    public:
+        GuildBankAction(PlayerbotAI* ai) : InventoryAction(ai, "guild bank") {}
+        virtual bool Execute(Event event);
+
+    private:
+        bool Execute(string text, GameObject* bank);
+        bool MoveFromCharToBank(Item* item, GameObject* bank);
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/actions/HelpAction.cpp b/src/plugins/playerbot/strategy/actions/HelpAction.cpp
new file mode 100644
index 0000000..6e7b776
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/HelpAction.cpp
@@ -0,0 +1,54 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "HelpAction.h"
+#include "ChatActionContext.h"
+
+using namespace ai;
+
+HelpAction::HelpAction(PlayerbotAI* ai) : Action(ai, "help")
+{
+    chatContext = new ChatActionContext();
+}
+
+HelpAction::~HelpAction()
+{
+    delete chatContext;
+}
+
+bool HelpAction::Execute(Event event)
+{
+    TellChatCommands();
+    TellStrategies();
+    return true;
+}
+
+void HelpAction::TellChatCommands()
+{
+    ostringstream out;
+    out << "Whisper any of: ";
+    out << CombineSupported(chatContext->supports());
+    out << ", [item], [quest] or [object] link";
+    ai->TellMaster(out);
+}
+
+void HelpAction::TellStrategies()
+{
+    ostringstream out;
+    out << "Possible strategies (co/nc/dead commands): ";
+    out << CombineSupported(ai->GetAiObjectContext()->GetSupportedStrategies());
+    ai->TellMaster(out);
+}
+
+string HelpAction::CombineSupported(set<string> commands)
+{
+    ostringstream out;
+
+    for (set<string>::iterator i = commands.begin(); i != commands.end(); )
+	{
+        out << *i;
+		if (++i != commands.end())
+			out << ", ";
+	}
+
+    return out.str();
+}
diff --git a/src/plugins/playerbot/strategy/actions/HelpAction.h b/src/plugins/playerbot/strategy/actions/HelpAction.h
new file mode 100644
index 0000000..c0bc5e3
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/HelpAction.h
@@ -0,0 +1,22 @@
+#pragma once
+
+#include "../Action.h"
+
+namespace ai
+{
+    class HelpAction : public Action {
+    public:
+        HelpAction(PlayerbotAI* ai);
+        virtual ~HelpAction();
+        virtual bool Execute(Event event);
+
+    private:
+        void TellChatCommands();
+        void TellStrategies();
+        string CombineSupported(set<string> commands);
+
+    private:
+        NamedObjectContext<Action>* chatContext;
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/actions/InventoryAction.cpp b/src/plugins/playerbot/strategy/actions/InventoryAction.cpp
new file mode 100644
index 0000000..896466c
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/InventoryAction.cpp
@@ -0,0 +1,288 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "InventoryAction.h"
+
+#include "../values/ItemCountValue.h"
+
+using namespace ai;
+
+
+class FindPotionVisitor : public FindUsableItemVisitor
+{
+public:
+    FindPotionVisitor(Player* bot, uint32 effectId) : FindUsableItemVisitor(bot), effectId(effectId) {}
+
+    virtual bool Accept(const ItemTemplate* proto)
+    {
+        if (proto->Class == ITEM_CLASS_CONSUMABLE &&
+            proto->SubClass == ITEM_SUBCLASS_POTION &&
+            proto->Spells[0].SpellCategory == 4)
+        {
+            for (int j = 0; j < MAX_ITEM_PROTO_SPELLS; j++)
+            {
+                const SpellInfo* const spellInfo = sSpellMgr->GetSpellInfo(proto->Spells[j].SpellId);
+                if (!spellInfo)
+                    return false;
+
+                for (int i = 0 ; i < 3; i++)
+                {
+                    if (spellInfo->Effects[i].Effect == effectId)
+                        return true;
+                }
+            }
+        }
+        return false;
+    }
+
+private:
+    uint32 effectId;
+};
+
+class FindFoodVisitor : public FindUsableItemVisitor
+{
+public:
+    FindFoodVisitor(Player* bot, uint32 spellCategory) : FindUsableItemVisitor(bot)
+    {
+        this->spellCategory = spellCategory;
+    }
+
+    virtual bool Accept(const ItemTemplate* proto)
+    {
+        return proto->Class == ITEM_CLASS_CONSUMABLE &&
+            proto->SubClass == ITEM_SUBCLASS_FOOD &&
+            proto->Spells[0].SpellCategory == spellCategory;
+    }
+
+private:
+    uint32 spellCategory;
+};
+
+void InventoryAction::IterateItems(IterateItemsVisitor* visitor, IterateItemsMask mask)
+{
+    if (mask & ITERATE_ITEMS_IN_BAGS)
+        IterateItemsInBags(visitor);
+
+    if (mask & ITERATE_ITEMS_IN_EQUIP)
+        IterateItemsInEquip(visitor);
+}
+
+void InventoryAction::IterateItemsInBags(IterateItemsVisitor* visitor)
+{
+
+
+    for(int i = INVENTORY_SLOT_ITEM_START; i < INVENTORY_SLOT_ITEM_END; ++i)
+        if (Item *pItem = bot->GetItemByPos(INVENTORY_SLOT_BAG_0, i))
+            if (!visitor->Visit(pItem))
+                return;
+
+    for(int i = KEYRING_SLOT_START; i < CURRENCYTOKEN_SLOT_END; ++i)
+        if (Item *pItem = bot->GetItemByPos(INVENTORY_SLOT_BAG_0, i))
+            if (!visitor->Visit(pItem))
+                return;
+
+    for(int i = INVENTORY_SLOT_BAG_START; i < INVENTORY_SLOT_BAG_END; ++i)
+        if (Bag *pBag = (Bag*)bot->GetItemByPos(INVENTORY_SLOT_BAG_0, i))
+            for(uint32 j = 0; j < pBag->GetBagSize(); ++j)
+                if (Item* pItem = pBag->GetItemByPos(j))
+                    if (!visitor->Visit(pItem))
+                        return;
+}
+
+void InventoryAction::IterateItemsInEquip(IterateItemsVisitor* visitor)
+{
+    for (uint8 slot = EQUIPMENT_SLOT_START; slot < EQUIPMENT_SLOT_END; slot++)
+    {
+        Item* const pItem = bot->GetItemByPos(INVENTORY_SLOT_BAG_0, slot);
+        if(!pItem)
+            continue;
+
+        if (!visitor->Visit(pItem))
+            return;
+    }
+}
+
+bool compare_items(const ItemTemplate *proto1, const ItemTemplate *proto2)
+{
+    if (proto1->Class != proto2->Class)
+        return proto1->Class > proto2->Class;
+
+    if (proto1->SubClass != proto2->SubClass)
+        return proto1->SubClass < proto2->SubClass;
+
+    if (proto1->Quality != proto2->Quality)
+        return proto1->Quality < proto2->Quality;
+
+    if (proto1->ItemLevel != proto2->ItemLevel)
+        return proto1->ItemLevel > proto2->ItemLevel;
+
+    return false;
+}
+
+bool compare_items_by_level(const Item* item1, const Item* item2)
+{
+    return compare_items(item1->GetTemplate(), item2->GetTemplate());
+}
+
+void InventoryAction::TellItems(map<uint32, int> itemMap)
+{
+    list<ItemTemplate const*> items;
+    for (map<uint32, int>::iterator i = itemMap.begin(); i != itemMap.end(); i++)
+    {
+        items.push_back(sObjectMgr->GetItemTemplate(i->first));
+    }
+
+    items.sort(compare_items);
+
+    uint32 oldClass = -1;
+    for (list<ItemTemplate const*>::iterator i = items.begin(); i != items.end(); i++)
+    {
+        ItemTemplate const *proto = *i;
+
+        if (proto->Class != oldClass)
+        {
+            oldClass = proto->Class;
+            switch (proto->Class)
+            {
+            case ITEM_CLASS_CONSUMABLE:
+                ai->TellMaster("--- consumable ---");
+                break;
+            case ITEM_CLASS_CONTAINER:
+                ai->TellMaster("--- container ---");
+                break;
+            case ITEM_CLASS_WEAPON:
+                ai->TellMaster("--- weapon ---");
+                break;
+            case ITEM_CLASS_GEM:
+                ai->TellMaster("--- gem ---");
+                break;
+            case ITEM_CLASS_ARMOR:
+                ai->TellMaster("--- armor ---");
+                break;
+            case ITEM_CLASS_REAGENT:
+                ai->TellMaster("--- reagent ---");
+                break;
+            case ITEM_CLASS_PROJECTILE:
+                ai->TellMaster("--- projectile ---");
+                break;
+            case ITEM_CLASS_TRADE_GOODS:
+                ai->TellMaster("--- trade goods ---");
+                break;
+            case ITEM_CLASS_GENERIC:
+                ai->TellMaster("--- generic ---");
+                break;
+            case ITEM_CLASS_RECIPE:
+                ai->TellMaster("--- recipe ---");
+                break;
+            case ITEM_CLASS_MONEY:
+                ai->TellMaster("--- money ---");
+                break;
+            case ITEM_CLASS_QUIVER:
+                ai->TellMaster("--- quiver ---");
+                break;
+            case ITEM_CLASS_QUEST:
+                ai->TellMaster("--- quest items ---");
+                break;
+            case ITEM_CLASS_KEY:
+                ai->TellMaster("--- keys ---");
+                break;
+            case ITEM_CLASS_PERMANENT:
+                ai->TellMaster("--- permanent ---");
+                break;
+            case ITEM_CLASS_MISC:
+                ai->TellMaster("--- other ---");
+                break;
+            case ITEM_CLASS_GLYPH:
+                ai->TellMaster("--- glyph ---");
+                break;
+            }
+        }
+
+        TellItem(proto, itemMap[proto->ItemId]);
+    }
+}
+
+void InventoryAction::TellItem(ItemTemplate const * proto, int count)
+{
+    ai->TellMaster(chat->formatItem(proto, count));
+}
+
+list<Item*> InventoryAction::parseItems(string text)
+{
+    set<Item*> found;
+    size_t pos = text.find(" ");
+    int count = pos!=string::npos ? atoi(text.substr(pos + 1).c_str()) : TRADE_SLOT_TRADED_COUNT;
+    if (count < 1) count = 1;
+    else if (count > TRADE_SLOT_TRADED_COUNT) count = TRADE_SLOT_TRADED_COUNT;
+
+    if (text == "food")
+    {
+        FindFoodVisitor visitor(bot, 11);
+        IterateItems(&visitor, ITERATE_ITEMS_IN_BAGS);
+        found.insert(visitor.GetResult().begin(), visitor.GetResult().end());
+    }
+
+    if (text == "drink")
+    {
+        FindFoodVisitor visitor(bot, 59);
+        IterateItems(&visitor, ITERATE_ITEMS_IN_BAGS);
+        found.insert(visitor.GetResult().begin(), visitor.GetResult().end());
+    }
+
+    if (text == "mana potion")
+    {
+        FindPotionVisitor visitor(bot, SPELL_EFFECT_ENERGIZE);
+        IterateItems(&visitor, ITERATE_ITEMS_IN_BAGS);
+        found.insert(visitor.GetResult().begin(), visitor.GetResult().end());
+    }
+
+    if (text == "healing potion")
+    {
+        FindPotionVisitor visitor(bot, SPELL_EFFECT_HEAL);
+        IterateItems(&visitor, ITERATE_ITEMS_IN_BAGS);
+        found.insert(visitor.GetResult().begin(), visitor.GetResult().end());
+    }
+
+    FindUsableNamedItemVisitor visitor(bot, text);
+    IterateItems(&visitor, ITERATE_ITEMS_IN_BAGS);
+    found.insert(visitor.GetResult().begin(), visitor.GetResult().end());
+
+    uint32 quality = chat->parseItemQuality(text);
+    if (quality != MAX_ITEM_QUALITY)
+    {
+        FindItemsToTradeByQualityVisitor visitor(quality, count);
+        IterateItems(&visitor);
+        found.insert(visitor.GetResult().begin(), visitor.GetResult().end());
+    }
+
+    uint32 itemClass = MAX_ITEM_CLASS, itemSubClass = 0;
+    if (chat->parseItemClass(text, &itemClass, &itemSubClass))
+    {
+        FindItemsToTradeByClassVisitor visitor(itemClass, itemSubClass, count);
+        IterateItems(&visitor);
+        found.insert(visitor.GetResult().begin(), visitor.GetResult().end());
+    }
+
+    uint32 fromSlot = chat->parseSlot(text);
+    if (fromSlot != EQUIPMENT_SLOT_END)
+    {
+        Item* item = bot->GetItemByPos(INVENTORY_SLOT_BAG_0, fromSlot);
+        if (item)
+            found.insert(item);
+    }
+
+    ItemIds ids = chat->parseItems(text);
+    for (ItemIds::iterator i = ids.begin(); i != ids.end(); i++)
+    {
+        FindItemByIdVisitor visitor(*i);
+        IterateItems(&visitor, ITERATE_ALL_ITEMS);
+        found.insert(visitor.GetResult().begin(), visitor.GetResult().end());
+    }
+
+    list<Item*> result;
+    for (set<Item*>::iterator i = found.begin(); i != found.end(); ++i)
+        result.push_back(*i);
+
+    result.sort(compare_items_by_level);
+
+    return result;
+}
diff --git a/src/plugins/playerbot/strategy/actions/InventoryAction.h b/src/plugins/playerbot/strategy/actions/InventoryAction.h
new file mode 100644
index 0000000..a1f1af7
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/InventoryAction.h
@@ -0,0 +1,24 @@
+#pragma once
+
+#include "../Action.h"
+#include "../ItemVisitors.h"
+
+namespace ai
+{
+
+
+    class InventoryAction : public Action {
+    public:
+        InventoryAction(PlayerbotAI* ai, string name) : Action(ai, name) {}
+
+    protected:
+        void IterateItems(IterateItemsVisitor* visitor, IterateItemsMask mask = ITERATE_ITEMS_IN_BAGS);
+        void TellItems(map<uint32, int> items);
+        void TellItem(ItemTemplate const * proto, int count);
+        list<Item*> parseItems(string text);
+
+    private:
+        void IterateItemsInBags(IterateItemsVisitor* visitor);
+        void IterateItemsInEquip(IterateItemsVisitor* visitor);
+    };
+}
diff --git a/src/plugins/playerbot/strategy/actions/InventoryChangeFailureAction.cpp b/src/plugins/playerbot/strategy/actions/InventoryChangeFailureAction.cpp
new file mode 100644
index 0000000..5933a19
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/InventoryChangeFailureAction.cpp
@@ -0,0 +1,55 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "InventoryChangeFailureAction.h"
+
+
+using namespace ai;
+
+bool InventoryChangeFailureAction::Execute(Event event)
+{
+    WorldPacket p(event.getPacket());
+    p.rpos(0);
+    uint8 err;
+    p >> err;
+    if (err == EQUIP_ERR_OK)
+        return false;
+
+    switch (err)
+    {
+    case EQUIP_ERR_CANT_CARRY_MORE_OF_THIS:
+        ai->TellMaster("I can't carry anymore of those.");
+        break;
+    case EQUIP_ERR_MISSING_REAGENT:
+        ai->TellMaster("I'm missing some reagents for that.");
+        break;
+    case EQUIP_ERR_ITEM_LOCKED:
+        ai->TellMaster("That item is locked.");
+        break;
+    case EQUIP_ERR_ALREADY_LOOTED:
+        break;
+    case EQUIP_ERR_INVENTORY_FULL:
+        ai->TellMaster("My inventory is full.");
+        break;
+    case EQUIP_ERR_NOT_IN_COMBAT:
+        ai->TellMaster("I can't use that in combat.");
+        break;
+    case EQUIP_ERR_LOOT_CANT_LOOT_THAT_NOW:
+        ai->TellMaster("I can't get that now.");
+        break;
+    case EQUIP_ERR_ITEM_UNIQUE_EQUIPABLE:
+        ai->TellMaster("I can only have one of those equipped.");
+        break;
+    case EQUIP_ERR_BANK_FULL:
+        ai->TellMaster("My bank is full.");
+        break;
+    case EQUIP_ERR_ITEM_NOT_FOUND:
+        ai->TellMaster("I can't find the item.");
+        break;
+    case EQUIP_ERR_TOO_FAR_AWAY_FROM_BANK:
+        ai->TellMaster("I'm too far from the bank.");
+        break;
+    default:
+        ai->TellMaster("I can't use that.");
+    }
+    return true;
+}
diff --git a/src/plugins/playerbot/strategy/actions/InventoryChangeFailureAction.h b/src/plugins/playerbot/strategy/actions/InventoryChangeFailureAction.h
new file mode 100644
index 0000000..4125cd2
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/InventoryChangeFailureAction.h
@@ -0,0 +1,12 @@
+#pragma once
+
+#include "../Action.h"
+
+namespace ai
+{
+    class InventoryChangeFailureAction : public Action {
+    public:
+        InventoryChangeFailureAction(PlayerbotAI* ai) : Action(ai, "inventory change failure") {}
+        virtual bool Execute(Event event);
+    };
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/actions/InviteToGroupAction.h b/src/plugins/playerbot/strategy/actions/InviteToGroupAction.h
new file mode 100644
index 0000000..d57ee50
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/InviteToGroupAction.h
@@ -0,0 +1,28 @@
+#pragma once
+
+#include "../Action.h"
+
+namespace ai
+{
+    class InviteToGroupAction : public Action
+    {
+    public:
+        InviteToGroupAction(PlayerbotAI* ai) : Action(ai, "invite") {}
+
+        virtual bool Execute(Event event)
+        {
+            Player* master = event.getOwner();
+            if (!master)
+                return false;
+
+            WorldPacket p;
+            uint32 roles_mask = 0;
+            p << master->GetName();
+            p << roles_mask;
+            bot->GetSession()->HandleGroupInviteOpcode(p);
+
+            return true;
+        }
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/actions/LeaveGroupAction.h b/src/plugins/playerbot/strategy/actions/LeaveGroupAction.h
new file mode 100644
index 0000000..90c0fff
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/LeaveGroupAction.h
@@ -0,0 +1,79 @@
+#pragma once
+
+#include "../Action.h"
+#include "../../RandomPlayerbotMgr.h"
+
+namespace ai
+{
+    class LeaveGroupAction : public Action {
+    public:
+        LeaveGroupAction(PlayerbotAI* ai, string name = "leave") : Action(ai, name) {}
+
+        virtual bool Execute(Event event)
+        {
+            if (!bot->GetGroup())
+                return false;
+
+            ai->TellMaster("Goodbye!", PLAYERBOT_SECURITY_TALK);
+
+            WorldPacket p;
+            string member = bot->GetName();
+            p << uint32(PARTY_OP_LEAVE) << member << uint32(0);
+            bot->GetSession()->HandleGroupDisbandOpcode(p);
+
+            if (sRandomPlayerbotMgr.IsRandomBot(bot))
+            {
+                bot->GetPlayerbotAI()->SetMaster(NULL);
+                sRandomPlayerbotMgr.ScheduleTeleport(bot->GetGUID().GetCounter());
+                sRandomPlayerbotMgr.SetLootAmount(bot, 0);
+            }
+
+            ai->ResetStrategies();
+            return true;
+        }
+    };
+
+    class PartyCommandAction : public LeaveGroupAction {
+    public:
+        PartyCommandAction(PlayerbotAI* ai) : LeaveGroupAction(ai, "party command") {}
+
+        virtual bool Execute(Event event)
+        {
+            WorldPacket& p = event.getPacket();
+            p.rpos(0);
+            uint32 operation;
+            string member;
+
+            p >> operation >> member;
+
+            if (operation != PARTY_OP_LEAVE)
+                return false;
+
+            Player* master = GetMaster();
+            if (master && member == master->GetName())
+                return LeaveGroupAction::Execute(event);
+
+            return false;
+        }
+    };
+
+    class UninviteAction : public LeaveGroupAction {
+    public:
+        UninviteAction(PlayerbotAI* ai) : LeaveGroupAction(ai, "party command") {}
+
+        virtual bool Execute(Event event)
+        {
+            WorldPacket& p = event.getPacket();
+            p.rpos(0);
+            ObjectGuid guid;
+
+            p >> guid;
+
+            if (bot->GetGUID() == guid)
+                return LeaveGroupAction::Execute(event);
+
+            return false;
+        }
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/actions/LfgActions.cpp b/src/plugins/playerbot/strategy/actions/LfgActions.cpp
new file mode 100644
index 0000000..b837e83
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/LfgActions.cpp
@@ -0,0 +1,249 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "LfgActions.h"
+#include "../../AiFactory.h"
+#include "../../PlayerbotAIConfig.h"
+#include "../ItemVisitors.h"
+#include "../../RandomPlayerbotMgr.h"
+#include "../../../DungeonFinding/LFGMgr.h"
+#include "../../../DungeonFinding/LFG.h"
+
+using namespace ai;
+using namespace lfg;
+
+bool LfgJoinAction::Execute(Event event)
+{
+    if (!sPlayerbotAIConfig.randomBotJoinLfg)
+        return false;
+
+    if (bot->isDead())
+        return false;
+
+    if (!sRandomPlayerbotMgr.IsRandomBot(bot))
+        return false;
+
+    if (sLFGMgr->GetState(bot->GetGUID()) != LFG_STATE_NONE)
+        return false;
+
+    if (bot->IsBeingTeleported())
+        return false;
+
+    Map* map = bot->GetMap();
+    if (map && map->Instanceable())
+        return false;
+
+    return JoinProposal();
+}
+
+uint8 LfgJoinAction::GetRoles()
+{
+    if (!sRandomPlayerbotMgr.IsRandomBot(bot))
+    {
+        if (ai->IsTank(bot))
+            return PLAYER_ROLE_TANK;
+        if (ai->IsHeal(bot))
+            return PLAYER_ROLE_HEALER;
+        else return PLAYER_ROLE_DAMAGE;
+    }
+
+    int spec = AiFactory::GetPlayerSpecTab(bot);
+    switch (bot->getClass())
+    {
+    case CLASS_DRUID:
+        if (spec == 2)
+            return PLAYER_ROLE_HEALER;
+        else if (spec == 1 && bot->getLevel() >= 40)
+            return PLAYER_ROLE_TANK;
+        else
+            return PLAYER_ROLE_DAMAGE;
+        break;
+    case CLASS_PALADIN:
+        if (spec == 1)
+            return PLAYER_ROLE_TANK;
+        else if (spec == 0)
+            return PLAYER_ROLE_HEALER;
+        else
+            return PLAYER_ROLE_DAMAGE;
+        break;
+    case CLASS_PRIEST:
+        if (spec != 2)
+            return PLAYER_ROLE_HEALER;
+        else
+            return PLAYER_ROLE_DAMAGE;
+        break;
+    case CLASS_SHAMAN:
+        if (spec == 2)
+            return PLAYER_ROLE_HEALER;
+        else
+            return PLAYER_ROLE_DAMAGE;
+        break;
+    case CLASS_WARRIOR:
+        if (spec == 2)
+            return PLAYER_ROLE_TANK;
+        else
+            return PLAYER_ROLE_DAMAGE;
+        break;
+    default:
+        return PLAYER_ROLE_DAMAGE;
+        break;
+    }
+
+    return PLAYER_ROLE_DAMAGE;
+}
+
+bool LfgJoinAction::SetRoles()
+{
+    sLFGMgr->SetRoles(bot->GetGUID(), GetRoles());
+	return true;
+}
+
+bool LfgJoinAction::JoinProposal()
+{
+    ItemCountByQuality visitor;
+    IterateItems(&visitor, ITERATE_ITEMS_IN_EQUIP);
+	bool heroic = urand(0, 100) < 50 && (visitor.count[ITEM_QUALITY_EPIC] >= 3 || visitor.count[ITEM_QUALITY_RARE] >= 10) && bot->getLevel() >= 70;
+    bool random = urand(0, 100) < 25;
+    bool raid = !heroic && (urand(0, 100) < 50 && visitor.count[ITEM_QUALITY_EPIC] >= 5 && (bot->getLevel() == 60 || bot->getLevel() == 70 || bot->getLevel() == 80));
+
+    LfgDungeonSet list;
+    vector<uint32> idx;
+    for (uint32 i = 0; i < sLFGDungeonStore.GetNumRows(); ++i)
+    {
+        LFGDungeonEntry const* dungeon = sLFGDungeonStore.LookupEntry(i);
+        if (!dungeon || (dungeon->type != LFG_TYPE_RANDOM && dungeon->type != LFG_TYPE_DUNGEON && dungeon->type != LFG_TYPE_HEROIC &&
+                dungeon->type != LFG_TYPE_RAID))
+            continue;
+
+        int botLevel = (int)bot->getLevel();
+        if (dungeon->minlevel && botLevel < (int)dungeon->minlevel)
+            continue;
+
+        if (dungeon->minlevel && botLevel > (int)dungeon->minlevel + 10)
+            continue;
+
+        if (dungeon->maxlevel && botLevel > (int)dungeon->maxlevel)
+            continue;
+
+        if (heroic && !dungeon->difficulty)
+            continue;
+
+        if (raid && dungeon->type != LFG_TYPE_RAID)
+            continue;
+
+        if (random && dungeon->type != LFG_TYPE_RANDOM)
+            continue;
+
+        if (!random && !raid && !heroic && dungeon->type != LFG_TYPE_DUNGEON)
+            continue;
+
+        if (!random)
+            list.insert(dungeon->ID);
+        else
+            idx.push_back(dungeon->ID);
+    }
+
+    if (list.empty())
+        return false;
+
+    uint8 roles = GetRoles();
+    if (random)
+	{
+        list.insert(idx[urand(0, idx.size() - 1)]);
+        sLFGMgr->JoinLfg(bot, roles, list, "bot");
+
+        sLog->outMessage("playerbot", LOG_LEVEL_DEBUG, "Bot %s joined to LFG_TYPE_RANDOM as %d", bot->GetName().c_str(), (uint32)roles);
+		return true;
+	}
+    else if (heroic)
+	{
+		sLog->outMessage("playerbot", LOG_LEVEL_DEBUG, "Bot %s joined to LFG_TYPE_HEROIC_DUNGEON as %d", bot->GetName().c_str(), (uint32)roles);
+	}
+    else if (raid)
+	{
+		sLog->outMessage("playerbot", LOG_LEVEL_DEBUG, "Bot %s joined to LFG_TYPE_RAID as %d", bot->GetName().c_str(), (uint32)roles);
+	}
+    else
+	{
+		sLog->outMessage("playerbot", LOG_LEVEL_DEBUG, "Bot %s joined to LFG_TYPE_DUNGEON as %d", bot->GetName().c_str(), (uint32)roles);
+	}
+
+    sLFGMgr->JoinLfg(bot, roles, list, "bot");
+    return true;
+}
+
+bool LfgRoleCheckAction::Execute(Event event)
+{
+    Group* group = bot->GetGroup();
+    if (group)
+    {
+        uint8 currentRoles = sLFGMgr->GetRoles(bot->GetGUID());
+        uint8 newRoles = GetRoles();
+        if (currentRoles == newRoles) return false;
+
+        sLFGMgr->UpdateRoleCheck(group->GetGUID(), bot->GetGUID(), newRoles);
+        return true;
+    }
+
+    return false;
+}
+
+bool LfgAcceptAction::Execute(Event event)
+{
+    uint32 id = AI_VALUE(uint32, "lfg proposal");
+    if (id)
+    {
+        if (bot->IsInCombat() || bot->isDead() || bot->IsFalling())
+        {
+            sLFGMgr->LeaveLfg(bot->GetGUID());
+            return false;
+        }
+
+        ai->ChangeStrategy("-grind", BOT_STATE_NON_COMBAT);
+        if (urand(0, 1 + 10 / sPlayerbotAIConfig.randomChangeMultiplier))
+            return false;
+
+        if (sRandomPlayerbotMgr.IsRandomBot(bot) && !bot->GetGroup())
+            ai->ChangeStrategy("-grind", BOT_STATE_NON_COMBAT);
+
+        sLog->outMessage("playerbot", LOG_LEVEL_DEBUG, "Bot %s updated proposal %d", bot->GetName().c_str(), id);
+        ai->GetAiObjectContext()->GetValue<uint32>("lfg proposal")->Set(0);
+        bot->ClearUnitState(UNIT_STATE_ALL_STATE_SUPPORTED);
+        sLFGMgr->UpdateProposal(id, bot->GetGUID(), true);
+
+        return true;
+    }
+
+    WorldPacket p(event.getPacket());
+
+    uint32 dungeon;
+    uint8 state;
+    p >> dungeon >> state >> id;
+
+    ai->GetAiObjectContext()->GetValue<uint32>("lfg proposal")->Set(id);
+    return true;
+}
+
+bool LfgLeaveAction::Execute(Event event)
+{
+    if (sLFGMgr->GetState(bot->GetGUID()) != LFG_STATE_QUEUED)
+        return false;
+
+    sLFGMgr->LeaveLfg(bot->GetGUID());
+	return true;
+}
+
+bool LfgTeleportAction::Execute(Event event)
+{
+    bool out = false;
+
+    WorldPacket p(event.getPacket());
+    if (!p.empty())
+    {
+        p.rpos(0);
+        p >> out;
+    }
+
+    bot->ClearUnitState(UNIT_STATE_ALL_STATE_SUPPORTED);
+    sLFGMgr->TeleportPlayer(bot, out);
+	return true;
+}
diff --git a/src/plugins/playerbot/strategy/actions/LfgActions.h b/src/plugins/playerbot/strategy/actions/LfgActions.h
new file mode 100644
index 0000000..052cdcc
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/LfgActions.h
@@ -0,0 +1,48 @@
+#pragma once
+
+#include "../Action.h"
+#include "InventoryAction.h"
+
+namespace ai
+{
+    class LfgJoinAction : public InventoryAction
+    {
+    public:
+        LfgJoinAction(PlayerbotAI* ai, string name = "lfg join") : InventoryAction(ai, name) {}
+        virtual bool Execute(Event event);
+
+    protected:
+        bool JoinProposal();
+        bool SetRoles();
+        uint8 GetRoles();
+    };
+
+    class LfgAcceptAction : public LfgJoinAction
+    {
+    public:
+        LfgAcceptAction(PlayerbotAI* ai) : LfgJoinAction(ai, "lfg accept") {}
+        virtual bool Execute(Event event);
+    };
+
+    class LfgRoleCheckAction : public LfgJoinAction
+    {
+    public:
+        LfgRoleCheckAction(PlayerbotAI* ai) : LfgJoinAction(ai, "lfg role check") {}
+        virtual bool Execute(Event event);
+    };
+
+    class LfgLeaveAction : public Action
+    {
+    public:
+        LfgLeaveAction(PlayerbotAI* ai) : Action(ai, "lfg leave") {}
+        virtual bool Execute(Event event);
+    };
+
+    class LfgTeleportAction : public Action
+    {
+    public:
+        LfgTeleportAction(PlayerbotAI* ai) : Action(ai, "lfg teleport") {}
+        virtual bool Execute(Event event);
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/actions/ListQuestsActions.cpp b/src/plugins/playerbot/strategy/actions/ListQuestsActions.cpp
new file mode 100644
index 0000000..d9249ec
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/ListQuestsActions.cpp
@@ -0,0 +1,71 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "ListQuestsActions.h"
+
+
+using namespace ai;
+
+bool ListQuestsAction::Execute(Event event)
+{
+    if (event.getParam() == "completed")
+    {
+        ListQuests(QUEST_LIST_FILTER_COMPLETED);
+    }
+    else if (event.getParam() == "incompleted")
+    {
+        ListQuests(QUEST_LIST_FILTER_INCOMPLETED);
+    }
+    else if (event.getParam() == "all")
+    {
+        ListQuests(QUEST_LIST_FILTER_ALL);
+    }
+    else
+    {
+        ListQuests(QUEST_LIST_FILTER_SUMMARY);
+    }
+    return true;
+}
+
+void ListQuestsAction::ListQuests(QuestListFilter filter)
+{
+    bool showIncompleted = filter & QUEST_LIST_FILTER_INCOMPLETED;
+    bool showCompleted = filter & QUEST_LIST_FILTER_COMPLETED;
+
+    if (showIncompleted)
+        ai->TellMaster("--- Incomplete quests ---");
+    int incompleteCount = ListQuests(false, !showIncompleted);
+
+    if (showCompleted)
+        ai->TellMaster("--- Complete quests ---");
+    int completeCount = ListQuests(true, !showCompleted);
+
+    ai->TellMaster("--- Summary ---");
+    std::ostringstream out;
+    out << "Total: " << (completeCount + incompleteCount) << " / 25 (incomplete: " << incompleteCount << ", complete: " << completeCount << ")";
+    ai->TellMaster(out);
+}
+
+int ListQuestsAction::ListQuests(bool completed, bool silent)
+{
+    int count = 0;
+    for (uint16 slot = 0; slot < MAX_QUEST_LOG_SIZE; ++slot)
+    {
+        uint32 questId = bot->GetQuestSlotQuestId(slot);
+        if (!questId)
+            continue;
+
+        Quest const* pQuest = sObjectMgr->GetQuestTemplate(questId);
+        bool isCompletedQuest = bot->GetQuestStatus(questId) == QUEST_STATUS_COMPLETE;
+        if (completed != isCompletedQuest)
+            continue;
+
+        count++;
+
+        if (silent)
+            continue;
+
+        ai->TellMaster(chat->formatQuest(pQuest));
+    }
+
+    return count;
+}
diff --git a/src/plugins/playerbot/strategy/actions/ListQuestsActions.h b/src/plugins/playerbot/strategy/actions/ListQuestsActions.h
new file mode 100644
index 0000000..961acb8
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/ListQuestsActions.h
@@ -0,0 +1,25 @@
+#pragma once
+
+#include "../Action.h"
+
+namespace ai
+{
+    enum QuestListFilter {
+        QUEST_LIST_FILTER_SUMMARY = 0,
+        QUEST_LIST_FILTER_COMPLETED = 1,
+        QUEST_LIST_FILTER_INCOMPLETED = 2,
+        QUEST_LIST_FILTER_ALL = QUEST_LIST_FILTER_COMPLETED | QUEST_LIST_FILTER_INCOMPLETED
+    };
+
+    class ListQuestsAction : public Action {
+    public:
+        ListQuestsAction(PlayerbotAI* ai) : Action(ai, "quests") {}
+        virtual bool Execute(Event event);
+
+    private:
+        int ListQuests(bool completed, bool silent);
+        void ListQuests(QuestListFilter filter);
+
+    };
+
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/actions/ListSpellsAction.cpp b/src/plugins/playerbot/strategy/actions/ListSpellsAction.cpp
new file mode 100644
index 0000000..4602fb8
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/ListSpellsAction.cpp
@@ -0,0 +1,65 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "ListSpellsAction.h"
+#include "../ItemVisitors.h"
+
+using namespace ai;
+
+bool ListSpellsAction::Execute(Event event)
+{
+    Player* master = GetMaster();
+    if (!master)
+        return false;
+
+    int loc = master->GetSession()->GetSessionDbcLocale();
+
+    std::ostringstream posOut;
+    std::ostringstream negOut;
+
+    string filter = event.getParam();
+
+    const std::string ignoreList = ",Opening,Closing,Stuck,Remove Insignia,Opening - No Text,Grovel,Duel,Honorless Target,";
+    std::string alreadySeenList = ",";
+
+    for (PlayerSpellMap::iterator itr = bot->GetSpellMap().begin(); itr != bot->GetSpellMap().end(); ++itr) {
+        const uint32 spellId = itr->first;
+
+        const SpellInfo* const pSpellInfo = sSpellMgr->GetSpellInfo(spellId);
+        if (!pSpellInfo)
+            continue;
+
+        if (itr->second->state == PLAYERSPELL_REMOVED || itr->second->disabled || pSpellInfo->IsPassive())
+            continue;
+
+        //|| name.find("Teleport") != -1
+
+        std::string comp = ",";
+        comp.append(pSpellInfo->SpellName[loc]);
+        comp.append(",");
+
+        if (!(ignoreList.find(comp) == std::string::npos && alreadySeenList.find(comp) == std::string::npos))
+            continue;
+
+        if (!filter.empty() && !strstri(pSpellInfo->SpellName[loc], filter.c_str()))
+            continue;
+
+        alreadySeenList += pSpellInfo->SpellName[loc];
+        alreadySeenList += ",";
+
+        if (pSpellInfo->IsPositive())
+            posOut << " |cffffffff|Hspell:" << spellId << "|h["
+            << pSpellInfo->SpellName[loc] << "]|h|r";
+        else
+            negOut << " |cffffffff|Hspell:" << spellId << "|h["
+            << pSpellInfo->SpellName[loc] << "]|h|r";
+    }
+
+    ai->TellMaster("here's my non-attack spells:");
+    ai->TellMaster(posOut);
+
+    ai->TellMaster("here's my attack spells:");
+    ai->TellMaster(negOut);
+
+    return true;
+}
+
diff --git a/src/plugins/playerbot/strategy/actions/ListSpellsAction.h b/src/plugins/playerbot/strategy/actions/ListSpellsAction.h
new file mode 100644
index 0000000..2447055
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/ListSpellsAction.h
@@ -0,0 +1,16 @@
+#pragma once
+
+#include "../Action.h"
+
+
+namespace ai
+{
+    class ListSpellsAction : public Action {
+    public:
+        ListSpellsAction(PlayerbotAI* ai) : Action(ai, "spells") {}
+
+        virtual bool Execute(Event event);
+  
+    };
+
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/actions/LogLevelAction.cpp b/src/plugins/playerbot/strategy/actions/LogLevelAction.cpp
new file mode 100644
index 0000000..92005a1
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/LogLevelAction.cpp
@@ -0,0 +1,43 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "LogLevelAction.h"
+
+
+using namespace ai;
+
+bool LogLevelAction::Execute(Event event)
+{
+    string param = event.getParam();
+    Value<LogLevel> *value = ai->GetAiObjectContext()->GetValue<LogLevel>("log level");
+
+    ostringstream out;
+    if (param != "?")
+    {
+        value->Set(string2logLevel(param));
+        out << "My log level set to " << logLevel2string(value->Get());
+    }
+    else
+    {
+        out << "My log level is " << logLevel2string(value->Get());
+    }
+    ai->TellMaster(out);
+    return true;
+}
+
+string LogLevelAction::logLevel2string(LogLevel level)
+{
+    switch (level)
+    {
+    case LOG_LEVEL_INFO:
+        return "info";
+    default:
+        return "debug";
+    }
+}
+LogLevel LogLevelAction::string2logLevel(string level)
+{
+    if (level == "debug")
+        return LOG_LEVEL_DEBUG;
+    else
+        return LOG_LEVEL_INFO;
+}
diff --git a/src/plugins/playerbot/strategy/actions/LogLevelAction.h b/src/plugins/playerbot/strategy/actions/LogLevelAction.h
new file mode 100644
index 0000000..4ad2a33
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/LogLevelAction.h
@@ -0,0 +1,17 @@
+#pragma once
+
+#include "../Action.h"
+
+namespace ai
+{
+    class LogLevelAction : public Action {
+    public:
+        LogLevelAction(PlayerbotAI* ai) : Action(ai, "log") {}
+        virtual bool Execute(Event event);
+
+    public:
+        static string logLevel2string(LogLevel level);
+        static LogLevel string2logLevel(string level);
+    };
+
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/actions/LootAction.cpp b/src/plugins/playerbot/strategy/actions/LootAction.cpp
new file mode 100644
index 0000000..41c17aa
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/LootAction.cpp
@@ -0,0 +1,338 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "LootAction.h"
+
+#include "../../LootObjectStack.h"
+#include "../../PlayerbotAIConfig.h"
+#include "../../../ahbot/AhBot.h"
+#include "../../RandomPlayerbotMgr.h"
+#include "../values/ItemUsageValue.h"
+#include "../../GuildTaskMgr.h"
+
+using namespace ai;
+
+bool LootAction::Execute(Event event)
+{
+    if (!AI_VALUE(bool, "has available loot"))
+        return false;
+
+    LootObject const& lootObject = AI_VALUE(LootObjectStack*, "available loot")->GetLoot(sPlayerbotAIConfig.lootDistance);
+    context->GetValue<LootObject>("loot target")->Set(lootObject);
+    return true;
+}
+
+enum ProfessionSpells
+{
+    ALCHEMY                      = 2259,
+    BLACKSMITHING                = 2018,
+    COOKING                      = 2550,
+    ENCHANTING                   = 7411,
+    ENGINEERING                  = 49383,
+    FIRST_AID                    = 3273,
+    FISHING                      = 7620,
+    HERB_GATHERING               = 2366,
+    INSCRIPTION                  = 45357,
+    JEWELCRAFTING                = 25229,
+    MINING                       = 2575,
+    SKINNING                     = 8613,
+    TAILORING                    = 3908
+};
+
+bool OpenLootAction::Execute(Event event)
+{
+    LootObject lootObject = AI_VALUE(LootObject, "loot target");
+    bool result = DoLoot(lootObject);
+    if (result)
+    {
+        AI_VALUE(LootObjectStack*, "available loot")->Remove(lootObject.guid);
+        context->GetValue<LootObject>("loot target")->Set(LootObject());
+    }
+    return result;
+}
+
+bool OpenLootAction::DoLoot(LootObject& lootObject)
+{
+    if (lootObject.IsEmpty())
+        return false;
+
+    Creature* creature = ai->GetCreature(lootObject.guid);
+    if (creature && bot->GetDistance(creature) > INTERACTION_DISTANCE)
+        return false;
+
+    if (creature && creature->HasFlag(UNIT_DYNAMIC_FLAGS, UNIT_DYNFLAG_LOOTABLE))
+    {
+        bot->GetMotionMaster()->Clear();
+        WorldPacket* const packet = new WorldPacket(CMSG_LOOT, 8);
+        *packet << lootObject.guid;
+        bot->GetSession()->QueuePacket(packet);
+        return true;
+    }
+
+    if (creature)
+    {
+        SkillType skill = creature->GetCreatureTemplate()->GetRequiredLootSkill();
+        if (!CanOpenLock(skill, lootObject.reqSkillValue))
+            return false;
+
+        bot->GetMotionMaster()->Clear();
+        switch (skill)
+        {
+        case SKILL_ENGINEERING:
+            return bot->HasSkill(SKILL_ENGINEERING) ? ai->CastSpell(ENGINEERING, creature) : false;
+        case SKILL_HERBALISM:
+            return bot->HasSkill(SKILL_HERBALISM) ? ai->CastSpell(32605, creature) : false;
+        case SKILL_MINING:
+            return bot->HasSkill(SKILL_MINING) ? ai->CastSpell(32606, creature) : false;
+        default:
+            return bot->HasSkill(SKILL_SKINNING) ? ai->CastSpell(SKINNING, creature) : false;
+        }
+    }
+
+    GameObject* go = ai->GetGameObject(lootObject.guid);
+    if (go && bot->GetDistance(go) > INTERACTION_DISTANCE)
+        return false;
+
+    bot->GetMotionMaster()->Clear();
+    if (lootObject.skillId == SKILL_MINING)
+        return bot->HasSkill(SKILL_MINING) ? ai->CastSpell(MINING, bot) : false;
+
+    if (lootObject.skillId == SKILL_HERBALISM)
+        return bot->HasSkill(SKILL_HERBALISM) ? ai->CastSpell(HERB_GATHERING, bot) : false;
+
+    uint32 spellId = GetOpeningSpell(lootObject);
+    if (!spellId)
+        return false;
+
+    return ai->CastSpell(spellId, bot);
+}
+
+uint32 OpenLootAction::GetOpeningSpell(LootObject& lootObject)
+{
+    GameObject* go = ai->GetGameObject(lootObject.guid);
+    if (go && go->isSpawned())
+        return GetOpeningSpell(lootObject, go);
+
+    return 0;
+}
+
+uint32 OpenLootAction::GetOpeningSpell(LootObject& lootObject, GameObject* go)
+{
+    for (PlayerSpellMap::iterator itr = bot->GetSpellMap().begin(); itr != bot->GetSpellMap().end(); ++itr)
+    {
+        uint32 spellId = itr->first;
+
+        const SpellInfo* pSpellInfo = sSpellMgr->GetSpellInfo(spellId);
+        if (!pSpellInfo)
+            continue;
+
+        if (itr->second->state == PLAYERSPELL_REMOVED || itr->second->disabled || pSpellInfo->IsPassive())
+            continue;
+
+        if (spellId == MINING || spellId == HERB_GATHERING)
+            continue;
+
+        if (CanOpenLock(lootObject, pSpellInfo, go))
+            return spellId;
+    }
+
+    for (uint32 spellId = 0; spellId < sSpellStore.GetNumRows(); spellId++)
+    {
+        if (spellId == MINING || spellId == HERB_GATHERING)
+            continue;
+
+        const SpellInfo* pSpellInfo = sSpellMgr->GetSpellInfo(spellId);
+        if (!pSpellInfo)
+            continue;
+
+        if (CanOpenLock(lootObject, pSpellInfo, go))
+            return spellId;
+    }
+
+    return 0; //Spell 3365 = Opening?
+}
+
+bool OpenLootAction::CanOpenLock(LootObject& lootObject, const SpellInfo* pSpellInfo, GameObject* go)
+{
+    for (int effIndex = 0; effIndex <= EFFECT_2; effIndex++)
+    {
+        if (pSpellInfo->Effects[effIndex].Effect != SPELL_EFFECT_OPEN_LOCK && pSpellInfo->Effects[effIndex].Effect != SPELL_EFFECT_SKINNING)
+            return false;
+
+        uint32 lockId = go->GetGOInfo()->GetLockId();
+        if (!lockId)
+            return false;
+
+        LockEntry const *lockInfo = sLockStore.LookupEntry(lockId);
+        if (!lockInfo)
+            return false;
+
+        bool reqKey = false;                                    // some locks not have reqs
+
+        for(int j = 0; j < 8; ++j)
+        {
+            switch(lockInfo->Type[j])
+            {
+            /*
+            case LOCK_KEY_ITEM:
+                return true;
+            */
+            case LOCK_KEY_SKILL:
+                {
+                    if(uint32(pSpellInfo->Effects[effIndex].MiscValue) != lockInfo->Index[j])
+                        continue;
+
+                    uint32 skillId = SkillByLockType(LockType(lockInfo->Index[j]));
+                    if (skillId == SKILL_NONE)
+                        return true;
+
+                    if (CanOpenLock(skillId, lockInfo->Skill[j]))
+                        return true;
+                }
+            }
+        }
+    }
+
+    return false;
+}
+
+bool OpenLootAction::CanOpenLock(uint32 skillId, uint32 reqSkillValue)
+{
+    uint32 skillValue = bot->GetSkillValue(skillId);
+    return skillValue >= reqSkillValue || !reqSkillValue;
+}
+
+bool StoreLootAction::Execute(Event event)
+{
+    WorldPacket p(event.getPacket()); // (8+1+4+1+1+4+4+4+4+4+1)
+    ObjectGuid guid;
+    uint8 loot_type;
+    uint32 gold = 0;
+    uint8 items = 0;
+
+    p.rpos(0);
+    p >> guid;      // 8 corpse guid
+    p >> loot_type; // 1 loot type
+
+    if (p.size() > 10)
+    {
+        p >> gold;      // 4 money on corpse
+        p >> items;     // 1 number of items on corpse
+    }
+
+    if (gold > 0)
+    {
+        WorldPacket* const packet = new WorldPacket(CMSG_LOOT_MONEY, 0);
+        bot->GetSession()->QueuePacket(packet);
+    }
+
+    for (uint8 i = 0; i < items; ++i)
+    {
+        uint32 itemid;
+        uint32 itemcount;
+        uint8 lootslot_type;
+        uint8 itemindex;
+        bool grab = false;
+
+        p >> itemindex;
+        p >> itemid;
+        p >> itemcount;
+        p.read_skip<uint32>();  // display id
+        p.read_skip<uint32>();  // randomSuffix
+        p.read_skip<uint32>();  // randomPropertyId
+        p >> lootslot_type;     // 0 = can get, 1 = look only, 2 = master get
+
+        if (lootslot_type != LOOT_SLOT_TYPE_ALLOW_LOOT && lootslot_type != LOOT_SLOT_TYPE_OWNER)
+            continue;
+
+        if (loot_type != LOOT_SKINNING && !IsLootAllowed(itemid))
+            continue;
+
+        if (sRandomPlayerbotMgr.IsRandomBot(bot))
+        {
+            ItemTemplate const *proto = sObjectMgr->GetItemTemplate(itemid);
+            if (proto)
+            {
+                uint32 price = itemcount * auctionbot.GetSellPrice(proto) * sRandomPlayerbotMgr.GetSellMultiplier(bot) + gold;
+                uint32 lootAmount = sRandomPlayerbotMgr.GetLootAmount(bot);
+                if (bot->GetGroup() && price)
+                {
+                    sRandomPlayerbotMgr.SetLootAmount(bot, lootAmount + price);
+                }
+                else if (lootAmount)
+                {
+                    sRandomPlayerbotMgr.SetLootAmount(bot, 0);
+                }
+
+                Group* group = bot->GetGroup();
+                if (group)
+                {
+                    for (GroupReference *ref = group->GetFirstMember(); ref; ref = ref->next())
+                    {
+                        if( ref->GetSource() != bot)
+                            sGuildTaskMgr.CheckItemTask(itemid, itemcount, ref->GetSource(), bot);
+                    }
+                }
+            }
+        }
+
+        WorldPacket* const packet = new WorldPacket(CMSG_AUTOSTORE_LOOT_ITEM, 1);
+        *packet << itemindex;
+        bot->GetSession()->QueuePacket(packet);
+    }
+
+    AI_VALUE(LootObjectStack*, "available loot")->Remove(guid);
+
+    // release loot
+    WorldPacket* const packet = new WorldPacket(CMSG_LOOT_RELEASE, 8);
+    *packet << guid;
+    bot->GetSession()->QueuePacket(packet);
+    return true;
+}
+
+bool StoreLootAction::IsLootAllowed(uint32 itemid)
+{
+    LootStrategy lootStrategy = AI_VALUE(LootStrategy, "loot strategy");
+
+    if (lootStrategy == LOOTSTRATEGY_ALL)
+        return true;
+
+    set<uint32>& lootItems = AI_VALUE(set<uint32>&, "always loot list");
+    if (lootItems.find(itemid) != lootItems.end())
+        return true;
+
+    ItemTemplate const *proto = sObjectMgr->GetItemTemplate(itemid);
+    if (!proto)
+        return false;
+
+    uint32 max = proto->MaxCount;
+    if (max > 0 && bot->HasItemCount(itemid, max, true))
+        return false;
+
+    if (proto->StartQuest ||
+        proto->Bonding == BIND_QUEST_ITEM ||
+        proto->Bonding == BIND_QUEST_ITEM1 ||
+        proto->Class == ITEM_CLASS_QUEST)
+        return true;
+
+    if (lootStrategy == LOOTSTRATEGY_QUEST)
+        return false;
+
+    ostringstream out; out << itemid;
+    ItemUsage usage = AI_VALUE2(ItemUsage, "item usage", out.str());
+    if (usage == ITEM_USAGE_SKILL || usage == ITEM_USAGE_USE || usage == ITEM_USAGE_GUILD_TASK)
+        return true;
+
+    if (lootStrategy == LOOTSTRATEGY_SKILL)
+        return false;
+
+    if (proto->Class == ITEM_CLASS_MONEY || proto->Quality == ITEM_QUALITY_POOR)
+        return true;
+
+    if (lootStrategy == LOOTSTRATEGY_GRAY)
+        return true;
+
+    if (proto->Bonding == BIND_WHEN_PICKED_UP)
+        return false;
+
+    return true;
+}
diff --git a/src/plugins/playerbot/strategy/actions/LootAction.h b/src/plugins/playerbot/strategy/actions/LootAction.h
new file mode 100644
index 0000000..c18fbb2
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/LootAction.h
@@ -0,0 +1,39 @@
+#pragma once
+
+#include "../Action.h"
+#include "../../LootObjectStack.h"
+#include "MovementActions.h"
+
+namespace ai
+{
+    class LootAction : public MovementAction
+    {
+    public:
+        LootAction(PlayerbotAI* ai) : MovementAction(ai, "loot") {}
+        virtual bool Execute(Event event);
+    };
+
+    class OpenLootAction : public MovementAction
+    {
+    public:
+        OpenLootAction(PlayerbotAI* ai) : MovementAction(ai, "open loot") {}
+        virtual bool Execute(Event event);
+
+    private:
+        bool DoLoot(LootObject& lootObject);
+        uint32 GetOpeningSpell(LootObject& lootObject);
+        uint32 GetOpeningSpell(LootObject& lootObject, GameObject* go);
+        bool CanOpenLock(LootObject& lootObject, const SpellInfo* pSpellInfo, GameObject* go);
+        bool CanOpenLock(uint32 skillId, uint32 reqSkillValue);
+    };
+
+    class StoreLootAction : public MovementAction
+    {
+    public:
+        StoreLootAction(PlayerbotAI* ai) : MovementAction(ai, "store loot") {}
+        virtual bool Execute(Event event);
+
+    protected:
+        bool IsLootAllowed(uint32 itemid);
+    };
+}
diff --git a/src/plugins/playerbot/strategy/actions/LootRollAction.cpp b/src/plugins/playerbot/strategy/actions/LootRollAction.cpp
new file mode 100644
index 0000000..498cb42
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/LootRollAction.cpp
@@ -0,0 +1,66 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "LootRollAction.h"
+#include "../../../Groups/Group.h"
+
+
+using namespace ai;
+
+bool LootRollAction::Execute(Event event)
+{
+    Player *bot = QueryItemUsageAction::ai->GetBot();
+
+    WorldPacket p(event.getPacket()); //WorldPacket packet for CMSG_LOOT_ROLL, (8+4+1)
+    ObjectGuid guid;
+    uint32 slot;
+    uint8 rollType;
+    p.rpos(0); //reset packet pointer
+    p >> guid; //guid of the item rolled
+    p >> slot; //number of players invited to roll
+    p >> rollType; //need,greed or pass on roll
+
+    Group* group = bot->GetGroup();
+    if(!group)
+        return false;
+
+    RollVote vote = PASS;
+    for (vector<Roll*>::iterator i = group->GetRolls()->begin(); i != group->GetRolls()->end(); ++i)
+    {
+        if ((*i)->isValid() && (*i)->itemGUID == guid && (*i)->itemSlot == slot)
+        {
+            uint32 itemId = (*i)->itemid;
+            ItemTemplate const *proto = sObjectMgr->GetItemTemplate(itemId);
+            if (!proto)
+                continue;
+
+            switch (proto->Class)
+            {
+            case ITEM_CLASS_WEAPON:
+            case ITEM_CLASS_ARMOR:
+                if (QueryItemUsage(proto))
+                    vote = NEED;
+                else if (bot->HasSkill(SKILL_ENCHANTING))
+                    vote = DISENCHANT;
+                break;
+            default:
+                if (IsLootAllowed(itemId))
+                    vote = NEED;
+                break;
+            }
+            break;
+        }
+    }
+
+    switch (group->GetLootMethod())
+    {
+    case MASTER_LOOT:
+    case FREE_FOR_ALL:
+        group->CountRollVote(bot->GetGUID(), guid, PASS);
+        break;
+    default:
+        group->CountRollVote(bot->GetGUID(), guid, vote);
+        break;
+    }
+
+    return true;
+}
diff --git a/src/plugins/playerbot/strategy/actions/LootRollAction.h b/src/plugins/playerbot/strategy/actions/LootRollAction.h
new file mode 100644
index 0000000..05651a4
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/LootRollAction.h
@@ -0,0 +1,15 @@
+#pragma once
+
+#include "../Action.h"
+#include "QueryItemUsageAction.h"
+#include "LootAction.h"
+
+namespace ai
+{
+    class LootRollAction : public QueryItemUsageAction, public StoreLootAction {
+    public:
+        LootRollAction(PlayerbotAI* ai) : QueryItemUsageAction(ai, "loot roll"), StoreLootAction(ai) {}
+        virtual bool Execute(Event event);
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/actions/LootStrategyAction.cpp b/src/plugins/playerbot/strategy/actions/LootStrategyAction.cpp
new file mode 100644
index 0000000..633429e
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/LootStrategyAction.cpp
@@ -0,0 +1,100 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "LootStrategyAction.h"
+
+
+using namespace ai;
+
+
+bool LootStrategyAction::Execute(Event event)
+{
+    string strategy = event.getParam();
+
+    LootObjectStack* lootItems = AI_VALUE(LootObjectStack*, "available loot");
+    set<uint32>& alwaysLootItems = AI_VALUE(set<uint32>&, "always loot list");
+    Value<LootStrategy>* lootStrategy = context->GetValue<LootStrategy>("loot strategy");
+
+    if (strategy == "?")
+    {
+        ostringstream out;
+        out << "Loot strategy: ";
+        out << LootStrategy2string(lootStrategy->Get());
+        out << ", always loot items: ";
+
+        for (set<uint32>::iterator i = alwaysLootItems.begin(); i != alwaysLootItems.end(); i++)
+        {
+            ItemTemplate const *proto = sObjectMgr->GetItemTemplate(*i);
+            if (!proto)
+                continue;
+
+            out << chat->formatItem(proto);
+        }
+        ai->TellMaster(out);
+    }
+    else
+    {
+        ItemIds items = chat->parseItems(strategy);
+
+        if (items.size() == 0)
+        {
+            lootStrategy->Set(String2LootStrategy(strategy));
+            ostringstream out;
+            out << "Loot strategy set to " << LootStrategy2string(lootStrategy->Get());
+            ai->TellMaster(out);
+            return true;
+        }
+
+        bool remove = strategy.size() > 1 && strategy.substr(0, 1) == "-";
+        for (ItemIds::iterator i = items.begin(); i != items.end(); i++)
+        {
+            uint32 itemid = *i;
+            if (remove)
+            {
+                set<uint32>::iterator j = alwaysLootItems.find(itemid);
+                if (j != alwaysLootItems.end())
+                    alwaysLootItems.erase(j);
+
+                ai->TellMaster("Item(s) removed from always loot list");
+            }
+            else
+            {
+                alwaysLootItems.insert(itemid);
+                ai->TellMaster("Item(s) added to always loot list");
+            }
+        }
+    }
+
+    return true;
+}
+
+
+LootStrategy LootStrategyAction::String2LootStrategy(string strategy)
+{
+    if (strategy == "*" || strategy == "all")
+        return LOOTSTRATEGY_ALL;
+    else if (strategy == "q" || strategy == "quest")
+        return LOOTSTRATEGY_QUEST;
+    else if (strategy == "s" || strategy == "skill")
+        return LOOTSTRATEGY_SKILL;
+    else if (strategy == "g" || strategy == "gray")
+        return LOOTSTRATEGY_GRAY;
+    else
+        return LOOTSTRATEGY_NORMAL;
+}
+
+string LootStrategyAction::LootStrategy2string(LootStrategy lootStrategy)
+{
+    switch (lootStrategy)
+    {
+    case LOOTSTRATEGY_ALL:
+        return "all";
+    case LOOTSTRATEGY_QUEST:
+        return "quest";
+    case LOOTSTRATEGY_SKILL:
+        return "skill";
+    case LOOTSTRATEGY_GRAY:
+        return "gray";
+    default:
+        return "normal";
+    }
+}
diff --git a/src/plugins/playerbot/strategy/actions/LootStrategyAction.h b/src/plugins/playerbot/strategy/actions/LootStrategyAction.h
new file mode 100644
index 0000000..51e1f23
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/LootStrategyAction.h
@@ -0,0 +1,19 @@
+#pragma once
+
+#include "../Action.h"
+#include "../../LootObjectStack.h"
+
+namespace ai
+{
+    class LootStrategyAction : public Action {
+    public:
+        LootStrategyAction(PlayerbotAI* ai) : Action(ai, "ll") {}
+        virtual bool Execute(Event event);
+
+    private:
+        static LootStrategy String2LootStrategy(string strategy);
+        static string LootStrategy2string(LootStrategy lootStrategy);
+   
+    };
+
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/actions/MovementActions.cpp b/src/plugins/playerbot/strategy/actions/MovementActions.cpp
new file mode 100644
index 0000000..cb5a041
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/MovementActions.cpp
@@ -0,0 +1,374 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "../values/LastMovementValue.h"
+#include "MovementActions.h"
+#include "../../../Movement/MotionMaster.h"
+#include "../../../Movement/MovementGenerator.h"
+#include "../../FleeManager.h"
+#include "../../LootObjectStack.h"
+#include "../../PlayerbotAIConfig.h"
+
+using namespace ai;
+
+bool MovementAction::MoveNear(uint32 mapId, float x, float y, float z, float distance)
+{
+    float angle = GetFollowAngle();
+    return MoveTo(mapId, x + cos(angle) * distance, y + sin(angle) * distance, z);
+}
+
+bool MovementAction::MoveNear(WorldObject* target, float distance)
+{
+    if (!target)
+        return false;
+
+    distance += target->GetObjectSize() / 2.0f;
+
+    float followAngle = GetFollowAngle();
+    for (float angle = followAngle; angle <= followAngle + 2 * M_PI; angle += M_PI / 4)
+    {
+        bool moved = MoveTo(target->GetMapId(),
+            target->GetPositionX() + cos(angle) * distance,
+            target->GetPositionY()+ sin(angle) * distance,
+            target->GetPositionZ());
+        if (moved)
+            return true;
+    }
+    return false;
+}
+
+bool MovementAction::MoveTo(uint32 mapId, float x, float y, float z)
+{
+    bot->UpdateGroundPositionZ(x, y, z);
+    if (!IsMovingAllowed(mapId, x, y, z))
+        return false;
+
+    float distance = bot->GetDistance2d(x, y);
+    if (distance > sPlayerbotAIConfig.contactDistance)
+    {
+        WaitForReach(distance);
+
+        if (bot->IsSitState())
+            bot->SetStandState(UNIT_STAND_STATE_STAND);
+
+        if (bot->IsNonMeleeSpellCast(true))
+        {
+            bot->CastStop();
+            ai->InterruptSpell();
+        }
+
+        bool generatePath = bot->HasAuraType(SPELL_AURA_MOD_INCREASE_MOUNTED_FLIGHT_SPEED) &&
+                !bot->IsFlying() && !bot->IsUnderWater();
+        MotionMaster &mm = *bot->GetMotionMaster();
+        mm.Clear();
+
+        float botZ = bot->GetPositionZ();
+        if (z - botZ > 0.5f && bot->GetDistance2d(x, y) <= 5.0f)
+        {
+            float speed = bot->GetSpeed(MOVE_RUN);
+            mm.MoveJump(x, y, botZ + 0.5f, speed, speed, 1);
+        }
+        else
+            mm.MovePoint(mapId, x, y, z, generatePath);
+    }
+
+    AI_VALUE(LastMovement&, "last movement").Set(x, y, z, bot->GetOrientation());
+    return true;
+}
+
+bool MovementAction::MoveTo(Unit* target, float distance)
+{
+    if (!IsMovingAllowed(target))
+        return false;
+
+    float bx = bot->GetPositionX();
+    float by = bot->GetPositionY();
+    float bz = bot->GetPositionZ();
+
+    float tx = target->GetPositionX();
+    float ty = target->GetPositionY();
+    float tz = target->GetPositionZ();
+
+    float distanceToTarget = bot->GetDistance2d(target);
+    float angle = bot->GetAngle(target);
+    float needToGo = distanceToTarget - distance;
+
+    float maxDistance = sPlayerbotAIConfig.spellDistance;
+    if (needToGo > 0 && needToGo > maxDistance)
+        needToGo = maxDistance;
+    else if (needToGo < 0 && needToGo < -maxDistance)
+        needToGo = -maxDistance;
+
+    float dx = cos(angle) * needToGo + bx;
+    float dy = sin(angle) * needToGo + by;
+
+    return MoveTo(target->GetMapId(), dx, dy, tz);
+}
+
+float MovementAction::GetFollowAngle()
+{
+    Player* master = GetMaster();
+    Group* group = master ? master->GetGroup() : bot->GetGroup();
+    if (!group)
+        return 0.0f;
+
+    int index = 1;
+    for (GroupReference *ref = group->GetFirstMember(); ref; ref = ref->next())
+    {
+        if( ref->GetSource() == master)
+            continue;
+
+        if( ref->GetSource() == bot)
+            return 2 * M_PI / (group->GetMembersCount() -1) * index;
+
+        index++;
+    }
+    return 0;
+}
+
+bool MovementAction::IsMovingAllowed(Unit* target)
+{
+    if (!target)
+        return false;
+
+    if (bot->GetMapId() != target->GetMapId())
+        return false;
+
+    float distance = bot->GetDistance(target);
+    if (distance > sPlayerbotAIConfig.reactDistance)
+        return false;
+
+    return IsMovingAllowed();
+}
+
+bool MovementAction::IsMovingAllowed(uint32 mapId, float x, float y, float z)
+{
+    float distance = bot->GetDistance(x, y, z);
+    if (distance > sPlayerbotAIConfig.reactDistance)
+        return false;
+
+    return IsMovingAllowed();
+}
+
+bool MovementAction::IsMovingAllowed()
+{
+    if (bot->isFrozen() || bot->IsPolymorphed() ||
+            (bot->isDead() && !bot->GetCorpse()) ||
+            bot->IsBeingTeleported() ||
+            bot->isInRoots() ||
+            bot->HasAuraType(SPELL_AURA_MOD_CONFUSE) || bot->IsCharmed() ||
+            bot->HasAuraType(SPELL_AURA_MOD_STUN) || bot->IsFlying())
+        return false;
+
+    MotionMaster &mm = *bot->GetMotionMaster();
+    return mm.GetCurrentMovementGeneratorType() != FLIGHT_MOTION_TYPE;
+}
+
+bool MovementAction::Follow(Unit* target, float distance)
+{
+    return Follow(target, distance, GetFollowAngle());
+}
+
+bool MovementAction::Follow(Unit* target, float distance, float angle)
+{
+    MotionMaster &mm = *bot->GetMotionMaster();
+
+    if (!target)
+        return false;
+
+    if (bot->GetDistance2d(target->GetPositionX(), target->GetPositionY()) <= sPlayerbotAIConfig.sightDistance &&
+            abs(bot->GetPositionZ() - target->GetPositionZ()) >= sPlayerbotAIConfig.spellDistance)
+    {
+        mm.Clear();
+        float x = bot->GetPositionX(), y = bot->GetPositionY(), z = target->GetPositionZ();
+        if (target->GetMapId() && bot->GetMapId() != target->GetMapId())
+        {
+            bot->TeleportTo(target->GetMapId(), x, y, z, bot->GetOrientation());
+        }
+        else
+        {
+            bot->Relocate(x, y, z, bot->GetOrientation());
+        }
+        AI_VALUE(LastMovement&, "last movement").Set(target);
+        return true;
+    }
+
+    if (!IsMovingAllowed(target))
+        return false;
+
+    if (target->IsFriendlyTo(bot) && bot->IsMounted() && AI_VALUE(list<ObjectGuid>, "possible targets").empty())
+        distance += angle;
+
+    if (bot->GetDistance2d(target) <= sPlayerbotAIConfig.followDistance)
+        return false;
+
+    if (bot->IsSitState())
+        bot->SetStandState(UNIT_STAND_STATE_STAND);
+
+    if (bot->IsNonMeleeSpellCast(true))
+    {
+        bot->CastStop();
+        ai->InterruptSpell();
+    }
+
+    mm.MoveFollow(target, distance, angle);
+
+    AI_VALUE(LastMovement&, "last movement").Set(target);
+    return true;
+}
+
+void MovementAction::WaitForReach(float distance)
+{
+    float delay = 1000.0f * distance / bot->GetSpeed(MOVE_RUN) + sPlayerbotAIConfig.reactDelay;
+
+    if (delay > sPlayerbotAIConfig.maxWaitForMove)
+        delay = sPlayerbotAIConfig.maxWaitForMove;
+
+    Unit* target = *ai->GetAiObjectContext()->GetValue<Unit*>("current target");
+    Unit* player = *ai->GetAiObjectContext()->GetValue<Unit*>("enemy player target");
+    if ((player || target) && delay > sPlayerbotAIConfig.globalCoolDown)
+        delay = sPlayerbotAIConfig.globalCoolDown;
+
+    ai->SetNextCheckDelay((uint32)delay);
+}
+
+bool MovementAction::Flee(Unit *target)
+{
+    Player* master = GetMaster();
+    if (!target)
+        target = master;
+
+    if (!target)
+        return false;
+
+    if (!sPlayerbotAIConfig.fleeingEnabled)
+        return false;
+
+    if (!IsMovingAllowed())
+        return false;
+
+    FleeManager manager(bot, sPlayerbotAIConfig.fleeDistance, bot->GetAngle(target) + M_PI);
+
+    float rx, ry, rz;
+    if (!manager.CalculateDestination(&rx, &ry, &rz))
+        return false;
+
+    return MoveTo(target->GetMapId(), rx, ry, rz);
+}
+
+bool FleeAction::Execute(Event event)
+{
+    return Flee(AI_VALUE(Unit*, "current target"));
+}
+
+bool FleeAction::isUseful()
+{
+    return AI_VALUE(uint8, "attacker count") > 0 &&
+            AI_VALUE2(float, "distance", "current target") <= sPlayerbotAIConfig.tooCloseDistance &&
+            AI_VALUE2(uint8, "speed", "current target") < 100;
+}
+
+bool RunAwayAction::Execute(Event event)
+{
+    return Flee(AI_VALUE(Unit*, "master target"));
+}
+
+bool MoveRandomAction::Execute(Event event)
+{
+    WorldObject* target = NULL;
+
+    if (!(rand() % 3))
+    {
+        list<ObjectGuid> npcs = AI_VALUE(list<ObjectGuid>, "nearest npcs");
+        for (list<ObjectGuid>::iterator i = npcs.begin(); i != npcs.end(); i++)
+        {
+            target = ai->GetUnit(*i);
+
+            if (target && bot->GetDistance(target) > sPlayerbotAIConfig.tooCloseDistance)
+                break;
+        }
+    }
+
+    if (!target || !(rand() % 3))
+    {
+        list<ObjectGuid> gos = AI_VALUE(list<ObjectGuid>, "nearest game objects");
+        for (list<ObjectGuid>::iterator i = gos.begin(); i != gos.end(); i++)
+        {
+            target = ai->GetGameObject(*i);
+
+            if (target && bot->GetDistance(target) > sPlayerbotAIConfig.tooCloseDistance)
+                break;
+        }
+    }
+
+    float distance = sPlayerbotAIConfig.tooCloseDistance + sPlayerbotAIConfig.grindDistance * urand(3, 10) / 10.0f;
+
+    Map* map = bot->GetMap();
+    if (target)
+    {
+        float x = target->GetPositionX();
+        float y = target->GetPositionY();
+        float z = target->GetPositionZ();
+        if (!map->IsInWater(x, y, z))
+        {
+            return MoveNear(target);
+        }
+    }
+
+    for (int i = 0; i < 10; ++i)
+    {
+        float x = bot->GetPositionX();
+        float y = bot->GetPositionY();
+        float z = bot->GetPositionZ();
+        x += urand(0, distance) - distance / 2;
+        y += urand(0, distance) - distance / 2;
+        bot->UpdateGroundPositionZ(x, y, z);
+
+        if (map->IsInWater(x, y, z))
+            continue;
+
+        bool moved = MoveNear(bot->GetMapId(), x, y, z);
+        if (moved)
+            return true;
+    }
+
+    return false;
+}
+
+bool MoveToLootAction::Execute(Event event)
+{
+    LootObject loot = AI_VALUE(LootObject, "loot target");
+    if (!loot.IsLootPossible(bot))
+        return false;
+
+    return MoveNear(loot.GetWorldObject(bot));
+}
+
+bool MoveOutOfEnemyContactAction::Execute(Event event)
+{
+    Unit* target = AI_VALUE(Unit*, "current target");
+    if (!target)
+        return false;
+
+    return MoveNear(target, sPlayerbotAIConfig.meleeDistance);
+}
+
+bool MoveOutOfEnemyContactAction::isUseful()
+{
+    return AI_VALUE2(float, "distance", "current target") < (sPlayerbotAIConfig.meleeDistance + sPlayerbotAIConfig.contactDistance);
+}
+
+bool SetFacingTargetAction::Execute(Event event)
+{
+    Unit* target = AI_VALUE(Unit*, "current target");
+    if (!target)
+        return false;
+
+    bot->SetFacingTo(bot->GetAngle(target));
+    ai->SetNextCheckDelay(sPlayerbotAIConfig.globalCoolDown);
+    return true;
+}
+
+bool SetFacingTargetAction::isUseful()
+{
+    return !AI_VALUE2(bool, "facing", "current target");
+}
diff --git a/src/plugins/playerbot/strategy/actions/MovementActions.h b/src/plugins/playerbot/strategy/actions/MovementActions.h
new file mode 100644
index 0000000..dc27b92
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/MovementActions.h
@@ -0,0 +1,92 @@
+#pragma once
+
+#include "../Action.h"
+#include "../../PlayerbotAIConfig.h"
+
+namespace ai
+{
+    class MovementAction : public Action {
+    public:
+        MovementAction(PlayerbotAI* ai, string name) : Action(ai, name)
+        {
+            bot = ai->GetBot();
+        }
+
+    protected:
+        bool MoveNear(uint32 mapId, float x, float y, float z, float distance = sPlayerbotAIConfig.followDistance);
+        bool MoveTo(uint32 mapId, float x, float y, float z);
+        bool MoveTo(Unit* target, float distance = 0.0f);
+        bool MoveNear(WorldObject* target, float distance = sPlayerbotAIConfig.followDistance);
+        float GetFollowAngle();
+        bool Follow(Unit* target, float distance = sPlayerbotAIConfig.followDistance);
+        bool Follow(Unit* target, float distance, float angle);
+        void WaitForReach(float distance);
+        bool IsMovingAllowed(Unit* target);
+        bool IsMovingAllowed(uint32 mapId, float x, float y, float z);
+        bool IsMovingAllowed();
+        bool Flee(Unit *target);
+
+    protected:
+        Player* bot;
+    };
+
+    class FleeAction : public MovementAction
+    {
+    public:
+        FleeAction(PlayerbotAI* ai, float distance = sPlayerbotAIConfig.spellDistance) : MovementAction(ai, "flee")
+        {
+			this->distance = distance;
+		}
+
+        virtual bool Execute(Event event);
+        virtual bool isUseful();
+
+	private:
+		float distance;
+    };
+
+
+    class RunAwayAction : public MovementAction
+    {
+    public:
+        RunAwayAction(PlayerbotAI* ai) : MovementAction(ai, "runaway") {}
+        virtual bool Execute(Event event);
+    };
+
+    class MoveRandomAction : public MovementAction
+    {
+    public:
+        MoveRandomAction(PlayerbotAI* ai) : MovementAction(ai, "move random") {}
+        virtual bool Execute(Event event);
+        virtual bool isPossible()
+        {
+            return MovementAction::isPossible() &&
+                    AI_VALUE2(uint8, "health", "self target") > sPlayerbotAIConfig.mediumHealth &&
+                    (!AI_VALUE2(uint8, "mana", "self target") || AI_VALUE2(uint8, "mana", "self target") > sPlayerbotAIConfig.mediumMana);
+        }
+    };
+
+    class MoveToLootAction : public MovementAction
+    {
+    public:
+        MoveToLootAction(PlayerbotAI* ai) : MovementAction(ai, "move to loot") {}
+        virtual bool Execute(Event event);
+    };
+
+    class MoveOutOfEnemyContactAction : public MovementAction
+    {
+    public:
+        MoveOutOfEnemyContactAction(PlayerbotAI* ai) : MovementAction(ai, "move out of enemy contact") {}
+        virtual bool Execute(Event event);
+        virtual bool isUseful();
+    };
+
+    class SetFacingTargetAction : public MovementAction
+    {
+    public:
+        SetFacingTargetAction(PlayerbotAI* ai) : MovementAction(ai, "set facing") {}
+        virtual bool Execute(Event event);
+        virtual bool isUseful();
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/actions/NonCombatActions.cpp b/src/plugins/playerbot/strategy/actions/NonCombatActions.cpp
new file mode 100644
index 0000000..56961c3
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/NonCombatActions.cpp
@@ -0,0 +1,6 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "NonCombatActions.h"
+
+using namespace ai;
+
diff --git a/src/plugins/playerbot/strategy/actions/NonCombatActions.h b/src/plugins/playerbot/strategy/actions/NonCombatActions.h
new file mode 100644
index 0000000..d66e92c
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/NonCombatActions.h
@@ -0,0 +1,47 @@
+#pragma once
+
+#include "../Action.h"
+#include "UseItemAction.h"
+#include "../../PlayerbotAIConfig.h"
+
+namespace ai
+{
+    class DrinkAction : public UseItemAction
+    {
+    public:
+        DrinkAction(PlayerbotAI* ai) : UseItemAction(ai, "drink") {}
+
+        virtual bool Execute(Event event)
+        {
+            if (bot->IsInCombat())
+                return false;
+
+            return UseItemAction::Execute(event);
+        }
+
+        virtual bool isUseful()
+        {
+            return UseItemAction::isUseful() && AI_VALUE2(uint8, "mana", "self target") < sPlayerbotAIConfig.lowMana;
+        }
+    };
+
+    class EatAction : public UseItemAction
+    {
+    public:
+        EatAction(PlayerbotAI* ai) : UseItemAction(ai, "food") {}
+
+        virtual bool Execute(Event event)
+        {
+            if (bot->IsInCombat())
+                return false;
+
+            return UseItemAction::Execute(event);
+        }
+
+        virtual bool isUseful()
+        {
+            return UseItemAction::isUseful() && AI_VALUE2(uint8, "health", "self target") < sPlayerbotAIConfig.lowHealth;
+        }
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/actions/PassLeadershipToMasterAction.h b/src/plugins/playerbot/strategy/actions/PassLeadershipToMasterAction.h
new file mode 100644
index 0000000..fb558df
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/PassLeadershipToMasterAction.h
@@ -0,0 +1,26 @@
+#pragma once
+
+#include "../Action.h"
+
+namespace ai
+{
+    class PassLeadershipToMasterAction : public Action {
+    public:
+        PassLeadershipToMasterAction(PlayerbotAI* ai) : Action(ai, "leader") {}
+
+        virtual bool Execute(Event event)
+        {
+            Player* master = GetMaster();
+            if (master && bot->GetGroup() && bot->GetGroup()->IsMember(master->GetGUID()))
+            {
+                WorldPacket p(SMSG_GROUP_SET_LEADER, 8);
+                p << master->GetGUID();
+                bot->GetSession()->HandleGroupSetLeaderOpcode(p);
+                return true;
+            }
+
+            return false;
+        }
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/actions/PositionAction.cpp b/src/plugins/playerbot/strategy/actions/PositionAction.cpp
new file mode 100644
index 0000000..242c7fb
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/PositionAction.cpp
@@ -0,0 +1,38 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "PositionAction.h"
+#include "../values/PositionValue.h"
+
+using namespace ai;
+
+bool PositionAction::Execute(Event event)
+{
+	string qualifier = event.getParam();
+	if (qualifier.empty())
+		return false;
+
+    Player* master = GetMaster();
+    if (!master)
+        return false;
+
+	ai::Position& pos = context->GetValue<ai::Position&>("position", qualifier)->Get();
+    pos.Set( master->GetPositionX(), master->GetPositionY(), master->GetPositionZ());
+
+    ostringstream out; out << "Position " << qualifier << " is set";
+    ai->TellMaster(out);
+    return true;
+}
+
+bool MoveToPositionAction::Execute(Event event)
+{
+	ai::Position& pos = context->GetValue<ai::Position&>("position", qualifier)->Get();
+    if (!pos.isSet())
+    {
+        ostringstream out; out << "Position " << qualifier << " is not set";
+        ai->TellMaster(out);
+        return false;
+    }
+
+    return MoveTo(bot->GetMapId(), pos.x, pos.y, pos.z);
+}
+
diff --git a/src/plugins/playerbot/strategy/actions/PositionAction.h b/src/plugins/playerbot/strategy/actions/PositionAction.h
new file mode 100644
index 0000000..f96553b
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/PositionAction.h
@@ -0,0 +1,37 @@
+#pragma once
+
+#include "../Action.h"
+#include "MovementActions.h"
+
+namespace ai
+{
+    class PositionAction : public Action
+    {
+    public:
+        PositionAction(PlayerbotAI* ai) : Action(ai, "position")
+        {}
+
+        virtual bool Execute(Event event);
+
+    };
+
+    class MoveToPositionAction : public MovementAction
+    {
+    public:
+        MoveToPositionAction(PlayerbotAI* ai, string qualifier) : MovementAction(ai, "move to position"), qualifier(qualifier)
+        {}
+
+        virtual bool Execute(Event event);
+
+    protected:
+        string qualifier;
+    };
+
+    class GuardAction : public MoveToPositionAction
+    {
+    public:
+        GuardAction(PlayerbotAI* ai) : MoveToPositionAction(ai, "guard")
+        {}
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/actions/QueryItemUsageAction.cpp b/src/plugins/playerbot/strategy/actions/QueryItemUsageAction.cpp
new file mode 100644
index 0000000..4cbd973
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/QueryItemUsageAction.cpp
@@ -0,0 +1,172 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "QueryItemUsageAction.h"
+#include "../values/ItemUsageValue.h"
+#include "../../../ahbot/AhBot.h"
+#include "../../RandomPlayerbotMgr.h"
+
+
+using namespace ai;
+
+
+bool QueryItemUsageAction::Execute(Event event)
+{
+    WorldPacket& data = event.getPacket();
+    if (!data.empty())
+    {
+        data.rpos(0);
+
+        ObjectGuid guid;
+        data >> guid;
+        if (guid.GetRawValue() != bot->GetGUID())
+            return false;
+
+        uint32 received, created, isShowChatMessage, notUsed, itemId,
+            suffixFactor, itemRandomPropertyId, count, invCount;
+        uint8 bagSlot;
+
+        data >> received;                               // 0=looted, 1=from npc
+        data >> created;                                // 0=received, 1=created
+        data >> isShowChatMessage;                                      // IsShowChatMessage
+        data >> bagSlot;
+                                                                // item slot, but when added to stack: 0xFFFFFFFF
+        data >> notUsed;
+        data >> itemId;
+        data >> suffixFactor;
+        data >> itemRandomPropertyId;
+        data >> count;
+        data >> invCount;
+
+        ItemTemplate const *item = sObjectMgr->GetItemTemplate(itemId);
+        if (!item)
+            return false;
+
+        ostringstream out; out << chat->formatItem(item, count);
+        if (created)
+            out << " created";
+        else if (received)
+            out << " received";
+        ai->TellMaster(out);
+
+        QueryItemUsage(item);
+        QueryQuestItem(itemId);
+        return true;
+    }
+
+    string text = event.getParam();
+
+    ItemIds items = chat->parseItems(text);
+    QueryItemsUsage(items);
+    return true;
+}
+
+bool QueryItemUsageAction::QueryItemUsage(ItemTemplate const *item)
+{
+    ostringstream out; out << item->ItemId;
+    ItemUsage usage = AI_VALUE2(ItemUsage, "item usage", out.str());
+    switch (usage)
+    {
+    case ITEM_USAGE_EQUIP:
+        ai->TellMaster("Equip");
+        return true;
+    case ITEM_USAGE_REPLACE:
+        ai->TellMaster("Equip (replace)");
+        return true;
+    case ITEM_USAGE_SKILL:
+        ai->TellMaster("Tradeskill");
+        return true;
+    case ITEM_USAGE_USE:
+        ai->TellMaster("Use");
+        return true;
+    case ITEM_USAGE_GUILD_TASK:
+        ai->TellMaster("Guild task");
+        return true;
+    }
+
+    return false;
+}
+
+void QueryItemUsageAction::QueryItemPrice(ItemTemplate const *item)
+{
+    if (!sRandomPlayerbotMgr.IsRandomBot(bot))
+        return;
+
+    if (item->Bonding == BIND_WHEN_PICKED_UP)
+        return;
+
+    list<Item*> items = InventoryAction::parseItems(item->Name1);
+    if (!items.empty())
+    {
+        for (list<Item*>::iterator i = items.begin(); i != items.end(); ++i)
+        {
+            Item* sell = *i;
+            int32 sellPrice = sell->GetCount() * auctionbot.GetSellPrice(sell->GetTemplate()) * sRandomPlayerbotMgr.GetSellMultiplier(bot);
+            ostringstream out;
+            out << "Selling " << chat->formatItem(sell->GetTemplate(), sell->GetCount()) << " for " << chat->formatMoney(sellPrice);
+            ai->TellMaster(out.str());
+        }
+    }
+
+    ostringstream out; out << item->ItemId;
+    ItemUsage usage = AI_VALUE2(ItemUsage, "item usage", out.str());
+    if (usage == ITEM_USAGE_NONE)
+        return;
+
+    int32 buyPrice = auctionbot.GetBuyPrice(item) * sRandomPlayerbotMgr.GetBuyMultiplier(bot);
+    if (buyPrice)
+    {
+        ostringstream out;
+        out << "Will buy for " << chat->formatMoney(buyPrice);
+        ai->TellMaster(out.str());
+    }
+}
+
+void QueryItemUsageAction::QueryItemsUsage(ItemIds items)
+{
+    for (ItemIds::iterator i = items.begin(); i != items.end(); i++)
+    {
+        ItemTemplate const *item = sObjectMgr->GetItemTemplate(*i);
+        QueryItemUsage(item);
+        QueryQuestItem(*i);
+        QueryItemPrice(item);
+    }
+}
+
+void QueryItemUsageAction::QueryQuestItem(uint32 itemId)
+{
+    Player *bot = ai->GetBot();
+    QuestStatusMap const& questMap = bot->getQuestStatusMap();
+    for (QuestStatusMap::const_iterator i = questMap.begin(); i != questMap.end(); i++)
+    {
+        const Quest *questTemplate = sObjectMgr->GetQuestTemplate( i->first );
+        if( !questTemplate )
+            continue;
+
+        uint32 questId = questTemplate->GetQuestId();
+        QuestStatus status = bot->GetQuestStatus(questId);
+        if (status == QUEST_STATUS_INCOMPLETE || (status == QUEST_STATE_COMPLETE && !bot->GetQuestRewardStatus(questId)))
+        {
+            QuestStatusData const& questStatus = i->second;
+            QueryQuestItem(itemId, questTemplate, &questStatus);
+        }
+    }
+}
+
+
+void QueryItemUsageAction::QueryQuestItem(uint32 itemId, const Quest *questTemplate, const QuestStatusData *questStatus)
+{
+    for (int i = 0; i < QUEST_OBJECTIVES_COUNT; i++)
+    {
+        if (questTemplate->RequiredItemId[i] != itemId)
+            continue;
+
+        int required = questTemplate->RequiredItemCount[i];
+        int available = questStatus->ItemCount[i];
+
+        if (!required)
+            continue;
+
+        ai->TellMaster(chat->formatQuestObjective(chat->formatQuest(questTemplate), available, required));
+    }
+}
+
diff --git a/src/plugins/playerbot/strategy/actions/QueryItemUsageAction.h b/src/plugins/playerbot/strategy/actions/QueryItemUsageAction.h
new file mode 100644
index 0000000..643ae96
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/QueryItemUsageAction.h
@@ -0,0 +1,24 @@
+#pragma once
+
+#include "../Action.h"
+#include "InventoryAction.h"
+
+namespace ai
+{
+    class QueryItemUsageAction : public InventoryAction {
+    public:
+        QueryItemUsageAction(PlayerbotAI* ai, string name = "query item usage") : InventoryAction(ai, name) {}
+        virtual bool Execute(Event event);
+
+    protected:
+        void QueryItemsUsage(ItemIds items);
+        bool QueryItemUsage(ItemTemplate const *item);
+        void QueryItemPrice(ItemTemplate const *item);
+        void QueryQuestItem(uint32 itemId, const Quest *questTemplate, const QuestStatusData *questStatus);
+        void QueryQuestItem(uint32 itemId);
+
+    private:
+        ostringstream out;
+
+    };
+}
diff --git a/src/plugins/playerbot/strategy/actions/QueryQuestAction.cpp b/src/plugins/playerbot/strategy/actions/QueryQuestAction.cpp
new file mode 100644
index 0000000..33eddca
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/QueryQuestAction.cpp
@@ -0,0 +1,89 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "QueryQuestAction.h"
+
+
+using namespace ai;
+
+void QueryQuestAction::TellObjective(string name, int available, int required)
+{
+    ai->TellMaster(chat->formatQuestObjective(name, available, required));
+}
+
+
+bool QueryQuestAction::Execute(Event event)
+{
+
+    Player *bot = ai->GetBot();
+    string text = event.getParam();
+
+    PlayerbotChatHandler ch(bot);
+    uint32 questId = ch.extractQuestId(text);
+    if (!questId)
+        return false;
+
+    for (uint16 slot = 0; slot < MAX_QUEST_LOG_SIZE; ++slot)
+    {
+        if(questId != bot->GetQuestSlotQuestId(slot))
+            continue;
+
+        ostringstream out;
+        out << "--- " << chat->formatQuest(sObjectMgr->GetQuestTemplate(questId)) << " ";
+        if (bot->GetQuestStatus(questId) == QUEST_STATUS_COMPLETE)
+        {
+            out << "|c0000FF00completed|r ---";
+            ai->TellMaster(out);
+        }
+        else
+        {
+            out << "|c00FF0000not completed|r ---";
+            ai->TellMaster(out);
+            TellObjectives(questId);
+        }
+
+        return true;
+    }
+
+    return false;
+}
+
+void QueryQuestAction::TellObjectives(uint32 questId)
+{
+    Quest const* questTemplate = sObjectMgr->GetQuestTemplate(questId);
+    QuestStatusMap &questMap = bot->getQuestStatusMap();
+    QuestStatusData questStatus = questMap[questId];
+
+    for (int i = 0; i < QUEST_OBJECTIVES_COUNT; i++)
+    {
+        if (!questTemplate->ObjectiveText[i].empty())
+            ai->TellMaster(questTemplate->ObjectiveText[i]);
+
+        if (questTemplate->RequiredItemId[i])
+        {
+            int required = questTemplate->RequiredItemCount[i];
+            int available = questStatus.ItemCount[i];
+            ItemTemplate const* proto = sObjectMgr->GetItemTemplate(questTemplate->RequiredItemId[i]);
+            TellObjective(chat->formatItem(proto), available, required);
+        }
+
+        if (questTemplate->RequiredNpcOrGo[i])
+        {
+            int required = questTemplate->RequiredNpcOrGoCount[i];
+            int available = questStatus.CreatureOrGOCount[i];
+
+            if (questTemplate->RequiredNpcOrGo[i] < 0)
+            {
+                GameObjectTemplate const* info = sObjectMgr->GetGameObjectTemplate(questTemplate->RequiredNpcOrGo[i]);
+                if (info)
+                    TellObjective(info->name, available, required);
+            }
+            else
+            {
+
+                CreatureTemplate const* info = sObjectMgr->GetCreatureTemplate(questTemplate->RequiredNpcOrGo[i]);
+                if (info)
+                    TellObjective(info->Name, available, required);
+            }
+        }
+    }
+}
diff --git a/src/plugins/playerbot/strategy/actions/QueryQuestAction.h b/src/plugins/playerbot/strategy/actions/QueryQuestAction.h
new file mode 100644
index 0000000..1822293
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/QueryQuestAction.h
@@ -0,0 +1,16 @@
+#pragma once
+
+#include "../Action.h"
+
+namespace ai
+{
+    class QueryQuestAction : public Action {
+    public:
+        QueryQuestAction(PlayerbotAI* ai) : Action(ai, "query quest") {}
+        virtual bool Execute(Event event);
+
+    private:
+        void TellObjectives(uint32 questId);
+        void TellObjective(string name, int available, int required);
+    };
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/actions/QuestAction.cpp b/src/plugins/playerbot/strategy/actions/QuestAction.cpp
new file mode 100644
index 0000000..2b1cfbc
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/QuestAction.cpp
@@ -0,0 +1,137 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "QuestAction.h"
+#include "../../PlayerbotAIConfig.h"
+
+using namespace ai;
+
+bool QuestAction::Execute(Event event)
+{
+    ObjectGuid guid = event.getObject();
+
+    Player* master = GetMaster();
+    if (!master)
+        return false;
+
+    if (!guid)
+    {
+        Unit* target = master->GetSelectedUnit();
+        if (target)
+            guid = target->GetGUID();
+    }
+
+    if (!guid)
+        return false;
+
+    return ProcessQuests(guid);
+}
+
+bool QuestAction::ProcessQuests(ObjectGuid questGiver)
+{
+    GameObject *gameObject = ai->GetGameObject(questGiver);
+    if (gameObject && gameObject->GetGoType() == GAMEOBJECT_TYPE_QUESTGIVER)
+        return ProcessQuests(gameObject);
+
+    Creature* creature = ai->GetCreature(questGiver);
+    if (creature)
+        return ProcessQuests(creature);
+
+    return false;
+}
+
+bool QuestAction::ProcessQuests(WorldObject* questGiver)
+{
+    ObjectGuid guid = questGiver->GetGUID();
+
+    if (bot->GetDistance(questGiver) > INTERACTION_DISTANCE)
+    {
+        ai->TellMaster("Cannot talk to quest giver");
+        return false;
+    }
+
+    if (!bot->isInFront(questGiver, M_PI / 2))
+        bot->SetFacingTo(bot->GetAngle(questGiver));
+
+    bot->SetSelection(guid);
+    bot->PrepareQuestMenu(guid);
+    QuestMenu& questMenu = bot->PlayerTalkClass->GetQuestMenu();
+    for (uint32 i = 0; i < questMenu.GetMenuItemCount(); ++i)
+    {
+        QuestMenuItem const& menuItem = questMenu.GetItem(i);
+        uint32 questID = menuItem.QuestId;
+        Quest const* quest = sObjectMgr->GetQuestTemplate(questID);
+        if (!quest)
+            continue;
+
+        ProcessQuest(quest, questGiver);
+    }
+
+    return true;
+}
+
+bool QuestAction::AcceptQuest(Quest const* quest, uint64 questGiver)
+{
+    std::ostringstream out;
+
+    uint32 questId = quest->GetQuestId();
+
+    if (bot->GetQuestStatus(questId) == QUEST_STATUS_COMPLETE)
+        out << "Already completed";
+    else if (! bot->CanTakeQuest(quest, false))
+    {
+        if (! bot->SatisfyQuestStatus(quest, false))
+            out << "Already on";
+        else
+            out << "Can't take";
+    }
+    else if (! bot->SatisfyQuestLog(false))
+        out << "Quest log is full";
+    else if (! bot->CanAddQuest(quest, false))
+        out << "Bags are full";
+
+    else
+    {
+        WorldPacket p(CMSG_QUESTGIVER_ACCEPT_QUEST);
+        uint32 unk1 = 0;
+        p << questGiver << questId << unk1;
+        p.rpos(0);
+        bot->GetSession()->HandleQuestgiverAcceptQuestOpcode(p);
+
+        if (bot->GetQuestStatus(questId) != QUEST_STATUS_NONE)
+        {
+            out << "Accepted " << chat->formatQuest(quest);
+            ai->TellMaster(out);
+            return true;
+        }
+    }
+
+    out << " " << chat->formatQuest(quest);
+    ai->TellMaster(out);
+    return false;
+}
+
+bool QuestObjectiveCompletedAction::Execute(Event event)
+{
+    WorldPacket p(event.getPacket());
+    p.rpos(0);
+
+    uint32 entry, questId, available, required;
+    ObjectGuid guid;
+    p >> questId >> entry >> available >> required >> guid;
+
+    if (entry & 0x80000000)
+    {
+        entry &= 0x7FFFFFFF;
+        GameObjectTemplate const* info = sObjectMgr->GetGameObjectTemplate(entry);
+        if (info)
+            ai->TellMaster(chat->formatQuestObjective(info->name, available, required));
+    }
+    else
+    {
+        CreatureTemplate const* info = sObjectMgr->GetCreatureTemplate(entry);
+        if (info)
+            ai->TellMaster(chat->formatQuestObjective(info->Name, available, required));
+    }
+
+    return true;
+}
diff --git a/src/plugins/playerbot/strategy/actions/QuestAction.h b/src/plugins/playerbot/strategy/actions/QuestAction.h
new file mode 100644
index 0000000..97010ed
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/QuestAction.h
@@ -0,0 +1,33 @@
+#pragma once
+
+#include "../Action.h"
+#include "../../../Quests/QuestDef.h"
+
+namespace ai
+{
+    class QuestAction : public Action
+    {
+    public:
+        QuestAction(PlayerbotAI* ai, string name) : Action(ai, name) {}
+
+    public:
+        virtual bool Execute(Event event);
+
+    protected:
+        virtual void ProcessQuest(Quest const* quest, WorldObject* questGiver) = 0;
+
+    protected:
+        bool AcceptQuest(Quest const* quest, uint64 questGiver);
+        bool ProcessQuests(ObjectGuid questGiver);
+        bool ProcessQuests(WorldObject* questGiver);
+    };
+
+    class QuestObjectiveCompletedAction : public Action
+    {
+    public:
+        QuestObjectiveCompletedAction(PlayerbotAI* ai) : Action(ai, "quest objective completed") {}
+
+    public:
+        virtual bool Execute(Event event);
+    };
+}
diff --git a/src/plugins/playerbot/strategy/actions/ReachTargetActions.h b/src/plugins/playerbot/strategy/actions/ReachTargetActions.h
new file mode 100644
index 0000000..2640969
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/ReachTargetActions.h
@@ -0,0 +1,57 @@
+#pragma once
+
+#include "../Action.h"
+#include "MovementActions.h"
+#include "../../PlayerbotAIConfig.h"
+
+namespace ai
+{
+    class ReachTargetAction : public MovementAction
+    {
+    public:
+        ReachTargetAction(PlayerbotAI* ai, string name, float distance) : MovementAction(ai, name)
+		{
+            this->distance = distance;
+        }
+        virtual bool Execute(Event event)
+		{
+			return MoveTo(AI_VALUE(Unit*, "current target"), distance);
+        }
+        virtual bool isUseful()
+		{
+            return AI_VALUE2(float, "distance", "current target") > (distance + sPlayerbotAIConfig.contactDistance);
+        }
+        virtual string GetTargetName() { return "current target"; }
+
+    protected:
+        float distance;
+    };
+
+    class CastReachTargetSpellAction : public CastSpellAction
+    {
+    public:
+        CastReachTargetSpellAction(PlayerbotAI* ai, string spell, float distance) : CastSpellAction(ai, spell)
+		{
+            this->distance = distance;
+        }
+		virtual bool isUseful()
+		{
+			return AI_VALUE2(float, "distance", "current target") > (distance + sPlayerbotAIConfig.contactDistance);
+		}
+
+    protected:
+        float distance;
+    };
+
+    class ReachMeleeAction : public ReachTargetAction
+	{
+    public:
+        ReachMeleeAction(PlayerbotAI* ai) : ReachTargetAction(ai, "reach melee", sPlayerbotAIConfig.meleeDistance) {}
+    };
+
+    class ReachSpellAction : public ReachTargetAction
+	{
+    public:
+        ReachSpellAction(PlayerbotAI* ai, float distance = sPlayerbotAIConfig.spellDistance) : ReachTargetAction(ai, "reach spell", distance) {}
+    };
+}
diff --git a/src/plugins/playerbot/strategy/actions/ReadyCheckAction.cpp b/src/plugins/playerbot/strategy/actions/ReadyCheckAction.cpp
new file mode 100644
index 0000000..98f8c4b
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/ReadyCheckAction.cpp
@@ -0,0 +1,84 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "ReadyCheckAction.h"
+#include "../../PlayerbotAIConfig.h"
+#include "../../../Entities/Pet/Pet.h"
+
+using namespace ai;
+
+bool ReadyCheckAction::Execute(Event event)
+{
+    WorldPacket &p = event.getPacket();
+	ObjectGuid player;
+	p.rpos(0);
+    if (!p.empty())
+        p >> player;
+
+	if (player.GetRawValue() == bot->GetGUID())
+        return false;
+
+	return ReadyCheck();
+}
+
+bool ReadyCheckAction::ReadyCheck()
+{
+    bool health = AI_VALUE2(uint8, "health", "self target") > sPlayerbotAIConfig.almostFullHealth;
+    if (!health)
+    {
+        ai->TellMaster("Low health!");
+        return false;
+    }
+
+    bool mana = !AI_VALUE2(bool, "has mana", "self target") || AI_VALUE2(uint8, "mana", "self target") > sPlayerbotAIConfig.mediumHealth;
+    if (!mana)
+    {
+        ai->TellMaster("Low mana!");
+        return false;
+    }
+
+    Player* master = GetMaster();
+    if (master)
+    {
+        bool distance = bot->GetDistance(master) <= sPlayerbotAIConfig.sightDistance;
+        if (!distance)
+        {
+            ai->TellMaster("Too far away!");
+            return false;
+        }
+    }
+
+    if (bot->getClass() == CLASS_HUNTER)
+    {
+        if (!bot->GetUInt32Value(PLAYER_AMMO_ID))
+        {
+            ai->TellMaster("Out of ammo!");
+            return false;
+        }
+
+        if (!bot->GetPet())
+        {
+            ai->TellMaster("No pet!");
+            return false;
+        }
+
+        if (bot->GetPet()->GetHappinessState() == UNHAPPY)
+        {
+            ai->TellMaster("Pet is unhappy!");
+            return false;
+        }
+    }
+
+    WorldPacket* const packet = new WorldPacket(MSG_RAID_READY_CHECK);
+    *packet << bot->GetGUID();
+    *packet << uint8(1);
+    bot->GetSession()->QueuePacket(packet);
+
+    ai->ChangeStrategy("-ready check", BOT_STATE_NON_COMBAT);
+
+    return true;
+}
+
+bool FinishReadyCheckAction::Execute(Event event)
+{
+    return ReadyCheck();
+}
diff --git a/src/plugins/playerbot/strategy/actions/ReadyCheckAction.h b/src/plugins/playerbot/strategy/actions/ReadyCheckAction.h
new file mode 100644
index 0000000..0e26b61
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/ReadyCheckAction.h
@@ -0,0 +1,26 @@
+#pragma once
+
+#include "../Action.h"
+
+namespace ai
+{
+    class ReadyCheckAction : public Action
+    {
+    public:
+        ReadyCheckAction(PlayerbotAI* ai, string name = "ready check") : Action(ai, name) {}
+
+        virtual bool Execute(Event event);
+
+    protected:
+        bool ReadyCheck();
+    };
+
+    class FinishReadyCheckAction : public ReadyCheckAction
+    {
+    public:
+        FinishReadyCheckAction(PlayerbotAI* ai) : ReadyCheckAction(ai, "finish ready check") {}
+
+        virtual bool Execute(Event event);
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/actions/ReleaseSpiritAction.h b/src/plugins/playerbot/strategy/actions/ReleaseSpiritAction.h
new file mode 100644
index 0000000..47ce1e5
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/ReleaseSpiritAction.h
@@ -0,0 +1,29 @@
+#pragma once
+
+#include "../Action.h"
+#include "MovementActions.h"
+#include "../values/LastMovementValue.h"
+
+namespace ai
+{
+	class ReleaseSpiritAction : public Action {
+	public:
+		ReleaseSpiritAction(PlayerbotAI* ai) : Action(ai, "release") {}
+
+    public:
+        virtual bool Execute(Event event)
+        {
+            if (bot->IsAlive() || bot->GetCorpse())
+                return false;
+
+            ai->ChangeStrategy("-follow,+stay", BOT_STATE_NON_COMBAT);
+
+            bot->SetBotDeathTimer();
+            bot->BuildPlayerRepop();
+
+            bot->RepopAtGraveyard();
+            return true;
+        }
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/actions/RememberTaxiAction.cpp b/src/plugins/playerbot/strategy/actions/RememberTaxiAction.cpp
new file mode 100644
index 0000000..7b17096
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/RememberTaxiAction.cpp
@@ -0,0 +1,46 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "RememberTaxiAction.h"
+#include "../values/LastMovementValue.h"
+
+using namespace ai;
+
+bool RememberTaxiAction::Execute(Event event)
+{
+    
+
+    WorldPacket p(event.getPacket());
+    p.rpos(0);
+
+    switch (p.GetOpcode())
+    {
+    case CMSG_ACTIVATETAXI:
+        {
+            LastMovement& movement = context->GetValue<LastMovement&>("last movement")->Get();
+            movement.taxiNodes.clear();
+            movement.taxiNodes.resize(2);
+
+            p >> movement.taxiMaster >> movement.taxiNodes[0] >> movement.taxiNodes[1];
+            return true;
+        }
+    case CMSG_ACTIVATETAXIEXPRESS:
+        {
+            ObjectGuid guid;
+            uint32 node_count;
+            p >> guid >> node_count;
+
+            LastMovement& movement = context->GetValue<LastMovement&>("last movement")->Get();
+            movement.taxiNodes.clear();
+            for (uint32 i = 0; i < node_count; ++i)
+            {
+                uint32 node;
+                p >> node;
+                movement.taxiNodes.push_back(node);
+            }
+
+            return true;
+        }
+    }
+
+    return false;
+}
diff --git a/src/plugins/playerbot/strategy/actions/RememberTaxiAction.h b/src/plugins/playerbot/strategy/actions/RememberTaxiAction.h
new file mode 100644
index 0000000..16c1f07
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/RememberTaxiAction.h
@@ -0,0 +1,13 @@
+#pragma once
+
+namespace ai
+{
+	class RememberTaxiAction : public Action {
+	public:
+		RememberTaxiAction(PlayerbotAI* ai) : Action(ai, "remember taxi") {}
+
+    public:
+        virtual bool Execute(Event event);
+    };
+
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/actions/RepairAllAction.cpp b/src/plugins/playerbot/strategy/actions/RepairAllAction.cpp
new file mode 100644
index 0000000..7104792
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/RepairAllAction.cpp
@@ -0,0 +1,30 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "RepairAllAction.h"
+
+
+using namespace ai;
+
+bool RepairAllAction::Execute(Event event)
+{
+    list<ObjectGuid> npcs = AI_VALUE(list<ObjectGuid>, "nearest npcs");
+    for (list<ObjectGuid>::iterator i = npcs.begin(); i != npcs.end(); i++)
+    {
+        Creature *unit = bot->GetNPCIfCanInteractWith(*i, UNIT_NPC_FLAG_REPAIR);
+        if (!unit)
+            continue;
+
+        bot->SetFacingToObject(unit);
+        float discountMod = bot->GetReputationPriceDiscount(unit);
+        uint32 totalCost = bot->DurabilityRepairAll(true, discountMod, false);
+
+        ostringstream out;
+        out << "Repair: " << chat->formatMoney(totalCost) << " (" << unit->GetName() << ")";
+        ai->TellMasterNoFacing(out.str());
+
+        return true;
+    }
+
+    ai->TellMaster("Cannot find any npc to repair at");
+    return false;
+}
diff --git a/src/plugins/playerbot/strategy/actions/RepairAllAction.h b/src/plugins/playerbot/strategy/actions/RepairAllAction.h
new file mode 100644
index 0000000..33c7abf
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/RepairAllAction.h
@@ -0,0 +1,13 @@
+#pragma once
+
+#include "../Action.h"
+
+namespace ai
+{
+    class RepairAllAction : public Action 
+    {
+    public:
+        RepairAllAction(PlayerbotAI* ai) : Action(ai, "repair") {}
+        virtual bool Execute(Event event);
+    };
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/actions/ResetAiAction.cpp b/src/plugins/playerbot/strategy/actions/ResetAiAction.cpp
new file mode 100644
index 0000000..995f241
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/ResetAiAction.cpp
@@ -0,0 +1,12 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "ResetAiAction.h"
+
+using namespace ai;
+
+bool ResetAiAction::Execute(Event event)
+{
+    ai->ResetStrategies();
+    ai->TellMaster("AI was reset to defaults");
+    return true;
+}
diff --git a/src/plugins/playerbot/strategy/actions/ResetAiAction.h b/src/plugins/playerbot/strategy/actions/ResetAiAction.h
new file mode 100644
index 0000000..929abcb
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/ResetAiAction.h
@@ -0,0 +1,14 @@
+#pragma once
+
+#include "../Action.h"
+#include "InventoryAction.h"
+
+namespace ai
+{
+    class ResetAiAction : public Action {
+    public:
+        ResetAiAction(PlayerbotAI* ai) : Action(ai, "reset ai") {}
+        virtual bool Execute(Event event);
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/actions/ReviveFromCorpseAction.cpp b/src/plugins/playerbot/strategy/actions/ReviveFromCorpseAction.cpp
new file mode 100644
index 0000000..88e4a23
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/ReviveFromCorpseAction.cpp
@@ -0,0 +1,51 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "ReviveFromCorpseAction.h"
+#include "../../PlayerbotFactory.h"
+#include "../../PlayerbotAIConfig.h"
+
+using namespace ai;
+
+bool ReviveFromCorpseAction::Execute(Event event)
+{
+    Corpse* corpse = bot->GetCorpse();
+    if (!corpse)
+        return false;
+
+    time_t reclaimTime = corpse->GetGhostTime() + bot->GetCorpseReclaimDelay( corpse->GetType()==CORPSE_RESURRECTABLE_PVP );
+    if (reclaimTime > time(0) || corpse->GetDistance(bot) > sPlayerbotAIConfig.spellDistance)
+        return false;
+
+    bot->ResurrectPlayer(0.5f);
+    bot->SpawnCorpseBones();
+    bot->SaveToDB();
+    context->GetValue<Unit*>("current target")->Set(NULL);
+    bot->SetSelection(ObjectGuid::Empty);
+    return true;
+}
+
+bool SpiritHealerAction::Execute(Event event)
+{
+    Corpse* corpse = bot->GetCorpse();
+    if (!corpse)
+        return false;
+
+    list<ObjectGuid> npcs = AI_VALUE(list<ObjectGuid>, "nearest npcs");
+    for (list<ObjectGuid>::iterator i = npcs.begin(); i != npcs.end(); i++)
+    {
+        Unit* unit = ai->GetUnit(*i);
+        if (unit && unit->IsSpiritHealer())
+        {
+            PlayerbotChatHandler ch(bot);
+            bot->ResurrectPlayer(0.5f);
+            bot->SpawnCorpseBones();
+            bot->SaveToDB();
+            context->GetValue<Unit*>("current target")->Set(NULL);
+            bot->SetSelection(ObjectGuid::Empty);
+            return true;
+        }
+    }
+
+    ai->TellMaster("Cannot find any spirit healer nearby");
+    return false;
+}
diff --git a/src/plugins/playerbot/strategy/actions/ReviveFromCorpseAction.h b/src/plugins/playerbot/strategy/actions/ReviveFromCorpseAction.h
new file mode 100644
index 0000000..0e3a8cb
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/ReviveFromCorpseAction.h
@@ -0,0 +1,21 @@
+#pragma once
+
+namespace ai
+{
+	class ReviveFromCorpseAction : public Action {
+	public:
+		ReviveFromCorpseAction(PlayerbotAI* ai) : Action(ai, "revive") {}
+
+    public:
+        virtual bool Execute(Event event);
+    };
+
+	class SpiritHealerAction : public Action {
+	public:
+	    SpiritHealerAction(PlayerbotAI* ai) : Action(ai, "spirit healer") {}
+
+    public:
+        virtual bool Execute(Event event);
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/actions/RewardAction.cpp b/src/plugins/playerbot/strategy/actions/RewardAction.cpp
new file mode 100644
index 0000000..c85db71
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/RewardAction.cpp
@@ -0,0 +1,75 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "RewardAction.h"
+#include "../ItemVisitors.h"
+#include "../values/ItemCountValue.h"
+
+using namespace ai;
+
+bool RewardAction::Execute(Event event)
+{
+    string link = event.getParam();
+
+    ItemIds itemIds = chat->parseItems(link);
+    if (itemIds.empty())
+        return false;
+
+    uint32 itemId = *itemIds.begin();
+
+    list<ObjectGuid> npcs = AI_VALUE(list<ObjectGuid>, "nearest npcs");
+    for (list<ObjectGuid>::iterator i = npcs.begin(); i != npcs.end(); i++)
+    {
+        Unit* npc = ai->GetUnit(*i);
+        if (npc && Reward(itemId, npc))
+            return true;
+    }
+
+    list<ObjectGuid> gos = AI_VALUE(list<ObjectGuid>, "nearest game objects");
+    for (list<ObjectGuid>::iterator i = gos.begin(); i != gos.end(); i++)
+    {
+        GameObject* go = ai->GetGameObject(*i);
+        if (go && Reward(itemId, go))
+            return true;
+    }
+
+    ai->TellMaster("Cannot talk to quest giver");
+    return false;
+}
+
+bool RewardAction::Reward(uint32 itemId, Object* questGiver)
+{
+    QuestMenu& questMenu = bot->PlayerTalkClass->GetQuestMenu();
+    for (uint32 iI = 0; iI < questMenu.GetMenuItemCount(); ++iI)
+    {
+        QuestMenuItem const& qItem = questMenu.GetItem(iI);
+
+        uint32 questID = qItem.QuestId;
+        Quest const* pQuest = sObjectMgr->GetQuestTemplate(questID);
+        QuestStatus status = bot->GetQuestStatus(questID);
+
+        // if quest is complete, turn it in
+        if (status == QUEST_STATUS_COMPLETE &&
+            ! bot->GetQuestRewardStatus(questID) &&
+            pQuest->GetRewChoiceItemsCount() > 1 &&
+            bot->CanRewardQuest(pQuest, false))
+        {
+            for (uint8 rewardIdx=0; rewardIdx < pQuest->GetRewChoiceItemsCount(); ++rewardIdx)
+            {
+                ItemTemplate const * const pRewardItem = sObjectMgr->GetItemTemplate(pQuest->RewardChoiceItemId[rewardIdx]);
+                if (itemId == pRewardItem->ItemId)
+                {
+                    bot->RewardQuest(pQuest, rewardIdx, questGiver, false);
+
+                    string questTitle  = pQuest->GetTitle();
+                    string itemName = pRewardItem->Name1;
+
+                    ostringstream out; out << chat->formatItem(pRewardItem) << " rewarded";
+                    ai->TellMaster(out);
+                    return true;
+                }
+            }
+        }
+    }
+
+    return false;
+}
diff --git a/src/plugins/playerbot/strategy/actions/RewardAction.h b/src/plugins/playerbot/strategy/actions/RewardAction.h
new file mode 100644
index 0000000..f4eda13
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/RewardAction.h
@@ -0,0 +1,17 @@
+#pragma once
+
+#include "../Action.h"
+#include "InventoryAction.h"
+
+namespace ai
+{
+    class RewardAction : public InventoryAction {
+    public:
+        RewardAction(PlayerbotAI* ai) : InventoryAction(ai, "reward") {}
+        virtual bool Execute(Event event);
+
+    private:
+        bool Reward(uint32 itemId, Object* pNpc);
+    };
+
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/actions/RtiAction.h b/src/plugins/playerbot/strategy/actions/RtiAction.h
new file mode 100644
index 0000000..f0cca94
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/RtiAction.h
@@ -0,0 +1,44 @@
+#pragma once
+
+#include "../Action.h"
+
+namespace ai
+{
+    class RtiAction : public Action
+    {
+    public:
+        RtiAction(PlayerbotAI* ai) : Action(ai, "rti")
+        {}
+
+        virtual bool Execute(Event event)
+        {
+            string text = event.getParam();
+            if (text.empty() || text == "?")
+            {
+                ostringstream out; out << "RTI: ";
+                AppendRti(out);
+                ai->TellMaster(out);
+                return true;
+            }
+
+            context->GetValue<string>("rti")->Set(text);
+            ostringstream out; out << "RTI set to: ";
+            AppendRti(out);
+            ai->TellMaster(out);
+            return true;
+        }
+
+    private:
+        void AppendRti(ostringstream & out)
+        {
+            out << AI_VALUE(string, "rti");
+
+            Unit* target = AI_VALUE(Unit*, "rti target");
+            if(target)
+                out << " (" << target->GetName() << ")";
+
+        }
+
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/actions/SaveManaAction.cpp b/src/plugins/playerbot/strategy/actions/SaveManaAction.cpp
new file mode 100644
index 0000000..c5d56a8
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/SaveManaAction.cpp
@@ -0,0 +1,73 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "SaveManaAction.h"
+#include "../../AiFactory.h"
+#include "../ItemVisitors.h"
+
+using namespace ai;
+
+bool SaveManaAction::Execute(Event event)
+{
+    string text = event.getParam();
+    double value = AI_VALUE(double, "mana save level");
+
+    if (text == "?")
+    {
+        ostringstream out; out << "Mana save level: " << format(value);
+        ai->TellMaster(out);
+        return true;
+    }
+
+    if (text == "*")
+    {
+        switch (bot->getClass())
+        {
+        case CLASS_HUNTER:
+        case CLASS_SHAMAN:
+        case CLASS_DRUID:
+            value = 5.0;
+            break;
+        case CLASS_MAGE:
+        case CLASS_PRIEST:
+        case CLASS_WARLOCK:
+            value = 2.0;
+            break;
+        default:
+            value = 3.0;
+        }
+    }
+    else if (text.empty())
+    {
+        value = 1.0;
+    }
+    else
+    {
+        value = atof(text.c_str());
+    }
+
+    value = min(10.0, value);
+    value = max(1.0, value);
+    value = floor(value * 100 + 0.5) / 100.0;
+
+    ai->GetAiObjectContext()->GetValue<double>("mana save level")->Set(value);
+
+    ostringstream out; out << "Mana save level set: " << format(value);
+    ai->TellMaster(out);
+
+    return true;
+}
+
+string SaveManaAction::format(double value)
+{
+    ostringstream out;
+    if (value <= 1.0)
+        out << "|cFF808080";
+    else if (value <= 5.0)
+        out << "|cFF00FF00";
+    else if (value <= 7.0)
+        out << "|cFFFFFF00";
+    else
+        out << "|cFFFF0000";
+    out << value << "|cffffffff";
+    return out.str();
+}
diff --git a/src/plugins/playerbot/strategy/actions/SaveManaAction.h b/src/plugins/playerbot/strategy/actions/SaveManaAction.h
new file mode 100644
index 0000000..3d9b3e0
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/SaveManaAction.h
@@ -0,0 +1,20 @@
+#pragma once
+
+#include "../Action.h"
+#include "InventoryAction.h"
+
+namespace ai
+{
+    class SaveManaAction : public Action
+    {
+    public:
+        SaveManaAction(PlayerbotAI* ai) : Action(ai, "save mana") {}
+
+    public:
+        virtual bool Execute(Event event);
+
+    private:
+        string format(double value);
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/actions/SayAction.cpp b/src/plugins/playerbot/strategy/actions/SayAction.cpp
new file mode 100644
index 0000000..cdbcbcf
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/SayAction.cpp
@@ -0,0 +1,104 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "SayAction.h"
+
+using namespace ai;
+
+map<string, vector<string> > SayAction::stringTable;
+map<string, uint32 > SayAction::probabilityTable;
+
+SayAction::SayAction(PlayerbotAI* ai) : Action(ai, "say"), Qualified()
+{
+}
+
+void replaceAll(std::string& str, const std::string& from, const std::string& to) {
+    if(from.empty())
+        return;
+    size_t start_pos = 0;
+    while((start_pos = str.find(from, start_pos)) != std::string::npos) {
+        str.replace(start_pos, from.length(), to);
+        start_pos += to.length(); // In case 'to' contains 'from', like replacing 'x' with 'yx'
+    }
+}
+
+bool SayAction::Execute(Event event)
+{
+	if (stringTable.empty())
+	{
+		QueryResult results = CharacterDatabase.PQuery("SELECT name, text, type FROM ai_playerbot_speech");
+		if (results)
+		{
+            do
+            {
+                Field* fields = results->Fetch();
+                string name = fields[0].GetCString();
+                string text = fields[1].GetCString();
+                string type = fields[2].GetCString();
+
+                if (type == "yell") text = "/y " + text;
+                stringTable[name].push_back(text);
+            } while (results->NextRow());
+		}
+	}
+	if (probabilityTable.empty())
+	{
+        QueryResult results = CharacterDatabase.PQuery("SELECT name, probability FROM ai_playerbot_speech_probability");
+        if (results)
+        {
+            do
+            {
+                Field* fields = results->Fetch();
+                string name = fields[0].GetCString();
+                uint32 probability = fields[1].GetUInt32();
+
+                probabilityTable[name] = probability;
+            } while (results->NextRow());
+        }
+	}
+
+    vector<string> &strings = stringTable[qualifier];
+    if (strings.empty()) return false;
+
+    time_t lastSaid = AI_VALUE2(time_t, "last said", qualifier);
+    ai->GetAiObjectContext()->GetValue<time_t>("last said", qualifier)->Set(time(0) + urand(1, 60));
+
+    if (!lastSaid || (time(0) - lastSaid) > 90) return false;
+
+    uint32 probability = probabilityTable[name];
+    if (!probability) probability = 100;
+    if (urand(0, 100) >= probability) return false;
+
+    uint32 idx = urand(0, strings.size() - 1);
+    string text = strings[idx];
+
+    Unit* target = AI_VALUE(Unit*, "tank target");
+    if (!target) target = AI_VALUE(Unit*, "current target");
+    if (target) replaceAll(text, "<target>", target->GetName());
+
+    replaceAll(text, "<randomfaction>", IsAlliance(bot->getRace()) ? "Alliance" : "Horde");
+
+    if (bot->GetMap())
+    {
+        uint32 areaId = bot->GetMap()->GetAreaId(bot->GetPositionX(), bot->GetPositionY(), bot->GetPositionZ());
+        if (areaId)
+        {
+            AreaTableEntry const* area = sAreaTableStore.LookupEntry(areaId);
+            if (area)
+            {
+                replaceAll(text, "<subzone>", area->area_name[0]);
+            }
+        }
+    }
+
+    if (text.find("/y ") == 0)
+        bot->Yell(text.substr(3), LANG_UNIVERSAL);
+    else
+        bot->Say(text, LANG_UNIVERSAL);
+}
+
+
+bool SayAction::isUseful()
+{
+    time_t lastSaid = AI_VALUE2(time_t, "last said", qualifier);
+    return (time(0) - lastSaid) > 30;
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/actions/SayAction.h b/src/plugins/playerbot/strategy/actions/SayAction.h
new file mode 100644
index 0000000..7caad21
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/SayAction.h
@@ -0,0 +1,20 @@
+#pragma once
+
+#include "../Action.h"
+#include "QuestAction.h"
+
+namespace ai
+{
+    class SayAction : public Action, public Qualified
+    {
+    public:
+        SayAction(PlayerbotAI* ai);
+        virtual bool Execute(Event event);
+        virtual bool isUseful();
+        virtual string getName() { return "say::" + qualifier; }
+
+    private:
+        static map<string, vector<string> > stringTable;
+        static map<string, uint32 > probabilityTable;
+    };
+}
diff --git a/src/plugins/playerbot/strategy/actions/SecurityCheckAction.cpp b/src/plugins/playerbot/strategy/actions/SecurityCheckAction.cpp
new file mode 100644
index 0000000..891b03c
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/SecurityCheckAction.cpp
@@ -0,0 +1,31 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "../../RandomPlayerbotMgr.h"
+#include "SecurityCheckAction.h"
+#include "../../../Groups/Group.h"
+
+using namespace ai;
+
+
+bool SecurityCheckAction::isUseful()
+{
+    return sRandomPlayerbotMgr.IsRandomBot(bot) && ai->GetMaster() && ai->GetMaster()->GetSession()->GetSecurity() < SEC_GAMEMASTER;
+}
+
+bool SecurityCheckAction::Execute(Event event)
+{
+    Group* group = bot->GetGroup();
+    if (group)
+    {
+        LootMethod method = group->GetLootMethod();
+        ItemQualities threshold = group->GetLootThreshold();
+        if (method == MASTER_LOOT || method == FREE_FOR_ALL || threshold > ITEM_QUALITY_UNCOMMON)
+        {
+            ai->TellMaster("I won't do anything until you change loot type to group loot with green threshold");
+            ai->ChangeStrategy("+passive,+stay", BOT_STATE_NON_COMBAT);
+            ai->ChangeStrategy("+passive,+stay", BOT_STATE_COMBAT);
+            return true;
+        }
+    }
+    return false;
+}
diff --git a/src/plugins/playerbot/strategy/actions/SecurityCheckAction.h b/src/plugins/playerbot/strategy/actions/SecurityCheckAction.h
new file mode 100644
index 0000000..4ae38f0
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/SecurityCheckAction.h
@@ -0,0 +1,14 @@
+#pragma once
+
+#include "../Action.h"
+
+namespace ai
+{
+    class SecurityCheckAction : public Action
+    {
+    public:
+        SecurityCheckAction(PlayerbotAI* ai) : Action(ai, "security check") {}
+        virtual bool isUseful();
+        virtual bool Execute(Event event);
+    };
+}
diff --git a/src/plugins/playerbot/strategy/actions/SellAction.cpp b/src/plugins/playerbot/strategy/actions/SellAction.cpp
new file mode 100644
index 0000000..1af725c
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/SellAction.cpp
@@ -0,0 +1,95 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "SellAction.h"
+#include "../ItemVisitors.h"
+
+using namespace ai;
+
+class SellItemsVisitor : public IterateItemsVisitor
+{
+public:
+    SellItemsVisitor(SellAction* action) : IterateItemsVisitor()
+    {
+        this->action = action;
+    }
+
+    virtual bool Visit(Item* item)
+    {
+        action->Sell(item);
+        return true;
+    }
+
+private:
+    SellAction* action;
+};
+
+class SellGrayItemsVisitor : public SellItemsVisitor
+{
+public:
+    SellGrayItemsVisitor(SellAction* action) : SellItemsVisitor(action) {}
+
+    virtual bool Visit(Item* item)
+    {
+        if (item->GetTemplate()->Quality != ITEM_QUALITY_POOR)
+            return true;
+
+        return SellItemsVisitor::Visit(item);
+    }
+};
+
+
+bool SellAction::Execute(Event event)
+{
+    Player* master = GetMaster();
+    if (!master)
+        return false;
+
+    string text = event.getParam();
+
+    if (text == "gray" || text == "*")
+    {
+        SellGrayItemsVisitor visitor(this);
+        IterateItems(&visitor);
+        return true;
+    }
+
+    ItemIds ids = chat->parseItems(text);
+
+    for (ItemIds::iterator i =ids.begin(); i != ids.end(); i++)
+    {
+        FindItemByIdVisitor visitor(*i);
+        Sell(&visitor);
+    }
+
+    return true;
+}
+
+
+void SellAction::Sell(FindItemVisitor* visitor)
+{
+    IterateItems(visitor);
+    list<Item*> items = visitor->GetResult();
+    for (list<Item*>::iterator i = items.begin(); i != items.end(); ++i)
+        Sell(*i);
+}
+
+void SellAction::Sell(Item* item)
+{
+    Player* master = GetMaster();
+    Unit* vendor = master->GetSelectedUnit();
+    if (!vendor)
+    {
+        ai->TellMaster("Select a vendor first");
+        return;
+    }
+
+    ObjectGuid itemguid = item->GetGUID();
+    uint32 count = item->GetCount();
+
+    WorldPacket p;
+    p << vendor->GetGUID() << itemguid << count;
+    bot->GetSession()->HandleSellItemOpcode(p);
+
+    ostringstream out; out << chat->formatItem(item->GetTemplate()) << " sold";
+    ai->TellMaster(out);
+}
diff --git a/src/plugins/playerbot/strategy/actions/SellAction.h b/src/plugins/playerbot/strategy/actions/SellAction.h
new file mode 100644
index 0000000..c1f0915
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/SellAction.h
@@ -0,0 +1,18 @@
+#pragma once
+
+#include "../Action.h"
+#include "InventoryAction.h"
+
+namespace ai
+{
+    class SellAction : public InventoryAction {
+    public:
+        SellAction(PlayerbotAI* ai) : InventoryAction(ai, "sell") {}
+        virtual bool Execute(Event event);
+
+        void Sell(FindItemVisitor* visitor);
+        void Sell(Item* item);
+
+    };
+
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/actions/SetHomeAction.cpp b/src/plugins/playerbot/strategy/actions/SetHomeAction.cpp
new file mode 100644
index 0000000..1b2d22f
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/SetHomeAction.cpp
@@ -0,0 +1,42 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "SetHomeAction.h"
+#include "../../PlayerbotAIConfig.h"
+
+
+using namespace ai;
+
+bool SetHomeAction::Execute(Event event)
+{
+    Player* master = ai->GetMaster();
+    if (!master)
+        return false;
+
+    Unit* unit = master->GetSelectedUnit();
+    if (unit && unit->IsInnkeeper())
+    {
+        float angle = GetFollowAngle();
+        float x = unit->GetPositionX() + sPlayerbotAIConfig.followDistance * cos(angle);
+        float y = unit->GetPositionY() + sPlayerbotAIConfig.followDistance * sin(angle);
+        float z = unit->GetPositionZ();
+        WorldLocation loc(unit->GetMapId(), x, y, z);
+        bot->SetHomebind(loc, unit->GetAreaId());
+        ai->TellMaster("This inn is my new home");
+        return true;
+    }
+
+    list<ObjectGuid> npcs = AI_VALUE(list<ObjectGuid>, "nearest npcs");
+    for (list<ObjectGuid>::iterator i = npcs.begin(); i != npcs.end(); i++)
+    {
+        Creature *unit = bot->GetNPCIfCanInteractWith(*i, UNIT_NPC_FLAG_INNKEEPER);
+        if (!unit)
+            continue;
+
+        bot->GetSession()->SendBindPoint(unit);
+        ai->TellMaster("This inn is my new home");
+        return true;
+    }
+
+    ai->TellMaster("Can't find any innkeeper around");
+    return false;
+}
diff --git a/src/plugins/playerbot/strategy/actions/SetHomeAction.h b/src/plugins/playerbot/strategy/actions/SetHomeAction.h
new file mode 100644
index 0000000..b98a5b5
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/SetHomeAction.h
@@ -0,0 +1,12 @@
+#pragma once
+
+#include "MovementActions.h"
+
+namespace ai
+{
+    class SetHomeAction : public MovementAction {
+    public:
+        SetHomeAction(PlayerbotAI* ai) : MovementAction(ai, "home") {}
+        virtual bool Execute(Event event);
+    };
+}
diff --git a/src/plugins/playerbot/strategy/actions/StatsAction.cpp b/src/plugins/playerbot/strategy/actions/StatsAction.cpp
new file mode 100644
index 0000000..50f6669
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/StatsAction.cpp
@@ -0,0 +1,145 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "StatsAction.h"
+
+
+using namespace ai;
+
+bool StatsAction::Execute(Event event)
+{
+    ostringstream out;
+
+    ListGold(out);
+
+    out << ", ";
+    ListBagSlots(out);
+
+    out << ", ";
+    ListRepairCost(out);
+
+    if (bot->GetUInt32Value(PLAYER_NEXT_LEVEL_XP))
+    {
+        out << ", ";
+        ListXP(out);
+    }
+
+    ai->TellMaster(out);
+    return true;
+}
+
+void StatsAction::ListGold(ostringstream &out)
+{
+    out << chat->formatMoney(bot->GetMoney());
+}
+
+void StatsAction::ListBagSlots(ostringstream &out)
+{
+    uint32 totalused = 0, total = 16;
+    // list out items in main backpack
+    for (uint8 slot = INVENTORY_SLOT_ITEM_START; slot < INVENTORY_SLOT_ITEM_END; slot++)
+    {
+        const Item* const pItem = bot->GetItemByPos(INVENTORY_SLOT_BAG_0, slot);
+        if (pItem)
+            totalused++;
+    }
+    uint32 totalfree = 16 - totalused;
+    // list out items in other removable backpacks
+    for (uint8 bag = INVENTORY_SLOT_BAG_START; bag < INVENTORY_SLOT_BAG_END; ++bag)
+    {
+        const Bag* const pBag = (Bag*) bot->GetItemByPos(INVENTORY_SLOT_BAG_0, bag);
+        if (pBag)
+        {
+            ItemTemplate const* pBagProto = pBag->GetTemplate();
+            if (pBagProto->Class == ITEM_CLASS_CONTAINER && pBagProto->SubClass == ITEM_SUBCLASS_CONTAINER)
+            {
+                total += pBag->GetBagSize();
+                totalfree += pBag->GetFreeSlots();
+            }
+        }
+
+    }
+
+	string color = "ff00ff00";
+	if (totalfree < total / 2)
+		color = "ffffff00";
+	if (totalfree < total / 4)
+		color = "ffff0000";
+    out << "|h|c" << color << (total - totalfree) << "/" << total << "|h|cffffffff Bag";
+}
+
+void StatsAction::ListXP( ostringstream &out )
+{
+    uint32 curXP = bot->GetUInt32Value(PLAYER_XP);
+    uint32 nextLevelXP = bot->GetUInt32Value(PLAYER_NEXT_LEVEL_XP);
+    uint32 xpPercent = 0;
+    if (nextLevelXP)
+        xpPercent = 100 * curXP / nextLevelXP;
+
+    out << "|r|cff00ff00" << xpPercent << "|r|cffffd333%" << "|h|cffffffff XP";
+}
+
+void StatsAction::ListRepairCost(ostringstream &out)
+{
+    out << chat->formatMoney(EstRepairAll()) << " Repair";
+}
+
+uint32 StatsAction::EstRepairAll()
+{
+    uint32 TotalCost = 0;
+    // equipped, backpack, bags itself
+    for(int i = EQUIPMENT_SLOT_START; i < INVENTORY_SLOT_ITEM_END; ++i)
+        TotalCost += EstRepair(( (INVENTORY_SLOT_BAG_0 << 8) | i ));
+
+    // bank, buyback and keys not repaired
+
+    // items in inventory bags
+    for(int j = INVENTORY_SLOT_BAG_START; j < INVENTORY_SLOT_BAG_END; ++j)
+        for(int i = 0; i < MAX_BAG_SIZE; ++i)
+            TotalCost += EstRepair(( (j << 8) | i ));
+    return TotalCost;
+}
+
+uint32 StatsAction::EstRepair(uint16 pos)
+{
+    Item* item = bot->GetItemByPos(pos);
+
+    uint32 TotalCost = 0;
+    if(!item)
+        return TotalCost;
+
+    uint32 maxDurability = item->GetUInt32Value(ITEM_FIELD_MAXDURABILITY);
+    if(!maxDurability)
+        return TotalCost;
+
+    uint32 curDurability = item->GetUInt32Value(ITEM_FIELD_DURABILITY);
+
+    uint32 LostDurability = maxDurability - curDurability;
+    if(LostDurability>0)
+    {
+        ItemTemplate const *ditemProto = item->GetTemplate();
+
+        DurabilityCostsEntry const *dcost = sDurabilityCostsStore.LookupEntry(ditemProto->ItemLevel);
+        if(!dcost)
+        {
+            sLog->outMessage("playerbot", LOG_LEVEL_ERROR, "RepairDurability: Wrong item lvl %u", ditemProto->ItemLevel);
+            return TotalCost;
+        }
+
+        uint32 dQualitymodEntryId = (ditemProto->Quality+1)*2;
+        DurabilityQualityEntry const *dQualitymodEntry = sDurabilityQualityStore.LookupEntry(dQualitymodEntryId);
+        if(!dQualitymodEntry)
+        {
+            sLog->outMessage("playerbot", LOG_LEVEL_ERROR, "RepairDurability: Wrong dQualityModEntry %u", dQualitymodEntryId);
+            return TotalCost;
+        }
+
+        uint32 dmultiplier = dcost->multiplier[ItemSubClassToDurabilityMultiplierId(ditemProto->Class,ditemProto->SubClass)];
+        uint32 costs = uint32(LostDurability*dmultiplier*double(dQualitymodEntry->quality_mod));
+
+        if (costs==0)                                   //fix for ITEM_QUALITY_ARTIFACT
+            costs = 1;
+
+        TotalCost = costs;
+    }
+    return TotalCost;
+}
diff --git a/src/plugins/playerbot/strategy/actions/StatsAction.h b/src/plugins/playerbot/strategy/actions/StatsAction.h
new file mode 100644
index 0000000..e30558c
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/StatsAction.h
@@ -0,0 +1,22 @@
+#pragma once
+
+#include "../Action.h"
+
+namespace ai
+{
+    class StatsAction : public Action {
+    public:
+        StatsAction(PlayerbotAI* ai) : Action(ai, "stats") {}
+        virtual bool Execute(Event event);
+
+    private:
+        void ListBagSlots(ostringstream &out);
+        void ListXP(ostringstream &out);
+        void ListRepairCost(ostringstream &out);
+        void ListGold(ostringstream &out);
+        uint32 EstRepairAll();
+        uint32 EstRepair(uint16 pos);
+
+    };
+
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/actions/StayActions.cpp b/src/plugins/playerbot/strategy/actions/StayActions.cpp
new file mode 100644
index 0000000..32ebd0e
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/StayActions.cpp
@@ -0,0 +1,34 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "StayActions.h"
+#include "../values/LastMovementValue.h"
+
+using namespace ai;
+
+void StayActionBase::Stay()
+{
+    AI_VALUE(LastMovement&, "last movement").Set(NULL);
+
+    MotionMaster &mm = *bot->GetMotionMaster();
+    if (mm.GetCurrentMovementGeneratorType() == FLIGHT_MOTION_TYPE || bot->IsFlying())
+        return;
+
+    mm.Clear();
+    mm.MoveIdle();
+    bot->ClearUnitState( UNIT_STATE_ALL_STATE_SUPPORTED );
+
+    if (!bot->IsStandState())
+        bot->SetStandState(UNIT_STAND_STATE_STAND);
+}
+
+bool StayAction::Execute(Event event)
+{
+    Stay();
+
+    return true;
+}
+
+bool StayAction::isUseful()
+{
+    return !AI_VALUE2(bool, "moving", "self target");
+}
diff --git a/src/plugins/playerbot/strategy/actions/StayActions.h b/src/plugins/playerbot/strategy/actions/StayActions.h
new file mode 100644
index 0000000..ccbe2e3
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/StayActions.h
@@ -0,0 +1,23 @@
+#pragma once
+
+#include "../Action.h"
+#include "MovementActions.h"
+
+namespace ai
+{
+    class StayActionBase : public MovementAction {
+    public:
+        StayActionBase(PlayerbotAI* ai, string name) : MovementAction(ai, name) {}
+
+    protected:
+        void Stay();
+    };
+
+    class StayAction : public StayActionBase {
+    public:
+        StayAction(PlayerbotAI* ai) : StayActionBase(ai, "stay") {}
+        virtual bool Execute(Event event);
+        virtual bool isUseful();
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/actions/SuggestWhatToDoAction.cpp b/src/plugins/playerbot/strategy/actions/SuggestWhatToDoAction.cpp
new file mode 100644
index 0000000..3f46f77
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/SuggestWhatToDoAction.cpp
@@ -0,0 +1,255 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "SuggestWhatToDoAction.h"
+#include "../../../ahbot/AhBot.h"
+#include "../../PlayerbotAIConfig.h"
+
+using namespace ai;
+
+SuggestWhatToDoAction::SuggestWhatToDoAction(PlayerbotAI* ai) : InventoryAction(ai, "suggest what to do"), suggested(false)
+{
+    suggestions.push_back(&SuggestWhatToDoAction::instance);
+    suggestions.push_back(&SuggestWhatToDoAction::specificQuest);
+    suggestions.push_back(&SuggestWhatToDoAction::newQuest);
+    suggestions.push_back(&SuggestWhatToDoAction::grindMaterials);
+    suggestions.push_back(&SuggestWhatToDoAction::trade);
+    suggestions.push_back(&SuggestWhatToDoAction::grindReputation);
+    suggestions.push_back(&SuggestWhatToDoAction::nothing);
+    suggestions.push_back(&SuggestWhatToDoAction::relax);
+    suggestions.push_back(&SuggestWhatToDoAction::achievement);
+}
+
+bool SuggestWhatToDoAction::Execute(Event event)
+{
+    if (suggested)
+    {
+        trade();
+        return true;
+    }
+
+    if (bot->GetInstanceId() || suggested)
+        return false;
+
+    int index = rand() % suggestions.size();
+    (this->*suggestions[index])();
+
+    return suggested = true;
+}
+
+void SuggestWhatToDoAction::instance()
+{
+    uint32 level = bot->getLevel();
+    if (level > 15)
+    {
+        switch (urand(0, 5))
+        {
+        case 0:
+            spam("Need a tank for an instance run");
+            break;
+        case 1:
+            spam("Need a healer for an instance run");
+            break;
+        case 2:
+            spam("I would like to do an instance run. Would you like to join me?");
+            break;
+        case 3:
+            spam("Need better equipment. Why not do an instance run?");
+            break;
+        case 4:
+            spam("Have dungeon quests? Can join your group!");
+            break;
+        case 5:
+            spam("Have group quests? Invite me!");
+            break;
+        default:
+            spam("Hey, why not join Dungeon Finder?");
+        }
+    }
+}
+
+vector<uint32> SuggestWhatToDoAction::GetIncompletedQuests()
+{
+    vector<uint32> result;
+
+    for (uint16 slot = 0; slot < MAX_QUEST_LOG_SIZE; ++slot)
+    {
+        uint32 questId = bot->GetQuestSlotQuestId(slot);
+        if (!questId)
+            continue;
+
+        QuestStatus status = bot->GetQuestStatus(questId);
+        if (status == QUEST_STATUS_INCOMPLETE || status == QUEST_STATUS_NONE)
+            result.push_back(questId);
+    }
+
+    return result;
+}
+
+void SuggestWhatToDoAction::specificQuest()
+{
+    vector<uint32> quests = GetIncompletedQuests();
+    if (quests.empty())
+        return;
+
+    int index = rand() % quests.size();
+
+    Quest const* quest = sObjectMgr->GetQuestTemplate(quests[index]);
+    ostringstream out; out << "We could do some quest, for instance " << chat->formatQuest(quest);
+    spam(out.str());
+}
+
+void SuggestWhatToDoAction::newQuest()
+{
+    vector<uint32> quests = GetIncompletedQuests();
+    if (quests.size() < MAX_QUEST_LOG_SIZE - 5)
+        spam("I would like to pick up and do a new quest. Just invite me!");
+}
+
+void SuggestWhatToDoAction::grindMaterials()
+{
+    if (bot->getLevel() <= 5)
+        return;
+
+    switch (urand(0, 5))
+    {
+    case 0:
+        spam("Need help for tradeskill?");
+        break;
+    case 1:
+        spam("Can we have some trade material grinding?");
+        break;
+    case 2:
+        spam("I have some trade materials for sell");
+        break;
+    default:
+        spam("I am going to grind some trade materials. Would you like to join me?");
+    }
+}
+
+void SuggestWhatToDoAction::grindReputation()
+{
+    if (bot->getLevel() > 15)
+        ai->TellMasterNoFacing("I think we should do something to improve our reputation", PLAYERBOT_SECURITY_ALLOW_ALL);
+}
+
+void SuggestWhatToDoAction::nothing()
+{
+    ai->TellMasterNoFacing("I don't want to do anything", PLAYERBOT_SECURITY_ALLOW_ALL);
+}
+
+void SuggestWhatToDoAction::relax()
+{
+    ai->TellMasterNoFacing("It is so boring... We could relax a bit", PLAYERBOT_SECURITY_ALLOW_ALL);
+}
+
+void SuggestWhatToDoAction::achievement()
+{
+    if (bot->getLevel() > 15)
+        spam("I would like to get some achievement. Would you like to join me?");
+}
+
+class FindTradeItemsVisitor : public IterateItemsVisitor
+{
+public:
+    FindTradeItemsVisitor(uint32 quality) : quality(quality), IterateItemsVisitor() {}
+
+    virtual bool Visit(Item* item)
+    {
+        ItemTemplate const* proto = item->GetTemplate();
+        if (proto->Quality != quality)
+            return true;
+
+        if (proto->Class == ITEM_CLASS_TRADE_GOODS && proto->Bonding == NO_BIND)
+        {
+            if(proto->Quality == ITEM_QUALITY_NORMAL && item->GetCount() > 1 && item->GetCount() == item->GetMaxStackCount())
+                stacks.push_back(proto->ItemId);
+
+            items.push_back(proto->ItemId);
+            count[proto->ItemId] += item->GetCount();
+        }
+
+        return true;
+    }
+
+    map<uint32, int > count;
+    vector<uint32> stacks;
+    vector<uint32> items;
+
+private:
+    uint32 quality;
+};
+
+
+void SuggestWhatToDoAction::trade()
+{
+    if (!sRandomPlayerbotMgr.IsRandomBot(bot))
+        return;
+
+    uint32 quality = urand(0, 100);
+    if (quality > 90)
+        quality = ITEM_QUALITY_EPIC;
+    else if (quality >75)
+        quality = ITEM_QUALITY_RARE;
+    else if (quality > 50)
+        quality = ITEM_QUALITY_UNCOMMON;
+    else
+        quality = ITEM_QUALITY_NORMAL;
+
+    uint32 item = 0, count = 0;
+    while (quality-- > ITEM_QUALITY_POOR)
+    {
+        FindTradeItemsVisitor visitor(quality);
+        IterateItems(&visitor);
+        if (!visitor.stacks.empty())
+        {
+            int index = urand(0, visitor.stacks.size() - 1);
+            item = visitor.stacks[index];
+        }
+
+        if (!item)
+        {
+            if (!visitor.items.empty())
+            {
+                int index = urand(0, visitor.items.size() - 1);
+                item = visitor.items[index];
+            }
+        }
+
+        if (item)
+        {
+            count = visitor.count[item];
+            break;
+        }
+    }
+
+    if (!item || !count)
+        return;
+
+    ItemTemplate const* proto = sObjectMgr->GetItemTemplate(item);
+    if (!proto)
+        return;
+
+    uint32 price = auctionbot.GetSellPrice(proto) * sRandomPlayerbotMgr.GetSellMultiplier(bot) * count;
+    if (!price)
+        return;
+
+    ostringstream out; out << "Selling " << chat->formatItem(proto, count) << " for " << chat->formatMoney(price);
+    spam(out.str());
+}
+
+void SuggestWhatToDoAction::spam(string msg)
+{
+    Player* player = sRandomPlayerbotMgr.GetRandomPlayer();
+    if (!player || !player->IsInWorld())
+        return;
+
+    if (!ai->GetSecurity()->CheckLevelFor(PLAYERBOT_SECURITY_TALK, true, player))
+        return;
+
+    if (sPlayerbotAIConfig.whisperDistance && !bot->GetGroup() && sRandomPlayerbotMgr.IsRandomBot(bot) &&
+            player->GetSession()->GetSecurity() < SEC_GAMEMASTER &&
+            (bot->GetMapId() != player->GetMapId() || bot->GetDistance(player) > sPlayerbotAIConfig.whisperDistance))
+        return;
+
+    bot->Whisper(msg, LANG_UNIVERSAL, player);
+}
diff --git a/src/plugins/playerbot/strategy/actions/SuggestWhatToDoAction.h b/src/plugins/playerbot/strategy/actions/SuggestWhatToDoAction.h
new file mode 100644
index 0000000..750bb08
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/SuggestWhatToDoAction.h
@@ -0,0 +1,34 @@
+#pragma once
+
+#include "InventoryAction.h"
+
+namespace ai
+{
+    class SuggestWhatToDoAction : public InventoryAction
+    {
+    public:
+        SuggestWhatToDoAction(PlayerbotAI* ai);
+        virtual bool Execute(Event event);
+
+    private:
+        typedef void (SuggestWhatToDoAction::*Suggestion) ();
+        vector<Suggestion> suggestions;
+
+    private:
+        void instance();
+        void specificQuest();
+        void newQuest();
+        void grindMaterials();
+        void grindReputation();
+        void nothing();
+        void relax();
+        void achievement();
+        void trade();
+        void spam(string msg);
+
+        vector<uint32> GetIncompletedQuests();
+
+    private:
+        bool suggested;
+    };
+}
diff --git a/src/plugins/playerbot/strategy/actions/TalkToQuestGiverAction.cpp b/src/plugins/playerbot/strategy/actions/TalkToQuestGiverAction.cpp
new file mode 100644
index 0000000..747abb2
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/TalkToQuestGiverAction.cpp
@@ -0,0 +1,90 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "TalkToQuestGiverAction.h"
+
+
+using namespace ai;
+
+void TalkToQuestGiverAction::ProcessQuest(Quest const* quest, WorldObject* questGiver)
+{
+    std::ostringstream out; out << "Quest ";
+
+    QuestStatus status = bot->GetQuestStatus(quest->GetQuestId());
+    switch (status)
+    {
+    case QUEST_STATUS_COMPLETE:
+        TurnInQuest(quest, questGiver, out);
+        break;
+    case QUEST_STATUS_INCOMPLETE:
+        out << "|cffff0000Incompleted|r";
+        break;
+    case QUEST_STATUS_NONE:
+        out << "|cff00ff00Available|r";
+        break;
+    case QUEST_STATUS_FAILED:
+        out << "|cffff0000Failed|r";
+        break;
+    }
+
+    out << ": " << chat->formatQuest(quest);
+    ai->TellMaster(out);
+}
+
+void TalkToQuestGiverAction::TurnInQuest(Quest const* quest, WorldObject* questGiver, ostringstream& out)
+{
+    uint32 questID = quest->GetQuestId();
+
+    if (bot->GetQuestRewardStatus(questID))
+        return;
+
+    if (quest->GetRewChoiceItemsCount() == 0)
+        RewardNoItem(quest, questGiver, out);
+    else if (quest->GetRewChoiceItemsCount() == 1)
+        RewardSingleItem(quest, questGiver, out);
+    else {
+        AskToSelectReward(quest, out);
+    }
+}
+
+void TalkToQuestGiverAction::RewardNoItem(Quest const* quest, WorldObject* questGiver, ostringstream& out)
+{
+    if (bot->CanRewardQuest(quest, false))
+    {
+        bot->RewardQuest(quest, 0, questGiver, false);
+        out << "Completed";
+    }
+    else
+    {
+        out << "|cffff0000Unable to turn in|r";
+    }
+}
+
+void TalkToQuestGiverAction::RewardSingleItem(Quest const* quest, WorldObject* questGiver, ostringstream& out)
+{
+    int index = 0;
+    ItemTemplate const *item = sObjectMgr->GetItemTemplate(quest->RewardChoiceItemId[index]);
+    if (bot->CanRewardQuest(quest, index, false))
+    {
+        bot->RewardQuest(quest, index, questGiver, true);
+
+        out << "Rewarded " << chat->formatItem(item);
+    }
+    else
+    {
+        out << "|cffff0000Unable to turn in:|r, reward: " << chat->formatItem(item);
+    }
+}
+
+void TalkToQuestGiverAction::AskToSelectReward(Quest const* quest, ostringstream& out)
+{
+    ostringstream msg;
+    msg << "Choose reward: ";
+    for (uint8 i=0; i < quest->GetRewChoiceItemsCount(); ++i)
+    {
+        ItemTemplate const* item = sObjectMgr->GetItemTemplate(quest->RewardChoiceItemId[i]);
+        msg << chat->formatItem(item);
+    }
+    ai->TellMaster(msg);
+
+    out << "Reward pending";
+}
diff --git a/src/plugins/playerbot/strategy/actions/TalkToQuestGiverAction.h b/src/plugins/playerbot/strategy/actions/TalkToQuestGiverAction.h
new file mode 100644
index 0000000..374dc69
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/TalkToQuestGiverAction.h
@@ -0,0 +1,22 @@
+#pragma once
+
+#include "../Action.h"
+#include "QuestAction.h"
+
+namespace ai
+{
+    class TalkToQuestGiverAction : public QuestAction {
+    public:
+        TalkToQuestGiverAction(PlayerbotAI* ai) : QuestAction(ai, "talk to quest giver") {}
+
+    protected:
+        virtual void ProcessQuest(Quest const* quest, WorldObject* questGiver);
+
+    private:
+        void TurnInQuest(Quest const* quest, WorldObject* questGiver, ostringstream& out);
+        void RewardNoItem(Quest const* quest, WorldObject* questGiver, ostringstream& out);
+        void RewardSingleItem(Quest const* quest, WorldObject* questGiver, ostringstream& out);
+        void AskToSelectReward(Quest const* quest, ostringstream& out);
+    };
+
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/actions/TaxiAction.cpp b/src/plugins/playerbot/strategy/actions/TaxiAction.cpp
new file mode 100644
index 0000000..8037679
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/TaxiAction.cpp
@@ -0,0 +1,51 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "TaxiAction.h"
+#include "../values/LastMovementValue.h"
+
+using namespace ai;
+
+bool TaxiAction::Execute(Event event)
+{
+    ai->RemoveShapeshift();
+
+    LastMovement& movement = context->GetValue<LastMovement&>("last movement")->Get();
+
+    WorldPacket& p = event.getPacket();
+	if (!p.empty() && p.GetOpcode() == CMSG_MOVE_SPLINE_DONE)
+    {
+        WorldPacket p1(p);
+        p1.rpos(0);
+        bot->GetSession()->HandleMoveSplineDoneOpcode(p1);
+        movement.taxiNodes.clear();
+        movement.Set(NULL);
+        return true;
+    }
+
+    list<ObjectGuid> units = *context->GetValue<list<ObjectGuid> >("nearest npcs");
+    for (list<ObjectGuid>::iterator i = units.begin(); i != units.end(); i++)
+    {
+        Creature *npc = bot->GetNPCIfCanInteractWith(*i, UNIT_NPC_FLAG_FLIGHTMASTER);
+        if (!npc)
+            continue;
+
+        if (movement.taxiNodes.empty())
+        {
+            ostringstream out;
+            out << "I will order the taxi from " << npc->GetName() << ". Please start flying, then instruct me again";
+            ai->TellMaster(out);
+            return true;
+        }
+
+        if (!bot->ActivateTaxiPathTo(movement.taxiNodes, npc))
+        {
+            ai->TellMaster("I can't fly with you");
+            return false;
+        }
+
+        return true;
+    }
+
+    ai->TellMaster("Cannot find any flightmaster to talk");
+    return false;
+}
diff --git a/src/plugins/playerbot/strategy/actions/TaxiAction.h b/src/plugins/playerbot/strategy/actions/TaxiAction.h
new file mode 100644
index 0000000..84bbe4d
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/TaxiAction.h
@@ -0,0 +1,13 @@
+#pragma once
+
+namespace ai
+{
+	class TaxiAction : public Action {
+	public:
+		TaxiAction(PlayerbotAI* ai) : Action(ai, "taxi") {}
+
+    public:
+        virtual bool Execute(Event event);
+    };
+
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/actions/TeleportAction.cpp b/src/plugins/playerbot/strategy/actions/TeleportAction.cpp
new file mode 100644
index 0000000..ef82a7a
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/TeleportAction.cpp
@@ -0,0 +1,54 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "TeleportAction.h"
+#include "../values/LastMovementValue.h"
+
+using namespace ai;
+
+bool TeleportAction::Execute(Event event)
+{
+    list<ObjectGuid> gos = *context->GetValue<list<ObjectGuid> >("nearest game objects");
+    for (list<ObjectGuid>::iterator i = gos.begin(); i != gos.end(); i++)
+    {
+        GameObject* go = ai->GetGameObject(*i);
+        if (!go)
+            continue;
+
+        GameObjectTemplate const *goInfo = go->GetGOInfo();
+        if (goInfo->type != GAMEOBJECT_TYPE_SPELLCASTER)
+            continue;
+
+        uint32 spellId = goInfo->spellcaster.spellId;
+        const SpellInfo* const pSpellInfo = sSpellMgr->GetSpellInfo(spellId);
+        if (pSpellInfo->Effects[0].Effect != SPELL_EFFECT_TELEPORT_UNITS && pSpellInfo->Effects[1].Effect != SPELL_EFFECT_TELEPORT_UNITS && pSpellInfo->Effects[2].Effect != SPELL_EFFECT_TELEPORT_UNITS)
+            continue;
+
+        ostringstream out; out << "Teleporting using " << goInfo->name;
+        ai->TellMasterNoFacing(out.str());
+
+        ai->ChangeStrategy("-follow,+stay", BOT_STATE_NON_COMBAT);
+
+        Spell *spell = new Spell(bot, pSpellInfo, TRIGGERED_NONE);
+        SpellCastTargets targets;
+        targets.SetUnitTarget(bot);
+        spell->prepare(&targets);
+        spell->cast(true);
+        return true;
+    }
+
+
+    LastMovement& movement = context->GetValue<LastMovement&>("last movement")->Get();
+    if (movement.lastAreaTrigger)
+    {
+        WorldPacket p(CMSG_AREATRIGGER);
+        p << movement.lastAreaTrigger;
+        p.rpos(0);
+
+        bot->GetSession()->HandleAreaTriggerOpcode(p);
+        movement.lastAreaTrigger = 0;
+        return true;
+    }
+
+    ai->TellMaster("Cannot find any portal to teleport");
+    return false;
+}
diff --git a/src/plugins/playerbot/strategy/actions/TeleportAction.h b/src/plugins/playerbot/strategy/actions/TeleportAction.h
new file mode 100644
index 0000000..96b5973
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/TeleportAction.h
@@ -0,0 +1,16 @@
+#pragma once
+
+#include "../Action.h"
+#include "MovementActions.h"
+
+namespace ai
+{
+	class TeleportAction : public Action {
+	public:
+		TeleportAction(PlayerbotAI* ai) : Action(ai, "teleport") {}
+
+    public:
+        virtual bool Execute(Event event);
+    };
+
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/actions/TellCastFailedAction.cpp b/src/plugins/playerbot/strategy/actions/TellCastFailedAction.cpp
new file mode 100644
index 0000000..2469816
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/TellCastFailedAction.cpp
@@ -0,0 +1,75 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "TellCastFailedAction.h"
+
+
+using namespace ai;
+
+bool TellCastFailedAction::Execute(Event event)
+{
+    WorldPacket p(event.getPacket());
+    p.rpos(0);
+    uint8 castCount, result;
+    uint32 spellId;
+    p >> castCount >> spellId >> result;
+    ai->SpellInterrupted(spellId);
+
+    if (result == SPELL_CAST_OK)
+        return false;
+
+    const SpellInfo *const pSpellInfo =  sSpellMgr->GetSpellInfo(spellId);
+    ostringstream out; out << chat->formatSpell(pSpellInfo) << ": ";
+    switch (result)
+    {
+    case SPELL_FAILED_NOT_READY:
+        out << "not ready";
+        break;
+    case SPELL_FAILED_REQUIRES_SPELL_FOCUS:
+        out << "requires spell focus";
+        break;
+    case SPELL_FAILED_REQUIRES_AREA:
+        out << "cannot cast here";
+        break;
+    case SPELL_FAILED_TOTEMS:
+    case SPELL_FAILED_TOTEM_CATEGORY:
+        out << "requires totem";
+        break;
+    case SPELL_FAILED_EQUIPPED_ITEM_CLASS:
+        out << "requires item";
+        break;
+    case SPELL_FAILED_EQUIPPED_ITEM_CLASS_MAINHAND:
+    case SPELL_FAILED_EQUIPPED_ITEM_CLASS_OFFHAND:
+        out << "requires weapon";
+        break;
+    case SPELL_FAILED_PREVENTED_BY_MECHANIC:
+        out << "interrupted";
+        break;
+    default:
+        out << "cannot cast";
+    }
+    Spell *spell = new Spell(bot, pSpellInfo, TRIGGERED_NONE);
+    int32 castTime = spell->GetCastTime();
+    delete spell;
+
+    if (castTime >= 2000)
+        ai->TellMasterNoFacing(out.str());
+
+    return true;
+}
+
+
+bool TellSpellAction::Execute(Event event)
+{
+    string spell = event.getParam();
+    uint32 spellId = AI_VALUE2(uint32, "spell id", spell);
+    if (!spellId)
+        return false;
+
+    SpellInfo const *spellInfo = sSpellMgr->GetSpellInfo(spellId );
+    if (!spellInfo)
+        return false;
+
+    ostringstream out; out << chat->formatSpell(spellInfo);
+    ai->TellMaster(out);
+    return true;
+}
diff --git a/src/plugins/playerbot/strategy/actions/TellCastFailedAction.h b/src/plugins/playerbot/strategy/actions/TellCastFailedAction.h
new file mode 100644
index 0000000..e454596
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/TellCastFailedAction.h
@@ -0,0 +1,22 @@
+#pragma once
+
+#include "../Action.h"
+
+namespace ai
+{
+    class TellSpellAction : public Action
+    {
+    public:
+        TellSpellAction(PlayerbotAI* ai) : Action(ai, "spell") {}
+
+        virtual bool Execute(Event event);
+    };
+
+    class TellCastFailedAction : public Action 
+    {
+    public:
+        TellCastFailedAction(PlayerbotAI* ai) : Action(ai, "tell cast failed") {}
+
+        virtual bool Execute(Event event);
+    };
+}
diff --git a/src/plugins/playerbot/strategy/actions/TellItemCountAction.cpp b/src/plugins/playerbot/strategy/actions/TellItemCountAction.cpp
new file mode 100644
index 0000000..fdbe0d3
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/TellItemCountAction.cpp
@@ -0,0 +1,16 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "TellItemCountAction.h"
+#include "../values/ItemCountValue.h"
+
+using namespace ai;
+
+bool TellItemCountAction::Execute(Event event)
+{
+    string text = event.getParam();
+    list<Item*> found = parseItems(text);
+    for (list<Item*>::iterator i = found.begin(); i != found.end(); i++)
+        TellItem((*i)->GetTemplate(), (*i)->GetCount());
+
+    return true;
+}
diff --git a/src/plugins/playerbot/strategy/actions/TellItemCountAction.h b/src/plugins/playerbot/strategy/actions/TellItemCountAction.h
new file mode 100644
index 0000000..093b0e0
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/TellItemCountAction.h
@@ -0,0 +1,14 @@
+#pragma once
+
+#include "../Action.h"
+#include "InventoryAction.h"
+
+namespace ai
+{
+    class TellItemCountAction : public InventoryAction {
+    public:
+        TellItemCountAction(PlayerbotAI* ai) : InventoryAction(ai, "c") {}
+        virtual bool Execute(Event event);
+    };
+
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/actions/TellLosAction.cpp b/src/plugins/playerbot/strategy/actions/TellLosAction.cpp
new file mode 100644
index 0000000..02227f9
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/TellLosAction.cpp
@@ -0,0 +1,61 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "TellLosAction.h"
+
+
+using namespace ai;
+
+bool TellLosAction::Execute(Event event)
+{
+    string param = event.getParam();
+
+    if (param.empty() || param == "targets")
+    {
+        list<ObjectGuid> targets = *context->GetValue<list<ObjectGuid> >("possible targets");
+        ListUnits("--- Targets ---", targets);
+    }
+
+    if (param.empty() || param == "npcs")
+    {
+        list<ObjectGuid> npcs = *context->GetValue<list<ObjectGuid> >("nearest npcs");
+        ListUnits("--- NPCs ---", npcs);
+    }
+
+    if (param.empty() || param == "corpses")
+    {
+        list<ObjectGuid> corpses = *context->GetValue<list<ObjectGuid> >("nearest corpses");
+        ListUnits("--- Corpses ---", corpses);
+    }
+
+    if (param.empty() || param == "gos" || param == "game objects")
+    {
+        list<ObjectGuid> gos = *context->GetValue<list<ObjectGuid> >("nearest game objects");
+        ListGameObjects("--- Game objects ---", gos);
+    }
+
+    return true;
+}
+
+void TellLosAction::ListUnits(string title, list<ObjectGuid> units)
+{
+    ai->TellMaster(title);
+
+    for (list<ObjectGuid>::iterator i = units.begin(); i != units.end(); i++)
+    {
+        Unit* unit = ai->GetUnit(*i);
+        if (unit)
+            ai->TellMaster(unit->GetName());
+    }
+
+}
+void TellLosAction::ListGameObjects(string title, list<ObjectGuid> gos)
+{
+    ai->TellMaster(title);
+
+    for (list<ObjectGuid>::iterator i = gos.begin(); i != gos.end(); i++)
+    {
+        GameObject* go = ai->GetGameObject(*i);
+        if (go)
+            ai->TellMaster(chat->formatGameobject(go));
+    }
+}
diff --git a/src/plugins/playerbot/strategy/actions/TellLosAction.h b/src/plugins/playerbot/strategy/actions/TellLosAction.h
new file mode 100644
index 0000000..15d83fb
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/TellLosAction.h
@@ -0,0 +1,17 @@
+#pragma once
+
+#include "../Action.h"
+
+namespace ai
+{
+    class TellLosAction : public Action {
+    public:
+        TellLosAction(PlayerbotAI* ai) : Action(ai, "los") {}
+        virtual bool Execute(Event event);
+
+    private:
+        void ListUnits(string title, list<ObjectGuid> units);
+        void ListGameObjects(string title, list<ObjectGuid> gos);
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/actions/TellMasterAction.h b/src/plugins/playerbot/strategy/actions/TellMasterAction.h
new file mode 100644
index 0000000..4174708
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/TellMasterAction.h
@@ -0,0 +1,38 @@
+#pragma once
+
+#include "../Action.h"
+
+namespace ai
+{
+    class TellMasterAction : public Action {
+    public:
+        TellMasterAction(PlayerbotAI* ai, string text) : Action(ai, "tell master"), text(text) {}
+
+        virtual bool Execute(Event event)
+        {
+            ai->TellMaster(text);
+            return true;
+        }
+
+    private:
+        string text;
+    };
+
+    class OutOfReactRangeAction : public MovementAction {
+    public:
+        OutOfReactRangeAction(PlayerbotAI* ai) : MovementAction(ai, "tell out of react range") {}
+
+        virtual bool Execute(Event event)
+        {
+            bool canFollow = Follow(AI_VALUE(Unit*, "master target"));
+            if (!canFollow)
+            {
+                ai->SetNextCheckDelay(5000);
+                return false;
+            }
+
+            ai->TellMaster("Wait for me!");
+            return true;
+        }
+   };
+}
diff --git a/src/plugins/playerbot/strategy/actions/TellReputationAction.cpp b/src/plugins/playerbot/strategy/actions/TellReputationAction.cpp
new file mode 100644
index 0000000..f1bd104
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/TellReputationAction.cpp
@@ -0,0 +1,68 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "TellReputationAction.h"
+#include "../../../Reputation/ReputationMgr.h"
+
+
+using namespace ai;
+
+bool TellReputationAction::Execute(Event event)
+{
+    Player* master = GetMaster();
+    if (!master)
+        return false;
+
+    Unit* unit = master->GetSelectedUnit();
+    if (!unit)
+        return false;
+
+    const FactionTemplateEntry *factionTemplate = unit->GetFactionTemplateEntry();
+    uint32 faction = factionTemplate->faction;
+    const FactionEntry* entry = sFactionStore.LookupEntry(faction);
+    int32 reputation = bot->GetReputationMgr().GetReputation(faction);
+
+    ostringstream out;
+    out << entry->name[0] << ": ";
+    out << "|cff";
+    ReputationRank rank = bot->GetReputationMgr().GetRank(entry);
+    switch (rank) {
+        case REP_HATED:
+            out << "cc2222hated";
+            break;
+        case REP_HOSTILE:
+            out << "ff0000hostile";
+            break;
+        case REP_UNFRIENDLY:
+            out << "ee6622unfriendly";
+            break;
+        case REP_NEUTRAL:
+            out << "ffff00neutral";
+            break;
+        case REP_FRIENDLY:
+            out << "00ff00friendly";
+            break;
+        case REP_HONORED:
+            out << "00ff88honored";
+            break;
+        case REP_REVERED:
+            out << "00ffccrevered";
+            break;
+        case REP_EXALTED:
+            out << "00ffffexalted";
+            break;
+        default:
+            out << "808080unknown";
+            break;
+    }
+
+    out << "|cffffffff";
+
+    int32 base = ReputationMgr::Reputation_Cap + 1;
+    for (int i = MAX_REPUTATION_RANK - 1; i >= rank; --i)
+        base -= ReputationMgr::PointsInRank[i];
+
+    out << " (" << (reputation - base) << "/" << ReputationMgr::PointsInRank[rank] << ")";
+    ai->TellMaster(out);
+
+    return true;
+}
diff --git a/src/plugins/playerbot/strategy/actions/TellReputationAction.h b/src/plugins/playerbot/strategy/actions/TellReputationAction.h
new file mode 100644
index 0000000..449e67f
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/TellReputationAction.h
@@ -0,0 +1,16 @@
+#pragma once
+
+#include "../Action.h"
+
+namespace ai
+{
+    class TellReputationAction : public Action {
+    public:
+        TellReputationAction(PlayerbotAI* ai) : Action(ai, "reputation") {}
+        virtual bool Execute(Event event);
+
+    private:
+
+    };
+
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/actions/TellTargetAction.cpp b/src/plugins/playerbot/strategy/actions/TellTargetAction.cpp
new file mode 100644
index 0000000..a302772
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/TellTargetAction.cpp
@@ -0,0 +1,53 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "TellTargetAction.h"
+
+
+using namespace ai;
+
+bool TellTargetAction::Execute(Event event)
+{
+    Unit* target = context->GetValue<Unit*>("current target")->Get();
+    if (target)
+    {
+        ostringstream out;
+		out << "Attacking " << target->GetName();
+        ai->TellMaster(out);
+
+        context->GetValue<Unit*>("old target")->Set(target);
+    }
+    return true;
+}
+
+bool TellAttackersAction::Execute(Event event)
+{
+    ai->TellMaster("--- Attackers ---");
+
+    list<ObjectGuid> attackers = context->GetValue<list<ObjectGuid> >("attackers")->Get();
+    for (list<ObjectGuid>::iterator i = attackers.begin(); i != attackers.end(); i++)
+    {
+        Unit* unit = ai->GetUnit(*i);
+        if (!unit || !unit->IsAlive())
+            continue;
+
+        ai->TellMaster(unit->GetName());
+    }
+
+    ai->TellMaster("--- Threat ---");
+    HostileReference *ref = bot->getHostileRefManager().getFirst();
+    if (!ref)
+        return true;
+
+    while( ref )
+    {
+        ThreatManager *threatManager = ref->GetSource();
+        Unit *unit = threatManager->GetOwner();
+        float threat = ref->getThreat();
+
+        ostringstream out; out << unit->GetName() << " (" << threat << ")";
+        ai->TellMaster(out);
+
+        ref = ref->next();
+    }
+    return true;
+}
diff --git a/src/plugins/playerbot/strategy/actions/TellTargetAction.h b/src/plugins/playerbot/strategy/actions/TellTargetAction.h
new file mode 100644
index 0000000..7995100
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/TellTargetAction.h
@@ -0,0 +1,21 @@
+#pragma once
+
+#include "../Action.h"
+
+namespace ai
+{
+    class TellTargetAction : public Action
+    {
+    public:
+        TellTargetAction(PlayerbotAI* ai) : Action(ai, "tell target") {}
+        virtual bool Execute(Event event);
+    };
+
+    class TellAttackersAction : public Action
+    {
+    public:
+        TellAttackersAction(PlayerbotAI* ai) : Action(ai, "tell attackers") {}
+        virtual bool Execute(Event event);
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/actions/TradeAction.cpp b/src/plugins/playerbot/strategy/actions/TradeAction.cpp
new file mode 100644
index 0000000..62f1c45
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/TradeAction.cpp
@@ -0,0 +1,83 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "TradeAction.h"
+#include "../ItemVisitors.h"
+#include "../values/ItemCountValue.h"
+
+using namespace ai;
+
+bool TradeAction::Execute(Event event)
+{
+    string text = event.getParam();
+    uint32 copper = chat->parseMoney(text);
+    if (copper > 0)
+    {
+        WorldPacket* const packet = new WorldPacket(CMSG_SET_TRADE_GOLD, 4);
+        *packet << copper;
+        bot->GetSession()->QueuePacket(packet);
+    }
+
+    int8 slot = -1;
+
+    list<Item*> found = parseItems(text);
+    if (found.empty())
+        return false;
+
+    for (list<Item*>::iterator i = found.begin(); i != found.end(); i++)
+        TradeItem(**i, slot);
+
+    return true;
+}
+
+bool TradeAction::TradeItem(const Item& item, int8 slot)
+{
+    if (!bot->GetTrader() || item.IsInTrade())
+        return false;
+
+    if (!item.CanBeTraded() && slot != TRADE_SLOT_NONTRADED)
+        slot = TRADE_SLOT_NONTRADED;
+
+    int8 tradeSlot = -1;
+    Item* itemPtr = const_cast<Item*>(&item);
+
+    TradeData* pTrade = bot->GetTradeData();
+    if ((slot >= 0 && slot < TRADE_SLOT_COUNT) && pTrade->GetItem(TradeSlots(slot)) == NULL)
+        tradeSlot = slot;
+
+    if (slot == TRADE_SLOT_NONTRADED)
+        pTrade->SetItem(TRADE_SLOT_NONTRADED, itemPtr);
+    else
+    {
+        for (uint8 i = 0; i < TRADE_SLOT_TRADED_COUNT && tradeSlot == -1; i++)
+        {
+            if (pTrade->GetItem(TradeSlots(i)) == itemPtr)
+            {
+                tradeSlot = i;
+
+                WorldPacket* const packet = new WorldPacket(CMSG_CLEAR_TRADE_ITEM, 1);
+                *packet << (uint8) tradeSlot;
+                bot->GetSession()->QueuePacket(packet);
+                pTrade->SetItem(TradeSlots(i), NULL);
+                return true;
+            }
+        }
+
+        for (uint8 i = 0; i < TRADE_SLOT_TRADED_COUNT && tradeSlot == -1; i++)
+        {
+            if (pTrade->GetItem(TradeSlots(i)) == NULL)
+            {
+                pTrade->SetItem(TradeSlots(i), itemPtr);
+                tradeSlot = i;
+            }
+        }
+    }
+
+    if (tradeSlot == -1) return false;
+
+    WorldPacket* const packet = new WorldPacket(CMSG_SET_TRADE_ITEM, 3);
+    *packet << (uint8) tradeSlot << (uint8) item.GetBagSlot()
+        << (uint8) item.GetSlot();
+    bot->GetSession()->QueuePacket(packet);
+    return true;
+}
+
diff --git a/src/plugins/playerbot/strategy/actions/TradeAction.h b/src/plugins/playerbot/strategy/actions/TradeAction.h
new file mode 100644
index 0000000..050a583
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/TradeAction.h
@@ -0,0 +1,19 @@
+#pragma once
+
+#include "../Action.h"
+#include "InventoryAction.h"
+
+namespace ai
+{
+    class TradeAction : public InventoryAction {
+    public:
+        TradeAction(PlayerbotAI* ai) : InventoryAction(ai, "trade") {}
+        virtual bool Execute(Event event);
+
+    private:
+        bool TradeItem(const Item& item, int8 slot);
+
+        static map<string, uint32> slots;
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/actions/TradeStatusAction.cpp b/src/plugins/playerbot/strategy/actions/TradeStatusAction.cpp
new file mode 100644
index 0000000..df30a5c
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/TradeStatusAction.cpp
@@ -0,0 +1,216 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "TradeStatusAction.h"
+
+#include "../ItemVisitors.h"
+#include "../../PlayerbotAIConfig.h"
+#include "../../../ahbot/AhBot.h"
+#include "../../RandomPlayerbotMgr.h"
+#include "../../GuildTaskMgr.h"
+#include "../values/ItemUsageValue.h"
+
+using namespace ai;
+
+
+
+bool TradeStatusAction::Execute(Event event)
+{
+    Player* trader = bot->GetTrader();
+    Player* master = GetMaster();
+    if (!trader)
+        return false;
+
+    if (trader != master)
+    {
+		bot->Whisper("I'm kind of busy now", LANG_UNIVERSAL, trader);
+    }
+
+    if (trader != master || !ai->GetSecurity()->CheckLevelFor(PLAYERBOT_SECURITY_ALLOW_ALL, true, master))
+    {
+        WorldPacket p;
+        uint32 status = 0;
+        p << status;
+        bot->GetSession()->HandleCancelTradeOpcode(p);
+        return false;
+    }
+
+    WorldPacket p(event.getPacket());
+    p.rpos(0);
+    uint32 status;
+    p >> status;
+
+    if (status == TRADE_STATUS_TRADE_ACCEPT)
+    {
+        WorldPacket p;
+        uint32 status = 0;
+        p << status;
+
+        if (CheckTrade())
+        {
+            int32 botMoney = CalculateCost(bot->GetTradeData(), true);
+
+            map<uint32, uint32> itemIds;
+            for (uint32 slot = 0; slot < TRADE_SLOT_TRADED_COUNT; ++slot)
+            {
+                Item* item = master->GetTradeData()->GetItem((TradeSlots)slot);
+                if (item)
+                    itemIds[item->GetTemplate()->ItemId] += item->GetCount();
+            }
+
+            bot->GetSession()->HandleAcceptTradeOpcode(p);
+            if (bot->GetTradeData())
+                return false;
+
+            for (map<uint32, uint32>::iterator i = itemIds.begin(); i != itemIds.end(); ++i)
+                sGuildTaskMgr.CheckItemTask(i->first, i->second, master, bot);
+
+            if (sRandomPlayerbotMgr.IsRandomBot(bot))
+            {
+                int32 lootAmount = sRandomPlayerbotMgr.GetLootAmount(bot);
+                sRandomPlayerbotMgr.SetLootAmount(bot, max(0, lootAmount - botMoney * 10));
+            }
+            return true;
+        }
+    }
+    else if (status == TRADE_STATUS_BEGIN_TRADE)
+    {
+        if (!bot->isInFront(trader, M_PI / 2))
+            bot->SetFacingToObject(trader);
+        BeginTrade();
+        return true;
+    }
+
+    return false;
+}
+
+
+void TradeStatusAction::BeginTrade()
+{
+    WorldPacket p;
+    bot->GetSession()->HandleBeginTradeOpcode(p);
+
+    ListItemsVisitor visitor;
+    IterateItems(&visitor);
+
+    ai->TellMaster("=== Trade ===");
+    TellItems(visitor.items);
+
+    if (sRandomPlayerbotMgr.IsRandomBot(bot))
+    {
+        uint32 discount = sRandomPlayerbotMgr.GetTradeDiscount(bot);
+        if (discount)
+        {
+            ostringstream out; out << "Discount up to: " << chat->formatMoney(discount);
+            ai->TellMaster(out);
+        }
+    }
+}
+
+bool TradeStatusAction::CheckTrade()
+{
+    if (!sRandomPlayerbotMgr.IsRandomBot(bot))
+        return true;
+
+    Player* master = GetMaster();
+    if (!bot->GetTradeData() || !master->GetTradeData())
+        return false;
+
+    for (uint32 slot = 0; slot < TRADE_SLOT_TRADED_COUNT; ++slot)
+    {
+        Item* item = bot->GetTradeData()->GetItem((TradeSlots)slot);
+        if (item && !auctionbot.GetSellPrice(item->GetTemplate()))
+        {
+            ostringstream out;
+            out << chat->formatItem(item->GetTemplate()) << " - This is not for sale";
+            ai->TellMaster(out);
+            return false;
+        }
+
+        item = master->GetTradeData()->GetItem((TradeSlots)slot);
+        if (item)
+        {
+            ostringstream out; out << item->GetTemplate()->ItemId;
+            ItemUsage usage = AI_VALUE2(ItemUsage, "item usage", out.str());
+            if (!auctionbot.GetBuyPrice(item->GetTemplate()) || usage == ITEM_USAGE_NONE)
+            {
+                ostringstream out;
+                out << chat->formatItem(item->GetTemplate()) << " - I don't need this";
+                ai->TellMaster(out);
+                return false;
+            }
+        }
+    }
+
+    int32 botItemsMoney = CalculateCost(bot->GetTradeData(), true);
+    int32 botMoney = bot->GetTradeData()->GetMoney() + botItemsMoney;
+    int32 playerItemsMoney = CalculateCost(master->GetTradeData(), false);
+    int32 playerMoney = master->GetTradeData()->GetMoney() + playerItemsMoney;
+
+    if (!botMoney && !playerMoney)
+        return true;
+
+    if (!botItemsMoney && !playerItemsMoney)
+    {
+        ai->TellMaster("There are no items to trade");
+        return false;
+    }
+
+    int32 discount = min(botItemsMoney, (int32)sRandomPlayerbotMgr.GetTradeDiscount(bot));
+    botMoney = max(0, botMoney - discount);
+
+    if (playerMoney >= botMoney)
+    {
+        switch (urand(0, 4)) {
+        case 0:
+            ai->TellMaster("A pleasure doing business with you");
+            break;
+        case 1:
+            ai->TellMaster("Fair trade");
+            break;
+        case 2:
+            ai->TellMaster("Thanks");
+            break;
+        case 3:
+            ai->TellMaster("Off with you");
+            break;
+        }
+        return true;
+    }
+
+    ostringstream out;
+    out << "I want " << chat->formatMoney(botMoney - playerMoney) << " for this";
+    ai->TellMaster(out);
+    return false;
+}
+
+int32 TradeStatusAction::CalculateCost(TradeData* data, bool sell)
+{
+    if (!data)
+        return 0;
+
+    uint32 sum = 0;
+    for (uint32 slot = 0; slot < TRADE_SLOT_TRADED_COUNT; ++slot)
+    {
+        Item* item = data->GetItem((TradeSlots)slot);
+        if (!item)
+            continue;
+
+        ItemTemplate const* proto = item->GetTemplate();
+        if (!proto)
+            continue;
+
+        if (proto->Quality < ITEM_QUALITY_NORMAL)
+            return 0;
+
+        if (sell)
+        {
+            sum += item->GetCount() * auctionbot.GetSellPrice(proto) * sRandomPlayerbotMgr.GetSellMultiplier(bot);
+        }
+        else
+        {
+            sum += item->GetCount() * auctionbot.GetBuyPrice(proto) * sRandomPlayerbotMgr.GetBuyMultiplier(bot);
+        }
+    }
+
+    return sum;
+}
diff --git a/src/plugins/playerbot/strategy/actions/TradeStatusAction.h b/src/plugins/playerbot/strategy/actions/TradeStatusAction.h
new file mode 100644
index 0000000..7500a64
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/TradeStatusAction.h
@@ -0,0 +1,20 @@
+#pragma once
+
+#include "../Action.h"
+#include "InventoryAction.h"
+#include "QueryItemUsageAction.h"
+
+namespace ai
+{
+    class TradeStatusAction : public QueryItemUsageAction
+    {
+    public:
+        TradeStatusAction(PlayerbotAI* ai) : QueryItemUsageAction(ai, "accept trade") {}
+        virtual bool Execute(Event event);
+
+    private:
+        void BeginTrade();
+        bool CheckTrade();
+        int32 CalculateCost(TradeData* data, bool sell);
+    };
+}
diff --git a/src/plugins/playerbot/strategy/actions/TrainerAction.cpp b/src/plugins/playerbot/strategy/actions/TrainerAction.cpp
new file mode 100644
index 0000000..e261a2b
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/TrainerAction.cpp
@@ -0,0 +1,114 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "TrainerAction.h"
+
+using namespace ai;
+
+void TrainerAction::Learn(uint32 cost, TrainerSpell const* tSpell, ostringstream& msg)
+{
+    if (bot->GetMoney() < cost)
+        return;
+
+    bot->ModifyMoney(-int32(cost));
+    if (tSpell->IsCastable())
+        bot->CastSpell(bot, tSpell->spell, true);
+    else
+        bot->LearnSpell(tSpell->learnedSpell[0], false, false);
+
+    msg << " - learned";
+}
+
+void TrainerAction::List(Creature* creature, TrainerSpellAction action, SpellIds& spells)
+{
+    TellHeader(creature);
+
+    TrainerSpellData const* trainer_spells = creature->GetTrainerSpells();
+    float fDiscountMod =  bot->GetReputationPriceDiscount(creature);
+    uint32 totalCost = 0;
+
+    for (TrainerSpellMap::const_iterator itr =  trainer_spells->spellList.begin(); itr !=  trainer_spells->spellList.end(); ++itr)
+    {
+        TrainerSpell const* tSpell = &itr->second;
+
+        if (!tSpell)
+            continue;
+
+        if (!tSpell->learnedSpell && !bot->IsSpellFitByClassAndRace(tSpell->learnedSpell[0]))
+            continue;
+
+        TrainerSpellState state = bot->GetTrainerSpellState(tSpell);
+        if (state != TRAINER_SPELL_GREEN)
+            continue;
+
+        uint32 spellId = tSpell->spell;
+        const SpellInfo *const pSpellInfo =  sSpellMgr->GetSpellInfo(spellId);
+        if (!pSpellInfo)
+            continue;
+
+        uint32 cost = uint32(floor(tSpell->spellCost *  fDiscountMod));
+        totalCost += cost;
+
+        ostringstream out;
+        out << chat->formatSpell(pSpellInfo) << chat->formatMoney(cost);
+
+        if (action && (spells.empty() || spells.find(tSpell->spell) != spells.end() || spells.find(tSpell->learnedSpell[0]) != spells.end()))
+            (this->*action)(cost, tSpell, out);
+
+        ai->TellMaster(out);
+    }
+
+    TellFooter(totalCost);
+}
+
+
+bool TrainerAction::Execute(Event event)
+{
+    string text = event.getParam();
+
+    Player* master = GetMaster();
+    if (!master)
+        return false;
+
+    Unit* target = master->GetSelectedUnit();
+    if (!target)
+        return false;
+
+    Creature *creature = ai->GetCreature(target->GetGUID());
+    if (!creature)
+        return false;
+
+    // check present spell in trainer spell list
+    TrainerSpellData const* cSpells = creature->GetTrainerSpells();
+    if (!cSpells)
+    {
+        ai->TellMaster("No spells can be learned from this trainer");
+        return false;
+    }
+
+    uint32 spell = chat->parseSpell(text);
+    SpellIds spells;
+    if (spell)
+        spells.insert(spell);
+
+    if (text == "learn")
+        List(creature, &TrainerAction::Learn, spells);
+    else
+        List(creature, NULL, spells);
+
+    return true;
+}
+
+void TrainerAction::TellHeader(Creature* creature)
+{
+    ostringstream out; out << "--- can learn from " << creature->GetName() << " ---";
+    ai->TellMaster(out);
+}
+
+void TrainerAction::TellFooter(uint32 totalCost)
+{
+    if (totalCost)
+    {
+        ostringstream out; out << "Total cost: " << chat->formatMoney(totalCost);
+        ai->TellMaster(out);
+    }
+}
diff --git a/src/plugins/playerbot/strategy/actions/TrainerAction.h b/src/plugins/playerbot/strategy/actions/TrainerAction.h
new file mode 100644
index 0000000..3dbe18f
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/TrainerAction.h
@@ -0,0 +1,22 @@
+#pragma once
+
+#include "../Action.h"
+
+namespace ai
+{
+	class TrainerAction : public Action {
+	public:
+		TrainerAction(PlayerbotAI* ai) : Action(ai, "trainer") {}
+
+    public:
+        virtual bool Execute(Event event);
+
+    private:
+        typedef void (TrainerAction::*TrainerSpellAction)(uint32, TrainerSpell const*, ostringstream& msg);
+        void List(Creature* creature, TrainerSpellAction action, SpellIds& spells);
+        void Learn(uint32 cost, TrainerSpell const* tSpell, ostringstream& msg);
+        void TellHeader(Creature* creature);
+        void TellFooter(uint32 totalCost);
+    };
+
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/actions/UnequipAction.cpp b/src/plugins/playerbot/strategy/actions/UnequipAction.cpp
new file mode 100644
index 0000000..cf70f80
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/UnequipAction.cpp
@@ -0,0 +1,45 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "UnequipAction.h"
+
+#include "../values/ItemCountValue.h"
+
+using namespace ai;
+
+bool UnequipAction::Execute(Event event)
+{
+    string text = event.getParam();
+
+    ItemIds ids = chat->parseItems(text);
+    for (ItemIds::iterator i =ids.begin(); i != ids.end(); i++)
+    {
+        FindItemByIdVisitor visitor(*i);
+        UnequipItem(&visitor);
+    }
+
+    return true;
+}
+
+
+void UnequipAction::UnequipItem(FindItemVisitor* visitor)
+{
+    IterateItems(visitor, ITERATE_ALL_ITEMS);
+    list<Item*> items = visitor->GetResult();
+	if (!items.empty()) UnequipItem(**items.begin());
+}
+
+void UnequipAction::UnequipItem(Item& item)
+{
+    uint8 bagIndex = item.GetBagSlot();
+    uint8 slot = item.GetSlot();
+    uint8 dstBag = NULL_BAG;
+
+
+    WorldPacket* const packet = new WorldPacket(CMSG_AUTOSTORE_BAG_ITEM, 3);
+    *packet << bagIndex << slot << dstBag;
+    bot->GetSession()->QueuePacket(packet);
+
+    ostringstream out; out << chat->formatItem(item.GetTemplate()) << " unequipped";
+    ai->TellMaster(out);
+}
+
diff --git a/src/plugins/playerbot/strategy/actions/UnequipAction.h b/src/plugins/playerbot/strategy/actions/UnequipAction.h
new file mode 100644
index 0000000..fdf7ebb
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/UnequipAction.h
@@ -0,0 +1,18 @@
+#pragma once
+
+#include "../Action.h"
+#include "InventoryAction.h"
+
+namespace ai
+{
+    class UnequipAction : public InventoryAction {
+    public:
+        UnequipAction(PlayerbotAI* ai) : InventoryAction(ai, "unequip") {}
+        virtual bool Execute(Event event);
+
+    private:
+        void UnequipItem(Item& item);
+        void UnequipItem(FindItemVisitor* visitor);
+    };
+
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/actions/UseItemAction.cpp b/src/plugins/playerbot/strategy/actions/UseItemAction.cpp
new file mode 100644
index 0000000..1ec05bc
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/UseItemAction.cpp
@@ -0,0 +1,302 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "UseItemAction.h"
+
+using namespace ai;
+
+bool UseItemAction::Execute(Event event)
+{
+    string name = event.getParam();
+    if (name.empty())
+        name = getName();
+
+    list<Item*> items = AI_VALUE2(list<Item*>, "inventory items", name);
+    list<ObjectGuid> gos = chat->parseGameobjects(name);
+
+    if (gos.empty())
+    {
+        if (items.size() > 1)
+        {
+            list<Item*>::iterator i = items.begin();
+            Item* itemTarget = *i++;
+            Item* item = *i;
+            return UseItemOnItem(item, itemTarget);
+        }
+        else if (!items.empty())
+            return UseItemAuto(*items.begin());
+    }
+    else
+    {
+        if (items.empty())
+            return UseGameObject(*gos.begin());
+        else
+            return UseItemOnGameObject(*items.begin(), *gos.begin());
+    }
+
+    ai->TellMaster("No items (or game objects) available");
+    return false;
+}
+
+bool UseItemAction::UseGameObject(ObjectGuid guid)
+{
+    GameObject* go = ai->GetGameObject(guid);
+    if (!go || !go->isSpawned())
+        return false;
+
+    go->Use(bot);
+    ostringstream out; out << "Using " << chat->formatGameobject(go);
+    ai->TellMasterNoFacing(out.str());
+    return true;
+}
+
+bool UseItemAction::UseItemAuto(Item* item)
+{
+    return UseItem(item, ObjectGuid(), NULL);
+}
+
+bool UseItemAction::UseItemOnGameObject(Item* item, ObjectGuid go)
+{
+    return UseItem(item, go, NULL);
+}
+
+bool UseItemAction::UseItemOnItem(Item* item, Item* itemTarget)
+{
+    return UseItem(item, ObjectGuid(), itemTarget);
+}
+
+bool UseItemAction::UseItem(Item* item, ObjectGuid goGuid, Item* itemTarget)
+{
+    if (bot->CanUseItem(item) != EQUIP_ERR_OK)
+        return false;
+
+    if (bot->IsNonMeleeSpellCast(true))
+        return false;
+
+    if (bot->IsInCombat() && item->IsPotion() && bot->GetLastPotionId())
+        return false;
+
+    uint8 bagIndex = item->GetBagSlot();
+    uint8 slot = item->GetSlot();
+    uint8 cast_count = 1;
+    uint64 item_guid = item->GetGUID();
+    uint32 glyphIndex = 0;
+    uint8 unk_flags = 0;
+
+    WorldPacket* const packet = new WorldPacket(CMSG_USE_ITEM, 1 + 1 + 1 + 4 + 8 + 4 + 1 + 8 + 1);
+    *packet << bagIndex << slot << cast_count << uint32(0) << item_guid
+        << glyphIndex << unk_flags;
+
+    bool targetSelected = false;
+    ostringstream out; out << "Using " << chat->formatItem(item->GetTemplate());
+    if (item->GetTemplate()->Stackable)
+    {
+        uint32 count = item->GetCount();
+        if (count > 1)
+            out << " (" << count << " available) ";
+        else
+            out << " (the last one!)";
+    }
+
+    if (goGuid)
+    {
+        GameObject* go = ai->GetGameObject(goGuid);
+        if (go && go->isSpawned())
+        {
+            uint32 targetFlag = TARGET_FLAG_UNIT_ENEMY;
+            *packet << targetFlag;
+            packet->appendPackGUID(goGuid.GetRawValue());
+            out << " on " << chat->formatGameobject(go);
+            targetSelected = true;
+        }
+    }
+
+    if (itemTarget)
+    {
+        if (item->GetTemplate()->Class == ITEM_CLASS_GEM)
+        {
+            bool fit = SocketItem(itemTarget, item) || SocketItem(itemTarget, item, true);
+            if (!fit)
+                ai->TellMaster("Socket does not fit");
+            return fit;
+        }
+        else
+        {
+            uint32 targetFlag = TARGET_FLAG_ITEM;
+            *packet << targetFlag;
+            packet->appendPackGUID(itemTarget->GetGUID());
+            out << " on " << chat->formatItem(itemTarget->GetTemplate());
+            targetSelected = true;
+        }
+    }
+
+    Player* master = GetMaster();
+    if (!targetSelected && item->GetTemplate()->Class != ITEM_CLASS_CONSUMABLE && master)
+    {
+        Unit* masterSelection = master->GetSelectedUnit();
+        if (masterSelection)
+        {
+            uint32 targetFlag = TARGET_FLAG_UNIT;
+            *packet << targetFlag;
+            packet->appendPackGUID(masterSelection->GetGUID());
+            out << " on " << masterSelection->GetName();
+            targetSelected = true;
+        }
+    }
+
+    if(uint32 questid = item->GetTemplate()->StartQuest)
+    {
+        Quest const* qInfo = sObjectMgr->GetQuestTemplate(questid);
+        if (qInfo)
+        {
+            WorldPacket* const packet = new WorldPacket(CMSG_QUESTGIVER_ACCEPT_QUEST, 8+4+4);
+            *packet << item_guid;
+            *packet << questid;
+            *packet << uint32(0);
+            bot->GetSession()->QueuePacket(packet); // queue the packet to get around race condition
+            ostringstream out; out << "Got quest " << chat->formatQuest(qInfo);
+            ai->TellMasterNoFacing(out.str());
+            return true;
+        }
+    }
+
+    MotionMaster &mm = *bot->GetMotionMaster();
+    mm.Clear();
+    bot->ClearUnitState( UNIT_STATE_CHASE );
+    bot->ClearUnitState( UNIT_STATE_FOLLOW );
+
+    if (bot->isMoving())
+        return false;
+
+    for (int i=0; i<MAX_ITEM_PROTO_SPELLS; i++)
+    {
+        uint32 spellId = item->GetTemplate()->Spells[i].SpellId;
+        if (!spellId)
+            continue;
+
+        if (!ai->CanCastSpell(spellId, bot, false))
+            continue;
+
+        const SpellInfo* const pSpellInfo = sSpellMgr->GetSpellInfo(spellId);
+        if (pSpellInfo->Targets & TARGET_FLAG_ITEM)
+        {
+            Item* itemForSpell = AI_VALUE2(Item*, "item for spell", spellId);
+            if (!itemForSpell)
+                continue;
+
+            if (itemForSpell->GetEnchantmentId(TEMP_ENCHANTMENT_SLOT))
+                continue;
+
+            if (bot->GetTrader())
+            {
+                if (selfOnly)
+                    return false;
+
+                *packet << TARGET_FLAG_TRADE_ITEM << (uint8)1 << (uint64)TRADE_SLOT_NONTRADED;
+                targetSelected = true;
+                out << " on traded item";
+            }
+            else
+            {
+                *packet << TARGET_FLAG_ITEM;
+                packet->appendPackGUID(itemForSpell->GetGUID());
+                targetSelected = true;
+                out << " on "<< chat->formatItem(itemForSpell->GetTemplate());
+            }
+
+            Spell *spell = new Spell(bot, pSpellInfo, TRIGGERED_NONE, ObjectGuid::Empty, true);
+            ai->WaitForSpellCast(spell);
+            delete spell;
+        }
+        else
+        {
+            *packet << TARGET_FLAG_NONE;
+            targetSelected = true;
+            out << " on self";
+        }
+        break;
+    }
+
+    if (!targetSelected)
+        return false;
+
+    if (item->GetTemplate()->Class == ITEM_CLASS_CONSUMABLE && item->GetTemplate()->SubClass == ITEM_SUBCLASS_FOOD)
+    {
+        if (bot->IsInCombat())
+            return false;
+
+        ai->InterruptSpell();
+        ai->SetNextCheckDelay(30000);
+    }
+
+    ai->TellMasterNoFacing(out.str());
+    bot->GetSession()->QueuePacket(packet);
+    return true;
+}
+
+bool UseItemAction::SocketItem(Item* item, Item* gem, bool replace)
+{
+    WorldPacket* const packet = new WorldPacket(CMSG_SOCKET_GEMS);
+    *packet << item->GetGUID();
+
+    bool fits = false;
+    for (uint32 enchant_slot = SOCK_ENCHANTMENT_SLOT; enchant_slot < SOCK_ENCHANTMENT_SLOT + MAX_GEM_SOCKETS; ++enchant_slot)
+    {
+        uint8 SocketColor = item->GetTemplate()->Socket[enchant_slot-SOCK_ENCHANTMENT_SLOT].Color;
+        GemPropertiesEntry const* gemProperty = sGemPropertiesStore.LookupEntry(gem->GetTemplate()->GemProperties);
+        if (gemProperty && (gemProperty->color & SocketColor))
+        {
+            if (fits)
+            {
+                *packet << ObjectGuid();
+                continue;
+            }
+
+            uint32 enchant_id = item->GetEnchantmentId(EnchantmentSlot(enchant_slot));
+            if (!enchant_id)
+            {
+                *packet << gem->GetGUID();
+                fits = true;
+                continue;
+            }
+
+            SpellItemEnchantmentEntry const* enchantEntry = sSpellItemEnchantmentStore.LookupEntry(enchant_id);
+            if (!enchantEntry || !enchantEntry->GemID)
+            {
+                *packet << gem->GetGUID();
+                fits = true;
+                continue;
+            }
+
+			if (replace && enchantEntry->GemID != gem->GetTemplate()->ItemId)
+            {
+                *packet << gem->GetGUID();
+                fits = true;
+                continue;
+            }
+
+        }
+
+        *packet << ObjectGuid();
+    }
+
+    if (fits)
+    {
+        ostringstream out; out << "Socketing " << chat->formatItem(item->GetTemplate());
+        out << " with "<< chat->formatItem(gem->GetTemplate());
+        ai->TellMasterNoFacing(out.str());
+
+        bot->GetSession()->QueuePacket(packet);
+    }
+    return fits;
+}
+
+
+bool UseItemAction::isPossible()
+{
+    return getName() == "use" || AI_VALUE2(uint8, "item count", getName()) > 0;
+}
+
+bool UseSpellItemAction::isUseful()
+{
+    return AI_VALUE2(bool, "spell cast useful", getName());
+}
diff --git a/src/plugins/playerbot/strategy/actions/UseItemAction.h b/src/plugins/playerbot/strategy/actions/UseItemAction.h
new file mode 100644
index 0000000..ef65561
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/UseItemAction.h
@@ -0,0 +1,47 @@
+#pragma once
+
+#include "../Action.h"
+
+namespace ai
+{
+	class UseItemAction : public Action {
+	public:
+		UseItemAction(PlayerbotAI* ai, string name = "use", bool selfOnly = false) : Action(ai, name), selfOnly(selfOnly) {}
+
+    public:
+        virtual bool Execute(Event event);
+        virtual bool isPossible();
+
+    private:
+        bool UseItemAuto(Item* item);
+        bool UseItemOnGameObject(Item* item, ObjectGuid go);
+        bool UseItemOnItem(Item* item, Item* itemTarget);
+        bool UseItem(Item* item, ObjectGuid go, Item* itemTarget);
+        bool UseGameObject(ObjectGuid guid);
+        bool SocketItem(Item* item, Item* gem, bool replace = false);
+
+    private:
+        bool selfOnly;
+    };
+
+    class UseSpellItemAction : public UseItemAction {
+    public:
+        UseSpellItemAction(PlayerbotAI* ai, string name, bool selfOnly = false) : UseItemAction(ai, name, selfOnly) {}
+
+    public:
+        virtual bool isUseful();
+    };
+
+    class UseHealingPotion : public UseItemAction {
+    public:
+        UseHealingPotion(PlayerbotAI* ai) : UseItemAction(ai, "healing potion") {}
+        virtual bool isUseful() { return AI_VALUE2(bool, "combat", "self target"); }
+    };
+
+    class UseManaPotion : public UseItemAction
+    {
+    public:
+        UseManaPotion(PlayerbotAI* ai) : UseItemAction(ai, "mana potion") {}
+        virtual bool isUseful() { return AI_VALUE2(bool, "combat", "self target"); }
+    };
+}
diff --git a/src/plugins/playerbot/strategy/actions/UseMeetingStoneAction.cpp b/src/plugins/playerbot/strategy/actions/UseMeetingStoneAction.cpp
new file mode 100644
index 0000000..f7d959c
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/UseMeetingStoneAction.cpp
@@ -0,0 +1,86 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "UseMeetingStoneAction.h"
+#include "../../PlayerbotAIConfig.h"
+
+bool UseMeetingStoneAction::Execute(Event event)
+{
+    Player* master = GetMaster();
+    if (!master)
+        return false;
+
+    WorldPacket p(event.getPacket());
+    p.rpos(0);
+    ObjectGuid guid;
+    p >> guid;
+
+    if (master->GetSelectedPlayer() && master->GetSelectedPlayer() != bot)
+        return false;
+
+    if (!master->GetSelectedPlayer() && master->GetGroup() != bot->GetGroup())
+        return false;
+
+    if (master->IsBeingTeleported())
+        return false;
+
+    if (bot->IsInCombat())
+    {
+        ai->TellMasterNoFacing("I am in combat");
+        return false;
+    }
+
+    Map* map = master->GetMap();
+    if (!map)
+        return NULL;
+
+    GameObject *gameObject = map->GetGameObject(guid);
+    if (!gameObject)
+        return false;
+
+    const GameObjectTemplate* goInfo = gameObject->GetGOInfo();
+    if (!goInfo || goInfo->type != GAMEOBJECT_TYPE_SUMMONING_RITUAL)
+        return false;
+
+    return Teleport();
+}
+
+
+bool SummonAction::Execute(Event event)
+{
+    Player* master = GetMaster();
+    if (!master)
+        return false;
+
+    if (master->GetSession()->GetSecurity() < SEC_GAMEMASTER)
+    {
+        ai->TellMasterNoFacing("You cannot summon me");
+        return false;
+    }
+
+    return Teleport();
+}
+
+bool SummonAction::Teleport()
+{
+    Player* master = GetMaster();
+    if (!master->IsBeingTeleported())
+    {
+        float followAngle = GetFollowAngle();
+        for (float angle = followAngle - M_PI; angle <= followAngle + M_PI; angle += M_PI / 4)
+        {
+            uint32 mapId = master->GetMapId();
+            float x = master->GetPositionX() + cos(angle) * sPlayerbotAIConfig.followDistance;
+            float y = master->GetPositionY()+ sin(angle) * sPlayerbotAIConfig.followDistance;
+            float z = master->GetPositionZ();
+            if (master->IsWithinLOS(x, y, z))
+            {
+                bot->GetMotionMaster()->Clear();
+                bot->TeleportTo(mapId, x, y, z, 0);
+                return true;
+            }
+        }
+    }
+
+    ai->TellMasterNoFacing("There is not enough place to summon me");
+    return false;
+}
diff --git a/src/plugins/playerbot/strategy/actions/UseMeetingStoneAction.h b/src/plugins/playerbot/strategy/actions/UseMeetingStoneAction.h
new file mode 100644
index 0000000..e787d24
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/UseMeetingStoneAction.h
@@ -0,0 +1,26 @@
+#pragma once
+
+#include "../Action.h"
+#include "MovementActions.h"
+
+namespace ai
+{
+    class SummonAction : public MovementAction
+    {
+    public:
+        SummonAction(PlayerbotAI* ai, string name = "summon") : MovementAction(ai, name) {}
+
+        virtual bool Execute(Event event);
+
+    protected:
+        bool Teleport();
+    };
+
+    class UseMeetingStoneAction : public SummonAction
+    {
+    public:
+        UseMeetingStoneAction(PlayerbotAI* ai) : SummonAction(ai, "use meeting stone") {}
+
+        virtual bool Execute(Event event);
+    };
+}
diff --git a/src/plugins/playerbot/strategy/actions/WhoAction.cpp b/src/plugins/playerbot/strategy/actions/WhoAction.cpp
new file mode 100644
index 0000000..9dd7f95
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/WhoAction.cpp
@@ -0,0 +1,160 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "WhoAction.h"
+#include "../../AiFactory.h"
+#include "../ItemVisitors.h"
+#include "../../../ahbot/AhBot.h"
+#include "../../RandomPlayerbotMgr.h"
+
+using namespace ai;
+
+map<uint32, string> WhoAction::skills;
+
+#ifndef WIN32
+inline int strcmpi(const char* s1, const char* s2)
+{
+    for (; *s1 && *s2 && (toupper(*s1) == toupper(*s2)); ++s1, ++s2);
+    return *s1 - *s2;
+}
+#endif
+
+bool WhoAction::Execute(Event event)
+{
+    Player* owner = event.getOwner();
+    if (!owner)
+        return false;
+
+    string tell = "";
+    string text = event.getParam();
+    if (!text.empty())
+    {
+        if (!sRandomPlayerbotMgr.IsRandomBot(bot))
+            return false;
+
+        tell = QuerySkill(text);
+        if (tell.empty())
+        {
+            tell = QueryTrade(text);
+        }
+    }
+    else
+    {
+        tell = QuerySpec(text);
+    }
+
+    if (tell.empty())
+        return false;
+
+    // ignore random bot chat filter
+	bot->Whisper(tell, LANG_UNIVERSAL, owner);
+    return true;
+}
+
+
+string WhoAction::QueryTrade(string text)
+{
+    ostringstream out;
+
+    list<Item*> items = InventoryAction::parseItems(text);
+    for (list<Item*>::iterator i = items.begin(); i != items.end(); ++i)
+    {
+        Item* sell = *i;
+        int32 sellPrice = auctionbot.GetSellPrice(sell->GetTemplate()) * sRandomPlayerbotMgr.GetSellMultiplier(bot) * sell->GetCount();
+        if (!sellPrice)
+            continue;
+
+        out << "Selling " << chat->formatItem(sell->GetTemplate(), sell->GetCount()) << " for " << chat->formatMoney(sellPrice);
+        return out.str();
+    }
+
+    return "";
+}
+
+string WhoAction::QuerySkill(string text)
+{
+    ostringstream out;
+    InitSkills();
+
+    for (map<uint32, string>::iterator i = skills.begin(); i != skills.end(); ++i)
+    {
+        string name = i->second;
+        uint16 skill = i->first;
+        if (!strcmpi(text.c_str(), name.c_str()) && bot->HasSkill(skill))
+        {
+            string skillName = i->second;
+            uint32 spellId = AI_VALUE2(uint32, "spell id", skillName);
+            uint16 value = bot->GetSkillValue(skill);
+            uint16 maxSkill = bot->GetMaxSkillValue(skill);
+            ObjectGuid guid = bot->GetGUID();
+            string data = "0";
+            out << "|cFFFFFF00|Htrade:" << spellId << ":" << value << ":" << maxSkill << ":"
+                    << std::hex << std::uppercase << guid.GetRawValue()
+                    << std::nouppercase << std::dec << ":" << data
+                    << "|h[" << skills[skill] << "]|h|r"
+                    << " |h|cff00ff00" << value << "|h|cffffffff/"
+                    << "|h|cff00ff00" << maxSkill << "|h|cffffffff ";
+        }
+    }
+
+    return out.str();
+}
+
+string WhoAction::QuerySpec(string text)
+{
+    ostringstream out;
+
+    int spec = AiFactory::GetPlayerSpecTab(bot);
+    out << "|h|cffffffff" << chat->formatClass(bot, spec);
+    out << " (|h|cff00ff00" << (uint32)bot->getLevel() << "|h|cffffffff lvl), ";
+    out << "|h|cff00ff00" << ai->GetEquipGearScore(bot, false, false) << "|h|cffffffff GS (";
+
+    ItemCountByQuality visitor;
+    IterateItems(&visitor, ITERATE_ITEMS_IN_EQUIP);
+
+    bool needSlash = false;
+    if (visitor.count[ITEM_QUALITY_EPIC])
+    {
+        out << "|h|cffff00ff" << visitor.count[ITEM_QUALITY_EPIC] << "|h|cffffffff";
+        needSlash = true;
+    }
+
+    if (visitor.count[ITEM_QUALITY_RARE])
+    {
+        if (needSlash) out << "/";
+        out << "|h|cff8080ff" << visitor.count[ITEM_QUALITY_RARE] << "|h|cffffffff";
+        needSlash = true;
+    }
+
+    if (visitor.count[ITEM_QUALITY_UNCOMMON])
+    {
+        if (needSlash) out << "/";
+        out << "|h|cff00ff00" << visitor.count[ITEM_QUALITY_UNCOMMON] << "|h|cffffffff";
+        needSlash = true;
+    }
+
+    out << ")";
+
+    return out.str();
+}
+
+
+void WhoAction::InitSkills()
+{
+    if (!skills.empty())
+        return;
+
+    skills[SKILL_ALCHEMY] = "Alchemy";
+    skills[SKILL_ENCHANTING] = "Enchanting";
+    skills[SKILL_SKINNING] = "Skinning";
+    skills[SKILL_JEWELCRAFTING] = "Jewelcrafting";
+    skills[SKILL_INSCRIPTION] = "Inscription";
+    skills[SKILL_TAILORING] = "Tailoring";
+    skills[SKILL_LEATHERWORKING] = "Leatherworking";
+    skills[SKILL_ENGINEERING] = "Engineering";
+    skills[SKILL_HERBALISM] = "Herbalism";
+    skills[SKILL_MINING] = "Mining";
+    skills[SKILL_BLACKSMITHING] = "Blacksmithing";
+    skills[SKILL_COOKING] = "Cooking";
+    skills[SKILL_FIRST_AID] = "First Aid";
+    skills[SKILL_FISHING] = "Fishing";
+}
diff --git a/src/plugins/playerbot/strategy/actions/WhoAction.h b/src/plugins/playerbot/strategy/actions/WhoAction.h
new file mode 100644
index 0000000..92ed834
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/WhoAction.h
@@ -0,0 +1,23 @@
+#pragma once
+
+#include "../Action.h"
+#include "InventoryAction.h"
+
+namespace ai
+{
+    class WhoAction : public InventoryAction {
+    public:
+        WhoAction(PlayerbotAI* ai) : InventoryAction(ai, "who") {}
+
+    public:
+        virtual bool Execute(Event event);
+        static map<uint32, string> skills;
+
+    private:
+        void InitSkills();
+        string QueryTrade(string text);
+        string QuerySkill(string text);
+        string QuerySpec(string text);
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/actions/WorldPacketActionContext.h b/src/plugins/playerbot/strategy/actions/WorldPacketActionContext.h
new file mode 100644
index 0000000..268f2d6
--- /dev/null
+++ b/src/plugins/playerbot/strategy/actions/WorldPacketActionContext.h
@@ -0,0 +1,108 @@
+#pragma once
+
+#include "AcceptInvitationAction.h"
+#include "PassLeadershipToMasterAction.h"
+#include "TellMasterAction.h"
+#include "TalkToQuestGiverAction.h"
+#include "AcceptQuestAction.h"
+#include "LootRollAction.h"
+#include "ReviveFromCorpseAction.h"
+#include "AcceptResurrectAction.h"
+#include "UseMeetingStoneAction.h"
+#include "AreaTriggerAction.h"
+#include "CheckMountStateAction.h"
+#include "RememberTaxiAction.h"
+#include "TradeStatusAction.h"
+#include "InventoryChangeFailureAction.h"
+#include "LootAction.h"
+#include "QuestAction.h"
+#include "LeaveGroupAction.h"
+#include "TellCastFailedAction.h"
+#include "AcceptDuelAction.h"
+#include "ReadyCheckAction.h"
+#include "LfgActions.h"
+#include "SecurityCheckAction.h"
+#include "GuildAcceptAction.h"
+
+namespace ai
+{
+    class WorldPacketActionContext : public NamedObjectContext<Action>
+    {
+    public:
+        WorldPacketActionContext()
+        {
+            creators["accept invitation"] = &WorldPacketActionContext::accept_invitation;
+            creators["leader"] = &WorldPacketActionContext::pass_leadership_to_master;
+            creators["tell not enough money"] = &WorldPacketActionContext::tell_not_enough_money;
+            creators["tell not enough reputation"] = &WorldPacketActionContext::tell_not_enough_reputation;
+            creators["tell cannot equip"] = &WorldPacketActionContext::tell_cannot_equip;
+            creators["talk to quest giver"] = &WorldPacketActionContext::turn_in_quest;
+            creators["accept quest"] = &WorldPacketActionContext::accept_quest;
+            creators["accept all quests"] = &WorldPacketActionContext::accept_all_quests;
+            creators["accept quest share"] = &WorldPacketActionContext::accept_quest_share;
+            creators["loot roll"] = &WorldPacketActionContext::loot_roll;
+            creators["revive from corpse"] = &WorldPacketActionContext::revive_from_corpse;
+            creators["accept resurrect"] = &WorldPacketActionContext::accept_resurrect;
+            creators["use meeting stone"] = &WorldPacketActionContext::use_meeting_stone;
+            creators["area trigger"] = &WorldPacketActionContext::area_trigger;
+            creators["reach area trigger"] = &WorldPacketActionContext::reach_area_trigger;
+            creators["check mount state"] = &WorldPacketActionContext::check_mount_state;
+            creators["remember taxi"] = &WorldPacketActionContext::remember_taxi;
+            creators["accept trade"] = &WorldPacketActionContext::accept_trade;
+            creators["store loot"] = &WorldPacketActionContext::store_loot;
+            creators["tell out of react range"] = &WorldPacketActionContext::tell_out_of_react_range;
+            creators["quest objective completed"] = &WorldPacketActionContext::quest_objective_completed;
+            creators["party command"] = &WorldPacketActionContext::party_command;
+            creators["tell cast failed"] = &WorldPacketActionContext::tell_cast_failed;
+            creators["accept duel"] = &WorldPacketActionContext::accept_duel;
+            creators["ready check"] = &WorldPacketActionContext::ready_check;
+            creators["ready check finished"] = &WorldPacketActionContext::ready_check_finished;
+            creators["uninvite"] = &WorldPacketActionContext::uninvite;
+            creators["lfg join"] = &WorldPacketActionContext::lfg_join;
+            creators["lfg accept"] = &WorldPacketActionContext::lfg_accept;
+            creators["lfg role check"] = &WorldPacketActionContext::lfg_role_check;
+            creators["lfg leave"] = &WorldPacketActionContext::lfg_leave;
+            creators["lfg teleport"] = &WorldPacketActionContext::lfg_teleport;
+            creators["security check"] = &WorldPacketActionContext::security_check;
+            creators["guild accept"] = &WorldPacketActionContext::guild_accept;
+        }
+
+    private:
+        static Action* guild_accept(PlayerbotAI* ai) { return new GuildAcceptAction(ai); }
+        static Action* security_check(PlayerbotAI* ai) { return new SecurityCheckAction(ai); }
+        static Action* lfg_teleport(PlayerbotAI* ai) { return new LfgTeleportAction(ai); }
+        static Action* lfg_leave(PlayerbotAI* ai) { return new LfgLeaveAction(ai); }
+        static Action* lfg_accept(PlayerbotAI* ai) { return new LfgAcceptAction(ai); }
+        static Action* lfg_role_check(PlayerbotAI* ai) { return new LfgRoleCheckAction(ai); }
+        static Action* lfg_join(PlayerbotAI* ai) { return new LfgJoinAction(ai); }
+        static Action* uninvite(PlayerbotAI* ai) { return new UninviteAction(ai); }
+        static Action* ready_check_finished(PlayerbotAI* ai) { return new FinishReadyCheckAction(ai); }
+        static Action* ready_check(PlayerbotAI* ai) { return new ReadyCheckAction(ai); }
+        static Action* accept_duel(PlayerbotAI* ai) { return new AcceptDuelAction(ai); }
+        static Action* tell_cast_failed(PlayerbotAI* ai) { return new TellCastFailedAction(ai); }
+        static Action* party_command(PlayerbotAI* ai) { return new PartyCommandAction(ai); }
+        static Action* quest_objective_completed(PlayerbotAI* ai) { return new QuestObjectiveCompletedAction(ai); }
+        static Action* store_loot(PlayerbotAI* ai) { return new StoreLootAction(ai); }
+        static Action* tell_out_of_react_range(PlayerbotAI* ai) { return new OutOfReactRangeAction(ai); }
+        static Action* accept_trade(PlayerbotAI* ai) { return new TradeStatusAction(ai); }
+        static Action* remember_taxi(PlayerbotAI* ai) { return new RememberTaxiAction(ai); }
+        static Action* check_mount_state(PlayerbotAI* ai) { return new CheckMountStateAction(ai); }
+        static Action* area_trigger(PlayerbotAI* ai) { return new AreaTriggerAction(ai); }
+        static Action* reach_area_trigger(PlayerbotAI* ai) { return new ReachAreaTriggerAction(ai); }
+        static Action* use_meeting_stone(PlayerbotAI* ai) { return new UseMeetingStoneAction(ai); }
+        static Action* accept_resurrect(PlayerbotAI* ai) { return new AcceptResurrectAction(ai); }
+        static Action* revive_from_corpse(PlayerbotAI* ai) { return new ReviveFromCorpseAction(ai); }
+        static Action* accept_invitation(PlayerbotAI* ai) { return new AcceptInvitationAction(ai); }
+        static Action* pass_leadership_to_master(PlayerbotAI* ai) { return new PassLeadershipToMasterAction(ai); }
+        static Action* tell_not_enough_money(PlayerbotAI* ai) { return new TellMasterAction(ai, "Not enough money"); }
+        static Action* tell_not_enough_reputation(PlayerbotAI* ai) { return new TellMasterAction(ai, "Not enough reputation"); }
+        static Action* tell_cannot_equip(PlayerbotAI* ai) { return new InventoryChangeFailureAction(ai); }
+        static Action* turn_in_quest(PlayerbotAI* ai) { return new TalkToQuestGiverAction(ai); }
+        static Action* accept_quest(PlayerbotAI* ai) { return new AcceptQuestAction(ai); }
+        static Action* accept_all_quests(PlayerbotAI* ai) { return new AcceptAllQuestsAction(ai); }
+        static Action* accept_quest_share(PlayerbotAI* ai) { return new AcceptQuestShareAction(ai); }
+        static Action* loot_roll(PlayerbotAI* ai) { return (QueryItemUsageAction*)new LootRollAction(ai); }
+    };
+
+
+};
diff --git a/src/plugins/playerbot/strategy/druid/BearTankDruidStrategy.cpp b/src/plugins/playerbot/strategy/druid/BearTankDruidStrategy.cpp
new file mode 100644
index 0000000..18ae75a
--- /dev/null
+++ b/src/plugins/playerbot/strategy/druid/BearTankDruidStrategy.cpp
@@ -0,0 +1,171 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "DruidMultipliers.h"
+#include "BearTankDruidStrategy.h"
+
+using namespace ai;
+
+class BearTankDruidStrategyActionNodeFactory : public NamedObjectFactory<ActionNode>
+{
+public:
+    BearTankDruidStrategyActionNodeFactory()
+    {
+        creators["melee"] = &melee;
+        creators["feral charge - bear"] = &feral_charge_bear;
+        creators["swipe (bear)"] = &swipe_bear;
+        creators["faerie fire (feral)"] = &faerie_fire_feral;
+        creators["bear form"] = &bear_form;
+        creators["dire bear form"] = &dire_bear_form;
+        creators["mangle (bear)"] = &mangle_bear;
+        creators["maul"] = &maul;
+        creators["bash"] = &bash;
+        creators["swipe"] = &swipe;
+        creators["lacerate"] = &lacerate;
+        creators["demoralizing roar"] = &demoralizing_roar;
+    }
+private:
+    static ActionNode* melee(PlayerbotAI* ai)
+    {
+        return new ActionNode ("melee",
+            /*P*/ NextAction::array(0, new NextAction("feral charge - bear"), NULL),
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+    static ActionNode* feral_charge_bear(PlayerbotAI* ai)
+    {
+        return new ActionNode ("feral charge - bear",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("reach melee"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* swipe_bear(PlayerbotAI* ai)
+    {
+        return new ActionNode ("swipe (bear)",
+            /*P*/ NULL,
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+    static ActionNode* faerie_fire_feral(PlayerbotAI* ai)
+    {
+        return new ActionNode ("faerie fire (feral)",
+            /*P*/ NextAction::array(0, new NextAction("feral charge - bear"), NULL),
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+    static ActionNode* bear_form(PlayerbotAI* ai)
+    {
+        return new ActionNode ("bear form",
+            /*P*/ NULL,
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+    static ActionNode* dire_bear_form(PlayerbotAI* ai)
+    {
+        return new ActionNode ("dire bear form",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("bear form"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* mangle_bear(PlayerbotAI* ai)
+    {
+        return new ActionNode ("mangle (bear)",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("lacerate"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* maul(PlayerbotAI* ai)
+    {
+        return new ActionNode ("maul",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("melee"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* bash(PlayerbotAI* ai)
+    {
+        return new ActionNode ("bash",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("melee"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* swipe(PlayerbotAI* ai)
+    {
+        return new ActionNode ("swipe",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("melee"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* lacerate(PlayerbotAI* ai)
+    {
+        return new ActionNode ("lacerate",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("maul"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* growl(PlayerbotAI* ai)
+    {
+        return new ActionNode ("growl",
+            /*P*/ NULL,
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+    static ActionNode* demoralizing_roar(PlayerbotAI* ai)
+    {
+        return new ActionNode ("demoralizing roar",
+            /*P*/ NULL,
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+};
+
+BearTankDruidStrategy::BearTankDruidStrategy(PlayerbotAI* ai) : FeralDruidStrategy(ai)
+{
+    actionNodeFactories.Add(new BearTankDruidStrategyActionNodeFactory());
+}
+
+NextAction** BearTankDruidStrategy::getDefaultActions()
+{
+    return NextAction::array(0,
+            new NextAction("lacerate", ACTION_NORMAL + 4),
+            new NextAction("mangle (bear)", ACTION_NORMAL + 3),
+            new NextAction("maul", ACTION_NORMAL + 2),
+            new NextAction("faerie fire (feral)", ACTION_NORMAL + 1),
+            NULL);
+}
+
+void BearTankDruidStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    FeralDruidStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "thorns",
+        NextAction::array(0, new NextAction("thorns", ACTION_HIGH + 9), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "bear form",
+        NextAction::array(0, new NextAction("dire bear form", ACTION_HIGH + 8), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "faerie fire (feral)",
+        NextAction::array(0, new NextAction("faerie fire (feral)", ACTION_HIGH + 7), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "lose aggro",
+        NextAction::array(0, new NextAction("growl", ACTION_HIGH + 8), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "medium aoe",
+        NextAction::array(0, new NextAction("demoralizing roar", ACTION_HIGH + 6), new NextAction("swipe (bear)", ACTION_HIGH + 6), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "light aoe",
+        NextAction::array(0, new NextAction("swipe (bear)", ACTION_HIGH + 5), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "bash",
+        NextAction::array(0, new NextAction("bash", ACTION_INTERRUPT + 2), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "bash on enemy healer",
+        NextAction::array(0, new NextAction("bash on enemy healer", ACTION_INTERRUPT + 1), NULL)));
+
+}
diff --git a/src/plugins/playerbot/strategy/druid/BearTankDruidStrategy.h b/src/plugins/playerbot/strategy/druid/BearTankDruidStrategy.h
new file mode 100644
index 0000000..1e8a3f4
--- /dev/null
+++ b/src/plugins/playerbot/strategy/druid/BearTankDruidStrategy.h
@@ -0,0 +1,18 @@
+#pragma once
+
+#include "FeralDruidStrategy.h"
+
+namespace ai
+{
+    class BearTankDruidStrategy : public FeralDruidStrategy
+    {
+    public:
+        BearTankDruidStrategy(PlayerbotAI* ai);
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "bear"; }
+        virtual NextAction** getDefaultActions();
+		virtual int GetType() { return STRATEGY_TYPE_TANK | STRATEGY_TYPE_MELEE; }
+    };
+}
diff --git a/src/plugins/playerbot/strategy/druid/CasterDruidStrategy.cpp b/src/plugins/playerbot/strategy/druid/CasterDruidStrategy.cpp
new file mode 100644
index 0000000..bb07940
--- /dev/null
+++ b/src/plugins/playerbot/strategy/druid/CasterDruidStrategy.cpp
@@ -0,0 +1,177 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "DruidMultipliers.h"
+#include "CasterDruidStrategy.h"
+#include "FeralDruidStrategy.h"
+
+using namespace ai;
+
+class CasterDruidStrategyActionNodeFactory : public NamedObjectFactory<ActionNode>
+{
+public:
+    CasterDruidStrategyActionNodeFactory()
+    {
+        creators["faerie fire"] = &faerie_fire;
+        creators["hibernate"] = &hibernate;
+        creators["entangling roots"] = &entangling_roots;
+        creators["entangling roots on cc"] = &entangling_roots_on_cc;
+        creators["wrath"] = &wrath;
+        creators["starfall"] = &starfall;
+        creators["insect swarm"] = &insect_swarm;
+        creators["moonfire"] = &moonfire;
+        creators["starfire"] = &starfire;
+        creators["nature's grasp"] = &natures_grasp;
+    }
+private:
+    static ActionNode* faerie_fire(PlayerbotAI* ai)
+    {
+        return new ActionNode ("faerie fire",
+            /*P*/ NextAction::array(0, new NextAction("moonkin form"), NULL),
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+    static ActionNode* hibernate(PlayerbotAI* ai)
+    {
+        return new ActionNode ("hibernate",
+            /*P*/ NextAction::array(0, new NextAction("moonkin form"), NULL),
+            /*A*/ NextAction::array(0, new NextAction("entangling roots"), NULL),
+            /*C*/ NextAction::array(0, new NextAction("flee", 49.0f), NULL));
+    }
+    static ActionNode* entangling_roots(PlayerbotAI* ai)
+    {
+        return new ActionNode ("entangling roots",
+            /*P*/ NextAction::array(0, new NextAction("moonkin form"), NULL),
+            /*A*/ NULL,
+            /*C*/ NextAction::array(0, new NextAction("flee", 49.0f), NULL));
+    }
+    static ActionNode* entangling_roots_on_cc(PlayerbotAI* ai)
+    {
+        return new ActionNode ("entangling roots on cc",
+            /*P*/ NextAction::array(0, new NextAction("moonkin form"), NULL),
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+    static ActionNode* wrath(PlayerbotAI* ai)
+    {
+        return new ActionNode ("wrath",
+            /*P*/ NextAction::array(0, new NextAction("moonkin form"), NULL),
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+    static ActionNode* starfall(PlayerbotAI* ai)
+    {
+        return new ActionNode ("starfall",
+            /*P*/ NextAction::array(0, new NextAction("moonkin form"), NULL),
+            /*A*/ NextAction::array(0, new NextAction("hurricane"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* insect_swarm(PlayerbotAI* ai)
+    {
+        return new ActionNode ("insect swarm",
+            /*P*/ NextAction::array(0, new NextAction("moonkin form"), NULL),
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+    static ActionNode* moonfire(PlayerbotAI* ai)
+    {
+        return new ActionNode ("moonfire",
+            /*P*/ NextAction::array(0, new NextAction("moonkin form"), NULL),
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+    static ActionNode* starfire(PlayerbotAI* ai)
+    {
+        return new ActionNode ("starfire",
+            /*P*/ NextAction::array(0, new NextAction("moonkin form"), NULL),
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+    static ActionNode* natures_grasp(PlayerbotAI* ai)
+    {
+        return new ActionNode ("nature's grasp",
+            /*P*/ NextAction::array(0, new NextAction("moonkin form"), NULL),
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+};
+
+CasterDruidStrategy::CasterDruidStrategy(PlayerbotAI* ai) : GenericDruidStrategy(ai)
+{
+    actionNodeFactories.Add(new CasterDruidStrategyActionNodeFactory());
+    actionNodeFactories.Add(new ShapeshiftDruidStrategyActionNodeFactory());
+}
+
+NextAction** CasterDruidStrategy::getDefaultActions()
+{
+    return NextAction::array(0, new NextAction("starfire", ACTION_NORMAL + 2), new NextAction("wrath", ACTION_NORMAL + 1), NULL);
+}
+
+void CasterDruidStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    GenericDruidStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "enemy out of spell",
+        NextAction::array(0, new NextAction("reach spell", ACTION_MOVE), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "medium health",
+        NextAction::array(0, new NextAction("regrowth", ACTION_MEDIUM_HEAL + 2), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "party member medium health",
+        NextAction::array(0, new NextAction("regrowth on party", ACTION_MEDIUM_HEAL + 1), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "almost full health",
+        NextAction::array(0, new NextAction("rejuvenation", ACTION_LIGHT_HEAL + 2), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "party member almost full health",
+        NextAction::array(0, new NextAction("rejuvenation on party", ACTION_LIGHT_HEAL + 1), NULL)));
+
+
+	triggers.push_back(new TriggerNode(
+		"insect swarm",
+		NextAction::array(0, new NextAction("insect swarm", ACTION_NORMAL + 5), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"moonfire",
+		NextAction::array(0, new NextAction("moonfire", ACTION_NORMAL + 4), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "eclipse (solar)",
+        NextAction::array(0, new NextAction("wrath", ACTION_NORMAL + 6), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "eclipse (lunar)",
+        NextAction::array(0, new NextAction("starfire", ACTION_NORMAL + 6), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "moonfire",
+        NextAction::array(0, new NextAction("moonfire", ACTION_NORMAL + 4), NULL)));
+
+
+
+	triggers.push_back(new TriggerNode(
+		"nature's grasp",
+		NextAction::array(0, new NextAction("nature's grasp", ACTION_EMERGENCY), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "entangling roots",
+        NextAction::array(0, new NextAction("entangling roots on cc", ACTION_HIGH + 2), NULL)));
+}
+
+void CasterDruidAoeStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+	triggers.push_back(new TriggerNode(
+		"high aoe",
+		NextAction::array(0, new NextAction("starfall", ACTION_HIGH + 1), NULL)));
+}
+
+void CasterDruidDebuffStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "faerie fire",
+        NextAction::array(0, new NextAction("faerie fire", ACTION_HIGH), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/druid/CasterDruidStrategy.h b/src/plugins/playerbot/strategy/druid/CasterDruidStrategy.h
new file mode 100644
index 0000000..66ac838
--- /dev/null
+++ b/src/plugins/playerbot/strategy/druid/CasterDruidStrategy.h
@@ -0,0 +1,39 @@
+#pragma once
+
+#include "GenericDruidStrategy.h"
+#include "../generic/CombatStrategy.h"
+
+namespace ai
+{
+    class CasterDruidStrategy : public GenericDruidStrategy
+    {
+    public:
+        CasterDruidStrategy(PlayerbotAI* ai);
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "caster"; }
+        virtual NextAction** getDefaultActions();
+        virtual int GetType() { return STRATEGY_TYPE_COMBAT | STRATEGY_TYPE_DPS | STRATEGY_TYPE_RANGED; }
+    };
+
+    class CasterDruidAoeStrategy : public CombatStrategy
+    {
+    public:
+        CasterDruidAoeStrategy(PlayerbotAI* ai) : CombatStrategy(ai) {}
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "caster aoe"; }
+    };
+
+    class CasterDruidDebuffStrategy : public CombatStrategy
+    {
+    public:
+        CasterDruidDebuffStrategy(PlayerbotAI* ai) : CombatStrategy(ai) {}
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "caster debuff"; }
+    };
+}
diff --git a/src/plugins/playerbot/strategy/druid/CatDpsDruidStrategy.cpp b/src/plugins/playerbot/strategy/druid/CatDpsDruidStrategy.cpp
new file mode 100644
index 0000000..67515b7
--- /dev/null
+++ b/src/plugins/playerbot/strategy/druid/CatDpsDruidStrategy.cpp
@@ -0,0 +1,139 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "DruidMultipliers.h"
+#include "CatDpsDruidStrategy.h"
+
+using namespace ai;
+
+class CatDpsDruidStrategyActionNodeFactory : public NamedObjectFactory<ActionNode>
+{
+public:
+    CatDpsDruidStrategyActionNodeFactory()
+    {
+        creators["faerie fire (feral)"] = &faerie_fire_feral;
+        creators["melee"] = &melee;
+        creators["feral charge - cat"] = &feral_charge_cat;
+        creators["cat form"] = &cat_form;
+        creators["claw"] = &claw;
+        creators["mangle (cat)"] = &mangle_cat;
+        creators["rake"] = &rake;
+        creators["ferocious bite"] = &ferocious_bite;
+        creators["rip"] = &rip;
+    }
+private:
+    static ActionNode* faerie_fire_feral(PlayerbotAI* ai)
+    {
+        return new ActionNode ("faerie fire (feral)",
+            /*P*/ NULL,
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+    static ActionNode* melee(PlayerbotAI* ai)
+    {
+        return new ActionNode ("melee",
+            /*P*/ NextAction::array(0, new NextAction("feral charge - cat"), NULL),
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+    static ActionNode* feral_charge_cat(PlayerbotAI* ai)
+    {
+        return new ActionNode ("feral charge - cat",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("reach melee"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* cat_form(PlayerbotAI* ai)
+    {
+        return new ActionNode ("cat form",
+            /*P*/ NULL,
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+    static ActionNode* claw(PlayerbotAI* ai)
+    {
+        return new ActionNode ("claw",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("melee"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* mangle_cat(PlayerbotAI* ai)
+    {
+        return new ActionNode ("mangle (cat)",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("claw"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* rake(PlayerbotAI* ai)
+    {
+        return new ActionNode ("rake",
+            /*P*/ NULL,
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+    static ActionNode* ferocious_bite(PlayerbotAI* ai)
+    {
+        return new ActionNode ("ferocious bite",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("rip"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* rip(PlayerbotAI* ai)
+    {
+        return new ActionNode ("rip",
+            /*P*/ NULL,
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+};
+
+CatDpsDruidStrategy::CatDpsDruidStrategy(PlayerbotAI* ai) : FeralDruidStrategy(ai)
+{
+    actionNodeFactories.Add(new CatDpsDruidStrategyActionNodeFactory());
+}
+
+NextAction** CatDpsDruidStrategy::getDefaultActions()
+{
+    return NextAction::array(0, new NextAction("mangle (cat)", ACTION_NORMAL + 1), NULL);
+}
+
+void CatDpsDruidStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    FeralDruidStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "cat form",
+        NextAction::array(0, new NextAction("cat form", ACTION_MOVE + 2), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "rake",
+        NextAction::array(0, new NextAction("rake", ACTION_NORMAL + 5), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "combo points available",
+        NextAction::array(0, new NextAction("ferocious bite", ACTION_NORMAL + 9), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "medium threat",
+        NextAction::array(0, new NextAction("cower", ACTION_EMERGENCY + 1), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "faerie fire (feral)",
+        NextAction::array(0, new NextAction("faerie fire (feral)", ACTION_HIGH + 1), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"tiger's fury",
+		NextAction::array(0, new NextAction("tiger's fury", ACTION_EMERGENCY + 1), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "entangling roots",
+        NextAction::array(0, new NextAction("entangling roots on cc", ACTION_HIGH + 1), NULL)));
+
+}
+
+void CatAoeDruidStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "medium aoe",
+        NextAction::array(0, new NextAction("swipe (cat)", ACTION_HIGH + 2), NULL)));
+}
+
diff --git a/src/plugins/playerbot/strategy/druid/CatDpsDruidStrategy.h b/src/plugins/playerbot/strategy/druid/CatDpsDruidStrategy.h
new file mode 100644
index 0000000..397f0b3
--- /dev/null
+++ b/src/plugins/playerbot/strategy/druid/CatDpsDruidStrategy.h
@@ -0,0 +1,29 @@
+#pragma once
+
+#include "FeralDruidStrategy.h"
+#include "../generic/CombatStrategy.h"
+
+namespace ai
+{
+    class CatDpsDruidStrategy : public FeralDruidStrategy
+    {
+    public:
+        CatDpsDruidStrategy(PlayerbotAI* ai);
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "cat"; }
+        virtual NextAction** getDefaultActions();
+        virtual int GetType() { return STRATEGY_TYPE_COMBAT | STRATEGY_TYPE_MELEE; }
+    };
+
+    class CatAoeDruidStrategy : public CombatStrategy
+    {
+    public:
+        CatAoeDruidStrategy(PlayerbotAI* ai) : CombatStrategy(ai) {}
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "cat aoe"; }
+    };
+}
diff --git a/src/plugins/playerbot/strategy/druid/DruidActions.cpp b/src/plugins/playerbot/strategy/druid/DruidActions.cpp
new file mode 100644
index 0000000..fc49e68
--- /dev/null
+++ b/src/plugins/playerbot/strategy/druid/DruidActions.cpp
@@ -0,0 +1,31 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "DruidActions.h"
+
+using namespace ai;
+
+bool CastCasterFormAction::Execute(Event event)
+{
+    ai->RemoveShapeshift();
+    return true;
+}
+
+NextAction** CastAbolishPoisonAction::getAlternatives()
+{
+    return NextAction::merge( NextAction::array(0, new NextAction("cure poison"), NULL), CastSpellAction::getPrerequisites());
+}
+
+NextAction** CastAbolishPoisonOnPartyAction::getAlternatives()
+{
+    return NextAction::merge( NextAction::array(0, new NextAction("cure poison on party"), NULL), CastSpellAction::getPrerequisites());
+}
+
+Value<Unit*>* CastEntanglingRootsCcAction::GetTargetValue()
+{
+    return context->GetValue<Unit*>("cc target", "entangling roots");
+}
+
+bool CastEntanglingRootsCcAction::Execute(Event event)
+{
+    return ai->CastSpell("entangling roots", GetTarget()); 
+}
diff --git a/src/plugins/playerbot/strategy/druid/DruidActions.h b/src/plugins/playerbot/strategy/druid/DruidActions.h
new file mode 100644
index 0000000..965f454
--- /dev/null
+++ b/src/plugins/playerbot/strategy/druid/DruidActions.h
@@ -0,0 +1,205 @@
+#pragma once
+
+#include "../actions/GenericActions.h"
+#include "DruidShapeshiftActions.h"
+#include "DruidBearActions.h"
+#include "DruidCatActions.h"
+
+namespace ai
+{
+	class CastFaerieFireAction : public CastSpellAction
+	{
+	public:
+		CastFaerieFireAction(PlayerbotAI* ai) : CastSpellAction(ai, "faerie fire") {}
+	};
+
+    class CastFaerieFireFeralAction : public CastSpellAction
+    {
+    public:
+        CastFaerieFireFeralAction(PlayerbotAI* ai) : CastSpellAction(ai, "faerie fire (feral)") {}
+    };
+
+	class CastRejuvenationAction : public CastHealingSpellAction {
+	public:
+		CastRejuvenationAction(PlayerbotAI* ai) : CastHealingSpellAction(ai, "rejuvenation") {}
+	};
+
+	class CastRegrowthAction : public CastHealingSpellAction {
+	public:
+		CastRegrowthAction(PlayerbotAI* ai) : CastHealingSpellAction(ai, "regrowth") {}
+
+	};
+
+    class CastHealingTouchAction : public CastHealingSpellAction {
+    public:
+        CastHealingTouchAction(PlayerbotAI* ai) : CastHealingSpellAction(ai, "healing touch") {}
+
+    };
+
+    class CastRejuvenationOnPartyAction : public HealPartyMemberAction
+    {
+    public:
+        CastRejuvenationOnPartyAction(PlayerbotAI* ai) : HealPartyMemberAction(ai, "rejuvenation") {}
+    };
+
+    class CastRegrowthOnPartyAction : public HealPartyMemberAction
+    {
+    public:
+        CastRegrowthOnPartyAction(PlayerbotAI* ai) : HealPartyMemberAction(ai, "regrowth") {}
+    };
+
+    class CastHealingTouchOnPartyAction : public HealPartyMemberAction
+    {
+    public:
+        CastHealingTouchOnPartyAction(PlayerbotAI* ai) : HealPartyMemberAction(ai, "healing touch") {}
+    };
+
+	class CastReviveAction : public ResurrectPartyMemberAction
+	{
+	public:
+		CastReviveAction(PlayerbotAI* ai) : ResurrectPartyMemberAction(ai, "revive") {}
+
+		virtual NextAction** getPrerequisites() {
+			return NextAction::merge( NextAction::array(0, new NextAction("caster form"), NULL), ResurrectPartyMemberAction::getPrerequisites());
+		}
+	};
+
+	class CastRebirthAction : public ResurrectPartyMemberAction
+	{
+	public:
+		CastRebirthAction(PlayerbotAI* ai) : ResurrectPartyMemberAction(ai, "rebirth") {}
+
+		virtual NextAction** getPrerequisites() {
+			return NextAction::merge( NextAction::array(0, new NextAction("caster form"), NULL), ResurrectPartyMemberAction::getPrerequisites());
+		}
+	};
+
+	class CastMarkOfTheWildAction : public CastBuffSpellAction {
+	public:
+		CastMarkOfTheWildAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "mark of the wild") {}
+	};
+
+	class CastMarkOfTheWildOnPartyAction : public BuffOnPartyAction {
+	public:
+		CastMarkOfTheWildOnPartyAction(PlayerbotAI* ai) : BuffOnPartyAction(ai, "mark of the wild") {}
+	};
+
+	class CastSurvivalInstinctsAction : public CastBuffSpellAction {
+	public:
+		CastSurvivalInstinctsAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "survival instincts") {}
+	};
+
+	class CastThornsAction : public CastBuffSpellAction {
+	public:
+		CastThornsAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "thorns") {}
+	};
+
+	class CastWrathAction : public CastSpellAction
+	{
+	public:
+		CastWrathAction(PlayerbotAI* ai) : CastSpellAction(ai, "wrath") {}
+	};
+
+	class CastStarfallAction : public CastSpellAction
+	{
+	public:
+		CastStarfallAction(PlayerbotAI* ai) : CastSpellAction(ai, "starfall") {}
+	};
+
+	class CastHurricaneAction : public CastSpellAction
+	{
+	public:
+	    CastHurricaneAction(PlayerbotAI* ai) : CastSpellAction(ai, "hurricane") {}
+	};
+
+	class CastMoonfireAction : public CastDebuffSpellAction
+	{
+	public:
+		CastMoonfireAction(PlayerbotAI* ai) : CastDebuffSpellAction(ai, "moonfire") {}
+	};
+
+	class CastInsectSwarmAction : public CastDebuffSpellAction
+	{
+	public:
+		CastInsectSwarmAction(PlayerbotAI* ai) : CastDebuffSpellAction(ai, "insect swarm") {}
+	};
+
+	class CastStarfireAction : public CastSpellAction
+	{
+	public:
+		CastStarfireAction(PlayerbotAI* ai) : CastSpellAction(ai, "starfire") {}
+	};
+
+	class CastEntanglingRootsAction : public CastSpellAction
+	{
+	public:
+		CastEntanglingRootsAction(PlayerbotAI* ai) : CastSpellAction(ai, "entangling roots") {}
+	};
+
+    class CastEntanglingRootsCcAction : public CastSpellAction
+    {
+    public:
+        CastEntanglingRootsCcAction(PlayerbotAI* ai) : CastSpellAction(ai, "entangling roots on cc") {}
+        virtual Value<Unit*>* GetTargetValue();
+        virtual bool Execute(Event event);
+    };
+
+	class CastNaturesGraspAction : public CastBuffSpellAction
+	{
+	public:
+		CastNaturesGraspAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "nature's grasp") {}
+	};
+
+	class CastHibernateAction : public CastSpellAction
+	{
+	public:
+		CastHibernateAction(PlayerbotAI* ai) : CastSpellAction(ai, "hibernate") {}
+	};
+
+	class CastCurePoisonAction : public CastCureSpellAction
+	{
+	public:
+		CastCurePoisonAction(PlayerbotAI* ai) : CastCureSpellAction(ai, "cure poison") {}
+	};
+
+    class CastCurePoisonOnPartyAction : public CurePartyMemberAction
+    {
+    public:
+        CastCurePoisonOnPartyAction(PlayerbotAI* ai) : CurePartyMemberAction(ai, "cure poison", DISPEL_POISON) {}
+    };
+
+	class CastAbolishPoisonAction : public CastCureSpellAction
+	{
+	public:
+		CastAbolishPoisonAction(PlayerbotAI* ai) : CastCureSpellAction(ai, "abolish poison") {}
+		virtual NextAction** getAlternatives();
+	};
+
+    class CastAbolishPoisonOnPartyAction : public CurePartyMemberAction
+    {
+    public:
+        CastAbolishPoisonOnPartyAction(PlayerbotAI* ai) : CurePartyMemberAction(ai, "abolish poison", DISPEL_POISON) {}
+
+        virtual NextAction** getAlternatives();
+    };
+
+    class CastBarskinAction : public CastBuffSpellAction
+    {
+    public:
+        CastBarskinAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "barskin") {}
+    };
+
+    class CastInnervateAction : public CastSpellAction
+    {
+    public:
+        CastInnervateAction(PlayerbotAI* ai) : CastSpellAction(ai, "innervate") {}
+
+        virtual string GetTargetName() { return "self target"; }
+    };
+
+    class CastTranquilityAction : public CastAoeHealSpellAction
+    {
+    public:
+        CastTranquilityAction(PlayerbotAI* ai) : CastAoeHealSpellAction(ai, "tranquility") {}
+    };
+}
diff --git a/src/plugins/playerbot/strategy/druid/DruidAiObjectContext.cpp b/src/plugins/playerbot/strategy/druid/DruidAiObjectContext.cpp
new file mode 100644
index 0000000..65c9fc9
--- /dev/null
+++ b/src/plugins/playerbot/strategy/druid/DruidAiObjectContext.cpp
@@ -0,0 +1,258 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "DruidActions.h"
+#include "DruidAiObjectContext.h"
+#include "BearTankDruidStrategy.h"
+#include "CatDpsDruidStrategy.h"
+#include "CasterDruidStrategy.h"
+#include "GenericDruidNonCombatStrategy.h"
+#include "../NamedObjectContext.h"
+#include "DruidTriggers.h"
+#include "HealDruidStrategy.h"
+
+using namespace ai;
+
+namespace ai
+{
+    namespace druid
+    {
+        using namespace ai;
+
+        class StrategyFactoryInternal : public NamedObjectContext<Strategy>
+        {
+        public:
+            StrategyFactoryInternal()
+            {
+                creators["nc"] = &druid::StrategyFactoryInternal::nc;
+                creators["cat aoe"] = &druid::StrategyFactoryInternal::cat_aoe;
+                creators["caster aoe"] = &druid::StrategyFactoryInternal::caster_aoe;
+                creators["caster debuff"] = &druid::StrategyFactoryInternal::caster_debuff;
+                creators["dps debuff"] = &druid::StrategyFactoryInternal::caster_debuff;
+            }
+
+        private:
+            static Strategy* nc(PlayerbotAI* ai) { return new GenericDruidNonCombatStrategy(ai); }
+            static Strategy* cat_aoe(PlayerbotAI* ai) { return new CatAoeDruidStrategy(ai); }
+            static Strategy* caster_aoe(PlayerbotAI* ai) { return new CasterDruidAoeStrategy(ai); }
+            static Strategy* caster_debuff(PlayerbotAI* ai) { return new CasterDruidDebuffStrategy(ai); }
+        };
+
+        class DruidStrategyFactoryInternal : public NamedObjectContext<Strategy>
+        {
+        public:
+            DruidStrategyFactoryInternal() : NamedObjectContext<Strategy>(false, true)
+            {
+                creators["bear"] = &druid::DruidStrategyFactoryInternal::bear;
+                creators["tank"] = &druid::DruidStrategyFactoryInternal::bear;
+                creators["cat"] = &druid::DruidStrategyFactoryInternal::cat;
+                creators["caster"] = &druid::DruidStrategyFactoryInternal::caster;
+                creators["dps"] = &druid::DruidStrategyFactoryInternal::cat;
+                creators["heal"] = &druid::DruidStrategyFactoryInternal::heal;
+            }
+
+        private:
+            static Strategy* bear(PlayerbotAI* ai) { return new BearTankDruidStrategy(ai); }
+            static Strategy* cat(PlayerbotAI* ai) { return new CatDpsDruidStrategy(ai); }
+            static Strategy* caster(PlayerbotAI* ai) { return new CasterDruidStrategy(ai); }
+            static Strategy* heal(PlayerbotAI* ai) { return new HealDruidStrategy(ai); }
+        };
+    };
+};
+
+namespace ai
+{
+    namespace druid
+    {
+        using namespace ai;
+
+        class TriggerFactoryInternal : public NamedObjectContext<Trigger>
+        {
+        public:
+            TriggerFactoryInternal()
+            {
+                creators["thorns"] = &TriggerFactoryInternal::Thorns;
+                creators["bash"] = &TriggerFactoryInternal::bash;
+                creators["faerie fire (feral)"] = &TriggerFactoryInternal::faerie_fire_feral;
+                creators["faerie fire"] = &TriggerFactoryInternal::faerie_fire;
+                creators["insect swarm"] = &TriggerFactoryInternal::insect_swarm;
+                creators["moonfire"] = &TriggerFactoryInternal::moonfire;
+                creators["nature's grasp"] = &TriggerFactoryInternal::natures_grasp;
+                creators["tiger's fury"] = &TriggerFactoryInternal::tigers_fury;
+                creators["rake"] = &TriggerFactoryInternal::rake;
+                creators["mark of the wild"] = &TriggerFactoryInternal::mark_of_the_wild;
+                creators["mark of the wild on party"] = &TriggerFactoryInternal::mark_of_the_wild_on_party;
+                creators["cure poison"] = &TriggerFactoryInternal::cure_poison;
+                creators["party member cure poison"] = &TriggerFactoryInternal::party_member_cure_poison;
+                creators["entangling roots"] = &TriggerFactoryInternal::entangling_roots;
+                creators["bear form"] = &TriggerFactoryInternal::bear_form;
+                creators["cat form"] = &TriggerFactoryInternal::cat_form;
+                creators["tree form"] = &TriggerFactoryInternal::tree_form;
+                creators["eclipse (solar)"] = &TriggerFactoryInternal::eclipse_solar;
+                creators["eclipse (lunar)"] = &TriggerFactoryInternal::eclipse_lunar;
+                creators["bash on enemy healer"] = &TriggerFactoryInternal::bash_on_enemy_healer;
+            }
+
+        private:
+            static Trigger* eclipse_solar(PlayerbotAI* ai) { return new EclipseSolarTrigger(ai); }
+            static Trigger* eclipse_lunar(PlayerbotAI* ai) { return new EclipseLunarTrigger(ai); }
+            static Trigger* Thorns(PlayerbotAI* ai) { return new ThornsTrigger(ai); }
+            static Trigger* bash(PlayerbotAI* ai) { return new BashInterruptSpellTrigger(ai); }
+            static Trigger* faerie_fire_feral(PlayerbotAI* ai) { return new FaerieFireFeralTrigger(ai); }
+            static Trigger* insect_swarm(PlayerbotAI* ai) { return new InsectSwarmTrigger(ai); }
+            static Trigger* moonfire(PlayerbotAI* ai) { return new MoonfireTrigger(ai); }
+            static Trigger* faerie_fire(PlayerbotAI* ai) { return new FaerieFireTrigger(ai); }
+            static Trigger* natures_grasp(PlayerbotAI* ai) { return new NaturesGraspTrigger(ai); }
+            static Trigger* tigers_fury(PlayerbotAI* ai) { return new TigersFuryTrigger(ai); }
+            static Trigger* rake(PlayerbotAI* ai) { return new RakeTrigger(ai); }
+            static Trigger* mark_of_the_wild(PlayerbotAI* ai) { return new MarkOfTheWildTrigger(ai); }
+            static Trigger* mark_of_the_wild_on_party(PlayerbotAI* ai) { return new MarkOfTheWildOnPartyTrigger(ai); }
+            static Trigger* cure_poison(PlayerbotAI* ai) { return new CurePoisonTrigger(ai); }
+            static Trigger* party_member_cure_poison(PlayerbotAI* ai) { return new PartyMemberCurePoisonTrigger(ai); }
+            static Trigger* entangling_roots(PlayerbotAI* ai) { return new EntanglingRootsTrigger(ai); }
+            static Trigger* bear_form(PlayerbotAI* ai) { return new BearFormTrigger(ai); }
+            static Trigger* cat_form(PlayerbotAI* ai) { return new CatFormTrigger(ai); }
+            static Trigger* tree_form(PlayerbotAI* ai) { return new TreeFormTrigger(ai); }
+            static Trigger* bash_on_enemy_healer(PlayerbotAI* ai) { return new BashInterruptEnemyHealerSpellTrigger(ai); }
+        };
+    };
+};
+
+namespace ai
+{
+    namespace druid
+    {
+        using namespace ai;
+
+        class AiObjectContextInternal : public NamedObjectContext<Action>
+        {
+        public:
+            AiObjectContextInternal()
+            {
+                creators["feral charge - bear"] = &AiObjectContextInternal::feral_charge_bear;
+                creators["feral charge - cat"] = &AiObjectContextInternal::feral_charge_cat;
+                creators["swipe (bear)"] = &AiObjectContextInternal::swipe_bear;
+                creators["faerie fire (feral)"] = &AiObjectContextInternal::faerie_fire_feral;
+                creators["faerie fire"] = &AiObjectContextInternal::faerie_fire;
+                creators["bear form"] = &AiObjectContextInternal::bear_form;
+                creators["dire bear form"] = &AiObjectContextInternal::dire_bear_form;
+                creators["moonkin form"] = &AiObjectContextInternal::moonkin_form;
+                creators["cat form"] = &AiObjectContextInternal::cat_form;
+                creators["tree form"] = &AiObjectContextInternal::tree_form;
+                creators["caster form"] = &AiObjectContextInternal::caster_form;
+                creators["mangle (bear)"] = &AiObjectContextInternal::mangle_bear;
+                creators["maul"] = &AiObjectContextInternal::maul;
+                creators["bash"] = &AiObjectContextInternal::bash;
+                creators["swipe"] = &AiObjectContextInternal::swipe;
+                creators["growl"] = &AiObjectContextInternal::growl;
+                creators["demoralizing roar"] = &AiObjectContextInternal::demoralizing_roar;
+                creators["hibernate"] = &AiObjectContextInternal::hibernate;
+                creators["entangling roots"] = &AiObjectContextInternal::entangling_roots;
+                creators["entangling roots on cc"] = &AiObjectContextInternal::entangling_roots_on_cc;
+                creators["wrath"] = &AiObjectContextInternal::wrath;
+                creators["starfall"] = &AiObjectContextInternal::starfall;
+                creators["insect swarm"] = &AiObjectContextInternal::insect_swarm;
+                creators["moonfire"] = &AiObjectContextInternal::moonfire;
+                creators["starfire"] = &AiObjectContextInternal::starfire;
+                creators["nature's grasp"] = &AiObjectContextInternal::natures_grasp;
+                creators["claw"] = &AiObjectContextInternal::claw;
+                creators["mangle (cat)"] = &AiObjectContextInternal::mangle_cat;
+                creators["swipe (cat)"] = &AiObjectContextInternal::swipe_cat;
+                creators["rake"] = &AiObjectContextInternal::rake;
+                creators["ferocious bite"] = &AiObjectContextInternal::ferocious_bite;
+                creators["rip"] = &AiObjectContextInternal::rip;
+                creators["cower"] = &AiObjectContextInternal::cower;
+                creators["survival instincts"] = &AiObjectContextInternal::survival_instincts;
+                creators["thorns"] = &AiObjectContextInternal::thorns;
+                creators["cure poison"] = &AiObjectContextInternal::cure_poison;
+                creators["cure poison on party"] = &AiObjectContextInternal::cure_poison_on_party;
+                creators["abolish poison"] = &AiObjectContextInternal::abolish_poison;
+                creators["abolish poison on party"] = &AiObjectContextInternal::abolish_poison_on_party;
+                creators["berserk"] = &AiObjectContextInternal::berserk;
+                creators["tiger's fury"] = &AiObjectContextInternal::tigers_fury;
+                creators["mark of the wild"] = &AiObjectContextInternal::mark_of_the_wild;
+                creators["mark of the wild on party"] = &AiObjectContextInternal::mark_of_the_wild_on_party;
+                creators["regrowth"] = &AiObjectContextInternal::regrowth;
+                creators["rejuvenation"] = &AiObjectContextInternal::rejuvenation;
+                creators["healing touch"] = &AiObjectContextInternal::healing_touch;
+                creators["regrowth on party"] = &AiObjectContextInternal::regrowth_on_party;
+                creators["rejuvenation on party"] = &AiObjectContextInternal::rejuvenation_on_party;
+                creators["healing touch on party"] = &AiObjectContextInternal::healing_touch_on_party;
+                creators["rebirth"] = &AiObjectContextInternal::rebirth;
+                creators["revive"] = &AiObjectContextInternal::revive;
+                creators["barskin"] = &AiObjectContextInternal::barskin;
+                creators["lacerate"] = &AiObjectContextInternal::lacerate;
+                creators["hurricane"] = &AiObjectContextInternal::hurricane;
+                creators["innervate"] = &AiObjectContextInternal::innervate;
+                creators["tranquility"] = &AiObjectContextInternal::tranquility;
+                creators["bash on enemy healer"] = &AiObjectContextInternal::bash_on_enemy_healer;
+            }
+
+        private:
+            static Action* tranquility(PlayerbotAI* ai) { return new CastTranquilityAction(ai); }
+            static Action* feral_charge_bear(PlayerbotAI* ai) { return new CastFeralChargeBearAction(ai); }
+            static Action* feral_charge_cat(PlayerbotAI* ai) { return new CastFeralChargeCatAction(ai); }
+            static Action* swipe_bear(PlayerbotAI* ai) { return new CastSwipeBearAction(ai); }
+            static Action* faerie_fire_feral(PlayerbotAI* ai) { return new CastFaerieFireFeralAction(ai); }
+            static Action* faerie_fire(PlayerbotAI* ai) { return new CastFaerieFireAction(ai); }
+            static Action* bear_form(PlayerbotAI* ai) { return new CastBearFormAction(ai); }
+            static Action* dire_bear_form(PlayerbotAI* ai) { return new CastDireBearFormAction(ai); }
+            static Action* cat_form(PlayerbotAI* ai) { return new CastCatFormAction(ai); }
+            static Action* tree_form(PlayerbotAI* ai) { return new CastTreeFormAction(ai); }
+            static Action* caster_form(PlayerbotAI* ai) { return new CastCasterFormAction(ai); }
+            static Action* mangle_bear(PlayerbotAI* ai) { return new CastMangleBearAction(ai); }
+            static Action* maul(PlayerbotAI* ai) { return new CastMaulAction(ai); }
+            static Action* bash(PlayerbotAI* ai) { return new CastBashAction(ai); }
+            static Action* swipe(PlayerbotAI* ai) { return new CastSwipeAction(ai); }
+            static Action* growl(PlayerbotAI* ai) { return new CastGrowlAction(ai); }
+            static Action* demoralizing_roar(PlayerbotAI* ai) { return new CastDemoralizingRoarAction(ai); }
+            static Action* moonkin_form(PlayerbotAI* ai) { return new CastMoonkinFormAction(ai); }
+            static Action* hibernate(PlayerbotAI* ai) { return new CastHibernateAction(ai); }
+            static Action* entangling_roots(PlayerbotAI* ai) { return new CastEntanglingRootsAction(ai); }
+            static Action* entangling_roots_on_cc(PlayerbotAI* ai) { return new CastEntanglingRootsCcAction(ai); }
+            static Action* wrath(PlayerbotAI* ai) { return new CastWrathAction(ai); }
+            static Action* starfall(PlayerbotAI* ai) { return new CastStarfallAction(ai); }
+            static Action* insect_swarm(PlayerbotAI* ai) { return new CastInsectSwarmAction(ai); }
+            static Action* moonfire(PlayerbotAI* ai) { return new CastMoonfireAction(ai); }
+            static Action* starfire(PlayerbotAI* ai) { return new CastStarfireAction(ai); }
+            static Action* natures_grasp(PlayerbotAI* ai) { return new CastNaturesGraspAction(ai); }
+            static Action* claw(PlayerbotAI* ai) { return new CastClawAction(ai); }
+            static Action* mangle_cat(PlayerbotAI* ai) { return new CastMangleCatAction(ai); }
+            static Action* swipe_cat(PlayerbotAI* ai) { return new CastSwipeCatAction(ai); }
+            static Action* rake(PlayerbotAI* ai) { return new CastRakeAction(ai); }
+            static Action* ferocious_bite(PlayerbotAI* ai) { return new CastFerociousBiteAction(ai); }
+            static Action* rip(PlayerbotAI* ai) { return new CastRipAction(ai); }
+            static Action* cower(PlayerbotAI* ai) { return new CastCowerAction(ai); }
+            static Action* survival_instincts(PlayerbotAI* ai) { return new CastSurvivalInstinctsAction(ai); }
+            static Action* thorns(PlayerbotAI* ai) { return new CastThornsAction(ai); }
+            static Action* cure_poison(PlayerbotAI* ai) { return new CastCurePoisonAction(ai); }
+            static Action* cure_poison_on_party(PlayerbotAI* ai) { return new CastCurePoisonOnPartyAction(ai); }
+            static Action* abolish_poison(PlayerbotAI* ai) { return new CastAbolishPoisonAction(ai); }
+            static Action* abolish_poison_on_party(PlayerbotAI* ai) { return new CastAbolishPoisonOnPartyAction(ai); }
+            static Action* berserk(PlayerbotAI* ai) { return new CastBerserkAction(ai); }
+            static Action* tigers_fury(PlayerbotAI* ai) { return new CastTigersFuryAction(ai); }
+            static Action* mark_of_the_wild(PlayerbotAI* ai) { return new CastMarkOfTheWildAction(ai); }
+            static Action* mark_of_the_wild_on_party(PlayerbotAI* ai) { return new CastMarkOfTheWildOnPartyAction(ai); }
+            static Action* regrowth(PlayerbotAI* ai) { return new CastRegrowthAction(ai); }
+            static Action* rejuvenation(PlayerbotAI* ai) { return new CastRejuvenationAction(ai); }
+            static Action* healing_touch(PlayerbotAI* ai) { return new CastHealingTouchAction(ai); }
+            static Action* regrowth_on_party(PlayerbotAI* ai) { return new CastRegrowthOnPartyAction(ai); }
+            static Action* rejuvenation_on_party(PlayerbotAI* ai) { return new CastRejuvenationOnPartyAction(ai); }
+            static Action* healing_touch_on_party(PlayerbotAI* ai) { return new CastHealingTouchOnPartyAction(ai); }
+            static Action* rebirth(PlayerbotAI* ai) { return new CastRebirthAction(ai); }
+            static Action* revive(PlayerbotAI* ai) { return new CastReviveAction(ai); }
+            static Action* barskin(PlayerbotAI* ai) { return new CastBarskinAction(ai); }
+            static Action* lacerate(PlayerbotAI* ai) { return new CastLacerateAction(ai); }
+            static Action* hurricane(PlayerbotAI* ai) { return new CastHurricaneAction(ai); }
+            static Action* innervate(PlayerbotAI* ai) { return new CastInnervateAction(ai); }
+            static Action* bash_on_enemy_healer(PlayerbotAI* ai) { return new CastBashOnEnemyHealerAction(ai); }
+        };
+    };
+};
+
+DruidAiObjectContext::DruidAiObjectContext(PlayerbotAI* ai) : AiObjectContext(ai)
+{
+    strategyContexts.Add(new ai::druid::StrategyFactoryInternal());
+    strategyContexts.Add(new ai::druid::DruidStrategyFactoryInternal());
+    actionContexts.Add(new ai::druid::AiObjectContextInternal());
+    triggerContexts.Add(new ai::druid::TriggerFactoryInternal());
+}
diff --git a/src/plugins/playerbot/strategy/druid/DruidAiObjectContext.h b/src/plugins/playerbot/strategy/druid/DruidAiObjectContext.h
new file mode 100644
index 0000000..b5d7a2c
--- /dev/null
+++ b/src/plugins/playerbot/strategy/druid/DruidAiObjectContext.h
@@ -0,0 +1,12 @@
+#pragma once
+
+#include "../AiObjectContext.h"
+
+namespace ai
+{
+    class DruidAiObjectContext : public AiObjectContext
+    {
+    public:
+        DruidAiObjectContext(PlayerbotAI* ai);
+    };
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/druid/DruidBearActions.h b/src/plugins/playerbot/strategy/druid/DruidBearActions.h
new file mode 100644
index 0000000..81bc8ab
--- /dev/null
+++ b/src/plugins/playerbot/strategy/druid/DruidBearActions.h
@@ -0,0 +1,64 @@
+#pragma once
+
+namespace ai {
+	class CastFeralChargeBearAction : public CastReachTargetSpellAction
+	{
+	public:
+		CastFeralChargeBearAction(PlayerbotAI* ai) : CastReachTargetSpellAction(ai, "feral charge - bear", 1.5f) {}
+	};
+
+	class CastGrowlAction : public CastSpellAction
+	{
+	public:
+		CastGrowlAction(PlayerbotAI* ai) : CastSpellAction(ai, "growl") {}
+	};
+
+	class CastMaulAction : public CastMeleeSpellAction
+	{
+	public:
+		CastMaulAction(PlayerbotAI* ai) : CastMeleeSpellAction(ai, "maul") {}
+		virtual bool isUseful() { return CastMeleeSpellAction::isUseful() && AI_VALUE2(uint8, "rage", "self target") >= 45; }
+	};
+
+	class CastBashAction : public CastMeleeSpellAction
+	{
+	public:
+		CastBashAction(PlayerbotAI* ai) : CastMeleeSpellAction(ai, "bash") {}
+	};
+
+	class CastSwipeAction : public CastMeleeSpellAction
+	{
+	public:
+		CastSwipeAction(PlayerbotAI* ai) : CastMeleeSpellAction(ai, "swipe") {}
+	};
+
+	class CastDemoralizingRoarAction : public CastDebuffSpellAction
+	{
+	public:
+		CastDemoralizingRoarAction(PlayerbotAI* ai) : CastDebuffSpellAction(ai, "demoralizing roar") {}
+	};
+
+	class CastMangleBearAction : public CastMeleeSpellAction
+	{
+	public:
+		CastMangleBearAction(PlayerbotAI* ai) : CastMeleeSpellAction(ai, "mangle (bear)") {}
+	};
+
+	class CastSwipeBearAction : public CastMeleeSpellAction
+	{
+	public:
+		CastSwipeBearAction(PlayerbotAI* ai) : CastMeleeSpellAction(ai, "swipe (bear)") {}
+	};
+
+    class CastLacerateAction : public CastMeleeSpellAction
+    {
+    public:
+        CastLacerateAction(PlayerbotAI* ai) : CastMeleeSpellAction(ai, "lacerate") {}
+    };
+
+    class CastBashOnEnemyHealerAction : public CastSpellOnEnemyHealerAction
+    {
+    public:
+        CastBashOnEnemyHealerAction(PlayerbotAI* ai) : CastSpellOnEnemyHealerAction(ai, "bash") {}
+    };
+}
diff --git a/src/plugins/playerbot/strategy/druid/DruidCatActions.h b/src/plugins/playerbot/strategy/druid/DruidCatActions.h
new file mode 100644
index 0000000..89a3e66
--- /dev/null
+++ b/src/plugins/playerbot/strategy/druid/DruidCatActions.h
@@ -0,0 +1,64 @@
+#pragma once
+
+namespace ai {
+	class CastFeralChargeCatAction : public CastReachTargetSpellAction
+	{
+	public:
+		CastFeralChargeCatAction(PlayerbotAI* ai) : CastReachTargetSpellAction(ai, "feral charge - cat", 1.5f) {}
+	};
+
+	class CastCowerAction : public CastBuffSpellAction
+	{
+	public:
+		CastCowerAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "cower") {}
+	};
+
+
+	class CastBerserkAction : public CastBuffSpellAction
+	{
+	public:
+		CastBerserkAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "berserk") {}
+	};
+
+	class CastTigersFuryAction : public CastBuffSpellAction
+	{
+	public:
+		CastTigersFuryAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "tiger's fury") {}
+	};
+
+	class CastRakeAction : public CastDebuffSpellAction
+	{
+	public:
+		CastRakeAction(PlayerbotAI* ai) : CastDebuffSpellAction(ai, "rake") {}
+	};
+
+
+	class CastClawAction : public CastMeleeSpellAction {
+	public:
+		CastClawAction(PlayerbotAI* ai) : CastMeleeSpellAction(ai, "claw") {}
+	};
+
+	class CastMangleCatAction : public CastMeleeSpellAction {
+	public:
+		CastMangleCatAction(PlayerbotAI* ai) : CastMeleeSpellAction(ai, "mangle (cat)") {}
+	};
+
+	class CastSwipeCatAction : public CastMeleeSpellAction {
+	public:
+		CastSwipeCatAction(PlayerbotAI* ai) : CastMeleeSpellAction(ai, "swipe (cat)") {}
+	};
+
+	class CastFerociousBiteAction : public CastMeleeSpellAction {
+	public:
+		CastFerociousBiteAction(PlayerbotAI* ai) : CastMeleeSpellAction(ai, "ferocious bite") {}
+	};
+
+
+	class CastRipAction : public CastMeleeSpellAction {
+	public:
+		CastRipAction(PlayerbotAI* ai) : CastMeleeSpellAction(ai, "rip") {}
+	};
+
+
+
+}
diff --git a/src/plugins/playerbot/strategy/druid/DruidMultipliers.cpp b/src/plugins/playerbot/strategy/druid/DruidMultipliers.cpp
new file mode 100644
index 0000000..d273c7c
--- /dev/null
+++ b/src/plugins/playerbot/strategy/druid/DruidMultipliers.cpp
@@ -0,0 +1,6 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "DruidMultipliers.h"
+#include "DruidActions.h"
+
+using namespace ai;
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/druid/DruidMultipliers.h b/src/plugins/playerbot/strategy/druid/DruidMultipliers.h
new file mode 100644
index 0000000..7cfbdd4
--- /dev/null
+++ b/src/plugins/playerbot/strategy/druid/DruidMultipliers.h
@@ -0,0 +1,6 @@
+#pragma once
+
+namespace ai
+{
+   
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/druid/DruidShapeshiftActions.h b/src/plugins/playerbot/strategy/druid/DruidShapeshiftActions.h
new file mode 100644
index 0000000..746c635
--- /dev/null
+++ b/src/plugins/playerbot/strategy/druid/DruidShapeshiftActions.h
@@ -0,0 +1,53 @@
+#pragma once
+
+namespace ai {
+	class CastBearFormAction : public CastBuffSpellAction { 
+	public: 
+		CastBearFormAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "bear form") {} 
+
+        virtual bool isPossible() {
+			return CastBuffSpellAction::isPossible() && !ai->HasAura("dire bear form", GetTarget());
+		}
+        virtual bool isUseful() {
+			return CastBuffSpellAction::isUseful() && !ai->HasAura("dire bear form", GetTarget());
+		}
+	};
+
+	class CastDireBearFormAction : public CastBuffSpellAction { 
+	public: 
+		CastDireBearFormAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "dire bear form") {} 
+        
+        virtual NextAction** getAlternatives() {
+			return NextAction::merge(NextAction::array(0, new NextAction("bear form"), NULL), CastSpellAction::getAlternatives());
+		}
+	};
+
+	class CastCatFormAction : public CastBuffSpellAction { 
+	public: 
+		CastCatFormAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "cat form") {} 
+	};
+
+	class CastTreeFormAction : public CastBuffSpellAction {
+	public:
+		CastTreeFormAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "tree of life") {}
+	};
+
+	class CastMoonkinFormAction : public CastBuffSpellAction { 
+	public: 
+		CastMoonkinFormAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "moonkin form") {} 
+	};
+
+	class CastCasterFormAction : public CastBuffSpellAction { 
+	public: 
+		CastCasterFormAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "caster form") {} 
+
+		virtual bool isUseful() {
+			return ai->HasAnyAuraOf(GetTarget(), "dire bear form", "bear form", "cat form", "travel form", "aquatic form", 
+				"flight form", "swift flight form", "moonkin form", "tree of life", NULL);
+		}
+		virtual bool isPossible() { return true; }
+		
+		virtual bool Execute(Event event);
+	};
+
+}
diff --git a/src/plugins/playerbot/strategy/druid/DruidTriggers.cpp b/src/plugins/playerbot/strategy/druid/DruidTriggers.cpp
new file mode 100644
index 0000000..963c9fe
--- /dev/null
+++ b/src/plugins/playerbot/strategy/druid/DruidTriggers.cpp
@@ -0,0 +1,7 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "DruidTriggers.h"
+#include "DruidActions.h"
+
+using namespace ai;
+
diff --git a/src/plugins/playerbot/strategy/druid/DruidTriggers.h b/src/plugins/playerbot/strategy/druid/DruidTriggers.h
new file mode 100644
index 0000000..1c0d4d4
--- /dev/null
+++ b/src/plugins/playerbot/strategy/druid/DruidTriggers.h
@@ -0,0 +1,127 @@
+#pragma once
+#include "../triggers/GenericTriggers.h"
+
+namespace ai {
+    class MarkOfTheWildOnPartyTrigger : public BuffOnPartyTrigger
+    {
+    public:
+        MarkOfTheWildOnPartyTrigger(PlayerbotAI* ai) : BuffOnPartyTrigger(ai, "mark of the wild") {}
+    };
+
+    class MarkOfTheWildTrigger : public BuffTrigger
+    {
+    public:
+        MarkOfTheWildTrigger(PlayerbotAI* ai) : BuffTrigger(ai, "mark of the wild") {}
+    };
+
+    class ThornsTrigger : public BuffTrigger
+    {
+    public:
+        ThornsTrigger(PlayerbotAI* ai) : BuffTrigger(ai, "thorns") {}
+    };
+
+    class RakeTrigger : public DebuffTrigger
+    {
+    public:
+        RakeTrigger(PlayerbotAI* ai) : DebuffTrigger(ai, "rake") {}
+    };
+
+    class InsectSwarmTrigger : public DebuffTrigger
+    {
+    public:
+        InsectSwarmTrigger(PlayerbotAI* ai) : DebuffTrigger(ai, "insect swarm") {}
+    };
+
+    class MoonfireTrigger : public DebuffTrigger
+    {
+    public:
+        MoonfireTrigger(PlayerbotAI* ai) : DebuffTrigger(ai, "moonfire") {}
+    };
+
+    class FaerieFireTrigger : public DebuffTrigger
+    {
+    public:
+        FaerieFireTrigger(PlayerbotAI* ai) : DebuffTrigger(ai, "faerie fire") {}
+    };
+
+    class FaerieFireFeralTrigger : public DebuffTrigger
+    {
+    public:
+        FaerieFireFeralTrigger(PlayerbotAI* ai) : DebuffTrigger(ai, "faerie fire (feral)") {}
+    };
+
+    class BashInterruptSpellTrigger : public InterruptSpellTrigger
+    {
+    public:
+        BashInterruptSpellTrigger(PlayerbotAI* ai) : InterruptSpellTrigger(ai, "bash") {}
+    };
+
+    class TigersFuryTrigger : public BoostTrigger
+    {
+    public:
+        TigersFuryTrigger(PlayerbotAI* ai) : BoostTrigger(ai, "tiger's fury") {}
+    };
+
+    class NaturesGraspTrigger : public BoostTrigger
+    {
+    public:
+        NaturesGraspTrigger(PlayerbotAI* ai) : BoostTrigger(ai, "nature's grasp") {}
+    };
+
+    class EntanglingRootsTrigger : public HasCcTargetTrigger
+    {
+    public:
+        EntanglingRootsTrigger(PlayerbotAI* ai) : HasCcTargetTrigger(ai, "entangling roots") {}
+    };
+
+    class CurePoisonTrigger : public NeedCureTrigger
+    {
+    public:
+        CurePoisonTrigger(PlayerbotAI* ai) : NeedCureTrigger(ai, "cure poison", DISPEL_POISON) {}
+    };
+
+    class PartyMemberCurePoisonTrigger : public PartyMemberNeedCureTrigger
+    {
+    public:
+        PartyMemberCurePoisonTrigger(PlayerbotAI* ai) : PartyMemberNeedCureTrigger(ai, "cure poison", DISPEL_POISON) {}
+    };
+
+    class BearFormTrigger : public BuffTrigger
+    {
+    public:
+        BearFormTrigger(PlayerbotAI* ai) : BuffTrigger(ai, "bear form") {}
+        virtual bool IsActive() { return !ai->HasAnyAuraOf(bot, "bear form", "dire bear form", NULL); }
+    };
+
+    class TreeFormTrigger : public BuffTrigger
+    {
+    public:
+        TreeFormTrigger(PlayerbotAI* ai) : BuffTrigger(ai, "tree of life") {}
+        virtual bool IsActive() { return !ai->HasAura("tree of life", bot); }
+    };
+
+    class CatFormTrigger : public BuffTrigger
+    {
+    public:
+        CatFormTrigger(PlayerbotAI* ai) : BuffTrigger(ai, "cat form") {}
+        virtual bool IsActive() { return !ai->HasAura("cat form", bot); }
+    };
+
+    class EclipseSolarTrigger : public HasAuraTrigger
+    {
+    public:
+        EclipseSolarTrigger(PlayerbotAI* ai) : HasAuraTrigger(ai, "eclipse (solar)") {}
+    };
+
+    class EclipseLunarTrigger : public HasAuraTrigger
+    {
+    public:
+        EclipseLunarTrigger(PlayerbotAI* ai) : HasAuraTrigger(ai, "eclipse (lunar)") {}
+    };
+
+    class BashInterruptEnemyHealerSpellTrigger : public InterruptEnemyHealerTrigger
+    {
+    public:
+        BashInterruptEnemyHealerSpellTrigger(PlayerbotAI* ai) : InterruptEnemyHealerTrigger(ai, "bash") {}
+    };
+}
diff --git a/src/plugins/playerbot/strategy/druid/FeralDruidStrategy.cpp b/src/plugins/playerbot/strategy/druid/FeralDruidStrategy.cpp
new file mode 100644
index 0000000..1956573
--- /dev/null
+++ b/src/plugins/playerbot/strategy/druid/FeralDruidStrategy.cpp
@@ -0,0 +1,90 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "FeralDruidStrategy.h"
+
+using namespace ai;
+
+class FeralDruidStrategyActionNodeFactory : public NamedObjectFactory<ActionNode>
+{
+public:
+    FeralDruidStrategyActionNodeFactory()
+    {
+        creators["survival instincts"] = &survival_instincts;
+        creators["thorns"] = &thorns;
+        creators["cure poison"] = &cure_poison;
+        creators["cure poison on party"] = &cure_poison_on_party;
+        creators["abolish poison"] = &abolish_poison;
+        creators["abolish poison on party"] = &abolish_poison_on_party;
+    }
+private:
+    static ActionNode* survival_instincts(PlayerbotAI* ai)
+    {
+        return new ActionNode ("survival instincts",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("barskin"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* thorns(PlayerbotAI* ai)
+    {
+        return new ActionNode ("thorns",
+            /*P*/ NextAction::array(0, new NextAction("caster form"), NULL),
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+    static ActionNode* cure_poison(PlayerbotAI* ai)
+    {
+        return new ActionNode ("cure poison",
+            /*P*/ NextAction::array(0, new NextAction("caster form"), NULL),
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+    static ActionNode* cure_poison_on_party(PlayerbotAI* ai)
+    {
+        return new ActionNode ("cure poison on party",
+            /*P*/ NextAction::array(0, new NextAction("caster form"), NULL),
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+    static ActionNode* abolish_poison(PlayerbotAI* ai)
+    {
+        return new ActionNode ("abolish poison",
+            /*P*/ NextAction::array(0, new NextAction("caster form"), NULL),
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+    static ActionNode* abolish_poison_on_party(PlayerbotAI* ai)
+    {
+        return new ActionNode ("abolish poison on party",
+            /*P*/ NextAction::array(0, new NextAction("caster form"), NULL),
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+};
+
+FeralDruidStrategy::FeralDruidStrategy(PlayerbotAI* ai) : GenericDruidStrategy(ai)
+{
+    actionNodeFactories.Add(new FeralDruidStrategyActionNodeFactory());
+    actionNodeFactories.Add(new ShapeshiftDruidStrategyActionNodeFactory());
+}
+
+void FeralDruidStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    GenericDruidStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "not facing target",
+        NextAction::array(0, new NextAction("set facing", ACTION_NORMAL + 7), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "enemy out of melee",
+        NextAction::array(0, new NextAction("reach melee", ACTION_NORMAL + 8), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "enemy too close for melee",
+        NextAction::array(0, new NextAction("move out of enemy contact", ACTION_NORMAL + 8), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "critical health",
+        NextAction::array(0, new NextAction("survival instincts", ACTION_EMERGENCY + 1), NULL)));
+}
+
diff --git a/src/plugins/playerbot/strategy/druid/FeralDruidStrategy.h b/src/plugins/playerbot/strategy/druid/FeralDruidStrategy.h
new file mode 100644
index 0000000..0ee4a8c
--- /dev/null
+++ b/src/plugins/playerbot/strategy/druid/FeralDruidStrategy.h
@@ -0,0 +1,75 @@
+#pragma once
+
+#include "GenericDruidStrategy.h"
+#include "DruidAiObjectContext.h"
+
+namespace ai
+{
+    class ShapeshiftDruidStrategyActionNodeFactory : public NamedObjectFactory<ActionNode>
+    {
+    public:
+        ShapeshiftDruidStrategyActionNodeFactory()
+        {
+            creators["rejuvenation"] = &rejuvenation;
+            creators["regrowth"] = &regrowth;
+            creators["healing touch"] = &healing_touch;
+            creators["rejuvenation on party"] = &rejuvenation_on_party;
+            creators["regrowth on party"] = &regrowth_on_party;
+            creators["healing touch on party"] = &healing_touch_on_party;
+        }
+    private:
+        static ActionNode* regrowth(PlayerbotAI* ai)
+        {
+            return new ActionNode ("regrowth",
+                /*P*/ NextAction::array(0, new NextAction("caster form"), NULL),
+                /*A*/ NextAction::array(0, new NextAction("healing touch"), NULL),
+                /*C*/ NextAction::array(0, new NextAction("melee", 10.0f), NULL));
+        }
+        static ActionNode* rejuvenation(PlayerbotAI* ai)
+        {
+            return new ActionNode ("rejuvenation",
+                /*P*/ NextAction::array(0, new NextAction("caster form"), NULL),
+                /*A*/ NULL,
+                /*C*/ NULL);
+        }
+        static ActionNode* healing_touch(PlayerbotAI* ai)
+        {
+            return new ActionNode ("healing touch",
+                /*P*/ NextAction::array(0, new NextAction("caster form"), NULL),
+                /*A*/ NULL,
+                /*C*/ NULL);
+        }
+        static ActionNode* regrowth_on_party(PlayerbotAI* ai)
+        {
+            return new ActionNode ("regrowth on party",
+                /*P*/ NextAction::array(0, new NextAction("caster form"), NULL),
+                /*A*/ NextAction::array(0, new NextAction("healing touch on party"), NULL),
+                /*C*/ NextAction::array(0, new NextAction("melee", 10.0f), NULL));
+        }
+        static ActionNode* rejuvenation_on_party(PlayerbotAI* ai)
+        {
+            return new ActionNode ("rejuvenation on party",
+                /*P*/ NextAction::array(0, new NextAction("caster form"), NULL),
+                /*A*/ NULL,
+                /*C*/ NULL);
+        }
+        static ActionNode* healing_touch_on_party(PlayerbotAI* ai)
+        {
+            return new ActionNode ("healing touch on party",
+                /*P*/ NextAction::array(0, new NextAction("caster form"), NULL),
+                /*A*/ NULL,
+                /*C*/ NULL);
+        }
+    };
+
+    class FeralDruidStrategy : public GenericDruidStrategy
+    {
+    protected:
+        FeralDruidStrategy(PlayerbotAI* ai);
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual int GetType() { return STRATEGY_TYPE_COMBAT | STRATEGY_TYPE_MELEE; }
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/druid/GenericDruidNonCombatStrategy.cpp b/src/plugins/playerbot/strategy/druid/GenericDruidNonCombatStrategy.cpp
new file mode 100644
index 0000000..e6377da
--- /dev/null
+++ b/src/plugins/playerbot/strategy/druid/GenericDruidNonCombatStrategy.cpp
@@ -0,0 +1,73 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "DruidMultipliers.h"
+#include "GenericDruidNonCombatStrategy.h"
+
+using namespace ai;
+
+class GenericDruidNonCombatStrategyActionNodeFactory : public NamedObjectFactory<ActionNode>
+{
+public:
+    GenericDruidNonCombatStrategyActionNodeFactory()
+    {
+        creators["mark of the wild"] = &mark_of_the_wild;
+        creators["mark of the wild on party"] = &mark_of_the_wild_on_party;
+        creators["innervate"] = &innervate;
+    }
+private:
+    static ActionNode* mark_of_the_wild(PlayerbotAI* ai)
+    {
+        return new ActionNode ("mark of the wild",
+            /*P*/ NextAction::array(0, new NextAction("caster form"), NULL),
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+    static ActionNode* mark_of_the_wild_on_party(PlayerbotAI* ai)
+    {
+        return new ActionNode ("mark of the wild on party",
+            /*P*/ NextAction::array(0, new NextAction("caster form"), NULL),
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+    static ActionNode* innervate(PlayerbotAI* ai)
+    {
+        return new ActionNode ("innervate",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("drink"), NULL),
+            /*C*/ NULL);
+    }
+};
+
+GenericDruidNonCombatStrategy::GenericDruidNonCombatStrategy(PlayerbotAI* ai) : NonCombatStrategy(ai)
+{
+    actionNodeFactories.Add(new GenericDruidNonCombatStrategyActionNodeFactory());
+}
+
+void GenericDruidNonCombatStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    NonCombatStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "mark of the wild",
+        NextAction::array(0, new NextAction("mark of the wild", 12.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "mark of the wild on party",
+        NextAction::array(0, new NextAction("mark of the wild on party", 11.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "cure poison",
+        NextAction::array(0, new NextAction("abolish poison", 21.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "party member cure poison",
+        NextAction::array(0, new NextAction("abolish poison on party", 20.0f), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"party member dead",
+		NextAction::array(0, new NextAction("revive", 22.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "low mana",
+        NextAction::array(0, new NextAction("innervate", ACTION_EMERGENCY + 5), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/druid/GenericDruidNonCombatStrategy.h b/src/plugins/playerbot/strategy/druid/GenericDruidNonCombatStrategy.h
new file mode 100644
index 0000000..82cba15
--- /dev/null
+++ b/src/plugins/playerbot/strategy/druid/GenericDruidNonCombatStrategy.h
@@ -0,0 +1,16 @@
+#pragma once
+
+#include "../generic/NonCombatStrategy.h"
+
+namespace ai
+{
+    class GenericDruidNonCombatStrategy : public NonCombatStrategy
+    {
+    public:
+        GenericDruidNonCombatStrategy(PlayerbotAI* ai);
+        virtual string getName() { return "nc"; }
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+    };
+}
diff --git a/src/plugins/playerbot/strategy/druid/GenericDruidStrategy.cpp b/src/plugins/playerbot/strategy/druid/GenericDruidStrategy.cpp
new file mode 100644
index 0000000..3ba9308
--- /dev/null
+++ b/src/plugins/playerbot/strategy/druid/GenericDruidStrategy.cpp
@@ -0,0 +1,132 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "GenericDruidStrategy.h"
+#include "DruidAiObjectContext.h"
+
+using namespace ai;
+
+class GenericDruidStrategyActionNodeFactory : public NamedObjectFactory<ActionNode>
+{
+public:
+    GenericDruidStrategyActionNodeFactory()
+    {
+        creators["melee"] = &melee;
+        creators["caster form"] = &caster_form;
+        creators["cure poison"] = &cure_poison;
+        creators["cure poison on party"] = &cure_poison_on_party;
+        creators["abolish poison"] = &abolish_poison;
+        creators["abolish poison on party"] = &abolish_poison_on_party;
+        creators["rebirth"] = &rebirth;
+        creators["entangling roots on cc"] = &entangling_roots_on_cc;
+        creators["innervate"] = &innervate;
+    }
+
+private:
+    static ActionNode* melee(PlayerbotAI* ai)
+    {
+        return new ActionNode ("melee",
+            /*P*/ NULL,
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+    static ActionNode* caster_form(PlayerbotAI* ai)
+    {
+        return new ActionNode ("caster form",
+            /*P*/ NULL,
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+    static ActionNode* cure_poison(PlayerbotAI* ai)
+    {
+        return new ActionNode ("cure poison",
+            /*P*/ NULL,
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+    static ActionNode* cure_poison_on_party(PlayerbotAI* ai)
+    {
+        return new ActionNode ("cure poison on party",
+            /*P*/ NULL,
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+    static ActionNode* abolish_poison(PlayerbotAI* ai)
+    {
+        return new ActionNode ("abolish poison",
+            /*P*/ NULL,
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+    static ActionNode* abolish_poison_on_party(PlayerbotAI* ai)
+    {
+        return new ActionNode ("abolish poison on party",
+            /*P*/ NULL,
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+    static ActionNode* rebirth(PlayerbotAI* ai)
+    {
+        return new ActionNode ("rebirth",
+            /*P*/ NULL,
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+    static ActionNode* entangling_roots_on_cc(PlayerbotAI* ai)
+    {
+        return new ActionNode ("entangling roots on cc",
+            /*P*/ NextAction::array(0, new NextAction("caster form"), NULL),
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+    static ActionNode* innervate(PlayerbotAI* ai)
+    {
+        return new ActionNode ("innervate",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("mana potion"), NULL),
+            /*C*/ NULL);
+    }
+};
+
+GenericDruidStrategy::GenericDruidStrategy(PlayerbotAI* ai) : CombatStrategy(ai)
+{
+    actionNodeFactories.Add(new GenericDruidStrategyActionNodeFactory());
+}
+
+void GenericDruidStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    CombatStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "low health",
+        NextAction::array(0, new NextAction("regrowth", ACTION_MEDIUM_HEAL + 2), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "party member low health",
+        NextAction::array(0, new NextAction("regrowth on party", ACTION_MEDIUM_HEAL + 1), NULL)));
+
+
+    triggers.push_back(new TriggerNode(
+        "critical health",
+        NextAction::array(0, new NextAction("regrowth", ACTION_CRITICAL_HEAL + 2), new NextAction("healing touch", ACTION_CRITICAL_HEAL + 2), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "party member critical health",
+        NextAction::array(0,  new NextAction("regrowth on party", ACTION_CRITICAL_HEAL + 1), new NextAction("healing touch on party", ACTION_CRITICAL_HEAL + 1), NULL)));
+
+
+    triggers.push_back(new TriggerNode(
+        "cure poison",
+        NextAction::array(0, new NextAction("abolish poison", ACTION_DISPEL + 2), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "party member cure poison",
+        NextAction::array(0, new NextAction("abolish poison on party", ACTION_DISPEL + 1), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"party member dead",
+		NextAction::array(0, new NextAction("rebirth", ACTION_HIGH + 1), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "low mana",
+        NextAction::array(0, new NextAction("innervate", ACTION_EMERGENCY + 5), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/druid/GenericDruidStrategy.h b/src/plugins/playerbot/strategy/druid/GenericDruidStrategy.h
new file mode 100644
index 0000000..dc12a85
--- /dev/null
+++ b/src/plugins/playerbot/strategy/druid/GenericDruidStrategy.h
@@ -0,0 +1,18 @@
+#pragma once
+
+#include "../Strategy.h"
+#include "../generic/CombatStrategy.h"
+
+namespace ai
+{
+    class AiObjectContext;
+
+    class GenericDruidStrategy : public CombatStrategy
+    {
+    protected:
+        GenericDruidStrategy(PlayerbotAI* ai);
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+    };
+}
diff --git a/src/plugins/playerbot/strategy/druid/HealDruidStrategy.cpp b/src/plugins/playerbot/strategy/druid/HealDruidStrategy.cpp
new file mode 100644
index 0000000..5b1cfb3
--- /dev/null
+++ b/src/plugins/playerbot/strategy/druid/HealDruidStrategy.cpp
@@ -0,0 +1,57 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "DruidMultipliers.h"
+#include "HealDruidStrategy.h"
+
+using namespace ai;
+
+class HealDruidStrategyActionNodeFactory : public NamedObjectFactory<ActionNode>
+{
+public:
+    HealDruidStrategyActionNodeFactory()
+    {
+    }
+private:
+};
+
+HealDruidStrategy::HealDruidStrategy(PlayerbotAI* ai) : GenericDruidStrategy(ai)
+{
+    actionNodeFactories.Add(new HealDruidStrategyActionNodeFactory());
+}
+
+void HealDruidStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    GenericDruidStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "enemy out of spell",
+        NextAction::array(0, new NextAction("reach spell", ACTION_NORMAL + 9), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "tree form",
+        NextAction::array(0, new NextAction("tree form", ACTION_HIGH + 1), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "medium health",
+        NextAction::array(0, new NextAction("regrowth", ACTION_MEDIUM_HEAL + 2), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "party member medium health",
+        NextAction::array(0, new NextAction("regrowth on party", ACTION_MEDIUM_HEAL + 1), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "almost full health",
+        NextAction::array(0, new NextAction("rejuvenation", ACTION_LIGHT_HEAL + 2), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "party member almost full health",
+        NextAction::array(0, new NextAction("rejuvenation on party", ACTION_LIGHT_HEAL + 1), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "medium aoe heal",
+        NextAction::array(0, new NextAction("tranquility", ACTION_MEDIUM_HEAL + 3), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "entangling roots",
+        NextAction::array(0, new NextAction("entangling roots on cc", ACTION_HIGH + 1), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/druid/HealDruidStrategy.h b/src/plugins/playerbot/strategy/druid/HealDruidStrategy.h
new file mode 100644
index 0000000..a0440ba
--- /dev/null
+++ b/src/plugins/playerbot/strategy/druid/HealDruidStrategy.h
@@ -0,0 +1,18 @@
+#pragma once
+
+#include "GenericDruidStrategy.h"
+
+namespace ai
+{
+    class HealDruidStrategy : public GenericDruidStrategy
+    {
+    public:
+        HealDruidStrategy(PlayerbotAI* ai);
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "heal"; }
+        virtual int GetType() { return STRATEGY_TYPE_HEAL; }
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/generic/AttackEnemyPlayersStrategy.cpp b/src/plugins/playerbot/strategy/generic/AttackEnemyPlayersStrategy.cpp
new file mode 100644
index 0000000..43db065
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/AttackEnemyPlayersStrategy.cpp
@@ -0,0 +1,13 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "AttackEnemyPlayersStrategy.h"
+
+using namespace ai;
+
+void AttackEnemyPlayersStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "enemy player is attacking",
+        NextAction::array(0, new NextAction("attack enemy player", 61.0f), NULL)));
+}
+
diff --git a/src/plugins/playerbot/strategy/generic/AttackEnemyPlayersStrategy.h b/src/plugins/playerbot/strategy/generic/AttackEnemyPlayersStrategy.h
new file mode 100644
index 0000000..cd9ce7c
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/AttackEnemyPlayersStrategy.h
@@ -0,0 +1,16 @@
+#include "../generic/NonCombatStrategy.h"
+#pragma once
+
+namespace ai
+{
+    class AttackEnemyPlayersStrategy : public NonCombatStrategy
+    {
+    public:
+        AttackEnemyPlayersStrategy(PlayerbotAI* ai) : NonCombatStrategy(ai) {}
+        virtual string getName() { return "pvp"; }
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/generic/AttackRtiStrategy.cpp b/src/plugins/playerbot/strategy/generic/AttackRtiStrategy.cpp
new file mode 100644
index 0000000..d33bb74
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/AttackRtiStrategy.cpp
@@ -0,0 +1,14 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "AttackRtiStrategy.h"
+
+using namespace ai;
+
+
+void AttackRtiStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "no attackers",
+        NextAction::array(0, new NextAction("attack rti target", 60.0f), NULL)));
+}
+
diff --git a/src/plugins/playerbot/strategy/generic/AttackRtiStrategy.h b/src/plugins/playerbot/strategy/generic/AttackRtiStrategy.h
new file mode 100644
index 0000000..ad9662a
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/AttackRtiStrategy.h
@@ -0,0 +1,16 @@
+#include "../generic/NonCombatStrategy.h"
+#pragma once
+
+namespace ai
+{
+    class AttackRtiStrategy : public NonCombatStrategy
+    {
+    public:
+        AttackRtiStrategy(PlayerbotAI* ai) : NonCombatStrategy(ai) {}
+        virtual string getName() { return "attack rti"; }
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/generic/AttackWeakStrategy.cpp b/src/plugins/playerbot/strategy/generic/AttackWeakStrategy.cpp
new file mode 100644
index 0000000..d3a832a
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/AttackWeakStrategy.cpp
@@ -0,0 +1,13 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "AttackWeakStrategy.h"
+
+using namespace ai;
+
+void AttackWeakStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "not least hp target active",
+        NextAction::array(0, new NextAction("attack least hp target", 60.0f), NULL)));
+}
+
diff --git a/src/plugins/playerbot/strategy/generic/AttackWeakStrategy.h b/src/plugins/playerbot/strategy/generic/AttackWeakStrategy.h
new file mode 100644
index 0000000..c6c20c2
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/AttackWeakStrategy.h
@@ -0,0 +1,16 @@
+#include "../generic/NonCombatStrategy.h"
+#pragma once
+
+namespace ai
+{
+    class AttackWeakStrategy : public NonCombatStrategy
+    {
+    public:
+        AttackWeakStrategy(PlayerbotAI* ai) : NonCombatStrategy(ai) {}
+        virtual string getName() { return "attack weak"; }
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/generic/CastTimeStrategy.cpp b/src/plugins/playerbot/strategy/generic/CastTimeStrategy.cpp
new file mode 100644
index 0000000..7d1a483
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/CastTimeStrategy.cpp
@@ -0,0 +1,42 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "CastTimeStrategy.h"
+#include "../actions/GenericSpellActions.h"
+
+using namespace ai;
+
+float CastTimeMultiplier::GetValue(Action* action)
+{
+    if (action == NULL) return 1.0f;
+
+    uint8 targetHealth = AI_VALUE2(uint8, "health", "current target");
+    string name = action->getName();
+
+    if (action->GetTarget() != AI_VALUE(Unit*, "current target"))
+        return 1.0f;
+
+    if (targetHealth < sPlayerbotAIConfig.lowHealth && dynamic_cast<CastSpellAction*>(action))
+    {
+        uint32 spellId = AI_VALUE2(uint32, "spell id", name);
+        const SpellInfo* const pSpellInfo = sSpellMgr->GetSpellInfo(spellId);
+        if (!pSpellInfo)
+            return 1.0f;
+
+        Spell *spell = new Spell(bot, pSpellInfo, TRIGGERED_NONE);
+        int32 castTime = spell->GetCastTime();
+        delete spell;
+
+        if (spellId && castTime >= 3000)
+            return 0.0f;
+        else if (spellId && castTime >= 1500)
+            return 0.5f;
+    }
+
+    return 1.0f;
+}
+
+
+void CastTimeStrategy::InitMultipliers(std::list<Multiplier*> &multipliers)
+{
+    multipliers.push_back(new CastTimeMultiplier(ai));
+}
diff --git a/src/plugins/playerbot/strategy/generic/CastTimeStrategy.h b/src/plugins/playerbot/strategy/generic/CastTimeStrategy.h
new file mode 100644
index 0000000..a483fc0
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/CastTimeStrategy.h
@@ -0,0 +1,26 @@
+#pragma once
+
+namespace ai
+{
+
+    class CastTimeMultiplier : public Multiplier
+    {
+    public:
+        CastTimeMultiplier(PlayerbotAI* ai) : Multiplier(ai, "cast time") {}
+
+    public:
+        virtual float GetValue(Action* action);
+    };
+
+    class CastTimeStrategy : public Strategy
+    {
+    public:
+        CastTimeStrategy(PlayerbotAI* ai) : Strategy(ai) {}
+
+    public:
+        virtual void InitMultipliers(std::list<Multiplier*> &multipliers);
+        virtual string getName() { return "cast time"; }
+    };
+
+
+}
diff --git a/src/plugins/playerbot/strategy/generic/ChatCommandHandlerStrategy.cpp b/src/plugins/playerbot/strategy/generic/ChatCommandHandlerStrategy.cpp
new file mode 100644
index 0000000..991551e
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/ChatCommandHandlerStrategy.cpp
@@ -0,0 +1,177 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "ChatCommandHandlerStrategy.h"
+
+using namespace ai;
+
+class ChatCommandActionNodeFactoryInternal : public NamedObjectFactory<ActionNode>
+{
+public:
+    ChatCommandActionNodeFactoryInternal()
+    {
+        creators["tank attack chat shortcut"] = &tank_attack_chat_shortcut;
+    }
+
+private:
+    static ActionNode* tank_attack_chat_shortcut(PlayerbotAI* ai)
+    {
+        return new ActionNode ("tank attack chat shortcut",
+            /*P*/ NULL,
+            /*A*/ NULL,
+            /*C*/ NextAction::array(0, new NextAction("attack my target", 100.0f), NULL));
+    }
+};
+
+void ChatCommandHandlerStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    PassTroughStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "rep",
+        NextAction::array(0, new NextAction("reputation", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "q",
+        NextAction::array(0,
+            new NextAction("query quest", relevance),
+            new NextAction("query item usage", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "add all loot",
+        NextAction::array(0, new NextAction("add all loot", relevance), new NextAction("loot", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "u",
+        NextAction::array(0, new NextAction("use", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "c",
+        NextAction::array(0, new NextAction("item count", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "e",
+        NextAction::array(0, new NextAction("equip", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "ue",
+        NextAction::array(0, new NextAction("unequip", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "t",
+        NextAction::array(0, new NextAction("trade", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "nt",
+        NextAction::array(0, new NextAction("trade", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "s",
+        NextAction::array(0, new NextAction("sell", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "b",
+        NextAction::array(0, new NextAction("buy", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "r",
+        NextAction::array(0, new NextAction("reward", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "attack",
+        NextAction::array(0, new NextAction("attack my target", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "accept",
+        NextAction::array(0, new NextAction("accept quest", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "follow",
+        NextAction::array(0, new NextAction("follow chat shortcut", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "stay",
+        NextAction::array(0, new NextAction("stay chat shortcut", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "flee",
+        NextAction::array(0, new NextAction("flee chat shortcut", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "tank attack",
+        NextAction::array(0, new NextAction("tank attack chat shortcut", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "grind",
+        NextAction::array(0, new NextAction("grind chat shortcut", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "talk",
+        NextAction::array(0, new NextAction("gossip hello", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "cast",
+        NextAction::array(0, new NextAction("cast custom spell", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "revive",
+        NextAction::array(0, new NextAction("spirit healer", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "runaway",
+        NextAction::array(0, new NextAction("runaway chat shortcut", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "warning",
+        NextAction::array(0, new NextAction("runaway chat shortcut", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "max dps",
+        NextAction::array(0, new NextAction("max dps chat shortcut", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "attackers",
+        NextAction::array(0, new NextAction("tell attackers", relevance), NULL)));
+}
+
+
+
+ChatCommandHandlerStrategy::ChatCommandHandlerStrategy(PlayerbotAI* ai) : PassTroughStrategy(ai)
+{
+    actionNodeFactories.Add(new ChatCommandActionNodeFactoryInternal());
+
+    supported.push_back("quests");
+    supported.push_back("stats");
+    supported.push_back("leave");
+    supported.push_back("reputation");
+    supported.push_back("log");
+    supported.push_back("los");
+    supported.push_back("drop");
+    supported.push_back("ll");
+    supported.push_back("release");
+    supported.push_back("teleport");
+    supported.push_back("taxi");
+    supported.push_back("repair");
+    supported.push_back("talents");
+    supported.push_back("spells");
+    supported.push_back("co");
+    supported.push_back("nc");
+    supported.push_back("dead");
+    supported.push_back("trainer");
+    supported.push_back("chat");
+    supported.push_back("home");
+    supported.push_back("destroy");
+    supported.push_back("reset ai");
+    supported.push_back("emote");
+    supported.push_back("buff");
+    supported.push_back("help");
+    supported.push_back("gb");
+    supported.push_back("bank");
+    supported.push_back("invite");
+    supported.push_back("spell");
+    supported.push_back("rti");
+    supported.push_back("position");
+    supported.push_back("summon");
+    supported.push_back("who");
+    supported.push_back("save mana");
+    supported.push_back("formation");
+}
diff --git a/src/plugins/playerbot/strategy/generic/ChatCommandHandlerStrategy.h b/src/plugins/playerbot/strategy/generic/ChatCommandHandlerStrategy.h
new file mode 100644
index 0000000..c8c93b2
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/ChatCommandHandlerStrategy.h
@@ -0,0 +1,15 @@
+#pragma once
+#include "PassTroughStrategy.h"
+
+namespace ai
+{
+    class ChatCommandHandlerStrategy : public PassTroughStrategy
+    {
+    public:
+        ChatCommandHandlerStrategy(PlayerbotAI* ai);
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "chat"; }
+    };
+}
diff --git a/src/plugins/playerbot/strategy/generic/CombatStrategy.cpp b/src/plugins/playerbot/strategy/generic/CombatStrategy.cpp
new file mode 100644
index 0000000..4ef95b1
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/CombatStrategy.cpp
@@ -0,0 +1,12 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "CombatStrategy.h"
+
+using namespace ai;
+
+void CombatStrategy::InitTriggers(list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "invalid target",
+        NextAction::array(0, new NextAction("drop target", ACTION_HIGH + 9), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/generic/CombatStrategy.h b/src/plugins/playerbot/strategy/generic/CombatStrategy.h
new file mode 100644
index 0000000..475922f
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/CombatStrategy.h
@@ -0,0 +1,13 @@
+#pragma once
+
+namespace ai
+{
+    class CombatStrategy : public Strategy
+    {
+    public:
+        CombatStrategy(PlayerbotAI* ai) : Strategy(ai) {}
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual int GetType() { return STRATEGY_TYPE_COMBAT; }
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/generic/ConserveManaStrategy.cpp b/src/plugins/playerbot/strategy/generic/ConserveManaStrategy.cpp
new file mode 100644
index 0000000..b1c13fb
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/ConserveManaStrategy.cpp
@@ -0,0 +1,88 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "ConserveManaStrategy.h"
+#include "../../PlayerbotAIConfig.h"
+#include "../actions/GenericSpellActions.h"
+#include "../values/LastSpellCastValue.h"
+
+using namespace ai;
+
+float ConserveManaMultiplier::GetValue(Action* action)
+{
+    if (action == NULL) return 1.0f;
+
+    uint8 health = AI_VALUE2(uint8, "health", "self target");
+    uint8 targetHealth = AI_VALUE2(uint8, "health", "current target");
+    uint8 mana = AI_VALUE2(uint8, "mana", "self target");
+    bool hasMana = AI_VALUE2(bool, "has mana", "self target");
+    bool mediumMana = hasMana && mana < sPlayerbotAIConfig.mediumMana;
+
+    string name = action->getName();
+
+    if (health < sPlayerbotAIConfig.lowHealth)
+        return 1.0f;
+
+    if (name == "melee" || name == "reach melee" || name == "reach spell")
+        return 1.0f;
+
+    if (mediumMana && dynamic_cast<CastBuffSpellAction*>(action))
+        return 0.0f;
+
+    if (action->GetTarget() != AI_VALUE(Unit*, "current target"))
+        return 1.0f;
+
+    if (AI_VALUE(uint8, "balance") <= 50)
+        return 1.0f;
+
+    if (targetHealth < sPlayerbotAIConfig.lowHealth && dynamic_cast<CastDebuffSpellAction*>(action))
+        return 0.0f;
+
+    if (mediumMana && dynamic_cast<CastDebuffSpellAction*>(action))
+        return 0.0f;
+
+    return 1.0f;
+}
+
+float SaveManaMultiplier::GetValue(Action* action)
+{
+    if (action == NULL)
+        return 1.0f;
+
+    double saveLevel = AI_VALUE(double, "mana save level");
+    if (saveLevel <= 1.0)
+        return 1.0f;
+
+    CastSpellAction* spellAction = dynamic_cast<CastSpellAction*>(action);
+    if (!spellAction)
+        return 1.0f;
+
+    string spell = spellAction->getName();
+    uint32 spellId = AI_VALUE2(uint32, "spell id", spell);
+    const SpellInfo* const spellInfo = sSpellMgr->GetSpellInfo(spellId);
+    if (!spellInfo || spellInfo->PowerType != POWER_MANA)
+        return 1.0f;
+
+    int32 cost = spellInfo->ManaCost;
+    if (spellInfo->ManaCostPercentage)
+        cost += spellInfo->ManaCostPercentage * bot->GetCreateMana() / 100;
+
+    uint32 mana = bot->GetMaxPower(POWER_MANA);
+    double percent = (double)cost / (double)mana * 100.0f;
+
+    time_t lastCastTime = AI_VALUE2(time_t, "last spell cast time", spell);
+    if (!lastCastTime)
+        return 1.0f;
+
+    time_t elapsed = time(0) - lastCastTime;
+    if ((double)elapsed < 10 + pow(saveLevel, sqrt(percent)))
+        return 0.0f;
+
+    return 1.0f;
+}
+
+
+void ConserveManaStrategy::InitMultipliers(std::list<Multiplier*> &multipliers)
+{
+    multipliers.push_back(new ConserveManaMultiplier(ai));
+    multipliers.push_back(new SaveManaMultiplier(ai));
+}
diff --git a/src/plugins/playerbot/strategy/generic/ConserveManaStrategy.h b/src/plugins/playerbot/strategy/generic/ConserveManaStrategy.h
new file mode 100644
index 0000000..a206934
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/ConserveManaStrategy.h
@@ -0,0 +1,32 @@
+#pragma once
+
+namespace ai
+{
+    class ConserveManaMultiplier : public Multiplier
+    {
+    public:
+        ConserveManaMultiplier(PlayerbotAI* ai) : Multiplier(ai, "conserve mana") {}
+
+    public:
+        virtual float GetValue(Action* action);
+    };
+
+    class SaveManaMultiplier : public Multiplier
+    {
+    public:
+        SaveManaMultiplier(PlayerbotAI* ai) : Multiplier(ai, "save mana") {}
+
+    public:
+        virtual float GetValue(Action* action);
+    };
+
+    class ConserveManaStrategy : public Strategy
+    {
+    public:
+        ConserveManaStrategy(PlayerbotAI* ai) : Strategy(ai) {}
+
+    public:
+        virtual void InitMultipliers(std::list<Multiplier*> &multipliers);
+        virtual string getName() { return "conserve mana"; }
+    };
+}
diff --git a/src/plugins/playerbot/strategy/generic/DeadStrategy.cpp b/src/plugins/playerbot/strategy/generic/DeadStrategy.cpp
new file mode 100644
index 0000000..1c31adb
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/DeadStrategy.cpp
@@ -0,0 +1,23 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "../Strategy.h"
+#include "DeadStrategy.h"
+
+using namespace ai;
+
+void DeadStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    PassTroughStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "dead",
+        NextAction::array(0, new NextAction("revive from corpse", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "resurrect request",
+        NextAction::array(0, new NextAction("accept resurrect", relevance), NULL)));
+}
+
+DeadStrategy::DeadStrategy(PlayerbotAI* ai) : PassTroughStrategy(ai)
+{
+}
diff --git a/src/plugins/playerbot/strategy/generic/DeadStrategy.h b/src/plugins/playerbot/strategy/generic/DeadStrategy.h
new file mode 100644
index 0000000..4008570
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/DeadStrategy.h
@@ -0,0 +1,15 @@
+#pragma once
+#include "PassTroughStrategy.h"
+
+namespace ai
+{
+    class DeadStrategy : public PassTroughStrategy
+    {
+    public:
+        DeadStrategy(PlayerbotAI* ai);
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "dead"; }
+    };
+}
diff --git a/src/plugins/playerbot/strategy/generic/DpsAoeStrategy.cpp b/src/plugins/playerbot/strategy/generic/DpsAoeStrategy.cpp
new file mode 100644
index 0000000..40fa703
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/DpsAoeStrategy.cpp
@@ -0,0 +1,12 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "DpsAoeStrategy.h"
+
+using namespace ai;
+
+void DpsAoeStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "timer",
+        NextAction::array(0, new NextAction("dps assist", 50.0f), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/generic/DpsAoeStrategy.h b/src/plugins/playerbot/strategy/generic/DpsAoeStrategy.h
new file mode 100644
index 0000000..61ac9b2
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/DpsAoeStrategy.h
@@ -0,0 +1,18 @@
+#include "../generic/NonCombatStrategy.h"
+#pragma once
+
+namespace ai
+{
+    class DpsAoeStrategy : public NonCombatStrategy
+    {
+    public:
+        DpsAoeStrategy(PlayerbotAI* ai) : NonCombatStrategy(ai) {}
+        virtual string getName() { return "dps aoe"; }
+        virtual int GetType() { return STRATEGY_TYPE_DPS; }
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+    };
+
+
+}
diff --git a/src/plugins/playerbot/strategy/generic/DpsAssistStrategy.cpp b/src/plugins/playerbot/strategy/generic/DpsAssistStrategy.cpp
new file mode 100644
index 0000000..c38860d
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/DpsAssistStrategy.cpp
@@ -0,0 +1,15 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "DpsAssistStrategy.h"
+
+using namespace ai;
+
+void DpsAssistStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "no attackers",
+        NextAction::array(0, new NextAction("dps assist", 50.0f), NULL)));
+}
+
+
+
diff --git a/src/plugins/playerbot/strategy/generic/DpsAssistStrategy.h b/src/plugins/playerbot/strategy/generic/DpsAssistStrategy.h
new file mode 100644
index 0000000..4368d7b
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/DpsAssistStrategy.h
@@ -0,0 +1,16 @@
+#include "../generic/NonCombatStrategy.h"
+#pragma once
+
+namespace ai
+{
+    class DpsAssistStrategy : public NonCombatStrategy
+    {
+    public:
+        DpsAssistStrategy(PlayerbotAI* ai) : NonCombatStrategy(ai) {}
+        virtual string getName() { return "dps assist"; }
+		virtual int GetType() { return STRATEGY_TYPE_DPS; }
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+    };
+}
diff --git a/src/plugins/playerbot/strategy/generic/DuelStrategy.cpp b/src/plugins/playerbot/strategy/generic/DuelStrategy.cpp
new file mode 100644
index 0000000..92e9049
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/DuelStrategy.cpp
@@ -0,0 +1,24 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "DuelStrategy.h"
+
+using namespace ai;
+
+void DuelStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    PassTroughStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "duel requested",
+        NextAction::array(0, new NextAction("accept duel", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "no attackers",
+        NextAction::array(0, new NextAction("attack duel opponent", 70.0f), NULL)));
+}
+
+
+
+DuelStrategy::DuelStrategy(PlayerbotAI* ai) : PassTroughStrategy(ai)
+{
+}
diff --git a/src/plugins/playerbot/strategy/generic/DuelStrategy.h b/src/plugins/playerbot/strategy/generic/DuelStrategy.h
new file mode 100644
index 0000000..5828406
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/DuelStrategy.h
@@ -0,0 +1,15 @@
+#pragma once
+#include "PassTroughStrategy.h"
+
+namespace ai
+{
+    class DuelStrategy : public PassTroughStrategy
+    {
+    public:
+        DuelStrategy(PlayerbotAI* ai);
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "duel"; }
+    };
+}
diff --git a/src/plugins/playerbot/strategy/generic/EmoteStrategy.cpp b/src/plugins/playerbot/strategy/generic/EmoteStrategy.cpp
new file mode 100644
index 0000000..408ecd1
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/EmoteStrategy.cpp
@@ -0,0 +1,17 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "EmoteStrategy.h"
+
+using namespace ai;
+
+
+void EmoteStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "random",
+        NextAction::array(0, new NextAction("emote", 1.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "seldom",
+        NextAction::array(0, new NextAction("suggest what to do", 1.0f), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/generic/EmoteStrategy.h b/src/plugins/playerbot/strategy/generic/EmoteStrategy.h
new file mode 100644
index 0000000..7acbc70
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/EmoteStrategy.h
@@ -0,0 +1,16 @@
+#pragma once
+
+namespace ai
+{
+    class EmoteStrategy : public Strategy
+    {
+    public:
+        EmoteStrategy(PlayerbotAI* ai) : Strategy(ai) {}
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "emote"; }
+    };
+
+
+}
diff --git a/src/plugins/playerbot/strategy/generic/FleeStrategy.cpp b/src/plugins/playerbot/strategy/generic/FleeStrategy.cpp
new file mode 100644
index 0000000..4b16bc2
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/FleeStrategy.cpp
@@ -0,0 +1,26 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "FleeStrategy.h"
+
+using namespace ai;
+
+void FleeStrategy::InitTriggers(list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "panic",
+        NextAction::array(0, new NextAction("flee", ACTION_EMERGENCY + 9), NULL)));
+
+    triggers.push_back(new TriggerNode(
+       "critical health",
+       NextAction::array(0, new NextAction("flee", ACTION_MOVE + 9), NULL)));
+
+   triggers.push_back(new TriggerNode(
+       "low mana",
+       NextAction::array(0,  new NextAction("flee", ACTION_MOVE + 9), NULL)));}
+
+void FleeFromAddsStrategy::InitTriggers(list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "has nearest adds",
+        NextAction::array(0, new NextAction("runaway", 50.0f), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/generic/FleeStrategy.h b/src/plugins/playerbot/strategy/generic/FleeStrategy.h
new file mode 100644
index 0000000..4aa96b9
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/FleeStrategy.h
@@ -0,0 +1,21 @@
+#pragma once
+
+namespace ai
+{
+    class FleeStrategy : public Strategy
+    {
+    public:
+        FleeStrategy(PlayerbotAI* ai) : Strategy(ai) {}
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "flee"; };
+    };
+
+    class FleeFromAddsStrategy : public Strategy
+    {
+    public:
+        FleeFromAddsStrategy(PlayerbotAI* ai) : Strategy(ai) {}
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "flee from adds"; };
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/generic/FollowMasterStrategy.cpp b/src/plugins/playerbot/strategy/generic/FollowMasterStrategy.cpp
new file mode 100644
index 0000000..753811b
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/FollowMasterStrategy.cpp
@@ -0,0 +1,17 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "FollowMasterStrategy.h"
+
+using namespace ai;
+
+NextAction** FollowMasterStrategy::getDefaultActions()
+{
+    return NextAction::array(0, new NextAction("follow", 1.0f), NULL);
+}
+
+void FollowMasterStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "out of react range",
+        NextAction::array(0, new NextAction("tell out of react range", 10.0f), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/generic/FollowMasterStrategy.h b/src/plugins/playerbot/strategy/generic/FollowMasterStrategy.h
new file mode 100644
index 0000000..a43e330
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/FollowMasterStrategy.h
@@ -0,0 +1,16 @@
+#include "../generic/NonCombatStrategy.h"
+#pragma once
+
+namespace ai
+{
+    class FollowMasterStrategy : public NonCombatStrategy
+    {
+    public:
+        FollowMasterStrategy(PlayerbotAI* ai) : NonCombatStrategy(ai) {}
+        virtual string getName() { return "follow"; }
+        virtual NextAction** getDefaultActions();
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/generic/GrindingStrategy.cpp b/src/plugins/playerbot/strategy/generic/GrindingStrategy.cpp
new file mode 100644
index 0000000..259cc96
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/GrindingStrategy.cpp
@@ -0,0 +1,20 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "GrindingStrategy.h"
+
+using namespace ai;
+
+
+NextAction** GrindingStrategy::getDefaultActions()
+{
+    return NULL;
+}
+
+void GrindingStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "no target",
+        NextAction::array(0,
+        new NextAction("attack anything", 5.0f), NULL)));
+}
+
diff --git a/src/plugins/playerbot/strategy/generic/GrindingStrategy.h b/src/plugins/playerbot/strategy/generic/GrindingStrategy.h
new file mode 100644
index 0000000..ce42140
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/GrindingStrategy.h
@@ -0,0 +1,20 @@
+#include "../generic/NonCombatStrategy.h"
+#pragma once
+
+namespace ai
+{
+    class GrindingStrategy : public NonCombatStrategy
+    {
+    public:
+        GrindingStrategy(PlayerbotAI* ai) : NonCombatStrategy(ai) {}
+        virtual string getName() { return "grind"; }
+        virtual int GetType() { return STRATEGY_TYPE_DPS; }
+        NextAction** getDefaultActions();
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+    };
+
+
+
+}
diff --git a/src/plugins/playerbot/strategy/generic/GuardStrategy.cpp b/src/plugins/playerbot/strategy/generic/GuardStrategy.cpp
new file mode 100644
index 0000000..301322c
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/GuardStrategy.cpp
@@ -0,0 +1,16 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "GuardStrategy.h"
+
+using namespace ai;
+
+
+NextAction** GuardStrategy::getDefaultActions()
+{
+    return NextAction::array(0, new NextAction("guard", 4.0f), NULL);
+}
+
+void GuardStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+}
+
diff --git a/src/plugins/playerbot/strategy/generic/GuardStrategy.h b/src/plugins/playerbot/strategy/generic/GuardStrategy.h
new file mode 100644
index 0000000..8705ba3
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/GuardStrategy.h
@@ -0,0 +1,19 @@
+#include "../generic/NonCombatStrategy.h"
+#pragma once
+
+namespace ai
+{
+    class GuardStrategy : public NonCombatStrategy
+    {
+    public:
+        GuardStrategy(PlayerbotAI* ai) : NonCombatStrategy(ai) {}
+        virtual string getName() { return "guard"; }
+        NextAction** getDefaultActions();
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+    };
+
+
+
+}
diff --git a/src/plugins/playerbot/strategy/generic/KiteStrategy.cpp b/src/plugins/playerbot/strategy/generic/KiteStrategy.cpp
new file mode 100644
index 0000000..e329162
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/KiteStrategy.cpp
@@ -0,0 +1,16 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "KiteStrategy.h"
+
+using namespace ai;
+
+KiteStrategy::KiteStrategy(PlayerbotAI* ai) : Strategy(ai)
+{
+}
+
+void KiteStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "has aggro",
+        NextAction::array(0, new NextAction("runaway", 51.0f), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/generic/KiteStrategy.h b/src/plugins/playerbot/strategy/generic/KiteStrategy.h
new file mode 100644
index 0000000..2436a3d
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/KiteStrategy.h
@@ -0,0 +1,15 @@
+#pragma once
+
+namespace ai
+{
+    class KiteStrategy : public Strategy
+    {
+    public:
+        KiteStrategy(PlayerbotAI* ai);
+        virtual string getName() { return "kite"; }
+    
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/generic/LootNonCombatStrategy.cpp b/src/plugins/playerbot/strategy/generic/LootNonCombatStrategy.cpp
new file mode 100644
index 0000000..0701cf5
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/LootNonCombatStrategy.cpp
@@ -0,0 +1,29 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "LootNonCombatStrategy.h"
+
+using namespace ai;
+
+void LootNonCombatStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "loot available",
+        NextAction::array(0, new NextAction("loot", 6.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "far from loot target",
+        NextAction::array(0, new NextAction("move to loot", 7.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "can loot",
+        NextAction::array(0, new NextAction("open loot", 8.0f), NULL)));
+}
+
+void GatherStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "no possible targets",
+        NextAction::array(0, new NextAction("add gathering loot", 2.0f), NULL)));
+}
+
+
diff --git a/src/plugins/playerbot/strategy/generic/LootNonCombatStrategy.h b/src/plugins/playerbot/strategy/generic/LootNonCombatStrategy.h
new file mode 100644
index 0000000..5eecd63
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/LootNonCombatStrategy.h
@@ -0,0 +1,24 @@
+#pragma once
+
+namespace ai
+{
+    class LootNonCombatStrategy : public Strategy
+    {
+    public:
+        LootNonCombatStrategy(PlayerbotAI* ai) : Strategy(ai) {}
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "loot"; }
+    };
+
+    class GatherStrategy : public Strategy
+    {
+    public:
+        GatherStrategy(PlayerbotAI* ai) : Strategy(ai) {}
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "gather"; }
+    };
+}
diff --git a/src/plugins/playerbot/strategy/generic/MeleeCombatStrategy.cpp b/src/plugins/playerbot/strategy/generic/MeleeCombatStrategy.cpp
new file mode 100644
index 0000000..6bc8267
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/MeleeCombatStrategy.cpp
@@ -0,0 +1,23 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "MeleeCombatStrategy.h"
+
+using namespace ai;
+
+
+void MeleeCombatStrategy::InitTriggers(list<TriggerNode*> &triggers)
+{
+    CombatStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "not facing target",
+        NextAction::array(0, new NextAction("set facing", ACTION_NORMAL + 7), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "enemy out of melee",
+        NextAction::array(0, new NextAction("reach melee", ACTION_NORMAL + 8), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "enemy too close for melee",
+        NextAction::array(0, new NextAction("move out of enemy contact", ACTION_NORMAL + 8), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/generic/MeleeCombatStrategy.h b/src/plugins/playerbot/strategy/generic/MeleeCombatStrategy.h
new file mode 100644
index 0000000..eeeb90a
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/MeleeCombatStrategy.h
@@ -0,0 +1,16 @@
+#include "CombatStrategy.h"
+#include "../generic/CombatStrategy.h"
+#pragma once
+
+namespace ai
+{
+    class MeleeCombatStrategy : public CombatStrategy
+    {
+    public:
+        MeleeCombatStrategy(PlayerbotAI* ai) : CombatStrategy(ai) {}
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual int GetType() { return STRATEGY_TYPE_COMBAT | STRATEGY_TYPE_MELEE; }
+    };
+
+
+}
diff --git a/src/plugins/playerbot/strategy/generic/MoveRandomStrategy.cpp b/src/plugins/playerbot/strategy/generic/MoveRandomStrategy.cpp
new file mode 100644
index 0000000..0c7de2f
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/MoveRandomStrategy.cpp
@@ -0,0 +1,13 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "MoveRandomStrategy.h"
+
+using namespace ai;
+
+void MoveRandomStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "often",
+        NextAction::array(0, new NextAction("move random", 1.5f), NULL)));
+}
+
diff --git a/src/plugins/playerbot/strategy/generic/MoveRandomStrategy.h b/src/plugins/playerbot/strategy/generic/MoveRandomStrategy.h
new file mode 100644
index 0000000..ff453bf
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/MoveRandomStrategy.h
@@ -0,0 +1,16 @@
+#include "../generic/NonCombatStrategy.h"
+#pragma once
+
+namespace ai
+{
+    class MoveRandomStrategy : public NonCombatStrategy
+    {
+    public:
+        MoveRandomStrategy(PlayerbotAI* ai) : NonCombatStrategy(ai) {}
+        virtual string getName() { return "move random"; }
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/generic/NonCombatStrategy.cpp b/src/plugins/playerbot/strategy/generic/NonCombatStrategy.cpp
new file mode 100644
index 0000000..38b8227
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/NonCombatStrategy.cpp
@@ -0,0 +1,28 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "NonCombatStrategy.h"
+
+using namespace ai;
+
+void NonCombatStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "timer",
+        NextAction::array(0, new NextAction("check mount state", 1.0f), NULL)));
+}
+
+
+void LfgStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "no possible targets",
+        NextAction::array(0, new NextAction("lfg join", 1.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "lfg proposal",
+        NextAction::array(0, new NextAction("lfg accept", 1.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "lfg proposal active",
+        NextAction::array(0, new NextAction("lfg accept", 1.0f), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/generic/NonCombatStrategy.h b/src/plugins/playerbot/strategy/generic/NonCombatStrategy.h
new file mode 100644
index 0000000..5216679
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/NonCombatStrategy.h
@@ -0,0 +1,21 @@
+#pragma once
+
+namespace ai
+{
+    class NonCombatStrategy : public Strategy
+    {
+    public:
+        NonCombatStrategy(PlayerbotAI* ai) : Strategy(ai) {}
+		virtual int GetType() { return STRATEGY_TYPE_NONCOMBAT; }
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+    };
+
+    class LfgStrategy : public Strategy
+    {
+    public:
+        LfgStrategy(PlayerbotAI* ai) : Strategy(ai) {}
+		virtual int GetType() { return STRATEGY_TYPE_NONCOMBAT; }
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "lfg"; }
+    };
+}
diff --git a/src/plugins/playerbot/strategy/generic/PassTroughStrategy.h b/src/plugins/playerbot/strategy/generic/PassTroughStrategy.h
new file mode 100644
index 0000000..eddb031
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/PassTroughStrategy.h
@@ -0,0 +1,26 @@
+#pragma once
+
+namespace ai
+{
+    class PassTroughStrategy : public Strategy
+    {
+    public:
+        PassTroughStrategy(PlayerbotAI* ai, float relevance = 100.0f) : Strategy(ai), relevance(relevance) {}
+
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers)
+        {
+            for (list<string>::iterator i = supported.begin(); i != supported.end(); i++)
+            {
+                string s = i->c_str();
+
+                triggers.push_back(new TriggerNode(
+                    s, 
+                    NextAction::array(0, new NextAction(s, relevance), NULL)));
+            }
+        }
+
+    protected:
+        list<string> supported;
+        float relevance;
+    };
+}
diff --git a/src/plugins/playerbot/strategy/generic/PassiveStrategy.cpp b/src/plugins/playerbot/strategy/generic/PassiveStrategy.cpp
new file mode 100644
index 0000000..a4bb3fa
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/PassiveStrategy.cpp
@@ -0,0 +1,13 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "PassiveStrategy.h"
+#include "../PassiveMultiplier.h"
+
+using namespace ai;
+
+
+void PassiveStrategy::InitMultipliers(std::list<Multiplier*> &multipliers)
+{
+    multipliers.push_back(new PassiveMultiplier(ai));
+}
+
diff --git a/src/plugins/playerbot/strategy/generic/PassiveStrategy.h b/src/plugins/playerbot/strategy/generic/PassiveStrategy.h
new file mode 100644
index 0000000..8e96388
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/PassiveStrategy.h
@@ -0,0 +1,16 @@
+#pragma once
+
+namespace ai
+{
+    class PassiveStrategy : public Strategy
+    {
+    public:
+        PassiveStrategy(PlayerbotAI* ai) : Strategy(ai) {}
+
+    public:
+        virtual void InitMultipliers(std::list<Multiplier*> &multipliers);
+        virtual string getName() { return "passive"; }
+    };
+
+
+}
diff --git a/src/plugins/playerbot/strategy/generic/PullStrategy.cpp b/src/plugins/playerbot/strategy/generic/PullStrategy.cpp
new file mode 100644
index 0000000..5d82db3
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/PullStrategy.cpp
@@ -0,0 +1,52 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "../PassiveMultiplier.h"
+#include "PullStrategy.h"
+
+using namespace ai;
+
+class MagePullMultiplier : public PassiveMultiplier
+{
+public:
+    MagePullMultiplier(PlayerbotAI* ai, string action) : PassiveMultiplier(ai)
+    {
+        this->action = action;
+    }
+
+public:
+    virtual float GetValue(Action* action);
+
+private:
+    string action;
+};
+
+float MagePullMultiplier::GetValue(Action* action) 
+{
+    if (!action) 
+        return 1.0f;
+
+    string name = action->getName();
+    if (this->action == name ||
+        name == "reach spell" ||
+        name == "change strategy")
+        return 1.0f;
+
+    return PassiveMultiplier::GetValue(action);
+}
+
+NextAction** PullStrategy::getDefaultActions()
+{
+    return NextAction::array(0, new NextAction(action, 105.0f), new NextAction("follow", 104.0f), new NextAction("end pull", 103.0f), NULL);
+}
+
+void PullStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    RangedCombatStrategy::InitTriggers(triggers);
+}
+
+void PullStrategy::InitMultipliers(std::list<Multiplier*> &multipliers)
+{
+    multipliers.push_back(new MagePullMultiplier(ai, action));
+    RangedCombatStrategy::InitMultipliers(multipliers);
+}
+
diff --git a/src/plugins/playerbot/strategy/generic/PullStrategy.h b/src/plugins/playerbot/strategy/generic/PullStrategy.h
new file mode 100644
index 0000000..b19210a
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/PullStrategy.h
@@ -0,0 +1,24 @@
+#pragma once
+
+#include "RangedCombatStrategy.h"
+
+namespace ai
+{
+    class PullStrategy : public RangedCombatStrategy
+    {
+    public:
+        PullStrategy(PlayerbotAI* ai, string action) : RangedCombatStrategy(ai) 
+        {
+            this->action = action;
+        }
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual void InitMultipliers(std::list<Multiplier*> &multipliers);
+        virtual string getName() { return "pull"; }
+        virtual NextAction** getDefaultActions();
+
+    private:
+        string action;
+    };
+}
diff --git a/src/plugins/playerbot/strategy/generic/QuestStrategies.cpp b/src/plugins/playerbot/strategy/generic/QuestStrategies.cpp
new file mode 100644
index 0000000..62b3e43
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/QuestStrategies.cpp
@@ -0,0 +1,69 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "QuestStrategies.h"
+
+using namespace ai;
+
+QuestStrategy::QuestStrategy(PlayerbotAI* ai) : PassTroughStrategy(ai)
+{
+    supported.push_back("accept quest");
+}
+
+void QuestStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    PassTroughStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "quest share",
+        NextAction::array(0, new NextAction("accept quest share", relevance), NULL)));
+}
+
+
+void DefaultQuestStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    QuestStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "use game object",
+        NextAction::array(0,
+            new NextAction("talk to quest giver", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "gossip hello",
+        NextAction::array(0,
+            new NextAction("talk to quest giver", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "complete quest",
+        NextAction::array(0, new NextAction("talk to quest giver", relevance), NULL)));
+}
+
+DefaultQuestStrategy::DefaultQuestStrategy(PlayerbotAI* ai) : QuestStrategy(ai)
+{
+}
+
+
+
+void AcceptAllQuestsStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    QuestStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "use game object",
+        NextAction::array(0,
+            new NextAction("talk to quest giver", relevance), new NextAction("accept all quests", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "gossip hello",
+        NextAction::array(0,
+            new NextAction("talk to quest giver", relevance), new NextAction("accept all quests", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "complete quest",
+        NextAction::array(0, 
+            new NextAction("talk to quest giver", relevance), new NextAction("accept all quests", relevance), NULL)));
+}
+
+AcceptAllQuestsStrategy::AcceptAllQuestsStrategy(PlayerbotAI* ai) : QuestStrategy(ai)
+{
+}
diff --git a/src/plugins/playerbot/strategy/generic/QuestStrategies.h b/src/plugins/playerbot/strategy/generic/QuestStrategies.h
new file mode 100644
index 0000000..08423dd
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/QuestStrategies.h
@@ -0,0 +1,34 @@
+#pragma once
+#include "PassTroughStrategy.h"
+
+namespace ai
+{
+    class QuestStrategy : public PassTroughStrategy
+    {
+    public:
+        QuestStrategy(PlayerbotAI* ai);
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+    };
+
+    class DefaultQuestStrategy : public QuestStrategy
+    {
+    public:
+        DefaultQuestStrategy(PlayerbotAI* ai);
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "quest"; }
+    };
+
+    class AcceptAllQuestsStrategy : public QuestStrategy
+    {
+    public:
+        AcceptAllQuestsStrategy(PlayerbotAI* ai);
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "accept all quests"; }
+    };
+}
diff --git a/src/plugins/playerbot/strategy/generic/RacialsStrategy.cpp b/src/plugins/playerbot/strategy/generic/RacialsStrategy.cpp
new file mode 100644
index 0000000..58fa904
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/RacialsStrategy.cpp
@@ -0,0 +1,39 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "RacialsStrategy.h"
+
+using namespace ai;
+
+
+class RacialsStrategyActionNodeFactory : public NamedObjectFactory<ActionNode>
+{
+public:
+    RacialsStrategyActionNodeFactory()
+    {
+        creators["lifeblood"] = &lifeblood;
+    }
+private:
+    static ActionNode* lifeblood(PlayerbotAI* ai)
+    {
+        return new ActionNode ("lifeblood",  
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("gift of the naaru"), NULL), 
+            /*C*/ NULL);
+    }
+};
+
+void RacialsStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+	triggers.push_back(new TriggerNode(
+		"low health", 
+		NextAction::array(0, new NextAction("lifeblood", 71.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "low mana", 
+        NextAction::array(0, new NextAction("arcane torrent", ACTION_EMERGENCY + 6), NULL)));
+}
+
+RacialsStrategy::RacialsStrategy(PlayerbotAI* ai) : Strategy(ai)
+{
+    actionNodeFactories.Add(new RacialsStrategyActionNodeFactory());
+}
diff --git a/src/plugins/playerbot/strategy/generic/RacialsStrategy.h b/src/plugins/playerbot/strategy/generic/RacialsStrategy.h
new file mode 100644
index 0000000..6802178
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/RacialsStrategy.h
@@ -0,0 +1,15 @@
+#pragma once
+
+namespace ai
+{
+    class RacialsStrategy : public Strategy
+    {
+    public:
+        RacialsStrategy(PlayerbotAI* ai);
+        virtual string getName() { return "racials"; }
+    
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+    };
+
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/generic/RangedCombatStrategy.cpp b/src/plugins/playerbot/strategy/generic/RangedCombatStrategy.cpp
new file mode 100644
index 0000000..9fd6ad9
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/RangedCombatStrategy.cpp
@@ -0,0 +1,15 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "RangedCombatStrategy.h"
+
+using namespace ai;
+
+
+void RangedCombatStrategy::InitTriggers(list<TriggerNode*> &triggers)
+{
+    CombatStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "enemy out of spell",
+        NextAction::array(0, new NextAction("reach spell", ACTION_NORMAL + 9), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/generic/RangedCombatStrategy.h b/src/plugins/playerbot/strategy/generic/RangedCombatStrategy.h
new file mode 100644
index 0000000..a00cbc1
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/RangedCombatStrategy.h
@@ -0,0 +1,15 @@
+#include "CombatStrategy.h"
+#pragma once
+
+namespace ai
+{
+    class RangedCombatStrategy : public CombatStrategy
+    {
+    public:
+        RangedCombatStrategy(PlayerbotAI* ai) : CombatStrategy(ai) {}
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual int GetType() { return STRATEGY_TYPE_COMBAT | STRATEGY_TYPE_RANGED; }
+    };
+
+
+}
diff --git a/src/plugins/playerbot/strategy/generic/RunawayStrategy.cpp b/src/plugins/playerbot/strategy/generic/RunawayStrategy.cpp
new file mode 100644
index 0000000..5ac877b
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/RunawayStrategy.cpp
@@ -0,0 +1,18 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "RunawayStrategy.h"
+
+using namespace ai;
+
+
+NextAction** RunawayStrategy::getDefaultActions()
+{
+    return NextAction::array(0, new NextAction("runaway", 50.0f), NULL);
+}
+
+void RunawayStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "enemy too close for spell",
+        NextAction::array(0, new NextAction("runaway", 50.0f), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/generic/RunawayStrategy.h b/src/plugins/playerbot/strategy/generic/RunawayStrategy.h
new file mode 100644
index 0000000..d1c3ef5
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/RunawayStrategy.h
@@ -0,0 +1,16 @@
+#include "../generic/NonCombatStrategy.h"
+#pragma once
+
+namespace ai
+{
+    class RunawayStrategy : public NonCombatStrategy
+       {
+       public:
+           RunawayStrategy(PlayerbotAI* ai) : NonCombatStrategy(ai) {}
+           virtual string getName() { return "runaway"; }
+           virtual NextAction** getDefaultActions();
+           virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+       };
+
+
+}
diff --git a/src/plugins/playerbot/strategy/generic/SayStrategy.cpp b/src/plugins/playerbot/strategy/generic/SayStrategy.cpp
new file mode 100644
index 0000000..4a78afa
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/SayStrategy.cpp
@@ -0,0 +1,29 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "SayStrategy.h"
+
+using namespace ai;
+
+
+void SayStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "critical health",
+        NextAction::array(0, new NextAction("say::critical health", 99.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "low health",
+        NextAction::array(0, new NextAction("say::low health", 99.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "low mana",
+        NextAction::array(0, new NextAction("say::low mana", 99.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "tank aoe",
+        NextAction::array(0, new NextAction("say::taunt", 99.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "medium aoe",
+        NextAction::array(0, new NextAction("say::aoe", 99.0f), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/generic/SayStrategy.h b/src/plugins/playerbot/strategy/generic/SayStrategy.h
new file mode 100644
index 0000000..396b39b
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/SayStrategy.h
@@ -0,0 +1,16 @@
+#pragma once
+
+namespace ai
+{
+    class SayStrategy : public Strategy
+    {
+    public:
+        SayStrategy(PlayerbotAI* ai) : Strategy(ai) {}
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "say"; }
+    };
+
+
+}
diff --git a/src/plugins/playerbot/strategy/generic/StayStrategy.cpp b/src/plugins/playerbot/strategy/generic/StayStrategy.cpp
new file mode 100644
index 0000000..f8cbf96
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/StayStrategy.cpp
@@ -0,0 +1,11 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "StayStrategy.h"
+
+using namespace ai;
+
+NextAction** StayStrategy::getDefaultActions()
+{
+    return NextAction::array(0, new NextAction("stay", 1.0f), NULL);
+}
+
diff --git a/src/plugins/playerbot/strategy/generic/StayStrategy.h b/src/plugins/playerbot/strategy/generic/StayStrategy.h
new file mode 100644
index 0000000..d9f4229
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/StayStrategy.h
@@ -0,0 +1,14 @@
+#include "../generic/NonCombatStrategy.h"
+#pragma once
+
+namespace ai
+{
+    class StayStrategy : public NonCombatStrategy
+    {
+    public:
+        StayStrategy(PlayerbotAI* ai) : NonCombatStrategy(ai) {}
+        virtual string getName() { return "stay"; }
+        virtual NextAction** getDefaultActions();
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/generic/TankAoeStrategy.cpp b/src/plugins/playerbot/strategy/generic/TankAoeStrategy.cpp
new file mode 100644
index 0000000..29afdec
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/TankAoeStrategy.cpp
@@ -0,0 +1,12 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "TankAoeStrategy.h"
+
+using namespace ai;
+
+void TankAoeStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "tank aoe",
+        NextAction::array(0, new NextAction("tank assist", 50.0f), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/generic/TankAoeStrategy.h b/src/plugins/playerbot/strategy/generic/TankAoeStrategy.h
new file mode 100644
index 0000000..f9ed2fb
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/TankAoeStrategy.h
@@ -0,0 +1,18 @@
+#include "../generic/NonCombatStrategy.h"
+#pragma once
+
+namespace ai
+{
+    class TankAoeStrategy : public NonCombatStrategy
+    {
+    public:
+        TankAoeStrategy(PlayerbotAI* ai) : NonCombatStrategy(ai) {}
+        virtual string getName() { return "tank aoe"; }
+        virtual int GetType() { return STRATEGY_TYPE_TANK; }
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+    };
+
+
+}
diff --git a/src/plugins/playerbot/strategy/generic/TankAssistStrategy.cpp b/src/plugins/playerbot/strategy/generic/TankAssistStrategy.cpp
new file mode 100644
index 0000000..d54b8ef
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/TankAssistStrategy.cpp
@@ -0,0 +1,13 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "TankAssistStrategy.h"
+
+using namespace ai;
+
+
+void TankAssistStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "no attackers",
+        NextAction::array(0, new NextAction("tank assist", 50.0f), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/generic/TankAssistStrategy.h b/src/plugins/playerbot/strategy/generic/TankAssistStrategy.h
new file mode 100644
index 0000000..3ecbbb9
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/TankAssistStrategy.h
@@ -0,0 +1,17 @@
+#include "../generic/NonCombatStrategy.h"
+#pragma once
+
+namespace ai
+{
+    class TankAssistStrategy : public NonCombatStrategy
+    {
+    public:
+        TankAssistStrategy(PlayerbotAI* ai) : NonCombatStrategy(ai) {}
+        virtual string getName() { return "tank assist"; }
+        virtual int GetType() { return STRATEGY_TYPE_TANK; }
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/generic/TellTargetStrategy.cpp b/src/plugins/playerbot/strategy/generic/TellTargetStrategy.cpp
new file mode 100644
index 0000000..ce1340d
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/TellTargetStrategy.cpp
@@ -0,0 +1,13 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "TellTargetStrategy.h"
+
+using namespace ai;
+
+
+void TellTargetStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "target changed",
+        NextAction::array(0, new NextAction("tell target", 51.0f), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/generic/TellTargetStrategy.h b/src/plugins/playerbot/strategy/generic/TellTargetStrategy.h
new file mode 100644
index 0000000..22b2e2f
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/TellTargetStrategy.h
@@ -0,0 +1,16 @@
+#pragma once
+
+namespace ai
+{
+    class TellTargetStrategy : public Strategy
+    {
+    public:
+        TellTargetStrategy(PlayerbotAI* ai) : Strategy(ai) {}
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "TellTarget"; }
+    };
+
+
+}
diff --git a/src/plugins/playerbot/strategy/generic/ThreatStrategy.cpp b/src/plugins/playerbot/strategy/generic/ThreatStrategy.cpp
new file mode 100644
index 0000000..155dc24
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/ThreatStrategy.cpp
@@ -0,0 +1,32 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "ThreatStrategy.h"
+#include "../../PlayerbotAIConfig.h"
+#include "../actions/GenericSpellActions.h"
+
+using namespace ai;
+
+float ThreatMultiplier::GetValue(Action* action)
+{
+    if (action == NULL || action->getThreatType() == ACTION_THREAT_NONE)
+        return 1.0f;
+
+    if (action->getThreatType() == ACTION_THREAT_AOE)
+    {
+        uint8 threat = AI_VALUE2(uint8, "threat", "aoe");
+        if (threat >= 90)
+            return 0.0f;
+    }
+
+    uint8 threat = AI_VALUE2(uint8, "threat", "current target");
+
+    if (threat >= 90)
+        return 0.0f;
+
+    return 1.0f;
+}
+
+void ThreatStrategy::InitMultipliers(std::list<Multiplier*> &multipliers)
+{
+    multipliers.push_back(new ThreatMultiplier(ai));
+}
diff --git a/src/plugins/playerbot/strategy/generic/ThreatStrategy.h b/src/plugins/playerbot/strategy/generic/ThreatStrategy.h
new file mode 100644
index 0000000..406f433
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/ThreatStrategy.h
@@ -0,0 +1,25 @@
+#pragma once
+
+namespace ai
+{
+    class ThreatMultiplier : public Multiplier
+    {
+    public:
+        ThreatMultiplier(PlayerbotAI* ai) : Multiplier(ai, "threat") {}
+
+    public:
+        virtual float GetValue(Action* action);
+    };
+
+    class ThreatStrategy : public Strategy
+    {
+    public:
+        ThreatStrategy(PlayerbotAI* ai) : Strategy(ai) {}
+
+    public:
+        virtual void InitMultipliers(std::list<Multiplier*> &multipliers);
+        virtual string getName() { return "threat"; }
+    };
+
+
+}
diff --git a/src/plugins/playerbot/strategy/generic/UseFoodStrategy.cpp b/src/plugins/playerbot/strategy/generic/UseFoodStrategy.cpp
new file mode 100644
index 0000000..b141a46
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/UseFoodStrategy.cpp
@@ -0,0 +1,18 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "UseFoodStrategy.h"
+
+using namespace ai;
+
+void UseFoodStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    Strategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "critical health",
+        NextAction::array(0, new NextAction("food", 2.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "low mana",
+        NextAction::array(0, new NextAction("drink", 2.0f), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/generic/UseFoodStrategy.h b/src/plugins/playerbot/strategy/generic/UseFoodStrategy.h
new file mode 100644
index 0000000..b68ab35
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/UseFoodStrategy.h
@@ -0,0 +1,15 @@
+#pragma once
+
+namespace ai
+{
+    class UseFoodStrategy : public Strategy
+    {
+    public:
+        UseFoodStrategy(PlayerbotAI* ai) : Strategy(ai) {}
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "food"; }
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/generic/UsePotionsStrategy.cpp b/src/plugins/playerbot/strategy/generic/UsePotionsStrategy.cpp
new file mode 100644
index 0000000..09616bb
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/UsePotionsStrategy.cpp
@@ -0,0 +1,18 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "UsePotionsStrategy.h"
+
+using namespace ai;
+
+void UsePotionsStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    Strategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "critical health",
+        NextAction::array(0, new NextAction("healing potion", ACTION_MEDIUM_HEAL), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "low mana",
+        NextAction::array(0,  new NextAction("mana potion", ACTION_EMERGENCY), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/generic/UsePotionsStrategy.h b/src/plugins/playerbot/strategy/generic/UsePotionsStrategy.h
new file mode 100644
index 0000000..b48f89f
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/UsePotionsStrategy.h
@@ -0,0 +1,15 @@
+#pragma once
+
+namespace ai
+{
+    class UsePotionsStrategy : public Strategy
+    {
+    public:
+        UsePotionsStrategy(PlayerbotAI* ai) : Strategy(ai) {}
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "potions"; }
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/generic/WorldPacketHandlerStrategy.cpp b/src/plugins/playerbot/strategy/generic/WorldPacketHandlerStrategy.cpp
new file mode 100644
index 0000000..e05fec5
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/WorldPacketHandlerStrategy.cpp
@@ -0,0 +1,106 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "WorldPacketHandlerStrategy.h"
+
+using namespace ai;
+
+void WorldPacketHandlerStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    PassTroughStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "group invite",
+        NextAction::array(0, new NextAction("accept invitation", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "group set leader",
+        NextAction::array(0, new NextAction("leader", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "not enough money",
+        NextAction::array(0, new NextAction("tell not enough money", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "not enough reputation",
+        NextAction::array(0, new NextAction("tell not enough reputation", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "cannot equip",
+        NextAction::array(0, new NextAction("tell cannot equip", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "use game object",
+        NextAction::array(0,
+            new NextAction("add loot", relevance),
+            new NextAction("use meeting stone", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "gossip hello",
+        NextAction::array(0,
+            new NextAction("trainer", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "activate taxi",
+        NextAction::array(0, new NextAction("remember taxi", relevance), new NextAction("taxi", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "taxi done",
+        NextAction::array(0, new NextAction("taxi", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "trade status",
+        NextAction::array(0, new NextAction("accept trade", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "area trigger",
+        NextAction::array(0, new NextAction("reach area trigger", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "within area trigger",
+        NextAction::array(0, new NextAction("area trigger", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "loot response",
+        NextAction::array(0, new NextAction("store loot", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "item push result",
+        NextAction::array(0, new NextAction("query item usage", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "ready check finished",
+        NextAction::array(0, new NextAction("finish ready check", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "often",
+        NextAction::array(0, new NextAction("security check", relevance), new NextAction("check mail", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "guild invite",
+        NextAction::array(0, new NextAction("guild accept", relevance), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "seldom",
+        NextAction::array(0, new NextAction("lfg leave", relevance), NULL)));
+
+}
+
+WorldPacketHandlerStrategy::WorldPacketHandlerStrategy(PlayerbotAI* ai) : PassTroughStrategy(ai)
+{
+    supported.push_back("loot roll");
+    supported.push_back("check mount state");
+    supported.push_back("quest objective completed");
+    supported.push_back("party command");
+    supported.push_back("ready check");
+    supported.push_back("uninvite");
+    supported.push_back("lfg role check");
+    supported.push_back("lfg teleport");
+}
+
+
+void ReadyCheckStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "timer",
+        NextAction::array(0, new NextAction("ready check", relevance), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/generic/WorldPacketHandlerStrategy.h b/src/plugins/playerbot/strategy/generic/WorldPacketHandlerStrategy.h
new file mode 100644
index 0000000..6a5a44d
--- /dev/null
+++ b/src/plugins/playerbot/strategy/generic/WorldPacketHandlerStrategy.h
@@ -0,0 +1,25 @@
+#pragma once
+#include "PassTroughStrategy.h"
+
+namespace ai
+{
+    class WorldPacketHandlerStrategy : public PassTroughStrategy
+    {
+    public:
+        WorldPacketHandlerStrategy(PlayerbotAI* ai);
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "default"; }
+    };
+
+    class ReadyCheckStrategy : public PassTroughStrategy
+    {
+    public:
+        ReadyCheckStrategy(PlayerbotAI* ai) : PassTroughStrategy(ai) {}
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "ready check"; }
+    };
+}
diff --git a/src/plugins/playerbot/strategy/hunter/DpsHunterStrategy.cpp b/src/plugins/playerbot/strategy/hunter/DpsHunterStrategy.cpp
new file mode 100644
index 0000000..bb6c477
--- /dev/null
+++ b/src/plugins/playerbot/strategy/hunter/DpsHunterStrategy.cpp
@@ -0,0 +1,118 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+
+#include "HunterMultipliers.h"
+#include "DpsHunterStrategy.h"
+
+using namespace ai;
+
+class DpsHunterStrategyActionNodeFactory : public NamedObjectFactory<ActionNode>
+{
+public:
+    DpsHunterStrategyActionNodeFactory()
+    {
+        creators["aimed shot"] = &aimed_shot;
+        creators["chimera shot"] = &chimera_shot;
+        creators["explosive shot"] = &explosive_shot;
+        creators["concussive shot"] = &concussive_shot;
+        creators["viper sting"] = &viper_sting;
+    }
+private:
+    static ActionNode* viper_sting(PlayerbotAI* ai)
+    {
+        return new ActionNode ("viper sting",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("mana potion", 10.0f), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* aimed_shot(PlayerbotAI* ai)
+    {
+        return new ActionNode ("aimed shot",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("chimera shot", 10.0f), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* chimera_shot(PlayerbotAI* ai)
+    {
+        return new ActionNode ("chimera shot",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("arcane shot", 10.0f), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* explosive_shot(PlayerbotAI* ai)
+    {
+        return new ActionNode ("explosive shot",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("aimed shot"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* concussive_shot(PlayerbotAI* ai)
+    {
+        return new ActionNode ("concussive shot",
+            /*P*/ NULL,
+            /*A*/ NULL,
+            /*C*/ NextAction::array(0, new NextAction("wyvern sting", 11.0f), NULL));
+    }
+
+};
+
+DpsHunterStrategy::DpsHunterStrategy(PlayerbotAI* ai) : GenericHunterStrategy(ai)
+{
+    actionNodeFactories.Add(new DpsHunterStrategyActionNodeFactory());
+}
+
+NextAction** DpsHunterStrategy::getDefaultActions()
+{
+    return NextAction::array(0, new NextAction("explosive shot", 11.0f), new NextAction("auto shot", 10.0f), NULL);
+}
+
+void DpsHunterStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    GenericHunterStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "black arrow",
+        NextAction::array(0, new NextAction("black arrow", 51.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "low mana",
+        NextAction::array(0, new NextAction("viper sting", ACTION_EMERGENCY + 5), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "no pet",
+        NextAction::array(0, new NextAction("call pet", 60.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "hunters pet low health",
+        NextAction::array(0, new NextAction("mend pet", 60.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "hunter's mark",
+        NextAction::array(0, new NextAction("hunter's mark", 52.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "freezing trap",
+        NextAction::array(0, new NextAction("freezing trap", 83.0f), NULL)));
+}
+
+void DpsAoeHunterStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "medium aoe",
+        NextAction::array(0, new NextAction("multi-shot", 20.0f), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"high aoe",
+		NextAction::array(0, new NextAction("volley", 20.0f), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"serpent sting on attacker",
+		NextAction::array(0, new NextAction("serpent sting on attacker", 49.0f), NULL)));
+}
+
+void DpsHunterDebuffStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "no stings",
+        NextAction::array(0, new NextAction("serpent sting", 50.0f), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/hunter/DpsHunterStrategy.h b/src/plugins/playerbot/strategy/hunter/DpsHunterStrategy.h
new file mode 100644
index 0000000..4992e0e
--- /dev/null
+++ b/src/plugins/playerbot/strategy/hunter/DpsHunterStrategy.h
@@ -0,0 +1,39 @@
+#pragma once
+
+#include "GenericHunterStrategy.h"
+#include "../generic/CombatStrategy.h"
+
+namespace ai
+{
+    class DpsHunterStrategy : public GenericHunterStrategy
+    {
+    public:
+        DpsHunterStrategy(PlayerbotAI* ai);
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "dps"; }
+        virtual NextAction** getDefaultActions();
+
+    };
+
+    class DpsAoeHunterStrategy : public CombatStrategy
+    {
+    public:
+        DpsAoeHunterStrategy(PlayerbotAI* ai) : CombatStrategy(ai) {}
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "aoe"; }
+    };
+
+    class DpsHunterDebuffStrategy : public CombatStrategy
+    {
+    public:
+        DpsHunterDebuffStrategy(PlayerbotAI* ai) : CombatStrategy(ai) {}
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "dps debuff"; }
+    };
+}
diff --git a/src/plugins/playerbot/strategy/hunter/GenericHunterNonCombatStrategy.cpp b/src/plugins/playerbot/strategy/hunter/GenericHunterNonCombatStrategy.cpp
new file mode 100644
index 0000000..6fab572
--- /dev/null
+++ b/src/plugins/playerbot/strategy/hunter/GenericHunterNonCombatStrategy.cpp
@@ -0,0 +1,58 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "HunterMultipliers.h"
+#include "GenericHunterNonCombatStrategy.h"
+
+using namespace ai;
+
+class GenericHunterNonCombatStrategyActionNodeFactory : public NamedObjectFactory<ActionNode>
+{
+public:
+    GenericHunterNonCombatStrategyActionNodeFactory()
+    {
+        creators["rapid fire"] = &rapid_fire;
+        creators["boost"] = &rapid_fire;
+        creators["aspect of the pack"] = &aspect_of_the_pack;
+    }
+private:
+    static ActionNode* rapid_fire(PlayerbotAI* ai)
+    {
+        return new ActionNode ("rapid fire",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("readiness"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* aspect_of_the_pack(PlayerbotAI* ai)
+    {
+        return new ActionNode ("aspect of the pack",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("aspect of the cheetah"), NULL),
+            /*C*/ NULL);
+    }
+};
+
+GenericHunterNonCombatStrategy::GenericHunterNonCombatStrategy(PlayerbotAI* ai) : NonCombatStrategy(ai)
+{
+    actionNodeFactories.Add(new GenericHunterNonCombatStrategyActionNodeFactory());
+}
+
+void GenericHunterNonCombatStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    NonCombatStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "trueshot aura",
+        NextAction::array(0, new NextAction("trueshot aura", 2.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "no pet",
+        NextAction::array(0, new NextAction("call pet", 60.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "hunters pet dead",
+        NextAction::array(0, new NextAction("revive pet", 60.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "hunters pet low health",
+        NextAction::array(0, new NextAction("mend pet", 60.0f), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/hunter/GenericHunterNonCombatStrategy.h b/src/plugins/playerbot/strategy/hunter/GenericHunterNonCombatStrategy.h
new file mode 100644
index 0000000..d01486d
--- /dev/null
+++ b/src/plugins/playerbot/strategy/hunter/GenericHunterNonCombatStrategy.h
@@ -0,0 +1,17 @@
+#pragma once
+
+#include "../generic/NonCombatStrategy.h"
+
+namespace ai
+{
+    class GenericHunterNonCombatStrategy : public NonCombatStrategy
+    {
+    public:
+        GenericHunterNonCombatStrategy(PlayerbotAI* ai);
+        virtual string getName() { return "nc"; }
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/hunter/GenericHunterStrategy.cpp b/src/plugins/playerbot/strategy/hunter/GenericHunterStrategy.cpp
new file mode 100644
index 0000000..e4c5d45
--- /dev/null
+++ b/src/plugins/playerbot/strategy/hunter/GenericHunterStrategy.cpp
@@ -0,0 +1,66 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "GenericHunterStrategy.h"
+#include "HunterAiObjectContext.h"
+
+using namespace ai;
+
+class GenericHunterStrategyActionNodeFactory : public NamedObjectFactory<ActionNode>
+{
+public:
+    GenericHunterStrategyActionNodeFactory()
+    {
+        creators["rapid fire"] = &rapid_fire;
+        creators["boost"] = &rapid_fire;
+        creators["aspect of the pack"] = &aspect_of_the_pack;
+        creators["feign death"] = &feign_death;
+    }
+private:
+    static ActionNode* rapid_fire(PlayerbotAI* ai)
+    {
+        return new ActionNode ("rapid fire",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("readiness"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* aspect_of_the_pack(PlayerbotAI* ai)
+    {
+        return new ActionNode ("aspect of the pack",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("aspect of the cheetah"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* feign_death(PlayerbotAI* ai)
+    {
+        return new ActionNode ("feign death",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("flee"), NULL),
+            /*C*/ NULL);
+    }
+};
+
+GenericHunterStrategy::GenericHunterStrategy(PlayerbotAI* ai) : RangedCombatStrategy(ai)
+{
+    actionNodeFactories.Add(new GenericHunterStrategyActionNodeFactory());
+}
+
+void GenericHunterStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    RangedCombatStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "enemy too close for spell",
+        NextAction::array(0, new NextAction("wing clip", 50.0f), new NextAction("flee",49.0f), new NextAction("concussive shot", 48.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "medium threat",
+        NextAction::array(0, new NextAction("feign death", 52.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "hunters pet low health",
+        NextAction::array(0, new NextAction("mend pet", 60.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "rapid fire",
+        NextAction::array(0, new NextAction("rapid fire", 55.0f), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/hunter/GenericHunterStrategy.h b/src/plugins/playerbot/strategy/hunter/GenericHunterStrategy.h
new file mode 100644
index 0000000..f2db28c
--- /dev/null
+++ b/src/plugins/playerbot/strategy/hunter/GenericHunterStrategy.h
@@ -0,0 +1,20 @@
+#pragma once
+
+#include "../Strategy.h"
+#include "../generic/RangedCombatStrategy.h"
+
+namespace ai
+{
+    class AiObjectContext;
+
+    class GenericHunterStrategy : public RangedCombatStrategy
+    {
+    public:
+        GenericHunterStrategy(PlayerbotAI* ai);
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "hunter"; }
+    };
+}
+
diff --git a/src/plugins/playerbot/strategy/hunter/HunterActions.cpp b/src/plugins/playerbot/strategy/hunter/HunterActions.cpp
new file mode 100644
index 0000000..bdf6761
--- /dev/null
+++ b/src/plugins/playerbot/strategy/hunter/HunterActions.cpp
@@ -0,0 +1,26 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "../actions/GenericActions.h"
+#include "HunterActions.h"
+
+using namespace ai;
+
+bool CastSerpentStingAction::isUseful()
+{
+    return AI_VALUE2(uint8, "health", "current target") > 50;
+}
+
+bool CastViperStingAction::isUseful()
+{
+    return AI_VALUE2(uint8, "mana", "self target") < 50 && AI_VALUE2(uint8, "mana", "current target") >= 30;
+}
+
+bool CastAspectOfTheCheetahAction::isUseful() 
+{
+    return !ai->HasAnyAuraOf(GetTarget(), "aspect of the cheetah", "aspect of the pack", NULL);
+}
+
+Value<Unit*>* CastFreezingTrap::GetTargetValue()
+{
+    return context->GetValue<Unit*>("cc target", "freezing trap");
+}
diff --git a/src/plugins/playerbot/strategy/hunter/HunterActions.h b/src/plugins/playerbot/strategy/hunter/HunterActions.h
new file mode 100644
index 0000000..9a1072f
--- /dev/null
+++ b/src/plugins/playerbot/strategy/hunter/HunterActions.h
@@ -0,0 +1,158 @@
+#pragma once
+
+#include "../actions/GenericActions.h"
+
+namespace ai
+{
+    BEGIN_RANGED_SPELL_ACTION(CastHuntersMarkAction, "hunter's mark")
+    END_SPELL_ACTION()
+
+    BEGIN_RANGED_SPELL_ACTION(CastAutoShotAction, "auto shot")
+    END_SPELL_ACTION()
+
+    BEGIN_RANGED_SPELL_ACTION(CastArcaneShotAction, "arcane shot")
+    END_SPELL_ACTION()
+
+    BEGIN_RANGED_SPELL_ACTION(CastExplosiveShotAction, "explosive shot")
+    END_SPELL_ACTION()
+
+
+    BEGIN_RANGED_SPELL_ACTION(CastAimedShotAction, "aimed shot")
+    END_SPELL_ACTION()
+
+    BEGIN_RANGED_SPELL_ACTION(CastChimeraShotAction, "chimera shot")
+    END_SPELL_ACTION()
+
+    BEGIN_RANGED_SPELL_ACTION(CastConcussiveShotAction, "concussive shot")
+    END_SPELL_ACTION()
+
+    BEGIN_RANGED_SPELL_ACTION(CastDistractingShotAction, "distracting shot")
+    END_SPELL_ACTION()
+
+    BEGIN_RANGED_SPELL_ACTION(CastMultiShotAction, "multi-shot")
+    END_SPELL_ACTION()
+
+	BEGIN_RANGED_SPELL_ACTION(CastVolleyAction, "volley")
+	END_SPELL_ACTION()
+
+    BEGIN_RANGED_SPELL_ACTION(CastSerpentStingAction, "serpent sting")
+    virtual bool isUseful();
+    END_SPELL_ACTION()
+
+    BEGIN_RANGED_SPELL_ACTION(CastWyvernStingAction, "wyvern sting")
+    END_SPELL_ACTION()
+
+    BEGIN_RANGED_SPELL_ACTION(CastViperStingAction, "viper sting")
+    virtual bool isUseful();
+    END_SPELL_ACTION()
+
+    BEGIN_RANGED_SPELL_ACTION(CastScorpidStingAction, "scorpid sting")
+    END_SPELL_ACTION()
+
+	class CastAspectOfTheHawkAction : public CastBuffSpellAction
+	{
+	public:
+		CastAspectOfTheHawkAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "aspect of the hawk") {}
+	};
+
+	class CastAspectOfTheWildAction : public CastBuffSpellAction
+	{
+	public:
+		CastAspectOfTheWildAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "aspect of the wild") {}
+	};
+
+	class CastAspectOfTheCheetahAction : public CastBuffSpellAction
+	{
+	public:
+		CastAspectOfTheCheetahAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "aspect of the cheetah") {}
+		virtual bool isUseful();
+	};
+
+	class CastAspectOfThePackAction : public CastBuffSpellAction
+	{
+	public:
+		CastAspectOfThePackAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "aspect of the pack") {}
+	};
+
+	class CastAspectOfTheViperAction : public CastBuffSpellAction
+	{
+	public:
+		CastAspectOfTheViperAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "aspect of the viper") {}
+	};
+
+	class CastCallPetAction : public CastBuffSpellAction
+	{
+	public:
+		CastCallPetAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "call pet") {}
+	};
+
+	class CastMendPetAction : public CastAuraSpellAction
+	{
+	public:
+		CastMendPetAction(PlayerbotAI* ai) : CastAuraSpellAction(ai, "mend pet") {}
+		virtual string GetTargetName() { return "pet target"; }
+	};
+
+	class CastRevivePetAction : public CastBuffSpellAction
+	{
+	public:
+		CastRevivePetAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "revive pet") {}
+	};
+
+    class CastTrueshotAuraAction : public CastBuffSpellAction
+    {
+    public:
+        CastTrueshotAuraAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "trueshot aura") {}
+    };
+
+    class CastFeignDeathAction : public CastBuffSpellAction
+    {
+    public:
+        CastFeignDeathAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "feign death") {}
+    };
+
+	class CastRapidFireAction : public CastBuffSpellAction
+	{
+	public:
+		CastRapidFireAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "rapid fire") {}
+	};
+
+	class CastReadinessAction : public CastBuffSpellAction
+	{
+	public:
+		CastReadinessAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "readiness") {}
+	};
+
+	class CastBlackArrow : public CastDebuffSpellAction
+	{
+	public:
+		CastBlackArrow(PlayerbotAI* ai) : CastDebuffSpellAction(ai, "black arrow") {}
+	};
+
+    class CastFreezingTrap : public CastDebuffSpellAction
+    {
+    public:
+        CastFreezingTrap(PlayerbotAI* ai) : CastDebuffSpellAction(ai, "freezing trap") {}
+        virtual Value<Unit*>* GetTargetValue();
+    };
+
+    class CastWingClipAction : public CastMeleeSpellAction
+    {
+    public:
+        CastWingClipAction(PlayerbotAI* ai) : CastMeleeSpellAction(ai, "wing clip") {}
+        virtual bool isUseful()
+        {
+            return CastMeleeSpellAction::isUseful() && !ai->HasAura(spell, GetTarget());
+        }
+        virtual NextAction** getPrerequisites()
+        {
+            return NULL;
+        }
+    };
+
+    class CastSerpentStingOnAttackerAction : public CastDebuffSpellOnAttackerAction
+    {
+    public:
+        CastSerpentStingOnAttackerAction(PlayerbotAI* ai) : CastDebuffSpellOnAttackerAction(ai, "serpent sting") {}
+    };
+}
diff --git a/src/plugins/playerbot/strategy/hunter/HunterAiObjectContext.cpp b/src/plugins/playerbot/strategy/hunter/HunterAiObjectContext.cpp
new file mode 100644
index 0000000..dd62523
--- /dev/null
+++ b/src/plugins/playerbot/strategy/hunter/HunterAiObjectContext.cpp
@@ -0,0 +1,191 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "HunterActions.h"
+#include "HunterTriggers.h"
+#include "HunterAiObjectContext.h"
+#include "DpsHunterStrategy.h"
+#include "GenericHunterNonCombatStrategy.h"
+#include "HunterBuffStrategies.h"
+#include "../NamedObjectContext.h"
+
+using namespace ai;
+
+
+namespace ai
+{
+    namespace hunter
+    {
+        using namespace ai;
+
+        class StrategyFactoryInternal : public NamedObjectContext<Strategy>
+        {
+        public:
+            StrategyFactoryInternal()
+            {
+                creators["dps"] = &hunter::StrategyFactoryInternal::dps;
+                creators["nc"] = &hunter::StrategyFactoryInternal::nc;
+                creators["aoe"] = &hunter::StrategyFactoryInternal::aoe;
+                creators["dps debuff"] = &hunter::StrategyFactoryInternal::dps_debuff;
+            }
+
+        private:
+            static Strategy* aoe(PlayerbotAI* ai) { return new DpsAoeHunterStrategy(ai); }
+            static Strategy* dps(PlayerbotAI* ai) { return new DpsHunterStrategy(ai); }
+            static Strategy* nc(PlayerbotAI* ai) { return new GenericHunterNonCombatStrategy(ai); }
+            static Strategy* dps_debuff(PlayerbotAI* ai) { return new DpsHunterDebuffStrategy(ai); }
+        };
+
+        class BuffStrategyFactoryInternal : public NamedObjectContext<Strategy>
+        {
+        public:
+            BuffStrategyFactoryInternal() : NamedObjectContext<Strategy>(false, true)
+            {
+                creators["bspeed"] = &hunter::BuffStrategyFactoryInternal::bspeed;
+                creators["bdps"] = &hunter::BuffStrategyFactoryInternal::bdps;
+                creators["bmana"] = &hunter::BuffStrategyFactoryInternal::bmana;
+                creators["rnature"] = &hunter::BuffStrategyFactoryInternal::rnature;
+            }
+
+        private:
+            static Strategy* bspeed(PlayerbotAI* ai) { return new HunterBuffSpeedStrategy(ai); }
+            static Strategy* bdps(PlayerbotAI* ai) { return new HunterBuffDpsStrategy(ai); }
+            static Strategy* bmana(PlayerbotAI* ai) { return new HunterBuffManaStrategy(ai); }
+            static Strategy* rnature(PlayerbotAI* ai) { return new HunterNatureResistanceStrategy(ai); }
+        };
+    };
+};
+
+
+namespace ai
+{
+    namespace hunter
+    {
+        using namespace ai;
+
+        class TriggerFactoryInternal : public NamedObjectContext<Trigger>
+        {
+        public:
+            TriggerFactoryInternal()
+            {
+                creators["aspect of the viper"] = &TriggerFactoryInternal::aspect_of_the_viper;
+                creators["black arrow"] = &TriggerFactoryInternal::black_arrow;
+                creators["no stings"] = &TriggerFactoryInternal::NoStings;
+                creators["hunters pet dead"] = &TriggerFactoryInternal::hunters_pet_dead;
+                creators["hunters pet low health"] = &TriggerFactoryInternal::hunters_pet_low_health;
+                creators["hunter's mark"] = &TriggerFactoryInternal::hunters_mark;
+                creators["freezing trap"] = &TriggerFactoryInternal::freezing_trap;
+                creators["aspect of the pack"] = &TriggerFactoryInternal::aspect_of_the_pack;
+                creators["rapid fire"] = &TriggerFactoryInternal::rapid_fire;
+                creators["aspect of the hawk"] = &TriggerFactoryInternal::aspect_of_the_hawk;
+                creators["aspect of the wild"] = &TriggerFactoryInternal::aspect_of_the_wild;
+                creators["aspect of the viper"] = &TriggerFactoryInternal::aspect_of_the_viper;
+                creators["trueshot aura"] = &TriggerFactoryInternal::trueshot_aura;
+                creators["serpent sting on attacker"] = &TriggerFactoryInternal::serpent_sting_on_attacker;
+            }
+
+        private:
+            static Trigger* serpent_sting_on_attacker(PlayerbotAI* ai) { return new SerpentStingOnAttackerTrigger(ai); }
+            static Trigger* trueshot_aura(PlayerbotAI* ai) { return new TrueshotAuraTrigger(ai); }
+            static Trigger* aspect_of_the_viper(PlayerbotAI* ai) { return new HunterAspectOfTheViperTrigger(ai); }
+            static Trigger* black_arrow(PlayerbotAI* ai) { return new BlackArrowTrigger(ai); }
+            static Trigger* NoStings(PlayerbotAI* ai) { return new HunterNoStingsActiveTrigger(ai); }
+            static Trigger* hunters_pet_dead(PlayerbotAI* ai) { return new HuntersPetDeadTrigger(ai); }
+            static Trigger* hunters_pet_low_health(PlayerbotAI* ai) { return new HuntersPetLowHealthTrigger(ai); }
+            static Trigger* hunters_mark(PlayerbotAI* ai) { return new HuntersMarkTrigger(ai); }
+            static Trigger* freezing_trap(PlayerbotAI* ai) { return new FreezingTrapTrigger(ai); }
+            static Trigger* aspect_of_the_pack(PlayerbotAI* ai) { return new HunterAspectOfThePackTrigger(ai); }
+            static Trigger* rapid_fire(PlayerbotAI* ai) { return new RapidFireTrigger(ai); }
+            static Trigger* aspect_of_the_hawk(PlayerbotAI* ai) { return new HunterAspectOfTheHawkTrigger(ai); }
+            static Trigger* aspect_of_the_wild(PlayerbotAI* ai) { return new HunterAspectOfTheWildTrigger(ai); }
+        };
+    };
+};
+
+
+
+namespace ai
+{
+    namespace hunter
+    {
+        using namespace ai;
+
+        class AiObjectContextInternal : public NamedObjectContext<Action>
+        {
+        public:
+            AiObjectContextInternal()
+            {
+                creators["auto shot"] = &AiObjectContextInternal::auto_shot;
+                creators["aimed shot"] = &AiObjectContextInternal::aimed_shot;
+                creators["chimera shot"] = &AiObjectContextInternal::chimera_shot;
+                creators["explosive shot"] = &AiObjectContextInternal::explosive_shot;
+                creators["arcane shot"] = &AiObjectContextInternal::arcane_shot;
+                creators["concussive shot"] = &AiObjectContextInternal::concussive_shot;
+                creators["distracting shot"] = &AiObjectContextInternal::distracting_shot;
+                creators["multi-shot"] = &AiObjectContextInternal::multi_shot;
+                creators["volley"] = &AiObjectContextInternal::volley;
+                creators["serpent sting"] = &AiObjectContextInternal::serpent_sting;
+                creators["serpent sting on attacker"] = &AiObjectContextInternal::serpent_sting_on_attacker;
+                creators["wyvern sting"] = &AiObjectContextInternal::wyvern_sting;
+                creators["viper sting"] = &AiObjectContextInternal::viper_sting;
+                creators["scorpid sting"] = &AiObjectContextInternal::scorpid_sting;
+                creators["hunter's mark"] = &AiObjectContextInternal::hunters_mark;
+                creators["mend pet"] = &AiObjectContextInternal::mend_pet;
+                creators["revive pet"] = &AiObjectContextInternal::revive_pet;
+                creators["call pet"] = &AiObjectContextInternal::call_pet;
+                creators["black arrow"] = &AiObjectContextInternal::black_arrow;
+                creators["freezing trap"] = &AiObjectContextInternal::freezing_trap;
+                creators["rapid fire"] = &AiObjectContextInternal::rapid_fire;
+                creators["boost"] = &AiObjectContextInternal::rapid_fire;
+                creators["readiness"] = &AiObjectContextInternal::readiness;
+                creators["aspect of the hawk"] = &AiObjectContextInternal::aspect_of_the_hawk;
+                creators["aspect of the wild"] = &AiObjectContextInternal::aspect_of_the_wild;
+                creators["aspect of the viper"] = &AiObjectContextInternal::aspect_of_the_viper;
+                creators["aspect of the pack"] = &AiObjectContextInternal::aspect_of_the_pack;
+                creators["aspect of the cheetah"] = &AiObjectContextInternal::aspect_of_the_cheetah;
+                creators["trueshot aura"] = &AiObjectContextInternal::trueshot_aura;
+                creators["feign death"] = &AiObjectContextInternal::feign_death;
+                creators["wing clip"] = &AiObjectContextInternal::wing_clip;
+            }
+
+        private:
+            static Action* feign_death(PlayerbotAI* ai) { return new CastFeignDeathAction(ai); }
+            static Action* trueshot_aura(PlayerbotAI* ai) { return new CastTrueshotAuraAction(ai); }
+            static Action* auto_shot(PlayerbotAI* ai) { return new CastAutoShotAction(ai); }
+            static Action* aimed_shot(PlayerbotAI* ai) { return new CastAimedShotAction(ai); }
+            static Action* chimera_shot(PlayerbotAI* ai) { return new CastChimeraShotAction(ai); }
+            static Action* explosive_shot(PlayerbotAI* ai) { return new CastExplosiveShotAction(ai); }
+            static Action* arcane_shot(PlayerbotAI* ai) { return new CastArcaneShotAction(ai); }
+            static Action* concussive_shot(PlayerbotAI* ai) { return new CastConcussiveShotAction(ai); }
+            static Action* distracting_shot(PlayerbotAI* ai) { return new CastDistractingShotAction(ai); }
+            static Action* multi_shot(PlayerbotAI* ai) { return new CastMultiShotAction(ai); }
+            static Action* volley(PlayerbotAI* ai) { return new CastVolleyAction(ai); }
+            static Action* serpent_sting(PlayerbotAI* ai) { return new CastSerpentStingAction(ai); }
+            static Action* serpent_sting_on_attacker(PlayerbotAI* ai) { return new CastSerpentStingOnAttackerAction(ai); }
+            static Action* wyvern_sting(PlayerbotAI* ai) { return new CastWyvernStingAction(ai); }
+            static Action* viper_sting(PlayerbotAI* ai) { return new CastViperStingAction(ai); }
+            static Action* scorpid_sting(PlayerbotAI* ai) { return new CastScorpidStingAction(ai); }
+            static Action* hunters_mark(PlayerbotAI* ai) { return new CastHuntersMarkAction(ai); }
+            static Action* mend_pet(PlayerbotAI* ai) { return new CastMendPetAction(ai); }
+            static Action* revive_pet(PlayerbotAI* ai) { return new CastRevivePetAction(ai); }
+            static Action* call_pet(PlayerbotAI* ai) { return new CastCallPetAction(ai); }
+            static Action* black_arrow(PlayerbotAI* ai) { return new CastBlackArrow(ai); }
+            static Action* freezing_trap(PlayerbotAI* ai) { return new CastFreezingTrap(ai); }
+            static Action* rapid_fire(PlayerbotAI* ai) { return new CastRapidFireAction(ai); }
+            static Action* readiness(PlayerbotAI* ai) { return new CastReadinessAction(ai); }
+            static Action* aspect_of_the_hawk(PlayerbotAI* ai) { return new CastAspectOfTheHawkAction(ai); }
+            static Action* aspect_of_the_wild(PlayerbotAI* ai) { return new CastAspectOfTheWildAction(ai); }
+            static Action* aspect_of_the_viper(PlayerbotAI* ai) { return new CastAspectOfTheViperAction(ai); }
+            static Action* aspect_of_the_pack(PlayerbotAI* ai) { return new CastAspectOfThePackAction(ai); }
+            static Action* aspect_of_the_cheetah(PlayerbotAI* ai) { return new CastAspectOfTheCheetahAction(ai); }
+            static Action* wing_clip(PlayerbotAI* ai) { return new CastWingClipAction(ai); }
+        };
+    };
+};
+
+HunterAiObjectContext::HunterAiObjectContext(PlayerbotAI* ai) : AiObjectContext(ai)
+{
+    strategyContexts.Add(new ai::hunter::StrategyFactoryInternal());
+    strategyContexts.Add(new ai::hunter::BuffStrategyFactoryInternal());
+    actionContexts.Add(new ai::hunter::AiObjectContextInternal());
+    triggerContexts.Add(new ai::hunter::TriggerFactoryInternal());
+}
diff --git a/src/plugins/playerbot/strategy/hunter/HunterAiObjectContext.h b/src/plugins/playerbot/strategy/hunter/HunterAiObjectContext.h
new file mode 100644
index 0000000..8891a54
--- /dev/null
+++ b/src/plugins/playerbot/strategy/hunter/HunterAiObjectContext.h
@@ -0,0 +1,12 @@
+#pragma once
+
+#include "../AiObjectContext.h"
+
+namespace ai
+{
+    class HunterAiObjectContext : public AiObjectContext
+    {
+    public:
+        HunterAiObjectContext(PlayerbotAI* ai);
+    };
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/hunter/HunterBuffStrategies.cpp b/src/plugins/playerbot/strategy/hunter/HunterBuffStrategies.cpp
new file mode 100644
index 0000000..33f7612
--- /dev/null
+++ b/src/plugins/playerbot/strategy/hunter/HunterBuffStrategies.cpp
@@ -0,0 +1,35 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "HunterMultipliers.h"
+#include "HunterBuffStrategies.h"
+
+using namespace ai;
+
+void HunterBuffDpsStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+	triggers.push_back(new TriggerNode(
+		"aspect of the hawk", 
+		NextAction::array(0, new NextAction("aspect of the hawk", 90.0f), NULL)));
+}
+
+void HunterNatureResistanceStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+	triggers.push_back(new TriggerNode(
+		"aspect of the wild", 
+		NextAction::array(0, new NextAction("aspect of the wild", 90.0f), NULL)));
+}
+
+
+void HunterBuffSpeedStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "aspect of the pack",
+        NextAction::array(0, new NextAction("aspect of the pack", 10.0f), NULL)));
+}
+
+void HunterBuffManaStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "aspect of the viper",
+        NextAction::array(0, new NextAction("aspect of the viper", 10.0f), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/hunter/HunterBuffStrategies.h b/src/plugins/playerbot/strategy/hunter/HunterBuffStrategies.h
new file mode 100644
index 0000000..d59f245
--- /dev/null
+++ b/src/plugins/playerbot/strategy/hunter/HunterBuffStrategies.h
@@ -0,0 +1,47 @@
+#pragma once
+
+#include "GenericHunterStrategy.h"
+#include "../generic/NonCombatStrategy.h"
+
+namespace ai
+{
+    class HunterBuffSpeedStrategy : public NonCombatStrategy
+    {
+    public:
+        HunterBuffSpeedStrategy(PlayerbotAI* ai) : NonCombatStrategy(ai) {}
+        virtual string getName() { return "bspeed"; }
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+    };
+
+    class HunterBuffManaStrategy : public NonCombatStrategy
+    {
+    public:
+        HunterBuffManaStrategy(PlayerbotAI* ai) : NonCombatStrategy(ai) {}
+        virtual string getName() { return "bmana"; }
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+    };
+
+	class HunterBuffDpsStrategy : public NonCombatStrategy
+	{
+	public:
+		HunterBuffDpsStrategy(PlayerbotAI* ai) : NonCombatStrategy(ai) {}
+		virtual string getName() { return "bdps"; }
+
+	public:
+		virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+	};
+
+	class HunterNatureResistanceStrategy : public NonCombatStrategy
+	{
+	public:
+		HunterNatureResistanceStrategy(PlayerbotAI* ai) : NonCombatStrategy(ai) {}
+		virtual string getName() { return "rnature"; }
+
+	public:
+		virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+	};
+}
diff --git a/src/plugins/playerbot/strategy/hunter/HunterMultipliers.cpp b/src/plugins/playerbot/strategy/hunter/HunterMultipliers.cpp
new file mode 100644
index 0000000..9d0bdec
--- /dev/null
+++ b/src/plugins/playerbot/strategy/hunter/HunterMultipliers.cpp
@@ -0,0 +1,5 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "HunterMultipliers.h"
+
+using namespace ai;
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/hunter/HunterMultipliers.h b/src/plugins/playerbot/strategy/hunter/HunterMultipliers.h
new file mode 100644
index 0000000..7cfbdd4
--- /dev/null
+++ b/src/plugins/playerbot/strategy/hunter/HunterMultipliers.h
@@ -0,0 +1,6 @@
+#pragma once
+
+namespace ai
+{
+   
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/hunter/HunterTriggers.cpp b/src/plugins/playerbot/strategy/hunter/HunterTriggers.cpp
new file mode 100644
index 0000000..c356a0e
--- /dev/null
+++ b/src/plugins/playerbot/strategy/hunter/HunterTriggers.cpp
@@ -0,0 +1,29 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "HunterTriggers.h"
+#include "HunterActions.h"
+
+using namespace ai;
+
+bool HunterNoStingsActiveTrigger::IsActive()
+{
+	Unit* target = AI_VALUE(Unit*, "current target");
+    return target && AI_VALUE2(uint8, "health", "current target") > 40 &&
+        !ai->HasAura("serpent sting", target) &&
+        !ai->HasAura("scorpid sting", target) &&
+        !ai->HasAura("viper sting", target);
+}
+
+bool HuntersPetDeadTrigger::IsActive()
+{
+    Unit* pet = AI_VALUE(Unit*, "pet target");
+    return pet && AI_VALUE2(bool, "dead", "pet target") && !AI_VALUE2(bool, "mounted", "self target");
+}
+
+
+bool HuntersPetLowHealthTrigger::IsActive()
+{
+    Unit* pet = AI_VALUE(Unit*, "pet target");
+    return pet && AI_VALUE2(uint8, "health", "pet target") < 40 &&
+        !AI_VALUE2(bool, "dead", "pet target") && !AI_VALUE2(bool, "mounted", "self target");
+}
diff --git a/src/plugins/playerbot/strategy/hunter/HunterTriggers.h b/src/plugins/playerbot/strategy/hunter/HunterTriggers.h
new file mode 100644
index 0000000..9466218
--- /dev/null
+++ b/src/plugins/playerbot/strategy/hunter/HunterTriggers.h
@@ -0,0 +1,86 @@
+#pragma once
+
+#include "../triggers/GenericTriggers.h"
+
+namespace ai
+{
+    BEGIN_TRIGGER(HunterNoStingsActiveTrigger, Trigger)
+    END_TRIGGER()
+
+    class HunterAspectOfTheHawkTrigger : public BuffTrigger
+    {
+    public:
+        HunterAspectOfTheHawkTrigger(PlayerbotAI* ai) : BuffTrigger(ai, "aspect of the hawk") {
+			checkInterval = 1;
+		}
+    };
+
+	class HunterAspectOfTheWildTrigger : public BuffTrigger
+	{
+	public:
+		HunterAspectOfTheWildTrigger(PlayerbotAI* ai) : BuffTrigger(ai, "aspect of the wild") {
+			checkInterval = 1;
+		}
+	};
+
+    class HunterAspectOfTheViperTrigger : public BuffTrigger
+    {
+    public:
+        HunterAspectOfTheViperTrigger(PlayerbotAI* ai) : BuffTrigger(ai, "aspect of the viper") {}
+        virtual bool IsActive()
+        {
+            return SpellTrigger::IsActive() && !ai->HasAura(spell, GetTarget());
+        }
+    };
+
+    class HunterAspectOfThePackTrigger : public BuffTrigger
+    {
+    public:
+        HunterAspectOfThePackTrigger(PlayerbotAI* ai) : BuffTrigger(ai, "aspect of the pack") {}
+        virtual bool IsActive() {
+			return BuffTrigger::IsActive() && !ai->HasAura("aspect of the cheetah", GetTarget());
+        };
+    };
+
+    BEGIN_TRIGGER(HuntersPetDeadTrigger, Trigger)
+    END_TRIGGER()
+
+    BEGIN_TRIGGER(HuntersPetLowHealthTrigger, Trigger)
+    END_TRIGGER()
+
+    class BlackArrowTrigger : public DebuffTrigger
+    {
+    public:
+        BlackArrowTrigger(PlayerbotAI* ai) : DebuffTrigger(ai, "black arrow") {}
+    };
+
+    class HuntersMarkTrigger : public DebuffTrigger
+    {
+    public:
+        HuntersMarkTrigger(PlayerbotAI* ai) : DebuffTrigger(ai, "hunter's mark") {}
+    };
+
+    class FreezingTrapTrigger : public HasCcTargetTrigger
+    {
+    public:
+        FreezingTrapTrigger(PlayerbotAI* ai) : HasCcTargetTrigger(ai, "freezing trap") {}
+    };
+
+    class RapidFireTrigger : public BoostTrigger
+    {
+    public:
+        RapidFireTrigger(PlayerbotAI* ai) : BoostTrigger(ai, "rapid fire") {}
+    };
+
+    class TrueshotAuraTrigger : public BuffTrigger
+    {
+    public:
+        TrueshotAuraTrigger(PlayerbotAI* ai) : BuffTrigger(ai, "trueshot aura") {}
+    };
+
+    class SerpentStingOnAttackerTrigger : public DebuffOnAttackerTrigger
+    {
+    public:
+        SerpentStingOnAttackerTrigger(PlayerbotAI* ai) : DebuffOnAttackerTrigger(ai, "serpent sting") {}
+    };
+}
diff --git a/src/plugins/playerbot/strategy/mage/ArcaneMageStrategy.cpp b/src/plugins/playerbot/strategy/mage/ArcaneMageStrategy.cpp
new file mode 100644
index 0000000..0779477
--- /dev/null
+++ b/src/plugins/playerbot/strategy/mage/ArcaneMageStrategy.cpp
@@ -0,0 +1,64 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "MageMultipliers.h"
+#include "ArcaneMageStrategy.h"
+
+using namespace ai;
+
+class ArcaneMageStrategyActionNodeFactory : public NamedObjectFactory<ActionNode>
+{
+public:
+    ArcaneMageStrategyActionNodeFactory()
+    {
+        creators["arcane blast"] = &arcane_blast;
+        creators["arcane barrage"] = &arcane_barrage;
+        creators["arcane missiles"] = &arcane_missiles;
+    }
+private:
+    static ActionNode* arcane_blast(PlayerbotAI* ai)
+    {
+        return new ActionNode ("arcane blast",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("arcane missiles"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* arcane_barrage(PlayerbotAI* ai)
+    {
+        return new ActionNode ("arcane barrage",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("arcane missiles"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* arcane_missiles(PlayerbotAI* ai)
+    {
+        return new ActionNode ("arcane missiles",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("shoot"), NULL),
+            /*C*/ NULL);
+    }
+};
+
+ArcaneMageStrategy::ArcaneMageStrategy(PlayerbotAI* ai) : GenericMageStrategy(ai)
+{
+    actionNodeFactories.Add(new ArcaneMageStrategyActionNodeFactory());
+}
+
+NextAction** ArcaneMageStrategy::getDefaultActions()
+{
+    return NextAction::array(0, new NextAction("arcane barrage", 10.0f), NULL);
+}
+
+void ArcaneMageStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    GenericMageStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "arcane blast",
+        NextAction::array(0, new NextAction("arcane blast", 15.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "missile barrage",
+        NextAction::array(0, new NextAction("arcane missiles", 15.0f), NULL)));
+
+}
+
diff --git a/src/plugins/playerbot/strategy/mage/ArcaneMageStrategy.h b/src/plugins/playerbot/strategy/mage/ArcaneMageStrategy.h
new file mode 100644
index 0000000..ac053a8
--- /dev/null
+++ b/src/plugins/playerbot/strategy/mage/ArcaneMageStrategy.h
@@ -0,0 +1,18 @@
+#pragma once
+
+#include "GenericMageStrategy.h"
+
+namespace ai
+{
+    class ArcaneMageStrategy : public GenericMageStrategy
+    {
+    public:
+        ArcaneMageStrategy(PlayerbotAI* ai);
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "arcane"; }
+        virtual NextAction** getDefaultActions();
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/mage/FireMageStrategy.cpp b/src/plugins/playerbot/strategy/mage/FireMageStrategy.cpp
new file mode 100644
index 0000000..47c4bc2
--- /dev/null
+++ b/src/plugins/playerbot/strategy/mage/FireMageStrategy.cpp
@@ -0,0 +1,44 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "MageMultipliers.h"
+#include "FireMageStrategy.h"
+
+using namespace ai;
+
+NextAction** FireMageStrategy::getDefaultActions()
+{
+    return NextAction::array(0, new NextAction("scorch", 7.0f), new NextAction("fireball", 6.0f), new NextAction("fire blast", 5.0f), NULL);
+}
+
+void FireMageStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    GenericMageStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "pyroblast",
+        NextAction::array(0, new NextAction("pyroblast", 10.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "hot streak",
+        NextAction::array(0, new NextAction("pyroblast", 25.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "combustion",
+        NextAction::array(0, new NextAction("combustion", 50.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "enemy too close for spell",
+        NextAction::array(0, new NextAction("dragon's breath", 70.0f), NULL)));
+}
+
+void FireMageAoeStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "medium aoe",
+        NextAction::array(0, new NextAction("flamestrike", 20.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "living bomb",
+        NextAction::array(0, new NextAction("living bomb", 25.0f), NULL)));
+}
+
diff --git a/src/plugins/playerbot/strategy/mage/FireMageStrategy.h b/src/plugins/playerbot/strategy/mage/FireMageStrategy.h
new file mode 100644
index 0000000..fc0cd7f
--- /dev/null
+++ b/src/plugins/playerbot/strategy/mage/FireMageStrategy.h
@@ -0,0 +1,28 @@
+#pragma once
+
+#include "GenericMageStrategy.h"
+#include "../generic/CombatStrategy.h"
+
+namespace ai
+{
+    class FireMageStrategy : public GenericMageStrategy
+    {
+    public:
+        FireMageStrategy(PlayerbotAI* ai) : GenericMageStrategy(ai) {}
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "fire"; }
+        virtual NextAction** getDefaultActions();
+    };
+
+    class FireMageAoeStrategy : public CombatStrategy
+    {
+    public:
+        FireMageAoeStrategy(PlayerbotAI* ai) : CombatStrategy(ai) {}
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "fire aoe"; }
+    };
+}
diff --git a/src/plugins/playerbot/strategy/mage/FrostMageStrategy.cpp b/src/plugins/playerbot/strategy/mage/FrostMageStrategy.cpp
new file mode 100644
index 0000000..e6fb861
--- /dev/null
+++ b/src/plugins/playerbot/strategy/mage/FrostMageStrategy.cpp
@@ -0,0 +1,32 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "MageMultipliers.h"
+#include "FrostMageStrategy.h"
+
+using namespace ai;
+
+
+FrostMageStrategy::FrostMageStrategy(PlayerbotAI* ai) : GenericMageStrategy(ai)
+{
+}
+
+NextAction** FrostMageStrategy::getDefaultActions()
+{
+    return NextAction::array(0, new NextAction("frostbolt", 7.0f), NULL);
+}
+
+void FrostMageStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    GenericMageStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "icy veins",
+        NextAction::array(0, new NextAction("icy veins", 50.0f), NULL)));
+}
+
+void FrostMageAoeStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+	triggers.push_back(new TriggerNode(
+		"high aoe",
+		NextAction::array(0, new NextAction("blizzard", 40.0f), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/mage/FrostMageStrategy.h b/src/plugins/playerbot/strategy/mage/FrostMageStrategy.h
new file mode 100644
index 0000000..15fac2f
--- /dev/null
+++ b/src/plugins/playerbot/strategy/mage/FrostMageStrategy.h
@@ -0,0 +1,28 @@
+#pragma once
+
+#include "GenericMageStrategy.h"
+#include "../generic/CombatStrategy.h"
+
+namespace ai
+{
+    class FrostMageStrategy : public GenericMageStrategy
+    {
+    public:
+        FrostMageStrategy(PlayerbotAI* ai);
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "frost"; }
+        virtual NextAction** getDefaultActions();
+    };
+
+    class FrostMageAoeStrategy : public CombatStrategy
+    {
+    public:
+        FrostMageAoeStrategy(PlayerbotAI* ai) : CombatStrategy(ai) {}
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "frost aoe"; }
+    };
+}
diff --git a/src/plugins/playerbot/strategy/mage/GenericMageNonCombatStrategy.cpp b/src/plugins/playerbot/strategy/mage/GenericMageNonCombatStrategy.cpp
new file mode 100644
index 0000000..f4111de
--- /dev/null
+++ b/src/plugins/playerbot/strategy/mage/GenericMageNonCombatStrategy.cpp
@@ -0,0 +1,87 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "MageMultipliers.h"
+#include "GenericMageNonCombatStrategy.h"
+
+using namespace ai;
+
+class GenericMageNonCombatStrategyActionNodeFactory : public NamedObjectFactory<ActionNode>
+{
+public:
+    GenericMageNonCombatStrategyActionNodeFactory()
+    {
+        creators["molten armor"] = &molten_armor;
+        creators["mage armor"] = &mage_armor;
+        creators["ice armor"] = &ice_armor;
+    }
+private:
+    static ActionNode* molten_armor(PlayerbotAI* ai)
+    {
+        return new ActionNode ("molten armor",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("mage armor"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* mage_armor(PlayerbotAI* ai)
+    {
+        return new ActionNode ("mage armor",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("ice armor"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* ice_armor(PlayerbotAI* ai)
+    {
+        return new ActionNode ("ice armor",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("frost armor"), NULL),
+            /*C*/ NULL);
+    }
+};
+
+GenericMageNonCombatStrategy::GenericMageNonCombatStrategy(PlayerbotAI* ai) : NonCombatStrategy(ai)
+{
+    actionNodeFactories.Add(new GenericMageNonCombatStrategyActionNodeFactory());
+}
+
+void GenericMageNonCombatStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    NonCombatStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "arcane intellect",
+        NextAction::array(0, new NextAction("arcane intellect", 21.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "arcane intellect on party",
+        NextAction::array(0, new NextAction("arcane intellect on party", 20.0f), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"no drink",
+		NextAction::array(0, new NextAction("conjure water", 16.0f), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"no food",
+		NextAction::array(0, new NextAction("conjure food", 15.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "remove curse",
+        NextAction::array(0, new NextAction("remove curse", 41.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "remove curse on party",
+        NextAction::array(0, new NextAction("remove curse on party", 40.0f), NULL)));
+}
+
+void MageBuffManaStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "mage armor",
+        NextAction::array(0, new NextAction("mage armor", 19.0f), NULL)));
+}
+
+void MageBuffDpsStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "mage armor",
+        NextAction::array(0, new NextAction("molten armor", 19.0f), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/mage/GenericMageNonCombatStrategy.h b/src/plugins/playerbot/strategy/mage/GenericMageNonCombatStrategy.h
new file mode 100644
index 0000000..5319bf9
--- /dev/null
+++ b/src/plugins/playerbot/strategy/mage/GenericMageNonCombatStrategy.h
@@ -0,0 +1,37 @@
+#pragma once
+
+#include "GenericMageStrategy.h"
+#include "../generic/NonCombatStrategy.h"
+
+namespace ai
+{
+    class GenericMageNonCombatStrategy : public NonCombatStrategy
+    {
+    public:
+        GenericMageNonCombatStrategy(PlayerbotAI* ai);
+        virtual string getName() { return "nc"; }
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+    };
+
+    class MageBuffManaStrategy : public Strategy
+    {
+    public:
+        MageBuffManaStrategy(PlayerbotAI* ai) : Strategy(ai) {}
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "bmana"; }
+    };
+
+    class MageBuffDpsStrategy : public Strategy
+    {
+    public:
+        MageBuffDpsStrategy(PlayerbotAI* ai) : Strategy(ai) {}
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "bdps"; }
+    };
+}
diff --git a/src/plugins/playerbot/strategy/mage/GenericMageStrategy.cpp b/src/plugins/playerbot/strategy/mage/GenericMageStrategy.cpp
new file mode 100644
index 0000000..7f137c2
--- /dev/null
+++ b/src/plugins/playerbot/strategy/mage/GenericMageStrategy.cpp
@@ -0,0 +1,137 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "MageMultipliers.h"
+#include "GenericMageStrategy.h"
+
+using namespace ai;
+
+class GenericMageStrategyActionNodeFactory : public NamedObjectFactory<ActionNode>
+{
+public:
+    GenericMageStrategyActionNodeFactory()
+    {
+        creators["frostbolt"] = &frostbolt;
+        creators["fire blast"] = &fire_blast;
+        creators["scorch"] = &scorch;
+        creators["frost nova"] = &frost_nova;
+        creators["icy veins"] = &icy_veins;
+        creators["combustion"] = &combustion;
+        creators["evocation"] = &evocation;
+        creators["dragon's breath"] = &dragons_breath;
+        creators["blast wave"] = &blast_wave;
+    }
+private:
+    static ActionNode* frostbolt(PlayerbotAI* ai)
+    {
+        return new ActionNode ("frostbolt",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("shoot"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* fire_blast(PlayerbotAI* ai)
+    {
+        return new ActionNode ("fire blast",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("scorch"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* scorch(PlayerbotAI* ai)
+    {
+        return new ActionNode ("scorch",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("shoot"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* frost_nova(PlayerbotAI* ai)
+    {
+        return new ActionNode ("frost nova",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("flee"), NULL),
+            /*C*/ NextAction::array(0, new NextAction("flee"), NULL));
+    }
+    static ActionNode* icy_veins(PlayerbotAI* ai)
+    {
+        return new ActionNode ("icy veins",
+            /*P*/ NULL,
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+    static ActionNode* combustion(PlayerbotAI* ai)
+    {
+        return new ActionNode ("combustion",
+            /*P*/ NULL,
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+    static ActionNode* evocation(PlayerbotAI* ai)
+    {
+        return new ActionNode ("evocation",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("mana potion"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* dragons_breath(PlayerbotAI* ai)
+    {
+        return new ActionNode ("dragon's breath",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("blast wave"), NULL),
+            /*C*/ NextAction::array(0, new NextAction("flamestrike", 71.0f), NULL));
+    }
+    static ActionNode* blast_wave(PlayerbotAI* ai)
+    {
+        return new ActionNode ("blast wave",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("frost nova"), NULL),
+            /*C*/ NextAction::array(0, new NextAction("flamestrike", 71.0f), NULL));
+    }
+};
+
+GenericMageStrategy::GenericMageStrategy(PlayerbotAI* ai) : RangedCombatStrategy(ai)
+{
+    actionNodeFactories.Add(new GenericMageStrategyActionNodeFactory());
+}
+
+void GenericMageStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    RangedCombatStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "remove curse",
+        NextAction::array(0, new NextAction("remove curse", 41.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "remove curse on party",
+        NextAction::array(0, new NextAction("remove curse on party", 40.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "enemy too close for spell",
+        NextAction::array(0, new NextAction("frost nova", 50.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "counterspell",
+        NextAction::array(0, new NextAction("counterspell", 40.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "counterspell on enemy healer",
+        NextAction::array(0, new NextAction("counterspell on enemy healer", 40.0f), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"critical health",
+		NextAction::array(0, new NextAction("ice block", 80.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "polymorph",
+        NextAction::array(0, new NextAction("polymorph", 30.0f), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"spellsteal",
+		NextAction::array(0, new NextAction("spellsteal", 40.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "medium threat",
+        NextAction::array(0, new NextAction("invisibility", 60.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "low mana",
+        NextAction::array(0, new NextAction("evocation", ACTION_EMERGENCY + 5), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/mage/GenericMageStrategy.h b/src/plugins/playerbot/strategy/mage/GenericMageStrategy.h
new file mode 100644
index 0000000..4dcb9d9
--- /dev/null
+++ b/src/plugins/playerbot/strategy/mage/GenericMageStrategy.h
@@ -0,0 +1,17 @@
+#pragma once
+
+#include "../Strategy.h"
+#include "../generic/RangedCombatStrategy.h"
+
+namespace ai
+{
+    class GenericMageStrategy : public RangedCombatStrategy
+    {
+    public:
+        GenericMageStrategy(PlayerbotAI* ai);
+        virtual string getName() { return "mage"; }
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+    };
+}
diff --git a/src/plugins/playerbot/strategy/mage/MageActions.cpp b/src/plugins/playerbot/strategy/mage/MageActions.cpp
new file mode 100644
index 0000000..ee4d6fc
--- /dev/null
+++ b/src/plugins/playerbot/strategy/mage/MageActions.cpp
@@ -0,0 +1,10 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "MageActions.h"
+
+using namespace ai;
+
+Value<Unit*>* CastPolymorphAction::GetTargetValue()
+{
+    return context->GetValue<Unit*>("cc target", getName());
+}
diff --git a/src/plugins/playerbot/strategy/mage/MageActions.h b/src/plugins/playerbot/strategy/mage/MageActions.h
new file mode 100644
index 0000000..ea541a9
--- /dev/null
+++ b/src/plugins/playerbot/strategy/mage/MageActions.h
@@ -0,0 +1,205 @@
+#pragma once
+
+#include "../actions/GenericActions.h"
+
+namespace ai
+{
+    class CastFireballAction : public CastSpellAction
+    {
+    public:
+        CastFireballAction(PlayerbotAI* ai) : CastSpellAction(ai, "fireball") {}
+    };
+
+    class CastScorchAction : public CastSpellAction
+    {
+    public:
+        CastScorchAction(PlayerbotAI* ai) : CastSpellAction(ai, "scorch") {}
+    };
+
+    class CastFireBlastAction : public CastSpellAction
+    {
+    public:
+        CastFireBlastAction(PlayerbotAI* ai) : CastSpellAction(ai, "fire blast") {}
+    };
+
+    class CastArcaneBlastAction : public CastBuffSpellAction
+    {
+    public:
+        CastArcaneBlastAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "arcane blast") {}
+        virtual string GetTargetName() { return "current target"; }
+    };
+
+    class CastArcaneBarrageAction : public CastSpellAction
+    {
+    public:
+        CastArcaneBarrageAction(PlayerbotAI* ai) : CastSpellAction(ai, "arcane barrage") {}
+    };
+
+    class CastArcaneMissilesAction : public CastSpellAction
+    {
+    public:
+        CastArcaneMissilesAction(PlayerbotAI* ai) : CastSpellAction(ai, "arcane missiles") {}
+    };
+
+    class CastPyroblastAction : public CastSpellAction
+    {
+    public:
+        CastPyroblastAction(PlayerbotAI* ai) : CastSpellAction(ai, "pyroblast") {}
+    };
+
+    class CastFlamestrikeAction : public CastSpellAction
+    {
+    public:
+        CastFlamestrikeAction(PlayerbotAI* ai) : CastSpellAction(ai, "flamestrike") {}
+    };
+
+    class CastFrostNovaAction : public CastSpellAction
+    {
+    public:
+        CastFrostNovaAction(PlayerbotAI* ai) : CastSpellAction(ai, "frost nova") {}
+        virtual bool isUseful() { return AI_VALUE2(float, "distance", GetTargetName()) <= sPlayerbotAIConfig.tooCloseDistance; }
+    };
+
+	class CastFrostboltAction : public CastSpellAction
+	{
+	public:
+		CastFrostboltAction(PlayerbotAI* ai) : CastSpellAction(ai, "frostbolt") {}
+	};
+
+	class CastBlizzardAction : public CastSpellAction
+	{
+	public:
+		CastBlizzardAction(PlayerbotAI* ai) : CastSpellAction(ai, "blizzard") {}
+	};
+
+	class CastArcaneIntellectAction : public CastBuffSpellAction
+    {
+	public:
+		CastArcaneIntellectAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "arcane intellect") {}
+	};
+
+	class CastArcaneIntellectOnPartyAction : public BuffOnPartyAction
+    {
+	public:
+		CastArcaneIntellectOnPartyAction(PlayerbotAI* ai) : BuffOnPartyAction(ai, "arcane intellect") {}
+	};
+
+	class CastRemoveCurseAction : public CastCureSpellAction
+    {
+	public:
+		CastRemoveCurseAction(PlayerbotAI* ai) : CastCureSpellAction(ai, "remove curse") {}
+	};
+
+	class CastIcyVeinsAction : public CastBuffSpellAction
+    {
+	public:
+		CastIcyVeinsAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "icy veins") {}
+	};
+
+	class CastCombustionAction : public CastBuffSpellAction
+    {
+	public:
+		CastCombustionAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "combustion") {}
+	};
+
+    BEGIN_SPELL_ACTION(CastCounterspellAction, "counterspell")
+    END_SPELL_ACTION()
+
+    class CastRemoveCurseOnPartyAction : public CurePartyMemberAction
+    {
+    public:
+        CastRemoveCurseOnPartyAction(PlayerbotAI* ai) : CurePartyMemberAction(ai, "remove curse", DISPEL_CURSE) {}
+    };
+
+	class CastConjureFoodAction : public CastBuffSpellAction
+    {
+	public:
+		CastConjureFoodAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "conjure food") {}
+	};
+
+	class CastConjureWaterAction : public CastBuffSpellAction
+    {
+	public:
+		CastConjureWaterAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "conjure water") {}
+	};
+
+	class CastIceBlockAction : public CastBuffSpellAction
+    {
+	public:
+		CastIceBlockAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "ice block") {}
+	};
+
+    class CastMoltenArmorAction : public CastBuffSpellAction
+    {
+    public:
+        CastMoltenArmorAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "molten armor") {}
+    };
+
+    class CastMageArmorAction : public CastBuffSpellAction
+    {
+    public:
+        CastMageArmorAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "mage armor") {}
+    };
+
+    class CastIceArmorAction : public CastBuffSpellAction
+    {
+    public:
+        CastIceArmorAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "ice armor") {}
+    };
+
+    class CastFrostArmorAction : public CastBuffSpellAction
+    {
+    public:
+        CastFrostArmorAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "frost armor") {}
+    };
+
+    class CastPolymorphAction : public CastBuffSpellAction
+    {
+    public:
+        CastPolymorphAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "polymorph") {}
+        virtual Value<Unit*>* GetTargetValue();
+    };
+
+	class CastSpellstealAction : public CastSpellAction
+	{
+	public:
+		CastSpellstealAction(PlayerbotAI* ai) : CastSpellAction(ai, "spellsteal") {}
+	};
+
+	class CastLivingBombAction : public CastDebuffSpellAction
+	{
+	public:
+	    CastLivingBombAction(PlayerbotAI* ai) : CastDebuffSpellAction(ai, "living bomb") {}
+	};
+
+	class CastDragonsBreathAction : public CastSpellAction
+	{
+	public:
+	    CastDragonsBreathAction(PlayerbotAI* ai) : CastSpellAction(ai, "dragon's breath") {}
+	};
+
+	class CastBlastWaveAction : public CastSpellAction
+	{
+	public:
+	    CastBlastWaveAction(PlayerbotAI* ai) : CastSpellAction(ai, "blast wave") {}
+	};
+
+	class CastInvisibilityAction : public CastBuffSpellAction
+	{
+	public:
+	    CastInvisibilityAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "invisibility") {}
+	};
+
+	class CastEvocationAction : public CastSpellAction
+	{
+	public:
+	    CastEvocationAction(PlayerbotAI* ai) : CastSpellAction(ai, "evocation") {}
+	    virtual string GetTargetName() { return "self target"; }
+	};
+
+    class CastCounterspellOnEnemyHealerAction : public CastSpellOnEnemyHealerAction
+    {
+    public:
+	    CastCounterspellOnEnemyHealerAction(PlayerbotAI* ai) : CastSpellOnEnemyHealerAction(ai, "counterspell") {}
+    };
+}
diff --git a/src/plugins/playerbot/strategy/mage/MageAiObjectContext.cpp b/src/plugins/playerbot/strategy/mage/MageAiObjectContext.cpp
new file mode 100644
index 0000000..366ef77
--- /dev/null
+++ b/src/plugins/playerbot/strategy/mage/MageAiObjectContext.cpp
@@ -0,0 +1,221 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "../Strategy.h"
+#include "MageActions.h"
+#include "MageAiObjectContext.h"
+#include "FrostMageStrategy.h"
+#include "ArcaneMageStrategy.h"
+#include "GenericMageNonCombatStrategy.h"
+#include "FireMageStrategy.h"
+#include "../generic/PullStrategy.h"
+#include "MageTriggers.h"
+#include "../NamedObjectContext.h"
+
+using namespace ai;
+
+
+namespace ai
+{
+    namespace mage
+    {
+        using namespace ai;
+
+        class StrategyFactoryInternal : public NamedObjectContext<Strategy>
+        {
+        public:
+            StrategyFactoryInternal()
+            {
+                creators["nc"] = &mage::StrategyFactoryInternal::nc;
+                creators["pull"] = &mage::StrategyFactoryInternal::pull;
+                creators["fire aoe"] = &mage::StrategyFactoryInternal::fire_aoe;
+                creators["frost aoe"] = &mage::StrategyFactoryInternal::frost_aoe;
+            }
+
+        private:
+            static Strategy* nc(PlayerbotAI* ai) { return new GenericMageNonCombatStrategy(ai); }
+            static Strategy* pull(PlayerbotAI* ai) { return new PullStrategy(ai, "shoot"); }
+            static Strategy* fire_aoe(PlayerbotAI* ai) { return new FireMageAoeStrategy(ai); }
+            static Strategy* frost_aoe(PlayerbotAI* ai) { return new FrostMageAoeStrategy(ai); }
+        };
+
+        class MageStrategyFactoryInternal : public NamedObjectContext<Strategy>
+        {
+        public:
+            MageStrategyFactoryInternal() : NamedObjectContext<Strategy>(false, true)
+            {
+                creators["frost"] = &mage::MageStrategyFactoryInternal::frost;
+                creators["fire"] = &mage::MageStrategyFactoryInternal::fire;
+                creators["arcane"] = &mage::MageStrategyFactoryInternal::arcane;
+            }
+
+        private:
+            static Strategy* frost(PlayerbotAI* ai) { return new FrostMageStrategy(ai); }
+            static Strategy* fire(PlayerbotAI* ai) { return new FireMageStrategy(ai); }
+            static Strategy* arcane(PlayerbotAI* ai) { return new ArcaneMageStrategy(ai); }
+        };
+
+        class MageBuffStrategyFactoryInternal : public NamedObjectContext<Strategy>
+        {
+        public:
+            MageBuffStrategyFactoryInternal() : NamedObjectContext<Strategy>(false, true)
+            {
+                creators["bmana"] = &mage::MageBuffStrategyFactoryInternal::bmana;
+                creators["bdps"] = &mage::MageBuffStrategyFactoryInternal::bdps;
+            }
+
+        private:
+            static Strategy* bmana(PlayerbotAI* ai) { return new MageBuffManaStrategy(ai); }
+            static Strategy* bdps(PlayerbotAI* ai) { return new MageBuffDpsStrategy(ai); }
+        };
+    };
+};
+
+
+namespace ai
+{
+    namespace mage
+    {
+        using namespace ai;
+
+        class TriggerFactoryInternal : public NamedObjectContext<Trigger>
+        {
+        public:
+            TriggerFactoryInternal()
+            {
+                creators["fireball"] = &TriggerFactoryInternal::fireball;
+                creators["pyroblast"] = &TriggerFactoryInternal::pyroblast;
+                creators["combustion"] = &TriggerFactoryInternal::combustion;
+                creators["icy veins"] = &TriggerFactoryInternal::icy_veins;
+                creators["arcane intellect"] = &TriggerFactoryInternal::arcane_intellect;
+                creators["arcane intellect on party"] = &TriggerFactoryInternal::arcane_intellect_on_party;
+                creators["mage armor"] = &TriggerFactoryInternal::mage_armor;
+                creators["remove curse"] = &TriggerFactoryInternal::remove_curse;
+                creators["remove curse on party"] = &TriggerFactoryInternal::remove_curse_on_party;
+                creators["counterspell"] = &TriggerFactoryInternal::counterspell;
+                creators["polymorph"] = &TriggerFactoryInternal::polymorph;
+                creators["spellsteal"] = &TriggerFactoryInternal::spellsteal;
+                creators["hot streak"] = &TriggerFactoryInternal::hot_streak;
+                creators["living bomb"] = &TriggerFactoryInternal::living_bomb;
+                creators["missile barrage"] = &TriggerFactoryInternal::missile_barrage;
+                creators["arcane blast"] = &TriggerFactoryInternal::arcane_blast;
+                creators["counterspell on enemy healer"] = &TriggerFactoryInternal::counterspell_enemy_healer;
+
+            }
+
+        private:
+            static Trigger* hot_streak(PlayerbotAI* ai) { return new HotStreakTrigger(ai); }
+            static Trigger* fireball(PlayerbotAI* ai) { return new FireballTrigger(ai); }
+            static Trigger* pyroblast(PlayerbotAI* ai) { return new PyroblastTrigger(ai); }
+            static Trigger* combustion(PlayerbotAI* ai) { return new CombustionTrigger(ai); }
+            static Trigger* icy_veins(PlayerbotAI* ai) { return new IcyVeinsTrigger(ai); }
+            static Trigger* arcane_intellect(PlayerbotAI* ai) { return new ArcaneIntellectTrigger(ai); }
+            static Trigger* arcane_intellect_on_party(PlayerbotAI* ai) { return new ArcaneIntellectOnPartyTrigger(ai); }
+            static Trigger* mage_armor(PlayerbotAI* ai) { return new MageArmorTrigger(ai); }
+            static Trigger* remove_curse(PlayerbotAI* ai) { return new RemoveCurseTrigger(ai); }
+            static Trigger* remove_curse_on_party(PlayerbotAI* ai) { return new PartyMemberRemoveCurseTrigger(ai); }
+            static Trigger* counterspell(PlayerbotAI* ai) { return new CounterspellInterruptSpellTrigger(ai); }
+            static Trigger* polymorph(PlayerbotAI* ai) { return new PolymorphTrigger(ai); }
+            static Trigger* spellsteal(PlayerbotAI* ai) { return new SpellstealTrigger(ai); }
+            static Trigger* living_bomb(PlayerbotAI* ai) { return new LivingBombTrigger(ai); }
+            static Trigger* missile_barrage(PlayerbotAI* ai) { return new MissileBarrageTrigger(ai); }
+            static Trigger* arcane_blast(PlayerbotAI* ai) { return new ArcaneBlastTrigger(ai); }
+            static Trigger* counterspell_enemy_healer(PlayerbotAI* ai) { return new CounterspellEnemyHealerTrigger(ai); }
+        };
+    };
+};
+
+
+namespace ai
+{
+    namespace mage
+    {
+        using namespace ai;
+
+        class AiObjectContextInternal : public NamedObjectContext<Action>
+        {
+        public:
+            AiObjectContextInternal()
+            {
+                creators["frostbolt"] = &AiObjectContextInternal::frostbolt;
+                creators["blizzard"] = &AiObjectContextInternal::blizzard;
+                creators["frost nova"] = &AiObjectContextInternal::frost_nova;
+                creators["arcane intellect"] = &AiObjectContextInternal::arcane_intellect;
+                creators["arcane intellect on party"] = &AiObjectContextInternal::arcane_intellect_on_party;
+                creators["conjure water"] = &AiObjectContextInternal::conjure_water;
+                creators["conjure food"] = &AiObjectContextInternal::conjure_food;
+                creators["molten armor"] = &AiObjectContextInternal::molten_armor;
+                creators["mage armor"] = &AiObjectContextInternal::mage_armor;
+                creators["ice armor"] = &AiObjectContextInternal::ice_armor;
+                creators["frost armor"] = &AiObjectContextInternal::frost_armor;
+                creators["fireball"] = &AiObjectContextInternal::fireball;
+                creators["pyroblast"] = &AiObjectContextInternal::pyroblast;
+                creators["flamestrike"] = &AiObjectContextInternal::flamestrike;
+                creators["fire blast"] = &AiObjectContextInternal::fire_blast;
+                creators["scorch"] = &AiObjectContextInternal::scorch;
+                creators["counterspell"] = &AiObjectContextInternal::counterspell;
+                creators["remove curse"] = &AiObjectContextInternal::remove_curse;
+                creators["remove curse on party"] = &AiObjectContextInternal::remove_curse_on_party;
+                creators["icy veins"] = &AiObjectContextInternal::icy_veins;
+                creators["combustion"] = &AiObjectContextInternal::combustion;
+                creators["ice block"] = &AiObjectContextInternal::ice_block;
+                creators["polymorph"] = &AiObjectContextInternal::polymorph;
+                creators["spellsteal"] = &AiObjectContextInternal::spellsteal;
+                creators["living bomb"] = &AiObjectContextInternal::living_bomb;
+                creators["dragon's breath"] = &AiObjectContextInternal::dragons_breath;
+                creators["blast wave"] = &AiObjectContextInternal::blast_wave;
+                creators["invisibility"] = &AiObjectContextInternal::invisibility;
+                creators["evocation"] = &AiObjectContextInternal::evocation;
+                creators["arcane blast"] = &AiObjectContextInternal::arcane_blast;
+                creators["arcane barrage"] = &AiObjectContextInternal::arcane_barrage;
+                creators["arcane missiles"] = &AiObjectContextInternal::arcane_missiles;
+                creators["counterspell on enemy healer"] = &AiObjectContextInternal::counterspell_on_enemy_healer;
+            }
+
+        private:
+            static Action* arcane_missiles(PlayerbotAI* ai) { return new CastArcaneMissilesAction(ai); }
+            static Action* arcane_barrage(PlayerbotAI* ai) { return new CastArcaneBarrageAction(ai); }
+            static Action* arcane_blast(PlayerbotAI* ai) { return new CastArcaneBlastAction(ai); }
+            static Action* frostbolt(PlayerbotAI* ai) { return new CastFrostboltAction(ai); }
+            static Action* blizzard(PlayerbotAI* ai) { return new CastBlizzardAction(ai); }
+            static Action* frost_nova(PlayerbotAI* ai) { return new CastFrostNovaAction(ai); }
+            static Action* arcane_intellect(PlayerbotAI* ai) { return new CastArcaneIntellectAction(ai); }
+            static Action* arcane_intellect_on_party(PlayerbotAI* ai) { return new CastArcaneIntellectOnPartyAction(ai); }
+            static Action* conjure_water(PlayerbotAI* ai) { return new CastConjureWaterAction(ai); }
+            static Action* conjure_food(PlayerbotAI* ai) { return new CastConjureFoodAction(ai); }
+            static Action* molten_armor(PlayerbotAI* ai) { return new CastMoltenArmorAction(ai); }
+            static Action* mage_armor(PlayerbotAI* ai) { return new CastMageArmorAction(ai); }
+            static Action* ice_armor(PlayerbotAI* ai) { return new CastIceArmorAction(ai); }
+            static Action* frost_armor(PlayerbotAI* ai) { return new CastFrostArmorAction(ai); }
+            static Action* fireball(PlayerbotAI* ai) { return new CastFireballAction(ai); }
+            static Action* pyroblast(PlayerbotAI* ai) { return new CastPyroblastAction(ai); }
+            static Action* flamestrike(PlayerbotAI* ai) { return new CastFlamestrikeAction(ai); }
+            static Action* fire_blast(PlayerbotAI* ai) { return new CastFireBlastAction(ai); }
+            static Action* scorch(PlayerbotAI* ai) { return new CastScorchAction(ai); }
+            static Action* counterspell(PlayerbotAI* ai) { return new CastCounterspellAction(ai); }
+            static Action* remove_curse(PlayerbotAI* ai) { return new CastRemoveCurseAction(ai); }
+            static Action* remove_curse_on_party(PlayerbotAI* ai) { return new CastRemoveCurseOnPartyAction(ai); }
+            static Action* icy_veins(PlayerbotAI* ai) { return new CastIcyVeinsAction(ai); }
+            static Action* combustion(PlayerbotAI* ai) { return new CastCombustionAction(ai); }
+            static Action* ice_block(PlayerbotAI* ai) { return new CastIceBlockAction(ai); }
+            static Action* polymorph(PlayerbotAI* ai) { return new CastPolymorphAction(ai); }
+            static Action* spellsteal(PlayerbotAI* ai) { return new CastSpellstealAction(ai); }
+            static Action* living_bomb(PlayerbotAI* ai) { return new CastLivingBombAction(ai); }
+            static Action* dragons_breath(PlayerbotAI* ai) { return new CastDragonsBreathAction(ai); }
+            static Action* blast_wave(PlayerbotAI* ai) { return new CastBlastWaveAction(ai); }
+            static Action* invisibility(PlayerbotAI* ai) { return new CastInvisibilityAction(ai); }
+            static Action* evocation(PlayerbotAI* ai) { return new CastEvocationAction(ai); }
+            static Action* counterspell_on_enemy_healer(PlayerbotAI* ai) { return new CastCounterspellOnEnemyHealerAction(ai); }
+        };
+    };
+};
+
+
+
+MageAiObjectContext::MageAiObjectContext(PlayerbotAI* ai) : AiObjectContext(ai)
+{
+    strategyContexts.Add(new ai::mage::StrategyFactoryInternal());
+    strategyContexts.Add(new ai::mage::MageStrategyFactoryInternal());
+    strategyContexts.Add(new ai::mage::MageBuffStrategyFactoryInternal());
+    actionContexts.Add(new ai::mage::AiObjectContextInternal());
+    triggerContexts.Add(new ai::mage::TriggerFactoryInternal());
+}
diff --git a/src/plugins/playerbot/strategy/mage/MageAiObjectContext.h b/src/plugins/playerbot/strategy/mage/MageAiObjectContext.h
new file mode 100644
index 0000000..0fe90e2
--- /dev/null
+++ b/src/plugins/playerbot/strategy/mage/MageAiObjectContext.h
@@ -0,0 +1,12 @@
+#pragma once
+
+#include "../AiObjectContext.h"
+
+namespace ai
+{
+    class MageAiObjectContext : public AiObjectContext
+    {
+    public:
+        MageAiObjectContext(PlayerbotAI* ai);
+    };
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/mage/MageMultipliers.cpp b/src/plugins/playerbot/strategy/mage/MageMultipliers.cpp
new file mode 100644
index 0000000..8ebe45f
--- /dev/null
+++ b/src/plugins/playerbot/strategy/mage/MageMultipliers.cpp
@@ -0,0 +1,6 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "MageMultipliers.h"
+#include "MageActions.h"
+
+using namespace ai;
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/mage/MageMultipliers.h b/src/plugins/playerbot/strategy/mage/MageMultipliers.h
new file mode 100644
index 0000000..7cfbdd4
--- /dev/null
+++ b/src/plugins/playerbot/strategy/mage/MageMultipliers.h
@@ -0,0 +1,6 @@
+#pragma once
+
+namespace ai
+{
+   
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/mage/MageTriggers.cpp b/src/plugins/playerbot/strategy/mage/MageTriggers.cpp
new file mode 100644
index 0000000..48750fe
--- /dev/null
+++ b/src/plugins/playerbot/strategy/mage/MageTriggers.cpp
@@ -0,0 +1,15 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "MageTriggers.h"
+#include "MageActions.h"
+
+using namespace ai;
+
+bool MageArmorTrigger::IsActive()
+{
+    Unit* target = GetTarget();
+    return !ai->HasAura("ice armor", target) &&
+        !ai->HasAura("frost armor", target) &&
+        !ai->HasAura("molten armor", target) &&
+        !ai->HasAura("mage armor", target);
+}
diff --git a/src/plugins/playerbot/strategy/mage/MageTriggers.h b/src/plugins/playerbot/strategy/mage/MageTriggers.h
new file mode 100644
index 0000000..a07b4f2
--- /dev/null
+++ b/src/plugins/playerbot/strategy/mage/MageTriggers.h
@@ -0,0 +1,92 @@
+#pragma once
+#include "../triggers/GenericTriggers.h"
+
+namespace ai
+{
+    BUFF_ON_PARTY_TRIGGER(ArcaneIntellectOnPartyTrigger, "arcane intellect", "arcane intellect on party")
+    BUFF_TRIGGER(ArcaneIntellectTrigger, "arcane intellect", "arcane intellect")
+
+    class MageArmorTrigger : public BuffTrigger {
+    public:
+        MageArmorTrigger(PlayerbotAI* ai) : BuffTrigger(ai, "mage armor") {}
+        virtual bool IsActive();
+    };
+
+    class LivingBombTrigger : public DebuffTrigger {
+    public:
+        LivingBombTrigger(PlayerbotAI* ai) : DebuffTrigger(ai, "living bomb") {}
+	};
+
+    class FireballTrigger : public DebuffTrigger {
+    public:
+        FireballTrigger(PlayerbotAI* ai) : DebuffTrigger(ai, "fireball") {}
+	};
+
+    class PyroblastTrigger : public DebuffTrigger {
+    public:
+        PyroblastTrigger(PlayerbotAI* ai) : DebuffTrigger(ai, "pyroblast") {}
+    };
+
+    class HotStreakTrigger : public HasAuraTrigger {
+    public:
+        HotStreakTrigger(PlayerbotAI* ai) : HasAuraTrigger(ai, "hot streak") {}
+    };
+
+    class MissileBarrageTrigger : public HasAuraTrigger {
+    public:
+        MissileBarrageTrigger(PlayerbotAI* ai) : HasAuraTrigger(ai, "missile barrage") {}
+    };
+
+    class ArcaneBlastTrigger : public BuffTrigger {
+    public:
+        ArcaneBlastTrigger(PlayerbotAI* ai) : BuffTrigger(ai, "arcane blast") {}
+    };
+
+    class CounterspellInterruptSpellTrigger : public InterruptSpellTrigger
+    {
+    public:
+        CounterspellInterruptSpellTrigger(PlayerbotAI* ai) : InterruptSpellTrigger(ai, "counterspell") {}
+    };
+
+    class CombustionTrigger : public BoostTrigger
+    {
+    public:
+        CombustionTrigger(PlayerbotAI* ai) : BoostTrigger(ai, "combustion") {}
+    };
+
+    class IcyVeinsTrigger : public BoostTrigger
+    {
+    public:
+        IcyVeinsTrigger(PlayerbotAI* ai) : BoostTrigger(ai, "icy veins") {}
+    };
+
+    class PolymorphTrigger : public HasCcTargetTrigger
+    {
+    public:
+        PolymorphTrigger(PlayerbotAI* ai) : HasCcTargetTrigger(ai, "polymorph") {}
+    };
+
+    class RemoveCurseTrigger : public NeedCureTrigger
+    {
+    public:
+        RemoveCurseTrigger(PlayerbotAI* ai) : NeedCureTrigger(ai, "remove curse", DISPEL_CURSE) {}
+    };
+
+    class PartyMemberRemoveCurseTrigger : public PartyMemberNeedCureTrigger
+    {
+    public:
+        PartyMemberRemoveCurseTrigger(PlayerbotAI* ai) : PartyMemberNeedCureTrigger(ai, "remove curse", DISPEL_CURSE) {}
+    };
+
+    class SpellstealTrigger : public TargetAuraDispelTrigger
+    {
+    public:
+        SpellstealTrigger(PlayerbotAI* ai) : TargetAuraDispelTrigger(ai, "spellsteal", DISPEL_MAGIC) {}
+    };
+
+    class CounterspellEnemyHealerTrigger : public InterruptEnemyHealerTrigger
+    {
+    public:
+        CounterspellEnemyHealerTrigger(PlayerbotAI* ai) : InterruptEnemyHealerTrigger(ai, "counterspell") {}
+    };
+}
diff --git a/src/plugins/playerbot/strategy/paladin/DpsPaladinStrategy.cpp b/src/plugins/playerbot/strategy/paladin/DpsPaladinStrategy.cpp
new file mode 100644
index 0000000..02c4a57
--- /dev/null
+++ b/src/plugins/playerbot/strategy/paladin/DpsPaladinStrategy.cpp
@@ -0,0 +1,83 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "PaladinMultipliers.h"
+#include "DpsPaladinStrategy.h"
+
+using namespace ai;
+
+class DpsPaladinStrategyActionNodeFactory : public NamedObjectFactory<ActionNode>
+{
+public:
+    DpsPaladinStrategyActionNodeFactory()
+    {
+        creators["seal of vengeance"] = &seal_of_vengeance;
+        creators["seal of command"] = &seal_of_command;
+        creators["blessing of might"] = &blessing_of_might;
+        creators["crusader strike"] = &crusader_strike;
+    }
+
+private:
+    static ActionNode* seal_of_vengeance(PlayerbotAI* ai)
+    {
+        return new ActionNode ("seal of vengeance",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("seal of command"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* seal_of_command(PlayerbotAI* ai)
+    {
+        return new ActionNode ("seal of command",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("seal of wisdom"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* blessing_of_might(PlayerbotAI* ai)
+    {
+        return new ActionNode ("blessing of might",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("blessing of kings"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* crusader_strike(PlayerbotAI* ai)
+    {
+        return new ActionNode ("crusader strike",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("melee"), NULL),
+            /*C*/ NULL);
+    }
+};
+
+DpsPaladinStrategy::DpsPaladinStrategy(PlayerbotAI* ai) : GenericPaladinStrategy(ai)
+{
+    actionNodeFactories.Add(new DpsPaladinStrategyActionNodeFactory());
+}
+
+NextAction** DpsPaladinStrategy::getDefaultActions()
+{
+    return NextAction::array(0, new NextAction("crusader strike", ACTION_NORMAL + 1), NULL);
+}
+
+void DpsPaladinStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    GenericPaladinStrategy::InitTriggers(triggers);
+    
+    triggers.push_back(new TriggerNode(
+        "low health",
+        NextAction::array(0, new NextAction("divine shield", ACTION_CRITICAL_HEAL + 2), new NextAction("holy light", ACTION_CRITICAL_HEAL + 2), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "judgement of wisdom",
+        NextAction::array(0, new NextAction("judgement of wisdom", ACTION_NORMAL + 2), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "blessing",
+        NextAction::array(0, new NextAction("blessing of might", ACTION_HIGH + 8), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"medium aoe",
+		NextAction::array(0, new NextAction("divine storm", ACTION_HIGH + 1), new NextAction("consecration", ACTION_HIGH + 1), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"art of war",
+		NextAction::array(0, new NextAction("exorcism", ACTION_HIGH + 2), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/paladin/DpsPaladinStrategy.h b/src/plugins/playerbot/strategy/paladin/DpsPaladinStrategy.h
new file mode 100644
index 0000000..cff5fd2
--- /dev/null
+++ b/src/plugins/playerbot/strategy/paladin/DpsPaladinStrategy.h
@@ -0,0 +1,18 @@
+#pragma once
+
+#include "GenericPaladinStrategy.h"
+
+namespace ai
+{
+    class DpsPaladinStrategy : public GenericPaladinStrategy
+    {
+    public:
+        DpsPaladinStrategy(PlayerbotAI* ai);
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "dps"; }
+        virtual NextAction** getDefaultActions();
+        virtual int GetType() { return STRATEGY_TYPE_COMBAT | STRATEGY_TYPE_DPS | STRATEGY_TYPE_MELEE; }
+    };
+}
diff --git a/src/plugins/playerbot/strategy/paladin/GenericPaladinNonCombatStrategy.cpp b/src/plugins/playerbot/strategy/paladin/GenericPaladinNonCombatStrategy.cpp
new file mode 100644
index 0000000..fda1619
--- /dev/null
+++ b/src/plugins/playerbot/strategy/paladin/GenericPaladinNonCombatStrategy.cpp
@@ -0,0 +1,65 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "PaladinMultipliers.h"
+#include "GenericPaladinNonCombatStrategy.h"
+#include "GenericPaladinStrategyActionNodeFactory.h"
+
+using namespace ai;
+
+GenericPaladinNonCombatStrategy::GenericPaladinNonCombatStrategy(PlayerbotAI* ai) : NonCombatStrategy(ai)
+{
+    actionNodeFactories.Add(new GenericPaladinStrategyActionNodeFactory());
+}
+
+void GenericPaladinNonCombatStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    NonCombatStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "blessing of kings on party",
+        NextAction::array(0, new NextAction("blessing of kings on party", 11.0f), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"party member dead",
+		NextAction::array(0, new NextAction("redemption", 30.0f), NULL)));
+
+	 triggers.push_back(new TriggerNode(
+        "medium health",
+        NextAction::array(0, new NextAction("flash of light", 25.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "party member medium health",
+        NextAction::array(0, new NextAction("flash of light on party", 26.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "low health",
+        NextAction::array(0, new NextAction("holy light", 50.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "party member low health",
+        NextAction::array(0, new NextAction("holy light on party", 40.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "cleanse cure disease",
+        NextAction::array(0, new NextAction("cleanse disease", 41.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "cleanse party member cure disease",
+        NextAction::array(0, new NextAction("cleanse disease on party", 40.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "cleanse cure poison",
+        NextAction::array(0, new NextAction("cleanse poison", 41.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "cleanse party member cure poison",
+        NextAction::array(0, new NextAction("cleanse poison on party", 40.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "cleanse cure magic",
+        NextAction::array(0, new NextAction("cleanse magic", 41.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "cleanse party member cure magic",
+        NextAction::array(0, new NextAction("cleanse magic on party", 40.0f), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/paladin/GenericPaladinNonCombatStrategy.h b/src/plugins/playerbot/strategy/paladin/GenericPaladinNonCombatStrategy.h
new file mode 100644
index 0000000..cf03f6d
--- /dev/null
+++ b/src/plugins/playerbot/strategy/paladin/GenericPaladinNonCombatStrategy.h
@@ -0,0 +1,16 @@
+#pragma once
+
+#include "../generic/NonCombatStrategy.h"
+
+namespace ai
+{
+    class GenericPaladinNonCombatStrategy : public NonCombatStrategy
+    {
+    public:
+        GenericPaladinNonCombatStrategy(PlayerbotAI* ai);
+        virtual string getName() { return "nc"; }
+    
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+   };
+}
diff --git a/src/plugins/playerbot/strategy/paladin/GenericPaladinStrategy.cpp b/src/plugins/playerbot/strategy/paladin/GenericPaladinStrategy.cpp
new file mode 100644
index 0000000..d218be1
--- /dev/null
+++ b/src/plugins/playerbot/strategy/paladin/GenericPaladinStrategy.cpp
@@ -0,0 +1,77 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "GenericPaladinStrategy.h"
+#include "GenericPaladinStrategyActionNodeFactory.h"
+
+using namespace ai;
+
+
+GenericPaladinStrategy::GenericPaladinStrategy(PlayerbotAI* ai) : MeleeCombatStrategy(ai)
+{
+    actionNodeFactories.Add(new GenericPaladinStrategyActionNodeFactory());
+}
+
+void GenericPaladinStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    MeleeCombatStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "medium health",
+        NextAction::array(0, new NextAction("flash of light", ACTION_MEDIUM_HEAL + 2), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "party member medium health",
+        NextAction::array(0, new NextAction("flash of light on party", ACTION_MEDIUM_HEAL + 1), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "low health",
+        NextAction::array(0, new NextAction("divine protection", ACTION_CRITICAL_HEAL + 2), new NextAction("holy light", ACTION_CRITICAL_HEAL + 2), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "party member low health",
+        NextAction::array(0, new NextAction("holy light on party", ACTION_CRITICAL_HEAL + 1), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"hammer of justice interrupt",
+		NextAction::array(0, new NextAction("hammer of justice", ACTION_INTERRUPT), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"hammer of justice on enemy healer",
+		NextAction::array(0, new NextAction("hammer of justice on enemy healer", ACTION_INTERRUPT), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"critical health",
+		NextAction::array(0, new NextAction("lay on hands", ACTION_EMERGENCY), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"party member critical health",
+		NextAction::array(0, new NextAction("lay on hands on party", ACTION_EMERGENCY), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"target critical health",
+		NextAction::array(0, new NextAction("hammer of wrath", ACTION_HIGH + 1), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "cleanse cure disease",
+        NextAction::array(0, new NextAction("cleanse disease", ACTION_DISPEL + 2), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "cleanse party member cure disease",
+        NextAction::array(0, new NextAction("cleanse disease on party", ACTION_DISPEL + 1), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "cleanse cure poison",
+        NextAction::array(0, new NextAction("cleanse poison", ACTION_DISPEL + 2), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "cleanse party member cure poison",
+        NextAction::array(0, new NextAction("cleanse poison on party", ACTION_DISPEL + 1), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"cleanse cure magic",
+		NextAction::array(0, new NextAction("cleanse magic", ACTION_DISPEL + 2), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"cleanse party member cure magic",
+		NextAction::array(0, new NextAction("cleanse magic on party", ACTION_DISPEL + 1), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/paladin/GenericPaladinStrategy.h b/src/plugins/playerbot/strategy/paladin/GenericPaladinStrategy.h
new file mode 100644
index 0000000..000f785
--- /dev/null
+++ b/src/plugins/playerbot/strategy/paladin/GenericPaladinStrategy.h
@@ -0,0 +1,18 @@
+#pragma once
+
+#include "../Strategy.h"
+#include "PaladinAiObjectContext.h"
+#include "../generic/MeleeCombatStrategy.h"
+
+namespace ai
+{
+    class GenericPaladinStrategy : public MeleeCombatStrategy
+    {
+    public:
+        GenericPaladinStrategy(PlayerbotAI* ai);
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "paladin"; }
+    };
+}
diff --git a/src/plugins/playerbot/strategy/paladin/GenericPaladinStrategyActionNodeFactory.h b/src/plugins/playerbot/strategy/paladin/GenericPaladinStrategyActionNodeFactory.h
new file mode 100644
index 0000000..c2e1865
--- /dev/null
+++ b/src/plugins/playerbot/strategy/paladin/GenericPaladinStrategyActionNodeFactory.h
@@ -0,0 +1,150 @@
+#pragma once
+
+namespace ai
+{
+    class GenericPaladinStrategyActionNodeFactory : public NamedObjectFactory<ActionNode>
+    {
+    public:
+        GenericPaladinStrategyActionNodeFactory()
+        {
+            creators["seal of light"] = &seal_of_light;
+            creators["cleanse poison"] = &cleanse_poison;
+            creators["cleanse disease"] = &cleanse_disease;
+            creators["cleanse magic"] = &cleanse_magic;
+            creators["cleanse poison on party"] = &cleanse_poison_on_party;
+            creators["cleanse disease on party"] = &cleanse_disease_on_party;
+            creators["seal of wisdom"] = &seal_of_wisdom;
+            creators["seal of justice"] = &seal_of_justice;
+            creators["hand of reckoning"] = &hand_of_reckoning;
+            creators["judgement of wisdom"] = &judgement_of_wisdom;
+            creators["divine shield"] = &divine_shield;
+            creators["flash of light"] = &flash_of_light;
+            creators["flash of light on party"] = &flash_of_light_on_party;
+            creators["holy wrath"] = &holy_wrath;
+            creators["lay on hands"] = &lay_on_hands;
+            creators["lay on hands on party"] = &lay_on_hands_on_party;
+            creators["hammer of wrath"] = &hammer_of_wrath;
+        }
+    private:
+        static ActionNode* lay_on_hands(PlayerbotAI* ai)
+        {
+            return new ActionNode ("lay on hands",
+                /*P*/ NULL,
+                /*A*/ NextAction::array(0, new NextAction("divine shield"), new NextAction("flash of light"), NULL),
+                /*C*/ NULL);
+        }
+        static ActionNode* lay_on_hands_on_party(PlayerbotAI* ai)
+        {
+            return new ActionNode ("lay on hands on party",
+                /*P*/ NULL,
+                /*A*/ NextAction::array(0, new NextAction("flash of light"), NULL),
+                /*C*/ NULL);
+        }
+        static ActionNode* seal_of_light(PlayerbotAI* ai)
+        {
+            return new ActionNode ("seal of light",
+                /*P*/ NULL,
+                /*A*/ NextAction::array(0, new NextAction("seal of justice"), NULL),
+                /*C*/ NULL);
+        }
+        static ActionNode* cleanse_poison(PlayerbotAI* ai)
+        {
+            return new ActionNode ("cleanse poison",
+                /*P*/ NULL,
+                /*A*/ NextAction::array(0, new NextAction("purify poison"), NULL),
+                /*C*/ NULL);
+        }
+        static ActionNode* cleanse_magic(PlayerbotAI* ai)
+        {
+            return new ActionNode ("cleanse magic",
+                /*P*/ NULL,
+                /*A*/ NULL,
+                /*C*/ NULL);
+        }
+        static ActionNode* cleanse_disease(PlayerbotAI* ai)
+        {
+            return new ActionNode ("cleanse disease",
+                /*P*/ NULL,
+                /*A*/ NextAction::array(0, new NextAction("purify disease"), NULL),
+                /*C*/ NULL);
+        }
+        static ActionNode* cleanse_poison_on_party(PlayerbotAI* ai)
+        {
+            return new ActionNode ("cleanse poison on party",
+                /*P*/ NULL,
+                /*A*/ NextAction::array(0, new NextAction("purify poison on party"), NULL),
+                /*C*/ NULL);
+        }
+        static ActionNode* cleanse_disease_on_party(PlayerbotAI* ai)
+        {
+            return new ActionNode ("cleanse disease on party",
+                /*P*/ NULL,
+                /*A*/ NextAction::array(0, new NextAction("purify disease on party"), NULL),
+                /*C*/ NULL);
+        }
+        static ActionNode* seal_of_wisdom(PlayerbotAI* ai)
+        {
+            return new ActionNode ("seal of wisdom",
+                /*P*/ NULL,
+                /*A*/ NextAction::array(0, new NextAction("seal of justice"), NULL),
+                /*C*/ NULL);
+        }
+        static ActionNode* seal_of_justice(PlayerbotAI* ai)
+        {
+            return new ActionNode ("seal of justice",
+                /*P*/ NULL,
+                /*A*/ NextAction::array(0, new NextAction("seal of righteousness"), NULL),
+                /*C*/ NULL);
+        }
+        static ActionNode* hand_of_reckoning(PlayerbotAI* ai)
+        {
+            return new ActionNode ("hand of reckoning",
+                /*P*/ NULL,
+                /*A*/ NextAction::array(0, new NextAction("judgement of justice"), NULL),
+                /*C*/ NULL);
+        }
+        static ActionNode* judgement_of_wisdom(PlayerbotAI* ai)
+        {
+            return new ActionNode ("judgement of wisdom",
+                /*P*/ NULL,
+                /*A*/ NextAction::array(0, new NextAction("judgement of light"), NULL),
+                /*C*/ NULL);
+        }
+        static ActionNode* divine_shield(PlayerbotAI* ai)
+        {
+            return new ActionNode ("divine shield",
+                /*P*/ NULL,
+                /*A*/ NextAction::array(0, new NextAction("divine protection"), NULL),
+                /*C*/ NULL);
+        }
+        static ActionNode* flash_of_light(PlayerbotAI* ai)
+        {
+            return new ActionNode ("flash of light",
+                /*P*/ NULL,
+                /*A*/ NextAction::array(0, new NextAction("holy light"), NULL),
+                /*C*/ NULL);
+        }
+        static ActionNode* flash_of_light_on_party(PlayerbotAI* ai)
+        {
+            return new ActionNode ("flash of light on party",
+                /*P*/ NULL,
+                /*A*/ NextAction::array(0, new NextAction("holy light on party"), NULL),
+                /*C*/ NULL);
+        }
+        static ActionNode* holy_wrath(PlayerbotAI* ai)
+        {
+            return new ActionNode ("holy wrath",
+                /*P*/ NULL,
+                /*A*/ NextAction::array(0, new NextAction("consecration"), NULL),
+                /*C*/ NULL);
+        }
+        static ActionNode* hammer_of_wrath(PlayerbotAI* ai)
+        {
+            return new ActionNode ("hammer of wrath",
+                /*P*/ NULL,
+                /*A*/ NextAction::array(0, new NextAction("melee"), NULL),
+                /*C*/ NULL);
+        }
+    };
+
+};
diff --git a/src/plugins/playerbot/strategy/paladin/PaladinActions.cpp b/src/plugins/playerbot/strategy/paladin/PaladinActions.cpp
new file mode 100644
index 0000000..47def40
--- /dev/null
+++ b/src/plugins/playerbot/strategy/paladin/PaladinActions.cpp
@@ -0,0 +1,6 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "PaladinActions.h"
+
+using namespace ai;
+
diff --git a/src/plugins/playerbot/strategy/paladin/PaladinActions.h b/src/plugins/playerbot/strategy/paladin/PaladinActions.h
new file mode 100644
index 0000000..78f782c
--- /dev/null
+++ b/src/plugins/playerbot/strategy/paladin/PaladinActions.h
@@ -0,0 +1,365 @@
+#pragma once
+#include "../actions/GenericActions.h"
+
+namespace ai
+{
+    class CastJudgementOfLightAction : public CastMeleeSpellAction
+    {
+    public:
+        CastJudgementOfLightAction(PlayerbotAI* ai) : CastMeleeSpellAction(ai, "judgement of light") {}
+    };
+
+    class CastJudgementOfWisdomAction : public CastMeleeSpellAction
+    {
+    public:
+        CastJudgementOfWisdomAction(PlayerbotAI* ai) : CastMeleeSpellAction(ai, "judgement of wisdom") {}
+    };
+
+    class CastJudgementOfJusticeAction : public CastMeleeSpellAction
+    {
+    public:
+        CastJudgementOfJusticeAction(PlayerbotAI* ai) : CastMeleeSpellAction(ai, "judgement of justice") {}
+    };
+
+	class CastRighteousFuryAction : public CastBuffSpellAction
+	{
+	public:
+		CastRighteousFuryAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "righteous fury") {}
+	};
+
+	class CastDevotionAuraAction : public CastBuffSpellAction
+	{
+	public:
+		CastDevotionAuraAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "devotion aura") {}
+	};
+
+	class CastRetributionAuraAction : public CastBuffSpellAction
+	{
+	public:
+		CastRetributionAuraAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "retribution aura") {}
+	};
+
+	class CastConcentrationAuraAction : public CastBuffSpellAction
+	{
+	public:
+		CastConcentrationAuraAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "concentration aura") {}
+	};
+
+	class CastDivineStormAction : public CastBuffSpellAction
+	{
+	public:
+		CastDivineStormAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "divine storm") {}
+	};
+
+	class CastCrusaderStrikeAction : public CastMeleeSpellAction
+	{
+	public:
+		CastCrusaderStrikeAction(PlayerbotAI* ai) : CastMeleeSpellAction(ai, "crusader strike") {}
+	};
+
+	class CastShadowResistanceAuraAction : public CastBuffSpellAction
+	{
+	public:
+		CastShadowResistanceAuraAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "shadow resistance aura") {}
+	};
+
+	class CastFrostResistanceAuraAction : public CastBuffSpellAction
+	{
+	public:
+		CastFrostResistanceAuraAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "frost resistance aura") {}
+	};
+
+	class CastFireResistanceAuraAction : public CastBuffSpellAction
+	{
+	public:
+		CastFireResistanceAuraAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "fire resistance aura") {}
+	};
+
+	class CastCrusaderAuraAction : public CastBuffSpellAction
+	{
+	public:
+		CastCrusaderAuraAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "crusader aura") {}
+	};
+
+	class CastSealOfRighteousnessAction : public CastBuffSpellAction
+	{
+	public:
+		CastSealOfRighteousnessAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "seal of righteousness") {}
+	};
+
+	class CastSealOfJusticeAction : public CastBuffSpellAction
+	{
+	public:
+		CastSealOfJusticeAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "seal of justice") {}
+	};
+
+
+	class CastSealOfLightAction : public CastBuffSpellAction
+	{
+	public:
+		CastSealOfLightAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "seal of light") {}
+	};
+
+	class CastSealOfWisdomAction : public CastBuffSpellAction
+	{
+	public:
+		CastSealOfWisdomAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "seal of wisdom") {}
+	};
+
+	class CastSealOfCommandAction : public CastBuffSpellAction
+	{
+	public:
+		CastSealOfCommandAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "seal of command") {}
+	};
+
+	class CastSealOfVengeanceAction : public CastBuffSpellAction
+	{
+	public:
+	    CastSealOfVengeanceAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "seal of vengeance") {}
+	};
+
+
+	class CastBlessingOfMightAction : public CastBuffSpellAction
+	{
+	public:
+		CastBlessingOfMightAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "blessing of might") {}
+	};
+
+	class CastBlessingOfMightOnPartyAction : public BuffOnPartyAction
+	{
+	public:
+		CastBlessingOfMightOnPartyAction(PlayerbotAI* ai) : BuffOnPartyAction(ai, "blessing of might") {}
+        virtual string getName() { return "blessing of might on party";}
+	};
+
+	class CastBlessingOfWisdomAction : public CastBuffSpellAction
+	{
+	public:
+		CastBlessingOfWisdomAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "blessing of wisdom") {}
+	};
+
+	class CastBlessingOfWisdomOnPartyAction : public BuffOnPartyAction
+	{
+	public:
+		CastBlessingOfWisdomOnPartyAction(PlayerbotAI* ai) : BuffOnPartyAction(ai, "blessing of wisdom") {}
+        virtual string getName() { return "blessing of wisdom on party";}
+	};
+
+	class CastBlessingOfKingsAction : public CastBuffSpellAction
+	{
+	public:
+		CastBlessingOfKingsAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "blessing of kings") {}
+	};
+
+	class CastBlessingOfKingsOnPartyAction : public BuffOnPartyAction
+	{
+	public:
+		CastBlessingOfKingsOnPartyAction(PlayerbotAI* ai) : BuffOnPartyAction(ai, "blessing of kings") {}
+        virtual string getName() { return "blessing of kings on party";}
+	};
+
+	class CastBlessingOfSanctuaryAction : public CastBuffSpellAction
+	{
+	public:
+		CastBlessingOfSanctuaryAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "blessing of sanctuary") {}
+	};
+
+	class CastBlessingOfSanctuaryOnPartyAction : public BuffOnPartyAction
+	{
+	public:
+		CastBlessingOfSanctuaryOnPartyAction(PlayerbotAI* ai) : BuffOnPartyAction(ai, "blessing of sanctuary") {}
+        virtual string getName() { return "blessing of sanctuary on party";}
+	};
+
+    class CastHolyLightAction : public CastHealingSpellAction
+    {
+    public:
+        CastHolyLightAction(PlayerbotAI* ai) : CastHealingSpellAction(ai, "holy light") {}
+    };
+
+    class CastHolyLightOnPartyAction : public HealPartyMemberAction
+    {
+    public:
+        CastHolyLightOnPartyAction(PlayerbotAI* ai) : HealPartyMemberAction(ai, "holy light") {}
+
+        virtual string getName() { return "holy light on party"; }
+    };
+
+    class CastFlashOfLightAction : public CastHealingSpellAction
+    {
+    public:
+        CastFlashOfLightAction(PlayerbotAI* ai) : CastHealingSpellAction(ai, "flash of light") {}
+    };
+
+    class CastFlashOfLightOnPartyAction : public HealPartyMemberAction
+    {
+    public:
+        CastFlashOfLightOnPartyAction(PlayerbotAI* ai) : HealPartyMemberAction(ai, "flash of light") {}
+
+        virtual string getName() { return "flash of light on party"; }
+    };
+
+    class CastLayOnHandsAction : public CastHealingSpellAction
+    {
+    public:
+        CastLayOnHandsAction(PlayerbotAI* ai) : CastHealingSpellAction(ai, "lay on hands") {}
+    };
+
+    class CastLayOnHandsOnPartyAction : public HealPartyMemberAction
+    {
+    public:
+        CastLayOnHandsOnPartyAction(PlayerbotAI* ai) : HealPartyMemberAction(ai, "lay on hands") {}
+
+        virtual string getName() { return "lay on hands on party"; }
+    };
+
+	class CastDivineProtectionAction : public CastBuffSpellAction
+	{
+	public:
+		CastDivineProtectionAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "divine protection") {}
+	};
+
+    class CastDivineProtectionOnPartyAction : public HealPartyMemberAction
+    {
+    public:
+        CastDivineProtectionOnPartyAction(PlayerbotAI* ai) : HealPartyMemberAction(ai, "divine protection") {}
+
+        virtual string getName() { return "divine protection on party"; }
+    };
+
+	class CastDivineShieldAction: public CastBuffSpellAction
+	{
+	public:
+		CastDivineShieldAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "divine shield") {}
+	};
+
+    class CastConsecrationAction : public CastMeleeSpellAction
+    {
+    public:
+	    CastConsecrationAction(PlayerbotAI* ai) : CastMeleeSpellAction(ai, "consecration") {}
+    };
+
+    class CastHolyWrathAction : public CastMeleeSpellAction
+    {
+    public:
+        CastHolyWrathAction(PlayerbotAI* ai) : CastMeleeSpellAction(ai, "holy wrath") {}
+    };
+
+    class CastHammerOfJusticeAction : public CastMeleeSpellAction
+    {
+    public:
+        CastHammerOfJusticeAction(PlayerbotAI* ai) : CastMeleeSpellAction(ai, "hammer of justice") {}
+    };
+
+	class CastHammerOfWrathAction : public CastMeleeSpellAction
+	{
+	public:
+		CastHammerOfWrathAction(PlayerbotAI* ai) : CastMeleeSpellAction(ai, "hammer of wrath") {}
+	};
+
+	class CastHammerOfTheRighteousAction : public CastMeleeSpellAction
+	{
+	public:
+		CastHammerOfTheRighteousAction(PlayerbotAI* ai) : CastMeleeSpellAction(ai, "hammer of the righteous") {}
+	};
+
+	class CastPurifyPoisonAction : public CastCureSpellAction
+	{
+	public:
+		CastPurifyPoisonAction(PlayerbotAI* ai) : CastCureSpellAction(ai, "purify") {}
+	};
+
+	class CastPurifyDiseaseAction : public CastCureSpellAction
+	{
+	public:
+		CastPurifyDiseaseAction(PlayerbotAI* ai) : CastCureSpellAction(ai, "purify") {}
+	};
+
+    class CastPurifyPoisonOnPartyAction : public CurePartyMemberAction
+    {
+    public:
+        CastPurifyPoisonOnPartyAction(PlayerbotAI* ai) : CurePartyMemberAction(ai, "purify", DISPEL_POISON) {}
+
+        virtual string getName() { return "purify poison on party"; }
+    };
+
+	class CastPurifyDiseaseOnPartyAction : public CurePartyMemberAction
+	{
+	public:
+		CastPurifyDiseaseOnPartyAction(PlayerbotAI* ai) : CurePartyMemberAction(ai, "purify", DISPEL_DISEASE) {}
+
+		virtual string getName() { return "purify disease on party"; }
+	};
+
+	class CastHandOfReckoningAction : public CastSpellAction
+	{
+	public:
+		CastHandOfReckoningAction(PlayerbotAI* ai) : CastSpellAction(ai, "hand of reckoning") {}
+	};
+
+	class CastCleansePoisonAction : public CastCureSpellAction
+	{
+	public:
+		CastCleansePoisonAction(PlayerbotAI* ai) : CastCureSpellAction(ai, "cleanse") {}
+	};
+
+	class CastCleanseDiseaseAction : public CastCureSpellAction
+	{
+	public:
+		CastCleanseDiseaseAction(PlayerbotAI* ai) : CastCureSpellAction(ai, "cleanse") {}
+	};
+
+	class CastCleanseMagicAction : public CastCureSpellAction
+	{
+	public:
+		CastCleanseMagicAction(PlayerbotAI* ai) : CastCureSpellAction(ai, "cleanse") {}
+	};
+
+    class CastCleansePoisonOnPartyAction : public CurePartyMemberAction
+    {
+    public:
+        CastCleansePoisonOnPartyAction(PlayerbotAI* ai) : CurePartyMemberAction(ai, "cleanse", DISPEL_POISON) {}
+
+        virtual string getName() { return "cleanse poison on party"; }
+    };
+
+	class CastCleanseDiseaseOnPartyAction : public CurePartyMemberAction
+	{
+	public:
+		CastCleanseDiseaseOnPartyAction(PlayerbotAI* ai) : CurePartyMemberAction(ai, "cleanse", DISPEL_DISEASE) {}
+
+		virtual string getName() { return "cleanse disease on party"; }
+	};
+
+	class CastCleanseMagicOnPartyAction : public CurePartyMemberAction
+	{
+	public:
+		CastCleanseMagicOnPartyAction(PlayerbotAI* ai) : CurePartyMemberAction(ai, "cleanse", DISPEL_MAGIC) {}
+
+		virtual string getName() { return "cleanse magic on party"; }
+	};
+
+    BEGIN_SPELL_ACTION(CastAvengersShieldAction, "avenger's shield")
+    END_SPELL_ACTION()
+
+	BEGIN_SPELL_ACTION(CastExorcismAction, "exorcism")
+	END_SPELL_ACTION()
+
+	class CastHolyShieldAction : public CastBuffSpellAction
+	{
+	public:
+		CastHolyShieldAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "holy shield") {}
+	};
+
+	class CastRedemptionAction : public ResurrectPartyMemberAction
+	{
+	public:
+		CastRedemptionAction(PlayerbotAI* ai) : ResurrectPartyMemberAction(ai, "redemption") {}
+	};
+
+    class CastHammerOfJusticeOnEnemyHealerAction : public CastSpellOnEnemyHealerAction
+    {
+    public:
+        CastHammerOfJusticeOnEnemyHealerAction(PlayerbotAI* ai) : CastSpellOnEnemyHealerAction(ai, "hammer of justice") {}
+    };
+}
diff --git a/src/plugins/playerbot/strategy/paladin/PaladinAiObjectContext.cpp b/src/plugins/playerbot/strategy/paladin/PaladinAiObjectContext.cpp
new file mode 100644
index 0000000..37c7468
--- /dev/null
+++ b/src/plugins/playerbot/strategy/paladin/PaladinAiObjectContext.cpp
@@ -0,0 +1,279 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "PaladinActions.h"
+#include "PaladinTriggers.h"
+#include "PaladinAiObjectContext.h"
+#include "GenericPaladinNonCombatStrategy.h"
+#include "TankPaladinStrategy.h"
+#include "DpsPaladinStrategy.h"
+#include "PaladinBuffStrategies.h"
+#include "../NamedObjectContext.h"
+
+using namespace ai;
+
+namespace ai
+{
+    namespace paladin
+    {
+        using namespace ai;
+
+        class StrategyFactoryInternal : public NamedObjectContext<Strategy>
+        {
+        public:
+            StrategyFactoryInternal()
+            {
+                creators["nc"] = &paladin::StrategyFactoryInternal::nc;
+            }
+
+        private:
+            static Strategy* nc(PlayerbotAI* ai) { return new GenericPaladinNonCombatStrategy(ai); }
+        };
+
+        class ResistanceStrategyFactoryInternal : public NamedObjectContext<Strategy>
+        {
+        public:
+            ResistanceStrategyFactoryInternal() : NamedObjectContext<Strategy>(false, true)
+            {
+                creators["rshadow"] = &paladin::ResistanceStrategyFactoryInternal::rshadow;
+                creators["rfrost"] = &paladin::ResistanceStrategyFactoryInternal::rfrost;
+                creators["rfire"] = &paladin::ResistanceStrategyFactoryInternal::rfire;
+            }
+
+        private:
+            static Strategy* rshadow(PlayerbotAI* ai) { return new PaladinShadowResistanceStrategy(ai); }
+            static Strategy* rfrost(PlayerbotAI* ai) { return new PaladinFrostResistanceStrategy(ai); }
+            static Strategy* rfire(PlayerbotAI* ai) { return new PaladinFireResistanceStrategy(ai); }
+        };
+
+        class BuffStrategyFactoryInternal : public NamedObjectContext<Strategy>
+        {
+        public:
+            BuffStrategyFactoryInternal() : NamedObjectContext<Strategy>(false, true)
+            {
+                creators["bhealth"] = &paladin::BuffStrategyFactoryInternal::bhealth;
+                creators["bmana"] = &paladin::BuffStrategyFactoryInternal::bmana;
+                creators["bdps"] = &paladin::BuffStrategyFactoryInternal::bdps;
+                creators["barmor"] = &paladin::BuffStrategyFactoryInternal::barmor;
+                creators["bspeed"] = &paladin::BuffStrategyFactoryInternal::bspeed;
+            }
+
+        private:
+            static Strategy* bhealth(PlayerbotAI* ai) { return new PaladinBuffHealthStrategy(ai); }
+            static Strategy* bmana(PlayerbotAI* ai) { return new PaladinBuffManaStrategy(ai); }
+            static Strategy* bdps(PlayerbotAI* ai) { return new PaladinBuffDpsStrategy(ai); }
+            static Strategy* barmor(PlayerbotAI* ai) { return new PaladinBuffArmorStrategy(ai); }
+            static Strategy* bspeed(PlayerbotAI* ai) { return new PaladinBuffSpeedStrategy(ai); }
+        };
+
+        class CombatStrategyFactoryInternal : public NamedObjectContext<Strategy>
+        {
+        public:
+            CombatStrategyFactoryInternal() : NamedObjectContext<Strategy>(false, true)
+            {
+                creators["tank"] = &paladin::CombatStrategyFactoryInternal::tank;
+                creators["dps"] = &paladin::CombatStrategyFactoryInternal::dps;
+            }
+
+        private:
+            static Strategy* tank(PlayerbotAI* ai) { return new TankPaladinStrategy(ai); }
+            static Strategy* dps(PlayerbotAI* ai) { return new DpsPaladinStrategy(ai); }
+        };
+    };
+};
+
+namespace ai
+{
+    namespace paladin
+    {
+        using namespace ai;
+
+        class TriggerFactoryInternal : public NamedObjectContext<Trigger>
+        {
+        public:
+            TriggerFactoryInternal()
+            {
+                creators["judgement of wisdom"] = &TriggerFactoryInternal::judgement_of_wisdom;
+                creators["judgement of light"] = &TriggerFactoryInternal::judgement_of_light;
+                creators["blessing"] = &TriggerFactoryInternal::blessing;
+                creators["seal"] = &TriggerFactoryInternal::seal;
+                creators["art of war"] = &TriggerFactoryInternal::art_of_war;
+                creators["blessing of kings on party"] = &TriggerFactoryInternal::blessing_of_kings_on_party;
+                creators["crusader aura"] = &TriggerFactoryInternal::crusader_aura;
+                creators["retribution aura"] = &TriggerFactoryInternal::retribution_aura;
+                creators["devotion aura"] = &TriggerFactoryInternal::devotion_aura;
+                creators["shadow resistance aura"] = &TriggerFactoryInternal::shadow_resistance_aura;
+                creators["frost resistance aura"] = &TriggerFactoryInternal::frost_resistance_aura;
+                creators["fire resistance aura"] = &TriggerFactoryInternal::fire_resistance_aura;
+                creators["hammer of justice snare"] = &TriggerFactoryInternal::hammer_of_justice_snare;
+                creators["hammer of justice interrupt"] = &TriggerFactoryInternal::hammer_of_justice_interrupt;
+                creators["cleanse cure disease"] = &TriggerFactoryInternal::CleanseCureDisease;
+                creators["cleanse party member cure disease"] = &TriggerFactoryInternal::CleanseCurePartyMemberDisease;
+                creators["cleanse cure poison"] = &TriggerFactoryInternal::CleanseCurePoison;
+                creators["cleanse party member cure poison"] = &TriggerFactoryInternal::CleanseCurePartyMemberPoison;
+                creators["cleanse cure magic"] = &TriggerFactoryInternal::CleanseCureMagic;
+                creators["cleanse party member cure magic"] = &TriggerFactoryInternal::CleanseCurePartyMemberMagic;
+                creators["righteous fury"] = &TriggerFactoryInternal::righteous_fury;
+                creators["holy shield"] = &TriggerFactoryInternal::holy_shield;
+                creators["hammer of justice on enemy healer"] = &TriggerFactoryInternal::hammer_of_justice_on_enemy_target;
+            }
+
+        private:
+            static Trigger* holy_shield(PlayerbotAI* ai) { return new HolyShieldTrigger(ai); }
+            static Trigger* righteous_fury(PlayerbotAI* ai) { return new RighteousFuryTrigger(ai); }
+            static Trigger* judgement_of_wisdom(PlayerbotAI* ai) { return new JudgementOfWisdomTrigger(ai); }
+            static Trigger* judgement_of_light(PlayerbotAI* ai) { return new JudgementOfLightTrigger(ai); }
+            static Trigger* blessing(PlayerbotAI* ai) { return new BlessingTrigger(ai); }
+            static Trigger* seal(PlayerbotAI* ai) { return new SealTrigger(ai); }
+            static Trigger* art_of_war(PlayerbotAI* ai) { return new ArtOfWarTrigger(ai); }
+            static Trigger* blessing_of_kings_on_party(PlayerbotAI* ai) { return new BlessingOfKingsOnPartyTrigger(ai); }
+            static Trigger* crusader_aura(PlayerbotAI* ai) { return new CrusaderAuraTrigger(ai); }
+            static Trigger* retribution_aura(PlayerbotAI* ai) { return new RetributionAuraTrigger(ai); }
+            static Trigger* devotion_aura(PlayerbotAI* ai) { return new DevotionAuraTrigger(ai); }
+            static Trigger* shadow_resistance_aura(PlayerbotAI* ai) { return new ShadowResistanceAuraTrigger(ai); }
+            static Trigger* frost_resistance_aura(PlayerbotAI* ai) { return new FrostResistanceAuraTrigger(ai); }
+            static Trigger* fire_resistance_aura(PlayerbotAI* ai) { return new FireResistanceAuraTrigger(ai); }
+            static Trigger* hammer_of_justice_snare(PlayerbotAI* ai) { return new HammerOfJusticeSnareTrigger(ai); }
+            static Trigger* hammer_of_justice_interrupt(PlayerbotAI* ai) { return new HammerOfJusticeInterruptSpellTrigger(ai); }
+            static Trigger* CleanseCureDisease(PlayerbotAI* ai) { return new CleanseCureDiseaseTrigger(ai); }
+            static Trigger* CleanseCurePartyMemberDisease(PlayerbotAI* ai) { return new CleanseCurePartyMemberDiseaseTrigger(ai); }
+            static Trigger* CleanseCurePoison(PlayerbotAI* ai) { return new CleanseCurePoisonTrigger(ai); }
+            static Trigger* CleanseCurePartyMemberPoison(PlayerbotAI* ai) { return new CleanseCurePartyMemberPoisonTrigger(ai); }
+            static Trigger* CleanseCureMagic(PlayerbotAI* ai) { return new CleanseCureMagicTrigger(ai); }
+            static Trigger* CleanseCurePartyMemberMagic(PlayerbotAI* ai) { return new CleanseCurePartyMemberMagicTrigger(ai); }
+            static Trigger* hammer_of_justice_on_enemy_target(PlayerbotAI* ai) { return new HammerOfJusticeEnemyHealerTrigger(ai); }
+        };
+    };
+};
+
+namespace ai
+{
+    namespace paladin
+    {
+        using namespace ai;
+
+        class AiObjectContextInternal : public NamedObjectContext<Action>
+        {
+        public:
+            AiObjectContextInternal()
+            {
+                creators["seal of command"] = &AiObjectContextInternal::seal_of_command;
+                creators["seal of vengeance"] = &AiObjectContextInternal::seal_of_vengeance;
+                creators["blessing of might"] = &AiObjectContextInternal::blessing_of_might;
+                creators["divine storm"] = &AiObjectContextInternal::divine_storm;
+                creators["blessing of kings on party"] = &AiObjectContextInternal::blessing_of_kings_on_party;
+                creators["redemption"] = &AiObjectContextInternal::redemption;
+                creators["crusader strike"] = &AiObjectContextInternal::crusader_strike;
+                creators["crusader aura"] = &AiObjectContextInternal::crusader_aura;
+                creators["seal of light"] = &AiObjectContextInternal::seal_of_light;
+                creators["devotion aura"] = &AiObjectContextInternal::devotion_aura;
+                creators["holy wrath"] = &AiObjectContextInternal::holy_wrath;
+                creators["consecration"] = &AiObjectContextInternal::consecration;
+                creators["cleanse disease"] = &AiObjectContextInternal::cleanse_disease;
+                creators["cleanse poison"] = &AiObjectContextInternal::cleanse_poison;
+                creators["cleanse magic"] = &AiObjectContextInternal::cleanse_magic;
+                creators["purify disease"] = &AiObjectContextInternal::purify_disease;
+                creators["purify poison"] = &AiObjectContextInternal::purify_poison;
+                creators["cleanse poison on party"] = &AiObjectContextInternal::cleanse_poison_on_party;
+                creators["cleanse disease on party"] = &AiObjectContextInternal::cleanse_disease_on_party;
+                creators["cleanse magic on party"] = &AiObjectContextInternal::cleanse_magic_on_party;
+                creators["purify poison on party"] = &AiObjectContextInternal::purify_poison_on_party;
+                creators["purify disease on party"] = &AiObjectContextInternal::purify_disease_on_party;
+                creators["seal of wisdom"] = &AiObjectContextInternal::seal_of_wisdom;
+                creators["seal of justice"] = &AiObjectContextInternal::seal_of_justice;
+                creators["seal of righteousness"] = &AiObjectContextInternal::seal_of_righteousness;
+                creators["flash of light"] = &AiObjectContextInternal::flash_of_light;
+                creators["hand of reckoning"] = &AiObjectContextInternal::hand_of_reckoning;
+                creators["avenger's shield"] = &AiObjectContextInternal::avengers_shield;
+                creators["exorcism"] = &AiObjectContextInternal::exorcism;
+                creators["judgement of light"] = &AiObjectContextInternal::judgement_of_light;
+                creators["judgement of wisdom"] = &AiObjectContextInternal::judgement_of_wisdom;
+                creators["divine shield"] = &AiObjectContextInternal::divine_shield;
+                creators["divine protection"] = &AiObjectContextInternal::divine_protection;
+                creators["divine protection on party"] =&AiObjectContextInternal::divine_protection_on_party;
+                creators["hammer of justice"] = &AiObjectContextInternal::hammer_of_justice;
+                creators["flash of light on party"] = &AiObjectContextInternal::flash_of_light_on_party;
+                creators["holy light"] = &AiObjectContextInternal::holy_light;
+                creators["holy light on party"] = &AiObjectContextInternal::holy_light_on_party;
+                creators["lay on hands"] = &AiObjectContextInternal::lay_on_hands;
+                creators["lay on hands on party"] = &AiObjectContextInternal::lay_on_hands_on_party;
+                creators["judgement of justice"] = &AiObjectContextInternal::judgement_of_justice;
+                creators["hammer of wrath"] = &AiObjectContextInternal::hammer_of_wrath;
+                creators["holy shield"] = &AiObjectContextInternal::holy_shield;
+                creators["hammer of the righteous"] = &AiObjectContextInternal::hammer_of_the_righteous;
+                creators["blessing of kings"] = &AiObjectContextInternal::blessing_of_kings;
+                creators["retribution aura"] = &AiObjectContextInternal::retribution_aura;
+                creators["shadow resistance aura"] = &AiObjectContextInternal::shadow_resistance_aura;
+                creators["frost resistance aura"] = &AiObjectContextInternal::frost_resistance_aura;
+                creators["fire resistance aura"] = &AiObjectContextInternal::fire_resistance_aura;
+                creators["righteous fury"] = &AiObjectContextInternal::righteous_fury;
+                creators["blessing of sanctuary"] = &AiObjectContextInternal::blessing_of_sanctuary;
+                creators["hammer of justice on enemy healer"] = &AiObjectContextInternal::hammer_of_justice_on_enemy_healer;
+            }
+
+        private:
+            static Action* righteous_fury(PlayerbotAI* ai) { return new CastRighteousFuryAction(ai); }
+            static Action* blessing_of_sanctuary(PlayerbotAI* ai) { return new CastBlessingOfSanctuaryAction(ai); }
+            static Action* seal_of_command(PlayerbotAI* ai) { return new CastSealOfCommandAction(ai); }
+            static Action* seal_of_vengeance(PlayerbotAI* ai) { return new CastSealOfVengeanceAction(ai); }
+            static Action* blessing_of_might(PlayerbotAI* ai) { return new CastBlessingOfMightAction(ai); }
+            static Action* divine_storm(PlayerbotAI* ai) { return new CastDivineStormAction(ai); }
+            static Action* blessing_of_kings_on_party(PlayerbotAI* ai) { return new CastBlessingOfKingsOnPartyAction(ai); }
+            static Action* redemption(PlayerbotAI* ai) { return new CastRedemptionAction(ai); }
+            static Action* crusader_strike(PlayerbotAI* ai) { return new CastCrusaderStrikeAction(ai); }
+            static Action* crusader_aura(PlayerbotAI* ai) { return new CastCrusaderAuraAction(ai); }
+            static Action* seal_of_light(PlayerbotAI* ai) { return new CastSealOfLightAction(ai); }
+            static Action* devotion_aura(PlayerbotAI* ai) { return new CastDevotionAuraAction(ai); }
+            static Action* holy_wrath(PlayerbotAI* ai) { return new CastHolyWrathAction(ai); }
+            static Action* consecration(PlayerbotAI* ai) { return new CastConsecrationAction(ai); }
+            static Action* cleanse_poison(PlayerbotAI* ai) { return new CastCleansePoisonAction(ai); }
+            static Action* cleanse_disease(PlayerbotAI* ai) { return new CastCleanseDiseaseAction(ai); }
+            static Action* cleanse_magic(PlayerbotAI* ai) { return new CastCleanseMagicAction(ai); }
+            static Action* purify_poison(PlayerbotAI* ai) { return new CastPurifyPoisonAction(ai); }
+            static Action* purify_disease(PlayerbotAI* ai) { return new CastPurifyDiseaseAction(ai); }
+            static Action* cleanse_poison_on_party(PlayerbotAI* ai) { return new CastCleansePoisonOnPartyAction(ai); }
+            static Action* cleanse_disease_on_party(PlayerbotAI* ai) { return new CastCleanseDiseaseOnPartyAction(ai); }
+            static Action* cleanse_magic_on_party(PlayerbotAI* ai) { return new CastCleanseMagicOnPartyAction(ai); }
+            static Action* purify_poison_on_party(PlayerbotAI* ai) { return new CastPurifyPoisonOnPartyAction(ai); }
+            static Action* purify_disease_on_party(PlayerbotAI* ai) { return new CastPurifyDiseaseOnPartyAction(ai); }
+            static Action* seal_of_wisdom(PlayerbotAI* ai) { return new CastSealOfWisdomAction(ai); }
+            static Action* seal_of_justice(PlayerbotAI* ai) { return new CastSealOfJusticeAction(ai); }
+            static Action* seal_of_righteousness(PlayerbotAI* ai) { return new CastSealOfRighteousnessAction(ai); }
+            static Action* flash_of_light(PlayerbotAI* ai) { return new CastFlashOfLightAction(ai); }
+            static Action* hand_of_reckoning(PlayerbotAI* ai) { return new CastHandOfReckoningAction(ai); }
+            static Action* avengers_shield(PlayerbotAI* ai) { return new CastAvengersShieldAction(ai); }
+            static Action* exorcism(PlayerbotAI* ai) { return new CastExorcismAction(ai); }
+            static Action* judgement_of_light(PlayerbotAI* ai) { return new CastJudgementOfLightAction(ai); }
+            static Action* judgement_of_wisdom(PlayerbotAI* ai) { return new CastJudgementOfWisdomAction(ai); }
+            static Action* divine_shield(PlayerbotAI* ai) { return new CastDivineShieldAction(ai); }
+            static Action* divine_protection(PlayerbotAI* ai) { return new CastDivineProtectionAction(ai); }
+            static Action* divine_protection_on_party(PlayerbotAI* ai) { return new CastDivineProtectionOnPartyAction(ai); }
+            static Action* hammer_of_justice(PlayerbotAI* ai) { return new CastHammerOfJusticeAction(ai); }
+            static Action* flash_of_light_on_party(PlayerbotAI* ai) { return new CastFlashOfLightOnPartyAction(ai); }
+            static Action* holy_light(PlayerbotAI* ai) { return new CastHolyLightAction(ai); }
+            static Action* holy_light_on_party(PlayerbotAI* ai) { return new CastHolyLightOnPartyAction(ai); }
+            static Action* lay_on_hands(PlayerbotAI* ai) { return new CastLayOnHandsAction(ai); }
+            static Action* lay_on_hands_on_party(PlayerbotAI* ai) { return new CastLayOnHandsOnPartyAction(ai); }
+            static Action* judgement_of_justice(PlayerbotAI* ai) { return new CastJudgementOfJusticeAction(ai); }
+            static Action* hammer_of_wrath(PlayerbotAI* ai) { return new CastHammerOfWrathAction(ai); }
+            static Action* holy_shield(PlayerbotAI* ai) { return new CastHolyShieldAction(ai); }
+            static Action* hammer_of_the_righteous(PlayerbotAI* ai) { return new CastHammerOfTheRighteousAction(ai); }
+            static Action* blessing_of_kings(PlayerbotAI* ai) { return new CastBlessingOfKingsAction(ai); }
+            static Action* retribution_aura(PlayerbotAI* ai) { return new CastRetributionAuraAction(ai); }
+            static Action* shadow_resistance_aura(PlayerbotAI* ai) { return new CastShadowResistanceAuraAction(ai); }
+            static Action* frost_resistance_aura(PlayerbotAI* ai) { return new CastFrostResistanceAuraAction(ai); }
+            static Action* fire_resistance_aura(PlayerbotAI* ai) { return new CastFireResistanceAuraAction(ai); }
+            static Action* hammer_of_justice_on_enemy_healer(PlayerbotAI* ai) { return new CastHammerOfJusticeOnEnemyHealerAction(ai); }
+        };
+    };
+};
+
+
+PaladinAiObjectContext::PaladinAiObjectContext(PlayerbotAI* ai) : AiObjectContext(ai)
+{
+    strategyContexts.Add(new ai::paladin::StrategyFactoryInternal());
+    strategyContexts.Add(new ai::paladin::CombatStrategyFactoryInternal());
+    strategyContexts.Add(new ai::paladin::BuffStrategyFactoryInternal());
+    strategyContexts.Add(new ai::paladin::ResistanceStrategyFactoryInternal());
+    actionContexts.Add(new ai::paladin::AiObjectContextInternal());
+    triggerContexts.Add(new ai::paladin::TriggerFactoryInternal());
+}
diff --git a/src/plugins/playerbot/strategy/paladin/PaladinAiObjectContext.h b/src/plugins/playerbot/strategy/paladin/PaladinAiObjectContext.h
new file mode 100644
index 0000000..1af3343
--- /dev/null
+++ b/src/plugins/playerbot/strategy/paladin/PaladinAiObjectContext.h
@@ -0,0 +1,12 @@
+#pragma once
+
+#include "../AiObjectContext.h"
+
+namespace ai
+{
+    class PaladinAiObjectContext : public AiObjectContext
+    {
+    public:
+        PaladinAiObjectContext(PlayerbotAI* ai);
+    };
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/paladin/PaladinBuffStrategies.cpp b/src/plugins/playerbot/strategy/paladin/PaladinBuffStrategies.cpp
new file mode 100644
index 0000000..5124024
--- /dev/null
+++ b/src/plugins/playerbot/strategy/paladin/PaladinBuffStrategies.cpp
@@ -0,0 +1,72 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "PaladinMultipliers.h"
+#include "PaladinBuffStrategies.h"
+
+using namespace ai;
+
+void PaladinBuffManaStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "seal",
+        NextAction::array(0, new NextAction("seal of wisdom", 90.0f), NULL)));
+}
+
+void PaladinBuffHealthStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "seal",
+        NextAction::array(0, new NextAction("seal of light", 90.0f), NULL)));
+}
+
+void PaladinBuffSpeedStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "crusader aura",
+        NextAction::array(0, new NextAction("crusader aura", 40.0f), NULL)));
+}
+
+void PaladinBuffDpsStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "seal",
+        NextAction::array(0, new NextAction("seal of vengeance", 89.0f), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"retribution aura",
+		NextAction::array(0, new NextAction("retribution aura", 90.0f), NULL)));
+}
+
+void PaladinShadowResistanceStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+	triggers.push_back(new TriggerNode(
+		"shadow resistance aura",
+		NextAction::array(0, new NextAction("shadow resistance aura", 90.0f), NULL)));
+}
+
+void PaladinFrostResistanceStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+	triggers.push_back(new TriggerNode(
+		"frost resistance aura",
+		NextAction::array(0, new NextAction("frost resistance aura", 90.0f), NULL)));
+}
+
+void PaladinFireResistanceStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+	triggers.push_back(new TriggerNode(
+		"fire resistance aura",
+		NextAction::array(0, new NextAction("fire resistance aura", 90.0f), NULL)));
+}
+
+
+void PaladinBuffArmorStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "seal",
+        NextAction::array(0, new NextAction("seal of light", 89.0f), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"devotion aura",
+		NextAction::array(0, new NextAction("devotion aura", 90.0f), NULL)));
+}
+
diff --git a/src/plugins/playerbot/strategy/paladin/PaladinBuffStrategies.h b/src/plugins/playerbot/strategy/paladin/PaladinBuffStrategies.h
new file mode 100644
index 0000000..e5051a1
--- /dev/null
+++ b/src/plugins/playerbot/strategy/paladin/PaladinBuffStrategies.h
@@ -0,0 +1,86 @@
+#pragma once
+
+#include "GenericPaladinStrategy.h"
+
+namespace ai
+{
+    class PaladinBuffManaStrategy : public Strategy
+    {
+    public:
+        PaladinBuffManaStrategy(PlayerbotAI* ai) : Strategy(ai) {}
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "bmana"; }
+    };
+
+    class PaladinBuffHealthStrategy : public Strategy
+    {
+    public:
+        PaladinBuffHealthStrategy(PlayerbotAI* ai) : Strategy(ai) {}
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "bhealth"; }
+    };
+
+    class PaladinBuffDpsStrategy : public Strategy
+    {
+    public:
+        PaladinBuffDpsStrategy(PlayerbotAI* ai) : Strategy(ai) {}
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "bdps"; }
+    };
+
+	class PaladinBuffArmorStrategy : public Strategy
+	{
+	public:
+		PaladinBuffArmorStrategy(PlayerbotAI* ai) : Strategy(ai) {}
+
+	public:
+		virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+		virtual string getName() { return "barmor"; }
+	};
+
+	class PaladinBuffSpeedStrategy : public Strategy
+	{
+	public:
+		PaladinBuffSpeedStrategy(PlayerbotAI* ai) : Strategy(ai) {}
+
+	public:
+		virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+		virtual string getName() { return "bspeed"; }
+	};
+
+	class PaladinShadowResistanceStrategy : public Strategy
+	{
+	public:
+		PaladinShadowResistanceStrategy(PlayerbotAI* ai) : Strategy(ai) {}
+
+	public:
+		virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+		virtual string getName() { return "rshadow"; }
+	};
+
+	class PaladinFrostResistanceStrategy : public Strategy
+	{
+	public:
+		PaladinFrostResistanceStrategy(PlayerbotAI* ai) : Strategy(ai) {}
+
+	public:
+		virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+		virtual string getName() { return "rfrost"; }
+	};
+
+	class PaladinFireResistanceStrategy : public Strategy
+	{
+	public:
+		PaladinFireResistanceStrategy(PlayerbotAI* ai) : Strategy(ai) {}
+
+	public:
+		virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+		virtual string getName() { return "rfire"; }
+	};
+}
diff --git a/src/plugins/playerbot/strategy/paladin/PaladinMultipliers.cpp b/src/plugins/playerbot/strategy/paladin/PaladinMultipliers.cpp
new file mode 100644
index 0000000..3082abb
--- /dev/null
+++ b/src/plugins/playerbot/strategy/paladin/PaladinMultipliers.cpp
@@ -0,0 +1,6 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "PaladinMultipliers.h"
+#include "PaladinActions.h"
+
+using namespace ai;
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/paladin/PaladinMultipliers.h b/src/plugins/playerbot/strategy/paladin/PaladinMultipliers.h
new file mode 100644
index 0000000..7cfbdd4
--- /dev/null
+++ b/src/plugins/playerbot/strategy/paladin/PaladinMultipliers.h
@@ -0,0 +1,6 @@
+#pragma once
+
+namespace ai
+{
+   
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/paladin/PaladinTriggers.cpp b/src/plugins/playerbot/strategy/paladin/PaladinTriggers.cpp
new file mode 100644
index 0000000..1948441
--- /dev/null
+++ b/src/plugins/playerbot/strategy/paladin/PaladinTriggers.cpp
@@ -0,0 +1,23 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "PaladinTriggers.h"
+#include "PaladinActions.h"
+
+using namespace ai;
+
+bool SealTrigger::IsActive() 
+{
+	Unit* target = GetTarget();
+	return !ai->HasAura("seal of justice", target) &&
+        !ai->HasAura("seal of command", target) &&
+        !ai->HasAura("seal of vengeance", target) &&
+		!ai->HasAura("seal of righteousness", target) &&
+		!ai->HasAura("seal of light", target) &&
+		!ai->HasAura("seal of wisdom", target);
+}
+
+bool CrusaderAuraTrigger::IsActive() 
+{
+	Unit* target = GetTarget();
+	return AI_VALUE2(bool, "mounted", "self target") && !ai->HasAura("crusader aura", target);
+}
diff --git a/src/plugins/playerbot/strategy/paladin/PaladinTriggers.h b/src/plugins/playerbot/strategy/paladin/PaladinTriggers.h
new file mode 100644
index 0000000..3f53b4e
--- /dev/null
+++ b/src/plugins/playerbot/strategy/paladin/PaladinTriggers.h
@@ -0,0 +1,114 @@
+#pragma once
+#include "../triggers/GenericTriggers.h"
+
+namespace ai
+{
+	BUFF_TRIGGER(HolyShieldTrigger, "holy shield", "holy shield")
+    BUFF_TRIGGER(RighteousFuryTrigger, "righteous fury", "righteous fury")
+
+    BUFF_TRIGGER(RetributionAuraTrigger, "retribution aura", "retribution aura")
+
+	class CrusaderAuraTrigger : public BuffTrigger
+	{
+	public:
+		CrusaderAuraTrigger(PlayerbotAI* ai) : BuffTrigger(ai, "crusader aura") {}
+		virtual bool IsActive();
+	};
+
+	class SealTrigger : public BuffTrigger
+	{
+	public:
+		SealTrigger(PlayerbotAI* ai) : BuffTrigger(ai, "seal of justice") {}
+		virtual bool IsActive();
+	};
+
+    DEBUFF_TRIGGER(JudgementOfLightTrigger, "judgement of light", "judgement of light")
+    DEBUFF_TRIGGER(JudgementOfWisdomTrigger, "judgement of wisdom", "judgement of wisdom")
+
+    BUFF_ON_PARTY_TRIGGER(BlessingOfKingsOnPartyTrigger, "blessing of kings", "blessing of kings on party")
+    BUFF_TRIGGER(BlessingTrigger, "blessing of sanctuary", "blessing of sanctuary")
+
+    class HammerOfJusticeInterruptSpellTrigger : public InterruptSpellTrigger
+    {
+    public:
+        HammerOfJusticeInterruptSpellTrigger(PlayerbotAI* ai) : InterruptSpellTrigger(ai, "hammer of justice") {}
+    };
+
+    class HammerOfJusticeSnareTrigger : public SnareTargetTrigger
+    {
+    public:
+        HammerOfJusticeSnareTrigger(PlayerbotAI* ai) : SnareTargetTrigger(ai, "hammer of justice") {}
+    };
+
+    class ArtOfWarTrigger : public HasAuraTrigger
+    {
+    public:
+        ArtOfWarTrigger(PlayerbotAI* ai) : HasAuraTrigger(ai, "the art of war") {}
+    };
+
+    class ShadowResistanceAuraTrigger : public BuffTrigger
+    {
+    public:
+        ShadowResistanceAuraTrigger(PlayerbotAI* ai) : BuffTrigger(ai, "shadow resistance aura") {}
+    };
+
+    class FrostResistanceAuraTrigger : public BuffTrigger
+    {
+    public:
+        FrostResistanceAuraTrigger(PlayerbotAI* ai) : BuffTrigger(ai, "frost resistance aura") {}
+    };
+
+    class FireResistanceAuraTrigger : public BuffTrigger
+    {
+    public:
+        FireResistanceAuraTrigger(PlayerbotAI* ai) : BuffTrigger(ai, "fire resistance aura") {}
+    };
+
+    class DevotionAuraTrigger : public BuffTrigger
+    {
+    public:
+        DevotionAuraTrigger(PlayerbotAI* ai) : BuffTrigger(ai, "devotion aura") {}
+    };
+
+    class CleanseCureDiseaseTrigger : public NeedCureTrigger
+    {
+    public:
+        CleanseCureDiseaseTrigger(PlayerbotAI* ai) : NeedCureTrigger(ai, "cleanse", DISPEL_DISEASE) {}
+    };
+
+    class CleanseCurePartyMemberDiseaseTrigger : public PartyMemberNeedCureTrigger
+    {
+    public:
+        CleanseCurePartyMemberDiseaseTrigger(PlayerbotAI* ai) : PartyMemberNeedCureTrigger(ai, "cleanse", DISPEL_DISEASE) {}
+    };
+
+    class CleanseCurePoisonTrigger : public NeedCureTrigger
+    {
+    public:
+        CleanseCurePoisonTrigger(PlayerbotAI* ai) : NeedCureTrigger(ai, "cleanse", DISPEL_POISON) {}
+    };
+
+    class CleanseCurePartyMemberPoisonTrigger : public PartyMemberNeedCureTrigger
+    {
+    public:
+        CleanseCurePartyMemberPoisonTrigger(PlayerbotAI* ai) : PartyMemberNeedCureTrigger(ai, "cleanse", DISPEL_POISON) {}
+    };
+
+    class CleanseCureMagicTrigger : public NeedCureTrigger
+    {
+    public:
+        CleanseCureMagicTrigger(PlayerbotAI* ai) : NeedCureTrigger(ai, "cleanse", DISPEL_MAGIC) {}
+    };
+
+    class CleanseCurePartyMemberMagicTrigger : public PartyMemberNeedCureTrigger
+    {
+    public:
+        CleanseCurePartyMemberMagicTrigger(PlayerbotAI* ai) : PartyMemberNeedCureTrigger(ai, "cleanse", DISPEL_MAGIC) {}
+    };
+
+    class HammerOfJusticeEnemyHealerTrigger : public InterruptEnemyHealerTrigger
+    {
+    public:
+        HammerOfJusticeEnemyHealerTrigger(PlayerbotAI* ai) : InterruptEnemyHealerTrigger(ai, "hammer of justice") {}
+    };
+}
diff --git a/src/plugins/playerbot/strategy/paladin/TankPaladinStrategy.cpp b/src/plugins/playerbot/strategy/paladin/TankPaladinStrategy.cpp
new file mode 100644
index 0000000..6e6b51f
--- /dev/null
+++ b/src/plugins/playerbot/strategy/paladin/TankPaladinStrategy.cpp
@@ -0,0 +1,70 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "PaladinMultipliers.h"
+#include "TankPaladinStrategy.h"
+
+using namespace ai;
+
+class TankPaladinStrategyActionNodeFactory : public NamedObjectFactory<ActionNode>
+{
+public:
+    TankPaladinStrategyActionNodeFactory()
+    {
+        creators["blessing of sanctuary"] = &blessing_of_sanctuary;
+    }
+private:
+    static ActionNode* blessing_of_sanctuary(PlayerbotAI* ai)
+    {
+        return new ActionNode ("blessing of sanctuary",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("blessing of kings"), NULL),
+            /*C*/ NULL);
+    }
+};
+
+TankPaladinStrategy::TankPaladinStrategy(PlayerbotAI* ai) : GenericPaladinStrategy(ai)
+{
+    actionNodeFactories.Add(new TankPaladinStrategyActionNodeFactory());
+}
+
+NextAction** TankPaladinStrategy::getDefaultActions()
+{
+    return NextAction::array(0, new NextAction("melee", ACTION_NORMAL), NULL);
+}
+
+void TankPaladinStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    GenericPaladinStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "judgement of light",
+        NextAction::array(0, new NextAction("judgement of light", ACTION_NORMAL + 2), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "medium mana",
+        NextAction::array(0, new NextAction("judgement of wisdom", ACTION_NORMAL + 3), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "righteous fury",
+        NextAction::array(0, new NextAction("righteous fury", ACTION_HIGH + 8), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "light aoe",
+        NextAction::array(0, new NextAction("hammer of the righteous", ACTION_HIGH + 6), new NextAction("avenger's shield", ACTION_HIGH + 6), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "medium aoe",
+        NextAction::array(0, new NextAction("consecration", ACTION_HIGH + 6), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "lose aggro",
+        NextAction::array(0, new NextAction("hand of reckoning", ACTION_HIGH + 7), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"holy shield",
+		NextAction::array(0, new NextAction("holy shield", ACTION_HIGH + 7), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "blessing",
+        NextAction::array(0, new NextAction("blessing of sanctuary", ACTION_HIGH + 9), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/paladin/TankPaladinStrategy.h b/src/plugins/playerbot/strategy/paladin/TankPaladinStrategy.h
new file mode 100644
index 0000000..d5cf955
--- /dev/null
+++ b/src/plugins/playerbot/strategy/paladin/TankPaladinStrategy.h
@@ -0,0 +1,18 @@
+#pragma once
+
+#include "GenericPaladinStrategy.h"
+
+namespace ai
+{
+    class TankPaladinStrategy : public GenericPaladinStrategy
+    {
+    public:
+        TankPaladinStrategy(PlayerbotAI* ai);
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "tank"; }
+        virtual NextAction** getDefaultActions();
+		virtual int GetType() { return STRATEGY_TYPE_TANK | STRATEGY_TYPE_MELEE; }
+    };
+}
diff --git a/src/plugins/playerbot/strategy/priest/GenericPriestStrategy.cpp b/src/plugins/playerbot/strategy/priest/GenericPriestStrategy.cpp
new file mode 100644
index 0000000..19103da
--- /dev/null
+++ b/src/plugins/playerbot/strategy/priest/GenericPriestStrategy.cpp
@@ -0,0 +1,67 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "PriestMultipliers.h"
+#include "HealPriestStrategy.h"
+#include "GenericPriestStrategyActionNodeFactory.h"
+
+using namespace ai;
+
+GenericPriestStrategy::GenericPriestStrategy(PlayerbotAI* ai) : CombatStrategy(ai)
+{
+    actionNodeFactories.Add(new GenericPriestStrategyActionNodeFactory());
+}
+
+void GenericPriestStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    CombatStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "medium health",
+        NextAction::array(0, new NextAction("flash heal", 25.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "party member medium health",
+        NextAction::array(0, new NextAction("flash heal on party", 20.0f), NULL)));
+
+
+    triggers.push_back(new TriggerNode(
+        "critical health",
+        NextAction::array(0, new NextAction("power word: shield", 70.0f), new NextAction("flash heal", 70.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "party member critical health",
+        NextAction::array(0, new NextAction("power word: shield on party", 60.0f), new NextAction("flash heal on party", 60.0f), NULL)));
+
+
+    triggers.push_back(new TriggerNode(
+        "low health",
+        NextAction::array(0, new NextAction("power word: shield", 60.0f), new NextAction("greater heal", 60.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "party member low health",
+        NextAction::array(0, new NextAction("power word: shield on party", 50.0f), new NextAction("greater heal on party", 50.0f), NULL)));
+
+
+    triggers.push_back(new TriggerNode(
+        "dispel magic",
+        NextAction::array(0, new NextAction("dispel magic", 41.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "dispel magic on party",
+        NextAction::array(0, new NextAction("dispel magic on party", 40.0f), NULL)));
+
+
+    triggers.push_back(new TriggerNode(
+        "cure disease",
+        NextAction::array(0, new NextAction("abolish disease", 31.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "party member cure disease",
+        NextAction::array(0, new NextAction("abolish disease on party", 30.0f), NULL)));
+
+
+    triggers.push_back(new TriggerNode(
+        "medium threat",
+        NextAction::array(0, new NextAction("psychic scream", 50.0f), NULL)));
+
+}
diff --git a/src/plugins/playerbot/strategy/priest/GenericPriestStrategy.h b/src/plugins/playerbot/strategy/priest/GenericPriestStrategy.h
new file mode 100644
index 0000000..4633e8d
--- /dev/null
+++ b/src/plugins/playerbot/strategy/priest/GenericPriestStrategy.h
@@ -0,0 +1,17 @@
+#pragma once
+
+#include "../Strategy.h"
+#include "../generic/CombatStrategy.h"
+
+namespace ai
+{
+    class GenericPriestStrategy : public CombatStrategy
+    {
+    public:
+        GenericPriestStrategy(PlayerbotAI* ai);
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+
+    };
+}
diff --git a/src/plugins/playerbot/strategy/priest/GenericPriestStrategyActionNodeFactory.h b/src/plugins/playerbot/strategy/priest/GenericPriestStrategyActionNodeFactory.h
new file mode 100644
index 0000000..d3ef00b
--- /dev/null
+++ b/src/plugins/playerbot/strategy/priest/GenericPriestStrategyActionNodeFactory.h
@@ -0,0 +1,173 @@
+#pragma once
+
+namespace ai
+{
+    class GenericPriestStrategyActionNodeFactory : public NamedObjectFactory<ActionNode>
+    {
+    public:
+        GenericPriestStrategyActionNodeFactory()
+        {
+            creators["inner fire"] = &inner_fire;
+            creators["holy nova"] = &holy_nova;
+            creators["power word: fortitude"] = &power_word_fortitude;
+            creators["power word: fortitude on party"] = &power_word_fortitude_on_party;
+            creators["divine spirit"] = &divine_spirit;
+            creators["divine spirit on party"] = &divine_spirit_on_party;
+            creators["power word: shield"] = &power_word_shield;
+            creators["power word: shield on party"] = &power_word_shield_on_party;
+            creators["renew"] = &renew;
+            creators["renew on party"] = &renew_on_party;
+            creators["greater heal"] = &greater_heal;
+            creators["greater heal on party"] = &greater_heal_on_party;
+            creators["heal"] = &heal;
+            creators["heal on party"] = &heal_on_party;
+            creators["lesser heal"] = &lesser_heal;
+            creators["lesser heal on party"] = &lesser_heal_on_party;
+            creators["flash heal"] = &flash_heal;
+            creators["flash heal on party"] = &flash_heal_on_party;
+            creators["psychic scream"] = &psychic_scream;
+            creators["fade"] = &fade;
+        }
+    private:
+        static ActionNode* inner_fire(PlayerbotAI* ai)
+        {
+            return new ActionNode ("inner fire",
+                /*P*/ NextAction::array(0, new NextAction("remove shadowform"), NULL),
+                /*A*/ NULL,
+                /*C*/ NULL);
+        }
+        static ActionNode* holy_nova(PlayerbotAI* ai)
+        {
+            return new ActionNode ("holy nova",
+                /*P*/ NextAction::array(0, new NextAction("remove shadowform"), NULL),
+                /*A*/ NULL,
+                /*C*/ NULL);
+        }
+        static ActionNode* power_word_fortitude(PlayerbotAI* ai)
+        {
+            return new ActionNode ("power word: fortitude",
+                /*P*/ NextAction::array(0, new NextAction("remove shadowform"), NULL),
+                /*A*/ NULL,
+                /*C*/ NULL);
+        }
+        static ActionNode* power_word_fortitude_on_party(PlayerbotAI* ai)
+        {
+            return new ActionNode ("power word: fortitude on party",
+                /*P*/ NextAction::array(0, new NextAction("remove shadowform"), NULL),
+                /*A*/ NULL,
+                /*C*/ NULL);
+        }
+        static ActionNode* divine_spirit(PlayerbotAI* ai)
+        {
+            return new ActionNode ("divine spirit",
+                /*P*/ NextAction::array(0, new NextAction("remove shadowform"), NULL),
+                /*A*/ NULL,
+                /*C*/ NULL);
+        }
+        static ActionNode* divine_spirit_on_party(PlayerbotAI* ai)
+        {
+            return new ActionNode ("divine spirit on party",
+                /*P*/ NextAction::array(0, new NextAction("remove shadowform"), NULL),
+                /*A*/ NULL,
+                /*C*/ NULL);
+        }
+        static ActionNode* power_word_shield(PlayerbotAI* ai)
+        {
+            return new ActionNode ("power word: shield",
+                /*P*/ NextAction::array(0, new NextAction("remove shadowform"), NULL),
+                /*A*/ NextAction::array(0, new NextAction("renew", 50.0f), NULL),
+                /*C*/ NULL);
+        }
+        static ActionNode* power_word_shield_on_party(PlayerbotAI* ai)
+        {
+            return new ActionNode ("power word: shield on party",
+                /*P*/ NextAction::array(0, new NextAction("remove shadowform"), NULL),
+                /*A*/ NextAction::array(0, new NextAction("renew on party", 50.0f), NULL),
+                /*C*/ NULL);
+        }
+        static ActionNode* renew(PlayerbotAI* ai)
+        {
+            return new ActionNode ("renew",
+                /*P*/ NextAction::array(0, new NextAction("remove shadowform"), NULL),
+                /*A*/ NULL,
+                /*C*/ NULL);
+        }
+        static ActionNode* renew_on_party(PlayerbotAI* ai)
+        {
+            return new ActionNode ("renew on party",
+                /*P*/ NextAction::array(0, new NextAction("remove shadowform"), NULL),
+                /*A*/ NULL,
+                /*C*/ NULL);
+        }
+        static ActionNode* greater_heal(PlayerbotAI* ai)
+        {
+            return new ActionNode ("greater heal",
+                /*P*/ NextAction::array(0, new NextAction("remove shadowform"), NULL),
+                /*A*/ NextAction::array(0, new NextAction("heal"), NULL),
+                /*C*/ NULL);
+        }
+        static ActionNode* greater_heal_on_party(PlayerbotAI* ai)
+        {
+            return new ActionNode ("greater heal on party",
+                /*P*/ NextAction::array(0, new NextAction("remove shadowform"), NULL),
+                /*A*/ NextAction::array(0, new NextAction("heal on party"), NULL),
+                /*C*/ NULL);
+        }
+        static ActionNode* heal(PlayerbotAI* ai)
+        {
+            return new ActionNode ("heal",
+                /*P*/ NextAction::array(0, new NextAction("remove shadowform"), NULL),
+                /*A*/ NextAction::array(0, new NextAction("lesser heal"), NULL),
+                /*C*/ NULL);
+        }
+        static ActionNode* heal_on_party(PlayerbotAI* ai)
+        {
+            return new ActionNode ("heal on party",
+                /*P*/ NextAction::array(0, new NextAction("remove shadowform"), NULL),
+                /*A*/ NextAction::array(0, new NextAction("lesser heal on party"), NULL),
+                /*C*/ NULL);
+        }
+        static ActionNode* lesser_heal(PlayerbotAI* ai)
+        {
+            return new ActionNode ("lesser heal",
+                /*P*/ NextAction::array(0, new NextAction("remove shadowform"), NULL),
+                /*A*/ NULL,
+                /*C*/ NULL);
+        }
+        static ActionNode* lesser_heal_on_party(PlayerbotAI* ai)
+        {
+            return new ActionNode ("lesser heal on party",
+                /*P*/ NextAction::array(0, new NextAction("remove shadowform"), NULL),
+                /*A*/ NULL,
+                /*C*/ NULL);
+        }
+        static ActionNode* flash_heal(PlayerbotAI* ai)
+        {
+            return new ActionNode ("flash heal",
+                /*P*/ NextAction::array(0, new NextAction("remove shadowform"), NULL),
+                /*A*/ NextAction::array(0, new NextAction("greater heal"), NULL),
+                /*C*/ NULL);
+        }
+        static ActionNode* flash_heal_on_party(PlayerbotAI* ai)
+        {
+            return new ActionNode ("flash heal on party",
+                /*P*/ NextAction::array(0, new NextAction("remove shadowform"), NULL),
+                /*A*/ NextAction::array(0, new NextAction("greater heal on party"), NULL),
+                /*C*/ NULL);
+        }
+        static ActionNode* psychic_scream(PlayerbotAI* ai)
+        {
+            return new ActionNode ("psychic scream",
+                /*P*/ NULL,
+                /*A*/ NextAction::array(0, new NextAction("fade"), NULL),
+                /*C*/ NULL);
+        }
+        static ActionNode* fade(PlayerbotAI* ai)
+        {
+            return new ActionNode ("fade",
+                /*P*/ NULL,
+                /*A*/ NextAction::array(0, new NextAction("flee"), NULL),
+                /*C*/ NULL);
+        }
+    };
+};
diff --git a/src/plugins/playerbot/strategy/priest/HealPriestStrategy.cpp b/src/plugins/playerbot/strategy/priest/HealPriestStrategy.cpp
new file mode 100644
index 0000000..68e6f37
--- /dev/null
+++ b/src/plugins/playerbot/strategy/priest/HealPriestStrategy.cpp
@@ -0,0 +1,36 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "PriestMultipliers.h"
+#include "HealPriestStrategy.h"
+
+using namespace ai;
+
+NextAction** HealPriestStrategy::getDefaultActions()
+{
+    return NextAction::array(0, new NextAction("shoot", 10.0f), NULL);
+}
+
+void HealPriestStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    GenericPriestStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "enemy out of spell",
+        NextAction::array(0, new NextAction("reach spell", ACTION_NORMAL + 9), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"medium aoe heal",
+		NextAction::array(0, new NextAction("circle of healing", 27.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "almost full health",
+        NextAction::array(0, new NextAction("renew", 15.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "party member almost full health",
+        NextAction::array(0, new NextAction("renew on party", 10.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "enemy too close for spell",
+        NextAction::array(0, new NextAction("fade", 50.0f), new NextAction("flee", 49.0f), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/priest/HealPriestStrategy.h b/src/plugins/playerbot/strategy/priest/HealPriestStrategy.h
new file mode 100644
index 0000000..7f5603f
--- /dev/null
+++ b/src/plugins/playerbot/strategy/priest/HealPriestStrategy.h
@@ -0,0 +1,18 @@
+#pragma once
+
+#include "GenericPriestStrategy.h"
+
+namespace ai
+{
+    class HealPriestStrategy : public GenericPriestStrategy
+    {
+    public:
+        HealPriestStrategy(PlayerbotAI* ai) : GenericPriestStrategy(ai) {}
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual NextAction** getDefaultActions();
+        virtual string getName() { return "heal"; }
+		virtual int GetType() { return STRATEGY_TYPE_HEAL; }
+    };
+}
diff --git a/src/plugins/playerbot/strategy/priest/HolyPriestStrategy.cpp b/src/plugins/playerbot/strategy/priest/HolyPriestStrategy.cpp
new file mode 100644
index 0000000..abeea31
--- /dev/null
+++ b/src/plugins/playerbot/strategy/priest/HolyPriestStrategy.cpp
@@ -0,0 +1,46 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "PriestMultipliers.h"
+#include "HolyPriestStrategy.h"
+
+namespace ai
+{
+    class HolyPriestStrategyActionNodeFactory : public NamedObjectFactory<ActionNode>
+    {
+    public:
+        HolyPriestStrategyActionNodeFactory()
+        {
+            creators["smite"] = &smite;
+        }
+    private:
+        static ActionNode* smite(PlayerbotAI* ai)
+        {
+            return new ActionNode ("smite",
+                /*P*/ NULL,
+                /*A*/ NextAction::array(0, new NextAction("shoot"), NULL),
+                /*C*/ NULL);
+        }
+    };
+};
+
+using namespace ai;
+
+HolyPriestStrategy::HolyPriestStrategy(PlayerbotAI* ai) : HealPriestStrategy(ai)
+{
+    actionNodeFactories.Add(new HolyPriestStrategyActionNodeFactory());
+}
+
+NextAction** HolyPriestStrategy::getDefaultActions()
+{
+    return NextAction::array(0, new NextAction("holy fire", 10.0f), new NextAction("smite", 10.0f), NULL);
+}
+
+void HolyPriestStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    HealPriestStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "enemy out of spell",
+        NextAction::array(0, new NextAction("reach spell", ACTION_NORMAL + 9), NULL)));
+
+}
diff --git a/src/plugins/playerbot/strategy/priest/HolyPriestStrategy.h b/src/plugins/playerbot/strategy/priest/HolyPriestStrategy.h
new file mode 100644
index 0000000..c21bcf1
--- /dev/null
+++ b/src/plugins/playerbot/strategy/priest/HolyPriestStrategy.h
@@ -0,0 +1,18 @@
+#pragma once
+
+#include "HealPriestStrategy.h"
+
+namespace ai
+{
+    class HolyPriestStrategy : public HealPriestStrategy
+    {
+    public:
+        HolyPriestStrategy(PlayerbotAI* ai);
+
+    public:
+        virtual NextAction** getDefaultActions();
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "holy"; }
+        virtual int GetType() { return STRATEGY_TYPE_DPS|STRATEGY_TYPE_RANGED; }
+    };
+}
diff --git a/src/plugins/playerbot/strategy/priest/PriestActions.cpp b/src/plugins/playerbot/strategy/priest/PriestActions.cpp
new file mode 100644
index 0000000..8760005
--- /dev/null
+++ b/src/plugins/playerbot/strategy/priest/PriestActions.cpp
@@ -0,0 +1,17 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "PriestActions.h"
+
+using namespace ai;
+
+
+NextAction** CastAbolishDiseaseAction::getAlternatives()
+{
+    return NextAction::merge(NextAction::array(0, new NextAction("cure disease"), NULL), CastSpellAction::getAlternatives());
+}
+
+NextAction** CastAbolishDiseaseOnPartyAction::getAlternatives()
+{
+    return NextAction::merge(NextAction::array(0, new NextAction("cure disease on party"), NULL), CastSpellAction::getAlternatives());
+}
+
diff --git a/src/plugins/playerbot/strategy/priest/PriestActions.h b/src/plugins/playerbot/strategy/priest/PriestActions.h
new file mode 100644
index 0000000..bf2ea2d
--- /dev/null
+++ b/src/plugins/playerbot/strategy/priest/PriestActions.h
@@ -0,0 +1,246 @@
+#pragma once
+
+#include "../actions/GenericActions.h"
+
+namespace ai
+{
+    class CastGreaterHealAction : public CastHealingSpellAction {
+    public:
+        CastGreaterHealAction(PlayerbotAI* ai) : CastHealingSpellAction(ai, "greater heal") {}
+    };
+
+    class CastGreaterHealOnPartyAction : public HealPartyMemberAction
+    {
+    public:
+        CastGreaterHealOnPartyAction(PlayerbotAI* ai) : HealPartyMemberAction(ai, "greater heal") {}
+
+        virtual string getName() { return "greater heal on party"; }
+    };
+
+    class CastLesserHealAction : public CastHealingSpellAction {
+    public:
+        CastLesserHealAction(PlayerbotAI* ai) : CastHealingSpellAction(ai, "lesser heal") {}
+    };
+
+    class CastLesserHealOnPartyAction : public HealPartyMemberAction
+    {
+    public:
+        CastLesserHealOnPartyAction(PlayerbotAI* ai) : HealPartyMemberAction(ai, "lesser heal") {}
+
+        virtual string getName() { return "lesser heal on party"; }
+    };
+
+    class CastFlashHealAction : public CastHealingSpellAction {
+    public:
+        CastFlashHealAction(PlayerbotAI* ai) : CastHealingSpellAction(ai, "flash heal") {}
+    };
+
+    class CastFlashHealOnPartyAction : public HealPartyMemberAction
+    {
+    public:
+        CastFlashHealOnPartyAction(PlayerbotAI* ai) : HealPartyMemberAction(ai, "flash heal") {}
+
+        virtual string getName() { return "flash heal on party"; }
+    };
+
+    class CastHealAction : public CastHealingSpellAction {
+    public:
+        CastHealAction(PlayerbotAI* ai) : CastHealingSpellAction(ai, "heal") {}
+    };
+
+    class CastHealOnPartyAction : public HealPartyMemberAction
+    {
+    public:
+        CastHealOnPartyAction(PlayerbotAI* ai) : HealPartyMemberAction(ai, "heal") {}
+
+        virtual string getName() { return "heal on party"; }
+    };
+
+    class CastRenewAction : public CastHealingSpellAction {
+    public:
+        CastRenewAction(PlayerbotAI* ai) : CastHealingSpellAction(ai, "renew") {}
+    };
+
+    class CastRenewOnPartyAction : public HealPartyMemberAction
+    {
+    public:
+        CastRenewOnPartyAction(PlayerbotAI* ai) : HealPartyMemberAction(ai, "renew") {}
+
+        virtual string getName() { return "renew on party"; }
+    };
+
+    class CastFadeAction : public CastBuffSpellAction {
+    public:
+        CastFadeAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "fade") {}
+    };
+
+    class CastShadowformAction : public CastBuffSpellAction {
+    public:
+        CastShadowformAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "shadowform") {}
+    };
+
+    class CastRemoveShadowformAction : public Action {
+    public:
+        CastRemoveShadowformAction(PlayerbotAI* ai) : Action(ai, "remove shadowform") {}
+        virtual bool isUseful() { return ai->HasAura("shadowform", AI_VALUE(Unit*, "self target")); }
+        virtual bool isPossible() { return true; }
+        virtual bool Execute(Event event) {
+            ai->RemoveAura("shadowform");
+            return true;
+        }
+    };
+
+	class CastVampiricEmbraceAction : public CastBuffSpellAction {
+	public:
+		CastVampiricEmbraceAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "vampiric embrace") {}
+	};
+
+	class CastPowerWordShieldAction : public CastBuffSpellAction {
+	public:
+		CastPowerWordShieldAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "power word: shield") {}
+	};
+
+    class CastPowerWordShieldOnPartyAction : public HealPartyMemberAction
+    {
+    public:
+        CastPowerWordShieldOnPartyAction(PlayerbotAI* ai) : HealPartyMemberAction(ai, "power word: shield") {}
+
+        virtual string getName() { return "power word: shield on party"; }
+    };
+
+	class CastPowerWordFortitudeAction : public CastBuffSpellAction {
+	public:
+		CastPowerWordFortitudeAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "power word: fortitude") {}
+	};
+
+	class CastDivineSpiritAction : public CastBuffSpellAction {
+	public:
+		CastDivineSpiritAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "divine spirit") {}
+	};
+
+	class CastInnerFireAction : public CastBuffSpellAction {
+	public:
+		CastInnerFireAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "inner fire") {}
+	};
+
+    BEGIN_SPELL_ACTION(CastHolyNovaAction, "holy nova")
+    virtual bool isUseful() {
+        return !ai->HasAura("shadowform", AI_VALUE(Unit*, "self target"));
+    }
+    END_SPELL_ACTION()
+
+    BEGIN_RANGED_SPELL_ACTION(CastHolyFireAction, "holy fire")
+        virtual bool isUseful() {
+            return !ai->HasAura("shadowform", AI_VALUE(Unit*, "self target"));
+        }
+    END_SPELL_ACTION()
+
+    BEGIN_RANGED_SPELL_ACTION(CastSmiteAction, "smite")
+        virtual bool isUseful() {
+			return !ai->HasAura("shadowform", AI_VALUE(Unit*, "self target"));
+        }
+    END_SPELL_ACTION()
+
+	class CastPowerWordFortitudeOnPartyAction : public BuffOnPartyAction {
+	public:
+		CastPowerWordFortitudeOnPartyAction(PlayerbotAI* ai) : BuffOnPartyAction(ai, "power word: fortitude") {}
+	};
+
+	class CastDivineSpiritOnPartyAction : public BuffOnPartyAction {
+	public:
+		CastDivineSpiritOnPartyAction(PlayerbotAI* ai) : BuffOnPartyAction(ai, "divine spirit") {}
+	};
+
+	class CastPowerWordPainAction : public CastDebuffSpellAction
+	{
+    public:
+	    CastPowerWordPainAction(PlayerbotAI* ai) : CastDebuffSpellAction(ai, "shadow word: pain") {}
+	};
+
+	class CastPowerWordPainOnAttackerAction : public CastDebuffSpellOnAttackerAction
+	{
+    public:
+	    CastPowerWordPainOnAttackerAction(PlayerbotAI* ai) : CastDebuffSpellOnAttackerAction(ai, "shadow word: pain") {}
+	};
+
+    BEGIN_DEBUFF_ACTION(CastDevouringPlagueAction, "devouring plague")
+    END_SPELL_ACTION()
+
+    BEGIN_DEBUFF_ACTION(CastVampiricTouchAction, "vampiric touch")
+    END_SPELL_ACTION()
+
+    BEGIN_RANGED_SPELL_ACTION(CastMindBlastAction, "mind blast")
+    END_SPELL_ACTION()
+
+    BEGIN_RANGED_SPELL_ACTION(CastMindFlayAction, "mind flay")
+    END_SPELL_ACTION()
+
+	class CastCureDiseaseAction : public CastCureSpellAction {
+	public:
+		CastCureDiseaseAction(PlayerbotAI* ai) : CastCureSpellAction(ai, "cure disease") {}
+	};
+
+    class CastCureDiseaseOnPartyAction : public CurePartyMemberAction
+    {
+    public:
+        CastCureDiseaseOnPartyAction(PlayerbotAI* ai) : CurePartyMemberAction(ai, "cure disease", DISPEL_DISEASE) {}
+        virtual string getName() { return "cure disease on party"; }
+    };
+
+	class CastAbolishDiseaseAction : public CastCureSpellAction {
+	public:
+		CastAbolishDiseaseAction(PlayerbotAI* ai) : CastCureSpellAction(ai, "abolish disease") {}
+		virtual NextAction** getAlternatives();
+	};
+
+    class CastAbolishDiseaseOnPartyAction : public CurePartyMemberAction
+    {
+    public:
+        CastAbolishDiseaseOnPartyAction(PlayerbotAI* ai) : CurePartyMemberAction(ai, "abolish disease", DISPEL_DISEASE) {}
+        virtual string getName() { return "abolish disease on party"; }
+        virtual NextAction** getAlternatives();
+    };
+
+	class CastDispelMagicAction : public CastCureSpellAction {
+	public:
+		CastDispelMagicAction(PlayerbotAI* ai) : CastCureSpellAction(ai, "dispel magic") {}
+	};
+
+    class CastDispelMagicOnTargetAction : public CastSpellAction {
+    public:
+        CastDispelMagicOnTargetAction(PlayerbotAI* ai) : CastSpellAction(ai, "dispel magic") {}
+    };
+
+    class CastDispelMagicOnPartyAction : public CurePartyMemberAction
+    {
+    public:
+        CastDispelMagicOnPartyAction(PlayerbotAI* ai) : CurePartyMemberAction(ai, "dispel magic", DISPEL_MAGIC) {}
+        virtual string getName() { return "dispel magic on party"; }
+    };
+
+	class CastResurrectionAction : public ResurrectPartyMemberAction
+	{
+	public:
+		CastResurrectionAction(PlayerbotAI* ai) : ResurrectPartyMemberAction(ai, "resurrection") {}
+	};
+
+	class CastCircleOfHealingAction : public CastAoeHealSpellAction
+	{
+	public:
+		CastCircleOfHealingAction(PlayerbotAI* ai) : CastAoeHealSpellAction(ai, "circle of healing") {}
+	};
+
+	class CastPsychicScreamAction : public CastSpellAction
+	{
+	public:
+	    CastPsychicScreamAction(PlayerbotAI* ai) : CastSpellAction(ai, "psychic scream") {}
+	};
+
+	class CastDispersionAction : public CastSpellAction
+	{
+	public:
+	    CastDispersionAction(PlayerbotAI* ai) : CastSpellAction(ai, "dispersion") {}
+	    virtual string GetTargetName() { return "self target"; }
+	};
+
+}
diff --git a/src/plugins/playerbot/strategy/priest/PriestAiObjectContext.cpp b/src/plugins/playerbot/strategy/priest/PriestAiObjectContext.cpp
new file mode 100644
index 0000000..8a40b2b
--- /dev/null
+++ b/src/plugins/playerbot/strategy/priest/PriestAiObjectContext.cpp
@@ -0,0 +1,217 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "PriestActions.h"
+#include "PriestAiObjectContext.h"
+#include "PriestNonCombatStrategy.h"
+#include "ShadowPriestStrategy.h"
+#include "../generic/PullStrategy.h"
+#include "PriestTriggers.h"
+#include "../NamedObjectContext.h"
+#include "HolyPriestStrategy.h"
+
+using namespace ai;
+
+
+namespace ai
+{
+    namespace priest
+    {
+        using namespace ai;
+
+        class StrategyFactoryInternal : public NamedObjectContext<Strategy>
+        {
+        public:
+            StrategyFactoryInternal()
+            {
+                creators["nc"] = &priest::StrategyFactoryInternal::nc;
+                creators["pull"] = &priest::StrategyFactoryInternal::pull;
+                creators["aoe"] = &priest::StrategyFactoryInternal::shadow_aoe;
+                creators["shadow aoe"] = &priest::StrategyFactoryInternal::shadow_aoe;
+                creators["dps debuff"] = &priest::StrategyFactoryInternal::shadow_debuff;
+                creators["shadow debuff"] = &priest::StrategyFactoryInternal::shadow_debuff;
+            }
+
+        private:
+            static Strategy* nc(PlayerbotAI* ai) { return new PriestNonCombatStrategy(ai); }
+            static Strategy* shadow_aoe(PlayerbotAI* ai) { return new ShadowPriestAoeStrategy(ai); }
+            static Strategy* pull(PlayerbotAI* ai) { return new PullStrategy(ai, "shoot"); }
+            static Strategy* shadow_debuff(PlayerbotAI* ai) { return new ShadowPriestDebuffStrategy(ai); }
+        };
+
+        class CombatStrategyFactoryInternal : public NamedObjectContext<Strategy>
+        {
+        public:
+            CombatStrategyFactoryInternal() : NamedObjectContext<Strategy>(false, true)
+            {
+                creators["heal"] = &priest::CombatStrategyFactoryInternal::heal;
+                creators["shadow"] = &priest::CombatStrategyFactoryInternal::dps;
+                creators["dps"] = &priest::CombatStrategyFactoryInternal::dps;
+                creators["holy"] = &priest::CombatStrategyFactoryInternal::holy;
+            }
+
+        private:
+            static Strategy* heal(PlayerbotAI* ai) { return new HealPriestStrategy(ai); }
+            static Strategy* dps(PlayerbotAI* ai) { return new ShadowPriestStrategy(ai); }
+            static Strategy* holy(PlayerbotAI* ai) { return new HolyPriestStrategy(ai); }
+        };
+    };
+};
+
+namespace ai
+{
+    namespace priest
+    {
+        using namespace ai;
+
+        class TriggerFactoryInternal : public NamedObjectContext<Trigger>
+        {
+        public:
+            TriggerFactoryInternal()
+            {
+                creators["devouring plague"] = &TriggerFactoryInternal::devouring_plague;
+                creators["shadow word: pain"] = &TriggerFactoryInternal::shadow_word_pain;
+                creators["shadow word: pain on attacker"] = &TriggerFactoryInternal::shadow_word_pain_on_attacker;
+                creators["dispel magic"] = &TriggerFactoryInternal::dispel_magic;
+                creators["dispel magic on party"] = &TriggerFactoryInternal::dispel_magic_party_member;
+                creators["cure disease"] = &TriggerFactoryInternal::cure_disease;
+                creators["party member cure disease"] = &TriggerFactoryInternal::party_member_cure_disease;
+                creators["power word: fortitude"] = &TriggerFactoryInternal::power_word_fortitude;
+                creators["power word: fortitude on party"] = &TriggerFactoryInternal::power_word_fortitude_on_party;
+                creators["divine spirit"] = &TriggerFactoryInternal::divine_spirit;
+                creators["divine spirit on party"] = &TriggerFactoryInternal::divine_spirit_on_party;
+                creators["inner fire"] = &TriggerFactoryInternal::inner_fire;
+                creators["vampiric touch"] = &TriggerFactoryInternal::vampiric_touch;
+                creators["shadowform"] = &TriggerFactoryInternal::shadowform;
+                creators["vampiric embrace"] = &TriggerFactoryInternal::vampiric_embrace;
+
+            }
+
+        private:
+            static Trigger* vampiric_embrace(PlayerbotAI* ai) { return new VampiricEmbraceTrigger(ai); }
+            static Trigger* shadowform(PlayerbotAI* ai) { return new ShadowformTrigger(ai); }
+            static Trigger* vampiric_touch(PlayerbotAI* ai) { return new VampiricTouchTrigger(ai); }
+            static Trigger* devouring_plague(PlayerbotAI* ai) { return new DevouringPlagueTrigger(ai); }
+            static Trigger* shadow_word_pain(PlayerbotAI* ai) { return new PowerWordPainTrigger(ai); }
+            static Trigger* shadow_word_pain_on_attacker(PlayerbotAI* ai) { return new PowerWordPainOnAttackerTrigger(ai); }
+            static Trigger* dispel_magic(PlayerbotAI* ai) { return new DispelMagicTrigger(ai); }
+            static Trigger* dispel_magic_party_member(PlayerbotAI* ai) { return new DispelMagicPartyMemberTrigger(ai); }
+            static Trigger* cure_disease(PlayerbotAI* ai) { return new CureDiseaseTrigger(ai); }
+            static Trigger* party_member_cure_disease(PlayerbotAI* ai) { return new PartyMemberCureDiseaseTrigger(ai); }
+            static Trigger* power_word_fortitude(PlayerbotAI* ai) { return new PowerWordFortitudeTrigger(ai); }
+            static Trigger* power_word_fortitude_on_party(PlayerbotAI* ai) { return new PowerWordFortitudeOnPartyTrigger(ai); }
+            static Trigger* divine_spirit(PlayerbotAI* ai) { return new DivineSpiritTrigger(ai); }
+            static Trigger* divine_spirit_on_party(PlayerbotAI* ai) { return new DivineSpiritOnPartyTrigger(ai); }
+            static Trigger* inner_fire(PlayerbotAI* ai) { return new InnerFireTrigger(ai); }
+        };
+    };
+};
+
+
+
+namespace ai
+{
+    namespace priest
+    {
+        using namespace ai;
+
+        class AiObjectContextInternal : public NamedObjectContext<Action>
+        {
+        public:
+            AiObjectContextInternal()
+            {
+                creators["shadow word: pain"] = &AiObjectContextInternal::shadow_word_pain;
+                creators["shadow word: pain on attacker"] = &AiObjectContextInternal::shadow_word_pain_on_attacker;
+                creators["devouring plague"] = &AiObjectContextInternal::devouring_plague;
+                creators["mind flay"] = &AiObjectContextInternal::mind_flay;
+                creators["holy fire"] = &AiObjectContextInternal::holy_fire;
+                creators["smite"] = &AiObjectContextInternal::smite;
+                creators["mind blast"] = &AiObjectContextInternal::mind_blast;
+                creators["shadowform"] = &AiObjectContextInternal::shadowform;
+                creators["remove shadowform"] = &AiObjectContextInternal::remove_shadowform;
+                creators["holy nova"] = &AiObjectContextInternal::holy_nova;
+                creators["power word: fortitude"] = &AiObjectContextInternal::power_word_fortitude;
+                creators["power word: fortitude on party"] = &AiObjectContextInternal::power_word_fortitude_on_party;
+                creators["divine spirit"] = &AiObjectContextInternal::divine_spirit;
+                creators["divine spirit on party"] = &AiObjectContextInternal::divine_spirit_on_party;
+                creators["power word: shield"] = &AiObjectContextInternal::power_word_shield;
+                creators["power word: shield on party"] = &AiObjectContextInternal::power_word_shield_on_party;
+                creators["renew"] = &AiObjectContextInternal::renew;
+                creators["renew on party"] = &AiObjectContextInternal::renew_on_party;
+                creators["greater heal"] = &AiObjectContextInternal::greater_heal;
+                creators["greater heal on party"] = &AiObjectContextInternal::greater_heal_on_party;
+                creators["heal"] = &AiObjectContextInternal::heal;
+                creators["heal on party"] = &AiObjectContextInternal::heal_on_party;
+                creators["lesser heal"] = &AiObjectContextInternal::lesser_heal;
+                creators["lesser heal on party"] = &AiObjectContextInternal::lesser_heal_on_party;
+                creators["flash heal"] = &AiObjectContextInternal::flash_heal;
+                creators["flash heal on party"] = &AiObjectContextInternal::flash_heal_on_party;
+                creators["dispel magic"] = &AiObjectContextInternal::dispel_magic;
+                creators["dispel magic on party"] = &AiObjectContextInternal::dispel_magic_on_party;
+                creators["dispel magic on target"] = &AiObjectContextInternal::dispel_magic_on_target;
+                creators["cure disease"] = &AiObjectContextInternal::cure_disease;
+                creators["cure disease on party"] = &AiObjectContextInternal::cure_disease_on_party;
+                creators["abolish disease"] = &AiObjectContextInternal::abolish_disease;
+                creators["abolish disease on party"] = &AiObjectContextInternal::abolish_disease_on_party;
+                creators["fade"] = &AiObjectContextInternal::fade;
+                creators["inner fire"] = &AiObjectContextInternal::inner_fire;
+                creators["resurrection"] = &AiObjectContextInternal::resurrection;
+                creators["circle of healing"] = &AiObjectContextInternal::circle_of_healing;
+                creators["psychic scream"] = &AiObjectContextInternal::psychic_scream;
+                creators["vampiric touch"] = &AiObjectContextInternal::vampiric_touch;
+                creators["vampiric embrace"] = &AiObjectContextInternal::vampiric_embrace;
+                creators["dispersion"] = &AiObjectContextInternal::dispersion;
+            }
+
+        private:
+            static Action* dispersion(PlayerbotAI* ai) { return new CastDispersionAction(ai); }
+            static Action* vampiric_embrace(PlayerbotAI* ai) { return new CastVampiricEmbraceAction(ai); }
+            static Action* vampiric_touch(PlayerbotAI* ai) { return new CastVampiricTouchAction(ai); }
+            static Action* psychic_scream(PlayerbotAI* ai) { return new CastPsychicScreamAction(ai); }
+            static Action* circle_of_healing(PlayerbotAI* ai) { return new CastCircleOfHealingAction(ai); }
+            static Action* resurrection(PlayerbotAI* ai) { return new CastResurrectionAction(ai); }
+            static Action* shadow_word_pain(PlayerbotAI* ai) { return new CastPowerWordPainAction(ai); }
+            static Action* shadow_word_pain_on_attacker(PlayerbotAI* ai) { return new CastPowerWordPainOnAttackerAction(ai); }
+            static Action* devouring_plague(PlayerbotAI* ai) { return new CastDevouringPlagueAction(ai); }
+            static Action* mind_flay(PlayerbotAI* ai) { return new CastMindFlayAction(ai); }
+            static Action* holy_fire(PlayerbotAI* ai) { return new CastHolyFireAction(ai); }
+            static Action* smite(PlayerbotAI* ai) { return new CastSmiteAction(ai); }
+            static Action* mind_blast(PlayerbotAI* ai) { return new CastMindBlastAction(ai); }
+            static Action* shadowform(PlayerbotAI* ai) { return new CastShadowformAction(ai); }
+            static Action* remove_shadowform(PlayerbotAI* ai) { return new CastRemoveShadowformAction(ai); }
+            static Action* holy_nova(PlayerbotAI* ai) { return new CastHolyNovaAction(ai); }
+            static Action* power_word_fortitude(PlayerbotAI* ai) { return new CastPowerWordFortitudeAction(ai); }
+            static Action* power_word_fortitude_on_party(PlayerbotAI* ai) { return new CastPowerWordFortitudeOnPartyAction(ai); }
+            static Action* divine_spirit(PlayerbotAI* ai) { return new CastDivineSpiritAction(ai); }
+            static Action* divine_spirit_on_party(PlayerbotAI* ai) { return new CastDivineSpiritOnPartyAction(ai); }
+            static Action* power_word_shield(PlayerbotAI* ai) { return new CastPowerWordShieldAction(ai); }
+            static Action* power_word_shield_on_party(PlayerbotAI* ai) { return new CastPowerWordShieldOnPartyAction(ai); }
+            static Action* renew(PlayerbotAI* ai) { return new CastRenewAction(ai); }
+            static Action* renew_on_party(PlayerbotAI* ai) { return new CastRenewOnPartyAction(ai); }
+            static Action* greater_heal(PlayerbotAI* ai) { return new CastGreaterHealAction(ai); }
+            static Action* greater_heal_on_party(PlayerbotAI* ai) { return new CastGreaterHealOnPartyAction(ai); }
+            static Action* heal(PlayerbotAI* ai) { return new CastHealAction(ai); }
+            static Action* heal_on_party(PlayerbotAI* ai) { return new CastHealOnPartyAction(ai); }
+            static Action* lesser_heal(PlayerbotAI* ai) { return new CastLesserHealAction(ai); }
+            static Action* lesser_heal_on_party(PlayerbotAI* ai) { return new CastLesserHealOnPartyAction(ai); }
+            static Action* flash_heal(PlayerbotAI* ai) { return new CastFlashHealAction(ai); }
+            static Action* flash_heal_on_party(PlayerbotAI* ai) { return new CastFlashHealOnPartyAction(ai); }
+            static Action* dispel_magic(PlayerbotAI* ai) { return new CastDispelMagicAction(ai); }
+            static Action* dispel_magic_on_party(PlayerbotAI* ai) { return new CastDispelMagicOnPartyAction(ai); }
+            static Action* dispel_magic_on_target(PlayerbotAI* ai) { return new CastDispelMagicOnTargetAction(ai); }
+            static Action* cure_disease(PlayerbotAI* ai) { return new CastCureDiseaseAction(ai); }
+            static Action* cure_disease_on_party(PlayerbotAI* ai) { return new CastCureDiseaseOnPartyAction(ai); }
+            static Action* abolish_disease(PlayerbotAI* ai) { return new CastAbolishDiseaseAction(ai); }
+            static Action* abolish_disease_on_party(PlayerbotAI* ai) { return new CastAbolishDiseaseOnPartyAction(ai); }
+            static Action* fade(PlayerbotAI* ai) { return new CastFadeAction(ai); }
+            static Action* inner_fire(PlayerbotAI* ai) { return new CastInnerFireAction(ai); }
+        };
+    };
+};
+
+PriestAiObjectContext::PriestAiObjectContext(PlayerbotAI* ai) : AiObjectContext(ai)
+{
+    strategyContexts.Add(new ai::priest::StrategyFactoryInternal());
+    strategyContexts.Add(new ai::priest::CombatStrategyFactoryInternal());
+    actionContexts.Add(new ai::priest::AiObjectContextInternal());
+    triggerContexts.Add(new ai::priest::TriggerFactoryInternal());
+}
diff --git a/src/plugins/playerbot/strategy/priest/PriestAiObjectContext.h b/src/plugins/playerbot/strategy/priest/PriestAiObjectContext.h
new file mode 100644
index 0000000..315c335
--- /dev/null
+++ b/src/plugins/playerbot/strategy/priest/PriestAiObjectContext.h
@@ -0,0 +1,12 @@
+#pragma once
+
+#include "../AiObjectContext.h"
+
+namespace ai
+{
+    class PriestAiObjectContext : public AiObjectContext
+    {
+    public:
+        PriestAiObjectContext(PlayerbotAI* ai);
+    };
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/priest/PriestMultipliers.cpp b/src/plugins/playerbot/strategy/priest/PriestMultipliers.cpp
new file mode 100644
index 0000000..fced53e
--- /dev/null
+++ b/src/plugins/playerbot/strategy/priest/PriestMultipliers.cpp
@@ -0,0 +1,6 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "PriestMultipliers.h"
+#include "PriestActions.h"
+
+using namespace ai;
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/priest/PriestMultipliers.h b/src/plugins/playerbot/strategy/priest/PriestMultipliers.h
new file mode 100644
index 0000000..7cfbdd4
--- /dev/null
+++ b/src/plugins/playerbot/strategy/priest/PriestMultipliers.h
@@ -0,0 +1,6 @@
+#pragma once
+
+namespace ai
+{
+   
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/priest/PriestNonCombatStrategy.cpp b/src/plugins/playerbot/strategy/priest/PriestNonCombatStrategy.cpp
new file mode 100644
index 0000000..a4d846b
--- /dev/null
+++ b/src/plugins/playerbot/strategy/priest/PriestNonCombatStrategy.cpp
@@ -0,0 +1,82 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "PriestMultipliers.h"
+#include "PriestNonCombatStrategy.h"
+#include "PriestNonCombatStrategyActionNodeFactory.h"
+
+using namespace ai;
+
+PriestNonCombatStrategy::PriestNonCombatStrategy(PlayerbotAI* ai) : NonCombatStrategy(ai)
+{
+    actionNodeFactories.Add(new PriestNonCombatStrategyActionNodeFactory());
+}
+
+void PriestNonCombatStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    NonCombatStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "power word: fortitude",
+        NextAction::array(0, new NextAction("power word: fortitude", 12.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "power word: fortitude on party",
+        NextAction::array(0, new NextAction("power word: fortitude on party", 11.0f), NULL)));
+
+
+    triggers.push_back(new TriggerNode(
+        "divine spirit",
+        NextAction::array(0, new NextAction("divine spirit", 14.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "divine spirit on party",
+        NextAction::array(0, new NextAction("divine spirit on party", 13.0f), NULL)));
+
+
+    triggers.push_back(new TriggerNode(
+        "inner fire",
+        NextAction::array(0, new NextAction("inner fire", 10.0f), NULL)));
+
+
+    triggers.push_back(new TriggerNode(
+        "critical health",
+        NextAction::array(0, new NextAction("power word: shield", 70.0f), new NextAction("greater heal", 70.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "party member critical health",
+        NextAction::array(0, new NextAction("power word: shield on party", 60.0f), new NextAction("greater heal on party", 60.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "low health",
+        NextAction::array(0, new NextAction("flash heal", 21.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "party member low health",
+        NextAction::array(0, new NextAction("flash heal on party", 20.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "medium aoe heal",
+        NextAction::array(0, new NextAction("circle of healing", 27.0f), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"party member dead",
+		NextAction::array(0, new NextAction("resurrection", 30.0f), NULL)));
+
+
+    triggers.push_back(new TriggerNode(
+        "dispel magic",
+        NextAction::array(0, new NextAction("dispel magic", 41.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "dispel magic on party",
+        NextAction::array(0, new NextAction("dispel magic on party", 40.0f), NULL)));
+
+
+    triggers.push_back(new TriggerNode(
+        "cure disease",
+        NextAction::array(0, new NextAction("abolish disease", 31.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "party member cure disease",
+        NextAction::array(0, new NextAction("abolish disease on party", 30.0f), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/priest/PriestNonCombatStrategy.h b/src/plugins/playerbot/strategy/priest/PriestNonCombatStrategy.h
new file mode 100644
index 0000000..da82e1a
--- /dev/null
+++ b/src/plugins/playerbot/strategy/priest/PriestNonCombatStrategy.h
@@ -0,0 +1,17 @@
+#pragma once
+
+#include "../Strategy.h"
+#include "../generic/NonCombatStrategy.h"
+
+namespace ai
+{
+    class PriestNonCombatStrategy : public NonCombatStrategy
+    {
+    public:
+        PriestNonCombatStrategy(PlayerbotAI* ai);
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "nc"; }
+    };
+}
diff --git a/src/plugins/playerbot/strategy/priest/PriestNonCombatStrategyActionNodeFactory.h b/src/plugins/playerbot/strategy/priest/PriestNonCombatStrategyActionNodeFactory.h
new file mode 100644
index 0000000..05edd68
--- /dev/null
+++ b/src/plugins/playerbot/strategy/priest/PriestNonCombatStrategyActionNodeFactory.h
@@ -0,0 +1,126 @@
+#pragma once
+
+namespace ai
+{
+    class PriestNonCombatStrategyActionNodeFactory : public NamedObjectFactory<ActionNode>
+    {
+    public:
+        PriestNonCombatStrategyActionNodeFactory()
+        {
+            creators["holy nova"] = &holy_nova;
+            creators["power word: shield"] = &power_word_shield;
+            creators["power word: shield on party"] = &power_word_shield_on_party;
+            creators["renew"] = &renew;
+            creators["renew on party"] = &renew_on_party;
+            creators["greater heal"] = &greater_heal;
+            creators["greater heal on party"] = &greater_heal_on_party;
+            creators["heal"] = &heal;
+            creators["heal on party"] = &heal_on_party;
+            creators["lesser heal"] = &lesser_heal;
+            creators["lesser heal on party"] = &lesser_heal_on_party;
+            creators["flash heal"] = &flash_heal;
+            creators["flash heal on party"] = &flash_heal_on_party;
+            creators["circle of healing"] = &circle_of_healing;
+        }
+    private:
+        static ActionNode* holy_nova(PlayerbotAI* ai)
+        {
+            return new ActionNode ("holy nova",
+                /*P*/ NextAction::array(0, new NextAction("remove shadowform"), NULL),
+                /*A*/ NULL,
+                /*C*/ NULL);
+        }
+        static ActionNode* power_word_shield(PlayerbotAI* ai)
+        {
+            return new ActionNode ("power word: shield",
+                /*P*/ NULL,
+                /*A*/ NextAction::array(0, new NextAction("renew", 50.0f), NULL),
+                /*C*/ NULL);
+        }
+        static ActionNode* power_word_shield_on_party(PlayerbotAI* ai)
+        {
+            return new ActionNode ("power word: shield on party",
+                /*P*/ NULL,
+                /*A*/ NextAction::array(0, new NextAction("renew on party", 50.0f), NULL),
+                /*C*/ NULL);
+        }
+        static ActionNode* renew(PlayerbotAI* ai)
+        {
+            return new ActionNode ("renew",
+                /*P*/ NextAction::array(0, new NextAction("remove shadowform"), NULL),
+                /*A*/ NULL,
+                /*C*/ NULL);
+        }
+        static ActionNode* renew_on_party(PlayerbotAI* ai)
+        {
+            return new ActionNode ("renew on party",
+                /*P*/ NextAction::array(0, new NextAction("remove shadowform"), NULL),
+                /*A*/ NULL,
+                /*C*/ NULL);
+        }
+        static ActionNode* greater_heal(PlayerbotAI* ai)
+        {
+            return new ActionNode ("greater heal",
+                /*P*/ NextAction::array(0, new NextAction("remove shadowform"), NULL),
+                /*A*/ NextAction::array(0, new NextAction("heal"), NULL),
+                /*C*/ NULL);
+        }
+        static ActionNode* greater_heal_on_party(PlayerbotAI* ai)
+        {
+            return new ActionNode ("greater heal on party",
+                /*P*/ NULL,
+                /*A*/ NextAction::array(0, new NextAction("heal on party"), NULL),
+                /*C*/ NULL);
+        }
+        static ActionNode* heal(PlayerbotAI* ai)
+        {
+            return new ActionNode ("heal",
+                /*P*/ NextAction::array(0, new NextAction("remove shadowform"), NULL),
+                /*A*/ NextAction::array(0, new NextAction("lesser heal"), NULL),
+                /*C*/ NULL);
+        }
+        static ActionNode* heal_on_party(PlayerbotAI* ai)
+        {
+            return new ActionNode ("heal on party",
+                /*P*/ NextAction::array(0, new NextAction("remove shadowform"), NULL),
+                /*A*/ NextAction::array(0, new NextAction("lesser heal on party"), NULL),
+                /*C*/ NULL);
+        }
+        static ActionNode* lesser_heal(PlayerbotAI* ai)
+        {
+            return new ActionNode ("lesser heal",
+                /*P*/ NextAction::array(0, new NextAction("remove shadowform"), NULL),
+                /*A*/ NULL,
+                /*C*/ NULL);
+        }
+        static ActionNode* lesser_heal_on_party(PlayerbotAI* ai)
+        {
+            return new ActionNode ("lesser heal on party",
+                /*P*/ NextAction::array(0, new NextAction("remove shadowform"), NULL),
+                /*A*/ NULL,
+                /*C*/ NULL);
+        }
+        static ActionNode* flash_heal(PlayerbotAI* ai)
+        {
+            return new ActionNode ("flash heal",
+                /*P*/ NextAction::array(0, new NextAction("remove shadowform"), NULL),
+                /*A*/ NULL,
+                /*C*/ NULL);
+        }
+        static ActionNode* flash_heal_on_party(PlayerbotAI* ai)
+        {
+            return new ActionNode ("flash heal on party",
+                /*P*/ NextAction::array(0, new NextAction("remove shadowform"), NULL),
+                /*A*/ NULL,
+                /*C*/ NULL);
+        }
+        static ActionNode* circle_of_healing(PlayerbotAI* ai)
+        {
+            return new ActionNode ("circle of healing",
+                /*P*/ NextAction::array(0, new NextAction("remove shadowform"), NULL),
+                /*A*/ NextAction::array(0, new NextAction("flash heal on party"), NULL),
+                /*C*/ NULL);
+        }
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/priest/PriestTriggers.cpp b/src/plugins/playerbot/strategy/priest/PriestTriggers.cpp
new file mode 100644
index 0000000..941041c
--- /dev/null
+++ b/src/plugins/playerbot/strategy/priest/PriestTriggers.cpp
@@ -0,0 +1,7 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "PriestTriggers.h"
+#include "PriestActions.h"
+
+using namespace ai;
+
diff --git a/src/plugins/playerbot/strategy/priest/PriestTriggers.h b/src/plugins/playerbot/strategy/priest/PriestTriggers.h
new file mode 100644
index 0000000..83b43c2
--- /dev/null
+++ b/src/plugins/playerbot/strategy/priest/PriestTriggers.h
@@ -0,0 +1,54 @@
+#pragma once
+
+#include "../triggers/GenericTriggers.h"
+
+namespace ai
+{
+    BUFF_ON_PARTY_TRIGGER(PowerWordFortitudeOnPartyTrigger, "power word: fortitude", "power word: fortitude on party")
+    BUFF_TRIGGER(PowerWordFortitudeTrigger, "power word: fortitude", "power word: fortitude")
+
+    BUFF_ON_PARTY_TRIGGER(DivineSpiritOnPartyTrigger, "divine spirit", "divine spirit on party")
+    BUFF_TRIGGER(DivineSpiritTrigger, "divine spirit", "divine spirit")
+    BUFF_TRIGGER(InnerFireTrigger, "inner fire", "inner fire")
+    BUFF_TRIGGER(VampiricEmbraceTrigger, "vampiric embrace", "vampiric embrace")
+
+    class PowerWordPainOnAttackerTrigger : public DebuffOnAttackerTrigger
+    {
+    public:
+        PowerWordPainOnAttackerTrigger(PlayerbotAI* ai) : DebuffOnAttackerTrigger(ai, "shadow word: pain") {}
+    };
+
+    DEBUFF_TRIGGER(PowerWordPainTrigger, "shadow word: pain", "shadow word: pain")
+    DEBUFF_TRIGGER(DevouringPlagueTrigger, "devouring plague", "devouring plague")
+    DEBUFF_TRIGGER(VampiricTouchTrigger, "vampiric touch", "vampiric touch")
+
+    class DispelMagicTrigger : public NeedCureTrigger
+    {
+    public:
+        DispelMagicTrigger(PlayerbotAI* ai) : NeedCureTrigger(ai, "dispel magic", DISPEL_MAGIC) {}
+    };
+
+    class DispelMagicPartyMemberTrigger : public PartyMemberNeedCureTrigger
+    {
+    public:
+        DispelMagicPartyMemberTrigger(PlayerbotAI* ai) : PartyMemberNeedCureTrigger(ai, "dispel magic", DISPEL_MAGIC) {}
+    };
+
+    class CureDiseaseTrigger : public NeedCureTrigger
+    {
+    public:
+        CureDiseaseTrigger(PlayerbotAI* ai) : NeedCureTrigger(ai, "cure disease", DISPEL_DISEASE) {}
+    };
+
+    class PartyMemberCureDiseaseTrigger : public PartyMemberNeedCureTrigger
+    {
+    public:
+        PartyMemberCureDiseaseTrigger(PlayerbotAI* ai) : PartyMemberNeedCureTrigger(ai, "cure disease", DISPEL_DISEASE) {}
+    };
+
+    class ShadowformTrigger : public BuffTrigger {
+    public:
+        ShadowformTrigger(PlayerbotAI* ai) : BuffTrigger(ai, "shadowform") {}
+        virtual bool IsActive() { return !ai->HasAura("shadowform", bot); }
+    };
+}
diff --git a/src/plugins/playerbot/strategy/priest/ShadowPriestStrategy.cpp b/src/plugins/playerbot/strategy/priest/ShadowPriestStrategy.cpp
new file mode 100644
index 0000000..718794c
--- /dev/null
+++ b/src/plugins/playerbot/strategy/priest/ShadowPriestStrategy.cpp
@@ -0,0 +1,60 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "PriestMultipliers.h"
+#include "ShadowPriestStrategy.h"
+#include "ShadowPriestStrategyActionNodeFactory.h"
+
+using namespace ai;
+
+ShadowPriestStrategy::ShadowPriestStrategy(PlayerbotAI* ai) : GenericPriestStrategy(ai)
+{
+    actionNodeFactories.Add(new ShadowPriestStrategyActionNodeFactory());
+}
+
+NextAction** ShadowPriestStrategy::getDefaultActions()
+{
+    return NextAction::array(0, new NextAction("mind blast", 10.0f), NULL);
+}
+
+void ShadowPriestStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    GenericPriestStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "enemy out of spell",
+        NextAction::array(0, new NextAction("reach spell", ACTION_NORMAL + 9), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "shadowform",
+        NextAction::array(0, new NextAction("shadowform", 15.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "low mana",
+        NextAction::array(0, new NextAction("dispersion", ACTION_EMERGENCY + 5), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "vampiric embrace",
+        NextAction::array(0, new NextAction("vampiric embrace", 16.0f), NULL)));
+}
+
+void ShadowPriestAoeStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "shadow word: pain on attacker",
+        NextAction::array(0, new NextAction("shadow word: pain on attacker", 11.0f), NULL)));
+}
+
+void ShadowPriestDebuffStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "devouring plague",
+        NextAction::array(0, new NextAction("devouring plague", 13.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "vampiric touch",
+        NextAction::array(0, new NextAction("vampiric touch", 11.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "shadow word: pain",
+        NextAction::array(0, new NextAction("shadow word: pain", 12.0f), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/priest/ShadowPriestStrategy.h b/src/plugins/playerbot/strategy/priest/ShadowPriestStrategy.h
new file mode 100644
index 0000000..3097f4a
--- /dev/null
+++ b/src/plugins/playerbot/strategy/priest/ShadowPriestStrategy.h
@@ -0,0 +1,38 @@
+#pragma once
+
+#include "HealPriestStrategy.h"
+
+namespace ai
+{
+    class ShadowPriestStrategy : public GenericPriestStrategy
+    {
+    public:
+        ShadowPriestStrategy(PlayerbotAI* ai);
+
+    public:
+        virtual NextAction** getDefaultActions();
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "shadow"; }
+        virtual int GetType() { return STRATEGY_TYPE_DPS|STRATEGY_TYPE_RANGED; }
+    };
+
+    class ShadowPriestAoeStrategy : public CombatStrategy
+    {
+    public:
+        ShadowPriestAoeStrategy(PlayerbotAI* ai) : CombatStrategy(ai) {}
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "shadow aoe"; }
+    };
+
+    class ShadowPriestDebuffStrategy : public CombatStrategy
+    {
+    public:
+        ShadowPriestDebuffStrategy(PlayerbotAI* ai) : CombatStrategy(ai) {}
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "shadow debuff"; }
+    };
+}
diff --git a/src/plugins/playerbot/strategy/priest/ShadowPriestStrategyActionNodeFactory.h b/src/plugins/playerbot/strategy/priest/ShadowPriestStrategyActionNodeFactory.h
new file mode 100644
index 0000000..1b9c533
--- /dev/null
+++ b/src/plugins/playerbot/strategy/priest/ShadowPriestStrategyActionNodeFactory.h
@@ -0,0 +1,37 @@
+#pragma once
+
+namespace ai
+{
+    class ShadowPriestStrategyActionNodeFactory : public NamedObjectFactory<ActionNode>
+    {
+    public:
+        ShadowPriestStrategyActionNodeFactory()
+        {
+            creators["mind flay"] = &mind_flay;
+            creators["mind blast"] = &mind_blast;
+            creators["dispersion"] = &dispersion;
+        }
+    private:
+        static ActionNode* mind_flay(PlayerbotAI* ai)
+        {
+            return new ActionNode ("mind flay",
+                /*P*/ NULL,
+                /*A*/ NextAction::array(0, new NextAction("shoot"), NULL),
+                /*C*/ NULL);
+        }
+        static ActionNode* mind_blast(PlayerbotAI* ai)
+        {
+            return new ActionNode ("mind blast",
+                /*P*/ NULL,
+                /*A*/ NextAction::array(0, new NextAction("mind flay"), NULL),
+                /*C*/ NULL);
+        }
+        static ActionNode* dispersion(PlayerbotAI* ai)
+        {
+            return new ActionNode ("dispersion",
+                /*P*/ NULL,
+                /*A*/ NextAction::array(0, new NextAction("mana potion"), NULL),
+                /*C*/ NULL);
+        }
+    };
+};
diff --git a/src/plugins/playerbot/strategy/rogue/DpsRogueStrategy.cpp b/src/plugins/playerbot/strategy/rogue/DpsRogueStrategy.cpp
new file mode 100644
index 0000000..650ac60
--- /dev/null
+++ b/src/plugins/playerbot/strategy/rogue/DpsRogueStrategy.cpp
@@ -0,0 +1,110 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "RogueMultipliers.h"
+#include "DpsRogueStrategy.h"
+
+using namespace ai;
+
+class DpsRogueStrategyActionNodeFactory : public NamedObjectFactory<ActionNode>
+{
+public:
+    DpsRogueStrategyActionNodeFactory()
+    {
+        creators["riposte"] = &riposte;
+        creators["mutilate"] = &mutilate;
+        creators["sinister strike"] = &sinister_strike;
+        creators["kick"] = &kick;
+        creators["kidney shot"] = &kidney_shot;
+        creators["rupture"] = &rupture;
+        creators["backstab"] = &backstab;
+    }
+private:
+    static ActionNode* riposte(PlayerbotAI* ai)
+    {
+        return new ActionNode ("riposte",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("mutilate"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* mutilate(PlayerbotAI* ai)
+    {
+        return new ActionNode ("mutilate",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("sinister strike"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* sinister_strike(PlayerbotAI* ai)
+    {
+        return new ActionNode ("sinister strike",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("melee"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* kick(PlayerbotAI* ai)
+    {
+        return new ActionNode ("kick",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("kidney shot"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* kidney_shot(PlayerbotAI* ai)
+    {
+        return new ActionNode ("kidney shot",
+            /*P*/ NULL,
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+    static ActionNode* rupture(PlayerbotAI* ai)
+    {
+        return new ActionNode ("rupture",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("eviscerate"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* backstab(PlayerbotAI* ai)
+    {
+        return new ActionNode ("backstab",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("mutilate"), NULL),
+            /*C*/ NULL);
+    }
+};
+
+DpsRogueStrategy::DpsRogueStrategy(PlayerbotAI* ai) : MeleeCombatStrategy(ai)
+{
+    actionNodeFactories.Add(new DpsRogueStrategyActionNodeFactory());
+}
+
+NextAction** DpsRogueStrategy::getDefaultActions()
+{
+    return NextAction::array(0, new NextAction("riposte", ACTION_NORMAL), NULL);
+}
+
+void DpsRogueStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    MeleeCombatStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "combo points available",
+        NextAction::array(0, new NextAction("rupture", ACTION_HIGH + 2), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"medium threat",
+		NextAction::array(0, new NextAction("vanish", ACTION_HIGH), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"low health",
+		NextAction::array(0, new NextAction("evasion", ACTION_EMERGENCY), new NextAction("feint", ACTION_EMERGENCY), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"kick",
+		NextAction::array(0, new NextAction("kick", ACTION_INTERRUPT + 2), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"kick on enemy healer",
+		NextAction::array(0, new NextAction("kick on enemy healer", ACTION_INTERRUPT + 1), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "behind target",
+        NextAction::array(0, new NextAction("backstab", ACTION_NORMAL), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/rogue/DpsRogueStrategy.h b/src/plugins/playerbot/strategy/rogue/DpsRogueStrategy.h
new file mode 100644
index 0000000..77e2249
--- /dev/null
+++ b/src/plugins/playerbot/strategy/rogue/DpsRogueStrategy.h
@@ -0,0 +1,18 @@
+#pragma once
+
+#include "../Strategy.h"
+#include "../generic/MeleeCombatStrategy.h"
+
+namespace ai
+{
+    class DpsRogueStrategy : public MeleeCombatStrategy
+    {
+    public:
+        DpsRogueStrategy(PlayerbotAI* ai);
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "dps"; }
+        virtual NextAction** getDefaultActions();
+    };
+}
diff --git a/src/plugins/playerbot/strategy/rogue/GenericRogueNonCombatStrategy.cpp b/src/plugins/playerbot/strategy/rogue/GenericRogueNonCombatStrategy.cpp
new file mode 100644
index 0000000..0afb767
--- /dev/null
+++ b/src/plugins/playerbot/strategy/rogue/GenericRogueNonCombatStrategy.cpp
@@ -0,0 +1,14 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "RogueTriggers.h"
+#include "RogueMultipliers.h"
+#include "GenericRogueNonCombatStrategy.h"
+#include "RogueActions.h"
+
+using namespace ai;
+
+void GenericRogueNonCombatStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    NonCombatStrategy::InitTriggers(triggers);
+        
+}
diff --git a/src/plugins/playerbot/strategy/rogue/GenericRogueNonCombatStrategy.h b/src/plugins/playerbot/strategy/rogue/GenericRogueNonCombatStrategy.h
new file mode 100644
index 0000000..2d78612
--- /dev/null
+++ b/src/plugins/playerbot/strategy/rogue/GenericRogueNonCombatStrategy.h
@@ -0,0 +1,16 @@
+#pragma once
+
+#include "../generic/NonCombatStrategy.h"
+
+namespace ai
+{
+    class GenericRogueNonCombatStrategy : public NonCombatStrategy
+    {
+    public:
+        GenericRogueNonCombatStrategy(PlayerbotAI* ai) : NonCombatStrategy(ai) {}
+        virtual string getName() { return "nc"; }
+    
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+    };
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/rogue/RogueActions.cpp b/src/plugins/playerbot/strategy/rogue/RogueActions.cpp
new file mode 100644
index 0000000..aba6061
--- /dev/null
+++ b/src/plugins/playerbot/strategy/rogue/RogueActions.cpp
@@ -0,0 +1,5 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "RogueActions.h"
+
+using namespace ai;
diff --git a/src/plugins/playerbot/strategy/rogue/RogueActions.h b/src/plugins/playerbot/strategy/rogue/RogueActions.h
new file mode 100644
index 0000000..a7a78eb
--- /dev/null
+++ b/src/plugins/playerbot/strategy/rogue/RogueActions.h
@@ -0,0 +1,82 @@
+#pragma once
+
+#include "../actions/GenericActions.h"
+#include "RogueComboActions.h"
+#include "RogueOpeningActions.h"
+#include "RogueFinishingActions.h"
+
+namespace ai
+{
+	class CastEvasionAction : public CastBuffSpellAction
+	{
+	public:
+		CastEvasionAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "evasion") {}
+	};
+
+	class CastSprintAction : public CastBuffSpellAction
+	{
+	public:
+		CastSprintAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "sprint") {}
+	};
+
+	class CastKickAction : public CastSpellAction
+	{
+	public:
+		CastKickAction(PlayerbotAI* ai) : CastSpellAction(ai, "kick") {}
+	};
+
+	class CastFeintAction : public CastBuffSpellAction
+	{
+	public:
+		CastFeintAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "feint") {}
+	};
+
+	class CastDismantleAction : public CastSpellAction
+	{
+	public:
+		CastDismantleAction(PlayerbotAI* ai) : CastSpellAction(ai, "dismantle") {}
+	};
+
+	class CastDistractAction : public CastSpellAction
+	{
+	public:
+		CastDistractAction(PlayerbotAI* ai) : CastSpellAction(ai, "distract") {}
+	};
+
+	class CastVanishAction : public CastBuffSpellAction
+	{
+	public:
+		CastVanishAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "vanish") {}
+	};
+
+	class CastBlindAction : public CastDebuffSpellAction
+	{
+	public:
+		CastBlindAction(PlayerbotAI* ai) : CastDebuffSpellAction(ai, "blind") {}
+	};
+
+
+	class CastBladeFlurryAction : public CastBuffSpellAction
+	{
+	public:
+		CastBladeFlurryAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "blade flurry") {}
+	};
+
+	class CastAdrenalineRushAction : public CastBuffSpellAction
+	{
+	public:
+		CastAdrenalineRushAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "adrenaline rush") {}
+	};
+
+	class CastKillingSpreeAction : public CastBuffSpellAction
+	{
+	public:
+		CastKillingSpreeAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "killing spree") {}
+	};
+
+    class CastKickOnEnemyHealerAction : public CastSpellOnEnemyHealerAction
+    {
+    public:
+        CastKickOnEnemyHealerAction(PlayerbotAI* ai) : CastSpellOnEnemyHealerAction(ai, "kick") {}
+    };
+}
diff --git a/src/plugins/playerbot/strategy/rogue/RogueAiObjectContext.cpp b/src/plugins/playerbot/strategy/rogue/RogueAiObjectContext.cpp
new file mode 100644
index 0000000..fdca0c0
--- /dev/null
+++ b/src/plugins/playerbot/strategy/rogue/RogueAiObjectContext.cpp
@@ -0,0 +1,119 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "RogueActions.h"
+#include "RogueTriggers.h"
+#include "RogueAiObjectContext.h"
+#include "DpsRogueStrategy.h"
+#include "GenericRogueNonCombatStrategy.h"
+#include "../generic/PullStrategy.h"
+#include "../NamedObjectContext.h"
+
+using namespace ai;
+
+
+namespace ai
+{
+    namespace rogue
+    {
+        using namespace ai;
+
+        class StrategyFactoryInternal : public NamedObjectContext<Strategy>
+        {
+        public:
+            StrategyFactoryInternal()
+            {
+                creators["dps"] = &rogue::StrategyFactoryInternal::dps;
+                creators["nc"] = &rogue::StrategyFactoryInternal::nc;
+                creators["pull"] = &rogue::StrategyFactoryInternal::pull;
+            }
+
+        private:
+            static Strategy* dps(PlayerbotAI* ai) { return new DpsRogueStrategy(ai); }
+            static Strategy* nc(PlayerbotAI* ai) { return new GenericRogueNonCombatStrategy(ai); }
+            static Strategy* pull(PlayerbotAI* ai) { return new PullStrategy(ai, "shoot"); }
+        };
+    };
+};
+
+namespace ai
+{
+    namespace rogue
+    {
+        using namespace ai;
+
+        class TriggerFactoryInternal : public NamedObjectContext<Trigger>
+        {
+        public:
+            TriggerFactoryInternal()
+            {
+                creators["kick"] = &TriggerFactoryInternal::kick;
+                creators["rupture"] = &TriggerFactoryInternal::rupture;
+                creators["slice and dice"] = &TriggerFactoryInternal::slice_and_dice;
+                creators["expose armor"] = &TriggerFactoryInternal::expose_armor;
+                creators["kick on enemy healer"] = &TriggerFactoryInternal::kick_on_enemy_healer;
+
+            }
+
+        private:
+            static Trigger* kick(PlayerbotAI* ai) { return new KickInterruptSpellTrigger(ai); }
+            static Trigger* rupture(PlayerbotAI* ai) { return new RuptureTrigger(ai); }
+            static Trigger* slice_and_dice(PlayerbotAI* ai) { return new SliceAndDiceTrigger(ai); }
+            static Trigger* expose_armor(PlayerbotAI* ai) { return new ExposeArmorTrigger(ai); }
+            static Trigger* kick_on_enemy_healer(PlayerbotAI* ai) { return new KickInterruptEnemyHealerSpellTrigger(ai); }
+        };
+    };
+};
+
+
+namespace ai
+{
+    namespace rogue
+    {
+        using namespace ai;
+
+        class AiObjectContextInternal : public NamedObjectContext<Action>
+        {
+        public:
+            AiObjectContextInternal()
+            {
+                creators["riposte"] = &AiObjectContextInternal::riposte;
+                creators["mutilate"] = &AiObjectContextInternal::mutilate;
+                creators["sinister strike"] = &AiObjectContextInternal::sinister_strike;
+                creators["kidney shot"] = &AiObjectContextInternal::kidney_shot;
+                creators["rupture"] = &AiObjectContextInternal::rupture;
+                creators["slice and dice"] = &AiObjectContextInternal::slice_and_dice;
+                creators["eviscerate"] = &AiObjectContextInternal::eviscerate;
+                creators["vanish"] = &AiObjectContextInternal::vanish;
+                creators["evasion"] = &AiObjectContextInternal::evasion;
+                creators["kick"] = &AiObjectContextInternal::kick;
+                creators["feint"] = &AiObjectContextInternal::feint;
+                creators["backstab"] = &AiObjectContextInternal::backstab;
+                creators["expose armor"] = &AiObjectContextInternal::expose_armor;
+                creators["kick on enemy healer"] = &AiObjectContextInternal::kick_on_enemy_healer;
+            }
+
+        private:
+            static Action* riposte(PlayerbotAI* ai) { return new CastRiposteAction(ai); }
+            static Action* mutilate(PlayerbotAI* ai) { return new CastMutilateAction(ai); }
+            static Action* sinister_strike(PlayerbotAI* ai) { return new CastSinisterStrikeAction(ai); }
+            static Action* kidney_shot(PlayerbotAI* ai) { return new CastKidneyShotAction(ai); }
+            static Action* rupture(PlayerbotAI* ai) { return new CastRuptureAction(ai); }
+            static Action* slice_and_dice(PlayerbotAI* ai) { return new CastSliceAndDiceAction(ai); }
+            static Action* eviscerate(PlayerbotAI* ai) { return new CastEviscerateAction(ai); }
+            static Action* vanish(PlayerbotAI* ai) { return new CastVanishAction(ai); }
+            static Action* evasion(PlayerbotAI* ai) { return new CastEvasionAction(ai); }
+            static Action* kick(PlayerbotAI* ai) { return new CastKickAction(ai); }
+            static Action* feint(PlayerbotAI* ai) { return new CastFeintAction(ai); }
+            static Action* backstab(PlayerbotAI* ai) { return new CastBackstabAction(ai); }
+            static Action* expose_armor(PlayerbotAI* ai) { return new CastExposeArmorAction(ai); }
+            static Action* kick_on_enemy_healer(PlayerbotAI* ai) { return new CastKickOnEnemyHealerAction(ai); }
+        };
+    };
+};
+
+RogueAiObjectContext::RogueAiObjectContext(PlayerbotAI* ai) : AiObjectContext(ai)
+{
+    strategyContexts.Add(new ai::rogue::StrategyFactoryInternal());
+    actionContexts.Add(new ai::rogue::AiObjectContextInternal());
+    triggerContexts.Add(new ai::rogue::TriggerFactoryInternal());
+}
diff --git a/src/plugins/playerbot/strategy/rogue/RogueAiObjectContext.h b/src/plugins/playerbot/strategy/rogue/RogueAiObjectContext.h
new file mode 100644
index 0000000..ba34626
--- /dev/null
+++ b/src/plugins/playerbot/strategy/rogue/RogueAiObjectContext.h
@@ -0,0 +1,12 @@
+#pragma once
+
+#include "../AiObjectContext.h"
+
+namespace ai
+{
+    class RogueAiObjectContext : public AiObjectContext
+    {
+    public:
+        RogueAiObjectContext(PlayerbotAI* ai);
+    };
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/rogue/RogueComboActions.h b/src/plugins/playerbot/strategy/rogue/RogueComboActions.h
new file mode 100644
index 0000000..186e2eb
--- /dev/null
+++ b/src/plugins/playerbot/strategy/rogue/RogueComboActions.h
@@ -0,0 +1,45 @@
+#pragma once
+
+namespace ai
+{
+	class CastComboAction : public CastMeleeSpellAction
+	{
+	public:
+	    CastComboAction(PlayerbotAI* ai, string name) : CastMeleeSpellAction(ai, name) {}
+
+	    virtual bool isUseful()
+	    {
+	        return CastMeleeSpellAction::isUseful() && AI_VALUE2(uint8, "combo", "self target") < 5;
+	    }
+	};
+
+	class CastSinisterStrikeAction : public CastComboAction
+	{
+	public:
+		CastSinisterStrikeAction(PlayerbotAI* ai) : CastComboAction(ai, "sinister strike") {}
+	};
+
+    class CastMutilateAction : public CastComboAction
+    {
+    public:
+        CastMutilateAction(PlayerbotAI* ai) : CastComboAction(ai, "mutilate") {}
+    };
+
+    class CastRiposteAction : public CastComboAction
+    {
+    public:
+        CastRiposteAction(PlayerbotAI* ai) : CastComboAction(ai, "riposte") {}
+    };
+
+	class CastGougeAction : public CastComboAction
+	{
+	public:
+		CastGougeAction(PlayerbotAI* ai) : CastComboAction(ai, "gouge") {}
+	};
+
+    class CastBackstabAction : public CastComboAction
+    {
+    public:
+        CastBackstabAction(PlayerbotAI* ai) : CastComboAction(ai, "backstab") {}
+    };
+}
diff --git a/src/plugins/playerbot/strategy/rogue/RogueFinishingActions.h b/src/plugins/playerbot/strategy/rogue/RogueFinishingActions.h
new file mode 100644
index 0000000..91a078b
--- /dev/null
+++ b/src/plugins/playerbot/strategy/rogue/RogueFinishingActions.h
@@ -0,0 +1,35 @@
+#pragma once
+
+namespace ai
+{
+	class CastEviscerateAction : public CastMeleeSpellAction 
+	{ 
+	public: 
+		CastEviscerateAction(PlayerbotAI* ai) : CastMeleeSpellAction(ai, "eviscerate") {} 
+	};
+
+	class CastSliceAndDiceAction : public CastMeleeSpellAction 
+	{ 
+	public: 
+		CastSliceAndDiceAction(PlayerbotAI* ai) : CastMeleeSpellAction(ai, "slice and dice") {} 
+	};
+
+	class CastExposeArmorAction : public CastMeleeSpellAction 
+	{ 
+	public: 
+		CastExposeArmorAction(PlayerbotAI* ai) : CastMeleeSpellAction(ai, "expose armor") {} 
+	};
+
+	class CastRuptureAction : public CastMeleeSpellAction 
+	{ 
+	public: 
+		CastRuptureAction(PlayerbotAI* ai) : CastMeleeSpellAction(ai, "rupture") {} 
+	};
+	
+	class CastKidneyShotAction : public CastMeleeSpellAction 
+	{ 
+	public: 
+		CastKidneyShotAction(PlayerbotAI* ai) : CastMeleeSpellAction(ai, "kidney shot") {} 
+	};
+	
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/rogue/RogueMultipliers.cpp b/src/plugins/playerbot/strategy/rogue/RogueMultipliers.cpp
new file mode 100644
index 0000000..136fd0d
--- /dev/null
+++ b/src/plugins/playerbot/strategy/rogue/RogueMultipliers.cpp
@@ -0,0 +1,6 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "RogueMultipliers.h"
+#include "RogueActions.h"
+
+using namespace ai;
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/rogue/RogueMultipliers.h b/src/plugins/playerbot/strategy/rogue/RogueMultipliers.h
new file mode 100644
index 0000000..7cfbdd4
--- /dev/null
+++ b/src/plugins/playerbot/strategy/rogue/RogueMultipliers.h
@@ -0,0 +1,6 @@
+#pragma once
+
+namespace ai
+{
+   
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/rogue/RogueOpeningActions.h b/src/plugins/playerbot/strategy/rogue/RogueOpeningActions.h
new file mode 100644
index 0000000..35e0fc3
--- /dev/null
+++ b/src/plugins/playerbot/strategy/rogue/RogueOpeningActions.h
@@ -0,0 +1,24 @@
+#pragma once
+
+namespace ai
+{
+	class CastSapAction : public CastMeleeSpellAction
+	{ 
+	public: 
+		CastSapAction(PlayerbotAI* ai) : CastMeleeSpellAction(ai, "sap") {} 
+	};
+
+	class CastGarroteAction : public CastMeleeSpellAction 
+	{ 
+	public: 
+		CastGarroteAction(PlayerbotAI* ai) : CastMeleeSpellAction(ai, "garrote") {} 
+	};
+
+
+	class CastCheapShotAction : public CastMeleeSpellAction 
+	{ 
+	public: 
+		CastCheapShotAction(PlayerbotAI* ai) : CastMeleeSpellAction(ai, "cheap shot") {} 
+	};
+	
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/rogue/RogueTriggers.cpp b/src/plugins/playerbot/strategy/rogue/RogueTriggers.cpp
new file mode 100644
index 0000000..8f57d24
--- /dev/null
+++ b/src/plugins/playerbot/strategy/rogue/RogueTriggers.cpp
@@ -0,0 +1,7 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "RogueTriggers.h"
+#include "RogueActions.h"
+
+using namespace ai;
+
diff --git a/src/plugins/playerbot/strategy/rogue/RogueTriggers.h b/src/plugins/playerbot/strategy/rogue/RogueTriggers.h
new file mode 100644
index 0000000..8d20e12
--- /dev/null
+++ b/src/plugins/playerbot/strategy/rogue/RogueTriggers.h
@@ -0,0 +1,36 @@
+#pragma once
+#include "../triggers/GenericTriggers.h"
+
+namespace ai
+{
+
+    class KickInterruptSpellTrigger : public InterruptSpellTrigger
+    {
+    public:
+        KickInterruptSpellTrigger(PlayerbotAI* ai) : InterruptSpellTrigger(ai, "kick") {}
+    };
+
+    class SliceAndDiceTrigger : public BuffTrigger
+    {
+    public:
+        SliceAndDiceTrigger(PlayerbotAI* ai) : BuffTrigger(ai, "slice and dice") {}
+    };
+
+    class RuptureTrigger : public DebuffTrigger
+    {
+    public:
+        RuptureTrigger(PlayerbotAI* ai) : DebuffTrigger(ai, "rupture") {}
+    };
+
+    class ExposeArmorTrigger : public DebuffTrigger
+    {
+    public:
+        ExposeArmorTrigger(PlayerbotAI* ai) : DebuffTrigger(ai, "expose armor") {}
+    };
+
+    class KickInterruptEnemyHealerSpellTrigger : public InterruptEnemyHealerTrigger
+    {
+    public:
+        KickInterruptEnemyHealerSpellTrigger(PlayerbotAI* ai) : InterruptEnemyHealerTrigger(ai, "kick") {}
+    };
+}
diff --git a/src/plugins/playerbot/strategy/shaman/CasterShamanStrategy.cpp b/src/plugins/playerbot/strategy/shaman/CasterShamanStrategy.cpp
new file mode 100644
index 0000000..aa1b6a5
--- /dev/null
+++ b/src/plugins/playerbot/strategy/shaman/CasterShamanStrategy.cpp
@@ -0,0 +1,75 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "ShamanMultipliers.h"
+#include "CasterShamanStrategy.h"
+
+using namespace ai;
+
+class CasterShamanStrategyActionNodeFactory : public NamedObjectFactory<ActionNode>
+{
+public:
+    CasterShamanStrategyActionNodeFactory()
+    {
+        creators["magma totem"] = &magma_totem;
+    }
+private:
+    static ActionNode* magma_totem(PlayerbotAI* ai)
+    {
+        return new ActionNode ("magma totem",
+            /*P*/ NULL,
+            /*A*/ NULL,
+            /*C*/ NextAction::array(0, new NextAction("fire nova"), NULL));
+    }
+};
+
+CasterShamanStrategy::CasterShamanStrategy(PlayerbotAI* ai) : GenericShamanStrategy(ai)
+{
+    actionNodeFactories.Add(new CasterShamanStrategyActionNodeFactory());
+}
+
+NextAction** CasterShamanStrategy::getDefaultActions()
+{
+    return NextAction::array(0, new NextAction("lightning bolt", 10.0f), NULL);
+}
+
+void CasterShamanStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    GenericShamanStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "enemy out of spell",
+        NextAction::array(0, new NextAction("reach spell", ACTION_NORMAL + 9), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "shaman weapon",
+        NextAction::array(0, new NextAction("flametongue weapon", 23.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "searing totem",
+        NextAction::array(0, new NextAction("searing totem", 19.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "shock",
+        NextAction::array(0, new NextAction("earth shock", 20.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "frost shock snare",
+        NextAction::array(0, new NextAction("frost shock", 21.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "medium aoe",
+        NextAction::array(0, new NextAction("flametongue totem", ACTION_LIGHT_HEAL), NULL)));
+}
+
+void CasterAoeShamanStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    MeleeAoeShamanStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "light aoe",
+        NextAction::array(0, new NextAction("chain lightning", 25.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "medium aoe",
+        NextAction::array(0, new NextAction("thunderstorm", 26.0f), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/shaman/CasterShamanStrategy.h b/src/plugins/playerbot/strategy/shaman/CasterShamanStrategy.h
new file mode 100644
index 0000000..f9444c6
--- /dev/null
+++ b/src/plugins/playerbot/strategy/shaman/CasterShamanStrategy.h
@@ -0,0 +1,29 @@
+#pragma once
+
+#include "GenericShamanStrategy.h"
+#include "MeleeShamanStrategy.h"
+
+namespace ai
+{
+    class CasterShamanStrategy : public GenericShamanStrategy
+    {
+    public:
+        CasterShamanStrategy(PlayerbotAI* ai);
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual NextAction** getDefaultActions();
+        virtual string getName() { return "caster"; }
+        virtual int GetType() { return STRATEGY_TYPE_COMBAT | STRATEGY_TYPE_DPS | STRATEGY_TYPE_RANGED; }
+    };
+
+    class CasterAoeShamanStrategy : public MeleeAoeShamanStrategy
+    {
+    public:
+        CasterAoeShamanStrategy(PlayerbotAI* ai) : MeleeAoeShamanStrategy(ai) {}
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "caster aoe"; }
+    };
+}
diff --git a/src/plugins/playerbot/strategy/shaman/GenericShamanStrategy.cpp b/src/plugins/playerbot/strategy/shaman/GenericShamanStrategy.cpp
new file mode 100644
index 0000000..18a9c3c
--- /dev/null
+++ b/src/plugins/playerbot/strategy/shaman/GenericShamanStrategy.cpp
@@ -0,0 +1,159 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "ShamanMultipliers.h"
+#include "HealShamanStrategy.h"
+
+using namespace ai;
+
+class GenericShamanStrategyActionNodeFactory : public NamedObjectFactory<ActionNode>
+{
+public:
+    GenericShamanStrategyActionNodeFactory()
+    {
+        creators["flametongue weapon"] = &flametongue_weapon;
+        creators["frostbrand weapon"] = &frostbrand_weapon;
+        creators["windfury weapon"] = &windfury_weapon;
+        creators["lesser healing wave"] = &lesser_healing_wave;
+        creators["lesser healing wave on party"] = &lesser_healing_wave_on_party;
+        creators["chain heal"] = &chain_heal;
+        creators["riptide"] = &riptide;
+        creators["chain heal on party"] = &chain_heal_on_party;
+        creators["riptide on party"] = &riptide_on_party;
+        creators["earth shock"] = &earth_shock;
+    }
+private:
+    static ActionNode* earth_shock(PlayerbotAI* ai)
+    {
+        return new ActionNode ("earth shock",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("flame shock"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* flametongue_weapon(PlayerbotAI* ai)
+    {
+        return new ActionNode ("flametongue weapon",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("frostbrand weapon"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* frostbrand_weapon(PlayerbotAI* ai)
+    {
+        return new ActionNode ("frostbrand weapon",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("rockbiter weapon"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* windfury_weapon(PlayerbotAI* ai)
+    {
+        return new ActionNode ("windfury weapon",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("rockbiter weapon"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* lesser_healing_wave(PlayerbotAI* ai)
+    {
+        return new ActionNode ("lesser healing wave",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("healing wave"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* lesser_healing_wave_on_party(PlayerbotAI* ai)
+    {
+        return new ActionNode ("lesser healing wave on party",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("healing wave on party"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* chain_heal(PlayerbotAI* ai)
+    {
+        return new ActionNode ("chain heal",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("lesser healing wave"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* riptide(PlayerbotAI* ai)
+    {
+        return new ActionNode ("riptide",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("healing wave"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* chain_heal_on_party(PlayerbotAI* ai)
+    {
+        return new ActionNode ("chain heal on party",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("lesser healing wave on party"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* riptide_on_party(PlayerbotAI* ai)
+    {
+        return new ActionNode ("riptide on party",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("healing wave on party"), NULL),
+            /*C*/ NULL);
+    }
+};
+
+GenericShamanStrategy::GenericShamanStrategy(PlayerbotAI* ai) : CombatStrategy(ai)
+{
+    actionNodeFactories.Add(new GenericShamanStrategyActionNodeFactory());
+}
+
+void GenericShamanStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    CombatStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "wind shear",
+        NextAction::array(0, new NextAction("wind shear", 23.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "wind shear on enemy healer",
+        NextAction::array(0, new NextAction("wind shear on enemy healer", 23.0f), NULL)));
+
+	triggers.push_back(new TriggerNode(
+        "purge",
+		NextAction::array(0, new NextAction("purge", 10.0f), NULL)));
+
+	triggers.push_back(new TriggerNode(
+        "party member medium health",
+		NextAction::array(0, new NextAction("lesser healing wave on party", 25.0f), NULL)));
+
+	triggers.push_back(new TriggerNode(
+        "party member low health",
+		NextAction::array(0, new NextAction("riptide on party", 25.0f), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"medium aoe heal",
+		NextAction::array(0, new NextAction("chain heal", 27.0f), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"medium health",
+		NextAction::array(0, new NextAction("lesser healing wave", 26.0f), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"low health",
+		NextAction::array(0, new NextAction("riptide", 26.0f), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"heroism",
+		NextAction::array(0, new NextAction("heroism", 31.0f), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"bloodlust",
+		NextAction::array(0, new NextAction("bloodlust", 30.0f), NULL)));
+}
+
+void ShamanBuffDpsStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "lightning shield",
+        NextAction::array(0, new NextAction("lightning shield", 22.0f), NULL)));
+}
+
+void ShamanBuffManaStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "water shield",
+        NextAction::array(0, new NextAction("water shield", 22.0f), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/shaman/GenericShamanStrategy.h b/src/plugins/playerbot/strategy/shaman/GenericShamanStrategy.h
new file mode 100644
index 0000000..fdac460
--- /dev/null
+++ b/src/plugins/playerbot/strategy/shaman/GenericShamanStrategy.h
@@ -0,0 +1,39 @@
+#pragma once
+
+#include "../Strategy.h"
+#include "../generic/CombatStrategy.h"
+
+namespace ai
+{
+    class GenericShamanStrategy : public CombatStrategy
+    {
+    public:
+        GenericShamanStrategy(PlayerbotAI* ai);
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+
+    };
+
+    class ShamanBuffDpsStrategy : public Strategy
+    {
+    public:
+        ShamanBuffDpsStrategy(PlayerbotAI* ai) : Strategy(ai) {}
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "bdps"; }
+
+    };
+
+    class ShamanBuffManaStrategy : public Strategy
+    {
+    public:
+        ShamanBuffManaStrategy(PlayerbotAI* ai) : Strategy(ai) {}
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "bmana"; }
+
+    };
+}
diff --git a/src/plugins/playerbot/strategy/shaman/HealShamanStrategy.cpp b/src/plugins/playerbot/strategy/shaman/HealShamanStrategy.cpp
new file mode 100644
index 0000000..0d05326
--- /dev/null
+++ b/src/plugins/playerbot/strategy/shaman/HealShamanStrategy.cpp
@@ -0,0 +1,82 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "ShamanMultipliers.h"
+#include "HealShamanStrategy.h"
+
+using namespace ai;
+
+class HealShamanStrategyActionNodeFactory : public NamedObjectFactory<ActionNode>
+{
+public:
+    HealShamanStrategyActionNodeFactory()
+    {
+        creators["earthliving weapon"] = &earthliving_weapon;
+        creators["mana tide totem"] = &mana_tide_totem;
+    }
+private:
+    static ActionNode* earthliving_weapon(PlayerbotAI* ai)
+    {
+        return new ActionNode ("earthliving weapon",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("flametongue weapon"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* mana_tide_totem(PlayerbotAI* ai)
+    {
+        return new ActionNode ("mana tide totem",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("mana potion"), NULL),
+            /*C*/ NULL);
+    }
+
+};
+
+HealShamanStrategy::HealShamanStrategy(PlayerbotAI* ai) : GenericShamanStrategy(ai)
+{
+    actionNodeFactories.Add(new HealShamanStrategyActionNodeFactory());
+}
+
+void HealShamanStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    GenericShamanStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "enemy out of spell",
+        NextAction::array(0, new NextAction("reach spell", ACTION_NORMAL + 9), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "shaman weapon",
+        NextAction::array(0, new NextAction("earthliving weapon", 22.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "low mana",
+        NextAction::array(0, new NextAction("mana tide totem", ACTION_EMERGENCY + 5), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "cleanse spirit poison",
+        NextAction::array(0, new NextAction("cleanse spirit", 24.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "cleanse spirit curse",
+        NextAction::array(0, new NextAction("cleanse spirit", 24.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "cleanse spirit disease",
+        NextAction::array(0, new NextAction("cleanse spirit", 24.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "party member cleanse spirit poison",
+        NextAction::array(0, new NextAction("cleanse spirit poison on party", 23.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "party member cleanse spirit curse",
+        NextAction::array(0, new NextAction("cleanse spirit curse on party", 23.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "party member cleanse spirit disease",
+        NextAction::array(0, new NextAction("cleanse spirit disease on party", 23.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "medium aoe",
+        NextAction::array(0, new NextAction("healing stream totem", ACTION_LIGHT_HEAL), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/shaman/HealShamanStrategy.h b/src/plugins/playerbot/strategy/shaman/HealShamanStrategy.h
new file mode 100644
index 0000000..e5d4ff1
--- /dev/null
+++ b/src/plugins/playerbot/strategy/shaman/HealShamanStrategy.h
@@ -0,0 +1,17 @@
+#pragma once
+
+#include "GenericShamanStrategy.h"
+
+namespace ai
+{
+    class HealShamanStrategy : public GenericShamanStrategy
+    {
+    public:
+        HealShamanStrategy(PlayerbotAI* ai);
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "heal"; }
+		virtual int GetType() { return STRATEGY_TYPE_HEAL; }
+    };
+}
diff --git a/src/plugins/playerbot/strategy/shaman/MeleeShamanStrategy.cpp b/src/plugins/playerbot/strategy/shaman/MeleeShamanStrategy.cpp
new file mode 100644
index 0000000..d9563aa
--- /dev/null
+++ b/src/plugins/playerbot/strategy/shaman/MeleeShamanStrategy.cpp
@@ -0,0 +1,93 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "ShamanMultipliers.h"
+#include "MeleeShamanStrategy.h"
+
+using namespace ai;
+
+class MeleeShamanStrategyActionNodeFactory : public NamedObjectFactory<ActionNode>
+{
+public:
+    MeleeShamanStrategyActionNodeFactory()
+    {
+        creators["stormstrike"] = &stormstrike;
+        creators["lava lash"] = &lava_lash;
+        creators["magma totem"] = &magma_totem;
+    }
+private:
+    static ActionNode* stormstrike(PlayerbotAI* ai)
+    {
+        return new ActionNode ("stormstrike",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("lava lash"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* lava_lash(PlayerbotAI* ai)
+    {
+        return new ActionNode ("lava lash",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("melee"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* magma_totem(PlayerbotAI* ai)
+    {
+        return new ActionNode ("magma totem",
+            /*P*/ NULL,
+            /*A*/ NULL,
+            /*C*/ NextAction::array(0, new NextAction("fire nova"), NULL));
+    }
+};
+
+MeleeShamanStrategy::MeleeShamanStrategy(PlayerbotAI* ai) : GenericShamanStrategy(ai)
+{
+    actionNodeFactories.Add(new MeleeShamanStrategyActionNodeFactory());
+}
+
+NextAction** MeleeShamanStrategy::getDefaultActions()
+{
+    return NextAction::array(0, new NextAction("stormstrike", 10.0f), NULL);
+}
+
+void MeleeShamanStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    GenericShamanStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "shaman weapon",
+        NextAction::array(0, new NextAction("windfury weapon", 22.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "searing totem",
+        NextAction::array(0, new NextAction("reach melee", 22.0f), new NextAction("searing totem", 22.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "shock",
+        NextAction::array(0, new NextAction("earth shock", 20.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "not facing target",
+        NextAction::array(0, new NextAction("set facing", ACTION_NORMAL + 7), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "enemy too close for melee",
+        NextAction::array(0, new NextAction("move out of enemy contact", ACTION_NORMAL + 8), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "medium aoe",
+        NextAction::array(0, new NextAction("strength of earth totem", ACTION_LIGHT_HEAL), NULL)));
+}
+
+void MeleeAoeShamanStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "enemy out of melee",
+        NextAction::array(0, new NextAction("reach melee", ACTION_NORMAL + 8), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "magma totem",
+        NextAction::array(0, new NextAction("magma totem", 26.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "medium aoe",
+        NextAction::array(0, new NextAction("fire nova", 25.0f), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/shaman/MeleeShamanStrategy.h b/src/plugins/playerbot/strategy/shaman/MeleeShamanStrategy.h
new file mode 100644
index 0000000..6c18fb6
--- /dev/null
+++ b/src/plugins/playerbot/strategy/shaman/MeleeShamanStrategy.h
@@ -0,0 +1,28 @@
+#pragma once
+
+#include "GenericShamanStrategy.h"
+
+namespace ai
+{
+    class MeleeShamanStrategy : public GenericShamanStrategy
+    {
+    public:
+        MeleeShamanStrategy(PlayerbotAI* ai);
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual NextAction** getDefaultActions();
+        virtual string getName() { return "melee"; }
+        virtual int GetType() { return STRATEGY_TYPE_COMBAT | STRATEGY_TYPE_DPS | STRATEGY_TYPE_MELEE; }
+    };
+
+    class MeleeAoeShamanStrategy : public CombatStrategy
+    {
+    public:
+        MeleeAoeShamanStrategy(PlayerbotAI* ai) : CombatStrategy(ai) {}
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "melee aoe"; }
+    };
+}
diff --git a/src/plugins/playerbot/strategy/shaman/ShamanActions.cpp b/src/plugins/playerbot/strategy/shaman/ShamanActions.cpp
new file mode 100644
index 0000000..ab8b070
--- /dev/null
+++ b/src/plugins/playerbot/strategy/shaman/ShamanActions.cpp
@@ -0,0 +1,6 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "ShamanActions.h"
+
+using namespace ai;
+
diff --git a/src/plugins/playerbot/strategy/shaman/ShamanActions.h b/src/plugins/playerbot/strategy/shaman/ShamanActions.h
new file mode 100644
index 0000000..478d08a
--- /dev/null
+++ b/src/plugins/playerbot/strategy/shaman/ShamanActions.h
@@ -0,0 +1,304 @@
+#pragma once
+
+#include "../actions/GenericActions.h"
+
+namespace ai
+{
+    class CastLesserHealingWaveAction : public CastHealingSpellAction {
+    public:
+        CastLesserHealingWaveAction(PlayerbotAI* ai) : CastHealingSpellAction(ai, "lesser healing wave") {}
+    };
+
+    class CastLesserHealingWaveOnPartyAction : public HealPartyMemberAction
+    {
+    public:
+        CastLesserHealingWaveOnPartyAction(PlayerbotAI* ai) : HealPartyMemberAction(ai, "lesser healing wave") {}
+    };
+
+
+    class CastHealingWaveAction : public CastHealingSpellAction {
+    public:
+        CastHealingWaveAction(PlayerbotAI* ai) : CastHealingSpellAction(ai, "healing wave") {}
+    };
+
+    class CastHealingWaveOnPartyAction : public HealPartyMemberAction
+    {
+    public:
+        CastHealingWaveOnPartyAction(PlayerbotAI* ai) : HealPartyMemberAction(ai, "healing wave") {}
+    };
+
+    class CastChainHealAction : public CastAoeHealSpellAction {
+    public:
+        CastChainHealAction(PlayerbotAI* ai) : CastAoeHealSpellAction(ai, "chain heal") {}
+    };
+
+    class CastRiptideAction : public CastHealingSpellAction {
+    public:
+        CastRiptideAction(PlayerbotAI* ai) : CastHealingSpellAction(ai, "riptide") {}
+    };
+
+    class CastRiptideOnPartyAction : public HealPartyMemberAction
+    {
+    public:
+        CastRiptideOnPartyAction(PlayerbotAI* ai) : HealPartyMemberAction(ai, "riptide") {}
+    };
+
+
+    class CastEarthShieldAction : public CastBuffSpellAction {
+    public:
+        CastEarthShieldAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "earth shield") {}
+    };
+
+    class CastEarthShieldOnPartyAction : public BuffOnPartyAction
+    {
+    public:
+        CastEarthShieldOnPartyAction(PlayerbotAI* ai) : BuffOnPartyAction(ai, "earth shield") {}
+    };
+
+    class CastWaterShieldAction : public CastBuffSpellAction {
+    public:
+        CastWaterShieldAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "water shield") {}
+    };
+
+	class CastLightningShieldAction : public CastBuffSpellAction {
+	public:
+		CastLightningShieldAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "lightning shield") {}
+	};
+
+    class CastEarthlivingWeaponAction : public CastEnchantItemAction {
+    public:
+        CastEarthlivingWeaponAction(PlayerbotAI* ai) : CastEnchantItemAction(ai, "earthliving weapon") {}
+    };
+
+    class CastRockbiterWeaponAction : public CastEnchantItemAction {
+    public:
+        CastRockbiterWeaponAction(PlayerbotAI* ai) : CastEnchantItemAction(ai, "rockbiter weapon") {}
+    };
+
+    class CastFlametongueWeaponAction : public CastEnchantItemAction {
+    public:
+        CastFlametongueWeaponAction(PlayerbotAI* ai) : CastEnchantItemAction(ai, "flametongue weapon") {}
+    };
+
+    class CastFrostbrandWeaponAction : public CastEnchantItemAction {
+    public:
+        CastFrostbrandWeaponAction(PlayerbotAI* ai) : CastEnchantItemAction(ai, "frostbrand weapon") {}
+    };
+
+    class CastWindfuryWeaponAction : public CastEnchantItemAction {
+    public:
+        CastWindfuryWeaponAction(PlayerbotAI* ai) : CastEnchantItemAction(ai, "windfury weapon") {}
+    };
+
+    class CastTotemAction : public CastBuffSpellAction
+    {
+    public:
+        CastTotemAction(PlayerbotAI* ai, string spell) : CastBuffSpellAction(ai, spell) {}
+        virtual bool isUseful() { return CastBuffSpellAction::isUseful() && !AI_VALUE2(bool, "has totem", name); }
+    };
+
+    class CastStoneskinTotemAction : public CastTotemAction
+    {
+    public:
+        CastStoneskinTotemAction(PlayerbotAI* ai) : CastTotemAction(ai, "stoneskin totem") {}
+    };
+
+    class CastEarthbindTotemAction : public CastTotemAction
+    {
+    public:
+        CastEarthbindTotemAction(PlayerbotAI* ai) : CastTotemAction(ai, "earthbind totem") {}
+    };
+
+    class CastStrengthOfEarthTotemAction : public CastTotemAction
+    {
+    public:
+        CastStrengthOfEarthTotemAction(PlayerbotAI* ai) : CastTotemAction(ai, "strength of earth totem") {}
+    };
+
+    class CastManaSpringTotemAction : public CastTotemAction
+    {
+    public:
+        CastManaSpringTotemAction(PlayerbotAI* ai) : CastTotemAction(ai, "mana spring totem") {}
+    };
+
+	class CastManaTideTotemAction : public CastTotemAction
+	{
+	public:
+		CastManaTideTotemAction(PlayerbotAI* ai) : CastTotemAction(ai, "mana tide totem") {}
+		virtual string GetTargetName() { return "self target"; }
+	};
+
+	class CastHealingStreamTotemAction : public CastTotemAction
+	{
+	public:
+		CastHealingStreamTotemAction(PlayerbotAI* ai) : CastTotemAction(ai, "healing stream totem") {}
+	};
+
+    class CastCleansingTotemAction : public CastTotemAction
+    {
+    public:
+        CastCleansingTotemAction(PlayerbotAI* ai) : CastTotemAction(ai, "cleansing totem") {}
+    };
+
+    class CastFlametongueTotemAction : public CastTotemAction
+    {
+    public:
+        CastFlametongueTotemAction(PlayerbotAI* ai) : CastTotemAction(ai, "flametongue totem") {}
+    };
+
+    class CastWindfuryTotemAction : public CastTotemAction
+    {
+    public:
+        CastWindfuryTotemAction(PlayerbotAI* ai) : CastTotemAction(ai, "windfury totem") {}
+    };
+
+    class CastSearingTotemAction : public CastTotemAction
+    {
+    public:
+        CastSearingTotemAction(PlayerbotAI* ai) : CastTotemAction(ai, "searing totem") {}
+        virtual string GetTargetName() { return "self target"; }
+    };
+
+    class CastMagmaTotemAction : public CastMeleeSpellAction
+    {
+    public:
+        CastMagmaTotemAction(PlayerbotAI* ai) : CastMeleeSpellAction(ai, "magma totem") {}
+        virtual string GetTargetName() { return "self target"; }
+        virtual bool isUseful() { return CastMeleeSpellAction::isUseful() && !AI_VALUE2(bool, "has totem", name); }
+    };
+
+    class CastFireNovaAction : public CastSpellAction {
+    public:
+        CastFireNovaAction(PlayerbotAI* ai) : CastSpellAction(ai, "fire nova") {}
+    };
+
+    class CastWindShearAction : public CastSpellAction {
+    public:
+        CastWindShearAction(PlayerbotAI* ai) : CastSpellAction(ai, "wind shear") {}
+    };
+
+	class CastAncestralSpiritAction : public ResurrectPartyMemberAction
+	{
+	public:
+		CastAncestralSpiritAction(PlayerbotAI* ai) : ResurrectPartyMemberAction(ai, "ancestral spirit") {}
+	};
+
+
+	class CastPurgeAction : public CastSpellAction
+	{
+	public:
+		CastPurgeAction(PlayerbotAI* ai) : CastSpellAction(ai, "purge") {}
+	};
+
+	class CastStormstrikeAction : public CastMeleeSpellAction {
+	public:
+		CastStormstrikeAction(PlayerbotAI* ai) : CastMeleeSpellAction(ai, "stormstrike") {}
+	};
+
+	class CastLavaLashAction : public CastMeleeSpellAction {
+	public:
+		CastLavaLashAction(PlayerbotAI* ai) : CastMeleeSpellAction(ai, "lava lash") {}
+	};
+
+    class CastWaterBreathingAction : public CastBuffSpellAction {
+    public:
+        CastWaterBreathingAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "water breathing") {}
+    };
+
+    class CastWaterWalkingAction : public CastBuffSpellAction {
+    public:
+        CastWaterWalkingAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "water walking") {}
+    };
+
+    class CastWaterBreathingOnPartyAction : public BuffOnPartyAction {
+    public:
+        CastWaterBreathingOnPartyAction(PlayerbotAI* ai) : BuffOnPartyAction(ai, "water breathing") {}
+    };
+
+    class CastWaterWalkingOnPartyAction : public BuffOnPartyAction {
+    public:
+        CastWaterWalkingOnPartyAction(PlayerbotAI* ai) : BuffOnPartyAction(ai, "water walking") {}
+    };
+
+
+    class CastCleanseSpiritAction : public CastCureSpellAction {
+    public:
+        CastCleanseSpiritAction(PlayerbotAI* ai) : CastCureSpellAction(ai, "cleanse spirit") {}
+    };
+
+    class CastCleanseSpiritPoisonOnPartyAction : public CurePartyMemberAction
+    {
+    public:
+        CastCleanseSpiritPoisonOnPartyAction(PlayerbotAI* ai) : CurePartyMemberAction(ai, "cleanse spirit", DISPEL_POISON) {}
+
+        virtual string getName() { return "cleanse spirit poison on party"; }
+    };
+    class CastCleanseSpiritCurseOnPartyAction : public CurePartyMemberAction
+    {
+    public:
+        CastCleanseSpiritCurseOnPartyAction(PlayerbotAI* ai) : CurePartyMemberAction(ai, "cleanse spirit", DISPEL_CURSE) {}
+
+        virtual string getName() { return "cleanse spirit curse on party"; }
+    };
+    class CastCleanseSpiritDiseaseOnPartyAction : public CurePartyMemberAction
+    {
+    public:
+        CastCleanseSpiritDiseaseOnPartyAction(PlayerbotAI* ai) : CurePartyMemberAction(ai, "cleanse spirit", DISPEL_DISEASE) {}
+
+        virtual string getName() { return "cleanse spirit disease on party"; }
+    };
+
+    class CastFlameShockAction : public CastDebuffSpellAction
+    {
+    public:
+        CastFlameShockAction(PlayerbotAI* ai) : CastDebuffSpellAction(ai, "flame shock") {}
+    };
+
+    class CastEarthShockAction : public CastDebuffSpellAction
+    {
+    public:
+        CastEarthShockAction(PlayerbotAI* ai) : CastDebuffSpellAction(ai, "earth shock") {}
+    };
+
+    class CastFrostShockAction : public CastDebuffSpellAction
+    {
+    public:
+        CastFrostShockAction(PlayerbotAI* ai) : CastDebuffSpellAction(ai, "frost shock") {}
+    };
+
+    class CastChainLightningAction : public CastSpellAction
+    {
+    public:
+        CastChainLightningAction(PlayerbotAI* ai) : CastSpellAction(ai, "chain lightning") {}
+    };
+
+    class CastLightningBoltAction : public CastSpellAction
+    {
+    public:
+        CastLightningBoltAction(PlayerbotAI* ai) : CastSpellAction(ai, "lightning bolt") {}
+    };
+
+    class CastThunderstormAction : public CastMeleeSpellAction
+    {
+    public:
+        CastThunderstormAction(PlayerbotAI* ai) : CastMeleeSpellAction(ai, "thunderstorm") {}
+    };
+
+    class CastHeroismAction : public CastBuffSpellAction
+    {
+    public:
+        CastHeroismAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "heroism") {}
+    };
+
+    class CastBloodlustAction : public CastBuffSpellAction
+    {
+    public:
+        CastBloodlustAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "bloodlust") {}
+    };
+
+    class CastWindShearOnEnemyHealerAction : public CastSpellOnEnemyHealerAction
+    {
+    public:
+        CastWindShearOnEnemyHealerAction(PlayerbotAI* ai) : CastSpellOnEnemyHealerAction(ai, "wind shear") {}
+    };
+}
diff --git a/src/plugins/playerbot/strategy/shaman/ShamanAiObjectContext.cpp b/src/plugins/playerbot/strategy/shaman/ShamanAiObjectContext.cpp
new file mode 100644
index 0000000..cbd8ec3
--- /dev/null
+++ b/src/plugins/playerbot/strategy/shaman/ShamanAiObjectContext.cpp
@@ -0,0 +1,268 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "ShamanActions.h"
+#include "ShamanAiObjectContext.h"
+#include "ShamanNonCombatStrategy.h"
+#include "HealShamanStrategy.h"
+#include "MeleeShamanStrategy.h"
+#include "ShamanTriggers.h"
+#include "../NamedObjectContext.h"
+#include "TotemsShamanStrategy.h"
+#include "CasterShamanStrategy.h"
+
+using namespace ai;
+
+
+
+namespace ai
+{
+    namespace shaman
+    {
+        using namespace ai;
+
+        class StrategyFactoryInternal : public NamedObjectContext<Strategy>
+        {
+        public:
+            StrategyFactoryInternal()
+            {
+                creators["nc"] = &shaman::StrategyFactoryInternal::nc;
+                creators["totems"] = &shaman::StrategyFactoryInternal::totems;
+                creators["melee aoe"] = &shaman::StrategyFactoryInternal::melee_aoe;
+                creators["caster aoe"] = &shaman::StrategyFactoryInternal::caster_aoe;
+            }
+
+        private:
+            static Strategy* nc(PlayerbotAI* ai) { return new ShamanNonCombatStrategy(ai); }
+            static Strategy* totems(PlayerbotAI* ai) { return new TotemsShamanStrategy(ai); }
+            static Strategy* melee_aoe(PlayerbotAI* ai) { return new MeleeAoeShamanStrategy(ai); }
+            static Strategy* caster_aoe(PlayerbotAI* ai) { return new CasterAoeShamanStrategy(ai); }
+        };
+
+        class BuffStrategyFactoryInternal : public NamedObjectContext<Strategy>
+        {
+        public:
+            BuffStrategyFactoryInternal() : NamedObjectContext<Strategy>(false, true)
+            {
+                creators["bmana"] = &shaman::BuffStrategyFactoryInternal::bmana;
+                creators["bdps"] = &shaman::BuffStrategyFactoryInternal::bdps;
+            }
+
+        private:
+            static Strategy* bmana(PlayerbotAI* ai) { return new ShamanBuffManaStrategy(ai); }
+            static Strategy* bdps(PlayerbotAI* ai) { return new ShamanBuffDpsStrategy(ai); }
+        };
+
+        class CombatStrategyFactoryInternal : public NamedObjectContext<Strategy>
+        {
+        public:
+            CombatStrategyFactoryInternal() : NamedObjectContext<Strategy>(false, true)
+            {
+                creators["heal"] = &shaman::CombatStrategyFactoryInternal::heal;
+                creators["melee"] = &shaman::CombatStrategyFactoryInternal::dps;
+                creators["dps"] = &shaman::CombatStrategyFactoryInternal::dps;
+                creators["caster"] = &shaman::CombatStrategyFactoryInternal::caster;
+            }
+
+        private:
+            static Strategy* heal(PlayerbotAI* ai) { return new HealShamanStrategy(ai); }
+            static Strategy* dps(PlayerbotAI* ai) { return new MeleeShamanStrategy(ai); }
+            static Strategy* caster(PlayerbotAI* ai) { return new CasterShamanStrategy(ai); }
+        };
+    };
+};
+
+namespace ai
+{
+    namespace shaman
+    {
+        using namespace ai;
+
+        class TriggerFactoryInternal : public NamedObjectContext<Trigger>
+        {
+        public:
+            TriggerFactoryInternal()
+            {
+                creators["windfury totem"] = &TriggerFactoryInternal::windfury_totem;
+                creators["mana spring totem"] = &TriggerFactoryInternal::mana_spring_totem;
+                creators["flametongue totem"] = &TriggerFactoryInternal::flametongue_totem;
+                creators["strength of earth totem"] = &TriggerFactoryInternal::strength_of_earth_totem;
+                creators["magma totem"] = &TriggerFactoryInternal::magma_totem;
+                creators["searing totem"] = &TriggerFactoryInternal::searing_totem;
+                creators["wind shear"] = &TriggerFactoryInternal::wind_shear;
+                creators["purge"] = &TriggerFactoryInternal::purge;
+                creators["shaman weapon"] = &TriggerFactoryInternal::shaman_weapon;
+                creators["water shield"] = &TriggerFactoryInternal::water_shield;
+                creators["lightning shield"] = &TriggerFactoryInternal::lightning_shield;
+                creators["water breathing"] = &TriggerFactoryInternal::water_breathing;
+                creators["water walking"] = &TriggerFactoryInternal::water_walking;
+                creators["water breathing on party"] = &TriggerFactoryInternal::water_breathing_on_party;
+                creators["water walking on party"] = &TriggerFactoryInternal::water_walking_on_party;
+                creators["cleanse spirit poison"] = &TriggerFactoryInternal::cleanse_poison;
+                creators["cleanse spirit curse"] = &TriggerFactoryInternal::cleanse_curse;
+                creators["cleanse spirit disease"] = &TriggerFactoryInternal::cleanse_disease;
+                creators["party member cleanse spirit poison"] = &TriggerFactoryInternal::party_member_cleanse_poison;
+                creators["party member cleanse spirit curse"] = &TriggerFactoryInternal::party_member_cleanse_curse;
+                creators["party member cleanse spirit disease"] = &TriggerFactoryInternal::party_member_cleanse_disease;
+                creators["shock"] = &TriggerFactoryInternal::shock;
+                creators["frost shock snare"] = &TriggerFactoryInternal::frost_shock_snare;
+                creators["heroism"] = &TriggerFactoryInternal::heroism;
+                creators["bloodlust"] = &TriggerFactoryInternal::bloodlust;
+                creators["maelstrom weapon"] = &TriggerFactoryInternal::maelstrom_weapon;
+                creators["wind shear on enemy healer"] = &TriggerFactoryInternal::wind_shear_on_enemy_healer;
+            }
+
+        private:
+            static Trigger* maelstrom_weapon(PlayerbotAI* ai) { return new MaelstromWeaponTrigger(ai); }
+            static Trigger* heroism(PlayerbotAI* ai) { return new HeroismTrigger(ai); }
+            static Trigger* bloodlust(PlayerbotAI* ai) { return new BloodlustTrigger(ai); }
+            static Trigger* party_member_cleanse_disease(PlayerbotAI* ai) { return new PartyMemberCleanseSpiritDiseaseTrigger(ai); }
+            static Trigger* party_member_cleanse_curse(PlayerbotAI* ai) { return new PartyMemberCleanseSpiritCurseTrigger(ai); }
+            static Trigger* party_member_cleanse_poison(PlayerbotAI* ai) { return new PartyMemberCleanseSpiritPoisonTrigger(ai); }
+            static Trigger* cleanse_disease(PlayerbotAI* ai) { return new CleanseSpiritDiseaseTrigger(ai); }
+            static Trigger* cleanse_curse(PlayerbotAI* ai) { return new CleanseSpiritCurseTrigger(ai); }
+            static Trigger* cleanse_poison(PlayerbotAI* ai) { return new CleanseSpiritPoisonTrigger(ai); }
+            static Trigger* water_breathing(PlayerbotAI* ai) { return new WaterBreathingTrigger(ai); }
+            static Trigger* water_walking(PlayerbotAI* ai) { return new WaterWalkingTrigger(ai); }
+            static Trigger* water_breathing_on_party(PlayerbotAI* ai) { return new WaterBreathingOnPartyTrigger(ai); }
+            static Trigger* water_walking_on_party(PlayerbotAI* ai) { return new WaterWalkingOnPartyTrigger(ai); }
+            static Trigger* windfury_totem(PlayerbotAI* ai) { return new WindfuryTotemTrigger(ai); }
+            static Trigger* mana_spring_totem(PlayerbotAI* ai) { return new ManaSpringTotemTrigger(ai); }
+            static Trigger* flametongue_totem(PlayerbotAI* ai) { return new FlametongueTotemTrigger(ai); }
+            static Trigger* strength_of_earth_totem(PlayerbotAI* ai) { return new StrengthOfEarthTotemTrigger(ai); }
+            static Trigger* magma_totem(PlayerbotAI* ai) { return new MagmaTotemTrigger(ai); }
+            static Trigger* searing_totem(PlayerbotAI* ai) { return new SearingTotemTrigger(ai); }
+            static Trigger* wind_shear(PlayerbotAI* ai) { return new WindShearInterruptSpellTrigger(ai); }
+            static Trigger* purge(PlayerbotAI* ai) { return new PurgeTrigger(ai); }
+            static Trigger* shaman_weapon(PlayerbotAI* ai) { return new ShamanWeaponTrigger(ai); }
+            static Trigger* water_shield(PlayerbotAI* ai) { return new WaterShieldTrigger(ai); }
+            static Trigger* lightning_shield(PlayerbotAI* ai) { return new LightningShieldTrigger(ai); }
+            static Trigger* shock(PlayerbotAI* ai) { return new ShockTrigger(ai); }
+            static Trigger* frost_shock_snare(PlayerbotAI* ai) { return new FrostShockSnareTrigger(ai); }
+            static Trigger* wind_shear_on_enemy_healer(PlayerbotAI* ai) { return new WindShearInterruptEnemyHealerSpellTrigger(ai); }
+        };
+    };
+};
+
+
+namespace ai
+{
+    namespace shaman
+    {
+        using namespace ai;
+
+        class AiObjectContextInternal : public NamedObjectContext<Action>
+        {
+        public:
+            AiObjectContextInternal()
+            {
+                creators["water shield"] = &AiObjectContextInternal::water_shield;
+                creators["lightning shield"] = &AiObjectContextInternal::lightning_shield;
+                creators["strength of earth totem"] = &AiObjectContextInternal::strength_of_earth_totem;
+                creators["flametongue totem"] = &AiObjectContextInternal::flametongue_totem;
+                creators["searing totem"] = &AiObjectContextInternal::searing_totem;
+                creators["magma totem"] = &AiObjectContextInternal::magma_totem;
+                creators["windfury totem"] = &AiObjectContextInternal::windfury_totem;
+                creators["mana spring totem"] = &AiObjectContextInternal::mana_spring_totem;
+                creators["mana tide totem"] = &AiObjectContextInternal::mana_tide_totem;
+                creators["healing stream totem"] = &AiObjectContextInternal::healing_stream_totem;
+                creators["wind shear"] = &AiObjectContextInternal::wind_shear;
+                creators["wind shear on enemy healer"] = &AiObjectContextInternal::wind_shear_on_enemy_healer;
+                creators["rockbiter weapon"] = &AiObjectContextInternal::rockbiter_weapon;
+                creators["flametongue weapon"] = &AiObjectContextInternal::flametongue_weapon;
+                creators["frostbrand weapon"] = &AiObjectContextInternal::frostbrand_weapon;
+                creators["windfury weapon"] = &AiObjectContextInternal::windfury_weapon;
+                creators["earthliving weapon"] = &AiObjectContextInternal::earthliving_weapon;
+                creators["purge"] = &AiObjectContextInternal::purge;
+                creators["healing wave"] = &AiObjectContextInternal::healing_wave;
+                creators["lesser healing wave"] = &AiObjectContextInternal::lesser_healing_wave;
+                creators["healing wave on party"] = &AiObjectContextInternal::healing_wave_on_party;
+                creators["lesser healing wave on party"] = &AiObjectContextInternal::lesser_healing_wave_on_party;
+                creators["earth shield"] = &AiObjectContextInternal::earth_shield;
+                creators["earth shield on party"] = &AiObjectContextInternal::earth_shield_on_party;
+                creators["chain heal"] = &AiObjectContextInternal::chain_heal;
+                creators["riptide"] = &AiObjectContextInternal::riptide;
+                creators["riptide on party"] = &AiObjectContextInternal::riptide_on_party;
+                creators["stormstrike"] = &AiObjectContextInternal::stormstrike;
+                creators["lava lash"] = &AiObjectContextInternal::lava_lash;
+                creators["fire nova"] = &AiObjectContextInternal::fire_nova;
+                creators["ancestral spirit"] = &AiObjectContextInternal::ancestral_spirit;
+                creators["water walking"] = &AiObjectContextInternal::water_walking;
+                creators["water breathing"] = &AiObjectContextInternal::water_breathing;
+                creators["water walking on party"] = &AiObjectContextInternal::water_walking_on_party;
+                creators["water breathing on party"] = &AiObjectContextInternal::water_breathing_on_party;
+                creators["cleanse spirit"] = &AiObjectContextInternal::cleanse_spirit;
+                creators["cleanse spirit poison on party"] = &AiObjectContextInternal::cleanse_spirit_poison_on_party;
+                creators["cleanse spirit disease on party"] = &AiObjectContextInternal::cleanse_spirit_disease_on_party;
+                creators["cleanse spirit curse on party"] = &AiObjectContextInternal::cleanse_spirit_curse_on_party;
+                creators["flame shock"] = &AiObjectContextInternal::flame_shock;
+                creators["earth shock"] = &AiObjectContextInternal::earth_shock;
+                creators["frost shock"] = &AiObjectContextInternal::frost_shock;
+                creators["chain lightning"] = &AiObjectContextInternal::chain_lightning;
+                creators["lightning bolt"] = &AiObjectContextInternal::lightning_bolt;
+                creators["thunderstorm"] = &AiObjectContextInternal::thunderstorm;
+                creators["heroism"] = &AiObjectContextInternal::heroism;
+                creators["bloodlust"] = &AiObjectContextInternal::bloodlust;
+            }
+
+        private:
+            static Action* heroism(PlayerbotAI* ai) { return new CastHeroismAction(ai); }
+            static Action* bloodlust(PlayerbotAI* ai) { return new CastBloodlustAction(ai); }
+            static Action* thunderstorm(PlayerbotAI* ai) { return new CastThunderstormAction(ai); }
+            static Action* lightning_bolt(PlayerbotAI* ai) { return new CastLightningBoltAction(ai); }
+            static Action* chain_lightning(PlayerbotAI* ai) { return new CastChainLightningAction(ai); }
+            static Action* frost_shock(PlayerbotAI* ai) { return new CastFrostShockAction(ai); }
+            static Action* earth_shock(PlayerbotAI* ai) { return new CastEarthShockAction(ai); }
+            static Action* flame_shock(PlayerbotAI* ai) { return new CastFlameShockAction(ai); }
+            static Action* cleanse_spirit_poison_on_party(PlayerbotAI* ai) { return new CastCleanseSpiritPoisonOnPartyAction(ai); }
+            static Action* cleanse_spirit_disease_on_party(PlayerbotAI* ai) { return new CastCleanseSpiritDiseaseOnPartyAction(ai); }
+            static Action* cleanse_spirit_curse_on_party(PlayerbotAI* ai) { return new CastCleanseSpiritCurseOnPartyAction(ai); }
+            static Action* cleanse_spirit(PlayerbotAI* ai) { return new CastCleanseSpiritAction(ai); }
+            static Action* water_walking(PlayerbotAI* ai) { return new CastWaterWalkingAction(ai); }
+            static Action* water_breathing(PlayerbotAI* ai) { return new CastWaterBreathingAction(ai); }
+            static Action* water_walking_on_party(PlayerbotAI* ai) { return new CastWaterWalkingOnPartyAction(ai); }
+            static Action* water_breathing_on_party(PlayerbotAI* ai) { return new CastWaterBreathingOnPartyAction(ai); }
+            static Action* water_shield(PlayerbotAI* ai) { return new CastWaterShieldAction(ai); }
+            static Action* lightning_shield(PlayerbotAI* ai) { return new CastLightningShieldAction(ai); }
+            static Action* strength_of_earth_totem(PlayerbotAI* ai) { return new CastStrengthOfEarthTotemAction(ai); }
+            static Action* flametongue_totem(PlayerbotAI* ai) { return new CastFlametongueTotemAction(ai); }
+            static Action* magma_totem(PlayerbotAI* ai) { return new CastMagmaTotemAction(ai); }
+            static Action* searing_totem(PlayerbotAI* ai) { return new CastSearingTotemAction(ai); }
+            static Action* fire_nova(PlayerbotAI* ai) { return new CastFireNovaAction(ai); }
+            static Action* windfury_totem(PlayerbotAI* ai) { return new CastWindfuryTotemAction(ai); }
+            static Action* mana_spring_totem(PlayerbotAI* ai) { return new CastManaSpringTotemAction(ai); }
+            static Action* mana_tide_totem(PlayerbotAI* ai) { return new CastManaTideTotemAction(ai); }
+            static Action* healing_stream_totem(PlayerbotAI* ai) { return new CastHealingStreamTotemAction(ai); }
+            static Action* wind_shear(PlayerbotAI* ai) { return new CastWindShearAction(ai); }
+            static Action* rockbiter_weapon(PlayerbotAI* ai) { return new CastRockbiterWeaponAction(ai); }
+            static Action* flametongue_weapon(PlayerbotAI* ai) { return new CastFlametongueWeaponAction(ai); }
+            static Action* frostbrand_weapon(PlayerbotAI* ai) { return new CastFrostbrandWeaponAction(ai); }
+            static Action* windfury_weapon(PlayerbotAI* ai) { return new CastWindfuryWeaponAction(ai); }
+            static Action* earthliving_weapon(PlayerbotAI* ai) { return new CastEarthlivingWeaponAction(ai); }
+            static Action* purge(PlayerbotAI* ai) { return new CastPurgeAction(ai); }
+            static Action* healing_wave(PlayerbotAI* ai) { return new CastHealingWaveAction(ai); }
+            static Action* lesser_healing_wave(PlayerbotAI* ai) { return new CastLesserHealingWaveAction(ai); }
+            static Action* healing_wave_on_party(PlayerbotAI* ai) { return new CastHealingWaveOnPartyAction(ai); }
+            static Action* lesser_healing_wave_on_party(PlayerbotAI* ai) { return new CastLesserHealingWaveOnPartyAction(ai); }
+            static Action* earth_shield(PlayerbotAI* ai) { return new CastEarthShieldAction(ai); }
+            static Action* earth_shield_on_party(PlayerbotAI* ai) { return new CastEarthShieldOnPartyAction(ai); }
+            static Action* chain_heal(PlayerbotAI* ai) { return new CastChainHealAction(ai); }
+            static Action* riptide(PlayerbotAI* ai) { return new CastRiptideAction(ai); }
+            static Action* riptide_on_party(PlayerbotAI* ai) { return new CastRiptideOnPartyAction(ai); }
+            static Action* stormstrike(PlayerbotAI* ai) { return new CastStormstrikeAction(ai); }
+            static Action* lava_lash(PlayerbotAI* ai) { return new CastLavaLashAction(ai); }
+            static Action* ancestral_spirit(PlayerbotAI* ai) { return new CastAncestralSpiritAction(ai); }
+            static Action* wind_shear_on_enemy_healer(PlayerbotAI* ai) { return new CastWindShearOnEnemyHealerAction(ai); }
+        };
+    };
+};
+
+
+
+ShamanAiObjectContext::ShamanAiObjectContext(PlayerbotAI* ai) : AiObjectContext(ai)
+{
+    strategyContexts.Add(new ai::shaman::StrategyFactoryInternal());
+    strategyContexts.Add(new ai::shaman::CombatStrategyFactoryInternal());
+    strategyContexts.Add(new ai::shaman::BuffStrategyFactoryInternal());
+    actionContexts.Add(new ai::shaman::AiObjectContextInternal());
+    triggerContexts.Add(new ai::shaman::TriggerFactoryInternal());
+}
diff --git a/src/plugins/playerbot/strategy/shaman/ShamanAiObjectContext.h b/src/plugins/playerbot/strategy/shaman/ShamanAiObjectContext.h
new file mode 100644
index 0000000..718084a
--- /dev/null
+++ b/src/plugins/playerbot/strategy/shaman/ShamanAiObjectContext.h
@@ -0,0 +1,12 @@
+#pragma once
+
+#include "../AiObjectContext.h"
+
+namespace ai
+{
+    class ShamanAiObjectContext : public AiObjectContext
+    {
+    public:
+        ShamanAiObjectContext(PlayerbotAI* ai);
+    };
+}
diff --git a/src/plugins/playerbot/strategy/shaman/ShamanMultipliers.cpp b/src/plugins/playerbot/strategy/shaman/ShamanMultipliers.cpp
new file mode 100644
index 0000000..6c72f20
--- /dev/null
+++ b/src/plugins/playerbot/strategy/shaman/ShamanMultipliers.cpp
@@ -0,0 +1,6 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "ShamanMultipliers.h"
+#include "ShamanActions.h"
+
+using namespace ai;
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/shaman/ShamanMultipliers.h b/src/plugins/playerbot/strategy/shaman/ShamanMultipliers.h
new file mode 100644
index 0000000..7cfbdd4
--- /dev/null
+++ b/src/plugins/playerbot/strategy/shaman/ShamanMultipliers.h
@@ -0,0 +1,6 @@
+#pragma once
+
+namespace ai
+{
+   
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/shaman/ShamanNonCombatStrategy.cpp b/src/plugins/playerbot/strategy/shaman/ShamanNonCombatStrategy.cpp
new file mode 100644
index 0000000..044c6bc
--- /dev/null
+++ b/src/plugins/playerbot/strategy/shaman/ShamanNonCombatStrategy.cpp
@@ -0,0 +1,49 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "ShamanMultipliers.h"
+#include "ShamanNonCombatStrategy.h"
+
+using namespace ai;
+
+void ShamanNonCombatStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    NonCombatStrategy::InitTriggers(triggers);
+
+	triggers.push_back(new TriggerNode(
+		"party member dead",
+		NextAction::array(0, new NextAction("ancestral spirit", 33.0f), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"water breathing",
+		NextAction::array(0, new NextAction("water breathing", 12.0f), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"water walking",
+		NextAction::array(0, new NextAction("water walking", 12.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "water breathing on party",
+        NextAction::array(0, new NextAction("water breathing on party", 11.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "water walking on party",
+        NextAction::array(0, new NextAction("water walking on party", 11.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "critical health",
+        NextAction::array(0, new NextAction("healing wave", 70.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "party member critical health",
+        NextAction::array(0, new NextAction("healing wave on party", 60.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "medium aoe heal",
+        NextAction::array(0, new NextAction("chain heal", 27.0f), NULL)));
+}
+
+void ShamanNonCombatStrategy::InitMultipliers(std::list<Multiplier*> &multipliers)
+{
+    NonCombatStrategy::InitMultipliers(multipliers);
+}
+
diff --git a/src/plugins/playerbot/strategy/shaman/ShamanNonCombatStrategy.h b/src/plugins/playerbot/strategy/shaman/ShamanNonCombatStrategy.h
new file mode 100644
index 0000000..a6859ee
--- /dev/null
+++ b/src/plugins/playerbot/strategy/shaman/ShamanNonCombatStrategy.h
@@ -0,0 +1,19 @@
+#pragma once
+
+#include "../Strategy.h"
+#include "../generic/NonCombatStrategy.h"
+
+namespace ai
+{
+    class ShamanNonCombatStrategy : public NonCombatStrategy
+    {
+    public:
+        ShamanNonCombatStrategy(PlayerbotAI* ai) : NonCombatStrategy(ai) {}
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual void InitMultipliers(std::list<Multiplier*> &multipliers);
+        virtual string getName() { return "nc"; }
+
+    };
+}
diff --git a/src/plugins/playerbot/strategy/shaman/ShamanTriggers.cpp b/src/plugins/playerbot/strategy/shaman/ShamanTriggers.cpp
new file mode 100644
index 0000000..2a6c51e
--- /dev/null
+++ b/src/plugins/playerbot/strategy/shaman/ShamanTriggers.cpp
@@ -0,0 +1,38 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "ShamanTriggers.h"
+#include "ShamanActions.h"
+
+using namespace ai;
+
+list<string> ShamanWeaponTrigger::spells;
+
+bool ShamanWeaponTrigger::IsActive()
+{
+    if (spells.empty())
+    {
+        spells.push_back("frostbrand weapon");
+        spells.push_back("rockbiter weapon");
+        spells.push_back("flametongue weapon");
+        spells.push_back("earthliving weapon");
+        spells.push_back("windfury weapon");
+    }
+
+    for (list<string>::iterator i = spells.begin(); i != spells.end(); ++i)
+    {
+        uint32 spellId = AI_VALUE2(uint32, "spell id", spell);
+        if (!spellId)
+            continue;
+
+        if (AI_VALUE2(Item*, "item for spell", spellId))
+            return true;
+    }
+
+    return false;
+}
+
+bool ShockTrigger::IsActive()
+{
+    return SpellTrigger::IsActive()
+            && !ai->HasAnyAuraOf(GetTarget(), "frost shock", "earth shock", "flame shock", NULL);
+}
diff --git a/src/plugins/playerbot/strategy/shaman/ShamanTriggers.h b/src/plugins/playerbot/strategy/shaman/ShamanTriggers.h
new file mode 100644
index 0000000..afa6d62
--- /dev/null
+++ b/src/plugins/playerbot/strategy/shaman/ShamanTriggers.h
@@ -0,0 +1,197 @@
+#pragma once
+#include "../triggers/GenericTriggers.h"
+
+namespace ai
+{
+    class ShamanWeaponTrigger : public BuffTrigger {
+    public:
+        ShamanWeaponTrigger(PlayerbotAI* ai) : BuffTrigger(ai, "rockbiter weapon") {}
+        virtual bool IsActive();
+    private:
+        static list<string> spells;
+    };
+
+    class TotemTrigger : public Trigger {
+    public:
+        TotemTrigger(PlayerbotAI* ai, string spell, int attackerCount = 0) : Trigger(ai, spell), attackerCount(attackerCount) {}
+
+        virtual bool IsActive()
+		{
+            return AI_VALUE(uint8, "attacker count") >= attackerCount && !AI_VALUE2(bool, "has totem", name);
+        }
+
+    protected:
+        int attackerCount;
+    };
+
+    class WindfuryTotemTrigger : public TotemTrigger {
+    public:
+        WindfuryTotemTrigger(PlayerbotAI* ai) : TotemTrigger(ai, "windfury totem") {}
+    };
+
+    class ManaSpringTotemTrigger : public TotemTrigger {
+    public:
+        ManaSpringTotemTrigger(PlayerbotAI* ai) : TotemTrigger(ai, "mana spring totem") {}
+        virtual bool IsActive()
+        {
+            return AI_VALUE(uint8, "attacker count") >= attackerCount &&
+                    !AI_VALUE2(bool, "has totem", "mana tide totem") &&
+                    !AI_VALUE2(bool, "has totem", name);
+        }
+    };
+
+    class FlametongueTotemTrigger : public TotemTrigger {
+    public:
+        FlametongueTotemTrigger(PlayerbotAI* ai) : TotemTrigger(ai, "flametongue totem") {}
+    };
+
+    class StrengthOfEarthTotemTrigger : public TotemTrigger {
+    public:
+        StrengthOfEarthTotemTrigger(PlayerbotAI* ai) : TotemTrigger(ai, "strength of earth totem") {}
+    };
+
+    class MagmaTotemTrigger : public TotemTrigger {
+    public:
+        MagmaTotemTrigger(PlayerbotAI* ai) : TotemTrigger(ai, "magma totem", 3) {}
+    };
+
+    class SearingTotemTrigger : public TotemTrigger {
+    public:
+        SearingTotemTrigger(PlayerbotAI* ai) : TotemTrigger(ai, "searing totem", 1) {}
+    };
+
+    class WindShearInterruptSpellTrigger : public InterruptSpellTrigger
+    {
+    public:
+        WindShearInterruptSpellTrigger(PlayerbotAI* ai) : InterruptSpellTrigger(ai, "wind shear") {}
+    };
+
+    class WaterShieldTrigger : public BuffTrigger
+    {
+    public:
+        WaterShieldTrigger(PlayerbotAI* ai) : BuffTrigger(ai, "water shield") {}
+    };
+
+    class LightningShieldTrigger : public BuffTrigger
+    {
+    public:
+        LightningShieldTrigger(PlayerbotAI* ai) : BuffTrigger(ai, "lightning shield") {}
+    };
+
+    class PurgeTrigger : public TargetAuraDispelTrigger
+    {
+    public:
+        PurgeTrigger(PlayerbotAI* ai) : TargetAuraDispelTrigger(ai, "purge", DISPEL_MAGIC) {}
+    };
+
+    class WaterWalkingTrigger : public BuffTrigger {
+    public:
+        WaterWalkingTrigger(PlayerbotAI* ai) : BuffTrigger(ai, "water walking") {}
+
+        virtual bool IsActive()
+        {
+            return BuffTrigger::IsActive() && AI_VALUE2(bool, "swimming", "self target");
+        }
+    };
+
+    class WaterBreathingTrigger : public BuffTrigger {
+    public:
+        WaterBreathingTrigger(PlayerbotAI* ai) : BuffTrigger(ai, "water breathing") {}
+
+        virtual bool IsActive()
+        {
+            return BuffTrigger::IsActive() && AI_VALUE2(bool, "swimming", "self target");
+        }
+    };
+
+    class WaterWalkingOnPartyTrigger : public BuffOnPartyTrigger {
+    public:
+        WaterWalkingOnPartyTrigger(PlayerbotAI* ai) : BuffOnPartyTrigger(ai, "water walking on party") {}
+
+        virtual bool IsActive()
+        {
+            return BuffOnPartyTrigger::IsActive() && AI_VALUE2(bool, "swimming", "self target");
+        }
+    };
+
+    class WaterBreathingOnPartyTrigger : public BuffOnPartyTrigger {
+    public:
+        WaterBreathingOnPartyTrigger(PlayerbotAI* ai) : BuffOnPartyTrigger(ai, "water breathing on party") {}
+
+        virtual bool IsActive()
+        {
+            return BuffOnPartyTrigger::IsActive() && AI_VALUE2(bool, "swimming", "self target");
+        }
+    };
+
+    class CleanseSpiritPoisonTrigger : public NeedCureTrigger
+    {
+    public:
+        CleanseSpiritPoisonTrigger(PlayerbotAI* ai) : NeedCureTrigger(ai, "cleanse spirit", DISPEL_POISON) {}
+    };
+
+    class PartyMemberCleanseSpiritPoisonTrigger : public PartyMemberNeedCureTrigger
+    {
+    public:
+        PartyMemberCleanseSpiritPoisonTrigger(PlayerbotAI* ai) : PartyMemberNeedCureTrigger(ai, "cleanse spirit", DISPEL_POISON) {}
+    };
+
+    class CleanseSpiritCurseTrigger : public NeedCureTrigger
+    {
+    public:
+        CleanseSpiritCurseTrigger(PlayerbotAI* ai) : NeedCureTrigger(ai, "cleanse spirit", DISPEL_CURSE) {}
+    };
+
+    class PartyMemberCleanseSpiritCurseTrigger : public PartyMemberNeedCureTrigger
+    {
+    public:
+        PartyMemberCleanseSpiritCurseTrigger(PlayerbotAI* ai) : PartyMemberNeedCureTrigger(ai, "cleanse spirit", DISPEL_CURSE) {}
+    };
+
+    class CleanseSpiritDiseaseTrigger : public NeedCureTrigger
+    {
+    public:
+        CleanseSpiritDiseaseTrigger(PlayerbotAI* ai) : NeedCureTrigger(ai, "cleanse spirit", DISPEL_DISEASE) {}
+    };
+
+    class PartyMemberCleanseSpiritDiseaseTrigger : public PartyMemberNeedCureTrigger
+    {
+    public:
+        PartyMemberCleanseSpiritDiseaseTrigger(PlayerbotAI* ai) : PartyMemberNeedCureTrigger(ai, "cleanse spirit", DISPEL_DISEASE) {}
+    };
+
+    class ShockTrigger : public DebuffTrigger {
+    public:
+        ShockTrigger(PlayerbotAI* ai) : DebuffTrigger(ai, "earth shock") {}
+        virtual bool IsActive();
+    };
+
+    class FrostShockSnareTrigger : public SnareTargetTrigger {
+    public:
+        FrostShockSnareTrigger(PlayerbotAI* ai) : SnareTargetTrigger(ai, "frost shock") {}
+    };
+
+    class HeroismTrigger : public BoostTrigger
+    {
+    public:
+        HeroismTrigger(PlayerbotAI* ai) : BoostTrigger(ai, "heroism") {}
+    };
+
+    class BloodlustTrigger : public BoostTrigger
+    {
+    public:
+        BloodlustTrigger(PlayerbotAI* ai) : BoostTrigger(ai, "bloodlust") {}
+    };
+
+    class MaelstromWeaponTrigger : public HasAuraTrigger
+    {
+    public:
+        MaelstromWeaponTrigger(PlayerbotAI* ai) : HasAuraTrigger(ai, "maelstrom weapon") {}
+    };
+
+    class WindShearInterruptEnemyHealerSpellTrigger : public InterruptEnemyHealerTrigger
+    {
+    public:
+        WindShearInterruptEnemyHealerSpellTrigger(PlayerbotAI* ai) : InterruptEnemyHealerTrigger(ai, "wind shear") {}
+    };
+}
diff --git a/src/plugins/playerbot/strategy/shaman/TotemsShamanStrategy.cpp b/src/plugins/playerbot/strategy/shaman/TotemsShamanStrategy.cpp
new file mode 100644
index 0000000..e23c97d
--- /dev/null
+++ b/src/plugins/playerbot/strategy/shaman/TotemsShamanStrategy.cpp
@@ -0,0 +1,31 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "ShamanMultipliers.h"
+#include "TotemsShamanStrategy.h"
+
+using namespace ai;
+
+TotemsShamanStrategy::TotemsShamanStrategy(PlayerbotAI* ai) : GenericShamanStrategy(ai)
+{
+}
+
+void TotemsShamanStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    GenericShamanStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "windfury totem",
+        NextAction::array(0, new NextAction("windfury totem", 16.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "mana spring totem",
+        NextAction::array(0, new NextAction("mana spring totem", 19.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "strength of earth totem",
+        NextAction::array(0, new NextAction("strength of earth totem", 18.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "flametongue totem",
+        NextAction::array(0, new NextAction("flametongue totem", 17.0f), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/shaman/TotemsShamanStrategy.h b/src/plugins/playerbot/strategy/shaman/TotemsShamanStrategy.h
new file mode 100644
index 0000000..978fa26
--- /dev/null
+++ b/src/plugins/playerbot/strategy/shaman/TotemsShamanStrategy.h
@@ -0,0 +1,17 @@
+#pragma once
+
+#include "GenericShamanStrategy.h"
+
+namespace ai
+{
+    class TotemsShamanStrategy : public GenericShamanStrategy
+    {
+    public:
+        TotemsShamanStrategy(PlayerbotAI* ai);
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "totems"; }
+		virtual int GetType() { return STRATEGY_TYPE_HEAL; }
+    };
+}
diff --git a/src/plugins/playerbot/strategy/triggers/ChatCommandTrigger.h b/src/plugins/playerbot/strategy/triggers/ChatCommandTrigger.h
new file mode 100644
index 0000000..0e43d16
--- /dev/null
+++ b/src/plugins/playerbot/strategy/triggers/ChatCommandTrigger.h
@@ -0,0 +1,36 @@
+#pragma once
+
+#include "../Trigger.h"
+
+namespace ai
+{
+    class ChatCommandTrigger : public Trigger {
+    public:
+        ChatCommandTrigger(PlayerbotAI* ai, string command) : Trigger(ai, command), triggered(false) {}
+
+        virtual void ExternalEvent(string param, Player* owner = NULL)
+        {
+            this->param = param;
+            this->owner = owner;
+            triggered = true;
+        }
+
+        virtual Event Check()
+        {
+            if (!triggered)
+                return Event();
+
+            return Event(getName(), param, owner);
+        }
+
+        virtual void Reset()
+        {
+            triggered = false;
+        }
+
+   private:
+        string param;
+        bool triggered;
+        Player* owner;
+    };
+}
diff --git a/src/plugins/playerbot/strategy/triggers/ChatTriggerContext.h b/src/plugins/playerbot/strategy/triggers/ChatTriggerContext.h
new file mode 100644
index 0000000..239e0ec
--- /dev/null
+++ b/src/plugins/playerbot/strategy/triggers/ChatTriggerContext.h
@@ -0,0 +1,140 @@
+#pragma once
+
+#include "ChatCommandTrigger.h"
+
+namespace ai
+{
+    class ChatTriggerContext : public NamedObjectContext<Trigger>
+    {
+    public:
+        ChatTriggerContext()
+        {
+            creators["quests"] = &ChatTriggerContext::quests;
+            creators["stats"] = &ChatTriggerContext::stats;
+            creators["leave"] = &ChatTriggerContext::leave;
+            creators["rep"] = &ChatTriggerContext::reputation;
+            creators["reputation"] = &ChatTriggerContext::reputation;
+            creators["log"] = &ChatTriggerContext::log;
+            creators["los"] = &ChatTriggerContext::los;
+            creators["drop"] = &ChatTriggerContext::drop;
+            creators["q"] = &ChatTriggerContext::q;
+            creators["ll"] = &ChatTriggerContext::ll;
+            creators["loot all"] = &ChatTriggerContext::loot_all;
+            creators["add all loot"] = &ChatTriggerContext::loot_all;
+            creators["release"] = &ChatTriggerContext::release;
+            creators["teleport"] = &ChatTriggerContext::teleport;
+            creators["taxi"] = &ChatTriggerContext::taxi;
+            creators["repair"] = &ChatTriggerContext::repair;
+            creators["u"] = &ChatTriggerContext::use;
+            creators["use"] = &ChatTriggerContext::use;
+            creators["c"] = &ChatTriggerContext::item_count;
+            creators["e"] = &ChatTriggerContext::equip;
+            creators["ue"] = &ChatTriggerContext::uneqip;
+            creators["s"] = &ChatTriggerContext::sell;
+            creators["b"] = &ChatTriggerContext::buy;
+            creators["r"] = &ChatTriggerContext::reward;
+            creators["t"] = &ChatTriggerContext::trade;
+            creators["nt"] = &ChatTriggerContext::nontrade;
+            creators["talents"] = &ChatTriggerContext::talents;
+            creators["spells"] = &ChatTriggerContext::spells;
+            creators["co"] = &ChatTriggerContext::co;
+            creators["nc"] = &ChatTriggerContext::nc;
+            creators["dead"] = &ChatTriggerContext::dead;
+            creators["trainer"] = &ChatTriggerContext::trainer;
+            creators["attack"] = &ChatTriggerContext::attack;
+            creators["chat"] = &ChatTriggerContext::chat;
+            creators["accept"] = &ChatTriggerContext::accept;
+            creators["home"] = &ChatTriggerContext::home;
+            creators["reset ai"] = &ChatTriggerContext::reset_ai;
+            creators["destroy"] = &ChatTriggerContext::destroy;
+            creators["emote"] = &ChatTriggerContext::emote;
+            creators["buff"] = &ChatTriggerContext::buff;
+            creators["help"] = &ChatTriggerContext::help;
+            creators["gb"] = &ChatTriggerContext::gb;
+            creators["bank"] = &ChatTriggerContext::bank;
+            creators["follow"] = &ChatTriggerContext::follow;
+            creators["stay"] = &ChatTriggerContext::stay;
+            creators["flee"] = &ChatTriggerContext::flee;
+            creators["grind"] = &ChatTriggerContext::grind;
+            creators["tank attack"] = &ChatTriggerContext::tank_attack;
+            creators["talk"] = &ChatTriggerContext::talk;
+            creators["cast"] = &ChatTriggerContext::talk;
+            creators["invite"] = &ChatTriggerContext::invite;
+            creators["spell"] = &ChatTriggerContext::spell;
+            creators["rti"] = &ChatTriggerContext::rti;
+            creators["revive"] = &ChatTriggerContext::revive;
+            creators["runaway"] = &ChatTriggerContext::runaway;
+            creators["warning"] = &ChatTriggerContext::warning;
+            creators["position"] = &ChatTriggerContext::position;
+            creators["summon"] = &ChatTriggerContext::summon;
+            creators["who"] = &ChatTriggerContext::who;
+            creators["save mana"] = &ChatTriggerContext::save_mana;
+            creators["max dps"] = &ChatTriggerContext::max_dps;
+            creators["attackers"] = &ChatTriggerContext::attackers;
+            creators["formation"] = &ChatTriggerContext::formation;
+        }
+
+    private:
+        static Trigger* formation(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "formation"); }
+        static Trigger* attackers(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "attackers"); }
+        static Trigger* max_dps(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "max dps"); }
+        static Trigger* save_mana(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "save mana"); }
+        static Trigger* who(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "who"); }
+        static Trigger* summon(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "summon"); }
+        static Trigger* position(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "position"); }
+        static Trigger* runaway(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "runaway"); }
+        static Trigger* warning(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "warning"); }
+        static Trigger* revive(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "revive"); }
+        static Trigger* rti(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "rti"); }
+        static Trigger* invite(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "invite"); }
+        static Trigger* cast(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "cast"); }
+        static Trigger* talk(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "talk"); }
+        static Trigger* flee(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "flee"); }
+        static Trigger* grind(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "grind"); }
+        static Trigger* tank_attack(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "tank attack"); }
+        static Trigger* stay(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "stay"); }
+        static Trigger* follow(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "follow"); }
+        static Trigger* gb(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "gb"); }
+        static Trigger* bank(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "bank"); }
+        static Trigger* help(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "help"); }
+        static Trigger* buff(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "buff"); }
+        static Trigger* emote(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "emote"); }
+        static Trigger* destroy(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "destroy"); }
+        static Trigger* home(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "home"); }
+        static Trigger* accept(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "accept"); }
+        static Trigger* chat(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "chat"); }
+        static Trigger* attack(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "attack"); }
+        static Trigger* trainer(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "trainer"); }
+        static Trigger* co(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "co"); }
+        static Trigger* nc(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "nc"); }
+        static Trigger* dead(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "dead"); }
+        static Trigger* spells(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "spells"); }
+        static Trigger* talents(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "talents"); }
+        static Trigger* equip(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "e"); }
+        static Trigger* uneqip(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "ue"); }
+        static Trigger* sell(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "s"); }
+        static Trigger* buy(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "b"); }
+        static Trigger* reward(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "r"); }
+        static Trigger* trade(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "t"); }
+        static Trigger* nontrade(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "nt"); }
+
+        static Trigger* item_count(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "c"); }
+        static Trigger* use(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "use"); }
+        static Trigger* repair(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "repair"); }
+        static Trigger* taxi(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "taxi"); }
+        static Trigger* teleport(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "teleport"); }
+        static Trigger* q(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "q"); }
+        static Trigger* ll(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "ll"); }
+        static Trigger* drop(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "drop"); }
+        static Trigger* quests(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "quests"); }
+        static Trigger* stats(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "stats"); }
+        static Trigger* leave(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "leave"); }
+        static Trigger* reputation(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "reputation"); }
+        static Trigger* log(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "log"); }
+        static Trigger* los(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "los"); }
+        static Trigger* loot_all(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "add all loot"); }
+        static Trigger* release(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "release"); }
+        static Trigger* reset_ai(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "reset ai"); }
+        static Trigger* spell(PlayerbotAI* ai) { return new ChatCommandTrigger(ai, "spell"); }
+    };
+};
diff --git a/src/plugins/playerbot/strategy/triggers/CureTriggers.cpp b/src/plugins/playerbot/strategy/triggers/CureTriggers.cpp
new file mode 100644
index 0000000..0be6ff6
--- /dev/null
+++ b/src/plugins/playerbot/strategy/triggers/CureTriggers.cpp
@@ -0,0 +1,17 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "GenericTriggers.h"
+#include "CureTriggers.h"
+
+using namespace ai;
+
+bool NeedCureTrigger::IsActive() 
+{
+	Unit* target = GetTarget();
+	return target && ai->HasAuraToDispel(target, dispelType);
+}
+
+Value<Unit*>* PartyMemberNeedCureTrigger::GetTargetValue()
+{
+	return context->GetValue<Unit*>("party member to dispel", dispelType);
+}
diff --git a/src/plugins/playerbot/strategy/triggers/CureTriggers.h b/src/plugins/playerbot/strategy/triggers/CureTriggers.h
new file mode 100644
index 0000000..2321953
--- /dev/null
+++ b/src/plugins/playerbot/strategy/triggers/CureTriggers.h
@@ -0,0 +1,35 @@
+#pragma once
+#include "../Trigger.h"
+
+namespace ai
+{
+	class SpellTrigger;
+
+    class NeedCureTrigger : public SpellTrigger {
+    public:
+        NeedCureTrigger(PlayerbotAI* ai, string spell, uint32 dispelType) : SpellTrigger(ai, spell) 
+  	    {
+			this->dispelType = dispelType;
+        }
+        virtual string GetTargetName() { return "self target"; }
+        virtual bool IsActive();
+
+    protected:
+        uint32 dispelType;
+    };
+
+    class TargetAuraDispelTrigger : public NeedCureTrigger {
+    public:
+        TargetAuraDispelTrigger(PlayerbotAI* ai, string spell, uint32 dispelType) : 
+			NeedCureTrigger(ai, spell, dispelType) {}
+		virtual string GetTargetName() { return "current target"; }
+    };
+
+    class PartyMemberNeedCureTrigger : public NeedCureTrigger {
+    public:
+        PartyMemberNeedCureTrigger(PlayerbotAI* ai, string spell, uint32 dispelType) : 
+            NeedCureTrigger(ai, spell, dispelType) {}
+
+		virtual Value<Unit*>* GetTargetValue();
+    };
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/triggers/GenericTriggers.cpp b/src/plugins/playerbot/strategy/triggers/GenericTriggers.cpp
new file mode 100644
index 0000000..ebd6dbf
--- /dev/null
+++ b/src/plugins/playerbot/strategy/triggers/GenericTriggers.cpp
@@ -0,0 +1,242 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "GenericTriggers.h"
+#include "../../LootObjectStack.h"
+#include "../../PlayerbotAIConfig.h"
+
+using namespace ai;
+
+bool LowManaTrigger::IsActive()
+{
+    return AI_VALUE2(bool, "has mana", "self target") && AI_VALUE2(uint8, "mana", "self target") < sPlayerbotAIConfig.lowMana;
+}
+
+bool MediumManaTrigger::IsActive()
+{
+    return AI_VALUE2(bool, "has mana", "self target") && AI_VALUE2(uint8, "mana", "self target") < sPlayerbotAIConfig.mediumMana;
+}
+
+
+bool RageAvailable::IsActive()
+{
+    return AI_VALUE2(uint8, "rage", "self target") >= amount;
+}
+
+bool EnergyAvailable::IsActive()
+{
+	return AI_VALUE2(uint8, "energy", "self target") >= amount;
+}
+
+bool ComboPointsAvailableTrigger::IsActive()
+{
+    return AI_VALUE2(uint8, "combo", "current target") >= amount;
+}
+
+bool LoseAggroTrigger::IsActive()
+{
+    return !AI_VALUE2(bool, "has aggro", "current target");
+}
+
+bool HasAggroTrigger::IsActive()
+{
+    return AI_VALUE2(bool, "has aggro", "current target");
+}
+
+bool PanicTrigger::IsActive()
+{
+    return AI_VALUE2(uint8, "health", "self target") < sPlayerbotAIConfig.criticalHealth &&
+		(!AI_VALUE2(bool, "has mana", "self target") || AI_VALUE2(uint8, "mana", "self target") < sPlayerbotAIConfig.lowMana);
+}
+
+bool BuffTrigger::IsActive()
+{
+    Unit* target = GetTarget();
+	return SpellTrigger::IsActive() &&
+		!ai->HasAura(spell, target) &&
+		(!AI_VALUE2(bool, "has mana", "self target") || AI_VALUE2(uint8, "mana", "self target") > sPlayerbotAIConfig.lowMana);
+}
+
+Value<Unit*>* BuffOnPartyTrigger::GetTargetValue()
+{
+	return context->GetValue<Unit*>("party member without aura", spell);
+}
+
+Value<Unit*>* DebuffOnAttackerTrigger::GetTargetValue()
+{
+	return context->GetValue<Unit*>("attacker without aura", spell);
+}
+
+bool NoAttackersTrigger::IsActive()
+{
+    return !AI_VALUE(Unit*, "current target") && AI_VALUE(uint8, "attacker count") > 0;
+}
+
+bool InvalidTargetTrigger::IsActive()
+{
+    return AI_VALUE2(bool, "invalid target", "current target");
+}
+
+bool NoTargetTrigger::IsActive()
+{
+	return !AI_VALUE(Unit*, "current target");
+}
+
+bool MyAttackerCountTrigger::IsActive()
+{
+    return AI_VALUE(uint8, "my attacker count") >= amount;
+}
+
+bool AoeTrigger::IsActive()
+{
+    return AI_VALUE(uint8, "attacker count") >= amount;
+}
+
+bool DebuffTrigger::IsActive()
+{
+	return BuffTrigger::IsActive() && AI_VALUE2(uint8, "health", "current target") > 25;
+}
+
+bool SpellTrigger::IsActive()
+{
+	return GetTarget();
+}
+
+bool SpellCanBeCastTrigger::IsActive()
+{
+	Unit* target = GetTarget();
+	return target && ai->CanCastSpell(spell, target);
+}
+
+bool RandomTrigger::IsActive()
+{
+    int vl  = rand() % (int)(1 + probability * 10 / sPlayerbotAIConfig.randomChangeMultiplier);
+    return vl == 0;
+}
+
+bool AndTrigger::IsActive()
+{
+    return ls->IsActive() && rs->IsActive();
+}
+
+string AndTrigger::getName()
+{
+    std::string name(ls->getName());
+    name = name + " and ";
+    name = name + rs->getName();
+    return name;
+}
+
+bool BoostTrigger::IsActive()
+{
+	return BuffTrigger::IsActive() && AI_VALUE(uint8, "balance") <= balance;
+}
+
+bool SnareTargetTrigger::IsActive()
+{
+	Unit* target = GetTarget();
+	return DebuffTrigger::IsActive() && AI_VALUE2(bool, "moving", "current target") && !ai->HasAura(spell, target);
+}
+
+bool ItemCountTrigger::IsActive()
+{
+	return AI_VALUE2(uint8, "item count", item) < count;
+}
+
+bool InterruptSpellTrigger::IsActive()
+{
+	return SpellTrigger::IsActive() && ai->IsInterruptableSpellCasting(GetTarget(), getName());
+}
+
+bool HasAuraTrigger::IsActive()
+{
+	return ai->HasAura(getName(), GetTarget());
+}
+
+bool TankAoeTrigger::IsActive()
+{
+    if (!AI_VALUE(uint8, "attacker count"))
+        return false;
+
+    Unit* currentTarget = AI_VALUE(Unit*, "current target");
+    if (!currentTarget)
+        return true;
+
+    Unit* tankTarget = AI_VALUE(Unit*, "tank target");
+    if (!tankTarget || currentTarget == tankTarget)
+        return false;
+
+    return currentTarget->GetVictim() == AI_VALUE(Unit*, "self target");
+}
+
+bool IsBehindTargetTrigger::IsActive()
+{
+    Unit* target = AI_VALUE(Unit*, "current target");
+    return target && AI_VALUE2(bool, "behind", "current target");
+}
+
+bool IsNotFacingTargetTrigger::IsActive()
+{
+    return !AI_VALUE2(bool, "facing", "current target");
+}
+
+bool HasCcTargetTrigger::IsActive()
+{
+    return AI_VALUE(uint8, "attacker count") > 2 && AI_VALUE2(Unit*, "cc target", getName()) &&
+        !AI_VALUE2(Unit*, "current cc target", getName());
+}
+
+bool NoMovementTrigger::IsActive()
+{
+	return !AI_VALUE2(bool, "moving", "self target");
+}
+
+bool NoPossibleTargetsTrigger::IsActive()
+{
+    list<ObjectGuid> targets = AI_VALUE(list<ObjectGuid>, "possible targets");
+    return !targets.size();
+}
+
+bool NotLeastHpTargetActiveTrigger::IsActive()
+{
+    Unit* leastHp = AI_VALUE(Unit*, "least hp target");
+    Unit* target = AI_VALUE(Unit*, "current target");
+    return leastHp && target != leastHp;
+}
+
+bool EnemyPlayerIsAttacking::IsActive()
+{
+    Unit* enemyPlayer = AI_VALUE(Unit*, "enemy player target");
+    Unit* target = AI_VALUE(Unit*, "current target");
+    return enemyPlayer && target != enemyPlayer;
+}
+
+bool IsSwimmingTrigger::IsActive()
+{
+    return AI_VALUE2(bool, "swimming", "self target");
+}
+
+bool HasNearestAddsTrigger::IsActive()
+{
+    list<ObjectGuid> targets = AI_VALUE(list<ObjectGuid>, "nearest adds");
+    return targets.size();
+}
+
+bool HasItemForSpellTrigger::IsActive()
+{
+	string spell = getName();
+    uint32 spellId = AI_VALUE2(uint32, "spell id", spell);
+    return spellId && AI_VALUE2(Item*, "item for spell", spellId);
+}
+
+
+bool TargetChangedTrigger::IsActive()
+{
+    Unit* oldTarget = context->GetValue<Unit*>("old target")->Get();
+    Unit* target = context->GetValue<Unit*>("current target")->Get();
+    return target && oldTarget != target;
+}
+
+Value<Unit*>* InterruptEnemyHealerTrigger::GetTargetValue()
+{
+    return context->GetValue<Unit*>("enemy healer target", spell);
+}
diff --git a/src/plugins/playerbot/strategy/triggers/GenericTriggers.h b/src/plugins/playerbot/strategy/triggers/GenericTriggers.h
new file mode 100644
index 0000000..f176429
--- /dev/null
+++ b/src/plugins/playerbot/strategy/triggers/GenericTriggers.h
@@ -0,0 +1,540 @@
+#pragma once
+#include "../Trigger.h"
+#include "../../PlayerbotAIConfig.h"
+
+#define BUFF_TRIGGER(clazz, spell, action) \
+    class clazz : public BuffTrigger \
+    { \
+    public: \
+        clazz(PlayerbotAI* ai) : BuffTrigger(ai, spell) {} \
+    };
+
+#define BUFF_ON_PARTY_TRIGGER(clazz, spell, action) \
+    class clazz : public BuffOnPartyTrigger \
+    { \
+    public: \
+        clazz(PlayerbotAI* ai) : BuffOnPartyTrigger(ai, spell) {}  \
+    };
+
+#define DEBUFF_TRIGGER(clazz, spell, action) \
+    class clazz : public DebuffTrigger \
+    { \
+    public: \
+        clazz(PlayerbotAI* ai) : DebuffTrigger(ai, spell) {} \
+    };
+
+namespace ai
+{
+	class StatAvailable : public Trigger
+	{
+	public:
+		StatAvailable(PlayerbotAI* ai, int amount, string name = "stat available") : Trigger(ai, name)
+		{
+			this->amount = amount;
+		}
+
+	protected:
+		int amount;
+	};
+
+	class RageAvailable : public StatAvailable
+    {
+    public:
+        RageAvailable(PlayerbotAI* ai, int amount) : StatAvailable(ai, amount, "rage available") {}
+        virtual bool IsActive();
+    };
+
+    class LightRageAvailableTrigger : public RageAvailable
+    {
+    public:
+        LightRageAvailableTrigger(PlayerbotAI* ai) : RageAvailable(ai, 20) {}
+    };
+
+    class MediumRageAvailableTrigger : public RageAvailable
+    {
+    public:
+        MediumRageAvailableTrigger(PlayerbotAI* ai) : RageAvailable(ai, 40) {}
+    };
+
+    class HighRageAvailableTrigger : public RageAvailable
+    {
+    public:
+        HighRageAvailableTrigger(PlayerbotAI* ai) : RageAvailable(ai, 60) {}
+    };
+
+	class EnergyAvailable : public StatAvailable
+	{
+	public:
+		EnergyAvailable(PlayerbotAI* ai, int amount) : StatAvailable(ai, amount, "energy available") {}
+		virtual bool IsActive();
+	};
+
+    class LightEnergyAvailableTrigger : public EnergyAvailable
+    {
+    public:
+        LightEnergyAvailableTrigger(PlayerbotAI* ai) : EnergyAvailable(ai, 20) {}
+    };
+
+    class MediumEnergyAvailableTrigger : public EnergyAvailable
+    {
+    public:
+        MediumEnergyAvailableTrigger(PlayerbotAI* ai) : EnergyAvailable(ai, 40) {}
+    };
+
+    class HighEnergyAvailableTrigger : public EnergyAvailable
+    {
+    public:
+        HighEnergyAvailableTrigger(PlayerbotAI* ai) : EnergyAvailable(ai, 60) {}
+    };
+
+	class ComboPointsAvailableTrigger : public StatAvailable
+	{
+	public:
+	    ComboPointsAvailableTrigger(PlayerbotAI* ai, int amount = 5) : StatAvailable(ai, amount, "combo points available") {}
+		virtual bool IsActive();
+	};
+
+	class LoseAggroTrigger : public Trigger {
+	public:
+		LoseAggroTrigger(PlayerbotAI* ai) : Trigger(ai, "lose aggro") {}
+		virtual bool IsActive();
+	};
+
+	class HasAggroTrigger : public Trigger {
+	public:
+	    HasAggroTrigger(PlayerbotAI* ai) : Trigger(ai, "have aggro") {}
+		virtual bool IsActive();
+	};
+
+	class SpellTrigger : public Trigger
+	{
+	public:
+		SpellTrigger(PlayerbotAI* ai, string spell, int checkInterval = 1) : Trigger(ai, spell, checkInterval)
+		{
+			this->spell = spell;
+		}
+
+		virtual string GetTargetName() { return "current target"; }
+		virtual string getName() { return spell; }
+		virtual bool IsActive();
+
+	protected:
+		string spell;
+	};
+
+	class SpellCanBeCastTrigger : public SpellTrigger
+	{
+	public:
+		SpellCanBeCastTrigger(PlayerbotAI* ai, string spell) : SpellTrigger(ai, spell) {}
+		virtual bool IsActive();
+	};
+
+	// TODO: check other targets
+    class InterruptSpellTrigger : public SpellTrigger
+	{
+    public:
+        InterruptSpellTrigger(PlayerbotAI* ai, string spell) : SpellTrigger(ai, spell) {}
+        virtual bool IsActive();
+    };
+
+
+    class AttackerCountTrigger : public Trigger
+    {
+    public:
+        AttackerCountTrigger(PlayerbotAI* ai, int amount, float distance = sPlayerbotAIConfig.sightDistance) : Trigger(ai)
+        {
+            this->amount = amount;
+            this->distance = distance;
+        }
+    public:
+        virtual bool IsActive()
+		{
+            return AI_VALUE(uint8, "attacker count") >= amount;
+        }
+        virtual string getName() { return "attacker count"; }
+
+    protected:
+        int amount;
+        float distance;
+    };
+
+    class HasAttackersTrigger : public AttackerCountTrigger
+    {
+    public:
+        HasAttackersTrigger(PlayerbotAI* ai) : AttackerCountTrigger(ai, 1) {}
+    };
+
+    class MyAttackerCountTrigger : public AttackerCountTrigger
+    {
+    public:
+        MyAttackerCountTrigger(PlayerbotAI* ai, int amount) : AttackerCountTrigger(ai, amount) {}
+    public:
+        virtual bool IsActive();
+        virtual string getName() { return "my attacker count"; }
+    };
+
+    class MediumThreatTrigger : public MyAttackerCountTrigger
+    {
+    public:
+        MediumThreatTrigger(PlayerbotAI* ai) : MyAttackerCountTrigger(ai, 2) {}
+    };
+
+    class AoeTrigger : public AttackerCountTrigger
+    {
+    public:
+        AoeTrigger(PlayerbotAI* ai, int amount = 3, float range = 15.0f) : AttackerCountTrigger(ai, amount)
+        {
+            this->range = range;
+        }
+    public:
+        virtual bool IsActive();
+        virtual string getName() { return "aoe"; }
+
+    private:
+        float range;
+    };
+
+    class NoFoodTrigger : public Trigger {
+    public:
+        NoFoodTrigger(PlayerbotAI* ai) : Trigger(ai, "no food trigger") {}
+        virtual bool IsActive() { return AI_VALUE2(list<Item*>, "inventory items", "food").empty(); }
+    };
+
+    class NoDrinkTrigger : public Trigger {
+    public:
+        NoDrinkTrigger(PlayerbotAI* ai) : Trigger(ai, "no drink trigger") {}
+        virtual bool IsActive() { return AI_VALUE2(list<Item*>, "inventory items", "drink").empty(); }
+    };
+
+    class LightAoeTrigger : public AoeTrigger
+    {
+    public:
+        LightAoeTrigger(PlayerbotAI* ai) : AoeTrigger(ai, 2, 15.0f) {}
+    };
+
+    class MediumAoeTrigger : public AoeTrigger
+    {
+    public:
+        MediumAoeTrigger(PlayerbotAI* ai) : AoeTrigger(ai, 3, 17.0f) {}
+    };
+
+    class HighAoeTrigger : public AoeTrigger
+    {
+    public:
+        HighAoeTrigger(PlayerbotAI* ai) : AoeTrigger(ai, 4, 20.0f) {}
+    };
+
+    class BuffTrigger : public SpellTrigger
+    {
+    public:
+        BuffTrigger(PlayerbotAI* ai, string spell) : SpellTrigger(ai, spell, 5) {}
+    public:
+		virtual string GetTargetName() { return "self target"; }
+        virtual bool IsActive();
+    };
+
+    class BuffOnPartyTrigger : public BuffTrigger
+    {
+    public:
+        BuffOnPartyTrigger(PlayerbotAI* ai, string spell) : BuffTrigger(ai, spell) {}
+    public:
+		virtual Value<Unit*>* GetTargetValue();
+    };
+
+    BEGIN_TRIGGER(NoAttackersTrigger, Trigger)
+    END_TRIGGER()
+
+    BEGIN_TRIGGER(NoTargetTrigger, Trigger)
+    END_TRIGGER()
+
+    BEGIN_TRIGGER(InvalidTargetTrigger, Trigger)
+    END_TRIGGER()
+
+    class TargetInSightTrigger : public Trigger {
+    public:
+        TargetInSightTrigger(PlayerbotAI* ai) : Trigger(ai, "target in sight") {}
+        virtual bool IsActive() { return AI_VALUE(Unit*, "grind target"); }
+    };
+
+    class DebuffTrigger : public BuffTrigger
+    {
+    public:
+        DebuffTrigger(PlayerbotAI* ai, string spell) : BuffTrigger(ai, spell) {
+			checkInterval = 1;
+		}
+    public:
+		virtual string GetTargetName() { return "current target"; }
+        virtual bool IsActive();
+    };
+
+    class DebuffOnAttackerTrigger : public DebuffTrigger
+    {
+    public:
+        DebuffOnAttackerTrigger(PlayerbotAI* ai, string spell) : DebuffTrigger(ai, spell) {}
+    public:
+        virtual Value<Unit*>* GetTargetValue();
+        virtual string getName() { return spell + " on attacker"; }
+    };
+
+	class BoostTrigger : public BuffTrigger
+	{
+	public:
+		BoostTrigger(PlayerbotAI* ai, string spell, float balance = 50) : BuffTrigger(ai, spell)
+		{
+			this->balance = balance;
+		}
+	public:
+		virtual bool IsActive();
+
+	protected:
+		float balance;
+	};
+
+    class RandomTrigger : public Trigger
+    {
+    public:
+        RandomTrigger(PlayerbotAI* ai, int probability = 200) : Trigger(ai)
+        {
+            this->probability = probability;
+        }
+    public:
+        virtual bool IsActive();
+        virtual string getName() { return "random"; }
+
+    protected:
+        int probability;
+    };
+
+    class SeldomTrigger : public RandomTrigger
+    {
+    public:
+        SeldomTrigger(PlayerbotAI* ai) : RandomTrigger(ai, 9000) {}
+        virtual string getName() { return "seldom"; }
+    };
+
+    class OftenTrigger : public RandomTrigger
+    {
+    public:
+        OftenTrigger(PlayerbotAI* ai) : RandomTrigger(ai, 50) {}
+        virtual string getName() { return "often"; }
+    };
+
+    class AndTrigger : public Trigger
+    {
+    public:
+        AndTrigger(PlayerbotAI* ai, Trigger* ls, Trigger* rs) : Trigger(ai)
+        {
+            this->ls = ls;
+            this->rs = rs;
+        }
+        virtual ~AndTrigger()
+        {
+            delete ls;
+            delete rs;
+        }
+    public:
+        virtual bool IsActive();
+        virtual string getName();
+
+    protected:
+        Trigger* ls;
+        Trigger* rs;
+    };
+
+    class SnareTargetTrigger : public DebuffTrigger
+    {
+    public:
+        SnareTargetTrigger(PlayerbotAI* ai, string aura) : DebuffTrigger(ai, aura) {}
+    public:
+        virtual bool IsActive();
+        virtual string getName() { return "target is moving"; }
+    };
+
+	class LowManaTrigger : public Trigger
+	{
+	public:
+		LowManaTrigger(PlayerbotAI* ai) : Trigger(ai, "low mana") {}
+
+		virtual bool IsActive();
+	};
+
+	class MediumManaTrigger : public Trigger
+	{
+	public:
+		MediumManaTrigger(PlayerbotAI* ai) : Trigger(ai, "medium mana") {}
+
+		virtual bool IsActive();
+	};
+
+    BEGIN_TRIGGER(PanicTrigger, Trigger)
+        virtual string getName() { return "panic"; }
+    END_TRIGGER()
+
+
+	class NoPetTrigger : public Trigger
+	{
+	public:
+		NoPetTrigger(PlayerbotAI* ai) : Trigger(ai, "no pet", 5) {}
+
+		virtual bool IsActive() {
+			return !AI_VALUE(Unit*, "pet target") && !AI_VALUE2(bool, "mounted", "self target");
+		}
+	};
+
+	class ItemCountTrigger : public Trigger {
+	public:
+		ItemCountTrigger(PlayerbotAI* ai, string item, int count) : Trigger(ai, item, 5) {
+			this->item = item;
+			this->count = count;
+		}
+	public:
+		virtual bool IsActive();
+		virtual string getName() { return "item count"; }
+
+	protected:
+		string item;
+		int count;
+	};
+
+	class HasAuraTrigger : public Trigger {
+	public:
+		HasAuraTrigger(PlayerbotAI* ai, string spell) : Trigger(ai, spell, 5) {}
+
+		virtual string GetTargetName() { return "self target"; }
+		virtual bool IsActive();
+
+	};
+
+    class TimerTrigger : public Trigger
+    {
+    public:
+        TimerTrigger(PlayerbotAI* ai, int checkInterval = 5) : Trigger(ai, "timer", checkInterval) {}
+
+    public:
+        virtual bool IsActive() { return true; }
+    };
+
+	class TankAoeTrigger : public NoAttackersTrigger
+	{
+	public:
+		TankAoeTrigger(PlayerbotAI* ai) : NoAttackersTrigger(ai) {}
+
+	public:
+		virtual bool IsActive();
+
+	};
+
+    class IsBehindTargetTrigger : public Trigger
+    {
+    public:
+        IsBehindTargetTrigger(PlayerbotAI* ai) : Trigger(ai) {}
+
+    public:
+        virtual bool IsActive();
+    };
+
+    class IsNotFacingTargetTrigger : public Trigger
+    {
+    public:
+        IsNotFacingTargetTrigger(PlayerbotAI* ai) : Trigger(ai) {}
+
+    public:
+        virtual bool IsActive();
+    };
+
+    class HasCcTargetTrigger : public Trigger
+    {
+    public:
+        HasCcTargetTrigger(PlayerbotAI* ai, string name) : Trigger(ai, name) {}
+
+    public:
+        virtual bool IsActive();
+    };
+
+	class NoMovementTrigger : public Trigger
+	{
+	public:
+		NoMovementTrigger(PlayerbotAI* ai, string name) : Trigger(ai, name) {}
+
+	public:
+		virtual bool IsActive();
+	};
+
+
+    class NoPossibleTargetsTrigger : public Trigger
+    {
+    public:
+        NoPossibleTargetsTrigger(PlayerbotAI* ai) : Trigger(ai, "no possible targets") {}
+
+    public:
+        virtual bool IsActive();
+    };
+
+    class NotLeastHpTargetActiveTrigger : public Trigger
+    {
+    public:
+        NotLeastHpTargetActiveTrigger(PlayerbotAI* ai) : Trigger(ai, "not least hp target active") {}
+
+    public:
+        virtual bool IsActive();
+    };
+
+    class EnemyPlayerIsAttacking : public Trigger
+    {
+    public:
+        EnemyPlayerIsAttacking(PlayerbotAI* ai) : Trigger(ai, "enemy player is attacking") {}
+
+    public:
+        virtual bool IsActive();
+    };
+
+    class IsSwimmingTrigger : public Trigger
+    {
+    public:
+        IsSwimmingTrigger(PlayerbotAI* ai) : Trigger(ai, "swimming") {}
+
+    public:
+        virtual bool IsActive();
+    };
+
+    class HasNearestAddsTrigger : public Trigger
+    {
+    public:
+        HasNearestAddsTrigger(PlayerbotAI* ai) : Trigger(ai, "has nearest adds") {}
+
+    public:
+        virtual bool IsActive();
+    };
+
+    class HasItemForSpellTrigger : public Trigger
+    {
+    public:
+        HasItemForSpellTrigger(PlayerbotAI* ai, string spell) : Trigger(ai, spell) {}
+
+    public:
+        virtual bool IsActive();
+    };
+
+    class TargetChangedTrigger : public Trigger
+    {
+    public:
+        TargetChangedTrigger(PlayerbotAI* ai) : Trigger(ai, "target changed") {}
+
+    public:
+        virtual bool IsActive();
+    };
+
+    class InterruptEnemyHealerTrigger : public SpellTrigger
+    {
+    public:
+        InterruptEnemyHealerTrigger(PlayerbotAI* ai, string spell) : SpellTrigger(ai, spell) {}
+    public:
+        virtual Value<Unit*>* GetTargetValue();
+        virtual string getName() { return spell + " on enemy healer"; }
+    };
+
+}
+
+#include "RangeTriggers.h"
+#include "HealthTriggers.h"
+#include "CureTriggers.h"
diff --git a/src/plugins/playerbot/strategy/triggers/HealthTriggers.cpp b/src/plugins/playerbot/strategy/triggers/HealthTriggers.cpp
new file mode 100644
index 0000000..703f00c
--- /dev/null
+++ b/src/plugins/playerbot/strategy/triggers/HealthTriggers.cpp
@@ -0,0 +1,26 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "HealthTriggers.h"
+
+using namespace ai;
+
+float HealthInRangeTrigger::GetValue()
+{
+    return AI_VALUE2(uint8, "health", GetTargetName());
+}
+
+bool PartyMemberDeadTrigger::IsActive()
+{
+	return GetTarget();
+}
+
+bool DeadTrigger::IsActive()
+{
+    return AI_VALUE2(bool, "dead", GetTargetName());
+}
+
+bool AoeHealTrigger::IsActive()
+{
+    return AI_VALUE2(uint8, "aoe heal", type) >= count;
+}
+
diff --git a/src/plugins/playerbot/strategy/triggers/HealthTriggers.h b/src/plugins/playerbot/strategy/triggers/HealthTriggers.h
new file mode 100644
index 0000000..49dc17b
--- /dev/null
+++ b/src/plugins/playerbot/strategy/triggers/HealthTriggers.h
@@ -0,0 +1,139 @@
+#pragma once
+#include "../Trigger.h"
+#include "../../PlayerbotAIConfig.h"
+
+namespace ai
+{
+    class ValueInRangeTrigger : public Trigger
+    {
+    public:
+        ValueInRangeTrigger(PlayerbotAI* ai, string name, float maxValue, float minValue) : Trigger(ai, name) {
+            this->maxValue = maxValue;
+            this->minValue = minValue;
+        }
+    public:
+        virtual float GetValue() = 0;
+        virtual bool IsActive() {
+            float value = GetValue();
+            return value < maxValue && value >= minValue;
+        }
+
+    protected:
+        float maxValue, minValue;
+    };
+
+	class HealthInRangeTrigger : public ValueInRangeTrigger
+	{
+	public:
+		HealthInRangeTrigger(PlayerbotAI* ai, string name, float maxValue, float minValue = 0) :
+		  ValueInRangeTrigger(ai, name, maxValue, minValue) {}
+
+		virtual bool IsActive()
+		{
+		    return ValueInRangeTrigger::IsActive() && !AI_VALUE2(bool, "dead", GetTargetName());
+		}
+
+		virtual float GetValue();
+	};
+
+    class LowHealthTrigger : public HealthInRangeTrigger
+    {
+    public:
+        LowHealthTrigger(PlayerbotAI* ai, string name = "low health",
+            float value = sPlayerbotAIConfig.lowHealth, float minValue = sPlayerbotAIConfig.criticalHealth) :
+            HealthInRangeTrigger(ai, name, value, minValue) {}
+
+		virtual string GetTargetName() { return "self target"; }
+    };
+
+    class CriticalHealthTrigger : public LowHealthTrigger
+    {
+    public:
+        CriticalHealthTrigger(PlayerbotAI* ai) :
+            LowHealthTrigger(ai, "critical health", sPlayerbotAIConfig.criticalHealth, 0) {}
+    };
+
+    class MediumHealthTrigger : public LowHealthTrigger
+    {
+    public:
+        MediumHealthTrigger(PlayerbotAI* ai) :
+            LowHealthTrigger(ai, "medium health", sPlayerbotAIConfig.mediumHealth, sPlayerbotAIConfig.lowHealth) {}
+    };
+
+    class AlmostFullHealthTrigger : public LowHealthTrigger
+    {
+    public:
+        AlmostFullHealthTrigger(PlayerbotAI* ai) :
+            LowHealthTrigger(ai, "almost full health", sPlayerbotAIConfig.almostFullHealth, sPlayerbotAIConfig.mediumHealth) {}
+    };
+
+    class PartyMemberLowHealthTrigger : public HealthInRangeTrigger
+    {
+    public:
+        PartyMemberLowHealthTrigger(PlayerbotAI* ai, string name = "party member low health", float value = sPlayerbotAIConfig.lowHealth, float minValue = sPlayerbotAIConfig.criticalHealth) :
+            HealthInRangeTrigger(ai, name, value, minValue) {}
+
+        virtual string GetTargetName() { return "party member to heal"; }
+    };
+
+    class PartyMemberCriticalHealthTrigger : public PartyMemberLowHealthTrigger
+    {
+    public:
+        PartyMemberCriticalHealthTrigger(PlayerbotAI* ai) :
+            PartyMemberLowHealthTrigger(ai, "party member critical health", sPlayerbotAIConfig.criticalHealth, 0) {}
+    };
+
+    class PartyMemberMediumHealthTrigger : public PartyMemberLowHealthTrigger
+    {
+    public:
+        PartyMemberMediumHealthTrigger(PlayerbotAI* ai) :
+            PartyMemberLowHealthTrigger(ai, "party member medium health", sPlayerbotAIConfig.mediumHealth,sPlayerbotAIConfig.lowHealth) {}
+    };
+
+    class PartyMemberAlmostFullHealthTrigger : public PartyMemberLowHealthTrigger
+    {
+    public:
+        PartyMemberAlmostFullHealthTrigger(PlayerbotAI* ai) :
+            PartyMemberLowHealthTrigger(ai, "party member almost full health", sPlayerbotAIConfig.almostFullHealth,sPlayerbotAIConfig.mediumHealth) {}
+    };
+
+    class TargetLowHealthTrigger : public HealthInRangeTrigger {
+    public:
+        TargetLowHealthTrigger(PlayerbotAI* ai, float value, float minValue = 0) :
+            HealthInRangeTrigger(ai, "target low health", value, minValue) {}
+        virtual string GetTargetName() { return "current target"; }
+    };
+
+    class TargetCriticalHealthTrigger : public TargetLowHealthTrigger
+    {
+    public:
+        TargetCriticalHealthTrigger(PlayerbotAI* ai) : TargetLowHealthTrigger(ai, 20) {}
+    };
+
+	class PartyMemberDeadTrigger : public Trigger {
+	public:
+		PartyMemberDeadTrigger(PlayerbotAI* ai) : Trigger(ai, "resurrect", 10) {}
+        virtual string GetTargetName() { return "party member to resurrect"; }
+		virtual bool IsActive();
+	};
+
+    class DeadTrigger : public Trigger {
+    public:
+        DeadTrigger(PlayerbotAI* ai) : Trigger(ai, "dead", 10) {}
+        virtual string GetTargetName() { return "self target"; }
+        virtual bool IsActive();
+    };
+
+    class AoeHealTrigger : public Trigger {
+    public:
+    	AoeHealTrigger(PlayerbotAI* ai, string name, string type, int count) :
+    		Trigger(ai, name), type(type), count(count) {}
+    public:
+        virtual bool IsActive();
+
+    protected:
+        int count;
+        string type;
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/triggers/LfgTriggers.h b/src/plugins/playerbot/strategy/triggers/LfgTriggers.h
new file mode 100644
index 0000000..ec8133e
--- /dev/null
+++ b/src/plugins/playerbot/strategy/triggers/LfgTriggers.h
@@ -0,0 +1,17 @@
+#pragma once
+
+#include "../Trigger.h"
+
+namespace ai
+{
+class LfgProposalActiveTrigger : public Trigger
+{
+public:
+    LfgProposalActiveTrigger(PlayerbotAI* ai) : Trigger(ai, "lfg proposal active", 5) {}
+
+    virtual bool IsActive()
+    {
+        return AI_VALUE(uint32, "lfg proposal");
+    }
+};
+}
diff --git a/src/plugins/playerbot/strategy/triggers/LootTriggers.cpp b/src/plugins/playerbot/strategy/triggers/LootTriggers.cpp
new file mode 100644
index 0000000..cac9b60
--- /dev/null
+++ b/src/plugins/playerbot/strategy/triggers/LootTriggers.cpp
@@ -0,0 +1,20 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "LootTriggers.h"
+
+using namespace ai;
+
+bool LootAvailableTrigger::IsActive()
+{
+    return AI_VALUE(bool, "has available loot") && AI_VALUE(uint8, "bag space") < 80;
+}
+
+bool FarFromCurrentLootTrigger::IsActive()
+{
+    return AI_VALUE2(float, "distance", "loot target") > INTERACTION_DISTANCE;
+}
+
+bool CanLootTrigger::IsActive()
+{
+    return AI_VALUE(bool, "can loot");
+}
diff --git a/src/plugins/playerbot/strategy/triggers/LootTriggers.h b/src/plugins/playerbot/strategy/triggers/LootTriggers.h
new file mode 100644
index 0000000..063456b
--- /dev/null
+++ b/src/plugins/playerbot/strategy/triggers/LootTriggers.h
@@ -0,0 +1,30 @@
+#pragma once
+#include "../Trigger.h"
+#include "../values/LastMovementValue.h"
+
+namespace ai
+{
+    class LootAvailableTrigger : public Trigger
+    {
+    public:
+        LootAvailableTrigger(PlayerbotAI* ai) : Trigger(ai, "loot available") {}
+
+        virtual bool IsActive();
+    };
+
+    class FarFromCurrentLootTrigger : public Trigger
+    {
+    public:
+        FarFromCurrentLootTrigger(PlayerbotAI* ai) : Trigger(ai, "far from current loot") {}
+
+        virtual bool IsActive();
+    };
+
+    class CanLootTrigger : public Trigger
+    {
+    public:
+        CanLootTrigger(PlayerbotAI* ai) : Trigger(ai, "can loot") {}
+
+        virtual bool IsActive();
+    };
+}
diff --git a/src/plugins/playerbot/strategy/triggers/RangeTriggers.h b/src/plugins/playerbot/strategy/triggers/RangeTriggers.h
new file mode 100644
index 0000000..0a948f5
--- /dev/null
+++ b/src/plugins/playerbot/strategy/triggers/RangeTriggers.h
@@ -0,0 +1,81 @@
+#pragma once
+#include "../Trigger.h"
+#include "../../PlayerbotAIConfig.h"
+
+namespace ai
+{
+    class EnemyTooCloseForSpellTrigger : public Trigger {
+    public:
+        EnemyTooCloseForSpellTrigger(PlayerbotAI* ai) : Trigger(ai, "enemy too close for spell") {}
+        virtual bool IsActive()
+		{
+			Unit* target = AI_VALUE(Unit*, "current target");
+            return target && AI_VALUE2(float, "distance", "current target") <= sPlayerbotAIConfig.spellDistance / 2;
+        }
+    };
+
+    class EnemyTooCloseForMeleeTrigger : public Trigger {
+    public:
+        EnemyTooCloseForMeleeTrigger(PlayerbotAI* ai) : Trigger(ai, "enemy too close for melee", 5) {}
+        virtual bool IsActive()
+		{
+			Unit* target = AI_VALUE(Unit*, "current target");
+            return target && AI_VALUE2(float, "distance", "current target") <= sPlayerbotAIConfig.contactDistance / 2;
+        }
+    };
+
+    class OutOfRangeTrigger : public Trigger {
+    public:
+        OutOfRangeTrigger(PlayerbotAI* ai, string name, float distance) : Trigger(ai, name)
+		{
+            this->distance = distance;
+        }
+        virtual bool IsActive()
+		{
+			Unit* target = AI_VALUE(Unit*, GetTargetName());
+			return target && AI_VALUE2(float, "distance", GetTargetName()) > distance;
+        }
+        virtual string GetTargetName() { return "current target"; }
+
+    protected:
+        float distance;
+    };
+
+    class EnemyOutOfMeleeTrigger : public OutOfRangeTrigger
+	{
+    public:
+        EnemyOutOfMeleeTrigger(PlayerbotAI* ai) : OutOfRangeTrigger(ai, "enemy out of melee range", sPlayerbotAIConfig.meleeDistance) {}
+    };
+
+    class EnemyOutOfSpellRangeTrigger : public OutOfRangeTrigger
+	{
+    public:
+        EnemyOutOfSpellRangeTrigger(PlayerbotAI* ai) : OutOfRangeTrigger(ai, "enemy out of spell range", sPlayerbotAIConfig.spellDistance) {}
+    };
+
+    class PartyMemberToHealOutOfSpellRangeTrigger : public OutOfRangeTrigger
+	{
+    public:
+        PartyMemberToHealOutOfSpellRangeTrigger(PlayerbotAI* ai) : OutOfRangeTrigger(ai, "party member to heal out of spell range", sPlayerbotAIConfig.spellDistance) {}
+        virtual string GetTargetName() { return "party member to heal"; }
+    };
+
+    class FarFromMasterTrigger : public Trigger {
+    public:
+        FarFromMasterTrigger(PlayerbotAI* ai, string name = "far from master", float distance = 12.0f, int checkInterval = 1) : Trigger(ai, name, checkInterval), distance(distance) {}
+
+        virtual bool IsActive()
+        {
+            return AI_VALUE2(float, "distance", "master target") > distance;
+        }
+
+    private:
+        float distance;
+    };
+
+    class OutOfReactRangeTrigger : public FarFromMasterTrigger
+    {
+    public:
+        OutOfReactRangeTrigger(PlayerbotAI* ai) : FarFromMasterTrigger(ai, "out of react range", sPlayerbotAIConfig.reactDistance / 2, 10) {}
+    };
+}
diff --git a/src/plugins/playerbot/strategy/triggers/TriggerContext.h b/src/plugins/playerbot/strategy/triggers/TriggerContext.h
new file mode 100644
index 0000000..9906cae
--- /dev/null
+++ b/src/plugins/playerbot/strategy/triggers/TriggerContext.h
@@ -0,0 +1,158 @@
+#pragma once
+
+#include "HealthTriggers.h"
+#include "GenericTriggers.h"
+#include "LootTriggers.h"
+#include "../triggers/GenericTriggers.h"
+#include "LfgTriggers.h"
+
+namespace ai
+{
+
+    class TriggerContext : public NamedObjectContext<Trigger>
+    {
+    public:
+        TriggerContext()
+        {
+            creators["timer"] = &TriggerContext::Timer;
+            creators["random"] = &TriggerContext::Random;
+            creators["seldom"] = &TriggerContext::seldom;
+            creators["often"] = &TriggerContext::often;
+
+            creators["target critical health"] = &TriggerContext::TargetCriticalHealth;
+
+            creators["critical health"] = &TriggerContext::CriticalHealth;
+            creators["low health"] = &TriggerContext::LowHealth;
+            creators["medium health"] = &TriggerContext::MediumHealth;
+            creators["almost full health"] = &TriggerContext::AlmostFullHealth;
+
+            creators["low mana"] = &TriggerContext::LowMana;
+            creators["medium mana"] = &TriggerContext::MediumMana;
+
+            creators["party member critical health"] = &TriggerContext::PartyMemberCriticalHealth;
+            creators["party member low health"] = &TriggerContext::PartyMemberLowHealth;
+            creators["party member medium health"] = &TriggerContext::PartyMemberMediumHealth;
+            creators["party member almost full health"] = &TriggerContext::PartyMemberAlmostFullHealth;
+
+            creators["light rage available"] = &TriggerContext::LightRageAvailable;
+            creators["medium rage available"] = &TriggerContext::MediumRageAvailable;
+            creators["high rage available"] = &TriggerContext::HighRageAvailable;
+
+            creators["light energy available"] = &TriggerContext::LightEnergyAvailable;
+            creators["medium energy available"] = &TriggerContext::MediumEnergyAvailable;
+            creators["high energy available"] = &TriggerContext::HighEnergyAvailable;
+
+            creators["loot available"] = &TriggerContext::LootAvailable;
+            creators["no attackers"] = &TriggerContext::NoAttackers;
+            creators["no target"] = &TriggerContext::NoTarget;
+            creators["target in sight"] = &TriggerContext::TargetInSight;
+            creators["not least hp target active"] = &TriggerContext::not_least_hp_target_active;
+            creators["has nearest adds"] = &TriggerContext::has_nearest_adds;
+            creators["enemy player is attacking"] = &TriggerContext::enemy_player_is_attacking;
+
+            creators["tank aoe"] = &TriggerContext::TankAoe;
+            creators["lose aggro"] = &TriggerContext::LoseAggro;
+            creators["has aggro"] = &TriggerContext::HasAggro;
+
+            creators["light aoe"] = &TriggerContext::LightAoe;
+            creators["medium aoe"] = &TriggerContext::MediumAoe;
+            creators["high aoe"] = &TriggerContext::HighAoe;
+
+            creators["enemy out of melee"] = &TriggerContext::EnemyOutOfMelee;
+            creators["enemy out of spell"] = &TriggerContext::EnemyOutOfSpell;
+            creators["enemy too close for spell"] = &TriggerContext::enemy_too_close_for_spell;
+            creators["enemy too close for melee"] = &TriggerContext::enemy_too_close_for_melee;
+
+            creators["combo points available"] = &TriggerContext::ComboPointsAvailable;
+
+            creators["medium threat"] = &TriggerContext::MediumThreat;
+
+            creators["dead"] = &TriggerContext::Dead;
+            creators["party member dead"] = &TriggerContext::PartyMemberDead;
+            creators["no pet"] = &TriggerContext::no_pet;
+            creators["has attackers"] = &TriggerContext::has_attackers;
+            creators["no possible targets"] = &TriggerContext::no_possible_targets;
+
+            creators["no drink"] = &TriggerContext::no_drink;
+            creators["no food"] = &TriggerContext::no_food;
+
+            creators["panic"] = &TriggerContext::panic;
+            creators["behind target"] = &TriggerContext::behind_target;
+            creators["not facing target"] = &TriggerContext::not_facing_target;
+            creators["far from master"] = &TriggerContext::far_from_master;
+            creators["far from loot target"] = &TriggerContext::far_from_loot_target;
+            creators["can loot"] = &TriggerContext::can_loot;
+            creators["swimming"] = &TriggerContext::swimming;
+            creators["target changed"] = &TriggerContext::target_changed;
+
+            creators["critical aoe heal"] = &TriggerContext::critical_aoe_heal;
+            creators["low aoe heal"] = &TriggerContext::low_aoe_heal;
+            creators["medium aoe heal"] = &TriggerContext::medium_aoe_heal;
+            creators["invalid target"] = &TriggerContext::invalid_target;
+            creators["lfg proposal active"] = &TriggerContext::lfg_proposal_active;
+        }
+
+    private:
+        static Trigger* lfg_proposal_active(PlayerbotAI* ai) { return new LfgProposalActiveTrigger(ai); }
+        static Trigger* invalid_target(PlayerbotAI* ai) { return new InvalidTargetTrigger(ai); }
+        static Trigger* critical_aoe_heal(PlayerbotAI* ai) { return new AoeHealTrigger(ai, "critical aoe heal", "critical", 2); }
+        static Trigger* low_aoe_heal(PlayerbotAI* ai) { return new AoeHealTrigger(ai, "low aoe heal", "low", 2); }
+        static Trigger* medium_aoe_heal(PlayerbotAI* ai) { return new AoeHealTrigger(ai, "medium aoe heal", "medium", 2); }
+        static Trigger* target_changed(PlayerbotAI* ai) { return new TargetChangedTrigger(ai); }
+        static Trigger* swimming(PlayerbotAI* ai) { return new IsSwimmingTrigger(ai); }
+        static Trigger* no_possible_targets(PlayerbotAI* ai) { return new NoPossibleTargetsTrigger(ai); }
+        static Trigger* can_loot(PlayerbotAI* ai) { return new CanLootTrigger(ai); }
+        static Trigger* far_from_loot_target(PlayerbotAI* ai) { return new FarFromCurrentLootTrigger(ai); }
+        static Trigger* far_from_master(PlayerbotAI* ai) { return new FarFromMasterTrigger(ai); }
+        static Trigger* behind_target(PlayerbotAI* ai) { return new IsBehindTargetTrigger(ai); }
+        static Trigger* not_facing_target(PlayerbotAI* ai) { return new IsNotFacingTargetTrigger(ai); }
+        static Trigger* panic(PlayerbotAI* ai) { return new PanicTrigger(ai); }
+        static Trigger* no_drink(PlayerbotAI* ai) { return new NoDrinkTrigger(ai); }
+        static Trigger* no_food(PlayerbotAI* ai) { return new NoFoodTrigger(ai); }
+        static Trigger* LightAoe(PlayerbotAI* ai) { return new LightAoeTrigger(ai); }
+        static Trigger* MediumAoe(PlayerbotAI* ai) { return new MediumAoeTrigger(ai); }
+        static Trigger* HighAoe(PlayerbotAI* ai) { return new HighAoeTrigger(ai); }
+        static Trigger* LoseAggro(PlayerbotAI* ai) { return new LoseAggroTrigger(ai); }
+        static Trigger* HasAggro(PlayerbotAI* ai) { return new HasAggroTrigger(ai); }
+        static Trigger* LowHealth(PlayerbotAI* ai) { return new LowHealthTrigger(ai); }
+        static Trigger* MediumHealth(PlayerbotAI* ai) { return new MediumHealthTrigger(ai); }
+        static Trigger* AlmostFullHealth(PlayerbotAI* ai) { return new AlmostFullHealthTrigger(ai); }
+        static Trigger* CriticalHealth(PlayerbotAI* ai) { return new CriticalHealthTrigger(ai); }
+        static Trigger* TargetCriticalHealth(PlayerbotAI* ai) { return new TargetCriticalHealthTrigger(ai); }
+        static Trigger* LowMana(PlayerbotAI* ai) { return new LowManaTrigger(ai); }
+        static Trigger* MediumMana(PlayerbotAI* ai) { return new MediumManaTrigger(ai); }
+        static Trigger* LightRageAvailable(PlayerbotAI* ai) { return new LightRageAvailableTrigger(ai); }
+        static Trigger* MediumRageAvailable(PlayerbotAI* ai) { return new MediumRageAvailableTrigger(ai); }
+        static Trigger* HighRageAvailable(PlayerbotAI* ai) { return new HighRageAvailableTrigger(ai); }
+        static Trigger* LightEnergyAvailable(PlayerbotAI* ai) { return new LightEnergyAvailableTrigger(ai); }
+        static Trigger* MediumEnergyAvailable(PlayerbotAI* ai) { return new MediumEnergyAvailableTrigger(ai); }
+        static Trigger* HighEnergyAvailable(PlayerbotAI* ai) { return new HighEnergyAvailableTrigger(ai); }
+        static Trigger* LootAvailable(PlayerbotAI* ai) { return new LootAvailableTrigger(ai); }
+        static Trigger* NoAttackers(PlayerbotAI* ai) { return new NoAttackersTrigger(ai); }
+        static Trigger* TankAoe(PlayerbotAI* ai) { return new TankAoeTrigger(ai); }
+        static Trigger* Timer(PlayerbotAI* ai) { return new TimerTrigger(ai); }
+        static Trigger* NoTarget(PlayerbotAI* ai) { return new NoTargetTrigger(ai); }
+        static Trigger* TargetInSight(PlayerbotAI* ai) { return new TargetInSightTrigger(ai); }
+        static Trigger* not_least_hp_target_active(PlayerbotAI* ai) { return new NotLeastHpTargetActiveTrigger(ai); }
+        static Trigger* has_nearest_adds(PlayerbotAI* ai) { return new HasNearestAddsTrigger(ai); }
+        static Trigger* enemy_player_is_attacking(PlayerbotAI* ai) { return new EnemyPlayerIsAttacking(ai); }
+        static Trigger* Random(PlayerbotAI* ai) { return new RandomTrigger(ai); }
+        static Trigger* seldom(PlayerbotAI* ai) { return new SeldomTrigger(ai); }
+        static Trigger* often(PlayerbotAI* ai) { return new OftenTrigger(ai); }
+        static Trigger* EnemyOutOfMelee(PlayerbotAI* ai) { return new EnemyOutOfMeleeTrigger(ai); }
+        static Trigger* EnemyOutOfSpell(PlayerbotAI* ai) { return new EnemyOutOfSpellRangeTrigger(ai); }
+        static Trigger* enemy_too_close_for_spell(PlayerbotAI* ai) { return new EnemyTooCloseForSpellTrigger(ai); }
+        static Trigger* enemy_too_close_for_melee(PlayerbotAI* ai) { return new EnemyTooCloseForMeleeTrigger(ai); }
+        static Trigger* ComboPointsAvailable(PlayerbotAI* ai) { return new ComboPointsAvailableTrigger(ai); }
+        static Trigger* MediumThreat(PlayerbotAI* ai) { return new MediumThreatTrigger(ai); }
+        static Trigger* Dead(PlayerbotAI* ai) { return new DeadTrigger(ai); }
+        static Trigger* PartyMemberDead(PlayerbotAI* ai) { return new PartyMemberDeadTrigger(ai); }
+        static Trigger* PartyMemberLowHealth(PlayerbotAI* ai) { return new PartyMemberLowHealthTrigger(ai); }
+        static Trigger* PartyMemberMediumHealth(PlayerbotAI* ai) { return new PartyMemberMediumHealthTrigger(ai); }
+        static Trigger* PartyMemberAlmostFullHealth(PlayerbotAI* ai) { return new PartyMemberAlmostFullHealthTrigger(ai); }
+        static Trigger* PartyMemberCriticalHealth(PlayerbotAI* ai) { return new PartyMemberCriticalHealthTrigger(ai); }
+        static Trigger* no_pet(PlayerbotAI* ai) { return new NoPetTrigger(ai); }
+        static Trigger* has_attackers(PlayerbotAI* ai) { return new HasAttackersTrigger(ai); }
+
+    };
+};
diff --git a/src/plugins/playerbot/strategy/triggers/WithinAreaTrigger.h b/src/plugins/playerbot/strategy/triggers/WithinAreaTrigger.h
new file mode 100644
index 0000000..01c130a
--- /dev/null
+++ b/src/plugins/playerbot/strategy/triggers/WithinAreaTrigger.h
@@ -0,0 +1,76 @@
+#pragma once
+#include "../Trigger.h"
+#include "../values/LastMovementValue.h"
+
+namespace ai
+{
+    class WithinAreaTrigger : public Trigger {
+    public:
+        WithinAreaTrigger(PlayerbotAI* ai) : Trigger(ai, "within area trigger") {}
+
+        virtual bool IsActive()
+		{
+
+
+            LastMovement& movement = context->GetValue<LastMovement&>("last movement")->Get();
+            if (!movement.lastAreaTrigger)
+                return false;
+
+            AreaTriggerEntry const* atEntry = sAreaTriggerStore.LookupEntry(movement.lastAreaTrigger);
+            if(!atEntry)
+                return false;
+
+            AreaTrigger const* at = sObjectMgr->GetAreaTrigger(movement.lastAreaTrigger);
+            if (!at)
+                return false;
+
+            return IsPointInAreaTriggerZone(atEntry, bot->GetMapId(), bot->GetPositionX(), bot->GetPositionY(), bot->GetPositionZ(), 0.5f);
+        }
+
+    private:
+        bool IsPointInAreaTriggerZone(AreaTriggerEntry const* atEntry, uint32 mapid, float x, float y, float z, float delta)
+        {
+            if (mapid != atEntry->mapid)
+                return false;
+
+            if (atEntry->radius > 0)
+            {
+                // if we have radius check it
+                float dist2 = (x - atEntry->x) * (x - atEntry->x) + (y - atEntry->y) * (y - atEntry->y) + (z - atEntry->z) * (z - atEntry->z);
+                if (dist2 > (atEntry->radius + delta) * (atEntry->radius + delta))
+                    return false;
+            }
+            else
+            {
+                // we have only extent
+
+                // rotate the players position instead of rotating the whole cube, that way we can make a simplified
+                // is-in-cube check and we have to calculate only one point instead of 4
+
+                // 2PI = 360, keep in mind that ingame orientation is counter-clockwise
+                double rotation = 2 * M_PI - atEntry->box_orientation;
+                double sinVal = sin(rotation);
+                double cosVal = cos(rotation);
+
+                float playerBoxDistX = x - atEntry->x;
+                float playerBoxDistY = y - atEntry->y;
+
+                float rotPlayerX = float(atEntry->x + playerBoxDistX * cosVal - playerBoxDistY * sinVal);
+                float rotPlayerY = float(atEntry->y + playerBoxDistY * cosVal + playerBoxDistX * sinVal);
+
+                // box edges are parallel to coordiante axis, so we can treat every dimension independently :D
+                float dz = z - atEntry->z;
+                float dx = rotPlayerX - atEntry->x;
+                float dy = rotPlayerY - atEntry->y;
+                if ((fabs(dx) > atEntry->box_x / 2 + delta) ||
+                        (fabs(dy) > atEntry->box_y / 2 + delta) ||
+                        (fabs(dz) > atEntry->box_z / 2 + delta))
+                {
+                    return false;
+                }
+            }
+
+            return true;
+        }
+    };
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/triggers/WorldPacketTrigger.h b/src/plugins/playerbot/strategy/triggers/WorldPacketTrigger.h
new file mode 100644
index 0000000..b0f8b87
--- /dev/null
+++ b/src/plugins/playerbot/strategy/triggers/WorldPacketTrigger.h
@@ -0,0 +1,36 @@
+#pragma once
+
+#include "../Trigger.h"
+
+namespace ai
+{
+    class WorldPacketTrigger : public Trigger {
+    public:
+        WorldPacketTrigger(PlayerbotAI* ai, string command) : Trigger(ai, command), triggered(false) {}
+
+        virtual void ExternalEvent(WorldPacket &packet, Player* owner = NULL)
+        {
+            this->packet = packet;
+            this->owner = owner;
+            triggered = true;
+        }
+
+        virtual Event Check()
+        {
+            if (!triggered)
+                return Event();
+
+            return Event(getName(), packet, owner);
+        }
+
+        virtual void Reset()
+        {
+            triggered = false;
+        }
+
+    private:
+        WorldPacket packet;
+        bool triggered;
+        Player* owner;
+    };
+}
diff --git a/src/plugins/playerbot/strategy/triggers/WorldPacketTriggerContext.h b/src/plugins/playerbot/strategy/triggers/WorldPacketTriggerContext.h
new file mode 100644
index 0000000..e1bda4f
--- /dev/null
+++ b/src/plugins/playerbot/strategy/triggers/WorldPacketTriggerContext.h
@@ -0,0 +1,85 @@
+#pragma once
+
+#include "WorldPacketTrigger.h"
+#include "WithinAreaTrigger.h"
+
+namespace ai
+{
+    class WorldPacketTriggerContext : public NamedObjectContext<Trigger>
+    {
+    public:
+        WorldPacketTriggerContext()
+        {
+            creators["gossip hello"] = &WorldPacketTriggerContext::gossip_hello;
+            creators["group invite"] = &WorldPacketTriggerContext::group_invite;
+            creators["group set leader"] = &WorldPacketTriggerContext::group_set_leader;
+            creators["not enough money"] = &WorldPacketTriggerContext::no_money;
+            creators["not enough reputation"] = &WorldPacketTriggerContext::no_reputation;
+            creators["cannot equip"] = &WorldPacketTriggerContext::cannot_equip;
+            creators["use game object"] = &WorldPacketTriggerContext::use_game_object;
+            creators["complete quest"] = &WorldPacketTriggerContext::complete_quest;
+            creators["accept quest"] = &WorldPacketTriggerContext::accept_quest;
+            creators["quest share"] = &WorldPacketTriggerContext::quest_share;
+            creators["loot roll"] = &WorldPacketTriggerContext::loot_roll;
+            creators["resurrect request"] = &WorldPacketTriggerContext::resurrect_request;
+            creators["area trigger"] = &WorldPacketTriggerContext::area_trigger;
+            creators["within area trigger"] = &WorldPacketTriggerContext::within_area_trigger;
+            creators["check mount state"] = &WorldPacketTriggerContext::check_mount_state;
+            creators["activate taxi"] = &WorldPacketTriggerContext::taxi;
+            creators["trade status"] = &WorldPacketTriggerContext::trade_status;
+            creators["loot response"] = &WorldPacketTriggerContext::loot_response;
+            creators["out of react range"] = &WorldPacketTriggerContext::out_of_react_range;
+            creators["quest objective completed"] = &WorldPacketTriggerContext::quest_objective_completed;
+            creators["item push result"] = &WorldPacketTriggerContext::item_push_result;
+            creators["party command"] = &WorldPacketTriggerContext::party_command;
+            creators["taxi done"] = &WorldPacketTriggerContext::taxi_done;
+            creators["cast failed"] = &WorldPacketTriggerContext::cast_failed;
+            creators["duel requested"] = &WorldPacketTriggerContext::duel_requested;
+            creators["ready check"] = &WorldPacketTriggerContext::ready_check;
+            creators["ready check finished"] = &WorldPacketTriggerContext::ready_check_finished;
+            creators["uninvite"] = &WorldPacketTriggerContext::uninvite;
+            creators["lfg join"] = &WorldPacketTriggerContext::lfg_update;
+            creators["lfg proposal"] = &WorldPacketTriggerContext::lfg_proposal;
+            creators["lfg role check"] = &WorldPacketTriggerContext::lfg_role_check;
+            creators["lfg leave"] = &WorldPacketTriggerContext::lfg_leave;
+            creators["guild invite"] = &WorldPacketTriggerContext::guild_invite;
+            creators["lfg teleport"] = &WorldPacketTriggerContext::lfg_teleport;
+        }
+
+    private:
+        static Trigger* guild_invite(PlayerbotAI* ai) { return new WorldPacketTrigger(ai, "guild invite"); }
+        static Trigger* lfg_teleport(PlayerbotAI* ai) { return new WorldPacketTrigger(ai, "lfg teleport"); }
+        static Trigger* lfg_leave(PlayerbotAI* ai) { return new WorldPacketTrigger(ai, "lfg leave"); }
+        static Trigger* lfg_proposal(PlayerbotAI* ai) { return new WorldPacketTrigger(ai, "lfg proposal"); }
+        static Trigger* lfg_role_check(PlayerbotAI* ai) { return new WorldPacketTrigger(ai, "lfg role check"); }
+        static Trigger* lfg_update(PlayerbotAI* ai) { return new WorldPacketTrigger(ai, "lfg join"); }
+        static Trigger* uninvite(PlayerbotAI* ai) { return new WorldPacketTrigger(ai, "uninvite"); }
+        static Trigger* ready_check_finished(PlayerbotAI* ai) { return new WorldPacketTrigger(ai, "ready check finished"); }
+        static Trigger* ready_check(PlayerbotAI* ai) { return new WorldPacketTrigger(ai, "ready check"); }
+        static Trigger* duel_requested(PlayerbotAI* ai) { return new WorldPacketTrigger(ai, "duel requested"); }
+        static Trigger* cast_failed(PlayerbotAI* ai) { return new WorldPacketTrigger(ai, "cast failed"); }
+        static Trigger* taxi_done(PlayerbotAI* ai) { return new WorldPacketTrigger(ai, "taxi done"); }
+        static Trigger* party_command(PlayerbotAI* ai) { return new WorldPacketTrigger(ai, "party command"); }
+        static Trigger* item_push_result(PlayerbotAI* ai) { return new WorldPacketTrigger(ai, "item push result"); }
+        static Trigger* quest_objective_completed(PlayerbotAI* ai) { return new WorldPacketTrigger(ai, "quest objective completed"); }
+        static Trigger* out_of_react_range(PlayerbotAI* ai) { return new OutOfReactRangeTrigger(ai); }
+        static Trigger* loot_response(PlayerbotAI* ai) { return new WorldPacketTrigger(ai, "loot response"); }
+        static Trigger* trade_status(PlayerbotAI* ai) { return new WorldPacketTrigger(ai, "trade status"); }
+        static Trigger* cannot_equip(PlayerbotAI* ai) { return new WorldPacketTrigger(ai, "cannot equip"); }
+        static Trigger* check_mount_state(PlayerbotAI* ai) { return new WorldPacketTrigger(ai, "check mount state"); }
+        static Trigger* area_trigger(PlayerbotAI* ai) { return new WorldPacketTrigger(ai, "area trigger"); }
+        static Trigger* within_area_trigger(PlayerbotAI* ai) { return new WithinAreaTrigger(ai); }
+        static Trigger* resurrect_request(PlayerbotAI* ai) { return new WorldPacketTrigger(ai, "resurrect request"); }
+        static Trigger* gossip_hello(PlayerbotAI* ai) { return new WorldPacketTrigger(ai, "gossip hello"); }
+        static Trigger* group_invite(PlayerbotAI* ai) { return new WorldPacketTrigger(ai, "group invite"); }
+        static Trigger* group_set_leader(PlayerbotAI* ai) { return new WorldPacketTrigger(ai, "group set leader"); }
+        static Trigger* no_money(PlayerbotAI* ai) { return new WorldPacketTrigger(ai, "not enough money"); }
+        static Trigger* no_reputation(PlayerbotAI* ai) { return new WorldPacketTrigger(ai, "not enough reputation"); }
+        static Trigger* use_game_object(PlayerbotAI* ai) { return new WorldPacketTrigger(ai, "use game object"); }
+        static Trigger* complete_quest(PlayerbotAI* ai) { return new WorldPacketTrigger(ai, "complete quest"); }
+        static Trigger* accept_quest(PlayerbotAI* ai) { return new WorldPacketTrigger(ai, "accept quest"); }
+        static Trigger* quest_share(PlayerbotAI* ai) { return new WorldPacketTrigger(ai, "quest share"); }
+        static Trigger* loot_roll(PlayerbotAI* ai) { return new WorldPacketTrigger(ai, "loot roll"); }
+        static Trigger* taxi(PlayerbotAI* ai) { return new WorldPacketTrigger(ai, "activate taxi"); }
+    };
+};
diff --git a/src/plugins/playerbot/strategy/values/AlwaysLootListValue.h b/src/plugins/playerbot/strategy/values/AlwaysLootListValue.h
new file mode 100644
index 0000000..22c2f3a
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/AlwaysLootListValue.h
@@ -0,0 +1,14 @@
+#pragma once
+#include "../Value.h"
+
+namespace ai
+{
+    class AlwaysLootListValue : public ManualSetValue<set<uint32>&>
+	{
+	public:
+        AlwaysLootListValue(PlayerbotAI* ai) : ManualSetValue<set<uint32>&>(ai, list) {}
+
+    private:
+        set<uint32> list;
+    };
+}
diff --git a/src/plugins/playerbot/strategy/values/AoeHealValues.cpp b/src/plugins/playerbot/strategy/values/AoeHealValues.cpp
new file mode 100644
index 0000000..14c50b2
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/AoeHealValues.cpp
@@ -0,0 +1,37 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "AoeHealValues.h"
+#include "../../PlayerbotAIConfig.h"
+
+using namespace ai;
+
+uint8 AoeHealValue::Calculate()
+{
+    Group* group = bot->GetGroup();
+    if (!group)
+    	return 0;
+
+    float range = 0;
+    if (qualifier == "low")
+    	range = sPlayerbotAIConfig.lowHealth;
+    else if (qualifier == "medium")
+    	range = sPlayerbotAIConfig.mediumHealth;
+    else if (qualifier == "critical")
+    	range = sPlayerbotAIConfig.criticalHealth;
+
+    uint8 count = 0;
+	Group::MemberSlotList const& groupSlot = group->GetMemberSlots();
+	for (Group::member_citerator itr = groupSlot.begin(); itr != groupSlot.end(); itr++)
+	{
+		Player *player = sObjectMgr->GetPlayerByLowGUID(itr->guid);
+		if( !player || !player->IsAlive())
+			continue;
+
+	    float percent = (static_cast<float> (player->GetHealth()) / player->GetMaxHealth()) * 100;
+	    if (percent <= range)
+	    	count++;
+	}
+
+	return count;
+}
+
diff --git a/src/plugins/playerbot/strategy/values/AoeHealValues.h b/src/plugins/playerbot/strategy/values/AoeHealValues.h
new file mode 100644
index 0000000..d7d52c7
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/AoeHealValues.h
@@ -0,0 +1,14 @@
+#pragma once
+#include "../Value.h"
+
+namespace ai
+{
+    class AoeHealValue : public Uint8CalculatedValue, public Qualified
+	{
+	public:
+    	AoeHealValue(PlayerbotAI* ai) : Uint8CalculatedValue(ai) {}
+
+    public:
+    	virtual uint8 Calculate();
+    };
+}
diff --git a/src/plugins/playerbot/strategy/values/AttackerCountValues.cpp b/src/plugins/playerbot/strategy/values/AttackerCountValues.cpp
new file mode 100644
index 0000000..a406a90
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/AttackerCountValues.cpp
@@ -0,0 +1,107 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "AttackerCountValues.h"
+#include "../../PlayerbotAIConfig.h"
+
+using namespace ai;
+
+uint8 MyAttackerCountValue::Calculate()
+{
+    return bot->getAttackers().size();
+}
+
+bool HasAggroValue::Calculate()
+{
+    Unit* target = GetTarget();
+    if (!target)
+        return true;
+
+    HostileReference *ref = bot->getHostileRefManager().getFirst();
+    if (!ref)
+        return true; // simulate as target is not atacking anybody yet
+
+    while( ref )
+    {
+        ThreatManager *threatManager = ref->GetSource();
+        Unit *attacker = threatManager->GetOwner();
+        Unit *victim = attacker->GetVictim();
+        if (victim == bot && target == attacker)
+            return true;
+        ref = ref->next();
+    }
+    return false;
+}
+
+uint8 AttackerCountValue::Calculate()
+{
+    int count = 0;
+    float range = sPlayerbotAIConfig.sightDistance;
+
+    list<ObjectGuid> attackers = context->GetValue<list<ObjectGuid> >("attackers")->Get();
+    for (list<ObjectGuid>::iterator i = attackers.begin(); i != attackers.end(); i++)
+    {
+        Unit* unit = ai->GetUnit(*i);
+        if (!unit || !unit->IsAlive())
+            continue;
+
+        float distance = bot->GetDistance(unit);
+        if (distance <= range)
+            count++;
+    }
+
+    return count;
+}
+
+uint8 BalancePercentValue::Calculate()
+{
+    float playerLevel = 0,
+        attackerLevel = 0;
+
+    Group* group = bot->GetGroup();
+    if (group)
+    {
+        Group::MemberSlotList const& groupSlot = group->GetMemberSlots();
+        for (Group::member_citerator itr = groupSlot.begin(); itr != groupSlot.end(); itr++)
+        {
+            Player *player = sObjectMgr->GetPlayerByLowGUID(itr->guid);
+            if( !player || !player->IsAlive())
+                continue;
+
+            playerLevel += player->getLevel();
+        }
+    }
+
+    list<ObjectGuid> v = context->GetValue<list<ObjectGuid> >("attackers")->Get();
+
+    for (list<ObjectGuid>::iterator i = v.begin(); i!=v.end(); i++)
+    {
+        Creature* creature = ai->GetCreature((*i));
+        if (!creature || !creature->IsAlive())
+            continue;
+
+        uint32 level = creature->getLevel();
+
+        switch (creature->GetCreatureTemplate()->rank) {
+        case CREATURE_ELITE_RARE:
+            level *= 2;
+            break;
+        case CREATURE_ELITE_ELITE:
+            level *= 3;
+            break;
+        case CREATURE_ELITE_RAREELITE:
+            level *= 3;
+            break;
+        case CREATURE_ELITE_WORLDBOSS:
+            level *= 5;
+            break;
+        }
+        attackerLevel += level;
+    }
+
+    if (!attackerLevel)
+        return 100;
+
+    float percent = playerLevel * 100 / attackerLevel;
+    return percent <= 200 ? (uint8)percent : 200;
+}
+
diff --git a/src/plugins/playerbot/strategy/values/AttackerCountValues.h b/src/plugins/playerbot/strategy/values/AttackerCountValues.h
new file mode 100644
index 0000000..9c77a3f
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/AttackerCountValues.h
@@ -0,0 +1,59 @@
+#pragma once
+#include "StatsValues.h"
+
+namespace ai
+{
+
+    class AttackerCountValue : public Uint8CalculatedValue, public Qualified
+    {
+    public:
+        AttackerCountValue(PlayerbotAI* ai) : Uint8CalculatedValue(ai) {}
+
+        Unit* GetTarget()
+        {
+            AiObjectContext* ctx = AiObject::context;
+            return ctx->GetValue<Unit*>(qualifier)->Get();
+        }
+        virtual uint8 Calculate();
+    };
+
+    class MyAttackerCountValue : public Uint8CalculatedValue, public Qualified
+    {
+    public:
+        MyAttackerCountValue(PlayerbotAI* ai) : Uint8CalculatedValue(ai) {}
+
+        Unit* GetTarget()
+        {
+            AiObjectContext* ctx = AiObject::context;
+            return ctx->GetValue<Unit*>(qualifier)->Get();
+        }
+        virtual uint8 Calculate();
+    };
+
+    class HasAggroValue : public BoolCalculatedValue, public Qualified
+    {
+    public:
+        HasAggroValue(PlayerbotAI* ai) : BoolCalculatedValue(ai) {}
+
+        Unit* GetTarget()
+        {
+            AiObjectContext* ctx = AiObject::context;
+            return ctx->GetValue<Unit*>(qualifier)->Get();
+        }
+        virtual bool Calculate();
+    };
+
+    class BalancePercentValue : public Uint8CalculatedValue, public Qualified
+    {
+    public:
+        BalancePercentValue(PlayerbotAI* ai) : Uint8CalculatedValue(ai) {}
+
+        Unit* GetTarget()
+        {
+            AiObjectContext* ctx = AiObject::context;
+            return ctx->GetValue<Unit*>(qualifier)->Get();
+        }
+        virtual uint8 Calculate();
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/values/AttackerWithoutAuraTargetValue.cpp b/src/plugins/playerbot/strategy/values/AttackerWithoutAuraTargetValue.cpp
new file mode 100644
index 0000000..10da8d2
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/AttackerWithoutAuraTargetValue.cpp
@@ -0,0 +1,26 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "AttackerWithoutAuraTargetValue.h"
+#include "../../PlayerbotAIConfig.h"
+
+using namespace ai;
+
+Unit* AttackerWithoutAuraTargetValue::Calculate()
+{
+    list<ObjectGuid> attackers = ai->GetAiObjectContext()->GetValue<list<ObjectGuid> >("attackers")->Get();
+    Unit* target = ai->GetAiObjectContext()->GetValue<Unit*>("current target")->Get();
+    for (list<ObjectGuid>::iterator i = attackers.begin(); i != attackers.end(); ++i)
+    {
+        Unit* unit = ai->GetUnit(*i);
+        if (!unit || unit == target)
+            continue;
+
+        if (bot->GetDistance(unit) > sPlayerbotAIConfig.spellDistance)
+            continue;
+
+        if (!ai->HasAura(qualifier, unit))
+            return unit;
+    }
+
+    return NULL;
+}
diff --git a/src/plugins/playerbot/strategy/values/AttackerWithoutAuraTargetValue.h b/src/plugins/playerbot/strategy/values/AttackerWithoutAuraTargetValue.h
new file mode 100644
index 0000000..70a8983
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/AttackerWithoutAuraTargetValue.h
@@ -0,0 +1,15 @@
+#pragma once
+#include "../Value.h"
+
+namespace ai
+{
+    class AttackerWithoutAuraTargetValue : public UnitCalculatedValue, public Qualified
+	{
+	public:
+        AttackerWithoutAuraTargetValue(PlayerbotAI* ai) :
+            UnitCalculatedValue(ai, "attacker without aura") {}
+
+    protected:
+        virtual Unit* Calculate();
+	};
+}
diff --git a/src/plugins/playerbot/strategy/values/AttackersValue.cpp b/src/plugins/playerbot/strategy/values/AttackersValue.cpp
new file mode 100644
index 0000000..e24f99d
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/AttackersValue.cpp
@@ -0,0 +1,94 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "AttackersValue.h"
+
+#include "../../../../server/game/Entities/Pet/Pet.h"
+
+using namespace ai;
+
+list<ObjectGuid> AttackersValue::Calculate()
+{
+    set<Unit*> targets;
+
+    AddAttackersOf(bot, targets);
+
+    Group* group = bot->GetGroup();
+    if (group)
+        AddAttackersOf(group, targets);
+
+    RemoveNonThreating(targets);
+
+    list<ObjectGuid> result;
+	for (set<Unit*>::iterator i = targets.begin(); i != targets.end(); i++)
+		result.push_back((*i)->GetGUID());
+
+    if (bot->duel && bot->duel->opponent)
+        result.push_back(bot->duel->opponent->GetGUID());
+
+	return result;
+}
+
+void AttackersValue::AddAttackersOf(Group* group, set<Unit*>& targets)
+{
+    Group::MemberSlotList const& groupSlot = group->GetMemberSlots();
+    for (Group::member_citerator itr = groupSlot.begin(); itr != groupSlot.end(); itr++)
+    {
+        Player *member = sObjectMgr->GetPlayerByLowGUID(itr->guid);
+        if (!member || !member->IsAlive() || member == bot)
+            continue;
+
+        if (member->IsBeingTeleported())
+            return;
+
+        AddAttackersOf(member, targets);
+
+        Pet* pet = member->GetPet();
+        if (pet)
+            AddAttackersOf(pet, targets);
+    }
+}
+
+void AttackersValue::AddAttackersOf(Unit* unit, set<Unit*>& targets)
+{
+    HostileRefManager& refManager = unit->getHostileRefManager();
+    HostileReference *ref = refManager.getFirst();
+    if (!ref)
+        return;
+
+    while( ref )
+    {
+        ThreatManager *threatManager = ref->GetSource();
+        Unit *attacker = threatManager->GetOwner();
+        Unit *victim = attacker->GetVictim();
+        if (victim == unit)
+            targets.insert(attacker);
+        ref = ref->next();
+    }
+}
+
+void AttackersValue::RemoveNonThreating(set<Unit*>& targets)
+{
+    for(set<Unit *>::iterator tIter = targets.begin(); tIter != targets.end();)
+    {
+        Unit* unit = *tIter;
+        if(!bot->IsWithinLOSInMap(unit) || bot->GetMapId() != unit->GetMapId() || !hasRealThreat(unit))
+        {
+            set<Unit *>::iterator tIter2 = tIter;
+            ++tIter;
+            targets.erase(tIter2);
+        }
+        else
+            ++tIter;
+    }
+}
+
+bool AttackersValue::hasRealThreat(Unit *attacker)
+{
+    return attacker &&
+        attacker->IsInWorld() &&
+        attacker->IsAlive() &&
+        !attacker->IsPolymorphed() &&
+        !attacker->isInRoots() &&
+        !attacker->IsFriendlyTo(bot) &&
+        (attacker->getThreatManager().getCurrentVictim() || dynamic_cast<Player*>(attacker));
+}
diff --git a/src/plugins/playerbot/strategy/values/AttackersValue.h b/src/plugins/playerbot/strategy/values/AttackersValue.h
new file mode 100644
index 0000000..02f1b62
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/AttackersValue.h
@@ -0,0 +1,20 @@
+#pragma once
+#include "../Value.h"
+#include "TargetValue.h"
+#include "NearestUnitsValue.h"
+
+namespace ai
+{
+    class AttackersValue : public ObjectGuidListCalculatedValue
+	{
+	public:
+        AttackersValue(PlayerbotAI* ai) : ObjectGuidListCalculatedValue(ai, "attackers", 5) {}
+        list<ObjectGuid> Calculate();
+
+	private:
+        void AddAttackersOf(Group* group, set<Unit*>& targets);
+        void AddAttackersOf(Unit* unit, set<Unit*>& targets);
+		void RemoveNonThreating(set<Unit*>& targets);
+		bool hasRealThreat(Unit* attacker);
+    };
+}
diff --git a/src/plugins/playerbot/strategy/values/AvailableLootValue.h b/src/plugins/playerbot/strategy/values/AvailableLootValue.h
new file mode 100644
index 0000000..806f2ef
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/AvailableLootValue.h
@@ -0,0 +1,40 @@
+#pragma once
+#include "../Value.h"
+#include "../../LootObjectStack.h"
+
+namespace ai
+{
+   
+    class AvailableLootValue : public ManualSetValue<LootObjectStack*>
+	{
+	public:
+        AvailableLootValue(PlayerbotAI* ai) : ManualSetValue<LootObjectStack*>(ai, NULL) 
+        {
+            value = new LootObjectStack(ai->GetBot());
+        }
+
+        virtual ~AvailableLootValue()
+        {
+            if (value) 
+                delete value;
+        }
+    };
+
+    class LootTargetValue : public ManualSetValue<LootObject>
+    {
+    public:
+        LootTargetValue(PlayerbotAI* ai) : ManualSetValue<LootObject>(ai, LootObject()) {}
+    };
+
+    class CanLootValue : public BoolCalculatedValue
+    {
+    public:
+        CanLootValue(PlayerbotAI* ai) : BoolCalculatedValue(ai) {}
+
+        virtual bool Calculate()
+        {
+            LootObject loot = AI_VALUE(LootObject, "loot target");
+            return !loot.IsEmpty() && loot.GetWorldObject(bot) && AI_VALUE2(float, "distance", "loot target") <= INTERACTION_DISTANCE;
+        }
+    };
+}
diff --git a/src/plugins/playerbot/strategy/values/CcTargetValue.cpp b/src/plugins/playerbot/strategy/values/CcTargetValue.cpp
new file mode 100644
index 0000000..2660a81
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/CcTargetValue.cpp
@@ -0,0 +1,88 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "CcTargetValue.h"
+#include "../../PlayerbotAIConfig.h"
+#include "../Action.h"
+
+using namespace ai;
+
+class FindTargetForCcStrategy : public FindTargetStrategy
+{
+public:
+    FindTargetForCcStrategy(PlayerbotAI* ai, string spell) : FindTargetStrategy(ai)
+    {
+        this->spell = spell;
+        maxDistance = 0;
+    }
+
+public:
+    virtual void CheckAttacker(Unit* creature, ThreatManager* threatManager)
+    {
+        Player* bot = ai->GetBot();
+        if (*ai->GetAiObjectContext()->GetValue<Unit*>("current target") == creature)
+            return;
+
+        uint8 health = creature->GetHealthPct();
+        if (health < sPlayerbotAIConfig.mediumHealth)
+            return;
+
+        if (!ai->CanCastSpell(spell, creature))
+            return;
+
+        if (*ai->GetAiObjectContext()->GetValue<Unit*>("rti target") == creature)
+        {
+            result = creature;
+            return;
+        }
+
+        float minDistance = sPlayerbotAIConfig.spellDistance;
+        Group* group = bot->GetGroup();
+        if (!group)
+            return;
+
+        if (group->GetTargetIcon(4) == creature->GetGUID())
+        {
+            result = creature;
+            return;
+        }
+
+        int tankCount, dpsCount;
+        GetPlayerCount(creature, &tankCount, &dpsCount);
+        if (!tankCount || !dpsCount)
+        {
+            result = creature;
+            return;
+        }
+
+        Group::MemberSlotList const& groupSlot = group->GetMemberSlots();
+        for (Group::member_citerator itr = groupSlot.begin(); itr != groupSlot.end(); itr++)
+        {
+            Player *member = sObjectMgr->GetPlayerByLowGUID(itr->guid);
+            if( !member || !member->IsAlive() || member == bot)
+                continue;
+
+            if (!ai->IsTank(member))
+                continue;
+
+            float distance = member->GetDistance(creature);
+            if (distance < minDistance)
+                minDistance = distance;
+        }
+
+        if (!result || minDistance > maxDistance)
+        {
+            result = creature;
+            maxDistance = minDistance;
+        }
+    }
+
+private:
+    string spell;
+    float maxDistance;
+};
+
+Unit* CcTargetValue::Calculate()
+{
+    FindTargetForCcStrategy strategy(ai, qualifier);
+    return FindTarget(&strategy);
+}
diff --git a/src/plugins/playerbot/strategy/values/CcTargetValue.h b/src/plugins/playerbot/strategy/values/CcTargetValue.h
new file mode 100644
index 0000000..a27f8c7
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/CcTargetValue.h
@@ -0,0 +1,16 @@
+#pragma once
+#include "../Value.h"
+#include "TargetValue.h"
+
+namespace ai
+{
+   
+    class CcTargetValue : public TargetValue, public Qualified
+	{
+	public:
+        CcTargetValue(PlayerbotAI* ai) : TargetValue(ai) {}
+
+    public:
+        Unit* Calculate();
+    };
+}
diff --git a/src/plugins/playerbot/strategy/values/ChatValue.h b/src/plugins/playerbot/strategy/values/ChatValue.h
new file mode 100644
index 0000000..b39a583
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/ChatValue.h
@@ -0,0 +1,11 @@
+#pragma once
+#include "../Value.h"
+
+namespace ai
+{
+    class ChatValue : public ManualSetValue<ChatMsg>
+	{
+	public:
+        ChatValue(PlayerbotAI* ai) : ManualSetValue<ChatMsg>(ai, CHAT_MSG_WHISPER) {}
+    };
+}
diff --git a/src/plugins/playerbot/strategy/values/CurrentCcTargetValue.cpp b/src/plugins/playerbot/strategy/values/CurrentCcTargetValue.cpp
new file mode 100644
index 0000000..932b0c0
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/CurrentCcTargetValue.cpp
@@ -0,0 +1,31 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "CurrentCcTargetValue.h"
+
+using namespace ai;
+
+class FindCurrentCcTargetStrategy : public FindTargetStrategy
+{
+public:
+    FindCurrentCcTargetStrategy(PlayerbotAI* ai, string spell) : FindTargetStrategy(ai)
+    {
+        this->spell = spell;
+    }
+
+public:
+    virtual void CheckAttacker(Unit* attacker, ThreatManager* threatManager)
+    {
+        if (ai->HasAura(spell, attacker))
+            result = attacker;
+    }
+
+private:
+    string spell;
+};
+
+
+Unit* CurrentCcTargetValue::Calculate()
+{
+    FindCurrentCcTargetStrategy strategy(ai, qualifier);
+    return FindTarget(&strategy);
+}
diff --git a/src/plugins/playerbot/strategy/values/CurrentCcTargetValue.h b/src/plugins/playerbot/strategy/values/CurrentCcTargetValue.h
new file mode 100644
index 0000000..30646c7
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/CurrentCcTargetValue.h
@@ -0,0 +1,16 @@
+#pragma once
+#include "../Value.h"
+#include "TargetValue.h"
+
+namespace ai
+{
+   
+    class CurrentCcTargetValue : public TargetValue, public Qualified
+	{
+	public:
+        CurrentCcTargetValue(PlayerbotAI* ai) : TargetValue(ai) {}
+
+    public:
+        Unit* Calculate();
+    };
+}
diff --git a/src/plugins/playerbot/strategy/values/CurrentTargetValue.cpp b/src/plugins/playerbot/strategy/values/CurrentTargetValue.cpp
new file mode 100644
index 0000000..4e97d2c
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/CurrentTargetValue.cpp
@@ -0,0 +1,22 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "CurrentTargetValue.h"
+
+using namespace ai;
+
+Unit* CurrentTargetValue::Get()
+{
+    if (selection.IsEmpty())
+        return NULL;
+
+    Unit* unit = ObjectAccessor::GetUnit(*bot, selection);
+    if (unit && !bot->IsWithinLOSInMap(unit))
+        return NULL;
+
+    return unit;
+}
+
+void CurrentTargetValue::Set(Unit* target)
+{
+    selection = target ? target->GetGUID() : ObjectGuid::Empty;
+}
diff --git a/src/plugins/playerbot/strategy/values/CurrentTargetValue.h b/src/plugins/playerbot/strategy/values/CurrentTargetValue.h
new file mode 100644
index 0000000..6b9fb69
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/CurrentTargetValue.h
@@ -0,0 +1,17 @@
+#pragma once
+#include "../Value.h"
+
+namespace ai
+{
+    class CurrentTargetValue : public UnitManualSetValue
+	{
+	public:
+        CurrentTargetValue(PlayerbotAI* ai) : UnitManualSetValue(ai, NULL) {}
+
+        virtual Unit* Get();
+        virtual void Set(Unit* unit);
+
+    private:
+        ObjectGuid selection;
+    };
+}
diff --git a/src/plugins/playerbot/strategy/values/DistanceValue.h b/src/plugins/playerbot/strategy/values/DistanceValue.h
new file mode 100644
index 0000000..aee094f
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/DistanceValue.h
@@ -0,0 +1,35 @@
+#pragma once
+#include "../Value.h"
+#include "TargetValue.h"
+#include "../../LootObjectStack.h"
+
+namespace ai
+{
+    class DistanceValue : public FloatCalculatedValue, public Qualified
+	{
+	public:
+        DistanceValue(PlayerbotAI* ai) : FloatCalculatedValue(ai) {}
+
+    public:
+        float Calculate()
+        {
+            if (qualifier == "loot target")
+            {
+                LootObject loot = AI_VALUE(LootObject, qualifier);
+                if (loot.IsEmpty())
+                    return 0.0f;
+
+                WorldObject* obj = loot.GetWorldObject(bot);
+                if (!obj)
+                    return 0.0f;
+
+                return ai->GetBot()->GetDistance2d(obj);
+            }
+            Unit* target = AI_VALUE(Unit*, qualifier);
+            if (!target || !target->IsInWorld())
+                return 0.0f;
+
+            return ai->GetBot()->GetDistance2d(target);
+        }
+    };
+}
diff --git a/src/plugins/playerbot/strategy/values/DpsTargetValue.cpp b/src/plugins/playerbot/strategy/values/DpsTargetValue.cpp
new file mode 100644
index 0000000..afcdcbc
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/DpsTargetValue.cpp
@@ -0,0 +1,45 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "DpsTargetValue.h"
+
+using namespace ai;
+
+class FindTargetForDpsStrategy : public FindTargetStrategy
+{
+public:
+    FindTargetForDpsStrategy(PlayerbotAI* ai) : FindTargetStrategy(ai)
+    {
+        minThreat = 0;
+        maxTankCount = 0;
+        minDpsCount = 0;
+    }
+
+public:
+    virtual void CheckAttacker(Unit* creature, ThreatManager* threatManager)
+    {
+        float threat = threatManager->getThreat(ai->GetBot());
+        int tankCount, dpsCount;
+        GetPlayerCount(creature, &tankCount, &dpsCount);
+
+        if (!result ||
+            minThreat >= threat && (maxTankCount <= tankCount || minDpsCount >= dpsCount))
+        {
+            minThreat = threat;
+            maxTankCount = tankCount;
+            minDpsCount = dpsCount;
+            result = creature;
+        }
+    }
+
+protected:
+    float minThreat;
+    int maxTankCount;
+    int minDpsCount;
+};
+
+
+Unit* DpsTargetValue::Calculate()
+{
+    FindTargetForDpsStrategy strategy(ai);
+    return FindTarget(&strategy);
+}
diff --git a/src/plugins/playerbot/strategy/values/DpsTargetValue.h b/src/plugins/playerbot/strategy/values/DpsTargetValue.h
new file mode 100644
index 0000000..dcfcc8b
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/DpsTargetValue.h
@@ -0,0 +1,16 @@
+#pragma once
+#include "../Value.h"
+#include "TargetValue.h"
+
+namespace ai
+{
+   
+    class DpsTargetValue : public TargetValue
+	{
+	public:
+        DpsTargetValue(PlayerbotAI* ai) : TargetValue(ai) {}
+
+    public:
+        Unit* Calculate();
+    };
+}
diff --git a/src/plugins/playerbot/strategy/values/DuelTargetValue.cpp b/src/plugins/playerbot/strategy/values/DuelTargetValue.cpp
new file mode 100644
index 0000000..06c9bf3
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/DuelTargetValue.cpp
@@ -0,0 +1,10 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "DuelTargetValue.h"
+
+using namespace ai;
+
+Unit* DuelTargetValue::Calculate()
+{
+    return bot->duel ? bot->duel->opponent : NULL;
+}
diff --git a/src/plugins/playerbot/strategy/values/DuelTargetValue.h b/src/plugins/playerbot/strategy/values/DuelTargetValue.h
new file mode 100644
index 0000000..9e7d2d6
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/DuelTargetValue.h
@@ -0,0 +1,15 @@
+#pragma once
+#include "../Value.h"
+#include "TargetValue.h"
+
+namespace ai
+{
+    class DuelTargetValue : public TargetValue
+	{
+	public:
+        DuelTargetValue(PlayerbotAI* ai) : TargetValue(ai) {}
+
+    public:
+        Unit* Calculate();
+    };
+}
diff --git a/src/plugins/playerbot/strategy/values/EnemyHealerTargetValue.cpp b/src/plugins/playerbot/strategy/values/EnemyHealerTargetValue.cpp
new file mode 100644
index 0000000..d4df967
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/EnemyHealerTargetValue.cpp
@@ -0,0 +1,36 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "EnemyHealerTargetValue.h"
+#include "../../PlayerbotAIConfig.h"
+
+using namespace ai;
+
+Unit* EnemyHealerTargetValue::Calculate()
+{
+    string spell = qualifier;
+
+    list<ObjectGuid> attackers = ai->GetAiObjectContext()->GetValue<list<ObjectGuid> >("attackers")->Get();
+    Unit* target = ai->GetAiObjectContext()->GetValue<Unit*>("current target")->Get();
+    for (list<ObjectGuid>::iterator i = attackers.begin(); i != attackers.end(); ++i)
+    {
+        Unit* unit = ai->GetUnit(*i);
+        if (!unit || unit == target)
+            continue;
+
+        if (bot->GetDistance(unit) > sPlayerbotAIConfig.spellDistance)
+            continue;
+
+        if (!ai->IsInterruptableSpellCasting(unit, spell))
+            continue;
+
+        Spell* spell = unit->GetCurrentSpell(CURRENT_GENERIC_SPELL);
+        if (spell && spell->m_spellInfo->IsPositive())
+            return unit;
+
+        spell = unit->GetCurrentSpell(CURRENT_CHANNELED_SPELL);
+        if (spell && spell->m_spellInfo->IsPositive())
+            return unit;
+    }
+
+    return NULL;
+}
diff --git a/src/plugins/playerbot/strategy/values/EnemyHealerTargetValue.h b/src/plugins/playerbot/strategy/values/EnemyHealerTargetValue.h
new file mode 100644
index 0000000..bea36c4
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/EnemyHealerTargetValue.h
@@ -0,0 +1,15 @@
+#pragma once
+#include "../Value.h"
+
+namespace ai
+{
+    class EnemyHealerTargetValue : public UnitCalculatedValue, public Qualified
+	{
+	public:
+        EnemyHealerTargetValue(PlayerbotAI* ai) :
+            UnitCalculatedValue(ai, "enemy healer target") {}
+
+    protected:
+        virtual Unit* Calculate();
+	};
+}
diff --git a/src/plugins/playerbot/strategy/values/EnemyPlayerValue.cpp b/src/plugins/playerbot/strategy/values/EnemyPlayerValue.cpp
new file mode 100644
index 0000000..5576e75
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/EnemyPlayerValue.cpp
@@ -0,0 +1,34 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "EnemyPlayerValue.h"
+#include "TargetValue.h"
+
+using namespace ai;
+using namespace std;
+
+class FindEnemyPlayerStrategy : public FindTargetStrategy
+{
+public:
+    FindEnemyPlayerStrategy(PlayerbotAI* ai) : FindTargetStrategy(ai)
+    {
+    }
+
+public:
+    virtual void CheckAttacker(Unit* attacker, ThreatManager* threatManager)
+    {
+        if (!result)
+        {
+            Player* enemy = dynamic_cast<Player*>(attacker);
+            if (enemy && ai->IsOpposing(enemy) && enemy->IsOutdoorPvPActive())
+                result = attacker;
+        }
+    }
+
+};
+
+
+Unit* EnemyPlayerValue::Calculate()
+{
+    FindEnemyPlayerStrategy strategy(ai);
+    return FindTarget(&strategy);
+}
diff --git a/src/plugins/playerbot/strategy/values/EnemyPlayerValue.h b/src/plugins/playerbot/strategy/values/EnemyPlayerValue.h
new file mode 100644
index 0000000..ea50739
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/EnemyPlayerValue.h
@@ -0,0 +1,15 @@
+#pragma once
+#include "../Value.h"
+#include "TargetValue.h"
+
+namespace ai
+{
+    class EnemyPlayerValue : public TargetValue
+	{
+	public:
+        EnemyPlayerValue(PlayerbotAI* ai) : TargetValue(ai) {}
+
+    public:
+        Unit* Calculate();
+    };
+}
diff --git a/src/plugins/playerbot/strategy/values/Formations.cpp b/src/plugins/playerbot/strategy/values/Formations.cpp
new file mode 100644
index 0000000..808cffe
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/Formations.cpp
@@ -0,0 +1,377 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "Formations.h"
+#include "formations/Arrow.h"
+
+using namespace ai;
+
+WorldLocation Formation::NullLocation = WorldLocation();
+
+namespace ai
+{
+    class MeleeFormation : public FollowFormation
+    {
+    public:
+        MeleeFormation(PlayerbotAI* ai) : FollowFormation(ai, "melee") {}
+        virtual string GetTargetName() { return "master target"; }
+    };
+
+    class QueueFormation : public FollowFormation
+    {
+    public:
+        QueueFormation(PlayerbotAI* ai) : FollowFormation(ai, "queue") {}
+        virtual string GetTargetName() { return "line target"; }
+    };
+
+    class NearFormation : public MoveFormation
+    {
+    public:
+        NearFormation(PlayerbotAI* ai) : MoveFormation(ai, "near") {}
+        virtual WorldLocation GetLocation()
+        {
+            Player* master = GetMaster();
+            if (!master)
+                return WorldLocation();
+
+            float range = sPlayerbotAIConfig.followDistance;
+            float angle = GetFollowAngle();
+            float x = master->GetPositionX() + cos(angle) * range;
+            float y = master->GetPositionY() + sin(angle) * range;
+            float z = master->GetPositionZ();
+            float ground = master->GetMap()->GetHeight(x, y, z + 0.5f);
+            if (ground <= INVALID_HEIGHT)
+                return Formation::NullLocation;
+
+            return WorldLocation(master->GetMapId(), x, y, ground + 0.5f);
+        }
+
+        virtual float GetMaxDistance() { return sPlayerbotAIConfig.followDistance; }
+    };
+
+
+    class ChaosFormation : public MoveFormation
+    {
+    public:
+        ChaosFormation(PlayerbotAI* ai) : MoveFormation(ai, "chaos") {}
+        virtual WorldLocation GetLocation()
+        {
+            Player* master = GetMaster();
+            if (!master)
+                return WorldLocation();
+
+            float range = sPlayerbotAIConfig.lootDistance * (float)(rand() % 10) / 10;
+			float angle = GetFollowAngle();
+            float x = master->GetPositionX() + cos(angle) * range;
+            float y = master->GetPositionY() + sin(angle) * range;
+            float z = master->GetPositionZ();
+            float ground = master->GetMap()->GetHeight(x, y, z + 0.5f);
+            if (ground <= INVALID_HEIGHT)
+                return Formation::NullLocation;
+
+            return WorldLocation(master->GetMapId(), x, y, ground + 0.5f);
+        }
+
+        virtual float GetMaxDistance() { return sPlayerbotAIConfig.lootDistance; }
+    };
+
+    class CircleFormation : public MoveFormation
+    {
+    public:
+        CircleFormation(PlayerbotAI* ai) : MoveFormation(ai, "circle") {}
+        virtual WorldLocation GetLocation()
+        {
+            float range = 2.0f;
+
+            Unit* target = AI_VALUE(Unit*, "current target");
+            Player* master = GetMaster();
+            if (!target)
+                target = master;
+
+            if (!target)
+				return Formation::NullLocation;
+
+            switch (bot->getClass())
+            {
+            case CLASS_HUNTER:
+            case CLASS_MAGE:
+            case CLASS_PRIEST:
+            case CLASS_WARLOCK:
+                range = sPlayerbotAIConfig.fleeDistance;
+                break;
+            case CLASS_DRUID:
+                if (!ai->IsTank(bot))
+                    range = sPlayerbotAIConfig.fleeDistance;
+                break;
+            case CLASS_SHAMAN:
+                if (ai->IsHeal(bot))
+                    range = sPlayerbotAIConfig.fleeDistance;
+                break;
+            }
+
+            float x = target->GetPositionX();
+            float y = target->GetPositionY();
+            float z = target->GetPositionZ();
+            float ground = target->GetMap()->GetHeight(x, y, z + 0.5f);
+            if (ground <= INVALID_HEIGHT)
+                return Formation::NullLocation;
+
+            float angle = GetFollowAngle();
+            return WorldLocation(bot->GetMapId(), x + cos(angle) * range, y + sin(angle) * range, ground + 0.5f);
+        }
+    };
+
+    class LineFormation : public MoveFormation
+    {
+    public:
+        LineFormation(PlayerbotAI* ai) : MoveFormation(ai, "line") {}
+        virtual WorldLocation GetLocation()
+        {
+            Group* group = bot->GetGroup();
+            if (!group)
+                return Formation::NullLocation;
+
+            float range = 2.0f;
+
+            Player* master = GetMaster();
+            if (!master)
+                return Formation::NullLocation;
+
+            float x = master->GetPositionX();
+            float y = master->GetPositionY();
+            float z = master->GetPositionZ();
+            float orientation = master->GetOrientation();
+
+            vector<Player*> players;
+            GroupReference *gref = group->GetFirstMember();
+            while( gref )
+            {
+                Player* member = gref->GetSource();
+                if (member != master)
+                    players.push_back(member);
+
+                gref = gref->next();
+            }
+
+            players.insert(players.begin() + group->GetMembersCount() / 2, master);
+
+            return MoveLine(players, 0.0f, x, y, z, orientation, range);
+        }
+    };
+
+    class ShieldFormation : public MoveFormation
+    {
+    public:
+        ShieldFormation(PlayerbotAI* ai) : MoveFormation(ai, "shield") {}
+        virtual WorldLocation GetLocation()
+        {
+            Group* group = bot->GetGroup();
+            if (!group)
+                return Formation::NullLocation;
+
+            float range = sPlayerbotAIConfig.followDistance;
+
+            Player* master = GetMaster();
+            if (!master)
+                return Formation::NullLocation;
+
+            float x = master->GetPositionX();
+            float y = master->GetPositionY();
+            float z = master->GetPositionZ();
+            float orientation = master->GetOrientation();
+
+            vector<Player*> tanks;
+            vector<Player*> dps;
+            GroupReference *gref = group->GetFirstMember();
+            while( gref )
+            {
+                Player* member = gref->GetSource();
+                if (member != master)
+                {
+                    if (ai->IsTank(member))
+                        tanks.push_back(member);
+                    else
+                        dps.push_back(member);
+                }
+
+                gref = gref->next();
+            }
+
+            if (ai->IsTank(master))
+                tanks.insert(tanks.begin() + (tanks.size() + 1) / 2, master);
+            else
+                dps.insert(dps.begin() + (dps.size() + 1) / 2, master);
+
+            if (ai->IsTank(bot) && ai->IsTank(master))
+            {
+                return MoveLine(tanks, 0.0f, x, y, z, orientation, range);
+            }
+            if (!ai->IsTank(bot) && !ai->IsTank(master))
+            {
+                return MoveLine(dps, 0.0f, x, y, z, orientation, range);
+            }
+            if (ai->IsTank(bot) && !ai->IsTank(master))
+            {
+                float diff = tanks.size() % 2 == 0 ? -sPlayerbotAIConfig.tooCloseDistance / 2.0f : 0.0f;
+                return MoveLine(tanks, diff, x + cos(orientation) * range, y + sin(orientation) * range, z, orientation, range);
+            }
+            if (!ai->IsTank(bot) && ai->IsTank(master))
+            {
+                float diff = dps.size() % 2 == 0 ? -sPlayerbotAIConfig.tooCloseDistance / 2.0f : 0.0f;
+                return MoveLine(dps, diff, x - cos(orientation) * range, y - sin(orientation) * range, z, orientation, range);
+            }
+            return Formation::NullLocation;
+        }
+    };
+};
+
+float Formation::GetFollowAngle()
+{
+    Player* master = GetMaster();
+    Group* group = master ? master->GetGroup() : bot->GetGroup();
+    if (!group)
+        return 0.0f;
+
+    int index = 1;
+    for (GroupReference *ref = group->GetFirstMember(); ref; ref = ref->next())
+    {
+        if( ref->GetSource() == master)
+            continue;
+
+        if( ref->GetSource() == bot)
+            return 2 * M_PI / (group->GetMembersCount() -1) * index;
+
+        index++;
+    }
+    return 0;
+}
+
+FormationValue::FormationValue(PlayerbotAI* ai) : ManualSetValue<Formation*>(ai, new NearFormation(ai), "formation")
+{
+}
+
+bool SetFormationAction::Execute(Event event)
+{
+    string formation = event.getParam();
+
+	Value<Formation*>* value = context->GetValue<Formation*>("formation");
+    if (formation == "?" || formation.empty())
+    {
+        ostringstream str; str << "Formation: |cff00ff00" << value->Get()->getName();
+        ai->TellMaster(str);
+        return true;
+    }
+
+    if (formation == "melee")
+    {
+        if (value->Get()) delete value->Get();
+        value->Set(new MeleeFormation(ai));
+    }
+    else if (formation == "queue")
+    {
+        if (value->Get()) delete value->Get();
+        value->Set(new QueueFormation(ai));
+    }
+    else if (formation == "chaos")
+    {
+        if (value->Get()) delete value->Get();
+        value->Set(new ChaosFormation(ai));
+    }
+    else if (formation == "circle")
+    {
+        if (value->Get()) delete value->Get();
+        value->Set(new CircleFormation(ai));
+    }
+    else if (formation == "line")
+    {
+        if (value->Get()) delete value->Get();
+        value->Set(new LineFormation(ai));
+    }
+    else if (formation == "shield")
+    {
+        if (value->Get()) delete value->Get();
+        value->Set(new ShieldFormation(ai));
+    }
+    else if (formation == "arrow")
+    {
+        if (value->Get()) delete value->Get();
+        value->Set(new ArrowFormation(ai));
+    }
+    else if (formation == "near" || formation == "default")
+    {
+        if (value->Get()) delete value->Get();
+        value->Set(new NearFormation(ai));
+    }
+    else
+    {
+        ostringstream str; str << "Invalid formation: |cffff0000" << formation;
+        ai->TellMaster(str);
+        ai->TellMaster("Please set to any of:|cffffffff melee (default), queue, chaos, circle, line, shield, arrow, near");
+        return false;
+    }
+
+    ostringstream str; str << "Formation set to: " << formation;
+    ai->TellMaster(str);
+    return true;
+}
+
+
+WorldLocation MoveFormation::MoveLine(vector<Player*> line, float diff, float cx, float cy, float cz, float orientation, float range)
+{
+    if (line.size() < 5)
+    {
+        return MoveSingleLine(line, diff, cx, cy, cz, orientation, range);
+    }
+
+    int lines = ceil((double)line.size() / 5.0);
+    for (int i = 0; i < lines; i++)
+    {
+        float radius = range * i;
+        float x = cx + cos(orientation) * radius;
+        float y = cy + sin(orientation) * radius;
+        vector<Player*> singleLine;
+        for (int j = 0; j < 5 && !line.empty(); j++)
+        {
+            singleLine.push_back(line[line.size() - 1]);
+            line.pop_back();
+        }
+
+        WorldLocation loc = MoveSingleLine(singleLine, diff, x, y,cz, orientation, range);
+        if (loc != Formation::NullLocation)
+            return loc;
+    }
+
+    return Formation::NullLocation;
+}
+
+WorldLocation MoveFormation::MoveSingleLine(vector<Player*> line, float diff, float cx, float cy, float cz, float orientation, float range)
+{
+    float count = line.size();
+    float angle = orientation - M_PI / 2.0f;
+    float x = cx + cos(angle) * (range * floor(count / 2.0f) + diff);
+    float y = cy + sin(angle) * (range * floor(count / 2.0f) + diff);
+
+    int index = 0;
+    for (vector<Player*>::iterator i = line.begin(); i != line.end(); i++)
+    {
+        Player* member = *i;
+
+        if (member == bot)
+        {
+            float angle = orientation + M_PI / 2.0f;
+            float radius = range * index;
+
+            float lx = x + cos(angle) * radius;
+            float ly = y + sin(angle) * radius;
+            float lz = cz;
+            float ground = bot->GetMap()->GetHeight(lx, ly, lz + 0.5f);
+            if (ground <= INVALID_HEIGHT)
+                return Formation::NullLocation;
+
+            return WorldLocation(bot->GetMapId(), lx, ly, ground + 0.5f);
+        }
+
+        index++;
+    }
+
+    return Formation::NullLocation;
+}
diff --git a/src/plugins/playerbot/strategy/values/Formations.h b/src/plugins/playerbot/strategy/values/Formations.h
new file mode 100644
index 0000000..2589cd7
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/Formations.h
@@ -0,0 +1,52 @@
+#pragma once
+#include "../Value.h"
+#include "../../PlayerbotAIConfig.h"
+
+namespace ai
+{
+    class Formation : public AiNamedObject
+    {
+    public:
+        Formation(PlayerbotAI* ai, string name) : AiNamedObject (ai, name) {}
+
+    public:
+        virtual string GetTargetName() { return ""; }
+        virtual WorldLocation GetLocation() { return NullLocation; }
+        virtual float GetMaxDistance() { return sPlayerbotAIConfig.followDistance; }
+        static WorldLocation NullLocation;
+
+    protected:
+        float GetFollowAngle();
+    };
+
+    class FollowFormation : public Formation
+    {
+    public:
+        FollowFormation(PlayerbotAI* ai, string name) : Formation(ai, name) {}
+    };
+
+    class MoveFormation : public Formation
+    {
+    public:
+        MoveFormation(PlayerbotAI* ai, string name) : Formation(ai, name) {}
+
+    protected:
+        WorldLocation MoveLine(vector<Player*> line, float diff, float cx, float cy, float cz, float orientation, float range);
+        WorldLocation MoveSingleLine(vector<Player*> line, float diff, float cx, float cy, float cz, float orientation, float range);
+    };
+
+    class FormationValue : public ManualSetValue<Formation*>
+	{
+	public:
+        FormationValue(PlayerbotAI* ai);
+        ~FormationValue() { if (value) { delete value; value = NULL; } }
+    };
+
+    class SetFormationAction : public Action
+    {
+    public:
+        SetFormationAction(PlayerbotAI* ai) : Action(ai, "set formation") {}
+        virtual bool Execute(Event event);
+    };
+};
+
diff --git a/src/plugins/playerbot/strategy/values/GrindTargetValue.cpp b/src/plugins/playerbot/strategy/values/GrindTargetValue.cpp
new file mode 100644
index 0000000..451dbf7
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/GrindTargetValue.cpp
@@ -0,0 +1,126 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "GrindTargetValue.h"
+#include "../../PlayerbotAIConfig.h"
+#include "../../RandomPlayerbotMgr.h"
+
+using namespace ai;
+
+Unit* GrindTargetValue::Calculate()
+{
+    uint32 memberCount = 1;
+    Group* group = bot->GetGroup();
+    if (group)
+        memberCount = group->GetMembersCount();
+
+    Unit* target = NULL;
+    uint32 assistCount = 0;
+    while (!target && assistCount < memberCount)
+    {
+        target = FindTargetForGrinding(assistCount++);
+    }
+
+    return target;
+}
+
+
+Unit* GrindTargetValue::FindTargetForGrinding(int assistCount)
+{
+    uint32 memberCount = 1;
+    Group* group = bot->GetGroup();
+    Player* master = GetMaster();
+
+    list<ObjectGuid> attackers = context->GetValue<list<ObjectGuid> >("attackers")->Get();
+    for (list<ObjectGuid>::iterator i = attackers.begin(); i != attackers.end(); i++)
+    {
+        Unit* unit = ai->GetUnit(*i);
+        if (!unit || !unit->IsAlive())
+            continue;
+
+        return unit;
+    }
+
+    list<ObjectGuid> targets = *context->GetValue<list<ObjectGuid> >("possible targets");
+
+    if(targets.empty())
+        return NULL;
+
+    float distance = 0;
+    Unit* result = NULL;
+    for(list<ObjectGuid>::iterator tIter = targets.begin(); tIter != targets.end(); tIter++)
+    {
+        Unit* unit = ai->GetUnit(*tIter);
+        if (!unit)
+            continue;
+
+        if (abs(bot->GetPositionZ() - unit->GetPositionZ()) > sPlayerbotAIConfig.spellDistance)
+            continue;
+
+        if (GetTargetingPlayerCount(unit) > assistCount)
+            continue;
+
+		if (master && master->GetDistance(unit) >= sPlayerbotAIConfig.grindDistance && !sRandomPlayerbotMgr.IsRandomBot(bot))
+            continue;
+
+		if ((int)unit->getLevel() - (int)bot->getLevel() > 4 && !unit->GetGUID().IsPlayer())
+		    continue;
+
+		Creature* creature = dynamic_cast<Creature*>(unit);
+		if (creature && creature->GetCreatureTemplate() && creature->GetCreatureTemplate()->rank > CREATURE_ELITE_NORMAL)
+		    continue;
+
+        if (group)
+        {
+            Group::MemberSlotList const& groupSlot = group->GetMemberSlots();
+            for (Group::member_citerator itr = groupSlot.begin(); itr != groupSlot.end(); itr++)
+            {
+                Player *member = sObjectMgr->GetPlayerByLowGUID(itr->guid);
+                if( !member || !member->IsAlive())
+                    continue;
+
+                float d = member->GetDistance(unit);
+                if (!result || d < distance)
+                {
+                    distance = d;
+                    result = unit;
+                }
+            }
+        }
+        else
+        {
+            float d = bot->GetDistance(unit);
+            if (!result || d < distance)
+            {
+                distance = d;
+                result = unit;
+            }
+        }
+    }
+
+    return result;
+}
+
+
+int GrindTargetValue::GetTargetingPlayerCount( Unit* unit )
+{
+    Group* group = bot->GetGroup();
+    if (!group)
+        return 0;
+
+    int count = 0;
+    Group::MemberSlotList const& groupSlot = group->GetMemberSlots();
+    for (Group::member_citerator itr = groupSlot.begin(); itr != groupSlot.end(); itr++)
+    {
+        Player *member = sObjectMgr->GetPlayerByLowGUID(itr->guid);
+        if( !member || !member->IsAlive() || member == bot)
+            continue;
+
+        PlayerbotAI* ai = member->GetPlayerbotAI();
+        if ((ai && *ai->GetAiObjectContext()->GetValue<Unit*>("current target") == unit) ||
+            (!ai && member->GetSelectedUnit() == unit))
+            count++;
+    }
+
+    return count;
+}
+
diff --git a/src/plugins/playerbot/strategy/values/GrindTargetValue.h b/src/plugins/playerbot/strategy/values/GrindTargetValue.h
new file mode 100644
index 0000000..f333297
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/GrindTargetValue.h
@@ -0,0 +1,20 @@
+#pragma once
+#include "../Value.h"
+#include "TargetValue.h"
+
+namespace ai
+{
+   
+    class GrindTargetValue : public TargetValue
+	{
+	public:
+        GrindTargetValue(PlayerbotAI* ai) : TargetValue(ai) {}
+
+    public:
+        Unit* Calculate();
+
+    private:
+        int GetTargetingPlayerCount(Unit* unit);
+        Unit* FindTargetForGrinding(int assistCount);
+    };
+}
diff --git a/src/plugins/playerbot/strategy/values/HasAvailableLootValue.h b/src/plugins/playerbot/strategy/values/HasAvailableLootValue.h
new file mode 100644
index 0000000..3dac17f
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/HasAvailableLootValue.h
@@ -0,0 +1,20 @@
+#pragma once
+#include "../Value.h"
+#include "../../PlayerbotAIConfig.h"
+
+namespace ai
+{
+    class HasAvailableLootValue : public BoolCalculatedValue
+	{
+	public:
+        HasAvailableLootValue(PlayerbotAI* ai) : BoolCalculatedValue(ai) {}
+
+    public:
+        virtual bool Calculate()
+        {
+            return !AI_VALUE(bool, "can loot") &&
+                    AI_VALUE(LootObjectStack*, "available loot")->CanLoot(sPlayerbotAIConfig.lootDistance) &&
+                    !bot->IsMounted();
+        }
+    };
+}
diff --git a/src/plugins/playerbot/strategy/values/HasTotemValue.h b/src/plugins/playerbot/strategy/values/HasTotemValue.h
new file mode 100644
index 0000000..a65b3a2
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/HasTotemValue.h
@@ -0,0 +1,34 @@
+#pragma once
+#include "../Value.h"
+#include "TargetValue.h"
+#include "../../LootObjectStack.h"
+
+namespace ai
+{
+    class HasTotemValue : public BoolCalculatedValue, public Qualified
+	{
+	public:
+        HasTotemValue(PlayerbotAI* ai) : BoolCalculatedValue(ai) {}
+
+    public:
+        bool Calculate()
+        {
+            list<ObjectGuid> units = *context->GetValue<list<ObjectGuid> >("nearest npcs");
+            for (list<ObjectGuid>::iterator i = units.begin(); i != units.end(); i++)
+            {
+                Unit* unit = ai->GetUnit(*i);
+                if (!unit)
+                    continue;
+
+                Creature* creature = dynamic_cast<Creature*>(unit);
+                if (!creature || !creature->IsTotem())
+                    continue;
+
+                if (strstri(creature->GetName().c_str(), qualifier.c_str()) && bot->GetDistance(creature) <= sPlayerbotAIConfig.spellDistance)
+                    return true;
+            }
+
+            return false;
+        }
+    };
+}
diff --git a/src/plugins/playerbot/strategy/values/InvalidTargetValue.cpp b/src/plugins/playerbot/strategy/values/InvalidTargetValue.cpp
new file mode 100644
index 0000000..41440c9
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/InvalidTargetValue.cpp
@@ -0,0 +1,26 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "InvalidTargetValue.h"
+#include "../../PlayerbotAIConfig.h"
+
+using namespace ai;
+
+bool InvalidTargetValue::Calculate()
+{
+    Unit* target = AI_VALUE(Unit*, qualifier);
+    if (qualifier == "current target")
+    {
+        return !target ||
+                target->GetMapId() != bot->GetMapId() ||
+                target->isDead() ||
+                target->IsPolymorphed() ||
+                target->IsCharmed() ||
+                target->isFeared() ||
+                target->HasUnitState(UNIT_STATE_ISOLATED) ||
+                target->IsFriendlyTo(bot) ||
+                !bot->IsWithinDistInMap(target, sPlayerbotAIConfig.sightDistance) ||
+                !bot->IsWithinLOSInMap(target);
+    }
+
+    return !target;
+}
diff --git a/src/plugins/playerbot/strategy/values/InvalidTargetValue.h b/src/plugins/playerbot/strategy/values/InvalidTargetValue.h
new file mode 100644
index 0000000..5d277fd
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/InvalidTargetValue.h
@@ -0,0 +1,14 @@
+#pragma once
+#include "../Value.h"
+
+namespace ai
+{
+    class InvalidTargetValue : public BoolCalculatedValue, public Qualified
+	{
+	public:
+        InvalidTargetValue(PlayerbotAI* ai) : BoolCalculatedValue(ai) {}
+
+	public:
+        virtual bool Calculate();
+    };
+}
diff --git a/src/plugins/playerbot/strategy/values/IsBehindValue.h b/src/plugins/playerbot/strategy/values/IsBehindValue.h
new file mode 100644
index 0000000..da61670
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/IsBehindValue.h
@@ -0,0 +1,25 @@
+#pragma once
+#include "../Value.h"
+
+namespace ai
+{
+    class IsBehindValue : public BoolCalculatedValue, public Qualified
+	{
+	public:
+        IsBehindValue(PlayerbotAI* ai) : BoolCalculatedValue(ai) {}
+
+        virtual bool Calculate() 
+        {
+            Unit* target = AI_VALUE(Unit*, qualifier);
+            if (!target)
+                return false;
+
+            
+            float targetOrientation = target->GetOrientation();
+            float orientation = bot->GetOrientation();
+            float distance = bot->GetDistance(target);
+
+            return distance <= ATTACK_DISTANCE && abs(targetOrientation - orientation) < M_PI / 2;
+        }
+    };
+}
diff --git a/src/plugins/playerbot/strategy/values/IsFacingValue.h b/src/plugins/playerbot/strategy/values/IsFacingValue.h
new file mode 100644
index 0000000..814014f
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/IsFacingValue.h
@@ -0,0 +1,20 @@
+#pragma once
+#include "../Value.h"
+
+namespace ai
+{
+    class IsFacingValue : public BoolCalculatedValue, public Qualified
+	{
+	public:
+        IsFacingValue(PlayerbotAI* ai) : BoolCalculatedValue(ai) {}
+
+        virtual bool Calculate()
+        {
+            Unit* target = AI_VALUE(Unit*, qualifier);
+            if (!target)
+                return false;
+
+            return bot->isInFront(target, M_PI / 3.0f);
+        }
+    };
+}
diff --git a/src/plugins/playerbot/strategy/values/IsMovingValue.h b/src/plugins/playerbot/strategy/values/IsMovingValue.h
new file mode 100644
index 0000000..bbee8bd
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/IsMovingValue.h
@@ -0,0 +1,42 @@
+#pragma once
+#include "../Value.h"
+
+namespace ai
+{
+    class IsMovingValue : public BoolCalculatedValue, public Qualified
+	{
+	public:
+        IsMovingValue(PlayerbotAI* ai) : BoolCalculatedValue(ai) {}
+
+        virtual bool Calculate()
+        {
+            Unit* target = AI_VALUE(Unit*, qualifier);
+
+            if (!target)
+                return false;
+
+            switch (target->GetMotionMaster()->GetCurrentMovementGeneratorType())
+            {
+            case IDLE_MOTION_TYPE:
+                return false;
+            }
+            return true;
+        }
+    };
+
+    class IsSwimmingValue : public BoolCalculatedValue, public Qualified
+	{
+	public:
+        IsSwimmingValue(PlayerbotAI* ai) : BoolCalculatedValue(ai) {}
+
+        virtual bool Calculate()
+        {
+            Unit* target = AI_VALUE(Unit*, qualifier);
+
+            if (!target)
+                return false;
+
+            return target->IsUnderWater() || target->IsInWater();
+        }
+    };
+}
diff --git a/src/plugins/playerbot/strategy/values/ItemCountValue.cpp b/src/plugins/playerbot/strategy/values/ItemCountValue.cpp
new file mode 100644
index 0000000..2b6c0a2
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/ItemCountValue.cpp
@@ -0,0 +1,37 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "ItemCountValue.h"
+
+using namespace ai;
+
+list<Item*> InventoryItemValueBase::Find(string qualifier)
+{
+    list<Item*> result;
+
+    Player* bot = InventoryAction::ai->GetBot();
+
+    list<Item*> items = InventoryAction::parseItems(qualifier);
+    for (list<Item*>::iterator i = items.begin(); i != items.end(); i++)
+        result.push_back(*i);
+
+    return result;
+}
+
+
+uint8 ItemCountValue::Calculate()
+{
+    uint8 count = 0;
+    list<Item*> items = Find(qualifier);
+    for (list<Item*>::iterator i = items.begin(); i != items.end(); ++i)
+    {
+        Item* item = *i;
+        count += item->GetCount();
+    }
+
+    return count;
+}
+
+list<Item*> InventoryItemValue::Calculate()
+{
+    return Find(qualifier);
+}
diff --git a/src/plugins/playerbot/strategy/values/ItemCountValue.h b/src/plugins/playerbot/strategy/values/ItemCountValue.h
new file mode 100644
index 0000000..f81d9b3
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/ItemCountValue.h
@@ -0,0 +1,35 @@
+#pragma once
+#include "../Value.h"
+#include "../ItemVisitors.h"
+#include "../actions/InventoryAction.h"
+
+namespace ai
+{
+    class InventoryItemValueBase : public InventoryAction
+    {
+    public:
+        InventoryItemValueBase(PlayerbotAI* ai) : InventoryAction(ai, "empty") {}
+        virtual bool Execute(Event event) { return false; }
+
+    protected:
+        list<Item*> Find(string qualifier);
+    };
+
+    class ItemCountValue : public Uint8CalculatedValue, public Qualified, InventoryItemValueBase
+	{
+	public:
+        ItemCountValue(PlayerbotAI* ai) : Uint8CalculatedValue(ai), InventoryItemValueBase(ai) {}
+
+    public:
+        virtual uint8 Calculate();
+	};
+
+    class InventoryItemValue : public CalculatedValue<list<Item*> >, public Qualified, InventoryItemValueBase
+    {
+    public:
+        InventoryItemValue(PlayerbotAI* ai) : CalculatedValue<list<Item*> >(ai), InventoryItemValueBase(ai) {}
+
+    public:
+        virtual list<Item*> Calculate();
+    };
+}
diff --git a/src/plugins/playerbot/strategy/values/ItemForSpellValue.cpp b/src/plugins/playerbot/strategy/values/ItemForSpellValue.cpp
new file mode 100644
index 0000000..671cd97
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/ItemForSpellValue.cpp
@@ -0,0 +1,70 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "ItemForSpellValue.h"
+
+using namespace ai;
+
+#ifndef WIN32
+inline int strcmpi(const char* s1, const char* s2)
+{
+    for (; *s1 && *s2 && (toupper(*s1) == toupper(*s2)); ++s1, ++s2);
+    return *s1 - *s2;
+}
+#endif
+
+Item* ItemForSpellValue::Calculate()
+{
+    uint32 spellid = atoi(qualifier.c_str());
+    if (!spellid)
+        return NULL;
+
+    SpellInfo const *spellInfo = sSpellMgr->GetSpellInfo(spellid);
+    if (!spellInfo)
+        return NULL;
+
+    Item* itemForSpell = NULL;
+    Player* trader = bot->GetTrader();
+    if (trader)
+    {
+        itemForSpell = trader->GetTradeData()->GetItem(TRADE_SLOT_NONTRADED);
+        if (itemForSpell && itemForSpell->IsFitToSpellRequirements(spellInfo))
+            return itemForSpell;
+    }
+
+    // Workaround as some spells have no item mask (e.g. shaman weapon enhancements)
+    if (!strcmpi(spellInfo->SpellName[0], "rockbiter weapon") ||
+            !strcmpi(spellInfo->SpellName[0], "flametongue weapon") ||
+            !strcmpi(spellInfo->SpellName[0], "earthliving weapon") ||
+            !strcmpi(spellInfo->SpellName[0], "frostbrand weapon") ||
+            !strcmpi(spellInfo->SpellName[0], "windfury weapon"))
+    {
+        itemForSpell = GetItemFitsToSpellRequirements(EQUIPMENT_SLOT_MAINHAND, spellInfo);
+        if (itemForSpell && itemForSpell->GetTemplate()->Class == ITEM_CLASS_WEAPON)
+            return itemForSpell;
+
+        itemForSpell = GetItemFitsToSpellRequirements(EQUIPMENT_SLOT_OFFHAND, spellInfo);
+        if (itemForSpell && itemForSpell->GetTemplate()->Class == ITEM_CLASS_WEAPON)
+            return itemForSpell;
+
+        return NULL;
+    }
+
+    for( uint8 slot = EQUIPMENT_SLOT_START; slot < EQUIPMENT_SLOT_END; slot++ ) {
+        itemForSpell = GetItemFitsToSpellRequirements(slot, spellInfo);
+        if (itemForSpell)
+            return itemForSpell;
+    }
+    return NULL;
+}
+
+Item* ItemForSpellValue::GetItemFitsToSpellRequirements(uint8 slot, SpellInfo const *spellInfo)
+{
+    Item* const itemForSpell = bot->GetItemByPos( INVENTORY_SLOT_BAG_0, slot );
+    if (!itemForSpell || itemForSpell->GetEnchantmentId(TEMP_ENCHANTMENT_SLOT))
+        return NULL;
+
+    if (itemForSpell->IsFitToSpellRequirements(spellInfo))
+        return itemForSpell;
+
+    return NULL;
+}
diff --git a/src/plugins/playerbot/strategy/values/ItemForSpellValue.h b/src/plugins/playerbot/strategy/values/ItemForSpellValue.h
new file mode 100644
index 0000000..39ce6af
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/ItemForSpellValue.h
@@ -0,0 +1,20 @@
+#pragma once
+#include "../Value.h"
+#include "TargetValue.h"
+
+namespace ai
+{
+
+    class ItemForSpellValue : public CalculatedValue<Item*>, public Qualified
+	{
+	public:
+        ItemForSpellValue(PlayerbotAI* ai) : CalculatedValue<Item*>(ai) {}
+
+    public:
+        virtual Item* Calculate();
+
+    private:
+        Item* GetItemFitsToSpellRequirements(uint8 slot, SpellInfo const *spellInfo);
+
+    };
+}
diff --git a/src/plugins/playerbot/strategy/values/ItemUsageValue.cpp b/src/plugins/playerbot/strategy/values/ItemUsageValue.cpp
new file mode 100644
index 0000000..b7fbcfc
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/ItemUsageValue.cpp
@@ -0,0 +1,146 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "ItemUsageValue.h"
+
+#include "../../GuildTaskMgr.h"
+using namespace ai;
+
+ItemUsage ItemUsageValue::Calculate()
+{
+    uint32 itemId = atoi(qualifier.c_str());
+    if (!itemId)
+        return ITEM_USAGE_NONE;
+
+    const ItemTemplate* proto = sObjectMgr->GetItemTemplate(itemId);
+    if (!proto)
+        return ITEM_USAGE_NONE;
+
+    if (IsItemUsefulForSkill(proto))
+        return ITEM_USAGE_SKILL;
+
+    switch (proto->Class)
+    {
+    case ITEM_CLASS_KEY:
+    case ITEM_CLASS_CONSUMABLE:
+        return ITEM_USAGE_USE;
+    }
+
+    if (bot->GetGuildId() && sGuildTaskMgr.IsGuildTaskItem(itemId, bot->GetGuildId()))
+        return ITEM_USAGE_GUILD_TASK;
+
+    return QueryItemUsageForEquip(proto);
+}
+
+ItemUsage ItemUsageValue::QueryItemUsageForEquip(ItemTemplate const * item)
+{
+    if (bot->CanUseItem(item) != EQUIP_ERR_OK)
+        return ITEM_USAGE_NONE;
+
+    if (item->InventoryType == INVTYPE_NON_EQUIP)
+        return ITEM_USAGE_NONE;
+
+    Item *pItem = Item::CreateItem(item->ItemId, 1, bot);
+    if (!pItem)
+        return ITEM_USAGE_NONE;
+
+    uint16 dest;
+    InventoryResult result = bot->CanEquipItem(NULL_SLOT, dest, pItem, true, false);
+    pItem->RemoveFromUpdateQueueOf(bot);
+    delete pItem;
+
+    if( result != EQUIP_ERR_OK )
+        return ITEM_USAGE_NONE;
+
+    Item* existingItem = bot->GetItemByPos(dest);
+    if (!existingItem)
+        return ITEM_USAGE_EQUIP;
+
+    const ItemTemplate* oldItem = existingItem->GetTemplate();
+    if (oldItem->ItemLevel < item->ItemLevel && oldItem->ItemId != item->ItemId)
+    {
+        switch (item->Class)
+        {
+        case ITEM_CLASS_ARMOR:
+            if (oldItem->SubClass <= item->SubClass) {
+                return ITEM_USAGE_REPLACE;
+            }
+            break;
+        default:
+            return ITEM_USAGE_EQUIP;
+        }
+    }
+
+    return ITEM_USAGE_NONE;
+}
+
+bool ItemUsageValue::IsItemUsefulForSkill(ItemTemplate const * proto)
+{
+    switch (proto->Class)
+    {
+    case ITEM_CLASS_GEM:
+        if (proto->SubClass == ITEM_SUBCLASS_GEM_SIMPLE && bot->HasSkill(SKILL_JEWELCRAFTING))
+            return true;
+        if (proto->SubClass != ITEM_SUBCLASS_GEM_SIMPLE)
+            return true;
+        break;
+    case ITEM_CLASS_TRADE_GOODS:
+        switch (proto->SubClass)
+        {
+        case ITEM_SUBCLASS_PARTS:
+        case ITEM_SUBCLASS_EXPLOSIVES:
+        case ITEM_SUBCLASS_DEVICES:
+            return bot->HasSkill(SKILL_ENGINEERING);
+        case ITEM_SUBCLASS_JEWELCRAFTING:
+            return bot->HasSkill(SKILL_JEWELCRAFTING);
+        case ITEM_SUBCLASS_CLOTH:
+            return bot->HasSkill(SKILL_TAILORING);
+        case ITEM_SUBCLASS_LEATHER:
+            return bot->HasSkill(SKILL_LEATHERWORKING) || bot->HasSkill(SKILL_SKINNING);
+        case ITEM_SUBCLASS_METAL_STONE:
+            return (bot->HasSkill(SKILL_BLACKSMITHING) ||
+                bot->HasSkill(SKILL_ENGINEERING) ||
+                bot->HasSkill(SKILL_MINING));
+        case ITEM_SUBCLASS_MEAT:
+            return bot->HasSkill(SKILL_COOKING);
+        case ITEM_SUBCLASS_HERB:
+            return (bot->HasSkill(SKILL_HERBALISM) ||
+                bot->HasSkill(SKILL_ALCHEMY) ||
+                bot->HasSkill(SKILL_INSCRIPTION));
+        case ITEM_SUBCLASS_ELEMENTAL:
+            return true;
+        case ITEM_SUBCLASS_ENCHANTING:
+            return bot->HasSkill(SKILL_ENCHANTING);
+        }
+        break;
+    case ITEM_CLASS_RECIPE:
+        {
+            if (bot->HasSpell(proto->Spells[2].SpellId))
+                break;
+
+            switch (proto->SubClass)
+            {
+            case ITEM_SUBCLASS_LEATHERWORKING_PATTERN:
+                return bot->HasSkill(SKILL_LEATHERWORKING);
+            case ITEM_SUBCLASS_TAILORING_PATTERN:
+                return bot->HasSkill(SKILL_TAILORING);
+            case ITEM_SUBCLASS_ENGINEERING_SCHEMATIC:
+                return bot->HasSkill(SKILL_ENGINEERING);
+            case ITEM_SUBCLASS_BLACKSMITHING:
+                return bot->HasSkill(SKILL_BLACKSMITHING);
+            case ITEM_SUBCLASS_COOKING_RECIPE:
+                return bot->HasSkill(SKILL_COOKING);
+            case ITEM_SUBCLASS_ALCHEMY_RECIPE:
+                return bot->HasSkill(SKILL_ALCHEMY);
+            case ITEM_SUBCLASS_FIRST_AID_MANUAL:
+                return bot->HasSkill(SKILL_FIRST_AID);
+            case ITEM_SUBCLASS_ENCHANTING_FORMULA:
+                return bot->HasSkill(SKILL_ENCHANTING);
+            case ITEM_SUBCLASS_FISHING_MANUAL:
+                return bot->HasSkill(SKILL_FISHING);
+            case ITEM_SUBCLASS_JEWELCRAFTING_RECIPE:
+                return bot->HasSkill(SKILL_JEWELCRAFTING);
+            }
+        }
+    }
+    return false;
+}
diff --git a/src/plugins/playerbot/strategy/values/ItemUsageValue.h b/src/plugins/playerbot/strategy/values/ItemUsageValue.h
new file mode 100644
index 0000000..95e0a52
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/ItemUsageValue.h
@@ -0,0 +1,28 @@
+#pragma once
+#include "../Value.h"
+
+namespace ai
+{
+    enum ItemUsage
+    {
+        ITEM_USAGE_NONE = 0,
+        ITEM_USAGE_EQUIP = 1,
+        ITEM_USAGE_REPLACE = 2,
+        ITEM_USAGE_SKILL = 3,
+        ITEM_USAGE_USE = 4,
+        ITEM_USAGE_GUILD_TASK = 5
+    };
+
+    class ItemUsageValue : public CalculatedValue<ItemUsage>, public Qualified
+	{
+	public:
+        ItemUsageValue(PlayerbotAI* ai) : CalculatedValue<ItemUsage>(ai) {}
+
+    public:
+        virtual ItemUsage Calculate();
+
+    private:
+        ItemUsage QueryItemUsageForEquip(ItemTemplate const * proto);
+        bool IsItemUsefulForSkill(ItemTemplate const * proto);
+	};
+}
diff --git a/src/plugins/playerbot/strategy/values/LastMovementValue.h b/src/plugins/playerbot/strategy/values/LastMovementValue.h
new file mode 100644
index 0000000..0467833
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/LastMovementValue.h
@@ -0,0 +1,61 @@
+#pragma once
+#include "../Value.h"
+
+namespace ai
+{
+    class LastMovement
+    {
+    public:
+        LastMovement() 
+        {
+            lastMoveToX = 0;
+            lastMoveToY = 0;
+            lastMoveToZ = 0;
+            lastMoveToOri = 0;
+            lastFollow = NULL;
+        }
+
+        LastMovement(LastMovement& other)
+        {
+            taxiNodes = other.taxiNodes;
+            taxiMaster = other.taxiMaster;
+            lastFollow = other.lastFollow;
+            lastAreaTrigger = other.lastAreaTrigger;
+            lastMoveToX = other.lastMoveToX;
+            lastMoveToY = other.lastMoveToY;
+            lastMoveToZ = other.lastMoveToZ;
+            lastMoveToOri = other.lastMoveToOri;
+        }
+        
+        void Set(Unit* lastFollow)
+        {
+            Set(0.0f, 0.0f, 0.0f, 0.0f);
+            this->lastFollow = lastFollow;
+        }
+
+        void Set(float x, float y, float z, float ori)
+        {
+            lastMoveToX = x;
+            lastMoveToY = y;
+            lastMoveToZ = z;
+            lastMoveToOri = ori;
+            lastFollow = NULL;
+        }
+
+    public:
+        vector<uint32> taxiNodes;
+        ObjectGuid taxiMaster;
+        Unit* lastFollow;
+        uint32 lastAreaTrigger;
+        float lastMoveToX, lastMoveToY, lastMoveToZ, lastMoveToOri;
+    };
+
+    class LastMovementValue : public ManualSetValue<LastMovement&>
+	{
+	public:
+        LastMovementValue(PlayerbotAI* ai) : ManualSetValue<LastMovement&>(ai, data) {}
+
+    private:
+        LastMovement data;
+    };
+}
diff --git a/src/plugins/playerbot/strategy/values/LastSaidValue.h b/src/plugins/playerbot/strategy/values/LastSaidValue.h
new file mode 100644
index 0000000..4602f23
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/LastSaidValue.h
@@ -0,0 +1,11 @@
+#pragma once
+#include "../Value.h"
+
+namespace ai
+{
+    class LastSaidValue : public ManualSetValue<time_t>, public Qualified
+	{
+	public:
+        LastSaidValue(PlayerbotAI* ai) : ManualSetValue<time_t>(ai, 0, "last said") {}
+    };
+}
diff --git a/src/plugins/playerbot/strategy/values/LastSpellCastTimeValue.h b/src/plugins/playerbot/strategy/values/LastSpellCastTimeValue.h
new file mode 100644
index 0000000..bf0a17e
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/LastSpellCastTimeValue.h
@@ -0,0 +1,11 @@
+#pragma once
+#include "../Value.h"
+
+namespace ai
+{
+    class LastSpellCastTimeValue : public ManualSetValue<time_t>, public Qualified
+	{
+	public:
+        LastSpellCastTimeValue(PlayerbotAI* ai) : ManualSetValue<time_t>(ai, 0), Qualified() {}
+    };
+}
diff --git a/src/plugins/playerbot/strategy/values/LastSpellCastValue.h b/src/plugins/playerbot/strategy/values/LastSpellCastValue.h
new file mode 100644
index 0000000..5d05541
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/LastSpellCastValue.h
@@ -0,0 +1,39 @@
+#pragma once
+#include "../Value.h"
+
+namespace ai
+{
+    class LastSpellCast 
+    {
+    public:
+        LastSpellCast() : id(0),time(0) {}
+
+    public:
+        void Set(uint32 id, ObjectGuid target, time_t time)
+        {
+            this->id = id;
+            this->target = target;
+            this->time = time;
+        }
+        
+        void Reset()
+        {
+            id = 0;
+            target.Set(0);
+            time = 0;
+        }
+    public:
+        uint32 id;
+        ObjectGuid target;
+        time_t time;
+    };
+   
+    class LastSpellCastValue : public ManualSetValue<LastSpellCast&>
+	{
+	public:
+        LastSpellCastValue(PlayerbotAI* ai) : ManualSetValue<LastSpellCast&>(ai, data) {}
+
+    private:
+        LastSpellCast data;
+    };
+}
diff --git a/src/plugins/playerbot/strategy/values/LeastHpTargetValue.cpp b/src/plugins/playerbot/strategy/values/LeastHpTargetValue.cpp
new file mode 100644
index 0000000..39021c5
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/LeastHpTargetValue.cpp
@@ -0,0 +1,33 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "LeastHpTargetValue.h"
+#include "TargetValue.h"
+
+using namespace ai;
+using namespace std;
+
+class FindLeastHpTargetStrategy : public FindTargetStrategy
+{
+public:
+    FindLeastHpTargetStrategy(PlayerbotAI* ai) : FindTargetStrategy(ai)
+    {
+        minHealth = 0;
+    }
+
+public:
+    virtual void CheckAttacker(Unit* attacker, ThreatManager* threatManager)
+    {
+        if (!result || result->GetHealth() > attacker->GetHealth())
+            result = attacker;
+    }
+
+protected:
+    float minHealth;
+};
+
+
+Unit* LeastHpTargetValue::Calculate()
+{
+    FindLeastHpTargetStrategy strategy(ai);
+    return FindTarget(&strategy);
+}
diff --git a/src/plugins/playerbot/strategy/values/LeastHpTargetValue.h b/src/plugins/playerbot/strategy/values/LeastHpTargetValue.h
new file mode 100644
index 0000000..e748e7f
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/LeastHpTargetValue.h
@@ -0,0 +1,15 @@
+#pragma once
+#include "../Value.h"
+#include "TargetValue.h"
+
+namespace ai
+{
+    class LeastHpTargetValue : public TargetValue
+	{
+	public:
+        LeastHpTargetValue(PlayerbotAI* ai) : TargetValue(ai) {}
+
+    public:
+        Unit* Calculate();
+    };
+}
diff --git a/src/plugins/playerbot/strategy/values/LfgValues.h b/src/plugins/playerbot/strategy/values/LfgValues.h
new file mode 100644
index 0000000..290a4c4
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/LfgValues.h
@@ -0,0 +1,12 @@
+#pragma once
+
+#include "../Value.h"
+
+namespace ai
+{
+class LfgProposalValue : public ManualSetValue<uint32>
+{
+public:
+    LfgProposalValue(PlayerbotAI* ai) : ManualSetValue<uint32>(ai, 0, "lfg proposal") {}
+};
+}
diff --git a/src/plugins/playerbot/strategy/values/LineTargetValue.cpp b/src/plugins/playerbot/strategy/values/LineTargetValue.cpp
new file mode 100644
index 0000000..3546e12
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/LineTargetValue.cpp
@@ -0,0 +1,33 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "LineTargetValue.h"
+
+using namespace ai;
+
+Unit* LineTargetValue::Calculate()
+{
+    Player* master = GetMaster();
+    if (!master)
+        return NULL;
+
+    Group* group = master->GetGroup();
+    if (!group)
+        return NULL;
+
+    Player *prev = master;
+    Group::MemberSlotList const& groupSlot = group->GetMemberSlots();
+    for (Group::member_citerator itr = groupSlot.begin(); itr != groupSlot.end(); itr++)
+    {
+        Player *player = sObjectMgr->GetPlayerByLowGUID(itr->guid);
+        if( !player || !player->IsAlive() || player == master)
+            continue;
+
+        if (player == bot)
+            return prev;
+
+        prev = player;
+    }
+
+    return master;
+}
+
diff --git a/src/plugins/playerbot/strategy/values/LineTargetValue.h b/src/plugins/playerbot/strategy/values/LineTargetValue.h
new file mode 100644
index 0000000..57998fa
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/LineTargetValue.h
@@ -0,0 +1,14 @@
+#pragma once
+#include "../Value.h"
+
+namespace ai
+{
+    class LineTargetValue : public UnitCalculatedValue
+	{
+	public:
+        LineTargetValue(PlayerbotAI* ai) : UnitCalculatedValue(ai) {}
+
+    public:
+        virtual Unit* Calculate();
+	};
+}
diff --git a/src/plugins/playerbot/strategy/values/LogLevelValue.h b/src/plugins/playerbot/strategy/values/LogLevelValue.h
new file mode 100644
index 0000000..c5f9da9
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/LogLevelValue.h
@@ -0,0 +1,12 @@
+#pragma once
+#include "../Value.h"
+
+namespace ai
+{
+    class LogLevelValue : public ManualSetValue<LogLevel>
+	{
+	public:
+        LogLevelValue(PlayerbotAI* ai) :
+            ManualSetValue<LogLevel>(ai, LOG_LEVEL_DEBUG) {}
+	};
+}
diff --git a/src/plugins/playerbot/strategy/values/LootStrategyValue.h b/src/plugins/playerbot/strategy/values/LootStrategyValue.h
new file mode 100644
index 0000000..210e518
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/LootStrategyValue.h
@@ -0,0 +1,11 @@
+#pragma once
+#include "../Value.h"
+
+namespace ai
+{
+    class LootStrategyValue : public ManualSetValue<LootStrategy>
+	{
+	public:
+        LootStrategyValue(PlayerbotAI* ai) : ManualSetValue<LootStrategy>(ai, LOOTSTRATEGY_SKILL) {}
+    };
+}
diff --git a/src/plugins/playerbot/strategy/values/ManaSaveLevelValue.h b/src/plugins/playerbot/strategy/values/ManaSaveLevelValue.h
new file mode 100644
index 0000000..6c29f1f
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/ManaSaveLevelValue.h
@@ -0,0 +1,11 @@
+#pragma once
+#include "../Value.h"
+
+namespace ai
+{
+    class ManaSaveLevelValue : public ManualSetValue<double>
+	{
+	public:
+        ManaSaveLevelValue(PlayerbotAI* ai) : ManualSetValue<double>(ai, 1.0, "mana save level") {}
+    };
+}
diff --git a/src/plugins/playerbot/strategy/values/MasterTargetValue.h b/src/plugins/playerbot/strategy/values/MasterTargetValue.h
new file mode 100644
index 0000000..a137694
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/MasterTargetValue.h
@@ -0,0 +1,13 @@
+#pragma once
+#include "../Value.h"
+
+namespace ai
+{
+    class MasterTargetValue : public UnitCalculatedValue
+	{
+	public:
+        MasterTargetValue(PlayerbotAI* ai) : UnitCalculatedValue(ai) {}
+
+        virtual Unit* Calculate() { return ai->GetMaster(); }
+    };
+}
diff --git a/src/plugins/playerbot/strategy/values/NearestAdsValue.cpp b/src/plugins/playerbot/strategy/values/NearestAdsValue.cpp
new file mode 100644
index 0000000..3370836
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/NearestAdsValue.cpp
@@ -0,0 +1,11 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "NearestAdsValue.h"
+
+using namespace ai;
+
+bool NearestAdsValue::AcceptUnit(Unit* unit)
+{
+    Unit* target = AI_VALUE(Unit*, "current target");
+    return unit != target;
+}
diff --git a/src/plugins/playerbot/strategy/values/NearestAdsValue.h b/src/plugins/playerbot/strategy/values/NearestAdsValue.h
new file mode 100644
index 0000000..16e4a84
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/NearestAdsValue.h
@@ -0,0 +1,18 @@
+#pragma once
+#include "../Value.h"
+#include "NearestUnitsValue.h"
+#include "../../PlayerbotAIConfig.h"
+#include "PossibleTargetsValue.h"
+
+namespace ai
+{
+    class NearestAdsValue : public PossibleTargetsValue
+	{
+	public:
+        NearestAdsValue(PlayerbotAI* ai, float range = sPlayerbotAIConfig.tooCloseDistance) :
+            PossibleTargetsValue(ai, range) {}
+
+    protected:
+        bool AcceptUnit(Unit* unit);
+	};
+}
diff --git a/src/plugins/playerbot/strategy/values/NearestCorpsesValue.cpp b/src/plugins/playerbot/strategy/values/NearestCorpsesValue.cpp
new file mode 100644
index 0000000..ad6e30a
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/NearestCorpsesValue.cpp
@@ -0,0 +1,36 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "NearestCorpsesValue.h"
+
+#include "../../../Grids/Notifiers/GridNotifiers.h"
+#include "../../../Grids/Notifiers/GridNotifiersImpl.h"
+#include "../../../Grids/Cells/CellImpl.h"
+
+using namespace ai;
+using namespace Trinity;
+
+class AnyDeadUnitInObjectRangeCheck
+{
+public:
+    AnyDeadUnitInObjectRangeCheck(WorldObject const* obj, float range) : i_obj(obj), i_range(range) {}
+    WorldObject const& GetFocusObject() const { return *i_obj; }
+    bool operator()(Unit* u)
+    {
+        return !u->IsAlive() && i_obj->IsWithinDistInMap(u, i_range);
+    }
+private:
+    WorldObject const* i_obj;
+    float i_range;
+};
+
+void NearestCorpsesValue::FindUnits(list<Unit*> &targets)
+{
+    AnyDeadUnitInObjectRangeCheck u_check(bot, range);
+    UnitListSearcher<AnyDeadUnitInObjectRangeCheck> searcher(bot, targets, u_check);
+    bot->VisitNearbyObject(bot->GetMap()->GetVisibilityRange(), searcher);
+}
+
+bool NearestCorpsesValue::AcceptUnit(Unit* unit)
+{
+    return true;
+}
diff --git a/src/plugins/playerbot/strategy/values/NearestCorpsesValue.h b/src/plugins/playerbot/strategy/values/NearestCorpsesValue.h
new file mode 100644
index 0000000..c23a5b8
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/NearestCorpsesValue.h
@@ -0,0 +1,19 @@
+#pragma once
+#include "../Value.h"
+#include "NearestUnitsValue.h"
+#include "../../PlayerbotAIConfig.h"
+
+namespace ai
+{
+    class NearestCorpsesValue : public NearestUnitsValue
+	{
+	public:
+        NearestCorpsesValue(PlayerbotAI* ai, float range = sPlayerbotAIConfig.sightDistance) :
+          NearestUnitsValue(ai) {}
+
+    protected:
+        void FindUnits(list<Unit*> &targets);
+        bool AcceptUnit(Unit* unit);
+
+	};
+}
diff --git a/src/plugins/playerbot/strategy/values/NearestGameObjects.cpp b/src/plugins/playerbot/strategy/values/NearestGameObjects.cpp
new file mode 100644
index 0000000..405b1c7
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/NearestGameObjects.cpp
@@ -0,0 +1,47 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "NearestGameObjects.h"
+
+#include "../../../Grids/Notifiers/GridNotifiers.h"
+#include "../../../Grids/Notifiers/GridNotifiersImpl.h"
+#include "../../../Grids/Cells/CellImpl.h"
+
+using namespace ai;
+using namespace Trinity;
+
+class AnyGameObjectInObjectRangeCheck
+{
+public:
+    AnyGameObjectInObjectRangeCheck(WorldObject const* obj, float range) : i_obj(obj), i_range(range) {}
+    WorldObject const& GetFocusObject() const { return *i_obj; }
+    bool operator()(GameObject* u)
+    {
+        if (u && i_obj->IsWithinDistInMap(u, i_range) && u->isSpawned() && u->GetGOInfo())
+            return true;
+
+        return false;
+    }
+
+private:
+    WorldObject const* i_obj;
+    float i_range;
+};
+
+list<ObjectGuid> NearestGameObjects::Calculate()
+{
+    list<GameObject*> targets;
+
+    AnyGameObjectInObjectRangeCheck u_check(bot, range);
+    GameObjectListSearcher<AnyGameObjectInObjectRangeCheck> searcher(bot, targets, u_check);
+    bot->VisitNearbyObject(bot->GetMap()->GetVisibilityRange(), searcher);
+
+    list<ObjectGuid> result;
+    for(list<GameObject*>::iterator tIter = targets.begin(); tIter != targets.end(); ++tIter)
+    {
+		GameObject* go = *tIter;
+        if(bot->IsWithinLOSInMap(go))
+			result.push_back(go->GetGUID());
+    }
+
+    return result;
+}
diff --git a/src/plugins/playerbot/strategy/values/NearestGameObjects.h b/src/plugins/playerbot/strategy/values/NearestGameObjects.h
new file mode 100644
index 0000000..78dcf57
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/NearestGameObjects.h
@@ -0,0 +1,19 @@
+#pragma once
+#include "../Value.h"
+#include "../../PlayerbotAIConfig.h"
+
+namespace ai
+{
+    class NearestGameObjects : public ObjectGuidListCalculatedValue
+	{
+	public:
+        NearestGameObjects(PlayerbotAI* ai, float range = sPlayerbotAIConfig.sightDistance) :
+            ObjectGuidListCalculatedValue(ai), range(range) {}
+
+    protected:
+        virtual list<ObjectGuid> Calculate();
+
+    private:
+        float range;
+	};
+}
diff --git a/src/plugins/playerbot/strategy/values/NearestNpcsValue.cpp b/src/plugins/playerbot/strategy/values/NearestNpcsValue.cpp
new file mode 100644
index 0000000..9f82f10
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/NearestNpcsValue.cpp
@@ -0,0 +1,23 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "NearestNpcsValue.h"
+
+#include "../../../Grids/Notifiers/GridNotifiers.h"
+#include "../../../Grids/Notifiers/GridNotifiersImpl.h"
+#include "../../../Grids/Cells/CellImpl.h"
+
+
+using namespace ai;
+using namespace Trinity;
+
+void NearestNpcsValue::FindUnits(list<Unit*> &targets)
+{
+    AnyFriendlyUnitInObjectRangeCheck u_check(bot, bot, range);
+    UnitListSearcher<AnyFriendlyUnitInObjectRangeCheck> searcher(bot, targets, u_check);
+    bot->VisitNearbyObject(bot->GetMap()->GetVisibilityRange(), searcher);
+}
+
+bool NearestNpcsValue::AcceptUnit(Unit* unit)
+{
+    return !dynamic_cast<Player*>(unit);
+}
diff --git a/src/plugins/playerbot/strategy/values/NearestNpcsValue.h b/src/plugins/playerbot/strategy/values/NearestNpcsValue.h
new file mode 100644
index 0000000..ebbbd75
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/NearestNpcsValue.h
@@ -0,0 +1,18 @@
+#pragma once
+#include "../Value.h"
+#include "NearestUnitsValue.h"
+#include "../../PlayerbotAIConfig.h"
+
+namespace ai
+{
+    class NearestNpcsValue : public NearestUnitsValue
+	{
+	public:
+        NearestNpcsValue(PlayerbotAI* ai, float range = sPlayerbotAIConfig.sightDistance) :
+          NearestUnitsValue(ai) {}
+
+    protected:
+        void FindUnits(list<Unit*> &targets);
+        bool AcceptUnit(Unit* unit);
+	};
+}
diff --git a/src/plugins/playerbot/strategy/values/NearestUnitsValue.h b/src/plugins/playerbot/strategy/values/NearestUnitsValue.h
new file mode 100644
index 0000000..c6d1ed5
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/NearestUnitsValue.h
@@ -0,0 +1,36 @@
+#pragma once
+#include "../Value.h"
+#include "../../PlayerbotAIConfig.h"
+
+namespace ai
+{
+    class NearestUnitsValue : public ObjectGuidListCalculatedValue
+	{
+	public:
+        NearestUnitsValue(PlayerbotAI* ai, float range = sPlayerbotAIConfig.sightDistance) :
+            ObjectGuidListCalculatedValue(ai, "nearest units", 5), range(range) {}
+
+	public:
+        list<ObjectGuid> Calculate()
+        {
+            list<Unit*> targets;
+            FindUnits(targets);
+
+            list<ObjectGuid> results;
+            for(list<Unit *>::iterator i = targets.begin(); i!= targets.end(); ++i)
+            {
+                Unit* unit = *i;
+                if(bot->IsWithinLOSInMap(unit) && AcceptUnit(unit))
+                    results.push_back(unit->GetGUID());
+            }
+            return results;
+        }
+
+    protected:
+        virtual void FindUnits(list<Unit*> &targets) = 0;
+        virtual bool AcceptUnit(Unit* unit) = 0;
+
+    protected:
+        float range;
+	};
+}
diff --git a/src/plugins/playerbot/strategy/values/PartyMemberToDispel.cpp b/src/plugins/playerbot/strategy/values/PartyMemberToDispel.cpp
new file mode 100644
index 0000000..1f50b6b
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/PartyMemberToDispel.cpp
@@ -0,0 +1,37 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "PartyMemberToDispel.h"
+#include "../../../Entities/Pet/Pet.h"
+
+using namespace ai;
+
+class PartyMemberToDispelPredicate : public FindPlayerPredicate, public PlayerbotAIAware
+{
+public:
+    PartyMemberToDispelPredicate(PlayerbotAI* ai, uint32 dispelType) :
+        PlayerbotAIAware(ai), FindPlayerPredicate(), dispelType(dispelType) {}
+
+public:
+    virtual bool Check(Unit* unit)
+    {
+        if (unit->IsPet())
+        {
+            Pet* pet = unit->ToPet();
+            if (pet && pet->getPetType() == SUMMON_PET)
+                return false;
+        }
+
+        return unit->IsAlive() && ai->HasAuraToDispel(unit, dispelType);
+    }
+
+private:
+    uint32 dispelType;
+};
+
+Unit* PartyMemberToDispel::Calculate()
+{
+    uint32 dispelType = atoi(qualifier.c_str());
+
+    PartyMemberToDispelPredicate predicate(ai, dispelType);
+    return FindPartyMember(predicate);
+}
diff --git a/src/plugins/playerbot/strategy/values/PartyMemberToDispel.h b/src/plugins/playerbot/strategy/values/PartyMemberToDispel.h
new file mode 100644
index 0000000..dfbc809
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/PartyMemberToDispel.h
@@ -0,0 +1,16 @@
+#pragma once
+#include "../Value.h"
+#include "PartyMemberValue.h"
+
+namespace ai
+{
+    class PartyMemberToDispel : public PartyMemberValue, Qualified
+	{
+	public:
+        PartyMemberToDispel(PlayerbotAI* ai) : 
+          PartyMemberValue(ai) {}
+    
+    protected:
+        virtual Unit* Calculate();
+	};
+}
diff --git a/src/plugins/playerbot/strategy/values/PartyMemberToHeal.cpp b/src/plugins/playerbot/strategy/values/PartyMemberToHeal.cpp
new file mode 100644
index 0000000..2ef8e3c
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/PartyMemberToHeal.cpp
@@ -0,0 +1,60 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "PartyMemberToHeal.h"
+#include "../../PlayerbotAIConfig.h"
+#include "../../../Entities/Pet/Pet.h"
+
+using namespace ai;
+
+class IsTargetOfHealingSpell : public SpellEntryPredicate
+{
+public:
+    virtual bool Check(SpellInfo const* spell) {
+        for (int i=0; i<3; i++) {
+            if (spell->Effects[i].Effect == SPELL_EFFECT_HEAL ||
+                spell->Effects[i].Effect == SPELL_EFFECT_HEAL_MAX_HEALTH ||
+                spell->Effects[i].Effect == SPELL_EFFECT_HEAL_MECHANICAL ||
+                spell->Effects[i].Effect == SPELL_EFFECT_HEAL_PCT)
+                return true;
+        }
+        return false;
+    }
+
+};
+
+Unit* PartyMemberToHeal::Calculate()
+{
+
+    IsTargetOfHealingSpell predicate;
+
+    Group* group = bot->GetGroup();
+    if (!group)
+        return NULL;
+
+    bool isRaid = bot->GetGroup()->isRaidGroup();
+    MinValueCalculator calc(100);
+    for (GroupReference *gref = group->GetFirstMember(); gref; gref = gref->next())
+    {
+        Player* player = gref->GetSource();
+        if (!Check(player) || !player->IsAlive())
+            continue;
+
+        uint8 health = player->GetHealthPct();
+        if (isRaid || health < sPlayerbotAIConfig.mediumHealth || !IsTargetOfSpellCast(player, predicate))
+            calc.probe(health, player);
+
+        Pet* pet = player->GetPet();
+        if (pet && CanHealPet(pet))
+        {
+            health = ((Unit*)pet)->GetHealthPct();
+            if (isRaid || health < sPlayerbotAIConfig.mediumHealth || !IsTargetOfSpellCast(player, predicate))
+                calc.probe(health, player);
+        }
+    }
+    return (Unit*)calc.param;
+}
+
+bool PartyMemberToHeal::CanHealPet(Pet* pet)
+{
+    return HUNTER_PET == pet->getPetType();
+}
diff --git a/src/plugins/playerbot/strategy/values/PartyMemberToHeal.h b/src/plugins/playerbot/strategy/values/PartyMemberToHeal.h
new file mode 100644
index 0000000..bbbc2f4
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/PartyMemberToHeal.h
@@ -0,0 +1,17 @@
+#pragma once
+#include "../Value.h"
+#include "PartyMemberValue.h"
+
+namespace ai
+{
+    class PartyMemberToHeal : public PartyMemberValue
+	{
+	public:
+        PartyMemberToHeal(PlayerbotAI* ai) : 
+          PartyMemberValue(ai) {}
+    
+    protected:
+        virtual Unit* Calculate();
+        bool CanHealPet(Pet* pet);
+	};
+}
diff --git a/src/plugins/playerbot/strategy/values/PartyMemberToResurrect.cpp b/src/plugins/playerbot/strategy/values/PartyMemberToResurrect.cpp
new file mode 100644
index 0000000..58dd203
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/PartyMemberToResurrect.cpp
@@ -0,0 +1,44 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "PartyMemberToResurrect.h"
+
+using namespace ai;
+
+class IsTargetOfResurrectSpell : public SpellEntryPredicate
+{
+public:
+    virtual bool Check(SpellInfo const* spell)
+    {
+        for (int i=0; i<3; i++)
+        {
+            if (spell->Effects[i].Effect == SPELL_EFFECT_RESURRECT ||
+                spell->Effects[i].Effect == SPELL_EFFECT_RESURRECT_NEW ||
+                spell->Effects[i].Effect == SPELL_EFFECT_SELF_RESURRECT)
+                return true;
+        }
+        return false;
+    }
+
+};
+
+class FindDeadPlayer : public FindPlayerPredicate
+{
+public:
+    FindDeadPlayer(PartyMemberValue* value) : value(value) {}
+
+    virtual bool Check(Unit* unit)
+    {
+        Player* player = dynamic_cast<Player*>(unit);
+        return player && player->getDeathState() == CORPSE && !value->IsTargetOfSpellCast(player, predicate);
+    }
+
+private:
+    PartyMemberValue* value;
+    IsTargetOfResurrectSpell predicate;
+};
+
+Unit* PartyMemberToResurrect::Calculate()
+{
+	FindDeadPlayer finder(this);
+    return FindPartyMember(finder);
+}
diff --git a/src/plugins/playerbot/strategy/values/PartyMemberToResurrect.h b/src/plugins/playerbot/strategy/values/PartyMemberToResurrect.h
new file mode 100644
index 0000000..36815f0
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/PartyMemberToResurrect.h
@@ -0,0 +1,16 @@
+#pragma once
+#include "../Value.h"
+#include "PartyMemberValue.h"
+
+namespace ai
+{
+    class PartyMemberToResurrect : public PartyMemberValue
+	{
+	public:
+        PartyMemberToResurrect(PlayerbotAI* ai) : 
+          PartyMemberValue(ai) {}
+    
+    protected:
+        virtual Unit* Calculate();
+	};
+}
diff --git a/src/plugins/playerbot/strategy/values/PartyMemberValue.cpp b/src/plugins/playerbot/strategy/values/PartyMemberValue.cpp
new file mode 100644
index 0000000..2f5bcc4
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/PartyMemberValue.cpp
@@ -0,0 +1,111 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "PartyMemberValue.h"
+#include "../../PlayerbotAIConfig.h"
+
+using namespace ai;
+using namespace std;
+
+Unit* PartyMemberValue::FindPartyMember(list<Player*>* party, FindPlayerPredicate &predicate)
+{
+    for (list<Player*>::iterator i = party->begin(); i != party->end(); ++i)
+    {
+        Player* player = *i;
+
+        if (!player)
+            continue;
+
+        if (Check(player) && predicate.Check(player))
+            return player;
+
+        Pet* pet = player->GetPet();
+        if (!pet)
+            continue;
+
+        Unit* unit = (Unit*)pet;
+        if (unit && Check(unit) && predicate.Check(unit))
+            return unit;
+    }
+
+    return NULL;
+}
+
+Unit* PartyMemberValue::FindPartyMember(FindPlayerPredicate &predicate)
+{
+    Player* master = GetMaster();
+    Group* group = bot->GetGroup();
+    if (!group)
+        return NULL;
+
+    list<Player*> healers, tanks, others, masters;
+    masters.push_back(master);
+    for (GroupReference *gref = group->GetFirstMember(); gref; gref = gref->next())
+    {
+        Player* player = gref->GetSource();
+
+        if (ai->IsHeal(player))
+            healers.push_back(player);
+        else if (ai->IsTank(player))
+            tanks.push_back(player);
+        else if (player != master)
+            others.push_back(player);
+    }
+
+    list<list<Player*>* > lists;
+    lists.push_back(&healers);
+    lists.push_back(&tanks);
+    lists.push_back(&masters);
+    lists.push_back(&others);
+
+    for (list<list<Player*>* >::iterator i = lists.begin(); i != lists.end(); ++i)
+    {
+        list<Player*>* party = *i;
+        Unit* target = FindPartyMember(party, predicate);
+        if (target)
+            return target;
+    }
+
+    return NULL;
+}
+
+bool PartyMemberValue::Check(Unit* player)
+{
+
+
+    return player && player != bot && player->GetMapId() == bot->GetMapId() &&
+        bot->GetDistance(player) < sPlayerbotAIConfig.spellDistance &&
+        bot->IsWithinLOS(player->GetPositionX(), player->GetPositionY(), player->GetPositionZ());
+}
+
+bool PartyMemberValue::IsTargetOfSpellCast(Player* target, SpellEntryPredicate &predicate)
+{
+
+    Group* group = bot->GetGroup();
+    ObjectGuid targetGuid = target ? target->GetGUID() : bot->GetGUID();
+    ObjectGuid corpseGuid = target && target->GetCorpse() ? target->GetCorpse()->GetGUID() : ObjectGuid();
+
+    for (GroupReference *gref = group->GetFirstMember(); gref; gref = gref->next())
+    {
+        Player* player = gref->GetSource();
+        if (player == bot)
+            continue;
+
+        if (player->IsNonMeleeSpellCast(true))
+        {
+            for (int type = CURRENT_GENERIC_SPELL; type < CURRENT_MAX_SPELL; type++) {
+                Spell* spell = player->GetCurrentSpell((CurrentSpellTypes)type);
+                if (spell && predicate.Check(spell->m_spellInfo)) {
+                    ObjectGuid unitTarget = spell->m_targets.GetUnitTargetGUID();
+                    if (unitTarget == targetGuid)
+                        return true;
+
+                    ObjectGuid corpseTarget = spell->m_targets.GetCorpseTargetGUID();
+                    if (corpseTarget == corpseGuid)
+                        return true;
+                }
+            }
+        }
+    }
+
+    return false;
+}
diff --git a/src/plugins/playerbot/strategy/values/PartyMemberValue.h b/src/plugins/playerbot/strategy/values/PartyMemberValue.h
new file mode 100644
index 0000000..5229b46
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/PartyMemberValue.h
@@ -0,0 +1,31 @@
+#pragma once
+#include "../Value.h"
+
+namespace ai
+{
+    class FindPlayerPredicate
+    {
+    public:
+        virtual bool Check(Unit*) = 0;
+    };
+
+    class SpellEntryPredicate
+    {
+    public:
+        virtual bool Check(SpellInfo const*) = 0;
+    };
+
+    class PartyMemberValue : public UnitCalculatedValue
+	{
+	public:
+        PartyMemberValue(PlayerbotAI* ai) : UnitCalculatedValue(ai) {}
+
+    public:
+        bool IsTargetOfSpellCast(Player* target, SpellEntryPredicate &predicate);
+
+    protected:
+        Unit* FindPartyMember(FindPlayerPredicate &predicate);
+        Unit* FindPartyMember(list<Player*>* party, FindPlayerPredicate &predicate);
+        bool Check(Unit* player);
+	};
+}
diff --git a/src/plugins/playerbot/strategy/values/PartyMemberWithoutAuraValue.cpp b/src/plugins/playerbot/strategy/values/PartyMemberWithoutAuraValue.cpp
new file mode 100644
index 0000000..63f7008
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/PartyMemberWithoutAuraValue.cpp
@@ -0,0 +1,35 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "PartyMemberWithoutAuraValue.h"
+#include "../../../Entities/Pet/Pet.h"
+
+using namespace ai;
+
+class PlayerWithoutAuraPredicate : public FindPlayerPredicate, public PlayerbotAIAware
+{
+public:
+    PlayerWithoutAuraPredicate(PlayerbotAI* ai, string aura) :
+        PlayerbotAIAware(ai), FindPlayerPredicate(), aura(aura) {}
+
+public:
+    virtual bool Check(Unit* unit)
+    {
+        if (unit->IsPet())
+        {
+            Pet* pet = unit->ToPet();
+            if (pet && pet->getPetType() == SUMMON_PET)
+                return false;
+        }
+
+        return unit->IsAlive() && !ai->HasAura(aura, unit);
+    }
+
+private:
+    string aura;
+};
+
+Unit* PartyMemberWithoutAuraValue::Calculate()
+{
+	PlayerWithoutAuraPredicate predicate(ai, qualifier);
+    return FindPartyMember(predicate);
+}
diff --git a/src/plugins/playerbot/strategy/values/PartyMemberWithoutAuraValue.h b/src/plugins/playerbot/strategy/values/PartyMemberWithoutAuraValue.h
new file mode 100644
index 0000000..63961de
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/PartyMemberWithoutAuraValue.h
@@ -0,0 +1,17 @@
+#pragma once
+#include "../Value.h"
+#include "PartyMemberValue.h"
+#include "../../PlayerbotAIConfig.h"
+
+namespace ai
+{
+    class PartyMemberWithoutAuraValue : public PartyMemberValue, public Qualified
+	{
+	public:
+        PartyMemberWithoutAuraValue(PlayerbotAI* ai, float range = sPlayerbotAIConfig.sightDistance) :
+          PartyMemberValue(ai) {}
+
+    protected:
+        virtual Unit* Calculate();
+	};
+}
diff --git a/src/plugins/playerbot/strategy/values/PetTargetValue.h b/src/plugins/playerbot/strategy/values/PetTargetValue.h
new file mode 100644
index 0000000..35705c7
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/PetTargetValue.h
@@ -0,0 +1,13 @@
+#pragma once
+#include "../Value.h"
+
+namespace ai
+{
+    class PetTargetValue : public UnitCalculatedValue
+	{
+	public:
+        PetTargetValue(PlayerbotAI* ai) : UnitCalculatedValue(ai) {}
+
+        virtual Unit* Calculate() { return (Unit*)(ai->GetBot()->GetPet()); }
+    };
+}
diff --git a/src/plugins/playerbot/strategy/values/PositionValue.cpp b/src/plugins/playerbot/strategy/values/PositionValue.cpp
new file mode 100644
index 0000000..70424b0
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/PositionValue.cpp
@@ -0,0 +1,10 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "PositionValue.h"
+
+using namespace ai;
+
+PositionValue::PositionValue(PlayerbotAI* ai)
+    : ManualSetValue<ai::Position&>(ai, position), Qualified()
+{
+}
diff --git a/src/plugins/playerbot/strategy/values/PositionValue.h b/src/plugins/playerbot/strategy/values/PositionValue.h
new file mode 100644
index 0000000..4d453e1
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/PositionValue.h
@@ -0,0 +1,26 @@
+#pragma once
+#include "../Value.h"
+
+namespace ai
+{
+    class Position
+    {
+    public:
+        Position() : valueSet(false) {}
+        void Set(double x, double y, double z) { this->x = x; this->y = y; this->z = z; this->valueSet = true; }
+        void Reset() { valueSet = false; }
+        bool isSet() { return valueSet; }
+
+        double x, y, z;
+        bool valueSet;
+    };
+
+    class PositionValue : public ManualSetValue<Position&>, public Qualified
+	{
+	public:
+        PositionValue(PlayerbotAI* ai);
+
+	private:
+        Position position;
+    };
+}
diff --git a/src/plugins/playerbot/strategy/values/PossibleTargetsValue.cpp b/src/plugins/playerbot/strategy/values/PossibleTargetsValue.cpp
new file mode 100644
index 0000000..17e1c27
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/PossibleTargetsValue.cpp
@@ -0,0 +1,23 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "PossibleTargetsValue.h"
+
+#include "../../../Grids/Notifiers/GridNotifiers.h"
+#include "../../../Grids/Notifiers/GridNotifiersImpl.h"
+#include "../../../Grids/Cells/CellImpl.h"
+
+using namespace ai;
+using namespace Trinity;
+
+void PossibleTargetsValue::FindUnits(list<Unit*> &targets)
+{
+    AnyUnfriendlyUnitInObjectRangeCheck u_check(bot, bot, range);
+    UnitListSearcher<AnyUnfriendlyUnitInObjectRangeCheck> searcher(bot, targets, u_check);
+    bot->VisitNearbyObject(bot->GetMap()->GetVisibilityRange(), searcher);
+}
+
+bool PossibleTargetsValue::AcceptUnit(Unit* unit)
+{
+    return !unit->HasFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE) &&
+            (unit->IsHostileTo(bot) || (unit->getLevel() > 1 && !unit->IsFriendlyTo(bot)));
+}
diff --git a/src/plugins/playerbot/strategy/values/PossibleTargetsValue.h b/src/plugins/playerbot/strategy/values/PossibleTargetsValue.h
new file mode 100644
index 0000000..5a97a71
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/PossibleTargetsValue.h
@@ -0,0 +1,19 @@
+#pragma once
+#include "../Value.h"
+#include "NearestUnitsValue.h"
+#include "../../PlayerbotAIConfig.h"
+
+namespace ai
+{
+    class PossibleTargetsValue : public NearestUnitsValue
+	{
+	public:
+        PossibleTargetsValue(PlayerbotAI* ai, float range = sPlayerbotAIConfig.sightDistance) :
+          NearestUnitsValue(ai) {}
+
+    protected:
+        virtual void FindUnits(list<Unit*> &targets);
+        virtual bool AcceptUnit(Unit* unit);
+
+	};
+}
diff --git a/src/plugins/playerbot/strategy/values/RtiTargetValue.h b/src/plugins/playerbot/strategy/values/RtiTargetValue.h
new file mode 100644
index 0000000..01aac86
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/RtiTargetValue.h
@@ -0,0 +1,51 @@
+#pragma once
+#include "../Value.h"
+#include "../../../Groups/Group.h"
+
+namespace ai
+{
+    class RtiTargetValue : public UnitCalculatedValue
+    {
+    public:
+        RtiTargetValue(PlayerbotAI* ai) : UnitCalculatedValue(ai)
+        {}
+
+    public:
+        static int GetRtiIndex(string rti)
+        {
+            int index = -1;
+            if(rti == "star") index = 0;
+            else if(rti == "circle") index = 1;
+            else if(rti == "diamond") index = 2;
+            else if(rti == "triangle") index = 3;
+            else if(rti == "moon") index = 4;
+            else if(rti == "square") index = 5;
+            else if(rti == "cross") index = 6;
+            else if(rti == "skull") index = 7;
+            return index;
+        }
+
+        Unit *Calculate()
+        {
+            Group *group = bot->GetGroup();
+            if(!group)
+                return NULL;
+
+            string rti = AI_VALUE(string, "rti");
+            int index = GetRtiIndex(rti);
+
+            if (index == -1)
+                return NULL;
+
+            uint64 guid = group->GetTargetIcon(index);
+            if (!guid)
+                return NULL;
+
+            Unit* unit = ai->GetUnit(ObjectGuid(guid));
+            if (!unit || unit->isDead())
+                return NULL;
+
+            return unit;
+        }
+    };
+}
diff --git a/src/plugins/playerbot/strategy/values/RtiValue.cpp b/src/plugins/playerbot/strategy/values/RtiValue.cpp
new file mode 100644
index 0000000..3698212
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/RtiValue.cpp
@@ -0,0 +1,36 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "RtiValue.h"
+
+using namespace ai;
+
+RtiValue::RtiValue(PlayerbotAI* ai)
+    : ManualSetValue<string>(ai, "none")
+{
+    switch (ai->GetBot()->getClass())
+    {
+    case CLASS_DRUID:
+        value = "circle";
+        break;
+    case CLASS_ROGUE:
+        value = "star";
+        break;
+    case CLASS_SHAMAN:
+        value = "square";
+        break;
+    case CLASS_HUNTER:
+        value = "triangle";
+        break;
+    case CLASS_WARLOCK:
+    case CLASS_PALADIN:
+        value = "diamond";
+        break;
+    case CLASS_PRIEST:
+    case CLASS_MAGE:
+        value = "moon";
+        break;
+    default:
+        value = "skull";
+        break;
+    }
+}
diff --git a/src/plugins/playerbot/strategy/values/RtiValue.h b/src/plugins/playerbot/strategy/values/RtiValue.h
new file mode 100644
index 0000000..760485e
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/RtiValue.h
@@ -0,0 +1,11 @@
+#pragma once
+#include "../Value.h"
+
+namespace ai
+{
+    class RtiValue : public ManualSetValue<string>
+	{
+	public:
+        RtiValue(PlayerbotAI* ai);
+    };
+}
diff --git a/src/plugins/playerbot/strategy/values/SelfTargetValue.h b/src/plugins/playerbot/strategy/values/SelfTargetValue.h
new file mode 100644
index 0000000..f64a0fe
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/SelfTargetValue.h
@@ -0,0 +1,13 @@
+#pragma once
+#include "../Value.h"
+
+namespace ai
+{
+    class SelfTargetValue : public UnitCalculatedValue
+	{
+	public:
+        SelfTargetValue(PlayerbotAI* ai) : UnitCalculatedValue(ai) {}
+
+        virtual Unit* Calculate() { return ai->GetBot(); }
+    };
+}
diff --git a/src/plugins/playerbot/strategy/values/SpellCastUsefulValue.cpp b/src/plugins/playerbot/strategy/values/SpellCastUsefulValue.cpp
new file mode 100644
index 0000000..c9d6c5c
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/SpellCastUsefulValue.cpp
@@ -0,0 +1,52 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "SpellCastUsefulValue.h"
+#include "LastSpellCastValue.h"
+
+using namespace ai;
+
+bool SpellCastUsefulValue::Calculate()
+{
+    uint32 spellid = AI_VALUE2(uint32, "spell id", qualifier);
+	if (!spellid)
+		return true; // there can be known alternatives
+
+	SpellInfo const *spellInfo = sSpellMgr->GetSpellInfo(spellid);
+	if (!spellInfo)
+		return true; // there can be known alternatives
+
+	if (spellInfo->Attributes & SPELL_ATTR0_ON_NEXT_SWING ||
+		spellInfo->Attributes & SPELL_ATTR0_ON_NEXT_SWING_2)
+	{
+		Spell* spell = bot->GetCurrentSpell(CURRENT_MELEE_SPELL);
+		if (spell && spell->m_spellInfo->Id == spellid && spell->IsNextMeleeSwingSpell() && bot->HasUnitState(UNIT_STATE_MELEE_ATTACKING))
+			return false;
+	}
+	else
+	{
+        uint32 lastSpellId = AI_VALUE(LastSpellCast&, "last spell cast").id;
+        if (spellid == lastSpellId)
+        {
+            Spell* const pSpell = bot->FindCurrentSpellBySpellId(lastSpellId);
+            if (pSpell)
+                return false;
+        }
+	}
+
+    if (spellInfo->IsAutoRepeatRangedSpell() && bot->GetCurrentSpell(CURRENT_AUTOREPEAT_SPELL) &&
+            bot->GetCurrentSpell(CURRENT_AUTOREPEAT_SPELL)->m_spellInfo->Id == spellid)
+    {
+        return false;
+    }
+
+    // TODO: workaround
+    if (qualifier == "windfury weapon" || qualifier == "flametongue weapon" || qualifier == "frostbrand weapon" ||
+            qualifier == "rockbiter weapon" || qualifier == "earthliving weapon" || qualifier == "spellstone")
+    {
+        Item *item = AI_VALUE2(Item*, "item for spell", spellid);
+        if (item && item->GetEnchantmentId(TEMP_ENCHANTMENT_SLOT))
+            return false;
+    }
+
+	return true;
+}
diff --git a/src/plugins/playerbot/strategy/values/SpellCastUsefulValue.h b/src/plugins/playerbot/strategy/values/SpellCastUsefulValue.h
new file mode 100644
index 0000000..8fa9386
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/SpellCastUsefulValue.h
@@ -0,0 +1,17 @@
+#pragma once
+#include "../Value.h"
+#include "TargetValue.h"
+
+namespace ai
+{
+   
+    class SpellCastUsefulValue : public BoolCalculatedValue, public Qualified
+	{
+	public:
+        SpellCastUsefulValue(PlayerbotAI* ai) : BoolCalculatedValue(ai) {}
+      
+    public:
+        virtual bool Calculate();
+
+    };
+}
diff --git a/src/plugins/playerbot/strategy/values/SpellIdValue.cpp b/src/plugins/playerbot/strategy/values/SpellIdValue.cpp
new file mode 100644
index 0000000..61755b7
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/SpellIdValue.cpp
@@ -0,0 +1,90 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "SpellIdValue.h"
+#include "../../PlayerbotAIConfig.h"
+#include "../../../Entities/Pet/Pet.h"
+
+using namespace ai;
+
+SpellIdValue::SpellIdValue(PlayerbotAI* ai) :
+        CalculatedValue<uint32>(ai, "spell id", 5)
+{
+}
+
+uint32 SpellIdValue::Calculate()
+{
+    string namepart = qualifier;
+    wstring wnamepart;
+
+    if (!Utf8toWStr(namepart, wnamepart))
+        return 0;
+
+    wstrToLower(wnamepart);
+    char firstSymbol = tolower(qualifier[0]);
+    int spellLength = wnamepart.length();
+
+    int loc = bot->GetSession()->GetSessionDbcLocale();
+
+    uint32 foundSpellId = 0;
+    bool foundMatchUsesNoReagents = false;
+
+    for (PlayerSpellMap::iterator itr = bot->GetSpellMap().begin(); itr != bot->GetSpellMap().end(); ++itr)
+    {
+        uint32 spellId = itr->first;
+
+        const SpellInfo* pSpellInfo = sSpellMgr->GetSpellInfo(spellId);
+        if (!pSpellInfo)
+            continue;
+
+        if (itr->second->state == PLAYERSPELL_REMOVED || itr->second->disabled || pSpellInfo->IsPassive())
+            continue;
+
+        if (pSpellInfo->Effects[0].Effect == SPELL_EFFECT_LEARN_SPELL)
+            continue;
+
+        char* spellName = pSpellInfo->SpellName[loc];
+        if (tolower(spellName[0]) != firstSymbol || strlen(spellName) != spellLength || !Utf8FitTo(spellName, wnamepart))
+            continue;
+
+        bool usesNoReagents = (pSpellInfo->Reagent[0] <= 0);
+
+        // if we already found a spell
+        bool useThisSpell = true;
+        if (foundSpellId > 0) {
+            if (usesNoReagents && !foundMatchUsesNoReagents) {}
+            else if (spellId > foundSpellId) {}
+            else
+                useThisSpell = false;
+        }
+        if (useThisSpell) {
+            foundSpellId = spellId;
+            foundMatchUsesNoReagents = usesNoReagents;
+        }
+    }
+
+    Pet* pet = bot->GetPet();
+    if (!foundSpellId && pet)
+    {
+        for (PetSpellMap::const_iterator itr = pet->m_spells.begin(); itr != pet->m_spells.end(); ++itr)
+        {
+            if(itr->second.state == PETSPELL_REMOVED)
+                continue;
+
+            uint32 spellId = itr->first;
+            const SpellInfo* pSpellInfo = sSpellMgr->GetSpellInfo(spellId);
+            if (!pSpellInfo)
+                continue;
+
+            if (pSpellInfo->Effects[0].Effect == SPELL_EFFECT_LEARN_SPELL)
+                continue;
+
+            char* spellName = pSpellInfo->SpellName[loc];
+            if (tolower(spellName[0]) != firstSymbol || strlen(spellName) != spellLength || !Utf8FitTo(spellName, wnamepart))
+                continue;
+
+            foundSpellId = spellId;
+        }
+    }
+
+    return foundSpellId;
+}
diff --git a/src/plugins/playerbot/strategy/values/SpellIdValue.h b/src/plugins/playerbot/strategy/values/SpellIdValue.h
new file mode 100644
index 0000000..1281b38
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/SpellIdValue.h
@@ -0,0 +1,17 @@
+#pragma once
+#include "../Value.h"
+#include "TargetValue.h"
+
+namespace ai
+{
+
+    class SpellIdValue : public CalculatedValue<uint32>, public Qualified
+	{
+	public:
+        SpellIdValue(PlayerbotAI* ai);
+
+    public:
+        virtual uint32 Calculate();
+
+    };
+}
diff --git a/src/plugins/playerbot/strategy/values/StatsValues.cpp b/src/plugins/playerbot/strategy/values/StatsValues.cpp
new file mode 100644
index 0000000..258a71b
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/StatsValues.cpp
@@ -0,0 +1,120 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "StatsValues.h"
+
+using namespace ai;
+
+uint8 HealthValue::Calculate()
+{
+    Unit* target = GetTarget();
+    if (!target)
+        return 100;
+    return (static_cast<float> (target->GetHealth()) / target->GetMaxHealth()) * 100;
+}
+
+bool IsDeadValue::Calculate()
+{
+    Unit* target = GetTarget();
+    if (!target)
+        return false;
+    return target->getDeathState() != ALIVE;
+}
+
+
+uint8 RageValue::Calculate()
+{
+    Unit* target = GetTarget();
+    if (!target)
+        return 0;
+    return (static_cast<float> (target->GetPower(POWER_RAGE)));
+}
+
+uint8 EnergyValue::Calculate()
+{
+    Unit* target = GetTarget();
+    if (!target)
+        return 0;
+    return (static_cast<float> (target->GetPower(POWER_ENERGY)));
+}
+
+uint8 ManaValue::Calculate()
+{
+    Unit* target = GetTarget();
+    if (!target)
+        return 100;
+    return (static_cast<float> (target->GetPower(POWER_MANA)) / target->GetMaxPower(POWER_MANA)) * 100;
+}
+
+bool HasManaValue::Calculate()
+{
+    Unit* target = GetTarget();
+    if (!target)
+        return false;
+    return target->GetPower(POWER_MANA);
+}
+
+
+uint8 ComboPointsValue::Calculate()
+{
+    Unit *target = GetTarget();
+    if (!target || target->GetGUID() != bot->GetComboTarget())
+        return 0;
+
+    return bot->GetComboPoints();
+}
+
+bool IsMountedValue::Calculate()
+{
+    Unit* target = GetTarget();
+    if (!target)
+        return false;
+
+    return target->IsMounted();
+}
+
+
+bool IsInCombatValue::Calculate()
+{
+    Unit* target = GetTarget();
+    if (!target)
+        return false;
+
+    return target->IsInCombat();
+}
+
+uint8 BagSpaceValue::Calculate()
+{
+    uint32 totalused = 0, total = 16;
+    for (uint8 slot = INVENTORY_SLOT_ITEM_START; slot < INVENTORY_SLOT_ITEM_END; slot++)
+    {
+        if (bot->GetItemByPos(INVENTORY_SLOT_BAG_0, slot))
+            totalused++;
+    }
+
+    uint32 totalfree = 16 - totalused;
+    for (uint8 bag = INVENTORY_SLOT_BAG_START; bag < INVENTORY_SLOT_BAG_END; ++bag)
+    {
+        const Bag* const pBag = (Bag*) bot->GetItemByPos(INVENTORY_SLOT_BAG_0, bag);
+        if (pBag)
+        {
+            ItemTemplate const* pBagProto = pBag->GetTemplate();
+            if (pBagProto->Class == ITEM_CLASS_CONTAINER && pBagProto->SubClass == ITEM_SUBCLASS_CONTAINER)
+            {
+                total += pBag->GetBagSize();
+                totalfree += pBag->GetFreeSlots();
+            }
+        }
+
+    }
+
+    return (static_cast<float> (totalused) / total) * 100;
+}
+
+uint8 SpeedValue::Calculate()
+{
+    Unit* target = GetTarget();
+    if (!target)
+        return 100;
+
+    return (uint8) (100.0f * target->GetSpeedRate(MOVE_RUN));
+}
diff --git a/src/plugins/playerbot/strategy/values/StatsValues.h b/src/plugins/playerbot/strategy/values/StatsValues.h
new file mode 100644
index 0000000..cc7b460
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/StatsValues.h
@@ -0,0 +1,146 @@
+#pragma once
+#include "../Value.h"
+
+class Unit;
+
+namespace ai
+{
+    class HealthValue : public Uint8CalculatedValue, public Qualified
+    {
+    public:
+        HealthValue(PlayerbotAI* ai) : Uint8CalculatedValue(ai) {}
+
+        Unit* GetTarget()
+        {
+            AiObjectContext* ctx = AiObject::context;
+            return ctx->GetValue<Unit*>(qualifier)->Get();
+        }
+        virtual uint8 Calculate();
+    };
+
+    class IsDeadValue : public BoolCalculatedValue, public Qualified
+    {
+    public:
+        IsDeadValue(PlayerbotAI* ai) : BoolCalculatedValue(ai) {}
+
+        Unit* GetTarget()
+        {
+            AiObjectContext* ctx = AiObject::context;
+            return ctx->GetValue<Unit*>(qualifier)->Get();
+        }
+        virtual bool Calculate();
+    };
+
+    class RageValue : public Uint8CalculatedValue, public Qualified
+    {
+    public:
+        RageValue(PlayerbotAI* ai) : Uint8CalculatedValue(ai) {}
+
+        Unit* GetTarget()
+        {
+            AiObjectContext* ctx = AiObject::context;
+            return ctx->GetValue<Unit*>(qualifier)->Get();
+        }
+        virtual uint8 Calculate();
+    };
+
+    class EnergyValue : public Uint8CalculatedValue, public Qualified
+    {
+    public:
+        EnergyValue(PlayerbotAI* ai) : Uint8CalculatedValue(ai) {}
+
+        Unit* GetTarget()
+        {
+            AiObjectContext* ctx = AiObject::context;
+            return ctx->GetValue<Unit*>(qualifier)->Get();
+        }
+        virtual uint8 Calculate();
+    };
+
+    class ManaValue : public Uint8CalculatedValue, public Qualified
+    {
+    public:
+        ManaValue(PlayerbotAI* ai) : Uint8CalculatedValue(ai) {}
+
+        Unit* GetTarget()
+        {
+            AiObjectContext* ctx = AiObject::context;
+            return ctx->GetValue<Unit*>(qualifier)->Get();
+        }
+        virtual uint8 Calculate();
+    };
+
+    class HasManaValue : public BoolCalculatedValue, public Qualified
+    {
+    public:
+        HasManaValue(PlayerbotAI* ai) : BoolCalculatedValue(ai) {}
+
+        Unit* GetTarget()
+        {
+            AiObjectContext* ctx = AiObject::context;
+            return ctx->GetValue<Unit*>(qualifier)->Get();
+        }
+        virtual bool Calculate();
+    };
+
+    class ComboPointsValue : public Uint8CalculatedValue, public Qualified
+    {
+    public:
+        ComboPointsValue(PlayerbotAI* ai) : Uint8CalculatedValue(ai) {}
+
+        Unit* GetTarget()
+        {
+            AiObjectContext* ctx = AiObject::context;
+            return ctx->GetValue<Unit*>(qualifier)->Get();
+        }
+        virtual uint8 Calculate();
+    };
+
+    class IsMountedValue : public BoolCalculatedValue, public Qualified
+    {
+    public:
+        IsMountedValue(PlayerbotAI* ai) : BoolCalculatedValue(ai) {}
+
+        Unit* GetTarget()
+        {
+            AiObjectContext* ctx = AiObject::context;
+            return ctx->GetValue<Unit*>(qualifier)->Get();
+        }
+        virtual bool Calculate();
+    };
+
+    class IsInCombatValue : public BoolCalculatedValue, public Qualified
+    {
+    public:
+        IsInCombatValue(PlayerbotAI* ai) : BoolCalculatedValue(ai) {}
+
+        Unit* GetTarget()
+        {
+            AiObjectContext* ctx = AiObject::context;
+            return ctx->GetValue<Unit*>(qualifier)->Get();
+        }
+        virtual bool Calculate() ;
+    };
+
+    class BagSpaceValue : public Uint8CalculatedValue
+    {
+    public:
+        BagSpaceValue(PlayerbotAI* ai) : Uint8CalculatedValue(ai) {}
+
+        virtual uint8 Calculate();
+    };
+
+    class SpeedValue : public Uint8CalculatedValue, public Qualified
+    {
+    public:
+        SpeedValue(PlayerbotAI* ai) : Uint8CalculatedValue(ai) {}
+
+        Unit* GetTarget()
+        {
+            AiObjectContext* ctx = AiObject::context;
+            return ctx->GetValue<Unit*>(qualifier)->Get();
+        }
+        virtual uint8 Calculate();
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/values/TankTargetValue.cpp b/src/plugins/playerbot/strategy/values/TankTargetValue.cpp
new file mode 100644
index 0000000..01967f8
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/TankTargetValue.cpp
@@ -0,0 +1,47 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "TankTargetValue.h"
+
+using namespace ai;
+
+class FindTargetForTankStrategy : public FindTargetStrategy
+{
+public:
+    FindTargetForTankStrategy(PlayerbotAI* ai) : FindTargetStrategy(ai)
+    {
+        minThreat = 0;
+        minTankCount = 0;
+        maxDpsCount = 0;
+    }
+
+public:
+    virtual void CheckAttacker(Unit* creature, ThreatManager* threatManager)
+    {
+        Player* bot = ai->GetBot();
+        float threat = threatManager->getThreat(bot);
+        int tankCount, dpsCount;
+        GetPlayerCount(creature, &tankCount, &dpsCount);
+
+        if (!result ||
+            (minThreat >= threat &&
+            (minTankCount >= tankCount || maxDpsCount <= dpsCount)))
+        {
+            minThreat = threat;
+            minTankCount = tankCount;
+            maxDpsCount = dpsCount;
+            result = creature;
+        }
+    }
+
+protected:
+    float minThreat;
+    int minTankCount;
+    int maxDpsCount;
+};
+
+
+Unit* TankTargetValue::Calculate()
+{
+    FindTargetForTankStrategy strategy(ai);
+    return FindTarget(&strategy);
+}
diff --git a/src/plugins/playerbot/strategy/values/TankTargetValue.h b/src/plugins/playerbot/strategy/values/TankTargetValue.h
new file mode 100644
index 0000000..f297eb0
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/TankTargetValue.h
@@ -0,0 +1,16 @@
+#pragma once
+#include "../Value.h"
+#include "TargetValue.h"
+
+namespace ai
+{
+   
+    class TankTargetValue : public TargetValue
+	{
+	public:
+        TankTargetValue(PlayerbotAI* ai) : TargetValue(ai) {}
+
+    public:
+        Unit* Calculate();
+    };
+}
diff --git a/src/plugins/playerbot/strategy/values/TargetValue.cpp b/src/plugins/playerbot/strategy/values/TargetValue.cpp
new file mode 100644
index 0000000..2586bad
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/TargetValue.cpp
@@ -0,0 +1,54 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "TargetValue.h"
+
+using namespace ai;
+
+Unit* TargetValue::FindTarget(FindTargetStrategy* strategy)
+{
+    list<ObjectGuid> attackers = ai->GetAiObjectContext()->GetValue<list<ObjectGuid> >("attackers")->Get();
+    for (list<ObjectGuid>::iterator i = attackers.begin(); i != attackers.end(); ++i)
+    {
+        Unit* unit = ai->GetUnit(*i);
+        if (!unit)
+            continue;
+
+        ThreatManager &threatManager = unit->getThreatManager();
+        strategy->CheckAttacker(unit, &threatManager);
+    }
+
+    return strategy->GetResult();
+}
+
+void FindTargetStrategy::GetPlayerCount(Unit* creature, int* tankCount, int* dpsCount)
+{
+    Player* bot = ai->GetBot();
+    if (tankCountCache.find(creature) != tankCountCache.end())
+    {
+        *tankCount = tankCountCache[creature];
+        *dpsCount = dpsCountCache[creature];
+        return;
+    }
+
+    *tankCount = 0;
+    *dpsCount = 0;
+
+    for (HostileReference *ref = creature->getHostileRefManager().getFirst(); ref; ref = ref->next())
+    {
+        ThreatManager *threatManager = ref->GetSource();
+        Unit *attacker = threatManager->GetOwner();
+        Unit *victim = attacker->GetVictim();
+        Player *player = dynamic_cast<Player*>(victim);
+
+        if (!player)
+            continue;
+
+        if (ai->IsTank(player))
+            (*tankCount)++;
+        else
+            (*dpsCount)++;
+    }
+
+    tankCountCache[creature] = *tankCount;
+    dpsCountCache[creature] = *dpsCount;
+}
diff --git a/src/plugins/playerbot/strategy/values/TargetValue.h b/src/plugins/playerbot/strategy/values/TargetValue.h
new file mode 100644
index 0000000..700d51d
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/TargetValue.h
@@ -0,0 +1,39 @@
+#pragma once
+#include "../Value.h"
+
+namespace ai
+{
+    class FindTargetStrategy
+    {
+    public:
+        FindTargetStrategy(PlayerbotAI* ai)
+        {
+            result = NULL;
+            this->ai = ai;
+        }
+
+    public:
+        Unit* GetResult() { return result; }
+
+    public:
+        virtual void CheckAttacker(Unit* attacker, ThreatManager* threatManager) = 0;
+        void GetPlayerCount(Unit* creature, int* tankCount, int* dpsCount);
+
+    protected:
+        Unit* result;
+        PlayerbotAI* ai;
+
+    protected:
+        map<Unit*, int> tankCountCache;
+        map<Unit*, int> dpsCountCache;
+    };
+
+    class TargetValue : public UnitCalculatedValue
+	{
+	public:
+        TargetValue(PlayerbotAI* ai) : UnitCalculatedValue(ai) {}
+
+    protected:
+        Unit* FindTarget(FindTargetStrategy* strategy);
+    };
+}
diff --git a/src/plugins/playerbot/strategy/values/ThreatValues.cpp b/src/plugins/playerbot/strategy/values/ThreatValues.cpp
new file mode 100644
index 0000000..b0e0a00
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/ThreatValues.cpp
@@ -0,0 +1,62 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "ThreatValues.h"
+
+using namespace ai;
+
+uint8 ThreatValue::Calculate()
+{
+    if (qualifier == "aoe")
+    {
+        uint8 maxThreat = 0;
+        list<ObjectGuid> attackers = context->GetValue<list<ObjectGuid> >("attackers")->Get();
+        for (list<ObjectGuid>::iterator i = attackers.begin(); i != attackers.end(); i++)
+        {
+            Unit* unit = ai->GetUnit(*i);
+            if (!unit || !unit->IsAlive())
+                continue;
+
+            uint8 threat = Calculate(unit);
+            if (!maxThreat || threat > maxThreat)
+                maxThreat = threat;
+        }
+
+        return maxThreat;
+    }
+
+    Unit* target = AI_VALUE(Unit*, qualifier);
+    return Calculate(target);
+}
+
+uint8 ThreatValue::Calculate(Unit* target)
+{
+    if (!target)
+        return 0;
+
+    if (dynamic_cast<Player*>(target))
+        return 0;
+
+    Group* group = bot->GetGroup();
+    if (!group)
+        return 0;
+
+    float botThreat = target->getThreatManager().getThreat(bot);
+    float maxThreat = 0;
+
+    Group::MemberSlotList const& groupSlot = group->GetMemberSlots();
+    for (Group::member_citerator itr = groupSlot.begin(); itr != groupSlot.end(); itr++)
+    {
+        Player *player = sObjectMgr->GetPlayerByLowGUID(itr->guid);
+        if( !player || !player->IsAlive() || player == bot)
+            continue;
+
+        float threat = target->getThreatManager().getThreat(player);
+        if (maxThreat < threat)
+            maxThreat = threat;
+    }
+
+    if (maxThreat <= 0)
+        return 0;
+
+    return botThreat * 100 / maxThreat;
+}
diff --git a/src/plugins/playerbot/strategy/values/ThreatValues.h b/src/plugins/playerbot/strategy/values/ThreatValues.h
new file mode 100644
index 0000000..7301f79
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/ThreatValues.h
@@ -0,0 +1,17 @@
+#pragma once
+#include "../Value.h"
+
+namespace ai
+{
+    class ThreatValue : public Uint8CalculatedValue, public Qualified
+	{
+	public:
+        ThreatValue(PlayerbotAI* ai) : Uint8CalculatedValue(ai) {}
+
+    public:
+    	virtual uint8 Calculate();
+
+    protected:
+    	uint8 Calculate(Unit* target);
+    };
+}
diff --git a/src/plugins/playerbot/strategy/values/ValueContext.h b/src/plugins/playerbot/strategy/values/ValueContext.h
new file mode 100644
index 0000000..6fd3446
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/ValueContext.h
@@ -0,0 +1,230 @@
+#pragma once
+
+#include "NearestGameObjects.h"
+#include "LogLevelValue.h"
+#include "NearestNpcsValue.h"
+#include "PossibleTargetsValue.h"
+#include "NearestAdsValue.h"
+#include "NearestCorpsesValue.h"
+#include "PartyMemberWithoutAuraValue.h"
+#include "PartyMemberToHeal.h"
+#include "PartyMemberToResurrect.h"
+#include "CurrentTargetValue.h"
+#include "SelfTargetValue.h"
+#include "MasterTargetValue.h"
+#include "LineTargetValue.h"
+#include "TankTargetValue.h"
+#include "DpsTargetValue.h"
+#include "CcTargetValue.h"
+#include "CurrentCcTargetValue.h"
+#include "PetTargetValue.h"
+#include "GrindTargetValue.h"
+#include "RtiTargetValue.h"
+#include "PartyMemberToDispel.h"
+#include "StatsValues.h"
+#include "AttackerCountValues.h"
+#include "AttackersValue.h"
+#include "AvailableLootValue.h"
+#include "AlwaysLootListValue.h"
+#include "LootStrategyValue.h"
+#include "HasAvailableLootValue.h"
+#include "LastMovementValue.h"
+#include "DistanceValue.h"
+#include "IsMovingValue.h"
+#include "IsBehindValue.h"
+#include "IsFacingValue.h"
+#include "ItemCountValue.h"
+#include "SpellIdValue.h"
+#include "ItemForSpellValue.h"
+#include "SpellCastUsefulValue.h"
+#include "LastSpellCastValue.h"
+#include "ChatValue.h"
+#include "HasTotemValue.h"
+#include "LeastHpTargetValue.h"
+#include "AoeHealValues.h"
+#include "RtiValue.h"
+#include "PositionValue.h"
+#include "ThreatValues.h"
+#include "DuelTargetValue.h"
+#include "InvalidTargetValue.h"
+#include "EnemyPlayerValue.h"
+#include "AttackerWithoutAuraTargetValue.h"
+#include "LastSpellCastTimeValue.h"
+#include "ManaSaveLevelValue.h"
+#include "LfgValues.h"
+#include "EnemyHealerTargetValue.h"
+#include "Formations.h"
+#include "ItemUsageValue.h"
+#include "LastSaidValue.h"
+
+namespace ai
+{
+    class ValueContext : public NamedObjectContext<UntypedValue>
+    {
+    public:
+        ValueContext()
+        {
+            creators["nearest game objects"] = &ValueContext::nearest_game_objects;
+            creators["nearest npcs"] = &ValueContext::nearest_npcs;
+            creators["possible targets"] = &ValueContext::possible_targets;
+            creators["nearest adds"] = &ValueContext::nearest_adds;
+            creators["nearest corpses"] = &ValueContext::nearest_corpses;
+            creators["log level"] = &ValueContext::log_level;
+            creators["party member without aura"] = &ValueContext::party_member_without_aura;
+            creators["attacker without aura"] = &ValueContext::attacker_without_aura;
+            creators["party member to heal"] = &ValueContext::party_member_to_heal;
+            creators["party member to resurrect"] = &ValueContext::party_member_to_resurrect;
+            creators["current target"] = &ValueContext::current_target;
+            creators["self target"] = &ValueContext::self_target;
+            creators["master target"] = &ValueContext::master;
+            creators["line target"] = &ValueContext::line_target;
+            creators["tank target"] = &ValueContext::tank_target;
+            creators["dps target"] = &ValueContext::dps_target;
+            creators["least hp target"] = &ValueContext::least_hp_target;
+            creators["enemy player target"] = &ValueContext::enemy_player_target;
+            creators["cc target"] = &ValueContext::cc_target;
+            creators["current cc target"] = &ValueContext::current_cc_target;
+            creators["pet target"] = &ValueContext::pet_target;
+            creators["old target"] = &ValueContext::old_target;
+            creators["grind target"] = &ValueContext::grind_target;
+            creators["rti target"] = &ValueContext::rti_target;
+            creators["duel target"] = &ValueContext::duel_target;
+            creators["party member to dispel"] = &ValueContext::party_member_to_dispel;
+            creators["health"] = &ValueContext::health;
+            creators["rage"] = &ValueContext::rage;
+            creators["energy"] = &ValueContext::energy;
+            creators["mana"] = &ValueContext::mana;
+            creators["combo"] = &ValueContext::combo;
+            creators["dead"] = &ValueContext::dead;
+            creators["has mana"] = &ValueContext::has_mana;
+            creators["attacker count"] = &ValueContext::attacker_count;
+            creators["my attacker count"] = &ValueContext::my_attacker_count;
+            creators["has aggro"] = &ValueContext::has_aggro;
+            creators["mounted"] = &ValueContext::mounted;
+
+            creators["can loot"] = &ValueContext::can_loot;
+            creators["loot target"] = &ValueContext::loot_target;
+            creators["available loot"] = &ValueContext::available_loot;
+            creators["has available loot"] = &ValueContext::has_available_loot;
+            creators["always loot list"] = &ValueContext::always_loot_list;
+            creators["loot strategy"] = &ValueContext::loot_strategy;
+            creators["last movement"] = &ValueContext::last_movement;
+            creators["distance"] = &ValueContext::distance;
+            creators["moving"] = &ValueContext::moving;
+            creators["swimming"] = &ValueContext::swimming;
+            creators["behind"] = &ValueContext::behind;
+            creators["facing"] = &ValueContext::facing;
+
+            creators["item count"] = &ValueContext::item_count;
+            creators["inventory items"] = &ValueContext::inventory_item;
+
+            creators["spell id"] = &ValueContext::spell_id;
+            creators["item for spell"] = &ValueContext::item_for_spell;
+            creators["spell cast useful"] = &ValueContext::spell_cast_useful;
+            creators["last spell cast"] = &ValueContext::last_spell_cast;
+            creators["last spell cast time"] = &ValueContext::last_spell_cast_time;
+            creators["chat"] = &ValueContext::chat;
+            creators["has totem"] = &ValueContext::has_totem;
+
+            creators["aoe heal"] = &ValueContext::aoe_heal;
+
+            creators["rti"] = &ValueContext::rti;
+            creators["position"] = &ValueContext::position;
+            creators["threat"] = &ValueContext::threat;
+
+            creators["balance"] = &ValueContext::balance;
+            creators["attackers"] = &ValueContext::attackers;
+            creators["invalid target"] = &ValueContext::invalid_target;
+            creators["mana save level"] = &ValueContext::mana_save_level;
+            creators["combat"] = &ValueContext::combat;
+            creators["lfg proposal"] = &ValueContext::lfg_proposal;
+            creators["bag space"] = &ValueContext::bag_space;
+            creators["enemy healer target"] = &ValueContext::enemy_healer_target;
+            creators["formation"] = &ValueContext::formation;
+            creators["item usage"] = &ValueContext::item_usage;
+            creators["speed"] = &ValueContext::speed;
+            creators["last said"] = &ValueContext::last_said;
+        }
+
+    private:
+        static UntypedValue* item_usage(PlayerbotAI* ai) { return new ItemUsageValue(ai); }
+        static UntypedValue* formation(PlayerbotAI* ai) { return new FormationValue(ai); }
+        static UntypedValue* mana_save_level(PlayerbotAI* ai) { return new ManaSaveLevelValue(ai); }
+        static UntypedValue* invalid_target(PlayerbotAI* ai) { return new InvalidTargetValue(ai); }
+        static UntypedValue* balance(PlayerbotAI* ai) { return new BalancePercentValue(ai); }
+        static UntypedValue* attackers(PlayerbotAI* ai) { return new AttackersValue(ai); }
+
+        static UntypedValue* position(PlayerbotAI* ai) { return new PositionValue(ai); }
+        static UntypedValue* rti(PlayerbotAI* ai) { return new RtiValue(ai); }
+
+        static UntypedValue* aoe_heal(PlayerbotAI* ai) { return new AoeHealValue(ai); }
+
+        static UntypedValue* chat(PlayerbotAI* ai) { return new ChatValue(ai); }
+        static UntypedValue* last_spell_cast(PlayerbotAI* ai) { return new LastSpellCastValue(ai); }
+        static UntypedValue* last_spell_cast_time(PlayerbotAI* ai) { return new LastSpellCastTimeValue(ai); }
+        static UntypedValue* spell_cast_useful(PlayerbotAI* ai) { return new SpellCastUsefulValue(ai); }
+        static UntypedValue* item_for_spell(PlayerbotAI* ai) { return new ItemForSpellValue(ai); }
+        static UntypedValue* spell_id(PlayerbotAI* ai) { return new SpellIdValue(ai); }
+        static UntypedValue* inventory_item(PlayerbotAI* ai) { return new InventoryItemValue(ai); }
+        static UntypedValue* item_count(PlayerbotAI* ai) { return new ItemCountValue(ai); }
+        static UntypedValue* behind(PlayerbotAI* ai) { return new IsBehindValue(ai); }
+        static UntypedValue* facing(PlayerbotAI* ai) { return new IsFacingValue(ai); }
+        static UntypedValue* moving(PlayerbotAI* ai) { return new IsMovingValue(ai); }
+        static UntypedValue* swimming(PlayerbotAI* ai) { return new IsSwimmingValue(ai); }
+        static UntypedValue* distance(PlayerbotAI* ai) { return new DistanceValue(ai); }
+        static UntypedValue* last_movement(PlayerbotAI* ai) { return new LastMovementValue(ai); }
+
+        static UntypedValue* can_loot(PlayerbotAI* ai) { return new CanLootValue(ai); }
+        static UntypedValue* available_loot(PlayerbotAI* ai) { return new AvailableLootValue(ai); }
+        static UntypedValue* loot_target(PlayerbotAI* ai) { return new LootTargetValue(ai); }
+        static UntypedValue* has_available_loot(PlayerbotAI* ai) { return new HasAvailableLootValue(ai); }
+        static UntypedValue* always_loot_list(PlayerbotAI* ai) { return new AlwaysLootListValue(ai); }
+        static UntypedValue* loot_strategy(PlayerbotAI* ai) { return new LootStrategyValue(ai); }
+
+        static UntypedValue* attacker_count(PlayerbotAI* ai) { return new AttackerCountValue(ai); }
+        static UntypedValue* my_attacker_count(PlayerbotAI* ai) { return new MyAttackerCountValue(ai); }
+        static UntypedValue* has_aggro(PlayerbotAI* ai) { return new HasAggroValue(ai); }
+        static UntypedValue* mounted(PlayerbotAI* ai) { return new IsMountedValue(ai); }
+        static UntypedValue* health(PlayerbotAI* ai) { return new HealthValue(ai); }
+        static UntypedValue* rage(PlayerbotAI* ai) { return new RageValue(ai); }
+        static UntypedValue* energy(PlayerbotAI* ai) { return new EnergyValue(ai); }
+        static UntypedValue* mana(PlayerbotAI* ai) { return new ManaValue(ai); }
+        static UntypedValue* combo(PlayerbotAI* ai) { return new ComboPointsValue(ai); }
+        static UntypedValue* dead(PlayerbotAI* ai) { return new IsDeadValue(ai); }
+        static UntypedValue* has_mana(PlayerbotAI* ai) { return new HasManaValue(ai); }
+        static UntypedValue* nearest_game_objects(PlayerbotAI* ai) { return new NearestGameObjects(ai); }
+        static UntypedValue* log_level(PlayerbotAI* ai) { return new LogLevelValue(ai); }
+        static UntypedValue* nearest_npcs(PlayerbotAI* ai) { return new NearestNpcsValue(ai); }
+        static UntypedValue* nearest_corpses(PlayerbotAI* ai) { return new NearestCorpsesValue(ai); }
+        static UntypedValue* possible_targets(PlayerbotAI* ai) { return new PossibleTargetsValue(ai); }
+        static UntypedValue* nearest_adds(PlayerbotAI* ai) { return new NearestAdsValue(ai); }
+        static UntypedValue* party_member_without_aura(PlayerbotAI* ai) { return new PartyMemberWithoutAuraValue(ai); }
+        static UntypedValue* attacker_without_aura(PlayerbotAI* ai) { return new AttackerWithoutAuraTargetValue(ai); }
+        static UntypedValue* party_member_to_heal(PlayerbotAI* ai) { return new PartyMemberToHeal(ai); }
+        static UntypedValue* party_member_to_resurrect(PlayerbotAI* ai) { return new PartyMemberToResurrect(ai); }
+        static UntypedValue* party_member_to_dispel(PlayerbotAI* ai) { return new PartyMemberToDispel(ai); }
+        static UntypedValue* current_target(PlayerbotAI* ai) { return new CurrentTargetValue(ai); }
+        static UntypedValue* old_target(PlayerbotAI* ai) { return new CurrentTargetValue(ai); }
+        static UntypedValue* self_target(PlayerbotAI* ai) { return new SelfTargetValue(ai); }
+        static UntypedValue* master(PlayerbotAI* ai) { return new MasterTargetValue(ai); }
+        static UntypedValue* line_target(PlayerbotAI* ai) { return new LineTargetValue(ai); }
+        static UntypedValue* tank_target(PlayerbotAI* ai) { return new TankTargetValue(ai); }
+        static UntypedValue* dps_target(PlayerbotAI* ai) { return new DpsTargetValue(ai); }
+        static UntypedValue* least_hp_target(PlayerbotAI* ai) { return new LeastHpTargetValue(ai); }
+        static UntypedValue* enemy_player_target(PlayerbotAI* ai) { return new EnemyPlayerValue(ai); }
+        static UntypedValue* cc_target(PlayerbotAI* ai) { return new CcTargetValue(ai); }
+        static UntypedValue* current_cc_target(PlayerbotAI* ai) { return new CurrentCcTargetValue(ai); }
+        static UntypedValue* pet_target(PlayerbotAI* ai) { return new PetTargetValue(ai); }
+        static UntypedValue* grind_target(PlayerbotAI* ai) { return new GrindTargetValue(ai); }
+        static UntypedValue* rti_target(PlayerbotAI* ai) { return new RtiTargetValue(ai); }
+        static UntypedValue* duel_target(PlayerbotAI* ai) { return new DuelTargetValue(ai); }
+        static UntypedValue* has_totem(PlayerbotAI* ai) { return new HasTotemValue(ai); }
+        static UntypedValue* threat(PlayerbotAI* ai) { return new ThreatValue(ai); }
+        static UntypedValue* combat(PlayerbotAI* ai) { return new IsInCombatValue(ai); }
+        static UntypedValue* lfg_proposal(PlayerbotAI* ai) { return new LfgProposalValue(ai); }
+        static UntypedValue* bag_space(PlayerbotAI* ai) { return new BagSpaceValue(ai); }
+        static UntypedValue* enemy_healer_target(PlayerbotAI* ai) { return new EnemyHealerTargetValue(ai); }
+        static UntypedValue* speed(PlayerbotAI* ai) { return new SpeedValue(ai); }
+        static UntypedValue* last_said(PlayerbotAI* ai) { return new LastSaidValue(ai); }
+    };
+};
diff --git a/src/plugins/playerbot/strategy/values/formations/Arrow.cpp b/src/plugins/playerbot/strategy/values/formations/Arrow.cpp
new file mode 100644
index 0000000..7b3a07f
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/formations/Arrow.cpp
@@ -0,0 +1,162 @@
+#include "../../../../pchdef.h"
+#include "../../../playerbot.h"
+#include "../Formations.h"
+#include "Arrow.h"
+
+using namespace ai;
+
+WorldLocation ArrowFormation::GetLocation()
+{
+    Build();
+
+    int tankLines = 1 + tanks.Size() / 6;
+    int meleeLines = 1 + melee.Size() / 6;
+    int rangedLines = 1 + ranged.Size() / 6;
+    int healerLines = 1 + healers.Size() / 6;
+    float offset = 0;
+
+    Player* master = ai->GetMaster();
+    float orientation = master->GetOrientation();
+    MultiLineUnitPlacer placer(orientation);
+
+    tanks.PlaceUnits(&placer);
+
+    offset = tankLines * sPlayerbotAIConfig.followDistance;
+    melee.PlaceUnits(&placer);
+    melee.Move(-cos(orientation) * offset, -sin(orientation) * offset);
+
+    offset += meleeLines * sPlayerbotAIConfig.followDistance + sPlayerbotAIConfig.tooCloseDistance;
+    ranged.PlaceUnits(&placer);
+    ranged.Move(-cos(orientation) * offset, -sin(orientation) * offset);
+
+    offset += rangedLines * sPlayerbotAIConfig.followDistance;
+    healers.PlaceUnits(&placer);
+    healers.Move(-cos(orientation) * offset, -sin(orientation) * offset);
+
+    float x = master->GetPositionX() - masterUnit->GetX() + botUnit->GetX();
+    float y = master->GetPositionY() - masterUnit->GetY() + botUnit->GetY();
+    float z = master->GetPositionZ();
+
+    float ground = master->GetMap()->GetHeight(x, y, z + 0.5f);
+    if (ground <= INVALID_HEIGHT)
+        return Formation::NullLocation;
+
+    return WorldLocation(master->GetMapId(), x, y, 0.05f + ground);
+
+
+}
+
+void ArrowFormation::Build()
+{
+    if (built)
+        return;
+
+    FillSlotsExceptMaster();
+    AddMasterToSlot();
+
+    built = true;
+}
+
+FormationSlot* ArrowFormation::FindSlot(Player* member)
+{
+    if (ai->IsTank(member))
+        return &tanks;
+    else if (ai->IsHeal(member))
+        return &healers;
+    else if (ai->IsRanged(member))
+        return &ranged;
+    else
+        return &melee;
+}
+
+void ArrowFormation::FillSlotsExceptMaster()
+{
+    Group* group = bot->GetGroup();
+    GroupReference *gref = group->GetFirstMember();
+    uint32 index = 0;
+    while (gref)
+    {
+        Player* member = gref->GetSource();
+
+        if (member == bot)
+            FindSlot(member)->AddLast(botUnit = new FormationUnit(index, false));
+        else if (member != ai->GetMaster())
+            FindSlot(member)->AddLast(new FormationUnit(index, false));
+
+        gref = gref->next();
+        index++;
+    }
+}
+
+void ArrowFormation::AddMasterToSlot()
+{
+    Group* group = bot->GetGroup();
+    GroupReference *gref = group->GetFirstMember();
+    uint32 index = 0;
+    while (gref)
+    {
+        Player* member = gref->GetSource();
+
+        if (member == ai->GetMaster())
+        {
+            FindSlot(member)->InsertAtCenter(masterUnit = new FormationUnit(index, true));
+            break;
+        }
+
+        gref = gref->next();
+        index++;
+    }
+}
+
+void FormationSlot::PlaceUnits(UnitPlacer* placer)
+{
+    uint32 index = 0;
+    uint32 count = units.size();
+    for (vector<FormationUnit*>::iterator i = units.begin(); i != units.end(); ++i)
+    {
+        FormationUnit* unit = *i;
+        unit->SetLocation(placer->Place(unit, index, count));
+        index++;
+    }
+}
+
+UnitPosition MultiLineUnitPlacer::Place(FormationUnit *unit, uint32 index, uint32 count)
+{
+    SingleLineUnitPlacer placer(orientation);
+    if (count <= 6)
+        return placer.Place(unit, index, count);
+
+    int lineNo = index / 6;
+    int indexInLine = index % 6;
+    int lineSize = max(count - lineNo * 6, uint32(6));
+    float x = cos(orientation) * sPlayerbotAIConfig.followDistance * lineNo;
+    float y = sin(orientation) * sPlayerbotAIConfig.followDistance * lineNo;
+    return placer.Place(unit, indexInLine, lineSize);
+}
+
+UnitPosition SingleLineUnitPlacer::Place(FormationUnit *unit, uint32 index, uint32 count)
+{
+    float angle = orientation - M_PI / 2.0f;
+    float x = cos(angle) * sPlayerbotAIConfig.followDistance * ((float)index - (float)count / 2);
+    float y = sin(angle) * sPlayerbotAIConfig.followDistance * ((float)index - (float)count / 2);
+    return UnitPosition(x, y);
+}
+
+void FormationSlot::Move(float dx, float dy)
+{
+    for (vector<FormationUnit*>::iterator i = units.begin(); i != units.end(); ++i)
+    {
+        FormationUnit* unit = *i;
+        unit->SetLocation(unit->GetX() + dx, unit->GetY() + dy);
+    }
+}
+
+FormationSlot::~FormationSlot()
+{
+    for (vector<FormationUnit*>::iterator i = units.begin(); i != units.end(); ++i)
+    {
+        FormationUnit* unit = *i;
+        delete unit;
+    }
+    units.clear();
+}
diff --git a/src/plugins/playerbot/strategy/values/formations/Arrow.h b/src/plugins/playerbot/strategy/values/formations/Arrow.h
new file mode 100644
index 0000000..e302c87
--- /dev/null
+++ b/src/plugins/playerbot/strategy/values/formations/Arrow.h
@@ -0,0 +1,109 @@
+#pragma once
+
+namespace ai
+{
+    class UnitPosition
+    {
+    public:
+        UnitPosition(float x, float y) : x(x), y(y) {}
+        UnitPosition(const UnitPosition& other) { x = other.x; y = other.y; }
+        float x, y;
+    };
+
+    class FormationUnit
+    {
+    public:
+        FormationUnit(uint32 groupIndex, bool master) : groupIndex(groupIndex), master(master), position(0, 0) {}
+        FormationUnit(const FormationUnit& other) : position(other.position.x, other.position.y)
+        {
+            groupIndex = other.groupIndex;
+            master = other.master;
+        }
+
+    public:
+        uint32 GetGroupIdex() { return groupIndex; }
+        void SetLocation(UnitPosition pos) { position = pos; }
+        void SetLocation(float x, float y) { position.x = x; position.y = y; }
+        float GetX() { return position.x; }
+        float GetY() { return position.y; }
+
+    private:
+        uint32 groupIndex;
+        bool master;
+        UnitPosition position;
+    };
+
+    class UnitPlacer
+    {
+    public:
+        UnitPlacer() {}
+
+    public:
+        virtual UnitPosition Place(FormationUnit *unit, uint32 index, uint32 count) = 0;
+    };
+
+    class FormationSlot
+    {
+    public:
+        FormationSlot() {}
+        virtual ~FormationSlot();
+
+    public:
+        void AddLast(FormationUnit* unit) { units.push_back(unit); }
+        void InsertAtCenter(FormationUnit* unit) { units.insert(units.begin() + (units.size() + 1) / 2, unit); }
+        void PlaceUnits(UnitPlacer* placer);
+        void Move(float dx, float dy);
+        int Size() { return units.size(); }
+
+    private:
+        WorldLocation center;
+        vector<FormationUnit*> units;
+    };
+
+
+    class MultiLineUnitPlacer : public UnitPlacer
+    {
+    public:
+        MultiLineUnitPlacer(float orientation) : UnitPlacer(), orientation(orientation) {}
+
+    public:
+        virtual UnitPosition Place(FormationUnit *unit, uint32 index, uint32 count);
+
+    private:
+        float orientation;
+    };
+
+    class SingleLineUnitPlacer
+    {
+    public:
+        SingleLineUnitPlacer(float orientation) : orientation(orientation) {}
+
+    public:
+        virtual UnitPosition Place(FormationUnit *unit, uint32 index, uint32 count);
+
+    private:
+        float orientation;
+    };
+
+    class ArrowFormation : public MoveFormation
+    {
+    public:
+        ArrowFormation(PlayerbotAI* ai) : MoveFormation(ai, "arrow"), built(false), masterUnit(NULL), botUnit(NULL) {}
+
+    public:
+        virtual WorldLocation GetLocation();
+
+    private:
+        void Build();
+        void FillSlotsExceptMaster();
+        void AddMasterToSlot();
+        FormationSlot* FindSlot(Player* member);
+
+    private:
+        FormationSlot tanks, melee, ranged, healers;
+        FormationUnit *masterUnit, *botUnit;
+        bool built;
+    };
+
+}
+
diff --git a/src/plugins/playerbot/strategy/warlock/DpsWarlockStrategy.cpp b/src/plugins/playerbot/strategy/warlock/DpsWarlockStrategy.cpp
new file mode 100644
index 0000000..039fd53
--- /dev/null
+++ b/src/plugins/playerbot/strategy/warlock/DpsWarlockStrategy.cpp
@@ -0,0 +1,76 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "WarlockTriggers.h"
+#include "WarlockMultipliers.h"
+#include "DpsWarlockStrategy.h"
+#include "WarlockActions.h"
+
+using namespace ai;
+
+class DpsWarlockStrategyActionNodeFactory : public NamedObjectFactory<ActionNode>
+{
+public:
+    DpsWarlockStrategyActionNodeFactory()
+    {
+        creators["shadow bolt"] = &shadow_bolt;
+    }
+private:
+    static ActionNode* shadow_bolt(PlayerbotAI* ai)
+    {
+        return new ActionNode ("shadow bolt",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("shoot"), NULL),
+            /*C*/ NULL);
+    }
+};
+
+DpsWarlockStrategy::DpsWarlockStrategy(PlayerbotAI* ai) : GenericWarlockStrategy(ai)
+{
+    actionNodeFactories.Add(new DpsWarlockStrategyActionNodeFactory());
+}
+
+
+NextAction** DpsWarlockStrategy::getDefaultActions()
+{
+    return NextAction::array(0, new NextAction("incinirate", 10.0f), new NextAction("shadow bolt", 10.0f), NULL);
+}
+
+void DpsWarlockStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    GenericWarlockStrategy::InitTriggers(triggers);
+
+	triggers.push_back(new TriggerNode(
+		"shadow trance",
+		NextAction::array(0, new NextAction("shadow bolt", 20.0f), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"backlash",
+		NextAction::array(0, new NextAction("shadow bolt", 20.0f), NULL)));
+}
+
+void DpsAoeWarlockStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "high aoe",
+        NextAction::array(0, new NextAction("rain of fire", 30.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "medium aoe",
+        NextAction::array(0, new NextAction("seed of corruption", 31.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "light aoe",
+        NextAction::array(0, new NextAction("shadowfury", 29.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "corruption on attacker",
+        NextAction::array(0, new NextAction("corruption on attacker", 28.0f), NULL)));
+
+}
+
+void DpsWarlockDebuffStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "corruption",
+        NextAction::array(0, new NextAction("corruption", 12.0f), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/warlock/DpsWarlockStrategy.h b/src/plugins/playerbot/strategy/warlock/DpsWarlockStrategy.h
new file mode 100644
index 0000000..846f9df
--- /dev/null
+++ b/src/plugins/playerbot/strategy/warlock/DpsWarlockStrategy.h
@@ -0,0 +1,39 @@
+#pragma once
+
+#include "GenericWarlockStrategy.h"
+#include "../generic/CombatStrategy.h"
+
+namespace ai
+{
+    class DpsWarlockStrategy : public GenericWarlockStrategy
+    {
+    public:
+        DpsWarlockStrategy(PlayerbotAI* ai);
+        virtual string getName() { return "dps"; }
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual NextAction** getDefaultActions();
+    };
+
+    class DpsAoeWarlockStrategy : public CombatStrategy
+    {
+    public:
+        DpsAoeWarlockStrategy(PlayerbotAI* ai) : CombatStrategy(ai) {}
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "aoe"; }
+    };
+
+    class DpsWarlockDebuffStrategy : public CombatStrategy
+    {
+    public:
+        DpsWarlockDebuffStrategy(PlayerbotAI* ai) : CombatStrategy(ai) {}
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "dps debuff"; }
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/warlock/GenericWarlockNonCombatStrategy.cpp b/src/plugins/playerbot/strategy/warlock/GenericWarlockNonCombatStrategy.cpp
new file mode 100644
index 0000000..3dc73c6
--- /dev/null
+++ b/src/plugins/playerbot/strategy/warlock/GenericWarlockNonCombatStrategy.cpp
@@ -0,0 +1,65 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "WarlockMultipliers.h"
+#include "GenericWarlockNonCombatStrategy.h"
+
+using namespace ai;
+
+class GenericWarlockNonCombatStrategyActionNodeFactory : public NamedObjectFactory<ActionNode>
+{
+public:
+    GenericWarlockNonCombatStrategyActionNodeFactory()
+    {
+        creators["fel armor"] = &fel_armor;
+        creators["demon armor"] = &demon_armor;
+    }
+private:
+    static ActionNode* fel_armor(PlayerbotAI* ai)
+    {
+        return new ActionNode ("fel armor",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("demon armor"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* demon_armor(PlayerbotAI* ai)
+    {
+        return new ActionNode ("demon armor",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("demon skin"), NULL),
+            /*C*/ NULL);
+    }
+};
+
+GenericWarlockNonCombatStrategy::GenericWarlockNonCombatStrategy(PlayerbotAI* ai) : NonCombatStrategy(ai)
+{
+    actionNodeFactories.Add(new GenericWarlockNonCombatStrategyActionNodeFactory());
+}
+
+void GenericWarlockNonCombatStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    NonCombatStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "demon armor",
+        NextAction::array(0, new NextAction("fel armor", 21.0f), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"no healthstone",
+		NextAction::array(0, new NextAction("create healthstone", 15.0f), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"no firestone",
+		NextAction::array(0, new NextAction("create firestone", 14.0f), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"no spellstone",
+		NextAction::array(0, new NextAction("create spellstone", 13.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "spellstone",
+        NextAction::array(0, new NextAction("spellstone", 13.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "no pet",
+        NextAction::array(0, new NextAction("summon imp", 10.0f), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/warlock/GenericWarlockNonCombatStrategy.h b/src/plugins/playerbot/strategy/warlock/GenericWarlockNonCombatStrategy.h
new file mode 100644
index 0000000..c5e483f
--- /dev/null
+++ b/src/plugins/playerbot/strategy/warlock/GenericWarlockNonCombatStrategy.h
@@ -0,0 +1,16 @@
+#pragma once
+
+#include "../generic/NonCombatStrategy.h"
+
+namespace ai
+{
+    class GenericWarlockNonCombatStrategy : public NonCombatStrategy
+    {
+    public:
+        GenericWarlockNonCombatStrategy(PlayerbotAI* ai);
+        virtual string getName() { return "nc"; }
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+    };
+}
diff --git a/src/plugins/playerbot/strategy/warlock/GenericWarlockStrategy.cpp b/src/plugins/playerbot/strategy/warlock/GenericWarlockStrategy.cpp
new file mode 100644
index 0000000..e880061
--- /dev/null
+++ b/src/plugins/playerbot/strategy/warlock/GenericWarlockStrategy.cpp
@@ -0,0 +1,74 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "WarlockMultipliers.h"
+#include "GenericWarlockStrategy.h"
+
+using namespace ai;
+
+class GenericWarlockStrategyActionNodeFactory : public NamedObjectFactory<ActionNode>
+{
+public:
+    GenericWarlockStrategyActionNodeFactory()
+    {
+        creators["summon voidwalker"] = &summon_voidwalker;
+        creators["banish"] = &banish;
+    }
+private:
+    static ActionNode* summon_voidwalker(PlayerbotAI* ai)
+    {
+        return new ActionNode ("summon voidwalker",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("drain soul"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* banish(PlayerbotAI* ai)
+    {
+        return new ActionNode ("banish",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("fear"), NULL),
+            /*C*/ NULL);
+    }
+};
+
+GenericWarlockStrategy::GenericWarlockStrategy(PlayerbotAI* ai) : RangedCombatStrategy(ai)
+{
+    actionNodeFactories.Add(new GenericWarlockStrategyActionNodeFactory());
+}
+
+NextAction** GenericWarlockStrategy::getDefaultActions()
+{
+    return NextAction::array(0, new NextAction("shoot", 10.0f), NULL);
+}
+
+void GenericWarlockStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    RangedCombatStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "curse of agony",
+        NextAction::array(0, new NextAction("curse of agony", 11.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "medium health",
+        NextAction::array(0, new NextAction("drain life", 40.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "low mana",
+        NextAction::array(0, new NextAction("life tap", ACTION_EMERGENCY + 5), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"target critical health",
+		NextAction::array(0, new NextAction("drain soul", 30.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "banish",
+        NextAction::array(0, new NextAction("banish", 21.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "fear",
+        NextAction::array(0, new NextAction("fear on cc", 20.0f), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "immolate",
+        NextAction::array(0, new NextAction("immolate", 19.0f), new NextAction("conflagrate", 19.0f), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/warlock/GenericWarlockStrategy.h b/src/plugins/playerbot/strategy/warlock/GenericWarlockStrategy.h
new file mode 100644
index 0000000..473da59
--- /dev/null
+++ b/src/plugins/playerbot/strategy/warlock/GenericWarlockStrategy.h
@@ -0,0 +1,18 @@
+#pragma once
+
+#include "../Strategy.h"
+#include "../generic/RangedCombatStrategy.h"
+
+namespace ai
+{
+    class GenericWarlockStrategy : public RangedCombatStrategy
+    {
+    public:
+        GenericWarlockStrategy(PlayerbotAI* ai);
+        virtual string getName() { return "warlock"; }
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual NextAction** getDefaultActions();
+    };
+}
diff --git a/src/plugins/playerbot/strategy/warlock/TankWarlockStrategy.cpp b/src/plugins/playerbot/strategy/warlock/TankWarlockStrategy.cpp
new file mode 100644
index 0000000..cb4f5a5
--- /dev/null
+++ b/src/plugins/playerbot/strategy/warlock/TankWarlockStrategy.cpp
@@ -0,0 +1,51 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "WarlockMultipliers.h"
+#include "TankWarlockStrategy.h"
+
+using namespace ai;
+
+class GenericWarlockStrategyActionNodeFactory : public NamedObjectFactory<ActionNode>
+{
+public:
+    GenericWarlockStrategyActionNodeFactory()
+    {
+        creators["summon voidwalker"] = &summon_voidwalker;
+        creators["summon felguard"] = &summon_felguard;
+    }
+private:
+    static ActionNode* summon_voidwalker(PlayerbotAI* ai)
+    {
+        return new ActionNode ("summon voidwalker",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("drain soul"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* summon_felguard(PlayerbotAI* ai)
+    {
+        return new ActionNode ("summon felguard",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("summon voidwalker"), NULL),
+            /*C*/ NULL);
+    }
+};
+
+TankWarlockStrategy::TankWarlockStrategy(PlayerbotAI* ai) : GenericWarlockStrategy(ai)
+{
+    actionNodeFactories.Add(new GenericWarlockStrategyActionNodeFactory());
+}
+
+NextAction** TankWarlockStrategy::getDefaultActions()
+{
+    return NextAction::array(0, new NextAction("shoot", 10.0f), NULL);
+}
+
+void TankWarlockStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    GenericWarlockStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "no pet",
+        NextAction::array(0, new NextAction("summon felguard", 50.0f), NULL)));
+
+}
diff --git a/src/plugins/playerbot/strategy/warlock/TankWarlockStrategy.h b/src/plugins/playerbot/strategy/warlock/TankWarlockStrategy.h
new file mode 100644
index 0000000..9cdd6e6
--- /dev/null
+++ b/src/plugins/playerbot/strategy/warlock/TankWarlockStrategy.h
@@ -0,0 +1,17 @@
+#pragma once
+
+#include "GenericWarlockStrategy.h"
+
+namespace ai
+{
+    class TankWarlockStrategy : public GenericWarlockStrategy
+    {
+    public:
+        TankWarlockStrategy(PlayerbotAI* ai);
+        virtual string getName() { return "tank"; }
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual NextAction** getDefaultActions();
+    };
+}
diff --git a/src/plugins/playerbot/strategy/warlock/WarlockActions.cpp b/src/plugins/playerbot/strategy/warlock/WarlockActions.cpp
new file mode 100644
index 0000000..0a01ebb
--- /dev/null
+++ b/src/plugins/playerbot/strategy/warlock/WarlockActions.cpp
@@ -0,0 +1,5 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "WarlockActions.h"
+
+using namespace ai;
diff --git a/src/plugins/playerbot/strategy/warlock/WarlockActions.h b/src/plugins/playerbot/strategy/warlock/WarlockActions.h
new file mode 100644
index 0000000..fb1689a
--- /dev/null
+++ b/src/plugins/playerbot/strategy/warlock/WarlockActions.h
@@ -0,0 +1,176 @@
+#pragma once
+
+#include "../actions/GenericActions.h"
+
+namespace ai
+{
+	class CastDemonSkinAction : public CastBuffSpellAction {
+	public:
+		CastDemonSkinAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "demon skin") {}
+	};
+
+	class CastDemonArmorAction : public CastBuffSpellAction
+	{
+	public:
+		CastDemonArmorAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "demon armor") {}
+	};
+
+	class CastFelArmorAction : public CastBuffSpellAction
+	{
+	public:
+		CastFelArmorAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "fel armor") {}
+	};
+
+    BEGIN_RANGED_SPELL_ACTION(CastShadowBoltAction, "shadow bolt")
+    END_SPELL_ACTION()
+
+	class CastDrainSoulAction : public CastSpellAction
+	{
+	public:
+		CastDrainSoulAction(PlayerbotAI* ai) : CastSpellAction(ai, "drain soul") {}
+		virtual bool isUseful()
+		{
+			return AI_VALUE2(uint8, "item count", "soul shard") < 2;
+		}
+	};
+
+	class CastDrainManaAction : public CastSpellAction
+	{
+	public:
+		CastDrainManaAction(PlayerbotAI* ai) : CastSpellAction(ai, "drain mana") {}
+	};
+
+	class CastDrainLifeAction : public CastSpellAction
+	{
+	public:
+		CastDrainLifeAction(PlayerbotAI* ai) : CastSpellAction(ai, "drain life") {}
+	};
+
+	class CastCurseOfAgonyAction : public CastDebuffSpellAction
+	{
+	public:
+		CastCurseOfAgonyAction(PlayerbotAI* ai) : CastDebuffSpellAction(ai, "curse of agony") {}
+	};
+
+	class CastCurseOfWeaknessAction : public CastDebuffSpellAction
+	{
+	public:
+		CastCurseOfWeaknessAction(PlayerbotAI* ai) : CastDebuffSpellAction(ai, "curse of weakness") {}
+	};
+
+	class CastCorruptionAction : public CastDebuffSpellAction
+	{
+	public:
+		CastCorruptionAction(PlayerbotAI* ai) : CastDebuffSpellAction(ai, "corruption") {}
+	};
+
+	class CastCorruptionOnAttackerAction : public CastDebuffSpellOnAttackerAction
+	{
+	public:
+	    CastCorruptionOnAttackerAction(PlayerbotAI* ai) : CastDebuffSpellOnAttackerAction(ai, "corruption") {}
+	};
+
+
+	class CastSummonVoidwalkerAction : public CastBuffSpellAction
+	{
+	public:
+		CastSummonVoidwalkerAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "summon voidwalker") {}
+	};
+
+	class CastSummonFelguardAction : public CastBuffSpellAction
+	{
+	public:
+		CastSummonFelguardAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "summon felguard") {}
+	};
+
+	class CastSummonImpAction : public CastBuffSpellAction
+	{
+	public:
+		CastSummonImpAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "summon imp") {}
+	};
+
+	class CastCreateHealthstoneAction : public CastBuffSpellAction
+	{
+	public:
+		CastCreateHealthstoneAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "create healthstone") {}
+	};
+
+	class CastCreateFirestoneAction : public CastBuffSpellAction
+	{
+	public:
+		CastCreateFirestoneAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "create firestone") {}
+	};
+
+	class CastCreateSpellstoneAction : public CastBuffSpellAction
+	{
+	public:
+		CastCreateSpellstoneAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "create spellstone") {}
+	};
+
+    class CastBanishAction : public CastBuffSpellAction
+    {
+    public:
+        CastBanishAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "banish on cc") {}
+        virtual Value<Unit*>* GetTargetValue() { return context->GetValue<Unit*>("cc target", "banish"); }
+        virtual bool Execute(Event event) { return ai->CastSpell("banish", GetTarget()); }
+    };
+
+    class CastSeedOfCorruptionAction : public CastDebuffSpellAction
+    {
+    public:
+        CastSeedOfCorruptionAction(PlayerbotAI* ai) : CastDebuffSpellAction(ai, "seed of corruption") {}
+    };
+
+    class CastRainOfFireAction : public CastSpellAction
+    {
+    public:
+        CastRainOfFireAction(PlayerbotAI* ai) : CastSpellAction(ai, "rain of fire") {}
+    };
+
+    class CastShadowfuryAction : public CastSpellAction
+    {
+    public:
+        CastShadowfuryAction(PlayerbotAI* ai) : CastSpellAction(ai, "shadowfury") {}
+    };
+
+    class CastImmolateAction : public CastDebuffSpellAction
+    {
+    public:
+        CastImmolateAction(PlayerbotAI* ai) : CastDebuffSpellAction(ai, "immolate") {}
+    };
+
+    class CastConflagrateAction : public CastSpellAction
+    {
+    public:
+        CastConflagrateAction(PlayerbotAI* ai) : CastSpellAction(ai, "conflagrate") {}
+    };
+
+    class CastIncinirateAction : public CastSpellAction
+    {
+    public:
+        CastIncinirateAction(PlayerbotAI* ai) : CastSpellAction(ai, "incinirate") {}
+    };
+
+    class CastFearAction : public CastDebuffSpellAction
+    {
+    public:
+        CastFearAction(PlayerbotAI* ai) : CastDebuffSpellAction(ai, "fear") {}
+    };
+
+    class CastFearOnCcAction : public CastBuffSpellAction
+    {
+    public:
+        CastFearOnCcAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "fear on cc") {}
+        virtual Value<Unit*>* GetTargetValue() { return context->GetValue<Unit*>("cc target", "fear"); }
+        virtual bool Execute(Event event) { return ai->CastSpell("fear", GetTarget()); }
+    };
+
+    class CastLifeTapAction: public CastSpellAction
+    {
+    public:
+        CastLifeTapAction(PlayerbotAI* ai) : CastSpellAction(ai, "life tap") {}
+        virtual string GetTargetName() { return "self target"; }
+        virtual bool isUseful() { return AI_VALUE2(uint8, "health", "self target") > sPlayerbotAIConfig.lowHealth; }
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/warlock/WarlockAiObjectContext.cpp b/src/plugins/playerbot/strategy/warlock/WarlockAiObjectContext.cpp
new file mode 100644
index 0000000..8c25fd4
--- /dev/null
+++ b/src/plugins/playerbot/strategy/warlock/WarlockAiObjectContext.cpp
@@ -0,0 +1,183 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "WarlockActions.h"
+#include "WarlockAiObjectContext.h"
+#include "DpsWarlockStrategy.h"
+#include "GenericWarlockNonCombatStrategy.h"
+#include "TankWarlockStrategy.h"
+#include "../generic/PullStrategy.h"
+#include "WarlockTriggers.h"
+#include "../NamedObjectContext.h"
+#include "../actions/UseItemAction.h"
+
+using namespace ai;
+
+namespace ai
+{
+    namespace warlock
+    {
+        using namespace ai;
+
+        class StrategyFactoryInternal : public NamedObjectContext<Strategy>
+        {
+        public:
+            StrategyFactoryInternal()
+            {
+                creators["nc"] = &warlock::StrategyFactoryInternal::nc;
+                creators["pull"] = &warlock::StrategyFactoryInternal::pull;
+                creators["aoe"] = &warlock::StrategyFactoryInternal::aoe;
+                creators["dps debuff"] = &warlock::StrategyFactoryInternal::dps_debuff;
+            }
+
+        private:
+            static Strategy* nc(PlayerbotAI* ai) { return new GenericWarlockNonCombatStrategy(ai); }
+            static Strategy* aoe(PlayerbotAI* ai) { return new DpsAoeWarlockStrategy(ai); }
+            static Strategy* dps_debuff(PlayerbotAI* ai) { return new DpsWarlockDebuffStrategy(ai); }
+            static Strategy* pull(PlayerbotAI* ai) { return new PullStrategy(ai, "shoot"); }
+        };
+
+        class CombatStrategyFactoryInternal : public NamedObjectContext<Strategy>
+        {
+        public:
+            CombatStrategyFactoryInternal() : NamedObjectContext<Strategy>(false, true)
+            {
+                creators["dps"] = &warlock::CombatStrategyFactoryInternal::dps;
+                creators["tank"] = &warlock::CombatStrategyFactoryInternal::tank;
+            }
+
+        private:
+            static Strategy* tank(PlayerbotAI* ai) { return new TankWarlockStrategy(ai); }
+            static Strategy* dps(PlayerbotAI* ai) { return new DpsWarlockStrategy(ai); }
+        };
+    };
+};
+
+namespace ai
+{
+    namespace warlock
+    {
+        using namespace ai;
+
+        class TriggerFactoryInternal : public NamedObjectContext<Trigger>
+        {
+        public:
+            TriggerFactoryInternal()
+            {
+                creators["shadow trance"] = &TriggerFactoryInternal::shadow_trance;
+                creators["demon armor"] = &TriggerFactoryInternal::demon_armor;
+                creators["no healthstone"] = &TriggerFactoryInternal::HasHealthstone;
+                creators["no firestone"] = &TriggerFactoryInternal::HasFirestone;
+                creators["no spellstone"] = &TriggerFactoryInternal::HasSpellstone;
+                creators["corruption"] = &TriggerFactoryInternal::corruption;
+                creators["corruption on attacker"] = &TriggerFactoryInternal::corruption_on_attacker;
+                creators["curse of agony"] = &TriggerFactoryInternal::curse_of_agony;
+                creators["banish"] = &TriggerFactoryInternal::banish;
+                creators["spellstone"] = &TriggerFactoryInternal::spellstone;
+                creators["backlash"] = &TriggerFactoryInternal::backlash;
+                creators["fear"] = &TriggerFactoryInternal::fear;
+                creators["immolate"] = &TriggerFactoryInternal::immolate;
+
+
+            }
+
+        private:
+            static Trigger* shadow_trance(PlayerbotAI* ai) { return new ShadowTranceTrigger(ai); }
+            static Trigger* demon_armor(PlayerbotAI* ai) { return new DemonArmorTrigger(ai); }
+            static Trigger* HasHealthstone(PlayerbotAI* ai) { return new HasHealthstoneTrigger(ai); }
+            static Trigger* HasFirestone(PlayerbotAI* ai) { return new HasFirestoneTrigger(ai); }
+            static Trigger* HasSpellstone(PlayerbotAI* ai) { return new HasSpellstoneTrigger(ai); }
+            static Trigger* corruption(PlayerbotAI* ai) { return new CorruptionTrigger(ai); }
+            static Trigger* corruption_on_attacker(PlayerbotAI* ai) { return new CorruptionOnAttackerTrigger(ai); }
+            static Trigger* curse_of_agony(PlayerbotAI* ai) { return new CurseOfAgonyTrigger(ai); }
+            static Trigger* banish(PlayerbotAI* ai) { return new BanishTrigger(ai); }
+            static Trigger* spellstone(PlayerbotAI* ai) { return new SpellstoneTrigger(ai); }
+            static Trigger* backlash(PlayerbotAI* ai) { return new BacklashTrigger(ai); }
+            static Trigger* fear(PlayerbotAI* ai) { return new FearTrigger(ai); }
+            static Trigger* immolate(PlayerbotAI* ai) { return new ImmolateTrigger(ai); }
+
+        };
+    };
+};
+
+namespace ai
+{
+    namespace warlock
+    {
+        using namespace ai;
+
+        class AiObjectContextInternal : public NamedObjectContext<Action>
+        {
+        public:
+            AiObjectContextInternal()
+            {
+                creators["summon imp"] = &AiObjectContextInternal::summon_imp;
+                creators["fel armor"] = &AiObjectContextInternal::fel_armor;
+                creators["demon armor"] = &AiObjectContextInternal::demon_armor;
+                creators["demon skin"] = &AiObjectContextInternal::demon_skin;
+                creators["create healthstone"] = &AiObjectContextInternal::create_healthstone;
+                creators["create firestone"] = &AiObjectContextInternal::create_firestone;
+                creators["create spellstone"] = &AiObjectContextInternal::create_spellstone;
+                creators["spellstone"] = &AiObjectContextInternal::spellstone;
+                creators["summon voidwalker"] = &AiObjectContextInternal::summon_voidwalker;
+                creators["summon felguard"] = &AiObjectContextInternal::summon_felguard;
+                creators["immolate"] = &AiObjectContextInternal::immolate;
+                creators["corruption"] = &AiObjectContextInternal::corruption;
+                creators["corruption on attacker"] = &AiObjectContextInternal::corruption_on_attacker;
+                creators["curse of agony"] = &AiObjectContextInternal::curse_of_agony;
+                creators["shadow bolt"] = &AiObjectContextInternal::shadow_bolt;
+                creators["drain soul"] = &AiObjectContextInternal::drain_soul;
+                creators["drain mana"] = &AiObjectContextInternal::drain_mana;
+                creators["drain life"] = &AiObjectContextInternal::drain_life;
+                creators["banish"] = &AiObjectContextInternal::banish;
+                creators["seed of corruption"] = &AiObjectContextInternal::seed_of_corruption;
+                creators["rain of fire"] = &AiObjectContextInternal::rain_of_fire;
+                creators["shadowfury"] = &AiObjectContextInternal::shadowfury;
+                creators["life tap"] = &AiObjectContextInternal::life_tap;
+                creators["fear"] = &AiObjectContextInternal::fear;
+                creators["fear on cc"] = &AiObjectContextInternal::fear_on_cc;
+                creators["incinirate"] = &AiObjectContextInternal::incinirate;
+                creators["conflagrate"] = &AiObjectContextInternal::conflagrate;
+            }
+
+        private:
+            static Action* conflagrate(PlayerbotAI* ai) { return new CastConflagrateAction(ai); }
+            static Action* incinirate(PlayerbotAI* ai) { return new CastIncinirateAction(ai); }
+            static Action* fear_on_cc(PlayerbotAI* ai) { return new CastFearOnCcAction(ai); }
+            static Action* fear(PlayerbotAI* ai) { return new CastFearAction(ai); }
+            static Action* immolate(PlayerbotAI* ai) { return new CastImmolateAction(ai); }
+            static Action* summon_imp(PlayerbotAI* ai) { return new CastSummonImpAction(ai); }
+            static Action* fel_armor(PlayerbotAI* ai) { return new CastFelArmorAction(ai); }
+            static Action* demon_armor(PlayerbotAI* ai) { return new CastDemonArmorAction(ai); }
+            static Action* demon_skin(PlayerbotAI* ai) { return new CastDemonSkinAction(ai); }
+            static Action* create_healthstone(PlayerbotAI* ai) { return new CastCreateHealthstoneAction(ai); }
+            static Action* create_firestone(PlayerbotAI* ai) { return new CastCreateFirestoneAction(ai); }
+            static Action* create_spellstone(PlayerbotAI* ai) { return new CastCreateSpellstoneAction(ai); }
+            static Action* spellstone(PlayerbotAI* ai) { return new UseSpellItemAction(ai, "spellstone", true); }
+            static Action* summon_voidwalker(PlayerbotAI* ai) { return new CastSummonVoidwalkerAction(ai); }
+            static Action* summon_felguard(PlayerbotAI* ai) { return new CastSummonFelguardAction(ai); }
+            static Action* corruption(PlayerbotAI* ai) { return new CastCorruptionAction(ai); }
+            static Action* corruption_on_attacker(PlayerbotAI* ai) { return new CastCorruptionOnAttackerAction(ai); }
+            static Action* curse_of_agony(PlayerbotAI* ai) { return new CastCurseOfAgonyAction(ai); }
+            static Action* shadow_bolt(PlayerbotAI* ai) { return new CastShadowBoltAction(ai); }
+            static Action* drain_soul(PlayerbotAI* ai) { return new CastDrainSoulAction(ai); }
+            static Action* drain_mana(PlayerbotAI* ai) { return new CastDrainManaAction(ai); }
+            static Action* drain_life(PlayerbotAI* ai) { return new CastDrainLifeAction(ai); }
+            static Action* banish(PlayerbotAI* ai) { return new CastBanishAction(ai); }
+            static Action* seed_of_corruption(PlayerbotAI* ai) { return new CastSeedOfCorruptionAction(ai); }
+            static Action* rain_of_fire(PlayerbotAI* ai) { return new CastRainOfFireAction(ai); }
+            static Action* shadowfury(PlayerbotAI* ai) { return new CastShadowfuryAction(ai); }
+            static Action* life_tap(PlayerbotAI* ai) { return new CastLifeTapAction(ai); }
+
+        };
+    };
+};
+
+
+
+WarlockAiObjectContext::WarlockAiObjectContext(PlayerbotAI* ai) : AiObjectContext(ai)
+{
+    strategyContexts.Add(new ai::warlock::StrategyFactoryInternal());
+    strategyContexts.Add(new ai::warlock::CombatStrategyFactoryInternal());
+    actionContexts.Add(new ai::warlock::AiObjectContextInternal());
+    triggerContexts.Add(new ai::warlock::TriggerFactoryInternal());
+}
diff --git a/src/plugins/playerbot/strategy/warlock/WarlockAiObjectContext.h b/src/plugins/playerbot/strategy/warlock/WarlockAiObjectContext.h
new file mode 100644
index 0000000..0d3fa27
--- /dev/null
+++ b/src/plugins/playerbot/strategy/warlock/WarlockAiObjectContext.h
@@ -0,0 +1,12 @@
+#pragma once
+
+#include "../AiObjectContext.h"
+
+namespace ai
+{
+    class WarlockAiObjectContext : public AiObjectContext
+    {
+    public:
+        WarlockAiObjectContext(PlayerbotAI* ai);
+    };
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/warlock/WarlockMultipliers.cpp b/src/plugins/playerbot/strategy/warlock/WarlockMultipliers.cpp
new file mode 100644
index 0000000..a75926a
--- /dev/null
+++ b/src/plugins/playerbot/strategy/warlock/WarlockMultipliers.cpp
@@ -0,0 +1,6 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "WarlockMultipliers.h"
+#include "WarlockActions.h"
+
+using namespace ai;
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/warlock/WarlockMultipliers.h b/src/plugins/playerbot/strategy/warlock/WarlockMultipliers.h
new file mode 100644
index 0000000..7cfbdd4
--- /dev/null
+++ b/src/plugins/playerbot/strategy/warlock/WarlockMultipliers.h
@@ -0,0 +1,6 @@
+#pragma once
+
+namespace ai
+{
+   
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/warlock/WarlockTriggers.cpp b/src/plugins/playerbot/strategy/warlock/WarlockTriggers.cpp
new file mode 100644
index 0000000..660e584
--- /dev/null
+++ b/src/plugins/playerbot/strategy/warlock/WarlockTriggers.cpp
@@ -0,0 +1,19 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "WarlockTriggers.h"
+#include "WarlockActions.h"
+
+using namespace ai;
+
+bool DemonArmorTrigger::IsActive() 
+{
+	Unit* target = GetTarget();
+	return !ai->HasAura("demon skin", target) &&
+		!ai->HasAura("demon armor", target) &&
+		!ai->HasAura("fel armor", target);
+}
+
+bool SpellstoneTrigger::IsActive() 
+{
+    return BuffTrigger::IsActive() && AI_VALUE2(uint8, "item count", getName()) > 0;
+}
diff --git a/src/plugins/playerbot/strategy/warlock/WarlockTriggers.h b/src/plugins/playerbot/strategy/warlock/WarlockTriggers.h
new file mode 100644
index 0000000..796f884
--- /dev/null
+++ b/src/plugins/playerbot/strategy/warlock/WarlockTriggers.h
@@ -0,0 +1,81 @@
+#pragma once
+#include "../triggers/GenericTriggers.h"
+
+namespace ai
+{
+	class DemonArmorTrigger : public BuffTrigger
+	{
+	public:
+		DemonArmorTrigger(PlayerbotAI* ai) : BuffTrigger(ai, "demon armor") {}
+		virtual bool IsActive();
+	};
+
+    class SpellstoneTrigger : public BuffTrigger
+    {
+    public:
+        SpellstoneTrigger(PlayerbotAI* ai) : BuffTrigger(ai, "spellstone") {}
+        virtual bool IsActive();
+    };
+
+    DEBUFF_TRIGGER(CurseOfAgonyTrigger, "curse of agony", "curse of agony");
+    DEBUFF_TRIGGER(CorruptionTrigger, "corruption", "corruption");
+
+    class CorruptionOnAttackerTrigger : public DebuffOnAttackerTrigger
+    {
+    public:
+        CorruptionOnAttackerTrigger(PlayerbotAI* ai) : DebuffOnAttackerTrigger(ai, "corruption") {}
+    };
+
+    DEBUFF_TRIGGER(ImmolateTrigger, "immolate", "immolate");
+
+    class ShadowTranceTrigger : public HasAuraTrigger
+    {
+    public:
+        ShadowTranceTrigger(PlayerbotAI* ai) : HasAuraTrigger(ai, "shadow trance") {}
+    };
+
+    class BacklashTrigger : public HasAuraTrigger
+    {
+    public:
+        BacklashTrigger(PlayerbotAI* ai) : HasAuraTrigger(ai, "backlash") {}
+    };
+
+    class BanishTrigger : public HasCcTargetTrigger
+    {
+    public:
+        BanishTrigger(PlayerbotAI* ai) : HasCcTargetTrigger(ai, "banish") {}
+    };
+
+    class WarlockConjuredItemTrigger : public ItemCountTrigger
+    {
+    public:
+        WarlockConjuredItemTrigger(PlayerbotAI* ai, string item) : ItemCountTrigger(ai, item, 1) {}
+
+        virtual bool IsActive() { return ItemCountTrigger::IsActive() && AI_VALUE2(uint8, "item count", "soul shard") > 0; }
+    };
+
+    class HasSpellstoneTrigger : public WarlockConjuredItemTrigger
+    {
+    public:
+        HasSpellstoneTrigger(PlayerbotAI* ai) : WarlockConjuredItemTrigger(ai, "spellstone") {}
+    };
+
+    class HasFirestoneTrigger : public WarlockConjuredItemTrigger
+    {
+    public:
+        HasFirestoneTrigger(PlayerbotAI* ai) : WarlockConjuredItemTrigger(ai, "firestone") {}
+    };
+
+    class HasHealthstoneTrigger : public WarlockConjuredItemTrigger
+    {
+    public:
+        HasHealthstoneTrigger(PlayerbotAI* ai) : WarlockConjuredItemTrigger(ai, "healthstone") {}
+    };
+
+    class FearTrigger : public HasCcTargetTrigger
+    {
+    public:
+        FearTrigger(PlayerbotAI* ai) : HasCcTargetTrigger(ai, "fear") {}
+    };
+
+}
diff --git a/src/plugins/playerbot/strategy/warrior/DpsWarriorStrategy.cpp b/src/plugins/playerbot/strategy/warrior/DpsWarriorStrategy.cpp
new file mode 100644
index 0000000..7b13bec
--- /dev/null
+++ b/src/plugins/playerbot/strategy/warrior/DpsWarriorStrategy.cpp
@@ -0,0 +1,130 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "WarriorMultipliers.h"
+#include "DpsWarriorStrategy.h"
+
+using namespace ai;
+
+class DpsWarriorStrategyActionNodeFactory : public NamedObjectFactory<ActionNode>
+{
+public:
+    DpsWarriorStrategyActionNodeFactory()
+    {
+        creators["overpower"] = &overpower;
+        creators["melee"] = &melee;
+        creators["charge"] = &charge;
+        creators["bloodthirst"] = &bloodthirst;
+        creators["rend"] = &rend;
+        creators["mocking blow"] = &mocking_blow;
+        creators["death wish"] = &death_wish;
+        creators["execute"] = &execute;
+    }
+private:
+    static ActionNode* overpower(PlayerbotAI* ai)
+    {
+        return new ActionNode ("overpower",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("melee"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* melee(PlayerbotAI* ai)
+    {
+        return new ActionNode ("melee",
+            /*P*/ NextAction::array(0, new NextAction("charge"), NULL),
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+    static ActionNode* charge(PlayerbotAI* ai)
+    {
+        return new ActionNode ("charge",
+            /*P*/ NextAction::array(0, new NextAction("battle stance"), NULL),
+            /*A*/ NextAction::array(0, new NextAction("reach melee"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* bloodthirst(PlayerbotAI* ai)
+    {
+        return new ActionNode ("bloodthirst",
+            /*P*/ NextAction::array(0, new NextAction("battle stance"), NULL),
+            /*A*/ NextAction::array(0, new NextAction("heroic strike"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* rend(PlayerbotAI* ai)
+    {
+        return new ActionNode ("rend",
+            /*P*/ NextAction::array(0, new NextAction("battle stance"), NULL),
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+    static ActionNode* mocking_blow(PlayerbotAI* ai)
+    {
+        return new ActionNode ("mocking blow",
+            /*P*/ NextAction::array(0, new NextAction("battle stance"), NULL),
+            /*A*/ NextAction::array(0, NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* death_wish(PlayerbotAI* ai)
+    {
+        return new ActionNode ("death wish",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("berserker rage"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* execute(PlayerbotAI* ai)
+    {
+        return new ActionNode ("execute",
+            /*P*/ NextAction::array(0, new NextAction("battle stance"), NULL),
+            /*A*/ NextAction::array(0, new NextAction("heroic strike"), NULL),
+            /*C*/ NULL);
+    }
+};
+
+DpsWarriorStrategy::DpsWarriorStrategy(PlayerbotAI* ai) : GenericWarriorStrategy(ai)
+{
+    actionNodeFactories.Add(new DpsWarriorStrategyActionNodeFactory());
+}
+
+NextAction** DpsWarriorStrategy::getDefaultActions()
+{
+    return NextAction::array(0, new NextAction("bloodthirst", ACTION_NORMAL + 1), NULL);
+}
+
+void DpsWarriorStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    GenericWarriorStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "enemy out of melee",
+        NextAction::array(0, new NextAction("charge", ACTION_NORMAL + 9), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "target critical health",
+        NextAction::array(0, new NextAction("execute", ACTION_HIGH + 4), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"hamstring",
+		NextAction::array(0, new NextAction("hamstring", ACTION_INTERRUPT), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"victory rush",
+		NextAction::array(0, new NextAction("victory rush", ACTION_HIGH + 3), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "death wish",
+        NextAction::array(0, new NextAction("death wish", ACTION_HIGH + 2), NULL)));
+}
+
+
+void DpsWarrirorAoeStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    triggers.push_back(new TriggerNode(
+        "rend on attacker",
+        NextAction::array(0, new NextAction("rend on attacker", ACTION_HIGH + 1), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "light aoe",
+        NextAction::array(0, new NextAction("thunder clap", ACTION_HIGH + 2), new NextAction("demoralizing shout", ACTION_HIGH + 2), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "medium aoe",
+        NextAction::array(0, new NextAction("cleave", ACTION_HIGH + 3), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/warrior/DpsWarriorStrategy.h b/src/plugins/playerbot/strategy/warrior/DpsWarriorStrategy.h
new file mode 100644
index 0000000..3ef29c3
--- /dev/null
+++ b/src/plugins/playerbot/strategy/warrior/DpsWarriorStrategy.h
@@ -0,0 +1,28 @@
+#pragma once
+
+#include "GenericWarriorStrategy.h"
+
+namespace ai
+{
+    class DpsWarriorStrategy : public GenericWarriorStrategy
+    {
+    public:
+        DpsWarriorStrategy(PlayerbotAI* ai);
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "dps"; }
+        virtual NextAction** getDefaultActions();
+        virtual int GetType() { return STRATEGY_TYPE_COMBAT | STRATEGY_TYPE_DPS | STRATEGY_TYPE_MELEE; }
+    };
+
+    class DpsWarrirorAoeStrategy : public CombatStrategy
+    {
+    public:
+        DpsWarrirorAoeStrategy(PlayerbotAI* ai) : CombatStrategy(ai) {}
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "aoe"; }
+    };
+}
diff --git a/src/plugins/playerbot/strategy/warrior/GenericWarriorNonCombatStrategy.cpp b/src/plugins/playerbot/strategy/warrior/GenericWarriorNonCombatStrategy.cpp
new file mode 100644
index 0000000..6bd7d08
--- /dev/null
+++ b/src/plugins/playerbot/strategy/warrior/GenericWarriorNonCombatStrategy.cpp
@@ -0,0 +1,7 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "WarriorMultipliers.h"
+#include "GenericWarriorNonCombatStrategy.h"
+
+using namespace ai;
+
diff --git a/src/plugins/playerbot/strategy/warrior/GenericWarriorNonCombatStrategy.h b/src/plugins/playerbot/strategy/warrior/GenericWarriorNonCombatStrategy.h
new file mode 100644
index 0000000..1041a2e
--- /dev/null
+++ b/src/plugins/playerbot/strategy/warrior/GenericWarriorNonCombatStrategy.h
@@ -0,0 +1,13 @@
+#pragma once
+
+#include "../generic/NonCombatStrategy.h"
+
+namespace ai
+{
+    class GenericWarriorNonCombatStrategy : public NonCombatStrategy
+    {
+    public:
+        GenericWarriorNonCombatStrategy(PlayerbotAI* ai) : NonCombatStrategy(ai) {}
+        virtual string getName() { return "nc"; }
+   };
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/warrior/GenericWarriorStrategy.cpp b/src/plugins/playerbot/strategy/warrior/GenericWarriorStrategy.cpp
new file mode 100644
index 0000000..4d7b851
--- /dev/null
+++ b/src/plugins/playerbot/strategy/warrior/GenericWarriorStrategy.cpp
@@ -0,0 +1,73 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "GenericWarriorStrategy.h"
+#include "WarriorAiObjectContext.h"
+
+using namespace ai;
+
+class GenericWarriorStrategyActionNodeFactory : public NamedObjectFactory<ActionNode>
+{
+public:
+    GenericWarriorStrategyActionNodeFactory()
+    {
+        creators["hamstring"] = &hamstring;
+        creators["heroic strike"] = &heroic_strike;
+        creators["battle shout"] = &battle_shout;
+    }
+private:
+    static ActionNode* hamstring(PlayerbotAI* ai)
+    {
+        return new ActionNode ("hamstring",
+            /*P*/ NextAction::array(0, new NextAction("battle stance"), NULL),
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+    static ActionNode* heroic_strike(PlayerbotAI* ai)
+    {
+        return new ActionNode ("heroic strike",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("melee"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* battle_shout(PlayerbotAI* ai)
+    {
+        return new ActionNode ("battle shout",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("melee"), NULL),
+            /*C*/ NULL);
+    }
+};
+
+GenericWarriorStrategy::GenericWarriorStrategy(PlayerbotAI* ai) : MeleeCombatStrategy(ai)
+{
+    actionNodeFactories.Add(new GenericWarriorStrategyActionNodeFactory());
+}
+
+void GenericWarriorStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    MeleeCombatStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "battle shout",
+        NextAction::array(0, new NextAction("battle shout", ACTION_HIGH + 1), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "rend",
+        NextAction::array(0, new NextAction("rend", ACTION_NORMAL + 1), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "bloodrage",
+        NextAction::array(0, new NextAction("bloodrage", ACTION_HIGH + 1), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "shield bash",
+        NextAction::array(0, new NextAction("shield bash", ACTION_INTERRUPT + 4), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "shield bash on enemy healer",
+        NextAction::array(0, new NextAction("shield bash on enemy healer", ACTION_INTERRUPT + 3), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"critical health",
+		NextAction::array(0, new NextAction("intimidating shout", ACTION_EMERGENCY), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/warrior/GenericWarriorStrategy.h b/src/plugins/playerbot/strategy/warrior/GenericWarriorStrategy.h
new file mode 100644
index 0000000..0ef2dcf
--- /dev/null
+++ b/src/plugins/playerbot/strategy/warrior/GenericWarriorStrategy.h
@@ -0,0 +1,19 @@
+#pragma once
+
+#include "../Strategy.h"
+#include "../generic/MeleeCombatStrategy.h"
+
+namespace ai
+{
+    class AiObjectContext;
+
+    class GenericWarriorStrategy : public MeleeCombatStrategy
+    {
+    public:
+        GenericWarriorStrategy(PlayerbotAI* ai);
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "warrior"; }
+    };
+}
diff --git a/src/plugins/playerbot/strategy/warrior/TankWarriorStrategy.cpp b/src/plugins/playerbot/strategy/warrior/TankWarriorStrategy.cpp
new file mode 100644
index 0000000..d37c08d
--- /dev/null
+++ b/src/plugins/playerbot/strategy/warrior/TankWarriorStrategy.cpp
@@ -0,0 +1,126 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "WarriorMultipliers.h"
+#include "TankWarriorStrategy.h"
+
+using namespace ai;
+
+class TankWarriorStrategyActionNodeFactory : public NamedObjectFactory<ActionNode>
+{
+public:
+    TankWarriorStrategyActionNodeFactory()
+    {
+        creators["melee"] = &melee;
+        creators["shield wall"] = &shield_wall;
+        creators["rend"] = &rend;
+        creators["revenge"] = &revenge;
+        creators["devastate"] = &devastate;
+        creators["shockwave"] = &shockwave;
+        creators["taunt"] = &taunt;
+    }
+private:
+    static ActionNode* melee(PlayerbotAI* ai)
+    {
+        return new ActionNode ("melee",
+            /*P*/ NextAction::array(0, new NextAction("defensive stance"), NULL),
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+    static ActionNode* shield_wall(PlayerbotAI* ai)
+    {
+        return new ActionNode ("shield wall",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("shield block"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* rend(PlayerbotAI* ai)
+    {
+        return new ActionNode ("rend",
+            /*P*/ NextAction::array(0, new NextAction("defensive stance"), NULL),
+            /*A*/ NULL,
+            /*C*/ NULL);
+    }
+    static ActionNode* revenge(PlayerbotAI* ai)
+    {
+        return new ActionNode ("revenge",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("melee"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* devastate(PlayerbotAI* ai)
+    {
+        return new ActionNode ("devastate",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("sunder armor"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* shockwave(PlayerbotAI* ai)
+    {
+        return new ActionNode ("shockwave",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("cleave"), NULL),
+            /*C*/ NULL);
+    }
+    static ActionNode* taunt(PlayerbotAI* ai)
+    {
+        return new ActionNode ("taunt",
+            /*P*/ NULL,
+            /*A*/ NextAction::array(0, new NextAction("mocking blow"), NULL),
+            /*C*/ NULL);
+    }
+};
+
+TankWarriorStrategy::TankWarriorStrategy(PlayerbotAI* ai) : GenericWarriorStrategy(ai)
+{
+    actionNodeFactories.Add(new TankWarriorStrategyActionNodeFactory());
+}
+
+NextAction** TankWarriorStrategy::getDefaultActions()
+{
+    return NextAction::array(0, new NextAction("devastate", ACTION_NORMAL + 1), new NextAction("revenge", ACTION_NORMAL + 1), NULL);
+}
+
+void TankWarriorStrategy::InitTriggers(std::list<TriggerNode*> &triggers)
+{
+    GenericWarriorStrategy::InitTriggers(triggers);
+
+    triggers.push_back(new TriggerNode(
+        "medium rage available",
+        NextAction::array(0, new NextAction("shield slam", ACTION_NORMAL + 2), new NextAction("heroic strike", ACTION_NORMAL + 2), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "disarm",
+        NextAction::array(0, new NextAction("disarm", ACTION_NORMAL), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "lose aggro",
+        NextAction::array(0, new NextAction("taunt", ACTION_HIGH + 9), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "medium health",
+        NextAction::array(0, new NextAction("shield wall", ACTION_MEDIUM_HEAL), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"critical health",
+		NextAction::array(0, new NextAction("last stand", ACTION_EMERGENCY + 3), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"medium aoe",
+		NextAction::array(0, new NextAction("shockwave", ACTION_HIGH + 2), NULL)));
+
+	triggers.push_back(new TriggerNode(
+        "light aoe",
+        NextAction::array(0, new NextAction("thunder clap", ACTION_HIGH + 2), new NextAction("demoralizing shout", ACTION_HIGH + 2),  new NextAction("cleave", ACTION_HIGH + 1), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "high aoe",
+        NextAction::array(0, new NextAction("challenging shout", ACTION_HIGH + 3), NULL)));
+
+	triggers.push_back(new TriggerNode(
+		"concussion blow",
+		NextAction::array(0, new NextAction("concussion blow", ACTION_INTERRUPT), NULL)));
+
+    triggers.push_back(new TriggerNode(
+        "sword and board",
+        NextAction::array(0, new NextAction("shield slam", ACTION_HIGH + 3), NULL)));
+}
diff --git a/src/plugins/playerbot/strategy/warrior/TankWarriorStrategy.h b/src/plugins/playerbot/strategy/warrior/TankWarriorStrategy.h
new file mode 100644
index 0000000..0f98946
--- /dev/null
+++ b/src/plugins/playerbot/strategy/warrior/TankWarriorStrategy.h
@@ -0,0 +1,18 @@
+#pragma once
+
+#include "GenericWarriorStrategy.h"
+
+namespace ai
+{
+    class TankWarriorStrategy : public GenericWarriorStrategy
+    {
+    public:
+        TankWarriorStrategy(PlayerbotAI* ai);
+
+    public:
+        virtual void InitTriggers(std::list<TriggerNode*> &triggers);
+        virtual string getName() { return "tank"; }
+        virtual NextAction** getDefaultActions();
+        virtual int GetType() { return STRATEGY_TYPE_TANK | STRATEGY_TYPE_MELEE; }
+    };
+}
diff --git a/src/plugins/playerbot/strategy/warrior/WarriorActions.cpp b/src/plugins/playerbot/strategy/warrior/WarriorActions.cpp
new file mode 100644
index 0000000..12ab057
--- /dev/null
+++ b/src/plugins/playerbot/strategy/warrior/WarriorActions.cpp
@@ -0,0 +1,15 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "WarriorActions.h"
+
+using namespace ai;
+
+NextAction** CastDisarmAction::getPrerequisites()
+{
+    return NextAction::merge( NextAction::array(0, new NextAction("defensive stance"), NULL), CastDebuffSpellAction::getPrerequisites());
+}
+
+NextAction** CastRevengeAction::getPrerequisites()
+{
+    return NextAction::merge( NextAction::array(0, new NextAction("defensive stance"), NULL), CastMeleeSpellAction::getPrerequisites());
+}
diff --git a/src/plugins/playerbot/strategy/warrior/WarriorActions.h b/src/plugins/playerbot/strategy/warrior/WarriorActions.h
new file mode 100644
index 0000000..d51ddb4
--- /dev/null
+++ b/src/plugins/playerbot/strategy/warrior/WarriorActions.h
@@ -0,0 +1,207 @@
+#pragma once
+#include "../actions/GenericActions.h"
+
+namespace ai
+{
+    // battle
+    class CastBattleMeleeSpellAction : public CastMeleeSpellAction {
+    public:
+        CastBattleMeleeSpellAction(PlayerbotAI* ai, string spell) : CastMeleeSpellAction(ai, spell) {}
+        virtual NextAction** getPrerequisites() {
+            return NextAction::merge( NextAction::array(0, new NextAction("battle stance"), NULL), CastMeleeSpellAction::getPrerequisites());
+        }
+    };
+
+    // defensive
+    class CastDefensiveMeleeSpellAction : public CastMeleeSpellAction {
+    public:
+        CastDefensiveMeleeSpellAction(PlayerbotAI* ai, string spell) : CastMeleeSpellAction(ai, spell) {}
+        virtual NextAction** getPrerequisites() {
+            return NextAction::merge( NextAction::array(0, new NextAction("defensive stance"), NULL), CastMeleeSpellAction::getPrerequisites());
+        }
+    };
+
+    // all
+    class CastHeroicStrikeAction : public CastMeleeSpellAction {
+    public:
+        CastHeroicStrikeAction(PlayerbotAI* ai) : CastMeleeSpellAction(ai, "heroic strike") {}
+    };
+
+    // all
+    class CastCleaveAction : public CastMeleeSpellAction {
+    public:
+        CastCleaveAction(PlayerbotAI* ai) : CastMeleeSpellAction(ai, "cleave") {}
+    };
+
+    // battle, berserker
+    class CastMockingBlowAction : public CastMeleeSpellAction {
+    public:
+        CastMockingBlowAction(PlayerbotAI* ai) : CastMeleeSpellAction(ai, "mocking blow") {}
+    };
+
+    class CastBloodthirstAction : public CastMeleeSpellAction {
+    public:
+        CastBloodthirstAction(PlayerbotAI* ai) : CastMeleeSpellAction(ai, "bloodthirst") {}
+    };
+
+    // battle, berserker
+    class CastExecuteAction : public CastMeleeSpellAction {
+    public:
+        CastExecuteAction(PlayerbotAI* ai) : CastMeleeSpellAction(ai, "execute") {}
+    };
+
+    // battle
+    class CastOverpowerAction : public CastBattleMeleeSpellAction {
+    public:
+        CastOverpowerAction(PlayerbotAI* ai) : CastBattleMeleeSpellAction(ai, "overpower") {}
+    };
+
+    // battle, berserker
+    class CastHamstringAction : public CastMeleeSpellAction {
+    public:
+        CastHamstringAction(PlayerbotAI* ai) : CastMeleeSpellAction(ai, "hamstring") {}
+    };
+
+    // defensive
+    class CastTauntAction : public CastSpellAction {
+    public:
+        CastTauntAction(PlayerbotAI* ai) : CastSpellAction(ai, "taunt") {}
+        virtual NextAction** getPrerequisites() {
+            return NextAction::merge( NextAction::array(0, new NextAction("defensive stance"), NULL), CastSpellAction::getPrerequisites());
+        }
+    };
+
+    // defensive
+    class CastShieldBlockAction : public CastBuffSpellAction {
+    public:
+        CastShieldBlockAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "shield block") {}
+		virtual NextAction** getPrerequisites() {
+			return NextAction::merge( NextAction::array(0, new NextAction("defensive stance"), NULL), CastSpellAction::getPrerequisites());
+		}
+    };
+
+    // defensive
+    class CastShieldWallAction : public CastDefensiveMeleeSpellAction {
+    public:
+        CastShieldWallAction(PlayerbotAI* ai) : CastDefensiveMeleeSpellAction(ai, "shield wall") {}
+    };
+
+    class CastBloodrageAction : public CastBuffSpellAction {
+    public:
+        CastBloodrageAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "bloodrage") {}
+    };
+
+    // defensive
+    class CastDevastateAction : public CastDefensiveMeleeSpellAction {
+    public:
+        CastDevastateAction(PlayerbotAI* ai) : CastDefensiveMeleeSpellAction(ai, "devastate") {}
+    };
+
+    // all
+    class CastSlamAction : public CastMeleeSpellAction {
+    public:
+        CastSlamAction(PlayerbotAI* ai) : CastMeleeSpellAction(ai, "slam") {}
+    };
+
+	// all
+	class CastShieldSlamAction : public CastMeleeSpellAction {
+	public:
+		CastShieldSlamAction(PlayerbotAI* ai) : CastMeleeSpellAction(ai, "shield slam") {}
+	};
+
+    // after dodge
+    BEGIN_MELEE_SPELL_ACTION(CastRevengeAction, "revenge")
+        virtual NextAction** getPrerequisites();
+    END_SPELL_ACTION()
+
+
+    //debuffs
+    BEGIN_DEBUFF_ACTION(CastRendAction, "rend")
+    END_SPELL_ACTION()
+
+    class CastRendOnAttackerAction : public CastDebuffSpellOnAttackerAction
+    {
+    public:
+        CastRendOnAttackerAction(PlayerbotAI* ai) : CastDebuffSpellOnAttackerAction(ai, "rend") {}
+    };
+
+    BEGIN_DEBUFF_ACTION(CastDisarmAction, "disarm")
+        virtual NextAction** getPrerequisites();
+    END_SPELL_ACTION()
+
+    BEGIN_DEBUFF_ACTION(CastSunderArmorAction, "sunder armor") // 5 times
+    END_SPELL_ACTION()
+
+    class CastDemoralizingShoutAction : public CastDebuffSpellAction {
+    public:
+        CastDemoralizingShoutAction(PlayerbotAI* ai) : CastDebuffSpellAction(ai, "demoralizing shout") {}
+    };
+
+    BEGIN_MELEE_SPELL_ACTION(CastChallengingShoutAction, "challenging shout")
+    END_SPELL_ACTION()
+
+    // stuns
+    BEGIN_MELEE_SPELL_ACTION(CastShieldBashAction, "shield bash")
+    END_SPELL_ACTION()
+
+    BEGIN_MELEE_SPELL_ACTION(CastIntimidatingShoutAction, "intimidating shout")
+    END_SPELL_ACTION()
+
+    BEGIN_MELEE_SPELL_ACTION(CastThunderClapAction, "thunder clap")
+    END_SPELL_ACTION()
+
+    // buffs
+	class CastBattleShoutAction : public CastBuffSpellAction {
+	public:
+		CastBattleShoutAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "battle shout") {}
+	};
+
+	class CastDefensiveStanceAction : public CastBuffSpellAction {
+	public:
+		CastDefensiveStanceAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "defensive stance") {}
+	};
+
+	class CastBattleStanceAction : public CastBuffSpellAction {
+	public:
+		CastBattleStanceAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "battle stance") {}
+	};
+
+    BEGIN_RANGED_SPELL_ACTION(CastChargeAction, "charge")
+    END_SPELL_ACTION()
+
+	class CastDeathWishAction : public CastBuffSpellAction {
+	public:
+		CastDeathWishAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "death wish") {}
+	};
+
+	class CastBerserkerRageAction : public CastBuffSpellAction {
+	public:
+		CastBerserkerRageAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "berserker rage") {}
+	};
+
+	class CastLastStandAction : public CastBuffSpellAction {
+	public:
+		CastLastStandAction(PlayerbotAI* ai) : CastBuffSpellAction(ai, "last stand") {}
+	};
+
+	// defensive
+	class CastShockwaveAction : public CastDefensiveMeleeSpellAction {
+	public:
+		CastShockwaveAction(PlayerbotAI* ai) : CastDefensiveMeleeSpellAction(ai, "shockwave") {}
+	};
+
+	// defensive
+	class CastConcussionBlowAction : public CastDefensiveMeleeSpellAction {
+	public:
+		CastConcussionBlowAction(PlayerbotAI* ai) : CastDefensiveMeleeSpellAction(ai, "concussion blow") {}
+	};
+
+	BEGIN_MELEE_SPELL_ACTION(CastVictoryRushAction, "victory rush")
+	END_SPELL_ACTION()
+
+    class CastShieldBashOnEnemyHealerAction : public CastSpellOnEnemyHealerAction
+    {
+    public:
+        CastShieldBashOnEnemyHealerAction(PlayerbotAI* ai) : CastSpellOnEnemyHealerAction(ai, "shield bash") {}
+    };
+}
diff --git a/src/plugins/playerbot/strategy/warrior/WarriorAiObjectContext.cpp b/src/plugins/playerbot/strategy/warrior/WarriorAiObjectContext.cpp
new file mode 100644
index 0000000..bc74075
--- /dev/null
+++ b/src/plugins/playerbot/strategy/warrior/WarriorAiObjectContext.cpp
@@ -0,0 +1,192 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "WarriorActions.h"
+#include "WarriorAiObjectContext.h"
+#include "GenericWarriorNonCombatStrategy.h"
+#include "TankWarriorStrategy.h"
+#include "DpsWarriorStrategy.h"
+#include "../generic/PullStrategy.h"
+#include "WarriorTriggers.h"
+#include "../NamedObjectContext.h"
+
+using namespace ai;
+
+
+namespace ai
+{
+    namespace warrior
+    {
+        using namespace ai;
+
+        class StrategyFactoryInternal : public NamedObjectContext<Strategy>
+        {
+        public:
+            StrategyFactoryInternal()
+            {
+                creators["nc"] = &warrior::StrategyFactoryInternal::nc;
+                creators["pull"] = &warrior::StrategyFactoryInternal::pull;
+                creators["aoe"] = &warrior::StrategyFactoryInternal::aoe;
+            }
+
+        private:
+            static Strategy* nc(PlayerbotAI* ai) { return new GenericWarriorNonCombatStrategy(ai); }
+            static Strategy* aoe(PlayerbotAI* ai) { return new DpsWarrirorAoeStrategy(ai); }
+            static Strategy* pull(PlayerbotAI* ai) { return new PullStrategy(ai, "shoot"); }
+        };
+
+        class CombatStrategyFactoryInternal : public NamedObjectContext<Strategy>
+        {
+        public:
+            CombatStrategyFactoryInternal() : NamedObjectContext<Strategy>(false, true)
+            {
+                creators["tank"] = &warrior::CombatStrategyFactoryInternal::tank;
+                creators["dps"] = &warrior::CombatStrategyFactoryInternal::dps;
+            }
+
+        private:
+            static Strategy* tank(PlayerbotAI* ai) { return new TankWarriorStrategy(ai); }
+            static Strategy* dps(PlayerbotAI* ai) { return new DpsWarriorStrategy(ai); }
+        };
+    };
+};
+
+namespace ai
+{
+    namespace warrior
+    {
+        using namespace ai;
+
+        class TriggerFactoryInternal : public NamedObjectContext<Trigger>
+        {
+        public:
+            TriggerFactoryInternal()
+            {
+                creators["hamstring"] = &TriggerFactoryInternal::hamstring;
+                creators["victory rush"] = &TriggerFactoryInternal::victory_rush;
+                creators["death wish"] = &TriggerFactoryInternal::death_wish;
+                creators["battle shout"] = &TriggerFactoryInternal::battle_shout;
+                creators["rend"] = &TriggerFactoryInternal::rend;
+                creators["rend on attacker"] = &TriggerFactoryInternal::rend_on_attacker;
+                creators["bloodrage"] = &TriggerFactoryInternal::bloodrage;
+                creators["shield bash"] = &TriggerFactoryInternal::shield_bash;
+                creators["disarm"] = &TriggerFactoryInternal::disarm;
+                creators["concussion blow"] = &TriggerFactoryInternal::concussion_blow;
+                creators["sword and board"] = &TriggerFactoryInternal::SwordAndBoard;
+                creators["shield bash on enemy healer"] = &TriggerFactoryInternal::shield_bash_on_enemy_healer;
+
+            }
+
+        private:
+            static Trigger* hamstring(PlayerbotAI* ai) { return new HamstringTrigger(ai); }
+            static Trigger* victory_rush(PlayerbotAI* ai) { return new VictoryRushTrigger(ai); }
+            static Trigger* death_wish(PlayerbotAI* ai) { return new DeathWishTrigger(ai); }
+            static Trigger* battle_shout(PlayerbotAI* ai) { return new BattleShoutTrigger(ai); }
+            static Trigger* rend(PlayerbotAI* ai) { return new RendDebuffTrigger(ai); }
+            static Trigger* rend_on_attacker(PlayerbotAI* ai) { return new RendDebuffOnAttackerTrigger(ai); }
+            static Trigger* bloodrage(PlayerbotAI* ai) { return new BloodrageDebuffTrigger(ai); }
+            static Trigger* shield_bash(PlayerbotAI* ai) { return new ShieldBashInterruptSpellTrigger(ai); }
+            static Trigger* disarm(PlayerbotAI* ai) { return new DisarmDebuffTrigger(ai); }
+            static Trigger* concussion_blow(PlayerbotAI* ai) { return new ConcussionBlowTrigger(ai); }
+            static Trigger* SwordAndBoard(PlayerbotAI* ai) { return new SwordAndBoardTrigger(ai); }
+            static Trigger* shield_bash_on_enemy_healer(PlayerbotAI* ai) { return new ShieldBashInterruptEnemyHealerSpellTrigger(ai); }
+        };
+    };
+};
+
+
+namespace ai
+{
+    namespace warrior
+    {
+        using namespace ai;
+
+        class AiObjectContextInternal : public NamedObjectContext<Action>
+        {
+        public:
+            AiObjectContextInternal()
+            {
+                creators["devastate"] = &AiObjectContextInternal::devastate;
+                creators["overpower"] = &AiObjectContextInternal::overpower;
+                creators["charge"] = &AiObjectContextInternal::charge;
+                creators["bloodthirst"] = &AiObjectContextInternal::bloodthirst;
+                creators["rend"] = &AiObjectContextInternal::rend;
+                creators["rend on attacker"] = &AiObjectContextInternal::rend_on_attacker;
+                creators["mocking blow"] = &AiObjectContextInternal::mocking_blow;
+                creators["death wish"] = &AiObjectContextInternal::death_wish;
+                creators["berserker rage"] = &AiObjectContextInternal::berserker_rage;
+                creators["victory rush"] = &AiObjectContextInternal::victory_rush;
+                creators["execute"] = &AiObjectContextInternal::execute;
+                creators["defensive stance"] = &AiObjectContextInternal::defensive_stance;
+                creators["hamstring"] = &AiObjectContextInternal::hamstring;
+                creators["shield bash"] = &AiObjectContextInternal::shield_bash;
+                creators["shield block"] = &AiObjectContextInternal::shield_block;
+                creators["bloodrage"] = &AiObjectContextInternal::bloodrage;
+                creators["battle stance"] = &AiObjectContextInternal::battle_stance;
+                creators["heroic strike"] = &AiObjectContextInternal::heroic_strike;
+                creators["intimidating shout"] = &AiObjectContextInternal::intimidating_shout;
+                creators["demoralizing shout"] = &AiObjectContextInternal::demoralizing_shout;
+                creators["challenging shout"] = &AiObjectContextInternal::challenging_shout;
+                creators["shield wall"] = &AiObjectContextInternal::shield_wall;
+                creators["battle shout"] = &AiObjectContextInternal::battle_shout;
+                creators["thunder clap"] = &AiObjectContextInternal::thunder_clap;
+                creators["taunt"] = &AiObjectContextInternal::taunt;
+                creators["revenge"] = &AiObjectContextInternal::revenge;
+                creators["slam"] = &AiObjectContextInternal::slam;
+                creators["shield slam"] = &AiObjectContextInternal::shield_slam;
+                creators["disarm"] = &AiObjectContextInternal::disarm;
+                creators["sunder armor"] = &AiObjectContextInternal::sunder_armor;
+                creators["last stand"] = &AiObjectContextInternal::last_stand;
+                creators["shockwave"] = &AiObjectContextInternal::shockwave;
+                creators["cleave"] = &AiObjectContextInternal::cleave;
+                creators["concussion blow"] = &AiObjectContextInternal::concussion_blow;
+                creators["shield bash on enemy healer"] = &AiObjectContextInternal::shield_bash_on_enemy_healer;
+            }
+
+        private:
+            static Action* devastate(PlayerbotAI* ai) { return new CastDevastateAction(ai); }
+            static Action* last_stand(PlayerbotAI* ai) { return new CastLastStandAction(ai); }
+            static Action* shockwave(PlayerbotAI* ai) { return new CastShockwaveAction(ai); }
+            static Action* cleave(PlayerbotAI* ai) { return new CastCleaveAction(ai); }
+            static Action* concussion_blow(PlayerbotAI* ai) { return new CastConcussionBlowAction(ai); }
+            static Action* taunt(PlayerbotAI* ai) { return new CastTauntAction(ai); }
+            static Action* revenge(PlayerbotAI* ai) { return new CastRevengeAction(ai); }
+            static Action* slam(PlayerbotAI* ai) { return new CastSlamAction(ai); }
+            static Action* shield_slam(PlayerbotAI* ai) { return new CastShieldSlamAction(ai); }
+            static Action* disarm(PlayerbotAI* ai) { return new CastDisarmAction(ai); }
+            static Action* sunder_armor(PlayerbotAI* ai) { return new CastSunderArmorAction(ai); }
+            static Action* overpower(PlayerbotAI* ai) { return new CastOverpowerAction(ai); }
+            static Action* charge(PlayerbotAI* ai) { return new CastChargeAction(ai); }
+            static Action* bloodthirst(PlayerbotAI* ai) { return new CastBloodthirstAction(ai); }
+            static Action* rend(PlayerbotAI* ai) { return new CastRendAction(ai); }
+            static Action* rend_on_attacker(PlayerbotAI* ai) { return new CastRendOnAttackerAction(ai); }
+            static Action* mocking_blow(PlayerbotAI* ai) { return new CastMockingBlowAction(ai); }
+            static Action* death_wish(PlayerbotAI* ai) { return new CastDeathWishAction(ai); }
+            static Action* berserker_rage(PlayerbotAI* ai) { return new CastBerserkerRageAction(ai); }
+            static Action* victory_rush(PlayerbotAI* ai) { return new CastVictoryRushAction(ai); }
+            static Action* execute(PlayerbotAI* ai) { return new CastExecuteAction(ai); }
+            static Action* defensive_stance(PlayerbotAI* ai) { return new CastDefensiveStanceAction(ai); }
+            static Action* hamstring(PlayerbotAI* ai) { return new CastHamstringAction(ai); }
+            static Action* shield_bash(PlayerbotAI* ai) { return new CastShieldBashAction(ai); }
+            static Action* shield_block(PlayerbotAI* ai) { return new CastShieldBlockAction(ai); }
+            static Action* bloodrage(PlayerbotAI* ai) { return new CastBloodrageAction(ai); }
+            static Action* battle_stance(PlayerbotAI* ai) { return new CastBattleStanceAction(ai); }
+            static Action* heroic_strike(PlayerbotAI* ai) { return new CastHeroicStrikeAction(ai); }
+            static Action* intimidating_shout(PlayerbotAI* ai) { return new CastIntimidatingShoutAction(ai); }
+            static Action* demoralizing_shout(PlayerbotAI* ai) { return new CastDemoralizingShoutAction(ai); }
+            static Action* challenging_shout(PlayerbotAI* ai) { return new CastChallengingShoutAction(ai); }
+            static Action* shield_wall(PlayerbotAI* ai) { return new CastShieldWallAction(ai); }
+            static Action* battle_shout(PlayerbotAI* ai) { return new CastBattleShoutAction(ai); }
+            static Action* thunder_clap(PlayerbotAI* ai) { return new CastThunderClapAction(ai); }
+            static Action* shield_bash_on_enemy_healer(PlayerbotAI* ai) { return new CastShieldBashOnEnemyHealerAction(ai); }
+
+        };
+    };
+};
+
+WarriorAiObjectContext::WarriorAiObjectContext(PlayerbotAI* ai) : AiObjectContext(ai)
+{
+    strategyContexts.Add(new ai::warrior::StrategyFactoryInternal());
+    strategyContexts.Add(new ai::warrior::CombatStrategyFactoryInternal());
+    actionContexts.Add(new ai::warrior::AiObjectContextInternal());
+    triggerContexts.Add(new ai::warrior::TriggerFactoryInternal());
+}
diff --git a/src/plugins/playerbot/strategy/warrior/WarriorAiObjectContext.h b/src/plugins/playerbot/strategy/warrior/WarriorAiObjectContext.h
new file mode 100644
index 0000000..bc1b5d4
--- /dev/null
+++ b/src/plugins/playerbot/strategy/warrior/WarriorAiObjectContext.h
@@ -0,0 +1,12 @@
+#pragma once
+
+#include "../AiObjectContext.h"
+
+namespace ai
+{
+    class WarriorAiObjectContext : public AiObjectContext
+    {
+    public:
+        WarriorAiObjectContext(PlayerbotAI* ai);
+    };
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/warrior/WarriorMultipliers.cpp b/src/plugins/playerbot/strategy/warrior/WarriorMultipliers.cpp
new file mode 100644
index 0000000..0698aa1
--- /dev/null
+++ b/src/plugins/playerbot/strategy/warrior/WarriorMultipliers.cpp
@@ -0,0 +1,6 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "WarriorMultipliers.h"
+#include "WarriorActions.h"
+
+using namespace ai;
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/warrior/WarriorMultipliers.h b/src/plugins/playerbot/strategy/warrior/WarriorMultipliers.h
new file mode 100644
index 0000000..7cfbdd4
--- /dev/null
+++ b/src/plugins/playerbot/strategy/warrior/WarriorMultipliers.h
@@ -0,0 +1,6 @@
+#pragma once
+
+namespace ai
+{
+   
+}
\ No newline at end of file
diff --git a/src/plugins/playerbot/strategy/warrior/WarriorTriggers.cpp b/src/plugins/playerbot/strategy/warrior/WarriorTriggers.cpp
new file mode 100644
index 0000000..0b8d183
--- /dev/null
+++ b/src/plugins/playerbot/strategy/warrior/WarriorTriggers.cpp
@@ -0,0 +1,7 @@
+#include "../../../pchdef.h"
+#include "../../playerbot.h"
+#include "WarriorTriggers.h"
+#include "WarriorActions.h"
+
+using namespace ai;
+
diff --git a/src/plugins/playerbot/strategy/warrior/WarriorTriggers.h b/src/plugins/playerbot/strategy/warrior/WarriorTriggers.h
new file mode 100644
index 0000000..72a1285
--- /dev/null
+++ b/src/plugins/playerbot/strategy/warrior/WarriorTriggers.h
@@ -0,0 +1,78 @@
+#pragma once
+#include "../triggers/GenericTriggers.h"
+
+namespace ai
+{
+    BUFF_TRIGGER(BattleShoutTrigger, "battle shout", "battle shout")
+
+    DEBUFF_TRIGGER(RendDebuffTrigger, "rend", "rend")
+    DEBUFF_TRIGGER(DisarmDebuffTrigger, "disarm", "disarm")
+    DEBUFF_TRIGGER(SunderArmorDebuffTrigger, "sunder armor", "sunder armor")
+
+    class RendDebuffOnAttackerTrigger : public DebuffOnAttackerTrigger
+    {
+    public:
+        RendDebuffOnAttackerTrigger(PlayerbotAI* ai) : DebuffOnAttackerTrigger(ai, "rend") {}
+    };
+
+	class RevengeAvailableTrigger : public SpellCanBeCastTrigger
+	{
+	public:
+		RevengeAvailableTrigger(PlayerbotAI* ai) : SpellCanBeCastTrigger(ai, "revenge") {}
+	};
+
+    class BloodrageDebuffTrigger : public DebuffTrigger
+    {
+    public:
+        BloodrageDebuffTrigger(PlayerbotAI* ai) : DebuffTrigger(ai, "bloodrage") {}
+        virtual bool IsActive()
+        {
+            return DebuffTrigger::IsActive() &&
+                AI_VALUE2(uint8, "health", "self target") >= 75 &&
+                AI_VALUE2(uint8, "rage", "self target") < 20;
+        }
+    };
+
+    class ShieldBashInterruptSpellTrigger : public InterruptSpellTrigger
+    {
+    public:
+        ShieldBashInterruptSpellTrigger(PlayerbotAI* ai) : InterruptSpellTrigger(ai, "shield bash") {}
+    };
+
+    class VictoryRushTrigger : public HasAuraTrigger
+    {
+    public:
+        VictoryRushTrigger(PlayerbotAI* ai) : HasAuraTrigger(ai, "victory rush") {}
+    };
+
+    class SwordAndBoardTrigger : public HasAuraTrigger
+    {
+    public:
+        SwordAndBoardTrigger(PlayerbotAI* ai) : HasAuraTrigger(ai, "sword and board") {}
+    };
+
+    class ConcussionBlowTrigger : public SnareTargetTrigger
+    {
+    public:
+        ConcussionBlowTrigger(PlayerbotAI* ai) : SnareTargetTrigger(ai, "concussion blow") {}
+    };
+
+    class HamstringTrigger : public SnareTargetTrigger
+    {
+    public:
+        HamstringTrigger(PlayerbotAI* ai) : SnareTargetTrigger(ai, "hamstring") {}
+    };
+
+    class DeathWishTrigger : public BoostTrigger
+    {
+    public:
+        DeathWishTrigger(PlayerbotAI* ai) : BoostTrigger(ai, "death wish") {}
+    };
+
+    class ShieldBashInterruptEnemyHealerSpellTrigger : public InterruptEnemyHealerTrigger
+    {
+    public:
+        ShieldBashInterruptEnemyHealerSpellTrigger(PlayerbotAI* ai) : InterruptEnemyHealerTrigger(ai, "shield bash") {}
+    };
+
+}
diff --git a/src/server/game/AuctionHouse/AuctionHouseMgr.cpp b/src/server/game/AuctionHouse/AuctionHouseMgr.cpp
index 035d9af..590773c 100644
--- a/src/server/game/AuctionHouse/AuctionHouseMgr.cpp
+++ b/src/server/game/AuctionHouse/AuctionHouseMgr.cpp
@@ -31,6 +31,8 @@
 #include "Language.h"
 #include "Log.h"
 
+#include "../../plugins/ahbot/AhBot.h"
+
 enum eAuctionHouse
 {
     AH_MINIMUM_DEPOSIT = 100
@@ -211,6 +213,9 @@ void AuctionHouseMgr::SendAuctionSuccessfulMail(AuctionEntry* auction, SQLTransa
         MailDraft(auction->BuildAuctionMailSubject(AUCTION_SUCCESSFUL), AuctionEntry::BuildAuctionMailBody(auction->bidder, auction->bid, auction->buyout, auction->deposit, auction->GetAuctionCut()))
             .AddMoney(profit)
             .SendMailTo(trans, MailReceiver(owner, auction->owner), auction, MAIL_CHECK_MASK_COPIED, sWorld->getIntConfig(CONFIG_MAIL_DELIVERY_DELAY));
+
+        // ahbot mod
+        auctionbot.Won(auction);
     }
 }
 
@@ -234,6 +239,9 @@ void AuctionHouseMgr::SendAuctionExpiredMail(AuctionEntry* auction, SQLTransacti
         MailDraft(auction->BuildAuctionMailSubject(AUCTION_EXPIRED), AuctionEntry::BuildAuctionMailBody(0, 0, auction->buyout, auction->deposit, 0))
             .AddItem(pItem)
             .SendMailTo(trans, MailReceiver(owner, auction->owner), auction, MAIL_CHECK_MASK_COPIED, 0);
+
+        // ahbot mod
+        auctionbot.Expired(auction);
     }
     else
     {
diff --git a/src/server/game/CMakeLists.txt b/src/server/game/CMakeLists.txt
index 4d41fbc..266b4cc 100644
--- a/src/server/game/CMakeLists.txt
+++ b/src/server/game/CMakeLists.txt
@@ -208,6 +208,7 @@ add_library(game STATIC
   ${game_STAT_PCH_SRC}
 )
 
+add_dependencies(game plugins revision_data.h)
 # Generate precompiled header
 if (USE_COREPCH)
   add_cxx_pch(game ${game_STAT_PCH_HDR} ${game_STAT_PCH_SRC})
diff --git a/src/server/game/DungeonFinding/LFGQueue.cpp b/src/server/game/DungeonFinding/LFGQueue.cpp
index 314803d..f822830 100644
--- a/src/server/game/DungeonFinding/LFGQueue.cpp
+++ b/src/server/game/DungeonFinding/LFGQueue.cpp
@@ -24,6 +24,8 @@
 #include "LFGMgr.h"
 #include "Log.h"
 
+#include "../Entities/Player/Player.h"
+
 namespace lfg
 {
 
@@ -520,6 +522,22 @@ LfgCompatibility LFGQueue::CheckCompatibility(GuidList check)
         return LFG_COMPATIBLES_WITH_LESS_PLAYERS;
     }
 
+    // playerbot mod
+    bool nonBotFound = false;
+    for (GuidList::const_iterator it = check.begin(); it != check.end(); ++it)
+    {
+        ObjectGuid guid = *it;
+        Player *player = sObjectMgr->GetPlayerByLowGUID(guid);
+        if (guid.IsGroup() || (player && !player->GetPlayerbotAI()))
+        {
+            nonBotFound = true;
+            break;
+        }
+    }
+    if (!nonBotFound)
+        return LFG_INCOMPATIBLES_HAS_IGNORES;
+    // end of playerbot mod
+
     ObjectGuid gguid = *check.begin();
     proposal.queues = check;
     proposal.isNew = numLfgGroups != 1 || sLFGMgr->GetOldState(gguid) != LFG_STATE_DUNGEON;
diff --git a/src/server/game/Entities/Player/Player.cpp b/src/server/game/Entities/Player/Player.cpp
index 7190a80..5d23299 100644
--- a/src/server/game/Entities/Player/Player.cpp
+++ b/src/server/game/Entities/Player/Player.cpp
@@ -102,10 +102,13 @@
 // 77
 // 78
 // 79
-// 80
+// Playerbot mod:
+#include "../../../../plugins/playerbot/playerbot.h"
+#include "../../../../plugins/playerbot/GuildTaskMgr.h"
 // Visit http://www.realmsofwarcraft.com/bb for forums and information
 //
 // End of prepatch
+
 #define ZONE_UPDATE_INTERVAL (1*IN_MILLISECONDS)
 
 #define PLAYER_SKILL_INDEX(x)       (PLAYER_SKILL_INFO_1_1 + ((x)*3))
@@ -563,6 +566,10 @@ Player::Player(WorldSession* session): Unit(true)
     manaBeforeDuel = 0;
     m_achievementMgr = new AchievementMgr(this);
     m_reputationMgr = new ReputationMgr(this);
+
+    // playerbot mod
+    m_playerbotAI = NULL;
+    m_playerbotMgr = NULL;
 }
 
 Player::~Player()
@@ -1563,6 +1570,7 @@ void Player::Update(uint32 p_time)
     //because we don't want player's ghost teleported from graveyard
     if (IsHasDelayedTeleport() && IsAlive())
         TeleportTo(m_teleport_dest, m_teleport_options);
+
     // Prepatch by LordPsyan
     // 81
     // 82
@@ -1570,7 +1578,11 @@ void Player::Update(uint32 p_time)
     // 84
     // 85
     // 86
-    // 87
+    // Playerbot mod
+    if (m_playerbotAI)
+       m_playerbotAI->UpdateAI(p_time);
+    if (m_playerbotMgr)
+       m_playerbotMgr->UpdateAI(p_time);
     // 88
     // 89
     // 90
@@ -2712,6 +2724,7 @@ void Player::RemoveFromGroup(Group* group, ObjectGuid guid, RemoveMethod method
     if (!group)
         return;
 
+    if (group)
     group->RemoveMember(guid, method, kicker, reason);
 }
 
@@ -15132,7 +15145,7 @@ void Player::RewardQuest(Quest const* quest, uint32 reward, Object* questGiver,
     if (quest->GetRewSpellCast() > 0)
     {
         SpellInfo const* spellInfo = sSpellMgr->GetSpellInfo(quest->GetRewSpellCast());
-        if (questGiver->isType(TYPEMASK_UNIT) && !spellInfo->HasEffect(SPELL_EFFECT_LEARN_SPELL) && !spellInfo->HasEffect(SPELL_EFFECT_CREATE_ITEM))
+        if (spellInfo && questGiver->isType(TYPEMASK_UNIT) && !spellInfo->HasEffect(SPELL_EFFECT_LEARN_SPELL) && !spellInfo->HasEffect(SPELL_EFFECT_CREATE_ITEM))
         {
             if (Creature* creature = GetMap()->GetCreature(questGiver->GetGUID()))
                 creature->CastSpell(this, quest->GetRewSpellCast(), true);
@@ -15143,7 +15156,7 @@ void Player::RewardQuest(Quest const* quest, uint32 reward, Object* questGiver,
     else if (quest->GetRewSpell() > 0)
     {
         SpellInfo const* spellInfo = sSpellMgr->GetSpellInfo(quest->GetRewSpell());
-        if (questGiver->isType(TYPEMASK_UNIT) && !spellInfo->HasEffect(SPELL_EFFECT_LEARN_SPELL) && !spellInfo->HasEffect(SPELL_EFFECT_CREATE_ITEM))
+        if (spellInfo && questGiver->isType(TYPEMASK_UNIT) && !spellInfo->HasEffect(SPELL_EFFECT_LEARN_SPELL) && !spellInfo->HasEffect(SPELL_EFFECT_CREATE_ITEM))
         {
             if (Creature* creature = GetMap()->GetCreature(questGiver->GetGUID()))
                 creature->CastSpell(this, quest->GetRewSpell(), true);
@@ -23524,6 +23537,9 @@ bool Player::GetsRecruitAFriendBonus(bool forXP)
 void Player::RewardPlayerAndGroupAtKill(Unit* victim, bool isBattleGround)
 {
     KillRewarder(this, victim, isBattleGround).Reward();
+    // playerbot mod
+    sGuildTaskMgr.CheckKillTask(this, victim);
+    // end of playerbot mod
 }
 
 void Player::RewardPlayerAndGroupAtEvent(uint32 creature_id, WorldObject* pRewardSource)
diff --git a/src/server/game/Entities/Player/Player.h b/src/server/game/Entities/Player/Player.h
index f59994d..b9214aa 100644
--- a/src/server/game/Entities/Player/Player.h
+++ b/src/server/game/Entities/Player/Player.h
@@ -58,6 +58,10 @@ class PlayerAI;
 
 struct CharacterCustomizeInfo;
 
+// Playerbot mod
+class PlayerbotAI;
+class PlayerbotMgr;
+
 typedef std::deque<Mail*> PlayerMails;
 
 #define PLAYER_MAX_SKILLS           127
@@ -2246,6 +2250,18 @@ class Player : public Unit, public GridObject<Player>
 
         bool CanFly() const override { return m_movementInfo.HasMovementFlag(MOVEMENTFLAG_CAN_FLY); }
 
+        // Playerbot mod:
+        // A Player can either have a playerbotMgr (to manage its bots), or have playerbotAI (if it is a bot), or
+        // neither. Code that enables bots must create the playerbotMgr and set it using SetPlayerbotMgr.
+        EquipmentSets& GetEquipmentSets() { return m_EquipmentSets; }
+        void SetPlayerbotAI(PlayerbotAI* ai) { m_playerbotAI=ai; }
+        PlayerbotAI* GetPlayerbotAI() { return m_playerbotAI; }
+        void SetPlayerbotMgr(PlayerbotMgr* mgr) { m_playerbotMgr=mgr; }
+        PlayerbotMgr* GetPlayerbotMgr() { return m_playerbotMgr; }
+        void SetBotDeathTimer() { m_deathTimer = 0; }
+        PlayerTalentMap& GetTalentMap(uint8 spec) { return *m_talents[spec]; }
+        bool MinimalLoadFromDB( QueryResult result, uint32 guid );
+
         //! Return collision height sent to client
         float GetCollisionHeight(bool mounted) const;
 
@@ -2626,7 +2642,8 @@ class Player : public Unit, public GridObject<Player>
         // 37
         // 38
         // 39
-        // 40
+        PlayerbotAI* m_playerbotAI;
+        PlayerbotMgr* m_playerbotMgr;
         // Visit http://www.realmsofwarcraft.com/bb for forums and information
         //
         // End of prepatch
diff --git a/src/server/game/Entities/Unit/Unit.cpp b/src/server/game/Entities/Unit/Unit.cpp
index 6fcd72c..0d23557 100644
--- a/src/server/game/Entities/Unit/Unit.cpp
+++ b/src/server/game/Entities/Unit/Unit.cpp
@@ -1963,6 +1963,7 @@ void Unit::CalcHealAbsorb(Unit* victim, SpellInfo const* healSpell, uint32 &heal
     healAmount = RemainingHeal;
 }
 
+
 void Unit::AttackerStateUpdate (Unit* victim, WeaponAttackType attType, bool extra)
 {
     if (HasUnitState(UNIT_STATE_CANNOT_AUTOATTACK) || HasFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_PACIFIED))
diff --git a/src/server/game/Groups/Group.h b/src/server/game/Groups/Group.h
index 42fd9b5..dbc7f2e 100644
--- a/src/server/game/Groups/Group.h
+++ b/src/server/game/Groups/Group.h
@@ -324,6 +324,11 @@ class Group
         // FG: evil hacks
         void BroadcastGroupUpdate(void);
 
+        // ai playerbot mod
+        ObjectGuid GetTargetIcon(int index) { return m_targetIcons[index]; }
+        Rolls* GetRolls() { return &RollId; }
+        // end
+
     protected:
         bool _setMembersGroup(ObjectGuid guid, uint8 group);
         void _homebindIfInstance(Player* player);
diff --git a/src/server/game/Handlers/CharacterHandler.cpp b/src/server/game/Handlers/CharacterHandler.cpp
index 1c31bf4..003df95 100644
--- a/src/server/game/Handlers/CharacterHandler.cpp
+++ b/src/server/game/Handlers/CharacterHandler.cpp
@@ -46,6 +46,9 @@
 #include "WorldPacket.h"
 #include "WorldSession.h"
 
+// Playerbot mod:
+#include "../../plugins/playerbot/playerbot.h"
+#include "../../plugins/playerbot/PlayerbotAIConfig.h"
 
 class LoginQueryHolder : public SQLQueryHolder
 {
@@ -60,6 +63,78 @@ class LoginQueryHolder : public SQLQueryHolder
         bool Initialize();
 };
 
+class PlayerbotLoginQueryHolder : public LoginQueryHolder
+{
+private:
+    uint32 masterAccountId;
+    PlayerbotHolder* playerbotHolder;
+
+public:
+    PlayerbotLoginQueryHolder(PlayerbotHolder* playerbotHolder, uint32 masterAccount, uint32 accountId, uint64 guid)
+        : LoginQueryHolder(accountId, ObjectGuid(guid)), masterAccountId(masterAccount), playerbotHolder(playerbotHolder) { }
+
+public:
+    uint32 GetMasterAccountId() const { return masterAccountId; }
+    PlayerbotHolder* GetPlayerbotHolder() { return playerbotHolder; }
+};
+
+void PlayerbotHolder::AddPlayerBot(uint64 playerGuid, uint32 masterAccount)
+{
+    // has bot already been added?
+	Player* bot = sObjectMgr->GetPlayerByLowGUID(playerGuid);
+
+	if (bot && bot->IsInWorld())
+        return;
+
+    uint32 accountId = sObjectMgr->GetPlayerAccountIdByGUID(ObjectGuid(playerGuid));
+    if (accountId == 0)
+        return;
+
+    PlayerbotLoginQueryHolder *holder = new PlayerbotLoginQueryHolder(this, masterAccount, accountId, playerGuid);
+    if(!holder->Initialize())
+    {
+        delete holder;                                      // delete all unprocessed queries
+        return;
+    }
+
+    QueryResultHolderFuture future = CharacterDatabase.DelayQueryHolder(holder);
+    future.get();
+
+    WorldSession* masterSession = masterAccount ? sWorld->FindSession(masterAccount) : NULL;
+    uint32 botAccountId = holder->GetAccountId();
+    std::string accountName;
+	AccountMgr::GetName(botAccountId, accountName);
+	WorldSession *botSession = new WorldSession(botAccountId, std::move(accountName), NULL, SEC_PLAYER, 2, 0, LOCALE_enUS, 0, false);
+
+    botSession->HandlePlayerLogin(holder); // will delete lqh
+
+	bot = botSession->GetPlayer();
+	if (!bot)
+		return;
+
+	PlayerbotMgr *mgr = bot->GetPlayerbotMgr();
+	bot->SetPlayerbotMgr(NULL);
+	delete mgr;
+	sRandomPlayerbotMgr.OnPlayerLogout(bot);
+
+    bool allowed = false;
+    if (botAccountId == masterAccount)
+        allowed = true;
+    else if (masterSession && sPlayerbotAIConfig.allowGuildBots && bot->GetGuildId() == masterSession->GetPlayer()->GetGuildId())
+        allowed = true;
+    else if (sPlayerbotAIConfig.IsInRandomAccountList(botAccountId))
+        allowed = true;
+
+    if (allowed)
+        OnBotLogin(bot);
+    else if (masterSession)
+    {
+        ChatHandler ch(masterSession);
+        ch.PSendSysMessage("You are not allowed to control bot %s...", bot->GetName().c_str());
+        LogoutPlayerBot(bot->GetGUID());
+    }
+}
+
 bool LoginQueryHolder::Initialize()
 {
     SetSize(MAX_PLAYER_LOGIN_QUERY);
@@ -993,6 +1068,14 @@ void WorldSession::HandlePlayerLogin(LoginQueryHolder* holder)
     // Handle Login-Achievements (should be handled after loading)
     _player->UpdateAchievementCriteria(ACHIEVEMENT_CRITERIA_TYPE_ON_LOGIN, 1);
 
+    // playerbot mod
+    if (!_player->GetPlayerbotAI())
+    {
+        _player->SetPlayerbotMgr(new PlayerbotMgr(_player));
+        sRandomPlayerbotMgr.OnPlayerLogin(_player);
+    }
+    // end of playerbot mod
+
     sScriptMgr->OnPlayerLogin(pCurrChar, firstLogin);
     // Prepatch by LordPsyan
     // 01
diff --git a/src/server/game/Handlers/ChatHandler.cpp b/src/server/game/Handlers/ChatHandler.cpp
index f7fd9c8..b2a0488 100644
--- a/src/server/game/Handlers/ChatHandler.cpp
+++ b/src/server/game/Handlers/ChatHandler.cpp
@@ -49,7 +49,8 @@
 // 68
 // 69
 // 70
-// 71
+// Playerbot mod
+#include "../../plugins/playerbot/playerbot.h"
 // 72
 // 73
 // 74
@@ -62,6 +63,7 @@
 // Visit http://www.realmsofwarcraft.com/bb for forums and information
 //
 // End of prepatch
+
 void WorldSession::HandleMessagechatOpcode(WorldPacket& recvData)
 {
     uint32 type;
@@ -320,7 +322,18 @@ void WorldSession::HandleMessagechatOpcode(WorldPacket& recvData)
                 (HasPermission(rbac::RBAC_PERM_CAN_FILTER_WHISPERS) && !sender->isAcceptWhispers() && !sender->IsInWhisperWhiteList(receiver->GetGUID())))
                 sender->AddWhisperWhiteList(receiver->GetGUID());
 
-            GetPlayer()->Whisper(msg, Language(lang), receiver);
+            // Playerbot mod: handle whispered command to bot
+            if (receiver->GetPlayerbotAI() && lang != LANG_ADDON)
+            {
+                receiver->GetPlayerbotAI()->HandleCommand(type, msg, *GetPlayer());
+                receiver->m_speakTime = 0;
+                receiver->m_speakCount = 0;
+            }
+            else
+            {
+                GetPlayer()->Whisper(msg, Language(lang), receiver);
+            }
+            // END Playerbot mod
         } break;
         case CHAT_MSG_PARTY:
         case CHAT_MSG_PARTY_LEADER:
@@ -337,6 +350,19 @@ void WorldSession::HandleMessagechatOpcode(WorldPacket& recvData)
             if (type == CHAT_MSG_PARTY_LEADER && !group->IsLeader(sender->GetGUID()))
                 return;
 
+            // Playerbot mod: broadcast message to bot members
+            for(GroupReference* itr = group->GetFirstMember(); itr != NULL; itr=itr->next())
+            {
+                Player* player = itr->GetSource();
+                if (player && player->GetPlayerbotAI() && lang != LANG_ADDON)
+                {
+                    player->GetPlayerbotAI()->HandleCommand(type, msg, *GetPlayer());
+                    GetPlayer()->m_speakTime = 0;
+                    GetPlayer()->m_speakCount = 0;
+                }
+            }
+            // END Playerbot mod
+
             sScriptMgr->OnPlayerChat(GetPlayer(), type, lang, msg, group);
 
             WorldPacket data;
@@ -353,6 +379,18 @@ void WorldSession::HandleMessagechatOpcode(WorldPacket& recvData)
 
                     guild->BroadcastToGuild(this, false, msg, lang == LANG_ADDON ? LANG_ADDON : LANG_UNIVERSAL);
                 }
+                // Playerbot mod: broadcast message to bot members
+                PlayerbotMgr *mgr = GetPlayer()->GetPlayerbotMgr();
+                if (mgr && lang != LANG_ADDON)
+                {
+                    for (PlayerBotMap::const_iterator it = mgr->GetPlayerBotsBegin(); it != mgr->GetPlayerBotsEnd(); ++it)
+                    {
+                        Player* const bot = it->second;
+                        if (bot->GetGuildId() == GetPlayer()->GetGuildId())
+                            bot->GetPlayerbotAI()->HandleCommand(type, msg, *GetPlayer());
+                    }
+                }
+                // END Playerbot mod
             }
         } break;
         case CHAT_MSG_OFFICER:
@@ -378,6 +416,19 @@ void WorldSession::HandleMessagechatOpcode(WorldPacket& recvData)
                     return;
             }
 
+            // Playerbot mod: broadcast message to bot members
+            for(GroupReference* itr = group->GetFirstMember(); itr != NULL; itr=itr->next())
+            {
+                Player* player = itr->GetSource();
+                if (player && player->GetPlayerbotAI() && lang != LANG_ADDON)
+                {
+                    player->GetPlayerbotAI()->HandleCommand(type, msg, *GetPlayer());
+                    GetPlayer()->m_speakTime = 0;
+                    GetPlayer()->m_speakCount = 0;
+                }
+            }
+            // END Playerbot mod
+
             sScriptMgr->OnPlayerChat(GetPlayer(), type, lang, msg, group);
 
             WorldPacket data;
@@ -395,6 +446,19 @@ void WorldSession::HandleMessagechatOpcode(WorldPacket& recvData)
                     return;
             }
 
+            // Playerbot mod: broadcast message to bot members
+            for(GroupReference* itr = group->GetFirstMember(); itr != NULL; itr=itr->next())
+            {
+                Player* player = itr->GetSource();
+                if (player && player->GetPlayerbotAI() && lang != LANG_ADDON)
+                {
+                    player->GetPlayerbotAI()->HandleCommand(type, msg, *GetPlayer());
+                    GetPlayer()->m_speakTime = 0;
+                    GetPlayer()->m_speakCount = 0;
+                }
+            }
+            // END Playerbot mod
+
             sScriptMgr->OnPlayerChat(GetPlayer(), type, lang, msg, group);
 
             WorldPacket data;
@@ -407,6 +471,19 @@ void WorldSession::HandleMessagechatOpcode(WorldPacket& recvData)
             if (!group || !group->isRaidGroup() || !(group->IsLeader(GetPlayer()->GetGUID()) || group->IsAssistant(GetPlayer()->GetGUID())) || group->isBGGroup())
                 return;
 
+            // Playerbot mod: broadcast message to bot members
+            for(GroupReference* itr = group->GetFirstMember(); itr != NULL; itr=itr->next())
+            {
+                Player* player = itr->GetSource();
+                if (player && player->GetPlayerbotAI() && lang != LANG_ADDON)
+                {
+                    player->GetPlayerbotAI()->HandleCommand(type, msg, *GetPlayer());
+                    GetPlayer()->m_speakTime = 0;
+                    GetPlayer()->m_speakCount = 0;
+                }
+            }
+            // END Playerbot mod
+
             sScriptMgr->OnPlayerChat(GetPlayer(), type, lang, msg, group);
 
             WorldPacket data;
@@ -455,6 +532,13 @@ void WorldSession::HandleMessagechatOpcode(WorldPacket& recvData)
             {
                 if (Channel* chn = cMgr->GetChannel(channel, sender))
                 {
+                    // Playerbot mod: broadcast message to bot members
+                    if (_player->GetPlayerbotMgr() && lang != LANG_ADDON && chn->GetFlags() & 0x18)
+                    {
+                        _player->GetPlayerbotMgr()->HandleCommand(type, msg);
+                    }
+                    sRandomPlayerbotMgr.HandleCommand(type, msg, *_player);
+                    // END Playerbot mod
                     sScriptMgr->OnPlayerChat(sender, type, lang, msg, chn);
                     chn->Say(sender->GetGUID(), msg.c_str(), lang);
                 }
diff --git a/src/server/game/Movement/MotionMaster.cpp b/src/server/game/Movement/MotionMaster.cpp
index 2a57524..c50ff0b 100644
--- a/src/server/game/Movement/MotionMaster.cpp
+++ b/src/server/game/Movement/MotionMaster.cpp
@@ -362,7 +362,6 @@ void MotionMaster::MoveJumpTo(float angle, float speedXY, float speedZ)
         return;
 
     float x, y, z;
-
     float moveTimeHalf = speedZ / Movement::gravity;
     float dist = 2 * moveTimeHalf * speedXY;
     _owner->GetClosePoint(x, y, z, _owner->GetObjectSize(), dist, angle);
diff --git a/src/server/game/Server/WorldSession.cpp b/src/server/game/Server/WorldSession.cpp
index c380c1a..c1e0570 100644
--- a/src/server/game/Server/WorldSession.cpp
+++ b/src/server/game/Server/WorldSession.cpp
@@ -46,6 +46,9 @@
 
 #include <zlib.h>
 
+// Playerbot mod
+#include "../../plugins/playerbot/playerbot.h"
+
 namespace {
 
 std::string const DefaultPlayerName = "<none>";
@@ -189,6 +192,14 @@ ObjectGuid::LowType WorldSession::GetGUIDLow() const
 /// Send a packet to the client
 void WorldSession::SendPacket(WorldPacket* packet)
 {
+    // Playerbot mod: send packet to bot AI
+    if (GetPlayer()) {
+        if (GetPlayer()->GetPlayerbotAI())
+            GetPlayer()->GetPlayerbotAI()->HandleBotOutgoingPacket(*packet);
+        else if (GetPlayer()->GetPlayerbotMgr())
+            GetPlayer()->GetPlayerbotMgr()->HandleMasterOutgoingPacket(*packet);
+    }
+
     if (!m_Socket)
         return;
 
@@ -259,6 +270,8 @@ void WorldSession::LogUnprocessedTail(WorldPacket* packet)
 /// Update the WorldSession (triggered by World update)
 bool WorldSession::Update(uint32 diff, PacketFilter& updater)
 {
+    if (GetPlayer() && GetPlayer()->GetPlayerbotAI()) return true;
+
     /// Update Timeout timer.
     UpdateTimeOutTime(diff);
 
@@ -321,6 +334,11 @@ bool WorldSession::Update(uint32 diff, PacketFilter& updater)
                             sScriptMgr->OnPacketReceive(this, *packet);
                             (this->*opHandle.handler)(*packet);
                             LogUnprocessedTail(packet);
+
+                            // playerbot mod
+                            if (_player && _player->GetPlayerbotMgr())
+                                _player->GetPlayerbotMgr()->HandleMasterIncomingPacket(*packet);
+                            // playerbot mod end
                         }
                         // lag can cause STATUS_LOGGEDIN opcodes to arrive after the player started a transfer
                         break;
@@ -400,6 +418,11 @@ bool WorldSession::Update(uint32 diff, PacketFilter& updater)
             break;
     }
 
+    // playerbot mod
+    if (GetPlayer() && GetPlayer()->GetPlayerbotMgr())
+        GetPlayer()->GetPlayerbotMgr()->UpdateSessions(0);
+    // end of playerbot mod
+
     if (m_Socket && m_Socket->IsOpen() && _warden)
         _warden->Update();
 
@@ -449,6 +472,11 @@ void WorldSession::LogoutPlayer(bool save)
         if (ObjectGuid lguid = _player->GetLootGUID())
             DoLootRelease(lguid);
 
+        // Playerbot mod: log out all player bots owned by this toon
+        if (GetPlayer()->GetPlayerbotMgr())
+            GetPlayer()->GetPlayerbotMgr()->LogoutAllBots();
+        sRandomPlayerbotMgr.OnPlayerLogout(_player);
+
         ///- If the player just died before logging out, make him appear as a ghost
         if (_player->GetDeathTimer())
         {
@@ -533,7 +561,8 @@ void WorldSession::LogoutPlayer(bool save)
         _player->CleanupChannels();
 
         ///- If the player is in a group (or invited), remove him. If the group if then only 1 person, disband the group.
-        _player->UninviteFromGroup();
+        // playerbot mod
+        //_player->UninviteFromGroup();
 
         // remove player from the group if he is:
         // a) in group; b) not in raid group; c) logging out normally (not being kicked or disconnected)
@@ -1615,3 +1644,14 @@ uint32 WorldSession::DosProtection::GetMaxPacketCounterAllowed(uint16 opcode) co
 
     return maxPacketCounterAllowed;
 }
+
+void WorldSession::HandleBotPackets()
+{
+    WorldPacket* packet;
+    while (_recvQueue.next(packet))
+    {
+        OpcodeHandler& opHandle = opcodeTable[packet->GetOpcode()];
+        (this->*opHandle.handler)(*packet);
+        delete packet;
+    }
+}
diff --git a/src/server/game/Server/WorldSession.h b/src/server/game/Server/WorldSession.h
index 2253b6b..a2ce314 100644
--- a/src/server/game/Server/WorldSession.h
+++ b/src/server/game/Server/WorldSession.h
@@ -190,7 +190,8 @@ class CharacterCreateInfo
     friend class WorldSession;
     friend class Player;
 
-    protected:
+    // playerbot mod
+    public:
         /// User specified variables
         std::string Name;
         uint8 Race       = 0;
@@ -819,6 +820,10 @@ class WorldSession
         void HandleBattlemasterJoinArena(WorldPacket& recvData);
         void HandleReportPvPAFK(WorldPacket& recvData);
 
+        // playerbot mod
+        void HandleBotPackets();
+        // end of playerbot mod
+
         // Battlefield
         void SendBfInvitePlayerToWar(uint32 battleId, uint32 zoneId, uint32 time);
         void SendBfInvitePlayerToQueue(uint32 battleId);
diff --git a/src/server/game/World/World.cpp b/src/server/game/World/World.cpp
index f904f30..1bcc316 100644
--- a/src/server/game/World/World.cpp
+++ b/src/server/game/World/World.cpp
@@ -82,7 +82,10 @@
 // 15
 // 16
 // 17
-// 18
+// playerbot mod
+#include "../../plugins/ahbot/AhBot.h"
+#include "../../plugins/playerbot/PlayerbotAIConfig.h"
+#include "../../plugins/playerbot/RandomPlayerbotMgr.h"
 // 19
 // 20
 // Visit http://www.realmsofwarcraft.com/bb for forums and information
@@ -1304,6 +1307,9 @@ void World::LoadConfigSettings(bool reload)
         m_timers[WUPDATE_AUTOBROADCAST].Reset();
     }
 
+    // RandomBot AutoLogin
+    m_bool_configs[CONFIG_RANDOMBOTAUTOLOGIN] = sConfigMgr->GetBoolDefault("RandomBotAutoLogin.On", true);
+
     // MySQL ping time interval
     m_int_configs[CONFIG_DB_PING_INTERVAL] = sConfigMgr->GetIntDefault("MaxPingTime", 30);
 
@@ -1963,6 +1969,18 @@ void World::SetInitialWorldSettings()
 
     if (uint32 realmId = sConfigMgr->GetIntDefault("RealmID", 0)) // 0 reserved for auth
         sLog->SetRealmId(realmId);
+
+    TC_LOG_INFO("server.loading", "Initializing AuctionHouseBot...");
+    auctionbot.Init();
+
+    sPlayerbotAIConfig.Initialize();
+    uint8 randomBotAutologin = sWorld->getBoolConfig(CONFIG_RANDOMBOTAUTOLOGIN);
+    if (randomBotAutologin == 0)
+    {
+        return;
+    } else {
+        sRandomPlayerbotMgr.UpdateAIInternal(0);
+    }
 }
 
 void World::DetectDBCLang()
@@ -2132,8 +2150,15 @@ void World::Update(uint32 diff)
 
         ///- Handle expired auctions
         sAuctionMgr->Update();
+
+        // ahbot mod
+        auctionbot.Update();
     }
 
+    // playerbot mod
+    sRandomPlayerbotMgr.UpdateAI(diff);
+    sRandomPlayerbotMgr.UpdateSessions(diff);
+
     if (m_timers[WUPDATE_AUCTIONS_PENDING].Passed())
     {
         m_timers[WUPDATE_AUCTIONS_PENDING].Reset();
@@ -2142,11 +2167,12 @@ void World::Update(uint32 diff)
     }
 
     /// <li> Handle AHBot operations
-    if (m_timers[WUPDATE_AHBOT].Passed())
-    {
-        sAuctionBot->Update();
-        m_timers[WUPDATE_AHBOT].Reset();
-    }
+    // if (m_timers[WUPDATE_AHBOT].Passed())
+    //{
+    //    sAuctionBot->Update();
+    //    m_timers[WUPDATE_AHBOT].Reset();
+    //}
+    // end of playerbot mod
 
     /// <li> Handle session updates when the timer has passed
     ResetTimeDiffRecord();
@@ -2711,6 +2737,10 @@ void World::ShutdownServ(uint32 time, uint32 options, uint8 exitcode, const std:
         ShutdownMsg(true, nullptr, reason);
     }
 
+    // playerbot mod
+    sRandomPlayerbotMgr.LogoutAllBots();
+    // end of playerbot mod
+
     sScriptMgr->OnShutdownInitiate(ShutdownExitCode(exitcode), ShutdownMask(options));
 }
 
diff --git a/src/server/game/World/World.h b/src/server/game/World/World.h
index 492a3bd..999525a 100644
--- a/src/server/game/World/World.h
+++ b/src/server/game/World/World.h
@@ -143,6 +143,7 @@ enum WorldBoolConfigs
     CONFIG_SHOW_MUTE_IN_WORLD,
     CONFIG_SHOW_BAN_IN_WORLD,
     CONFIG_AUTOBROADCAST,
+    CONFIG_RANDOMBOTAUTOLOGIN,
     CONFIG_ALLOW_TICKETS,
     CONFIG_DELETE_CHARACTER_TICKET_TRACE,
     CONFIG_DBC_ENFORCE_ITEM_ATTRIBUTES,
diff --git a/src/server/scripts/Commands/cs_ahbot.cpp b/src/server/scripts/Commands/cs_ahbot.cpp
index 65e9039..9415d89 100644
--- a/src/server/scripts/Commands/cs_ahbot.cpp
+++ b/src/server/scripts/Commands/cs_ahbot.cpp
@@ -241,5 +241,6 @@ template bool ahbot_commandscript::HandleAHBotItemsRatioHouseCommand<AUCTION_HOU
 
 void AddSC_ahbot_commandscript()
 {
-    new ahbot_commandscript();
+    // playerbot mod
+    // new ahbot_commandscript();
 }
diff --git a/src/server/scripts/Commands/cs_misc.cpp b/src/server/scripts/Commands/cs_misc.cpp
index c70246f..aa61d00 100644
--- a/src/server/scripts/Commands/cs_misc.cpp
+++ b/src/server/scripts/Commands/cs_misc.cpp
@@ -37,6 +37,10 @@
 #include "DisableMgr.h"
 #include "SpellHistory.h"
 
+#include "../../../plugins/ahbot/AhBot.h"
+#include "../../../plugins/playerbot/playerbot.h"
+#include "../../../plugins/playerbot/GuildTaskMgr.h"
+
 class misc_commandscript : public CommandScript
 {
 public:
@@ -97,6 +101,11 @@ public:
             { "unstuck",          rbac::RBAC_PERM_COMMAND_UNSTUCK,           true, &HandleUnstuckCommand,          "" },
             { "wchange",          rbac::RBAC_PERM_COMMAND_WCHANGE,          false, &HandleChangeWeather,           "" },
             { "mailbox",          rbac::RBAC_PERM_COMMAND_MAILBOX,          false, &HandleMailBoxCommand,          "" },
+            // playerbot mod
+            { "ahbot",            rbac::RBAC_PERM_COMMAND_GM,                true,  &ahbot::AhBot::HandleAhBotCommand, "" },
+            { "rndbot",           rbac::RBAC_PERM_COMMAND_GM,                true,  &RandomPlayerbotMgr::HandlePlayerbotConsoleCommand, "" },
+            { "bot",              195                       ,               false, &PlayerbotMgr::HandlePlayerbotMgrCommand, "" },
+            { "gtask",            rbac::RBAC_PERM_COMMAND_GM,                true,  &GuildTaskMgr::HandleConsoleCommand, "" },
         };
         return commandTable;
     }
diff --git a/src/server/scripts/Spells/spell_paladin.cpp b/src/server/scripts/Spells/spell_paladin.cpp
index 8bd4b3e..ee166ff 100644
--- a/src/server/scripts/Spells/spell_paladin.cpp
+++ b/src/server/scripts/Spells/spell_paladin.cpp
@@ -125,6 +125,7 @@ class spell_pal_ardent_defender : public SpellScriptLoader
             {
                 healPct = GetSpellInfo()->Effects[EFFECT_1].CalcValue();
                 absorbPct = GetSpellInfo()->Effects[EFFECT_0].CalcValue();
+
                 return GetUnitOwner()->GetTypeId() == TYPEID_PLAYER;
             }
 
@@ -139,6 +140,7 @@ class spell_pal_ardent_defender : public SpellScriptLoader
                 Unit* victim = GetTarget();
                 int32 remainingHealth = victim->GetHealth() - dmgInfo.GetDamage();
                 uint32 allowedHealth = victim->CountPctFromMaxHealth(35);
+
                 // If damage kills us
                 if (remainingHealth <= 0 && !victim->GetSpellHistory()->HasCooldown(PAL_SPELL_ARDENT_DEFENDER_HEAL))
                 {
diff --git a/src/server/worldserver/CMakeLists.txt b/src/server/worldserver/CMakeLists.txt
index 9949598..9d770b0 100644
--- a/src/server/worldserver/CMakeLists.txt
+++ b/src/server/worldserver/CMakeLists.txt
@@ -131,6 +131,7 @@ set_target_properties(worldserver PROPERTIES LINK_FLAGS "${worldserver_LINK_FLAG
 
 target_link_libraries(worldserver
   game
+  plugins
   scripts
   shared
   database
diff --git a/src/server/worldserver/worldserver.conf.dist b/src/server/worldserver/worldserver.conf.dist
index 4837a24..9b025e1 100644
--- a/src/server/worldserver/worldserver.conf.dist
+++ b/src/server/worldserver/worldserver.conf.dist
@@ -26,6 +26,25 @@ PrepatchGI.Added = 0
 ###################################################################################################
 
 ###################################################################################################
+#
+# Random Playerbot Configuration
+#
+#
+# If you want random bots to automatically enter world, you must set
+# this to 1.
+#
+# RandomBotAutoLogin.On
+#         default = 0 (Bot will not enter world)
+#                   1 (Random bots spawned)
+
+RandomBotAutoLogin.On = 1
+
+#
+
+#
+###################################################################################################
+
+###################################################################################################
 # SECTION INDEX
 #
 #    EXAMPLE CONFIG
-- 
2.1.4

